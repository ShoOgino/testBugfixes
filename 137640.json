{"path":"solr/core/src/test/org/apache/solr/search/TestFilteredDocIdSet#testNullIteratorFilteredDocIdSet().mjava","commits":[{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFilteredDocIdSet#testNullIteratorFilteredDocIdSet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testNullIteratorFilteredDocIdSet().mjava","sourceNew":"  public void testNullIteratorFilteredDocIdSet() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"c\", \"val\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = newSearcher(reader);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n      // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        final DocIdSet innerNullIteratorSet = new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          } \n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n        return new FilteredDocIdSet(innerNullIteratorSet) {\n          @Override\n          protected boolean match(int docid) {\n            return true;\n          }\n        };\n      }\n      @Override\n      public String toString(String field) {\n        return \"nullDocIdSetFilter\";\n      }\n    };\n    \n    Query filtered = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(f, Occur.FILTER)\n        .build();\n    Assert.assertEquals(0, searcher.search(filtered, 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullIteratorFilteredDocIdSet() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"c\", \"val\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = newSearcher(reader);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n      // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        final DocIdSet innerNullIteratorSet = new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          } \n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n        return new FilteredDocIdSet(innerNullIteratorSet) {\n          @Override\n          protected boolean match(int docid) {\n            return true;\n          }\n        };\n      }\n      @Override\n      public String toString(String field) {\n        return \"nullDocIdSetFilter\";\n      }\n    };\n    \n    Query filtered = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(f, Occur.FILTER)\n        .build();\n    Assert.assertEquals(0, searcher.search(filtered, 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFilteredDocIdSet#testNullIteratorFilteredDocIdSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFilteredDocIdSet#testNullIteratorFilteredDocIdSet().mjava","sourceNew":"  public void testNullIteratorFilteredDocIdSet() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"c\", \"val\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = newSearcher(reader);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n      // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        final DocIdSet innerNullIteratorSet = new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          } \n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n        return new FilteredDocIdSet(innerNullIteratorSet) {\n          @Override\n          protected boolean match(int docid) {\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"nullDocIdSetFilter\";\n      }\n      \n      @Override\n      public boolean equals(Object other) {\n        return other == this;\n      }\n      \n      @Override\n      public int hashCode() {\n        return System.identityHashCode(this);\n      }\n    };\n    \n    Query filtered = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(f, Occur.FILTER)\n        .build();\n    Assert.assertEquals(0, searcher.search(filtered, 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullIteratorFilteredDocIdSet() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"c\", \"val\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = newSearcher(reader);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n      // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        final DocIdSet innerNullIteratorSet = new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          } \n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n        return new FilteredDocIdSet(innerNullIteratorSet) {\n          @Override\n          protected boolean match(int docid) {\n            return true;\n          }\n        };\n      }\n      @Override\n      public String toString(String field) {\n        return \"nullDocIdSetFilter\";\n      }\n    };\n    \n    Query filtered = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(f, Occur.FILTER)\n        .build();\n    Assert.assertEquals(0, searcher.search(filtered, 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFilteredDocIdSet#testNullIteratorFilteredDocIdSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFilteredDocIdSet#testNullIteratorFilteredDocIdSet().mjava","sourceNew":"  public void testNullIteratorFilteredDocIdSet() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"c\", \"val\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = newSearcher(reader);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n      // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        final DocIdSet innerNullIteratorSet = new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          } \n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n        return new FilteredDocIdSet(innerNullIteratorSet) {\n          @Override\n          protected boolean match(int docid) {\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"nullDocIdSetFilter\";\n      }\n      \n      @Override\n      public boolean equals(Object other) {\n        return other == this;\n      }\n      \n      @Override\n      public int hashCode() {\n        return System.identityHashCode(this);\n      }\n    };\n    \n    Query filtered = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(f, Occur.FILTER)\n        .build();\n    Assert.assertEquals(0, searcher.search(filtered, 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullIteratorFilteredDocIdSet() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"c\", \"val\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = newSearcher(reader);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n      // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        final DocIdSet innerNullIteratorSet = new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          } \n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n        return new FilteredDocIdSet(innerNullIteratorSet) {\n          @Override\n          protected boolean match(int docid) {\n            return true;\n          }\n        };\n      }\n      @Override\n      public String toString(String field) {\n        return \"nullDocIdSetFilter\";\n      }\n    };\n    \n    Query filtered = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(f, Occur.FILTER)\n        .build();\n    Assert.assertEquals(0, searcher.search(filtered, 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6d71c47cb42702580f18a54321282c0238c2d2a","date":1532960436,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFilteredDocIdSet#testNullIteratorFilteredDocIdSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFilteredDocIdSet#testNullIteratorFilteredDocIdSet().mjava","sourceNew":"  public void testNullIteratorFilteredDocIdSet() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"c\", \"val\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = newSearcher(reader);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n      // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        final DocIdSet innerNullIteratorSet = new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          } \n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n        return new FilteredDocIdSet(innerNullIteratorSet) {\n          @Override\n          protected boolean match(int docid) {\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"nullDocIdSetFilter\";\n      }\n      \n      @Override\n      public boolean equals(Object other) {\n        return other == this;\n      }\n      \n      @Override\n      public int hashCode() {\n        return System.identityHashCode(this);\n      }\n    };\n    \n    Query filtered = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(f, Occur.FILTER)\n        .build();\n    Assert.assertEquals(0, searcher.search(filtered, 10).totalHits.value);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullIteratorFilteredDocIdSet() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"c\", \"val\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = newSearcher(reader);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n      // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        final DocIdSet innerNullIteratorSet = new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          } \n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n        return new FilteredDocIdSet(innerNullIteratorSet) {\n          @Override\n          protected boolean match(int docid) {\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"nullDocIdSetFilter\";\n      }\n      \n      @Override\n      public boolean equals(Object other) {\n        return other == this;\n      }\n      \n      @Override\n      public int hashCode() {\n        return System.identityHashCode(this);\n      }\n    };\n    \n    Query filtered = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(f, Occur.FILTER)\n        .build();\n    Assert.assertEquals(0, searcher.search(filtered, 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFilteredDocIdSet#testNullIteratorFilteredDocIdSet().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFilteredDocIdSet#testNullIteratorFilteredDocIdSet().mjava","sourceNew":"  public void testNullIteratorFilteredDocIdSet() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"c\", \"val\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = newSearcher(reader);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits.value);\n    \n      // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        final DocIdSet innerNullIteratorSet = new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          } \n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n        return new FilteredDocIdSet(innerNullIteratorSet) {\n          @Override\n          protected boolean match(int docid) {\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"nullDocIdSetFilter\";\n      }\n      \n      @Override\n      public boolean equals(Object other) {\n        return other == this;\n      }\n      \n      @Override\n      public int hashCode() {\n        return System.identityHashCode(this);\n      }\n    };\n    \n    Query filtered = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(f, Occur.FILTER)\n        .build();\n    Assert.assertEquals(0, searcher.search(filtered, 10).totalHits.value);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNullIteratorFilteredDocIdSet() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"c\", \"val\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    // First verify the document is searchable.\n    IndexSearcher searcher = newSearcher(reader);\n    Assert.assertEquals(1, searcher.search(new MatchAllDocsQuery(), 10).totalHits);\n    \n      // Now search w/ a Filter which returns a null DocIdSet\n    Filter f = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) {\n        final DocIdSet innerNullIteratorSet = new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() {\n            return null;\n          } \n\n          @Override\n          public long ramBytesUsed() {\n            return 0L;\n          }\n        };\n        return new FilteredDocIdSet(innerNullIteratorSet) {\n          @Override\n          protected boolean match(int docid) {\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"nullDocIdSetFilter\";\n      }\n      \n      @Override\n      public boolean equals(Object other) {\n        return other == this;\n      }\n      \n      @Override\n      public int hashCode() {\n        return System.identityHashCode(this);\n      }\n    };\n    \n    Query filtered = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(f, Occur.FILTER)\n        .build();\n    Assert.assertEquals(0, searcher.search(filtered, 10).totalHits.value);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d52e48927ca4ef3655a261f2230b968b6fdf3608":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["c6d71c47cb42702580f18a54321282c0238c2d2a"],"c6d71c47cb42702580f18a54321282c0238c2d2a":["0e7bc21595222ae4f75509300fbb7726691f387f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d52e48927ca4ef3655a261f2230b968b6fdf3608","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"d52e48927ca4ef3655a261f2230b968b6fdf3608":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"0e7bc21595222ae4f75509300fbb7726691f387f":["c6d71c47cb42702580f18a54321282c0238c2d2a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6d71c47cb42702580f18a54321282c0238c2d2a":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}