{"path":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestSmartChineseFactories#testTokenizer().mjava","commits":[{"id":"1696b0fba3bb8e0d7e0cc23470f1bed1d98b4edd","date":1288709498,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestSmartChineseFactories#testTokenizer().mjava","pathOld":"/dev/null","sourceNew":"  /** Test showing the behavior with whitespace */\n  public void testTokenizer() throws Exception {\n    String sentence = \"我购买了道具和服装。我购买了道具和服装。\";\n    SmartChineseSentenceTokenizerFactory tokenizerFactory = new SmartChineseSentenceTokenizerFactory();\n    Tokenizer tokenizer = tokenizerFactory.create(new StringReader(sentence));\n    SmartChineseWordTokenFilterFactory factory = new SmartChineseWordTokenFilterFactory();\n    TokenStream ts = factory.create(tokenizer);\n    // TODO: fix smart chinese to not emit punctuation tokens\n    // at the moment: you have to clean up with WDF, or use the stoplist, etc\n    assertTokenStreamContents(ts, \n       new String[] { \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\", \n        \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\"\n        });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestSmartChineseFactories#testTokenizer().mjava","pathOld":"/dev/null","sourceNew":"  /** Test showing the behavior with whitespace */\n  public void testTokenizer() throws Exception {\n    String sentence = \"我购买了道具和服装。我购买了道具和服装。\";\n    SmartChineseSentenceTokenizerFactory tokenizerFactory = new SmartChineseSentenceTokenizerFactory();\n    Tokenizer tokenizer = tokenizerFactory.create(new StringReader(sentence));\n    SmartChineseWordTokenFilterFactory factory = new SmartChineseWordTokenFilterFactory();\n    TokenStream ts = factory.create(tokenizer);\n    // TODO: fix smart chinese to not emit punctuation tokens\n    // at the moment: you have to clean up with WDF, or use the stoplist, etc\n    assertTokenStreamContents(ts, \n       new String[] { \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\", \n        \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\"\n        });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestSmartChineseFactories#testTokenizer().mjava","pathOld":"/dev/null","sourceNew":"  /** Test showing the behavior with whitespace */\n  public void testTokenizer() throws Exception {\n    String sentence = \"我购买了道具和服装。我购买了道具和服装。\";\n    SmartChineseSentenceTokenizerFactory tokenizerFactory = new SmartChineseSentenceTokenizerFactory();\n    Tokenizer tokenizer = tokenizerFactory.create(new StringReader(sentence));\n    SmartChineseWordTokenFilterFactory factory = new SmartChineseWordTokenFilterFactory();\n    TokenStream ts = factory.create(tokenizer);\n    // TODO: fix smart chinese to not emit punctuation tokens\n    // at the moment: you have to clean up with WDF, or use the stoplist, etc\n    assertTokenStreamContents(ts, \n       new String[] { \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\", \n        \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\"\n        });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/java/org/apache/solr/analysis/TestSmartChineseFactories#testTokenizer().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestSmartChineseFactories#testTokenizer().mjava","sourceNew":"  /** Test showing the behavior with whitespace */\n  public void testTokenizer() throws Exception {\n    String sentence = \"我购买了道具和服装。我购买了道具和服装。\";\n    SmartChineseSentenceTokenizerFactory tokenizerFactory = new SmartChineseSentenceTokenizerFactory();\n    Tokenizer tokenizer = tokenizerFactory.create(new StringReader(sentence));\n    SmartChineseWordTokenFilterFactory factory = new SmartChineseWordTokenFilterFactory();\n    TokenStream ts = factory.create(tokenizer);\n    // TODO: fix smart chinese to not emit punctuation tokens\n    // at the moment: you have to clean up with WDF, or use the stoplist, etc\n    assertTokenStreamContents(ts, \n       new String[] { \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\", \n        \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\"\n        });\n  }\n\n","sourceOld":"  /** Test showing the behavior with whitespace */\n  public void testTokenizer() throws Exception {\n    String sentence = \"我购买了道具和服装。我购买了道具和服装。\";\n    SmartChineseSentenceTokenizerFactory tokenizerFactory = new SmartChineseSentenceTokenizerFactory();\n    Tokenizer tokenizer = tokenizerFactory.create(new StringReader(sentence));\n    SmartChineseWordTokenFilterFactory factory = new SmartChineseWordTokenFilterFactory();\n    TokenStream ts = factory.create(tokenizer);\n    // TODO: fix smart chinese to not emit punctuation tokens\n    // at the moment: you have to clean up with WDF, or use the stoplist, etc\n    assertTokenStreamContents(ts, \n       new String[] { \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\", \n        \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\"\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestSmartChineseFactories#testTokenizer().mjava","pathOld":"solr/contrib/analysis-extras/src/test/java/org/apache/solr/analysis/TestSmartChineseFactories#testTokenizer().mjava","sourceNew":"  /** Test showing the behavior with whitespace */\n  public void testTokenizer() throws Exception {\n    String sentence = \"我购买了道具和服装。我购买了道具和服装。\";\n    SmartChineseSentenceTokenizerFactory tokenizerFactory = new SmartChineseSentenceTokenizerFactory();\n    Tokenizer tokenizer = tokenizerFactory.create(new StringReader(sentence));\n    SmartChineseWordTokenFilterFactory factory = new SmartChineseWordTokenFilterFactory();\n    TokenStream ts = factory.create(tokenizer);\n    // TODO: fix smart chinese to not emit punctuation tokens\n    // at the moment: you have to clean up with WDF, or use the stoplist, etc\n    assertTokenStreamContents(ts, \n       new String[] { \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\", \n        \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\"\n        });\n  }\n\n","sourceOld":"  /** Test showing the behavior with whitespace */\n  public void testTokenizer() throws Exception {\n    String sentence = \"我购买了道具和服装。我购买了道具和服装。\";\n    SmartChineseSentenceTokenizerFactory tokenizerFactory = new SmartChineseSentenceTokenizerFactory();\n    Tokenizer tokenizer = tokenizerFactory.create(new StringReader(sentence));\n    SmartChineseWordTokenFilterFactory factory = new SmartChineseWordTokenFilterFactory();\n    TokenStream ts = factory.create(tokenizer);\n    // TODO: fix smart chinese to not emit punctuation tokens\n    // at the moment: you have to clean up with WDF, or use the stoplist, etc\n    assertTokenStreamContents(ts, \n       new String[] { \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\", \n        \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\"\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42b608e091e7109ddfe2f75201ab73b54f7cb7a3","date":1343108759,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/test/org/apache/lucene/analysis/cn/smart/TestSmartChineseFactories#testTokenizer().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestSmartChineseFactories#testTokenizer().mjava","sourceNew":"  /** Test showing the behavior with whitespace */\n  public void testTokenizer() throws Exception {\n    String sentence = \"我购买了道具和服装。我购买了道具和服装。\";\n    SmartChineseSentenceTokenizerFactory tokenizerFactory = new SmartChineseSentenceTokenizerFactory();\n    Tokenizer tokenizer = tokenizerFactory.create(new StringReader(sentence));\n    SmartChineseWordTokenFilterFactory factory = new SmartChineseWordTokenFilterFactory();\n    TokenStream ts = factory.create(tokenizer);\n    // TODO: fix smart chinese to not emit punctuation tokens\n    // at the moment: you have to clean up with WDF, or use the stoplist, etc\n    assertTokenStreamContents(ts, \n       new String[] { \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\", \n        \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\"\n        });\n  }\n\n","sourceOld":"  /** Test showing the behavior with whitespace */\n  public void testTokenizer() throws Exception {\n    String sentence = \"我购买了道具和服装。我购买了道具和服装。\";\n    SmartChineseSentenceTokenizerFactory tokenizerFactory = new SmartChineseSentenceTokenizerFactory();\n    Tokenizer tokenizer = tokenizerFactory.create(new StringReader(sentence));\n    SmartChineseWordTokenFilterFactory factory = new SmartChineseWordTokenFilterFactory();\n    TokenStream ts = factory.create(tokenizer);\n    // TODO: fix smart chinese to not emit punctuation tokens\n    // at the moment: you have to clean up with WDF, or use the stoplist, etc\n    assertTokenStreamContents(ts, \n       new String[] { \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\", \n        \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\"\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/smartcn/src/test/org/apache/lucene/analysis/cn/smart/TestSmartChineseFactories#testTokenizer().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestSmartChineseFactories#testTokenizer().mjava","sourceNew":"  /** Test showing the behavior with whitespace */\n  public void testTokenizer() throws Exception {\n    String sentence = \"我购买了道具和服装。我购买了道具和服装。\";\n    SmartChineseSentenceTokenizerFactory tokenizerFactory = new SmartChineseSentenceTokenizerFactory();\n    Tokenizer tokenizer = tokenizerFactory.create(new StringReader(sentence));\n    SmartChineseWordTokenFilterFactory factory = new SmartChineseWordTokenFilterFactory();\n    TokenStream ts = factory.create(tokenizer);\n    // TODO: fix smart chinese to not emit punctuation tokens\n    // at the moment: you have to clean up with WDF, or use the stoplist, etc\n    assertTokenStreamContents(ts, \n       new String[] { \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\", \n        \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\"\n        });\n  }\n\n","sourceOld":"  /** Test showing the behavior with whitespace */\n  public void testTokenizer() throws Exception {\n    String sentence = \"我购买了道具和服装。我购买了道具和服装。\";\n    SmartChineseSentenceTokenizerFactory tokenizerFactory = new SmartChineseSentenceTokenizerFactory();\n    Tokenizer tokenizer = tokenizerFactory.create(new StringReader(sentence));\n    SmartChineseWordTokenFilterFactory factory = new SmartChineseWordTokenFilterFactory();\n    TokenStream ts = factory.create(tokenizer);\n    // TODO: fix smart chinese to not emit punctuation tokens\n    // at the moment: you have to clean up with WDF, or use the stoplist, etc\n    assertTokenStreamContents(ts, \n       new String[] { \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\", \n        \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\"\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/smartcn/src/test/org/apache/lucene/analysis/cn/smart/TestSmartChineseFactories#testTokenizer().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestSmartChineseFactories#testTokenizer().mjava","sourceNew":"  /** Test showing the behavior with whitespace */\n  public void testTokenizer() throws Exception {\n    String sentence = \"我购买了道具和服装。我购买了道具和服装。\";\n    SmartChineseSentenceTokenizerFactory tokenizerFactory = new SmartChineseSentenceTokenizerFactory();\n    Tokenizer tokenizer = tokenizerFactory.create(new StringReader(sentence));\n    SmartChineseWordTokenFilterFactory factory = new SmartChineseWordTokenFilterFactory();\n    TokenStream ts = factory.create(tokenizer);\n    // TODO: fix smart chinese to not emit punctuation tokens\n    // at the moment: you have to clean up with WDF, or use the stoplist, etc\n    assertTokenStreamContents(ts, \n       new String[] { \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\", \n        \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\"\n        });\n  }\n\n","sourceOld":"  /** Test showing the behavior with whitespace */\n  public void testTokenizer() throws Exception {\n    String sentence = \"我购买了道具和服装。我购买了道具和服装。\";\n    SmartChineseSentenceTokenizerFactory tokenizerFactory = new SmartChineseSentenceTokenizerFactory();\n    Tokenizer tokenizer = tokenizerFactory.create(new StringReader(sentence));\n    SmartChineseWordTokenFilterFactory factory = new SmartChineseWordTokenFilterFactory();\n    TokenStream ts = factory.create(tokenizer);\n    // TODO: fix smart chinese to not emit punctuation tokens\n    // at the moment: you have to clean up with WDF, or use the stoplist, etc\n    assertTokenStreamContents(ts, \n       new String[] { \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\", \n        \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\"\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/smartcn/src/test/org/apache/lucene/analysis/cn/smart/TestSmartChineseFactories#testTokenizer().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestSmartChineseFactories#testTokenizer().mjava","sourceNew":"  /** Test showing the behavior with whitespace */\n  public void testTokenizer() throws Exception {\n    String sentence = \"我购买了道具和服装。我购买了道具和服装。\";\n    SmartChineseSentenceTokenizerFactory tokenizerFactory = new SmartChineseSentenceTokenizerFactory();\n    Tokenizer tokenizer = tokenizerFactory.create(new StringReader(sentence));\n    SmartChineseWordTokenFilterFactory factory = new SmartChineseWordTokenFilterFactory();\n    TokenStream ts = factory.create(tokenizer);\n    // TODO: fix smart chinese to not emit punctuation tokens\n    // at the moment: you have to clean up with WDF, or use the stoplist, etc\n    assertTokenStreamContents(ts, \n       new String[] { \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\", \n        \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\"\n        });\n  }\n\n","sourceOld":"  /** Test showing the behavior with whitespace */\n  public void testTokenizer() throws Exception {\n    String sentence = \"我购买了道具和服装。我购买了道具和服装。\";\n    SmartChineseSentenceTokenizerFactory tokenizerFactory = new SmartChineseSentenceTokenizerFactory();\n    Tokenizer tokenizer = tokenizerFactory.create(new StringReader(sentence));\n    SmartChineseWordTokenFilterFactory factory = new SmartChineseWordTokenFilterFactory();\n    TokenStream ts = factory.create(tokenizer);\n    // TODO: fix smart chinese to not emit punctuation tokens\n    // at the moment: you have to clean up with WDF, or use the stoplist, etc\n    assertTokenStreamContents(ts, \n       new String[] { \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\", \n        \"我\", \"购买\", \"了\", \"道具\", \"和\", \"服装\", \",\"\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["1696b0fba3bb8e0d7e0cc23470f1bed1d98b4edd","5a1a22b1ad88b436661458df567f3fdb446392a4"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","1696b0fba3bb8e0d7e0cc23470f1bed1d98b4edd"],"1696b0fba3bb8e0d7e0cc23470f1bed1d98b4edd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1696b0fba3bb8e0d7e0cc23470f1bed1d98b4edd","1696b0fba3bb8e0d7e0cc23470f1bed1d98b4edd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["1696b0fba3bb8e0d7e0cc23470f1bed1d98b4edd","5a1a22b1ad88b436661458df567f3fdb446392a4"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1696b0fba3bb8e0d7e0cc23470f1bed1d98b4edd"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1696b0fba3bb8e0d7e0cc23470f1bed1d98b4edd"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["1696b0fba3bb8e0d7e0cc23470f1bed1d98b4edd","42b608e091e7109ddfe2f75201ab73b54f7cb7a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"42b608e091e7109ddfe2f75201ab73b54f7cb7a3":["1696b0fba3bb8e0d7e0cc23470f1bed1d98b4edd"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"1696b0fba3bb8e0d7e0cc23470f1bed1d98b4edd":["aba371508186796cc6151d8223a5b4e16d02e26e","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a3776dccca01c11e7046323cfad46a3b4a471233","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5a1a22b1ad88b436661458df567f3fdb446392a4","42b608e091e7109ddfe2f75201ab73b54f7cb7a3"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1696b0fba3bb8e0d7e0cc23470f1bed1d98b4edd","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"85a883878c0af761245ab048babc63d099f835f3":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"42b608e091e7109ddfe2f75201ab73b54f7cb7a3":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}