{"path":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","sourceNew":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(), entry, false);\n      } else {\n        entry.dir = this.directory;\n        if (directory.fileExists(name)) {\n          throw new IOException(\"File already exists\");\n        }\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(), entry, false);\n      } else {\n        entry.dir = this.directory;\n        if (directory.fileExists(name)) {\n          throw new IOException(\"File already exists\");\n        }\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0451c421afa567194fd4312af9389e07003a7941","date":1331317047,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","sourceNew":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(), entry, false);\n      } else {\n        entry.dir = this.directory;\n        if (directory.fileExists(name)) {\n          throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n        }\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(), entry, false);\n      } else {\n        entry.dir = this.directory;\n        if (directory.fileExists(name)) {\n          throw new IOException(\"File already exists\");\n        }\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","sourceNew":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(), entry, false);\n      } else {\n        entry.dir = this.directory;\n        if (directory.fileExists(name)) {\n          throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n        }\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(), entry, false);\n      } else {\n        entry.dir = this.directory;\n        if (directory.fileExists(name)) {\n          throw new IOException(\"File already exists\");\n        }\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ede45a461a2dcb573505ed9b6a5182dfebd3688f","date":1353338494,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","sourceNew":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n//        System.out.println(entry.file);\n        out = new DirectCFSIndexOutput(getOutput(), entry, false);\n      } else {\n        entry.dir = this.directory;\n        if (directory.fileExists(name)) {\n          throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n        }\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(), entry, false);\n      } else {\n        entry.dir = this.directory;\n        if (directory.fileExists(name)) {\n          throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n        }\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43125a799bd635a69762e839e546ae766793297d","date":1353339564,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","sourceNew":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(), entry, false);\n      } else {\n        entry.dir = this.directory;\n        if (directory.fileExists(name)) {\n          throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n        }\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n//        System.out.println(entry.file);\n        out = new DirectCFSIndexOutput(getOutput(), entry, false);\n      } else {\n        entry.dir = this.directory;\n        if (directory.fileExists(name)) {\n          throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n        }\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","sourceNew":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(), entry, false);\n      } else {\n        entry.dir = this.directory;\n        if (directory.fileExists(name)) {\n          throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n        }\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(), entry, false);\n      } else {\n        entry.dir = this.directory;\n        if (directory.fileExists(name)) {\n          throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n        }\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","sourceNew":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(), entry, false);\n      } else {\n        entry.dir = this.directory;\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(), entry, false);\n      } else {\n        entry.dir = this.directory;\n        if (directory.fileExists(name)) {\n          throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n        }\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3491d1030513020096bfb21ebca26fd57070ff8","date":1401733016,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","sourceNew":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(context), entry, false);\n      } else {\n        entry.dir = this.directory;\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(), entry, false);\n      } else {\n        entry.dir = this.directory;\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundWriter#createOutput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","sourceNew":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(context), entry, false);\n      } else {\n        entry.dir = this.directory;\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(context), entry, false);\n      } else {\n        entry.dir = this.directory;\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/CompoundFileWriter#createOutput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","sourceNew":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(context), entry, false);\n      } else {\n        entry.dir = this.directory;\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(context), entry, false);\n      } else {\n        entry.dir = this.directory;\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundWriter#createOutput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#createOutput(String,IOContext).mjava","sourceNew":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(this.context), entry, false);\n      } else {\n        entry.dir = this.directory;\n        out = new DirectCFSIndexOutput(directory.createOutput(name, this.context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    boolean success = false;\n    boolean outputLocked = false;\n    try {\n      assert name != null : \"name must not be null\";\n      if (entries.containsKey(name)) {\n        throw new IllegalArgumentException(\"File \" + name + \" already exists\");\n      }\n      final FileEntry entry = new FileEntry();\n      entry.file = name;\n      entries.put(name, entry);\n      final String id = IndexFileNames.stripSegmentName(name);\n      assert !seenIDs.contains(id): \"file=\\\"\" + name + \"\\\" maps to id=\\\"\" + id + \"\\\", which was already written\";\n      seenIDs.add(id);\n      final DirectCFSIndexOutput out;\n\n      if ((outputLocked = outputTaken.compareAndSet(false, true))) {\n        out = new DirectCFSIndexOutput(getOutput(context), entry, false);\n      } else {\n        entry.dir = this.directory;\n        out = new DirectCFSIndexOutput(directory.createOutput(name, context), entry,\n            true);\n      }\n      success = true;\n      return out;\n    } finally {\n      if (!success) {\n        entries.remove(name);\n        if (outputLocked) { // release the output lock if not successful\n          assert outputTaken.get();\n          releaseOutputLock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0451c421afa567194fd4312af9389e07003a7941"],"ede45a461a2dcb573505ed9b6a5182dfebd3688f":["0451c421afa567194fd4312af9389e07003a7941"],"989d940c4bf402188f4f0ae13736836885227383":["a3491d1030513020096bfb21ebca26fd57070ff8"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["0451c421afa567194fd4312af9389e07003a7941","43125a799bd635a69762e839e546ae766793297d"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43125a799bd635a69762e839e546ae766793297d":["ede45a461a2dcb573505ed9b6a5182dfebd3688f"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a3491d1030513020096bfb21ebca26fd57070ff8","989d940c4bf402188f4f0ae13736836885227383"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3491d1030513020096bfb21ebca26fd57070ff8":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"0451c421afa567194fd4312af9389e07003a7941":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"ede45a461a2dcb573505ed9b6a5182dfebd3688f":["43125a799bd635a69762e839e546ae766793297d"],"989d940c4bf402188f4f0ae13736836885227383":["9bb9a29a5e71a90295f175df8919802993142c9a"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["a3491d1030513020096bfb21ebca26fd57070ff8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","0451c421afa567194fd4312af9389e07003a7941"],"43125a799bd635a69762e839e546ae766793297d":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3491d1030513020096bfb21ebca26fd57070ff8":["989d940c4bf402188f4f0ae13736836885227383","9bb9a29a5e71a90295f175df8919802993142c9a"],"0451c421afa567194fd4312af9389e07003a7941":["38e3b736c7ca086d61b7dbb841c905ee115490da","ede45a461a2dcb573505ed9b6a5182dfebd3688f","d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}