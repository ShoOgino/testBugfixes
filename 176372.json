{"path":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier.Runner#run().mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier.Runner#run().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier.Runner#run().mjava","sourceNew":"        public void run() {\n            for (int i = idIndex; i < idIndex + 10; i++) {\n\n                BaseEntry e = buildEntry(\"\" + i);\n                try {\n                    ServerBaseEntry en = new ServerBaseEntry(e);\n                    en.setFeedId(feedId);\n                    en.setServiceConfig(configurator);\n                    StorageEntryWrapper wrapper = new StorageEntryWrapper(en,\n                            StorageOperation.INSERT);\n                    modifier.insertEntry(wrapper);\n//                    System.out.println(\"insert: \"+i+\" Thread: \"+Thread.currentThread().getName());\n                } catch (Exception e1) {\n\n                    e1.printStackTrace();\n                }\n\n            }\n\n        }// end run\n\n","sourceOld":"        public void run() {\n            for (int i = idIndex; i < idIndex + 10; i++) {\n\n                BaseEntry e = buildEntry(\"\" + i);\n                try {\n                    ServerBaseEntry en = new ServerBaseEntry(e);\n                    en.setFeedId(feedId);\n                    en.setServiceConfig(configurator);\n                    StorageEntryWrapper wrapper = new StorageEntryWrapper(en,\n                            StorageOperation.INSERT);\n                    modifier.insertEntry(wrapper);\n//                    System.out.println(\"insert: \"+i+\" Thread: \"+Thread.currentThread().getName());\n                } catch (Exception e1) {\n\n                    e1.printStackTrace();\n                }\n\n            }\n\n        }// end run\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier.Runner#run().mjava","pathOld":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier.Runner#run().mjava","sourceNew":"        public void run() {\n            for (int i = idIndex; i < idIndex + 10; i++) {\n\n                BaseEntry e = buildEntry(\"\" + i);\n                try {\n                    ServerBaseEntry en = new ServerBaseEntry(e);\n                    en.setFeedId(feedId);\n                    en.setServiceConfig(configurator);\n                    StorageEntryWrapper wrapper = new StorageEntryWrapper(en,\n                            StorageOperation.INSERT);\n                    modifier.insertEntry(wrapper);\n//                    System.out.println(\"insert: \"+i+\" Thread: \"+Thread.currentThread().getName());\n                } catch (Exception e1) {\n\n                    e1.printStackTrace();\n                }\n\n            }\n\n        }// end run\n\n","sourceOld":"        public void run() {\n            for (int i = idIndex; i < idIndex + 10; i++) {\n\n                BaseEntry e = buildEntry(\"\" + i);\n                try {\n                    ServerBaseEntry en = new ServerBaseEntry(e);\n                    en.setFeedId(feedId);\n                    en.setServiceConfig(configurator);\n                    StorageEntryWrapper wrapper = new StorageEntryWrapper(en,\n                            StorageOperation.INSERT);\n                    modifier.insertEntry(wrapper);\n//                    System.out.println(\"insert: \"+i+\" Thread: \"+Thread.currentThread().getName());\n                } catch (Exception e1) {\n\n                    e1.printStackTrace();\n                }\n\n            }\n\n        }// end run\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}