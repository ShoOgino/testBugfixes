{"path":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomRegexes() throws Exception {\n    for (int i = 0; i < 250; i++)\n      assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","sourceNew":"  public void testRandomRegexes() throws Exception {\n    for (int i = 0; i < 250*_TestUtil.getRandomMultiplier(); i++)\n      assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n  }\n\n","sourceOld":"  public void testRandomRegexes() throws Exception {\n    for (int i = 0; i < 250; i++)\n      assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n  }\n\n","bugFix":null,"bugIntro":["d90f6725e0dcb9d05a0953b2d96c8642684d57ef"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d90f6725e0dcb9d05a0953b2d96c8642684d57ef","date":1280179847,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","sourceNew":"  public void testRandomRegexes() throws Exception {\n    for (int i = 0; i < 250*_TestUtil.getRandomMultiplier(); i++) {\n      assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n    }\n  }\n\n","sourceOld":"  public void testRandomRegexes() throws Exception {\n    for (int i = 0; i < 250*_TestUtil.getRandomMultiplier(); i++)\n      assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n  }\n\n","bugFix":["2aafd88401639311b0404e67c94e829e123a0e45"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","sourceNew":"  public void testRandomRegexes() throws Exception {\n    int num = 250 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n    }\n  }\n\n","sourceOld":"  public void testRandomRegexes() throws Exception {\n    for (int i = 0; i < 250*_TestUtil.getRandomMultiplier(); i++) {\n      assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","sourceNew":"  public void testRandomRegexes() throws Exception {\n    int num = 250 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n    }\n  }\n\n","sourceOld":"  public void testRandomRegexes() throws Exception {\n    for (int i = 0; i < 250*_TestUtil.getRandomMultiplier(); i++)\n      assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41916511eb7a0aa94cb9b000074ea466e14296b7","date":1288064272,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","sourceNew":"  public void testRandomRegexes() throws Exception {\n    int num = 250 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n    }\n  }\n\n","sourceOld":"  public void testRandomRegexes() throws Exception {\n    int num = 250 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","sourceNew":"  public void testRandomRegexes() throws Exception {\n    int num = 250 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n    }\n  }\n\n","sourceOld":"  public void testRandomRegexes() throws Exception {\n    int num = 250 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","sourceNew":"  public void testRandomRegexes() throws Exception {\n    int num = 250 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n    }\n  }\n\n","sourceOld":"  public void testRandomRegexes() throws Exception {\n    int num = 250 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","sourceNew":"  public void testRandomRegexes() throws Exception {\n    int num = atLeast(250);\n    for (int i = 0; i < num; i++) {\n      assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n    }\n  }\n\n","sourceOld":"  public void testRandomRegexes() throws Exception {\n    int num = 250 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n    }\n  }\n\n","bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","sourceNew":"  public void testRandomRegexes() throws Exception {\n    int num = atLeast(250);\n    for (int i = 0; i < num; i++) {\n      assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n    }\n  }\n\n","sourceOld":"  public void testRandomRegexes() throws Exception {\n    int num = 250 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","sourceNew":"  public void testRandomRegexes() throws Exception {\n    int num = atLeast(250);\n    for (int i = 0; i < num; i++) {\n      assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n    }\n  }\n\n","sourceOld":"  public void testRandomRegexes() throws Exception {\n    int num = 250 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRegexes().mjava","sourceNew":"  public void testRandomRegexes() throws Exception {\n    int num = atLeast(250);\n    for (int i = 0; i < num; i++) {\n      assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n    }\n  }\n\n","sourceOld":"  public void testRandomRegexes() throws Exception {\n    int num = atLeast(250);\n    for (int i = 0; i < num; i++) {\n      assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["d90f6725e0dcb9d05a0953b2d96c8642684d57ef"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["41916511eb7a0aa94cb9b000074ea466e14296b7","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["41916511eb7a0aa94cb9b000074ea466e14296b7"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["2aafd88401639311b0404e67c94e829e123a0e45","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","41916511eb7a0aa94cb9b000074ea466e14296b7"],"2aafd88401639311b0404e67c94e829e123a0e45":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","41916511eb7a0aa94cb9b000074ea466e14296b7"],"41916511eb7a0aa94cb9b000074ea466e14296b7":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["b12d3e81e0f95a4527b5703953c503f71120ffcc","f83af14a2a8131b14d7aee6274c740334e0363d3"],"d90f6725e0dcb9d05a0953b2d96c8642684d57ef":["2aafd88401639311b0404e67c94e829e123a0e45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["3242a09f703274d3b9283f2064a1a33064b53a1b","b12d3e81e0f95a4527b5703953c503f71120ffcc","41916511eb7a0aa94cb9b000074ea466e14296b7"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["2aafd88401639311b0404e67c94e829e123a0e45"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"2aafd88401639311b0404e67c94e829e123a0e45":["3242a09f703274d3b9283f2064a1a33064b53a1b","d90f6725e0dcb9d05a0953b2d96c8642684d57ef"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"41916511eb7a0aa94cb9b000074ea466e14296b7":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","f83af14a2a8131b14d7aee6274c740334e0363d3","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"d90f6725e0dcb9d05a0953b2d96c8642684d57ef":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}