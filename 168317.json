{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockHeader.Serializer#read(DataInput,BlockHeader).mjava","commits":[{"id":"d28da8a459f5f0c930da7185c56d0c25edd3fbd1","date":1577783695,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockHeader.Serializer#read(DataInput,BlockHeader).mjava","pathOld":"/dev/null","sourceNew":"    public BlockHeader read(DataInput input, BlockHeader reuse) throws IOException {\n      int linesCount = input.readVInt();\n      if (linesCount <= 0 || linesCount > UniformSplitTermsWriter.MAX_NUM_BLOCK_LINES) {\n        throw new CorruptIndexException(\"Illegal number of lines in block: \" + linesCount, input);\n      }\n\n      long baseDocsFP = input.readVLong();\n      long basePositionsFP = input.readVLong();\n      long basePayloadsFP = input.readVLong();\n\n      int termStatesBaseOffset = input.readVInt();\n      if (termStatesBaseOffset < 0) {\n        throw new CorruptIndexException(\"Illegal termStatesBaseOffset= \" + termStatesBaseOffset, input);\n      }\n      int middleTermOffset = input.readVInt();\n      if (middleTermOffset < 0) {\n        throw new CorruptIndexException(\"Illegal middleTermOffset= \" + middleTermOffset, input);\n      }\n\n      BlockHeader blockHeader = reuse == null ? new BlockHeader() : reuse;\n      return blockHeader.reset(linesCount, baseDocsFP, basePositionsFP, basePayloadsFP, termStatesBaseOffset, middleTermOffset);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c606b777c4250f3f3f6f66d659c7c4c403679b71","date":1577958559,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockHeader.Serializer#read(DataInput,BlockHeader).mjava","pathOld":"/dev/null","sourceNew":"    public BlockHeader read(DataInput input, BlockHeader reuse) throws IOException {\n      int linesCount = input.readVInt();\n      if (linesCount <= 0 || linesCount > UniformSplitTermsWriter.MAX_NUM_BLOCK_LINES) {\n        throw new CorruptIndexException(\"Illegal number of lines in block: \" + linesCount, input);\n      }\n\n      long baseDocsFP = input.readVLong();\n      long basePositionsFP = input.readVLong();\n      long basePayloadsFP = input.readVLong();\n\n      int termStatesBaseOffset = input.readVInt();\n      if (termStatesBaseOffset < 0) {\n        throw new CorruptIndexException(\"Illegal termStatesBaseOffset= \" + termStatesBaseOffset, input);\n      }\n      int middleTermOffset = input.readVInt();\n      if (middleTermOffset < 0) {\n        throw new CorruptIndexException(\"Illegal middleTermOffset= \" + middleTermOffset, input);\n      }\n\n      BlockHeader blockHeader = reuse == null ? new BlockHeader() : reuse;\n      return blockHeader.reset(linesCount, baseDocsFP, basePositionsFP, basePayloadsFP, termStatesBaseOffset, middleTermOffset);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c606b777c4250f3f3f6f66d659c7c4c403679b71":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d28da8a459f5f0c930da7185c56d0c25edd3fbd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d28da8a459f5f0c930da7185c56d0c25edd3fbd1"]},"commit2Childs":{"c606b777c4250f3f3f6f66d659c7c4c403679b71":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c606b777c4250f3f3f6f66d659c7c4c403679b71","d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"d28da8a459f5f0c930da7185c56d0c25edd3fbd1":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}