{"path":"src/java/org/apache/lucene/index/IndexFileNames#fileNameFromGeneration(String,String,long).mjava","commits":[{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileNames#fileNameFromGeneration(String,String,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes the full file name from base, extension and\n   * generation.  If the generation is -1, the file name is\n   * null.  If it's 0, the file name is <base><extension>.\n   * If it's > 0, the file name is <base>_<generation><extension>.\n   *\n   * @param base -- main part of the file name\n   * @param extension -- extension of the filename (including .)\n   * @param gen -- generation\n   */\n  public static final String fileNameFromGeneration(String base, String extension, long gen) {\n    if (gen == -1) {\n      return null;\n    } else if (gen == 0) {\n      return base + extension;\n    } else {\n      return base + \"_\" + Long.toString(gen, Character.MAX_RADIX) + extension;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a","date":1172364225,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileNames#fileNameFromGeneration(String,String,long).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileNames#fileNameFromGeneration(String,String,long).mjava","sourceNew":"  /**\n   * Computes the full file name from base, extension and\n   * generation.  If the generation is -1, the file name is\n   * null.  If it's 0, the file name is <base><extension>.\n   * If it's > 0, the file name is <base>_<generation><extension>.\n   *\n   * @param base -- main part of the file name\n   * @param extension -- extension of the filename (including .)\n   * @param gen -- generation\n   */\n  static final String fileNameFromGeneration(String base, String extension, long gen) {\n    if (gen == -1) {\n      return null;\n    } else if (gen == 0) {\n      return base + extension;\n    } else {\n      return base + \"_\" + Long.toString(gen, Character.MAX_RADIX) + extension;\n    }\n  }\n\n","sourceOld":"  /**\n   * Computes the full file name from base, extension and\n   * generation.  If the generation is -1, the file name is\n   * null.  If it's 0, the file name is <base><extension>.\n   * If it's > 0, the file name is <base>_<generation><extension>.\n   *\n   * @param base -- main part of the file name\n   * @param extension -- extension of the filename (including .)\n   * @param gen -- generation\n   */\n  public static final String fileNameFromGeneration(String base, String extension, long gen) {\n    if (gen == -1) {\n      return null;\n    } else if (gen == 0) {\n      return base + extension;\n    } else {\n      return base + \"_\" + Long.toString(gen, Character.MAX_RADIX) + extension;\n    }\n  }\n\n","bugFix":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b685e89f45e34ea31f9ca89912e4f29038818ff6","date":1173986546,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileNames#fileNameFromGeneration(String,String,long).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileNames#fileNameFromGeneration(String,String,long).mjava","sourceNew":"  /**\n   * Computes the full file name from base, extension and\n   * generation.  If the generation is -1, the file name is\n   * null.  If it's 0, the file name is <base><extension>.\n   * If it's > 0, the file name is <base>_<generation><extension>.\n   *\n   * @param base -- main part of the file name\n   * @param extension -- extension of the filename (including .)\n   * @param gen -- generation\n   */\n  static final String fileNameFromGeneration(String base, String extension, long gen) {\n    if (gen == SegmentInfo.NO) {\n      return null;\n    } else if (gen == SegmentInfo.WITHOUT_GEN) {\n      return base + extension;\n    } else {\n      return base + \"_\" + Long.toString(gen, Character.MAX_RADIX) + extension;\n    }\n  }\n\n","sourceOld":"  /**\n   * Computes the full file name from base, extension and\n   * generation.  If the generation is -1, the file name is\n   * null.  If it's 0, the file name is <base><extension>.\n   * If it's > 0, the file name is <base>_<generation><extension>.\n   *\n   * @param base -- main part of the file name\n   * @param extension -- extension of the filename (including .)\n   * @param gen -- generation\n   */\n  static final String fileNameFromGeneration(String base, String extension, long gen) {\n    if (gen == -1) {\n      return null;\n    } else if (gen == 0) {\n      return base + extension;\n    } else {\n      return base + \"_\" + Long.toString(gen, Character.MAX_RADIX) + extension;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"775efee7f959e0dd3df7960b93767d9e00b78751","date":1267203159,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileNames#fileNameFromGeneration(String,String,long).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileNames#fileNameFromGeneration(String,String,long).mjava","sourceNew":"  /**\n   * Computes the full file name from base, extension and generation. If the\n   * generation is -1, the file name is null. If it's 0, the file name is\n   * &lt;base&gt;.&lt;ext&gt;. If it's > 0, the file name is\n   * &lt;base&gt;_&lt;gen&gt;.&lt;ext&gt;.<br>\n   * <b>NOTE:</b> .&lt;ext&gt; is added to the name only if <code>ext</code> is\n   * not an empty string.\n   * \n   * @param base main part of the file name\n   * @param ext extension of the filename\n   * @param gen generation\n   */\n  public static final String fileNameFromGeneration(String base, String ext, long gen) {\n    if (gen == SegmentInfo.NO) {\n      return null;\n    } else if (gen == SegmentInfo.WITHOUT_GEN) {\n      return segmentFileName(base, ext);\n    } else {\n      // The '6' part in the length is: 1 for '.', 1 for '_' and 4 as estimate\n      // to the gen length as string (hopefully an upper limit so SB won't\n      // expand in the middle.\n      StringBuilder res = new StringBuilder(base.length() + 6 + ext.length())\n          .append(base).append('_').append(Long.toString(gen, Character.MAX_RADIX));\n      if (ext.length() > 0) {\n        res.append('.').append(ext);\n      }\n      return res.toString();\n    }\n  }\n\n","sourceOld":"  /**\n   * Computes the full file name from base, extension and\n   * generation.  If the generation is -1, the file name is\n   * null.  If it's 0, the file name is <base><extension>.\n   * If it's > 0, the file name is <base>_<generation><extension>.\n   *\n   * @param base -- main part of the file name\n   * @param extension -- extension of the filename (including .)\n   * @param gen -- generation\n   */\n  static final String fileNameFromGeneration(String base, String extension, long gen) {\n    if (gen == SegmentInfo.NO) {\n      return null;\n    } else if (gen == SegmentInfo.WITHOUT_GEN) {\n      return base + extension;\n    } else {\n      return base + \"_\" + Long.toString(gen, Character.MAX_RADIX) + extension;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileNames#fileNameFromGeneration(String,String,long).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileNames#fileNameFromGeneration(String,String,long).mjava","sourceNew":"  /**\n   * Computes the full file name from base, extension and generation. If the\n   * generation is -1, the file name is null. If it's 0, the file name is\n   * &lt;base&gt;.&lt;ext&gt;. If it's > 0, the file name is\n   * &lt;base&gt;_&lt;gen&gt;.&lt;ext&gt;.<br>\n   * <b>NOTE:</b> .&lt;ext&gt; is added to the name only if <code>ext</code> is\n   * not an empty string.\n   * \n   * @param base main part of the file name\n   * @param ext extension of the filename\n   * @param gen generation\n   */\n  public static final String fileNameFromGeneration(String base, String ext, long gen) {\n    if (gen == SegmentInfo.NO) {\n      return null;\n    } else if (gen == SegmentInfo.WITHOUT_GEN) {\n      return segmentFileName(base, ext);\n    } else {\n      // The '6' part in the length is: 1 for '.', 1 for '_' and 4 as estimate\n      // to the gen length as string (hopefully an upper limit so SB won't\n      // expand in the middle.\n      StringBuilder res = new StringBuilder(base.length() + 6 + ext.length())\n          .append(base).append('_').append(Long.toString(gen, Character.MAX_RADIX));\n      if (ext.length() > 0) {\n        res.append('.').append(ext);\n      }\n      return res.toString();\n    }\n  }\n\n","sourceOld":"  /**\n   * Computes the full file name from base, extension and generation. If the\n   * generation is -1, the file name is null. If it's 0, the file name is\n   * &lt;base&gt;.&lt;ext&gt;. If it's > 0, the file name is\n   * &lt;base&gt;_&lt;gen&gt;.&lt;ext&gt;.<br>\n   * <b>NOTE:</b> .&lt;ext&gt; is added to the name only if <code>ext</code> is\n   * not an empty string.\n   * \n   * @param base main part of the file name\n   * @param ext extension of the filename\n   * @param gen generation\n   */\n  public static final String fileNameFromGeneration(String base, String ext, long gen) {\n    if (gen == SegmentInfo.NO) {\n      return null;\n    } else if (gen == SegmentInfo.WITHOUT_GEN) {\n      return segmentFileName(base, ext);\n    } else {\n      // The '6' part in the length is: 1 for '.', 1 for '_' and 4 as estimate\n      // to the gen length as string (hopefully an upper limit so SB won't\n      // expand in the middle.\n      StringBuilder res = new StringBuilder(base.length() + 6 + ext.length())\n          .append(base).append('_').append(Long.toString(gen, Character.MAX_RADIX));\n      if (ext.length() > 0) {\n        res.append('.').append(ext);\n      }\n      return res.toString();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"284c1d3c8b19931bf6f312fae7470487f5d9e580":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"775efee7f959e0dd3df7960b93767d9e00b78751":["b685e89f45e34ea31f9ca89912e4f29038818ff6"],"b685e89f45e34ea31f9ca89912e4f29038818ff6":["a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a"],"a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["775efee7f959e0dd3df7960b93767d9e00b78751"]},"commit2Childs":{"284c1d3c8b19931bf6f312fae7470487f5d9e580":["a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a"],"775efee7f959e0dd3df7960b93767d9e00b78751":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b685e89f45e34ea31f9ca89912e4f29038818ff6":["775efee7f959e0dd3df7960b93767d9e00b78751"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a":["b685e89f45e34ea31f9ca89912e4f29038818ff6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}