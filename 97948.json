{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterInt().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterInt().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterInt().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public void testGetFilterInt() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(true);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    assertTrue(filter instanceof NumericRangeFilter<?>);\n\n    NumericRangeFilter<Integer> numRangeFilter = (NumericRangeFilter<Integer>) filter;\n    assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Filter filter2 = filterBuilder.getFilter(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof NumericRangeFilter);\n\n    NumericRangeFilter<Integer> numRangeFilter2 = (NumericRangeFilter) filter2;\n    assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public void testGetFilterInt() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(true);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    assertTrue(filter instanceof NumericRangeFilter<?>);\n\n    NumericRangeFilter<Integer> numRangeFilter = (NumericRangeFilter<Integer>) filter;\n    assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Filter filter2 = filterBuilder.getFilter(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof NumericRangeFilter);\n\n    NumericRangeFilter<Integer> numRangeFilter2 = (NumericRangeFilter) filter2;\n    assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterInt().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public void testGetFilterInt() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(true);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    assertTrue(filter instanceof NumericRangeFilter<?>);\n\n    NumericRangeFilter<Integer> numRangeFilter = (NumericRangeFilter<Integer>) filter;\n    assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Filter filter2 = filterBuilder.getFilter(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof NumericRangeFilter);\n\n    NumericRangeFilter<Integer> numRangeFilter2 = (NumericRangeFilter) filter2;\n    assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeFilterBuilder#testGetFilterInt().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public void testGetFilterInt() throws Exception {\n    NumericRangeFilterBuilder filterBuilder = new NumericRangeFilterBuilder();\n    filterBuilder.setStrictMode(true);\n\n    String xml = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n    Document doc = getDocumentFromString(xml);\n    Filter filter = filterBuilder.getFilter(doc.getDocumentElement());\n    assertTrue(filter instanceof NumericRangeFilter<?>);\n\n    NumericRangeFilter<Integer> numRangeFilter = (NumericRangeFilter<Integer>) filter;\n    assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<NumericRangeFilter fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Filter filter2 = filterBuilder.getFilter(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof NumericRangeFilter);\n\n    NumericRangeFilter<Integer> numRangeFilter2 = (NumericRangeFilter) filter2;\n    assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2713584a660051cd646423be682771e3bbd99985"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2713584a660051cd646423be682771e3bbd99985":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2713584a660051cd646423be682771e3bbd99985"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985"],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}