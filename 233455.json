{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/processors/BooleanModifiersQueryNodeProcessor#process(QueryNode).mjava","commits":[{"id":"ecaea79e307d83311c31273b0ea89b9fdb0c5a32","date":1287584790,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/processors/BooleanModifiersQueryNodeProcessor#process(QueryNode).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n\n    if (!getQueryConfigHandler().hasAttribute(DefaultOperatorAttribute.class)) {\n      throw new IllegalArgumentException(\n          \"DefaultOperatorAttribute should be set on the QueryConfigHandler\");\n    }\n\n    this.usingAnd = Operator.AND == getQueryConfigHandler().getAttribute(\n        DefaultOperatorAttribute.class).getOperator();\n\n    return super.process(queryTree);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8017ab6544f30f93b106e419e7298173bad77f69","date":1287608126,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/processors/BooleanModifiersQueryNodeProcessor#process(QueryNode).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n\n    if (!getQueryConfigHandler().hasAttribute(DefaultOperatorAttribute.class)) {\n      throw new IllegalArgumentException(\n          \"DefaultOperatorAttribute should be set on the QueryConfigHandler\");\n    }\n\n    this.usingAnd = Operator.AND == getQueryConfigHandler().getAttribute(\n        DefaultOperatorAttribute.class).getOperator();\n\n    return super.process(queryTree);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/processors/BooleanModifiersQueryNodeProcessor#process(QueryNode).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n\n    if (!getQueryConfigHandler().hasAttribute(DefaultOperatorAttribute.class)) {\n      throw new IllegalArgumentException(\n          \"DefaultOperatorAttribute should be set on the QueryConfigHandler\");\n    }\n\n    this.usingAnd = Operator.AND == getQueryConfigHandler().getAttribute(\n        DefaultOperatorAttribute.class).getOperator();\n\n    return super.process(queryTree);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c1fe1aedb70da4139fd9f2f7e92e572017fd083","date":1309827452,"type":3,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/processors/BooleanModifiersQueryNodeProcessor#process(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/processors/BooleanModifiersQueryNodeProcessor#process(QueryNode).mjava","sourceNew":"  @Override\n  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n    Operator op = getQueryConfigHandler().get(ConfigurationKeys.DEFAULT_OPERATOR);\n    \n    if (op == null) {\n      throw new IllegalArgumentException(\n          \"StandardQueryConfigHandler.ConfigurationKeys.DEFAULT_OPERATOR should be set on the QueryConfigHandler\");\n    }\n\n    this.usingAnd = StandardQueryConfigHandler.Operator.AND == op;\n\n    return super.process(queryTree);\n\n  }\n\n","sourceOld":"  @Override\n  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n\n    if (!getQueryConfigHandler().hasAttribute(DefaultOperatorAttribute.class)) {\n      throw new IllegalArgumentException(\n          \"DefaultOperatorAttribute should be set on the QueryConfigHandler\");\n    }\n\n    this.usingAnd = Operator.AND == getQueryConfigHandler().getAttribute(\n        DefaultOperatorAttribute.class).getOperator();\n\n    return super.process(queryTree);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/processors/BooleanModifiersQueryNodeProcessor#process(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/processors/BooleanModifiersQueryNodeProcessor#process(QueryNode).mjava","sourceNew":"  @Override\n  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n    Operator op = getQueryConfigHandler().get(ConfigurationKeys.DEFAULT_OPERATOR);\n    \n    if (op == null) {\n      throw new IllegalArgumentException(\n          \"StandardQueryConfigHandler.ConfigurationKeys.DEFAULT_OPERATOR should be set on the QueryConfigHandler\");\n    }\n\n    this.usingAnd = StandardQueryConfigHandler.Operator.AND == op;\n\n    return super.process(queryTree);\n\n  }\n\n","sourceOld":"  @Override\n  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n\n    if (!getQueryConfigHandler().hasAttribute(DefaultOperatorAttribute.class)) {\n      throw new IllegalArgumentException(\n          \"DefaultOperatorAttribute should be set on the QueryConfigHandler\");\n    }\n\n    this.usingAnd = Operator.AND == getQueryConfigHandler().getAttribute(\n        DefaultOperatorAttribute.class).getOperator();\n\n    return super.process(queryTree);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/processors/BooleanModifiersQueryNodeProcessor#process(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/processors/BooleanModifiersQueryNodeProcessor#process(QueryNode).mjava","sourceNew":"  @Override\n  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n    Operator op = getQueryConfigHandler().get(ConfigurationKeys.DEFAULT_OPERATOR);\n    \n    if (op == null) {\n      throw new IllegalArgumentException(\n          \"StandardQueryConfigHandler.ConfigurationKeys.DEFAULT_OPERATOR should be set on the QueryConfigHandler\");\n    }\n\n    this.usingAnd = StandardQueryConfigHandler.Operator.AND == op;\n\n    return super.process(queryTree);\n\n  }\n\n","sourceOld":"  @Override\n  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n\n    if (!getQueryConfigHandler().hasAttribute(DefaultOperatorAttribute.class)) {\n      throw new IllegalArgumentException(\n          \"DefaultOperatorAttribute should be set on the QueryConfigHandler\");\n    }\n\n    this.usingAnd = Operator.AND == getQueryConfigHandler().getAttribute(\n        DefaultOperatorAttribute.class).getOperator();\n\n    return super.process(queryTree);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/precedence/processors/BooleanModifiersQueryNodeProcessor#process(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/processors/BooleanModifiersQueryNodeProcessor#process(QueryNode).mjava","sourceNew":"  @Override\n  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n    Operator op = getQueryConfigHandler().get(ConfigurationKeys.DEFAULT_OPERATOR);\n    \n    if (op == null) {\n      throw new IllegalArgumentException(\n          \"StandardQueryConfigHandler.ConfigurationKeys.DEFAULT_OPERATOR should be set on the QueryConfigHandler\");\n    }\n\n    this.usingAnd = StandardQueryConfigHandler.Operator.AND == op;\n\n    return super.process(queryTree);\n\n  }\n\n","sourceOld":"  @Override\n  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n    Operator op = getQueryConfigHandler().get(ConfigurationKeys.DEFAULT_OPERATOR);\n    \n    if (op == null) {\n      throw new IllegalArgumentException(\n          \"StandardQueryConfigHandler.ConfigurationKeys.DEFAULT_OPERATOR should be set on the QueryConfigHandler\");\n    }\n\n    this.usingAnd = StandardQueryConfigHandler.Operator.AND == op;\n\n    return super.process(queryTree);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"2c1fe1aedb70da4139fd9f2f7e92e572017fd083":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8017ab6544f30f93b106e419e7298173bad77f69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32","2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32","2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2c1fe1aedb70da4139fd9f2f7e92e572017fd083":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["2c1fe1aedb70da4139fd9f2f7e92e572017fd083","8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32","8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"8017ab6544f30f93b106e419e7298173bad77f69":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}