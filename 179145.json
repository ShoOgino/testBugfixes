{"path":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin.TopLevelDocValuesTermsQuery#lookupTerm(SortedSetDocValues,BytesRef,long).mjava","commits":[{"id":"a32b832a37c116a61a7e58893eb45eb8c940cc0f","date":1578915801,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin.TopLevelDocValuesTermsQuery#lookupTerm(SortedSetDocValues,BytesRef,long).mjava","pathOld":"/dev/null","sourceNew":"    /*\n     * Same binary-search based implementation as SortedSetDocValues.lookupTerm(BytesRef), but with an\n     * optimization to narrow the search space where possible by providing a startOrd instead of begining each search\n     * at 0.\n     */\n    private long lookupTerm(SortedSetDocValues docValues, BytesRef key, long startOrd) throws IOException {\n      long low = startOrd;\n      long high = docValues.getValueCount()-1;\n\n      while (low <= high) {\n        long mid = (low + high) >>> 1;\n        final BytesRef term = docValues.lookupOrd(mid);\n        int cmp = term.compareTo(key);\n\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          return mid; // key found\n        }\n      }\n\n      return -(low + 1);  // key not found.\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2509bad1fbf30792438821cc94f7a5e1a13d5473","date":1578934553,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/TermsQParserPlugin.TopLevelDocValuesTermsQuery#lookupTerm(SortedSetDocValues,BytesRef,long).mjava","pathOld":"/dev/null","sourceNew":"    /*\n     * Same binary-search based implementation as SortedSetDocValues.lookupTerm(BytesRef), but with an\n     * optimization to narrow the search space where possible by providing a startOrd instead of begining each search\n     * at 0.\n     */\n    private long lookupTerm(SortedSetDocValues docValues, BytesRef key, long startOrd) throws IOException {\n      long low = startOrd;\n      long high = docValues.getValueCount()-1;\n\n      while (low <= high) {\n        long mid = (low + high) >>> 1;\n        final BytesRef term = docValues.lookupOrd(mid);\n        int cmp = term.compareTo(key);\n\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          return mid; // key found\n        }\n      }\n\n      return -(low + 1);  // key not found.\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a32b832a37c116a61a7e58893eb45eb8c940cc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a32b832a37c116a61a7e58893eb45eb8c940cc0f"],"2509bad1fbf30792438821cc94f7a5e1a13d5473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a32b832a37c116a61a7e58893eb45eb8c940cc0f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a32b832a37c116a61a7e58893eb45eb8c940cc0f","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"a32b832a37c116a61a7e58893eb45eb8c940cc0f":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2509bad1fbf30792438821cc94f7a5e1a13d5473":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}