{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","commits":[{"id":"b59603a30f81d2af70cd2033270521dc7c8ec626","date":1273513065,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","sourceNew":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        // for now hardcode at 2.9, as its what the old code did.\n        // would be nice to fix, but shouldn't store a version in each submap!!!\n        currMap.submap = new CharArrayMap<SynonymMap>(Version.LUCENE_29, 1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List<Token> superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = (Token[])superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","sourceOld":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        // for now hardcode at 2.9, as its what the old code did.\n        // would be nice to fix, but shouldn't store a version in each submap!!!\n        currMap.submap = new CharArrayMap<SynonymMap>(Version.LUCENE_29, 1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List<Token> superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = (Token[])superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4881303d8a0667d9865d91f1d7b7a91e001cd5f5","date":1286123254,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","sourceNew":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        // for now hardcode at 2.9, as its what the old code did.\n        // would be nice to fix, but shouldn't store a version in each submap!!!\n        currMap.submap = new CharArrayMap<SynonymMap>(Version.LUCENE_29, 1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List<Token> superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","sourceOld":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        // for now hardcode at 2.9, as its what the old code did.\n        // would be nice to fix, but shouldn't store a version in each submap!!!\n        currMap.submap = new CharArrayMap<SynonymMap>(Version.LUCENE_29, 1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List<Token> superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = (Token[])superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","sourceNew":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        // for now hardcode at 4.0, as its what the old code did.\n        // would be nice to fix, but shouldn't store a version in each submap!!!\n        currMap.submap = new CharArrayMap<SynonymMap>(Version.LUCENE_40, 1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List<Token> superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","sourceOld":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        // for now hardcode at 2.9, as its what the old code did.\n        // would be nice to fix, but shouldn't store a version in each submap!!!\n        currMap.submap = new CharArrayMap<SynonymMap>(Version.LUCENE_29, 1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List<Token> superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","sourceNew":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        // for now hardcode at 4.0, as its what the old code did.\n        // would be nice to fix, but shouldn't store a version in each submap!!!\n        currMap.submap = new CharArrayMap<SynonymMap>(Version.LUCENE_40, 1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List<Token> superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","sourceOld":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        // for now hardcode at 2.9, as its what the old code did.\n        // would be nice to fix, but shouldn't store a version in each submap!!!\n        currMap.submap = new CharArrayMap<SynonymMap>(Version.LUCENE_29, 1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List<Token> superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","sourceNew":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        // for now hardcode at 4.0, as its what the old code did.\n        // would be nice to fix, but shouldn't store a version in each submap!!!\n        currMap.submap = new CharArrayMap<SynonymMap>(Version.LUCENE_40, 1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List<Token> superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","sourceOld":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        // for now hardcode at 2.9, as its what the old code did.\n        // would be nice to fix, but shouldn't store a version in each submap!!!\n        currMap.submap = new CharArrayMap<SynonymMap>(Version.LUCENE_29, 1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List<Token> superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = (Token[])superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymMap#add(List[String],List[Token],boolean,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","sourceNew":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SlowSynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        // for now hardcode at 4.0, as its what the old code did.\n        // would be nice to fix, but shouldn't store a version in each submap!!!\n        currMap.submap = new CharArrayMap<SlowSynonymMap>(Version.LUCENE_40, 1, ignoreCase());\n      }\n\n      SlowSynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SlowSynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List<Token> superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","sourceOld":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        // for now hardcode at 4.0, as its what the old code did.\n        // would be nice to fix, but shouldn't store a version in each submap!!!\n        currMap.submap = new CharArrayMap<SynonymMap>(Version.LUCENE_40, 1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List<Token> superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4881303d8a0667d9865d91f1d7b7a91e001cd5f5":["b59603a30f81d2af70cd2033270521dc7c8ec626"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b59603a30f81d2af70cd2033270521dc7c8ec626":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b59603a30f81d2af70cd2033270521dc7c8ec626","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["4881303d8a0667d9865d91f1d7b7a91e001cd5f5","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["4881303d8a0667d9865d91f1d7b7a91e001cd5f5"]},"commit2Childs":{"4881303d8a0667d9865d91f1d7b7a91e001cd5f5":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b59603a30f81d2af70cd2033270521dc7c8ec626"],"b59603a30f81d2af70cd2033270521dc7c8ec626":["4881303d8a0667d9865d91f1d7b7a91e001cd5f5","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}