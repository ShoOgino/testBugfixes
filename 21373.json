{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Bounds#addLongitudeBound(double,double).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Bounds#addLongitudeBound(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Bounds#addLongitudeBound(double,double).mjava","sourceNew":"  protected void addLongitudeBound(double newLeftLongitude, double newRightLongitude) {\n    if (leftLongitude == null && rightLongitude == null) {\n      leftLongitude = newLeftLongitude;\n      rightLongitude = newRightLongitude;\n    } else {\n      // Map the current range to something monotonically increasing\n      double currentLeftLongitude = leftLongitude;\n      double currentRightLongitude = rightLongitude;\n      if (currentRightLongitude < currentLeftLongitude)\n        currentRightLongitude += 2.0 * Math.PI;\n      double adjustedLeftLongitude = newLeftLongitude;\n      double adjustedRightLongitude = newRightLongitude;\n      if (adjustedRightLongitude < adjustedLeftLongitude)\n        adjustedRightLongitude += 2.0 * Math.PI;\n      // Compare to see what the relationship is\n      if (currentLeftLongitude <= adjustedLeftLongitude && currentRightLongitude >= adjustedRightLongitude) {\n        // No adjustment needed.\n      } else if (currentLeftLongitude >= adjustedLeftLongitude && currentRightLongitude <= adjustedRightLongitude) {\n        // New longitude entirely contains old one\n        leftLongitude = newLeftLongitude;\n        rightLongitude = newRightLongitude;\n      } else {\n        if (currentLeftLongitude > adjustedLeftLongitude) {\n          // New left longitude needed\n          leftLongitude = newLeftLongitude;\n        }\n        if (currentRightLongitude < adjustedRightLongitude) {\n          // New right longitude needed\n          rightLongitude = newRightLongitude;\n        }\n      }\n    }\n    double testRightLongitude = rightLongitude;\n    if (testRightLongitude < leftLongitude)\n      testRightLongitude += Math.PI * 2.0;\n    // If the bound exceeds 180 degrees, we know we could have screwed up.\n    if (testRightLongitude - leftLongitude >= Math.PI) {\n      noLongitudeBound = true;\n      leftLongitude = null;\n      rightLongitude = null;\n    }\n  }\n\n","sourceOld":"  protected void addLongitudeBound(double newLeftLongitude, double newRightLongitude) {\n    if (leftLongitude == null && rightLongitude == null) {\n      leftLongitude = newLeftLongitude;\n      rightLongitude = newRightLongitude;\n    } else {\n      // Map the current range to something monotonically increasing\n      double currentLeftLongitude = leftLongitude;\n      double currentRightLongitude = rightLongitude;\n      if (currentRightLongitude < currentLeftLongitude)\n        currentRightLongitude += 2.0 * Math.PI;\n      double adjustedLeftLongitude = newLeftLongitude;\n      double adjustedRightLongitude = newRightLongitude;\n      if (adjustedRightLongitude < adjustedLeftLongitude)\n        adjustedRightLongitude += 2.0 * Math.PI;\n      // Compare to see what the relationship is\n      if (currentLeftLongitude <= adjustedLeftLongitude && currentRightLongitude >= adjustedRightLongitude) {\n        // No adjustment needed.\n      } else if (currentLeftLongitude >= adjustedLeftLongitude && currentRightLongitude <= adjustedRightLongitude) {\n        // New longitude entirely contains old one\n        leftLongitude = newLeftLongitude;\n        rightLongitude = newRightLongitude;\n      } else {\n        if (currentLeftLongitude > adjustedLeftLongitude) {\n          // New left longitude needed\n          leftLongitude = newLeftLongitude;\n        }\n        if (currentRightLongitude < adjustedRightLongitude) {\n          // New right longitude needed\n          rightLongitude = newRightLongitude;\n        }\n      }\n    }\n    double testRightLongitude = rightLongitude;\n    if (testRightLongitude < leftLongitude)\n      testRightLongitude += Math.PI * 2.0;\n    // If the bound exceeds 180 degrees, we know we could have screwed up.\n    if (testRightLongitude - leftLongitude >= Math.PI) {\n      noLongitudeBound = true;\n      leftLongitude = null;\n      rightLongitude = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71849bd31d150133a9a1027bf1607967b406c57","date":1436811056,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Bounds#addLongitudeBound(double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Bounds#addLongitudeBound(double,double).mjava","sourceNew":"  /** Update longitude bound.\n   *@param newLeftLongitude is the left longitude.\n   *@param newRightLongitude is the right longitude.\n   */\n  protected void addLongitudeBound(double newLeftLongitude, double newRightLongitude) {\n    if (leftLongitude == null && rightLongitude == null) {\n      leftLongitude = newLeftLongitude;\n      rightLongitude = newRightLongitude;\n    } else {\n      // Map the current range to something monotonically increasing\n      double currentLeftLongitude = leftLongitude;\n      double currentRightLongitude = rightLongitude;\n      if (currentRightLongitude < currentLeftLongitude)\n        currentRightLongitude += 2.0 * Math.PI;\n      double adjustedLeftLongitude = newLeftLongitude;\n      double adjustedRightLongitude = newRightLongitude;\n      if (adjustedRightLongitude < adjustedLeftLongitude)\n        adjustedRightLongitude += 2.0 * Math.PI;\n      // Compare to see what the relationship is\n      if (currentLeftLongitude <= adjustedLeftLongitude && currentRightLongitude >= adjustedRightLongitude) {\n        // No adjustment needed.\n      } else if (currentLeftLongitude >= adjustedLeftLongitude && currentRightLongitude <= adjustedRightLongitude) {\n        // New longitude entirely contains old one\n        leftLongitude = newLeftLongitude;\n        rightLongitude = newRightLongitude;\n      } else {\n        if (currentLeftLongitude > adjustedLeftLongitude) {\n          // New left longitude needed\n          leftLongitude = newLeftLongitude;\n        }\n        if (currentRightLongitude < adjustedRightLongitude) {\n          // New right longitude needed\n          rightLongitude = newRightLongitude;\n        }\n      }\n    }\n    double testRightLongitude = rightLongitude;\n    if (testRightLongitude < leftLongitude)\n      testRightLongitude += Math.PI * 2.0;\n    // If the bound exceeds 180 degrees, we know we could have screwed up.\n    if (testRightLongitude - leftLongitude >= Math.PI) {\n      noLongitudeBound = true;\n      leftLongitude = null;\n      rightLongitude = null;\n    }\n  }\n\n","sourceOld":"  protected void addLongitudeBound(double newLeftLongitude, double newRightLongitude) {\n    if (leftLongitude == null && rightLongitude == null) {\n      leftLongitude = newLeftLongitude;\n      rightLongitude = newRightLongitude;\n    } else {\n      // Map the current range to something monotonically increasing\n      double currentLeftLongitude = leftLongitude;\n      double currentRightLongitude = rightLongitude;\n      if (currentRightLongitude < currentLeftLongitude)\n        currentRightLongitude += 2.0 * Math.PI;\n      double adjustedLeftLongitude = newLeftLongitude;\n      double adjustedRightLongitude = newRightLongitude;\n      if (adjustedRightLongitude < adjustedLeftLongitude)\n        adjustedRightLongitude += 2.0 * Math.PI;\n      // Compare to see what the relationship is\n      if (currentLeftLongitude <= adjustedLeftLongitude && currentRightLongitude >= adjustedRightLongitude) {\n        // No adjustment needed.\n      } else if (currentLeftLongitude >= adjustedLeftLongitude && currentRightLongitude <= adjustedRightLongitude) {\n        // New longitude entirely contains old one\n        leftLongitude = newLeftLongitude;\n        rightLongitude = newRightLongitude;\n      } else {\n        if (currentLeftLongitude > adjustedLeftLongitude) {\n          // New left longitude needed\n          leftLongitude = newLeftLongitude;\n        }\n        if (currentRightLongitude < adjustedRightLongitude) {\n          // New right longitude needed\n          rightLongitude = newRightLongitude;\n        }\n      }\n    }\n    double testRightLongitude = rightLongitude;\n    if (testRightLongitude < leftLongitude)\n      testRightLongitude += Math.PI * 2.0;\n    // If the bound exceeds 180 degrees, we know we could have screwed up.\n    if (testRightLongitude - leftLongitude >= Math.PI) {\n      noLongitudeBound = true;\n      leftLongitude = null;\n      rightLongitude = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Bounds#addLongitudeBound(double,double).mjava","sourceNew":null,"sourceOld":"  /** Update longitude bound.\n   *@param newLeftLongitude is the left longitude.\n   *@param newRightLongitude is the right longitude.\n   */\n  protected void addLongitudeBound(double newLeftLongitude, double newRightLongitude) {\n    if (leftLongitude == null && rightLongitude == null) {\n      leftLongitude = newLeftLongitude;\n      rightLongitude = newRightLongitude;\n    } else {\n      // Map the current range to something monotonically increasing\n      double currentLeftLongitude = leftLongitude;\n      double currentRightLongitude = rightLongitude;\n      if (currentRightLongitude < currentLeftLongitude)\n        currentRightLongitude += 2.0 * Math.PI;\n      double adjustedLeftLongitude = newLeftLongitude;\n      double adjustedRightLongitude = newRightLongitude;\n      if (adjustedRightLongitude < adjustedLeftLongitude)\n        adjustedRightLongitude += 2.0 * Math.PI;\n      // Compare to see what the relationship is\n      if (currentLeftLongitude <= adjustedLeftLongitude && currentRightLongitude >= adjustedRightLongitude) {\n        // No adjustment needed.\n      } else if (currentLeftLongitude >= adjustedLeftLongitude && currentRightLongitude <= adjustedRightLongitude) {\n        // New longitude entirely contains old one\n        leftLongitude = newLeftLongitude;\n        rightLongitude = newRightLongitude;\n      } else {\n        if (currentLeftLongitude > adjustedLeftLongitude) {\n          // New left longitude needed\n          leftLongitude = newLeftLongitude;\n        }\n        if (currentRightLongitude < adjustedRightLongitude) {\n          // New right longitude needed\n          rightLongitude = newRightLongitude;\n        }\n      }\n    }\n    double testRightLongitude = rightLongitude;\n    if (testRightLongitude < leftLongitude)\n      testRightLongitude += Math.PI * 2.0;\n    // If the bound exceeds 180 degrees, we know we could have screwed up.\n    if (testRightLongitude - leftLongitude >= Math.PI) {\n      noLongitudeBound = true;\n      leftLongitude = null;\n      rightLongitude = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a71849bd31d150133a9a1027bf1607967b406c57":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"f64b7098768253180859cd8faeae6b1a185b06ed":["a71849bd31d150133a9a1027bf1607967b406c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f64b7098768253180859cd8faeae6b1a185b06ed"]},"commit2Childs":{"a71849bd31d150133a9a1027bf1607967b406c57":["f64b7098768253180859cd8faeae6b1a185b06ed"],"f64b7098768253180859cd8faeae6b1a185b06ed":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a71849bd31d150133a9a1027bf1607967b406c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}