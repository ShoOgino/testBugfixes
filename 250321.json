{"path":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#get(boolean).mjava","commits":[{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#get(boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Scorer get(boolean randomAccess) throws IOException {\n    // three cases: conjunction, disjunction, or mix\n\n    // pure conjunction\n    if (subs.get(Occur.SHOULD).isEmpty()) {\n      return excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), randomAccess), subs.get(Occur.MUST_NOT));\n    }\n\n    // pure disjunction\n    if (subs.get(Occur.FILTER).isEmpty() && subs.get(Occur.MUST).isEmpty()) {\n      return excl(opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, randomAccess), subs.get(Occur.MUST_NOT));\n    }\n\n    // conjunction-disjunction mix:\n    // we create the required and optional pieces, and then\n    // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n    // optional side must match. otherwise it's required + optional\n\n    if (minShouldMatch > 0) {\n      boolean reqRandomAccess = true;\n      boolean msmRandomAccess = true;\n      if (randomAccess == false) {\n        // We need to figure out whether the MUST/FILTER or the SHOULD clauses would lead the iteration\n        final long reqCost = Stream.concat(\n            subs.get(Occur.MUST).stream(),\n            subs.get(Occur.FILTER).stream())\n            .mapToLong(ScorerSupplier::cost)\n            .min().getAsLong();\n        final long msmCost = MinShouldMatchSumScorer.cost(\n            subs.get(Occur.SHOULD).stream().mapToLong(ScorerSupplier::cost),\n            subs.get(Occur.SHOULD).size(), minShouldMatch);\n        reqRandomAccess = reqCost > msmCost;\n        msmRandomAccess = msmCost > reqCost;\n      }\n      Scorer req = excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), reqRandomAccess), subs.get(Occur.MUST_NOT));\n      Scorer opt = opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, msmRandomAccess);\n      return new ConjunctionScorer(weight, Arrays.asList(req, opt), Arrays.asList(req, opt));\n    } else {\n      assert needsScores;\n      return new ReqOptSumScorer(\n          excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), randomAccess), subs.get(Occur.MUST_NOT)),\n          opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, true));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#get(boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Scorer get(boolean randomAccess) throws IOException {\n    // three cases: conjunction, disjunction, or mix\n\n    // pure conjunction\n    if (subs.get(Occur.SHOULD).isEmpty()) {\n      return excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), randomAccess), subs.get(Occur.MUST_NOT));\n    }\n\n    // pure disjunction\n    if (subs.get(Occur.FILTER).isEmpty() && subs.get(Occur.MUST).isEmpty()) {\n      return excl(opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, randomAccess), subs.get(Occur.MUST_NOT));\n    }\n\n    // conjunction-disjunction mix:\n    // we create the required and optional pieces, and then\n    // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n    // optional side must match. otherwise it's required + optional\n\n    if (minShouldMatch > 0) {\n      boolean reqRandomAccess = true;\n      boolean msmRandomAccess = true;\n      if (randomAccess == false) {\n        // We need to figure out whether the MUST/FILTER or the SHOULD clauses would lead the iteration\n        final long reqCost = Stream.concat(\n            subs.get(Occur.MUST).stream(),\n            subs.get(Occur.FILTER).stream())\n            .mapToLong(ScorerSupplier::cost)\n            .min().getAsLong();\n        final long msmCost = MinShouldMatchSumScorer.cost(\n            subs.get(Occur.SHOULD).stream().mapToLong(ScorerSupplier::cost),\n            subs.get(Occur.SHOULD).size(), minShouldMatch);\n        reqRandomAccess = reqCost > msmCost;\n        msmRandomAccess = msmCost > reqCost;\n      }\n      Scorer req = excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), reqRandomAccess), subs.get(Occur.MUST_NOT));\n      Scorer opt = opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, msmRandomAccess);\n      return new ConjunctionScorer(weight, Arrays.asList(req, opt), Arrays.asList(req, opt));\n    } else {\n      assert needsScores;\n      return new ReqOptSumScorer(\n          excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), randomAccess), subs.get(Occur.MUST_NOT)),\n          opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, true));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f3e9c0fc20b3107388ec853a6fbad9f891b461","date":1502359844,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#get(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#get(boolean).mjava","sourceNew":"  @Override\n  public Scorer get(long leadCost) throws IOException {\n    // three cases: conjunction, disjunction, or mix\n    leadCost = Math.min(leadCost, cost());\n\n    // pure conjunction\n    if (subs.get(Occur.SHOULD).isEmpty()) {\n      return excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), leadCost), subs.get(Occur.MUST_NOT), leadCost);\n    }\n\n    // pure disjunction\n    if (subs.get(Occur.FILTER).isEmpty() && subs.get(Occur.MUST).isEmpty()) {\n      return excl(opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, leadCost), subs.get(Occur.MUST_NOT), leadCost);\n    }\n\n    // conjunction-disjunction mix:\n    // we create the required and optional pieces, and then\n    // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n    // optional side must match. otherwise it's required + optional\n\n    if (minShouldMatch > 0) {\n      Scorer req = excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), leadCost), subs.get(Occur.MUST_NOT), leadCost);\n      Scorer opt = opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, leadCost);\n      return new ConjunctionScorer(weight, Arrays.asList(req, opt), Arrays.asList(req, opt));\n    } else {\n      assert needsScores;\n      return new ReqOptSumScorer(\n          excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), leadCost), subs.get(Occur.MUST_NOT), leadCost),\n          opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, leadCost));\n    }\n  }\n\n","sourceOld":"  @Override\n  public Scorer get(boolean randomAccess) throws IOException {\n    // three cases: conjunction, disjunction, or mix\n\n    // pure conjunction\n    if (subs.get(Occur.SHOULD).isEmpty()) {\n      return excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), randomAccess), subs.get(Occur.MUST_NOT));\n    }\n\n    // pure disjunction\n    if (subs.get(Occur.FILTER).isEmpty() && subs.get(Occur.MUST).isEmpty()) {\n      return excl(opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, randomAccess), subs.get(Occur.MUST_NOT));\n    }\n\n    // conjunction-disjunction mix:\n    // we create the required and optional pieces, and then\n    // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n    // optional side must match. otherwise it's required + optional\n\n    if (minShouldMatch > 0) {\n      boolean reqRandomAccess = true;\n      boolean msmRandomAccess = true;\n      if (randomAccess == false) {\n        // We need to figure out whether the MUST/FILTER or the SHOULD clauses would lead the iteration\n        final long reqCost = Stream.concat(\n            subs.get(Occur.MUST).stream(),\n            subs.get(Occur.FILTER).stream())\n            .mapToLong(ScorerSupplier::cost)\n            .min().getAsLong();\n        final long msmCost = MinShouldMatchSumScorer.cost(\n            subs.get(Occur.SHOULD).stream().mapToLong(ScorerSupplier::cost),\n            subs.get(Occur.SHOULD).size(), minShouldMatch);\n        reqRandomAccess = reqCost > msmCost;\n        msmRandomAccess = msmCost > reqCost;\n      }\n      Scorer req = excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), reqRandomAccess), subs.get(Occur.MUST_NOT));\n      Scorer opt = opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, msmRandomAccess);\n      return new ConjunctionScorer(weight, Arrays.asList(req, opt), Arrays.asList(req, opt));\n    } else {\n      assert needsScores;\n      return new ReqOptSumScorer(\n          excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), randomAccess), subs.get(Occur.MUST_NOT)),\n          opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, true));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6ba405c7c8192661bdf7ce782181d12f3162a6","date":1502361392,"type":5,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#get(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#get(boolean).mjava","sourceNew":"  @Override\n  public Scorer get(long leadCost) throws IOException {\n    // three cases: conjunction, disjunction, or mix\n    leadCost = Math.min(leadCost, cost());\n\n    // pure conjunction\n    if (subs.get(Occur.SHOULD).isEmpty()) {\n      return excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), leadCost), subs.get(Occur.MUST_NOT), leadCost);\n    }\n\n    // pure disjunction\n    if (subs.get(Occur.FILTER).isEmpty() && subs.get(Occur.MUST).isEmpty()) {\n      return excl(opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, leadCost), subs.get(Occur.MUST_NOT), leadCost);\n    }\n\n    // conjunction-disjunction mix:\n    // we create the required and optional pieces, and then\n    // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n    // optional side must match. otherwise it's required + optional\n\n    if (minShouldMatch > 0) {\n      Scorer req = excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), leadCost), subs.get(Occur.MUST_NOT), leadCost);\n      Scorer opt = opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, leadCost);\n      return new ConjunctionScorer(weight, Arrays.asList(req, opt), Arrays.asList(req, opt));\n    } else {\n      assert needsScores;\n      return new ReqOptSumScorer(\n          excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), leadCost), subs.get(Occur.MUST_NOT), leadCost),\n          opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, leadCost));\n    }\n  }\n\n","sourceOld":"  @Override\n  public Scorer get(boolean randomAccess) throws IOException {\n    // three cases: conjunction, disjunction, or mix\n\n    // pure conjunction\n    if (subs.get(Occur.SHOULD).isEmpty()) {\n      return excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), randomAccess), subs.get(Occur.MUST_NOT));\n    }\n\n    // pure disjunction\n    if (subs.get(Occur.FILTER).isEmpty() && subs.get(Occur.MUST).isEmpty()) {\n      return excl(opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, randomAccess), subs.get(Occur.MUST_NOT));\n    }\n\n    // conjunction-disjunction mix:\n    // we create the required and optional pieces, and then\n    // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n    // optional side must match. otherwise it's required + optional\n\n    if (minShouldMatch > 0) {\n      boolean reqRandomAccess = true;\n      boolean msmRandomAccess = true;\n      if (randomAccess == false) {\n        // We need to figure out whether the MUST/FILTER or the SHOULD clauses would lead the iteration\n        final long reqCost = Stream.concat(\n            subs.get(Occur.MUST).stream(),\n            subs.get(Occur.FILTER).stream())\n            .mapToLong(ScorerSupplier::cost)\n            .min().getAsLong();\n        final long msmCost = MinShouldMatchSumScorer.cost(\n            subs.get(Occur.SHOULD).stream().mapToLong(ScorerSupplier::cost),\n            subs.get(Occur.SHOULD).size(), minShouldMatch);\n        reqRandomAccess = reqCost > msmCost;\n        msmRandomAccess = msmCost > reqCost;\n      }\n      Scorer req = excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), reqRandomAccess), subs.get(Occur.MUST_NOT));\n      Scorer opt = opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, msmRandomAccess);\n      return new ConjunctionScorer(weight, Arrays.asList(req, opt), Arrays.asList(req, opt));\n    } else {\n      assert needsScores;\n      return new ReqOptSumScorer(\n          excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), randomAccess), subs.get(Occur.MUST_NOT)),\n          opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, true));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#get(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#get(boolean).mjava","sourceNew":"  @Override\n  public Scorer get(long leadCost) throws IOException {\n    // three cases: conjunction, disjunction, or mix\n    leadCost = Math.min(leadCost, cost());\n\n    // pure conjunction\n    if (subs.get(Occur.SHOULD).isEmpty()) {\n      return excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), leadCost), subs.get(Occur.MUST_NOT), leadCost);\n    }\n\n    // pure disjunction\n    if (subs.get(Occur.FILTER).isEmpty() && subs.get(Occur.MUST).isEmpty()) {\n      return excl(opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, leadCost), subs.get(Occur.MUST_NOT), leadCost);\n    }\n\n    // conjunction-disjunction mix:\n    // we create the required and optional pieces, and then\n    // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n    // optional side must match. otherwise it's required + optional\n\n    if (minShouldMatch > 0) {\n      Scorer req = excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), leadCost), subs.get(Occur.MUST_NOT), leadCost);\n      Scorer opt = opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, leadCost);\n      return new ConjunctionScorer(weight, Arrays.asList(req, opt), Arrays.asList(req, opt));\n    } else {\n      assert needsScores;\n      return new ReqOptSumScorer(\n          excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), leadCost), subs.get(Occur.MUST_NOT), leadCost),\n          opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, leadCost));\n    }\n  }\n\n","sourceOld":"  @Override\n  public Scorer get(boolean randomAccess) throws IOException {\n    // three cases: conjunction, disjunction, or mix\n\n    // pure conjunction\n    if (subs.get(Occur.SHOULD).isEmpty()) {\n      return excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), randomAccess), subs.get(Occur.MUST_NOT));\n    }\n\n    // pure disjunction\n    if (subs.get(Occur.FILTER).isEmpty() && subs.get(Occur.MUST).isEmpty()) {\n      return excl(opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, randomAccess), subs.get(Occur.MUST_NOT));\n    }\n\n    // conjunction-disjunction mix:\n    // we create the required and optional pieces, and then\n    // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n    // optional side must match. otherwise it's required + optional\n\n    if (minShouldMatch > 0) {\n      boolean reqRandomAccess = true;\n      boolean msmRandomAccess = true;\n      if (randomAccess == false) {\n        // We need to figure out whether the MUST/FILTER or the SHOULD clauses would lead the iteration\n        final long reqCost = Stream.concat(\n            subs.get(Occur.MUST).stream(),\n            subs.get(Occur.FILTER).stream())\n            .mapToLong(ScorerSupplier::cost)\n            .min().getAsLong();\n        final long msmCost = MinShouldMatchSumScorer.cost(\n            subs.get(Occur.SHOULD).stream().mapToLong(ScorerSupplier::cost),\n            subs.get(Occur.SHOULD).size(), minShouldMatch);\n        reqRandomAccess = reqCost > msmCost;\n        msmRandomAccess = msmCost > reqCost;\n      }\n      Scorer req = excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), reqRandomAccess), subs.get(Occur.MUST_NOT));\n      Scorer opt = opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, msmRandomAccess);\n      return new ConjunctionScorer(weight, Arrays.asList(req, opt), Arrays.asList(req, opt));\n    } else {\n      assert needsScores;\n      return new ReqOptSumScorer(\n          excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), randomAccess), subs.get(Occur.MUST_NOT)),\n          opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, true));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#get(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#get(boolean).mjava","sourceNew":"  @Override\n  public Scorer get(long leadCost) throws IOException {\n    // three cases: conjunction, disjunction, or mix\n    leadCost = Math.min(leadCost, cost());\n\n    // pure conjunction\n    if (subs.get(Occur.SHOULD).isEmpty()) {\n      return excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), leadCost), subs.get(Occur.MUST_NOT), leadCost);\n    }\n\n    // pure disjunction\n    if (subs.get(Occur.FILTER).isEmpty() && subs.get(Occur.MUST).isEmpty()) {\n      return excl(opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, leadCost), subs.get(Occur.MUST_NOT), leadCost);\n    }\n\n    // conjunction-disjunction mix:\n    // we create the required and optional pieces, and then\n    // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n    // optional side must match. otherwise it's required + optional\n\n    if (minShouldMatch > 0) {\n      Scorer req = excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), leadCost), subs.get(Occur.MUST_NOT), leadCost);\n      Scorer opt = opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, leadCost);\n      return new ConjunctionScorer(weight, Arrays.asList(req, opt), Arrays.asList(req, opt));\n    } else {\n      assert needsScores;\n      return new ReqOptSumScorer(\n          excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), leadCost), subs.get(Occur.MUST_NOT), leadCost),\n          opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, leadCost));\n    }\n  }\n\n","sourceOld":"  @Override\n  public Scorer get(boolean randomAccess) throws IOException {\n    // three cases: conjunction, disjunction, or mix\n\n    // pure conjunction\n    if (subs.get(Occur.SHOULD).isEmpty()) {\n      return excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), randomAccess), subs.get(Occur.MUST_NOT));\n    }\n\n    // pure disjunction\n    if (subs.get(Occur.FILTER).isEmpty() && subs.get(Occur.MUST).isEmpty()) {\n      return excl(opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, randomAccess), subs.get(Occur.MUST_NOT));\n    }\n\n    // conjunction-disjunction mix:\n    // we create the required and optional pieces, and then\n    // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n    // optional side must match. otherwise it's required + optional\n\n    if (minShouldMatch > 0) {\n      boolean reqRandomAccess = true;\n      boolean msmRandomAccess = true;\n      if (randomAccess == false) {\n        // We need to figure out whether the MUST/FILTER or the SHOULD clauses would lead the iteration\n        final long reqCost = Stream.concat(\n            subs.get(Occur.MUST).stream(),\n            subs.get(Occur.FILTER).stream())\n            .mapToLong(ScorerSupplier::cost)\n            .min().getAsLong();\n        final long msmCost = MinShouldMatchSumScorer.cost(\n            subs.get(Occur.SHOULD).stream().mapToLong(ScorerSupplier::cost),\n            subs.get(Occur.SHOULD).size(), minShouldMatch);\n        reqRandomAccess = reqCost > msmCost;\n        msmRandomAccess = msmCost > reqCost;\n      }\n      Scorer req = excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), reqRandomAccess), subs.get(Occur.MUST_NOT));\n      Scorer opt = opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, msmRandomAccess);\n      return new ConjunctionScorer(weight, Arrays.asList(req, opt), Arrays.asList(req, opt));\n    } else {\n      assert needsScores;\n      return new ReqOptSumScorer(\n          excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), randomAccess), subs.get(Occur.MUST_NOT)),\n          opt(subs.get(Occur.SHOULD), minShouldMatch, needsScores, true));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["dca67e06c96e95a8d9ef07418b6299bfd981523b","24f3e9c0fc20b3107388ec853a6fbad9f891b461"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["dca67e06c96e95a8d9ef07418b6299bfd981523b","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["dca67e06c96e95a8d9ef07418b6299bfd981523b","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dca67e06c96e95a8d9ef07418b6299bfd981523b"]},"commit2Childs":{"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["7d6ba405c7c8192661bdf7ce782181d12f3162a6","58884af1f68e9d61c217c753fbd6266d86a63b14","24f3e9c0fc20b3107388ec853a6fbad9f891b461","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dca67e06c96e95a8d9ef07418b6299bfd981523b","302d34f2c66e8d489ee13078305c330cbf67b226"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}