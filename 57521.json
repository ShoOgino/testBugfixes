{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#searchWithFilter(AtomicReaderContext,Weight,Filter,Collector).mjava","commits":[{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#searchWithFilter(AtomicReaderContext,Weight,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#searchWithFilter(ReaderContext,Weight,Filter,Collector).mjava","sourceNew":"  private void searchWithFilter(AtomicReaderContext context, Weight weight,\n      final Filter filter, final Collector collector) throws IOException {\n\n    assert filter != null;\n    \n    Scorer scorer = weight.scorer(context, true, false);\n    if (scorer == null) {\n      return;\n    }\n\n    int docID = scorer.docID();\n    assert docID == -1 || docID == DocIdSetIterator.NO_MORE_DOCS;\n\n    // CHECKME: use ConjunctionScorer here?\n    DocIdSet filterDocIdSet = filter.getDocIdSet(context);\n    if (filterDocIdSet == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    \n    DocIdSetIterator filterIter = filterDocIdSet.iterator();\n    if (filterIter == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    int filterDoc = filterIter.nextDoc();\n    int scorerDoc = scorer.advance(filterDoc);\n    \n    collector.setScorer(scorer);\n    while (true) {\n      if (scorerDoc == filterDoc) {\n        // Check if scorer has exhausted, only before collecting.\n        if (scorerDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        collector.collect(scorerDoc);\n        filterDoc = filterIter.nextDoc();\n        scorerDoc = scorer.advance(filterDoc);\n      } else if (scorerDoc > filterDoc) {\n        filterDoc = filterIter.advance(scorerDoc);\n      } else {\n        scorerDoc = scorer.advance(filterDoc);\n      }\n    }\n  }\n\n","sourceOld":"  private void searchWithFilter(ReaderContext context, Weight weight,\n      final Filter filter, final Collector collector) throws IOException {\n\n    assert filter != null;\n    \n    Scorer scorer = weight.scorer(context, true, false);\n    if (scorer == null) {\n      return;\n    }\n\n    int docID = scorer.docID();\n    assert docID == -1 || docID == DocIdSetIterator.NO_MORE_DOCS;\n\n    // CHECKME: use ConjunctionScorer here?\n    DocIdSet filterDocIdSet = filter.getDocIdSet(context);\n    if (filterDocIdSet == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    \n    DocIdSetIterator filterIter = filterDocIdSet.iterator();\n    if (filterIter == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    int filterDoc = filterIter.nextDoc();\n    int scorerDoc = scorer.advance(filterDoc);\n    \n    collector.setScorer(scorer);\n    while (true) {\n      if (scorerDoc == filterDoc) {\n        // Check if scorer has exhausted, only before collecting.\n        if (scorerDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        collector.collect(scorerDoc);\n        filterDoc = filterIter.nextDoc();\n        scorerDoc = scorer.advance(filterDoc);\n      } else if (scorerDoc > filterDoc) {\n        filterDoc = filterIter.advance(scorerDoc);\n      } else {\n        scorerDoc = scorer.advance(filterDoc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc63f17f42c64d6ccc8c361cfcdf074f115f770c","date":1294930751,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#searchWithFilter(AtomicReaderContext,Weight,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#searchWithFilter(AtomicReaderContext,Weight,Filter,Collector).mjava","sourceNew":"  private void searchWithFilter(AtomicReaderContext context, Weight weight,\n      final Filter filter, final Collector collector) throws IOException {\n\n    assert filter != null;\n    \n    Scorer scorer = weight.scorer(context, ScorerContext.def());\n    if (scorer == null) {\n      return;\n    }\n\n    int docID = scorer.docID();\n    assert docID == -1 || docID == DocIdSetIterator.NO_MORE_DOCS;\n\n    // CHECKME: use ConjunctionScorer here?\n    DocIdSet filterDocIdSet = filter.getDocIdSet(context);\n    if (filterDocIdSet == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    \n    DocIdSetIterator filterIter = filterDocIdSet.iterator();\n    if (filterIter == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    int filterDoc = filterIter.nextDoc();\n    int scorerDoc = scorer.advance(filterDoc);\n    \n    collector.setScorer(scorer);\n    while (true) {\n      if (scorerDoc == filterDoc) {\n        // Check if scorer has exhausted, only before collecting.\n        if (scorerDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        collector.collect(scorerDoc);\n        filterDoc = filterIter.nextDoc();\n        scorerDoc = scorer.advance(filterDoc);\n      } else if (scorerDoc > filterDoc) {\n        filterDoc = filterIter.advance(scorerDoc);\n      } else {\n        scorerDoc = scorer.advance(filterDoc);\n      }\n    }\n  }\n\n","sourceOld":"  private void searchWithFilter(AtomicReaderContext context, Weight weight,\n      final Filter filter, final Collector collector) throws IOException {\n\n    assert filter != null;\n    \n    Scorer scorer = weight.scorer(context, true, false);\n    if (scorer == null) {\n      return;\n    }\n\n    int docID = scorer.docID();\n    assert docID == -1 || docID == DocIdSetIterator.NO_MORE_DOCS;\n\n    // CHECKME: use ConjunctionScorer here?\n    DocIdSet filterDocIdSet = filter.getDocIdSet(context);\n    if (filterDocIdSet == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    \n    DocIdSetIterator filterIter = filterDocIdSet.iterator();\n    if (filterIter == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    int filterDoc = filterIter.nextDoc();\n    int scorerDoc = scorer.advance(filterDoc);\n    \n    collector.setScorer(scorer);\n    while (true) {\n      if (scorerDoc == filterDoc) {\n        // Check if scorer has exhausted, only before collecting.\n        if (scorerDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        collector.collect(scorerDoc);\n        filterDoc = filterIter.nextDoc();\n        scorerDoc = scorer.advance(filterDoc);\n      } else if (scorerDoc > filterDoc) {\n        filterDoc = filterIter.advance(scorerDoc);\n      } else {\n        scorerDoc = scorer.advance(filterDoc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#searchWithFilter(AtomicReaderContext,Weight,Filter,Collector).mjava","pathOld":"/dev/null","sourceNew":"  private void searchWithFilter(AtomicReaderContext context, Weight weight,\n      final Filter filter, final Collector collector) throws IOException {\n\n    assert filter != null;\n    \n    Scorer scorer = weight.scorer(context, ScorerContext.def());\n    if (scorer == null) {\n      return;\n    }\n\n    int docID = scorer.docID();\n    assert docID == -1 || docID == DocIdSetIterator.NO_MORE_DOCS;\n\n    // CHECKME: use ConjunctionScorer here?\n    DocIdSet filterDocIdSet = filter.getDocIdSet(context);\n    if (filterDocIdSet == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    \n    DocIdSetIterator filterIter = filterDocIdSet.iterator();\n    if (filterIter == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    int filterDoc = filterIter.nextDoc();\n    int scorerDoc = scorer.advance(filterDoc);\n    \n    collector.setScorer(scorer);\n    while (true) {\n      if (scorerDoc == filterDoc) {\n        // Check if scorer has exhausted, only before collecting.\n        if (scorerDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        collector.collect(scorerDoc);\n        filterDoc = filterIter.nextDoc();\n        scorerDoc = scorer.advance(filterDoc);\n      } else if (scorerDoc > filterDoc) {\n        filterDoc = filterIter.advance(scorerDoc);\n      } else {\n        scorerDoc = scorer.advance(filterDoc);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#searchWithFilter(AtomicReaderContext,Weight,Filter,Collector).mjava","pathOld":"/dev/null","sourceNew":"  private void searchWithFilter(AtomicReaderContext context, Weight weight,\n      final Filter filter, final Collector collector) throws IOException {\n\n    assert filter != null;\n    \n    Scorer scorer = weight.scorer(context, ScorerContext.def());\n    if (scorer == null) {\n      return;\n    }\n\n    int docID = scorer.docID();\n    assert docID == -1 || docID == DocIdSetIterator.NO_MORE_DOCS;\n\n    // CHECKME: use ConjunctionScorer here?\n    DocIdSet filterDocIdSet = filter.getDocIdSet(context);\n    if (filterDocIdSet == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    \n    DocIdSetIterator filterIter = filterDocIdSet.iterator();\n    if (filterIter == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    int filterDoc = filterIter.nextDoc();\n    int scorerDoc = scorer.advance(filterDoc);\n    \n    collector.setScorer(scorer);\n    while (true) {\n      if (scorerDoc == filterDoc) {\n        // Check if scorer has exhausted, only before collecting.\n        if (scorerDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        collector.collect(scorerDoc);\n        filterDoc = filterIter.nextDoc();\n        scorerDoc = scorer.advance(filterDoc);\n      } else if (scorerDoc > filterDoc) {\n        filterDoc = filterIter.advance(scorerDoc);\n      } else {\n        scorerDoc = scorer.advance(filterDoc);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#searchWithFilter(AtomicReaderContext,Weight,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#searchWithFilter(AtomicReaderContext,Weight,Filter,Collector).mjava","sourceNew":"  private void searchWithFilter(AtomicReaderContext context, Weight weight,\n      final Filter filter, final Collector collector) throws IOException {\n\n    assert filter != null;\n    \n    // we are gonna advance() this scorer, so we set inorder=true/toplevel=false \n    Scorer scorer = weight.scorer(context, true, false, context.reader.getLiveDocs());\n    if (scorer == null) {\n      return;\n    }\n\n    int docID = scorer.docID();\n    assert docID == -1 || docID == DocIdSetIterator.NO_MORE_DOCS;\n\n    // CHECKME: use ConjunctionScorer here?\n    DocIdSet filterDocIdSet = filter.getDocIdSet(context);\n    if (filterDocIdSet == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    \n    DocIdSetIterator filterIter = filterDocIdSet.iterator();\n    if (filterIter == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    int filterDoc = filterIter.nextDoc();\n    int scorerDoc = scorer.advance(filterDoc);\n    \n    collector.setScorer(scorer);\n    while (true) {\n      if (scorerDoc == filterDoc) {\n        // Check if scorer has exhausted, only before collecting.\n        if (scorerDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        collector.collect(scorerDoc);\n        filterDoc = filterIter.nextDoc();\n        scorerDoc = scorer.advance(filterDoc);\n      } else if (scorerDoc > filterDoc) {\n        filterDoc = filterIter.advance(scorerDoc);\n      } else {\n        scorerDoc = scorer.advance(filterDoc);\n      }\n    }\n  }\n\n","sourceOld":"  private void searchWithFilter(AtomicReaderContext context, Weight weight,\n      final Filter filter, final Collector collector) throws IOException {\n\n    assert filter != null;\n    \n    Scorer scorer = weight.scorer(context, ScorerContext.def());\n    if (scorer == null) {\n      return;\n    }\n\n    int docID = scorer.docID();\n    assert docID == -1 || docID == DocIdSetIterator.NO_MORE_DOCS;\n\n    // CHECKME: use ConjunctionScorer here?\n    DocIdSet filterDocIdSet = filter.getDocIdSet(context);\n    if (filterDocIdSet == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    \n    DocIdSetIterator filterIter = filterDocIdSet.iterator();\n    if (filterIter == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    int filterDoc = filterIter.nextDoc();\n    int scorerDoc = scorer.advance(filterDoc);\n    \n    collector.setScorer(scorer);\n    while (true) {\n      if (scorerDoc == filterDoc) {\n        // Check if scorer has exhausted, only before collecting.\n        if (scorerDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        collector.collect(scorerDoc);\n        filterDoc = filterIter.nextDoc();\n        scorerDoc = scorer.advance(filterDoc);\n      } else if (scorerDoc > filterDoc) {\n        filterDoc = filterIter.advance(scorerDoc);\n      } else {\n        scorerDoc = scorer.advance(filterDoc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#searchWithFilter(AtomicReaderContext,Weight,Filter,Collector).mjava","sourceNew":null,"sourceOld":"  private void searchWithFilter(AtomicReaderContext context, Weight weight,\n      final Filter filter, final Collector collector) throws IOException {\n\n    assert filter != null;\n    \n    // we are gonna advance() this scorer, so we set inorder=true/toplevel=false \n    Scorer scorer = weight.scorer(context, true, false, context.reader.getLiveDocs());\n    if (scorer == null) {\n      return;\n    }\n\n    int docID = scorer.docID();\n    assert docID == -1 || docID == DocIdSetIterator.NO_MORE_DOCS;\n\n    // CHECKME: use ConjunctionScorer here?\n    DocIdSet filterDocIdSet = filter.getDocIdSet(context);\n    if (filterDocIdSet == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    \n    DocIdSetIterator filterIter = filterDocIdSet.iterator();\n    if (filterIter == null) {\n      // this means the filter does not accept any documents.\n      return;\n    }\n    int filterDoc = filterIter.nextDoc();\n    int scorerDoc = scorer.advance(filterDoc);\n    \n    collector.setScorer(scorer);\n    while (true) {\n      if (scorerDoc == filterDoc) {\n        // Check if scorer has exhausted, only before collecting.\n        if (scorerDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        collector.collect(scorerDoc);\n        filterDoc = filterIter.nextDoc();\n        scorerDoc = scorer.advance(filterDoc);\n      } else if (scorerDoc > filterDoc) {\n        filterDoc = filterIter.advance(scorerDoc);\n      } else {\n        scorerDoc = scorer.advance(filterDoc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6620df8541b174097b1133a4fc370adb2e570524"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["6620df8541b174097b1133a4fc370adb2e570524"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}