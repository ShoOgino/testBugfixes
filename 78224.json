{"path":"src/java/org/apache/lucene/index/DocumentsWriter#getPostings(Posting[]).mjava","commits":[{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#getPostings(Posting[]).mjava","pathOld":"/dev/null","sourceNew":"  /* Allocate more Postings from shared pool */\n  private synchronized void getPostings(Posting[] postings) {\n    numBytesUsed += postings.length * POSTING_NUM_BYTE;\n    final int numToCopy;\n    if (postingsFreeCount < postings.length)\n      numToCopy = postingsFreeCount;\n    else\n      numToCopy = postings.length;\n    final int start = postingsFreeCount-numToCopy;\n    System.arraycopy(postingsFreeList, start,\n                     postings, 0, numToCopy);\n    postingsFreeCount -= numToCopy;\n\n    // Directly allocate the remainder if any\n    if (numToCopy < postings.length) {\n      numBytesAlloc += (postings.length - numToCopy) * POSTING_NUM_BYTE;\n      balanceRAM();\n      for(int i=numToCopy;i<postings.length;i++)\n        postings[i] = new Posting();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["176324efd1eab6bd44a6d81c27c9b3a1a175ba3d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"176324efd1eab6bd44a6d81c27c9b3a1a175ba3d","date":1202734547,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#getPostings(Posting[]).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#getPostings(Posting[]).mjava","sourceNew":"  /* Allocate more Postings from shared pool */\n  synchronized void getPostings(Posting[] postings) {\n    numBytesUsed += postings.length * POSTING_NUM_BYTE;\n    final int numToCopy;\n    if (postingsFreeCount < postings.length)\n      numToCopy = postingsFreeCount;\n    else\n      numToCopy = postings.length;\n    final int start = postingsFreeCount-numToCopy;\n    System.arraycopy(postingsFreeList, start,\n                     postings, 0, numToCopy);\n    postingsFreeCount -= numToCopy;\n\n    // Directly allocate the remainder if any\n    if (numToCopy < postings.length) {\n      final int extra = postings.length - numToCopy;\n      final int newPostingsAllocCount = postingsAllocCount + extra;\n      if (newPostingsAllocCount > postingsFreeList.length)\n        postingsFreeList = new Posting[(int) (1.25 * newPostingsAllocCount)];\n\n      balanceRAM();\n      for(int i=numToCopy;i<postings.length;i++) {\n        postings[i] = new Posting();\n        numBytesAlloc += POSTING_NUM_BYTE;\n        postingsAllocCount++;\n      }\n    }\n  }\n\n","sourceOld":"  /* Allocate more Postings from shared pool */\n  private synchronized void getPostings(Posting[] postings) {\n    numBytesUsed += postings.length * POSTING_NUM_BYTE;\n    final int numToCopy;\n    if (postingsFreeCount < postings.length)\n      numToCopy = postingsFreeCount;\n    else\n      numToCopy = postings.length;\n    final int start = postingsFreeCount-numToCopy;\n    System.arraycopy(postingsFreeList, start,\n                     postings, 0, numToCopy);\n    postingsFreeCount -= numToCopy;\n\n    // Directly allocate the remainder if any\n    if (numToCopy < postings.length) {\n      numBytesAlloc += (postings.length - numToCopy) * POSTING_NUM_BYTE;\n      balanceRAM();\n      for(int i=numToCopy;i<postings.length;i++)\n        postings[i] = new Posting();\n    }\n  }\n\n","bugFix":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#getPostings(Posting[]).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#getPostings(Posting[]).mjava","sourceNew":"  /* Allocate more Postings from shared pool */\n  synchronized void getPostings(Posting[] postings) {\n    numBytesUsed += postings.length * POSTING_NUM_BYTE;\n    final int numToCopy;\n    if (postingsFreeCount < postings.length)\n      numToCopy = postingsFreeCount;\n    else\n      numToCopy = postings.length;\n    final int start = postingsFreeCount-numToCopy;\n    System.arraycopy(postingsFreeList, start,\n                     postings, 0, numToCopy);\n    postingsFreeCount -= numToCopy;\n\n    // Directly allocate the remainder if any\n    if (numToCopy < postings.length) {\n      final int extra = postings.length - numToCopy;\n      final int newPostingsAllocCount = postingsAllocCount + extra;\n      if (newPostingsAllocCount > postingsFreeList.length)\n        postingsFreeList = new Posting[(int) (1.25 * newPostingsAllocCount)];\n\n      balanceRAM();\n      for(int i=numToCopy;i<postings.length;i++) {\n        postings[i] = new Posting();\n        numBytesAlloc += POSTING_NUM_BYTE;\n        postingsAllocCount++;\n      }\n    }\n    assert numBytesUsed <= numBytesAlloc;\n  }\n\n","sourceOld":"  /* Allocate more Postings from shared pool */\n  synchronized void getPostings(Posting[] postings) {\n    numBytesUsed += postings.length * POSTING_NUM_BYTE;\n    final int numToCopy;\n    if (postingsFreeCount < postings.length)\n      numToCopy = postingsFreeCount;\n    else\n      numToCopy = postings.length;\n    final int start = postingsFreeCount-numToCopy;\n    System.arraycopy(postingsFreeList, start,\n                     postings, 0, numToCopy);\n    postingsFreeCount -= numToCopy;\n\n    // Directly allocate the remainder if any\n    if (numToCopy < postings.length) {\n      final int extra = postings.length - numToCopy;\n      final int newPostingsAllocCount = postingsAllocCount + extra;\n      if (newPostingsAllocCount > postingsFreeList.length)\n        postingsFreeList = new Posting[(int) (1.25 * newPostingsAllocCount)];\n\n      balanceRAM();\n      for(int i=numToCopy;i<postings.length;i++) {\n        postings[i] = new Posting();\n        numBytesAlloc += POSTING_NUM_BYTE;\n        postingsAllocCount++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermsHash#getPostings(RawPostingList[]).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#getPostings(Posting[]).mjava","sourceNew":"  synchronized public void getPostings(final RawPostingList[] postings) {\n\n    assert docWriter.writer.testPoint(\"TermsHash.getPostings start\");\n\n    assert postingsFreeCount <= postingsFreeList.length;\n    assert postingsFreeCount <= postingsAllocCount: \"postingsFreeCount=\" + postingsFreeCount + \" postingsAllocCount=\" + postingsAllocCount;\n\n    final int numToCopy;\n    if (postingsFreeCount < postings.length)\n      numToCopy = postingsFreeCount;\n    else\n      numToCopy = postings.length;\n    final int start = postingsFreeCount-numToCopy;\n    assert start >= 0;\n    assert start + numToCopy <= postingsFreeList.length;\n    assert numToCopy <= postings.length;\n    System.arraycopy(postingsFreeList, start,\n                     postings, 0, numToCopy);\n\n    // Directly allocate the remainder if any\n    if (numToCopy < postings.length) {\n      final int extra = postings.length - numToCopy;\n      final int newPostingsAllocCount = postingsAllocCount + extra;\n\n      if (newPostingsAllocCount > postingsFreeList.length)\n        postingsFreeList = new RawPostingList[ArrayUtil.getNextSize(newPostingsAllocCount)];\n\n      consumer.createPostings(postings, numToCopy, extra);\n      assert docWriter.writer.testPoint(\"TermsHash.getPostings after create\");\n      postingsAllocCount += extra;\n\n      if (trackAllocations)\n        docWriter.bytesAllocated(extra * bytesPerPosting);\n    }\n\n    postingsFreeCount -= numToCopy;\n\n    if (trackAllocations)\n      docWriter.bytesUsed(postings.length * bytesPerPosting);\n  }\n\n","sourceOld":"  /* Allocate more Postings from shared pool */\n  synchronized void getPostings(Posting[] postings) {\n    numBytesUsed += postings.length * POSTING_NUM_BYTE;\n    final int numToCopy;\n    if (postingsFreeCount < postings.length)\n      numToCopy = postingsFreeCount;\n    else\n      numToCopy = postings.length;\n    final int start = postingsFreeCount-numToCopy;\n    System.arraycopy(postingsFreeList, start,\n                     postings, 0, numToCopy);\n    postingsFreeCount -= numToCopy;\n\n    // Directly allocate the remainder if any\n    if (numToCopy < postings.length) {\n      final int extra = postings.length - numToCopy;\n      final int newPostingsAllocCount = postingsAllocCount + extra;\n      if (newPostingsAllocCount > postingsFreeList.length)\n        postingsFreeList = new Posting[(int) (1.25 * newPostingsAllocCount)];\n\n      balanceRAM();\n      for(int i=numToCopy;i<postings.length;i++) {\n        postings[i] = new Posting();\n        numBytesAlloc += POSTING_NUM_BYTE;\n        postingsAllocCount++;\n      }\n    }\n    assert numBytesUsed <= numBytesAlloc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"176324efd1eab6bd44a6d81c27c9b3a1a175ba3d":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["176324efd1eab6bd44a6d81c27c9b3a1a175ba3d"],"5350389bf83287111f7760b9e3db3af8e3648474":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5350389bf83287111f7760b9e3db3af8e3648474"]},"commit2Childs":{"176324efd1eab6bd44a6d81c27c9b3a1a175ba3d":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["5350389bf83287111f7760b9e3db3af8e3648474"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["176324efd1eab6bd44a6d81c27c9b3a1a175ba3d"],"5350389bf83287111f7760b9e3db3af8e3648474":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}