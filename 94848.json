{"path":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testIgnore().mjava","commits":[{"id":"ecb12132f7aef3ad5be4b300f3cea59aa03b6820","date":1339628268,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testIgnore().mjava","pathOld":"/dev/null","sourceNew":"  public void testIgnore() throws Exception {\n\n    IndexSchema schema = h.getCore().getSchema();\n    assertNull(\"test expects 'foo_giberish' to not be a valid field, looks like schema was changed out from under us\",\n               schema.getFieldTypeNoEx(\"foo_giberish\"));\n    assertNotNull(\"test expects 't_raw' to be a valid field, looks like schema was changed out from under us\",\n                  schema.getFieldTypeNoEx(\"t_raw\"));\n    assertNotNull(\"test expects 'foo_s' to be a valid field, looks like schema was changed out from under us\",\n                  schema.getFieldTypeNoEx(\"foo_s\"));\n \n    SolrInputDocument d = null;\n    \n    d = processAdd(\"ignore-not-in-schema\",       \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"t_raw\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"foo_s\", \"hoss\")));\n    \n    assertNotNull(d);\n    assertFalse(d.containsKey(\"foo_giberish\"));\n    assertEquals(Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                 d.getFieldValues(\"t_raw\"));\n    assertEquals(\"hoss\", d.getFieldValue(\"foo_s\"));\n\n    d = processAdd(\"ignore-some\",\n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"t_raw\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"foo_s\", \"hoss\")));\n\n    assertNotNull(d);\n    assertEquals(Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                 d.getFieldValues(\"foo_giberish\"));\n    assertFalse(d.containsKey(\"t_raw\"));\n    assertEquals(\"hoss\", d.getFieldValue(\"foo_s\"));\n    \n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testIgnore().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testIgnore().mjava","sourceNew":"  public void testIgnore() throws Exception {\n\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNull(\"test expects 'foo_giberish' to not be a valid field, looks like schema was changed out from under us\",\n               schema.getFieldTypeNoEx(\"foo_giberish\"));\n    assertNotNull(\"test expects 't_raw' to be a valid field, looks like schema was changed out from under us\",\n                  schema.getFieldTypeNoEx(\"t_raw\"));\n    assertNotNull(\"test expects 'foo_s' to be a valid field, looks like schema was changed out from under us\",\n                  schema.getFieldTypeNoEx(\"foo_s\"));\n \n    SolrInputDocument d = null;\n    \n    d = processAdd(\"ignore-not-in-schema\",       \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"t_raw\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"foo_s\", \"hoss\")));\n    \n    assertNotNull(d);\n    assertFalse(d.containsKey(\"foo_giberish\"));\n    assertEquals(Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                 d.getFieldValues(\"t_raw\"));\n    assertEquals(\"hoss\", d.getFieldValue(\"foo_s\"));\n\n    d = processAdd(\"ignore-some\",\n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"t_raw\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"foo_s\", \"hoss\")));\n\n    assertNotNull(d);\n    assertEquals(Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                 d.getFieldValues(\"foo_giberish\"));\n    assertFalse(d.containsKey(\"t_raw\"));\n    assertEquals(\"hoss\", d.getFieldValue(\"foo_s\"));\n    \n\n  }\n\n","sourceOld":"  public void testIgnore() throws Exception {\n\n    IndexSchema schema = h.getCore().getSchema();\n    assertNull(\"test expects 'foo_giberish' to not be a valid field, looks like schema was changed out from under us\",\n               schema.getFieldTypeNoEx(\"foo_giberish\"));\n    assertNotNull(\"test expects 't_raw' to be a valid field, looks like schema was changed out from under us\",\n                  schema.getFieldTypeNoEx(\"t_raw\"));\n    assertNotNull(\"test expects 'foo_s' to be a valid field, looks like schema was changed out from under us\",\n                  schema.getFieldTypeNoEx(\"foo_s\"));\n \n    SolrInputDocument d = null;\n    \n    d = processAdd(\"ignore-not-in-schema\",       \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"t_raw\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"foo_s\", \"hoss\")));\n    \n    assertNotNull(d);\n    assertFalse(d.containsKey(\"foo_giberish\"));\n    assertEquals(Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                 d.getFieldValues(\"t_raw\"));\n    assertEquals(\"hoss\", d.getFieldValue(\"foo_s\"));\n\n    d = processAdd(\"ignore-some\",\n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"t_raw\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"foo_s\", \"hoss\")));\n\n    assertNotNull(d);\n    assertEquals(Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                 d.getFieldValues(\"foo_giberish\"));\n    assertFalse(d.containsKey(\"t_raw\"));\n    assertEquals(\"hoss\", d.getFieldValue(\"foo_s\"));\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0a19f093878b8ef6d65992a55f7a565549f30ee","date":1370735567,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testIgnore().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testIgnore().mjava","sourceNew":"  public void testIgnore() throws Exception {\n\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNull(\"test expects 'foo_giberish' to not be a valid field, looks like schema was changed out from under us\",\n               schema.getFieldTypeNoEx(\"foo_giberish\"));\n    assertNull(\"test expects 'bar_giberish' to not be a valid field, looks like schema was changed out from under us\",\n               schema.getFieldTypeNoEx(\"bar_giberish\"));\n    assertNotNull(\"test expects 't_raw' to be a valid field, looks like schema was changed out from under us\",\n                  schema.getFieldTypeNoEx(\"t_raw\"));\n    assertNotNull(\"test expects 'foo_s' to be a valid field, looks like schema was changed out from under us\",\n                  schema.getFieldTypeNoEx(\"foo_s\"));\n \n    SolrInputDocument d = null;\n    \n    d = processAdd(\"ignore-not-in-schema\",       \n                   doc(f(\"id\", \"1111\"),\n                       f(\"bar_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"foo_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"t_raw\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"foo_s\", \"hoss\")));\n    \n    assertNotNull(d);\n    assertFalse(d.containsKey(\"bar_giberish\"));\n    assertFalse(d.containsKey(\"foo_giberish\"));\n    assertEquals(Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                 d.getFieldValues(\"t_raw\"));\n    assertEquals(\"hoss\", d.getFieldValue(\"foo_s\"));\n\n    d = processAdd(\"ignore-some\",\n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"bar_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"t_raw\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"foo_s\", \"hoss\")));\n\n    assertNotNull(d);\n    assertEquals(Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                 d.getFieldValues(\"foo_giberish\"));\n    assertEquals(Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                 d.getFieldValues(\"bar_giberish\"));\n    assertFalse(d.containsKey(\"t_raw\"));\n    assertEquals(\"hoss\", d.getFieldValue(\"foo_s\"));\n\n    d = processAdd(\"ignore-not-in-schema-explicit-selector\",\n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"bar_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"t_raw\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"foo_s\", \"hoss\")));\n    assertNotNull(d);\n    assertFalse(d.containsKey(\"foo_giberish\"));\n    assertFalse(d.containsKey(\"bar_giberish\"));\n    assertEquals(Arrays.asList(\"123456789\", \"\", 42, \"abcd\"),\n                 d.getFieldValues(\"t_raw\"));\n    assertEquals(\"hoss\", d.getFieldValue(\"foo_s\"));\n\n    d = processAdd(\"ignore-not-in-schema-and-foo-name-prefix\",\n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"bar_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"t_raw\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"foo_s\", \"hoss\")));\n    assertNotNull(d);\n    assertFalse(d.containsKey(\"foo_giberish\"));\n    assertEquals(Arrays.asList(\"123456789\", \"\", 42, \"abcd\"),\n                 d.getFieldValues(\"bar_giberish\"));\n    assertEquals(Arrays.asList(\"123456789\", \"\", 42, \"abcd\"),\n                 d.getFieldValues(\"t_raw\"));\n    assertEquals(\"hoss\", d.getFieldValue(\"foo_s\"));\n\n    d = processAdd(\"ignore-foo-name-prefix-except-not-schema\",\n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"bar_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"t_raw\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"foo_s\", \"hoss\")));\n    assertNotNull(d);\n    assertEquals(Arrays.asList(\"123456789\", \"\", 42, \"abcd\"),\n                 d.getFieldValues(\"foo_giberish\"));\n    assertEquals(Arrays.asList(\"123456789\", \"\", 42, \"abcd\"),\n                 d.getFieldValues(\"bar_giberish\"));\n    assertEquals(Arrays.asList(\"123456789\", \"\", 42, \"abcd\"),\n                 d.getFieldValues(\"t_raw\"));\n    assertFalse(d.containsKey(\"foo_s\"));\n\n    d = processAdd(\"ignore-in-schema\",\n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"bar_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"t_raw\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"foo_s\", \"hoss\")));\n    assertNotNull(d);\n    assertTrue(d.containsKey(\"foo_giberish\"));\n    assertTrue(d.containsKey(\"bar_giberish\"));\n    assertFalse(d.containsKey(\"id\"));\n    assertFalse(d.containsKey(\"t_raw\"));\n    assertFalse(d.containsKey(\"foo_s\"));\n\n    d = processAdd(\"ignore-not-in-schema-explicit-str-selector\",\n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"bar_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"t_raw\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"foo_s\", \"hoss\")));\n    assertNotNull(d);\n    assertFalse(d.containsKey(\"foo_giberish\"));\n    assertFalse(d.containsKey(\"bar_giberish\"));\n    assertEquals(Arrays.asList(\"123456789\", \"\", 42, \"abcd\"),\n                 d.getFieldValues(\"t_raw\"));\n    assertEquals(\"hoss\", d.getFieldValue(\"foo_s\"));\n\n    d = processAdd(\"ignore-in-schema-str-selector\",\n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"bar_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"t_raw\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"foo_s\", \"hoss\")));\n    assertNotNull(d);\n    assertTrue(d.containsKey(\"foo_giberish\"));\n    assertTrue(d.containsKey(\"bar_giberish\"));\n    assertFalse(d.containsKey(\"id\"));\n    assertFalse(d.containsKey(\"t_raw\"));\n    assertFalse(d.containsKey(\"foo_s\"));\n\n  }\n\n","sourceOld":"  public void testIgnore() throws Exception {\n\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNull(\"test expects 'foo_giberish' to not be a valid field, looks like schema was changed out from under us\",\n               schema.getFieldTypeNoEx(\"foo_giberish\"));\n    assertNotNull(\"test expects 't_raw' to be a valid field, looks like schema was changed out from under us\",\n                  schema.getFieldTypeNoEx(\"t_raw\"));\n    assertNotNull(\"test expects 'foo_s' to be a valid field, looks like schema was changed out from under us\",\n                  schema.getFieldTypeNoEx(\"foo_s\"));\n \n    SolrInputDocument d = null;\n    \n    d = processAdd(\"ignore-not-in-schema\",       \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"t_raw\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"foo_s\", \"hoss\")));\n    \n    assertNotNull(d);\n    assertFalse(d.containsKey(\"foo_giberish\"));\n    assertEquals(Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                 d.getFieldValues(\"t_raw\"));\n    assertEquals(\"hoss\", d.getFieldValue(\"foo_s\"));\n\n    d = processAdd(\"ignore-some\",\n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_giberish\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"t_raw\", \"123456789\", \"\", 42, \"abcd\"),\n                       f(\"foo_s\", \"hoss\")));\n\n    assertNotNull(d);\n    assertEquals(Arrays.asList(\"123456789\", \"\", 42, \"abcd\"), \n                 d.getFieldValues(\"foo_giberish\"));\n    assertFalse(d.containsKey(\"t_raw\"));\n    assertEquals(\"hoss\", d.getFieldValue(\"foo_s\"));\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ecb12132f7aef3ad5be4b300f3cea59aa03b6820":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0a19f093878b8ef6d65992a55f7a565549f30ee":["08970e5b8411182a29412c177eff67ec1110095b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b0a19f093878b8ef6d65992a55f7a565549f30ee"],"08970e5b8411182a29412c177eff67ec1110095b":["ecb12132f7aef3ad5be4b300f3cea59aa03b6820"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ecb12132f7aef3ad5be4b300f3cea59aa03b6820"],"ecb12132f7aef3ad5be4b300f3cea59aa03b6820":["08970e5b8411182a29412c177eff67ec1110095b"],"b0a19f093878b8ef6d65992a55f7a565549f30ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08970e5b8411182a29412c177eff67ec1110095b":["b0a19f093878b8ef6d65992a55f7a565549f30ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}