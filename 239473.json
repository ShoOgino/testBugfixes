{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","sourceNew":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","sourceOld":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf7efd82433f3f64684711c16edfd149db6af111","date":1317013128,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","sourceNew":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.reusableTokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","sourceOld":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","sourceNew":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","sourceOld":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.reusableTokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","sourceNew":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","sourceOld":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf7efd82433f3f64684711c16edfd149db6af111":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["cf7efd82433f3f64684711c16edfd149db6af111"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cf7efd82433f3f64684711c16edfd149db6af111":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cf7efd82433f3f64684711c16edfd149db6af111"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}