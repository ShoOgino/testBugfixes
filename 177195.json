{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#watchZKConfDir(String).mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#watchZKConfDir(String).mjava","pathOld":"/dev/null","sourceNew":"  void watchZKConfDir(final String zkDir)  {\n\n      if(!confDirectoryWatchers.containsKey(zkDir)){\n        confDirectoryWatchers.put(zkDir,new HashSet<Runnable>());\n      }else{\n        //it's already watched\n        return;\n      }\n\n      Watcher watcher = new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n          try {\n            synchronized (confDirectoryWatchers) {\n              // if this is not among directories to be watched then don't set the watcher anymore\n              if(!confDirectoryWatchers.containsKey(zkDir)) return;\n            }\n\n            if (event.getType() == Event.EventType.NodeChildrenChanged) {\n              synchronized (confDirectoryWatchers) {\n                final Set<Runnable> listeners = confDirectoryWatchers.get(zkDir);\n                if (listeners != null) {\n                  new Thread() {\n                    @Override\n                    public synchronized void run() {\n                    //running in a separate thread so that the zk event thread is not\n                    // unnecessarily held up\n                      for (Runnable listener : listeners) listener.run();\n                    }\n                  }.start();\n                }\n              }\n\n            }\n          } finally {\n            if (Event.EventType.None.equals(event.getType())) {\n              return;\n            } else {\n              setConfWatcher(zkDir,this);\n            }\n          }\n        }\n      };\n\n     setConfWatcher(zkDir,watcher);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08f9f60ad238cb88d12306a20077e84d1f1f93e4","date":1416549887,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#watchZKConfDir(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#watchZKConfDir(String).mjava","sourceNew":"  void watchZKConfDir(final String zkDir) {\n    log.info(\"watch zkdir \" + zkDir);\n    if (!confDirectoryListeners.containsKey(zkDir)) {\n      confDirectoryListeners.put(zkDir,  new HashSet<Runnable>());\n      setConfWatcher(zkDir, new WatcherImpl(zkDir));\n\n    }\n\n\n  }\n\n","sourceOld":"  void watchZKConfDir(final String zkDir)  {\n\n      if(!confDirectoryWatchers.containsKey(zkDir)){\n        confDirectoryWatchers.put(zkDir,new HashSet<Runnable>());\n      }else{\n        //it's already watched\n        return;\n      }\n\n      Watcher watcher = new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n          try {\n            synchronized (confDirectoryWatchers) {\n              // if this is not among directories to be watched then don't set the watcher anymore\n              if(!confDirectoryWatchers.containsKey(zkDir)) return;\n            }\n\n            if (event.getType() == Event.EventType.NodeChildrenChanged) {\n              synchronized (confDirectoryWatchers) {\n                final Set<Runnable> listeners = confDirectoryWatchers.get(zkDir);\n                if (listeners != null) {\n                  new Thread() {\n                    @Override\n                    public synchronized void run() {\n                    //running in a separate thread so that the zk event thread is not\n                    // unnecessarily held up\n                      for (Runnable listener : listeners) listener.run();\n                    }\n                  }.start();\n                }\n              }\n\n            }\n          } finally {\n            if (Event.EventType.None.equals(event.getType())) {\n              return;\n            } else {\n              setConfWatcher(zkDir,this);\n            }\n          }\n        }\n      };\n\n     setConfWatcher(zkDir,watcher);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98798900014e18f407b1910aa34db4d3ae76ecc6","date":1427307584,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#watchZKConfDir(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#watchZKConfDir(String).mjava","sourceNew":"  void watchZKConfDir(final String zkDir) {\n    log.info(\"watch zkdir \" + zkDir);\n    if (!confDirectoryListeners.containsKey(zkDir)) {\n      confDirectoryListeners.put(zkDir,  new HashSet<Runnable>());\n      setConfWatcher(zkDir, new WatcherImpl(zkDir), null);\n    }\n\n\n  }\n\n","sourceOld":"  void watchZKConfDir(final String zkDir) {\n    log.info(\"watch zkdir \" + zkDir);\n    if (!confDirectoryListeners.containsKey(zkDir)) {\n      confDirectoryListeners.put(zkDir,  new HashSet<Runnable>());\n      setConfWatcher(zkDir, new WatcherImpl(zkDir));\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#watchZKConfDir(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#watchZKConfDir(String).mjava","sourceNew":"  void watchZKConfDir(final String zkDir) {\n    log.info(\"watch zkdir \" + zkDir);\n    if (!confDirectoryListeners.containsKey(zkDir)) {\n      confDirectoryListeners.put(zkDir, new HashSet<Runnable>());\n      setConfWatcher(zkDir, new WatcherImpl(zkDir), null);\n    }\n  }\n\n","sourceOld":"  void watchZKConfDir(final String zkDir) {\n    log.info(\"watch zkdir \" + zkDir);\n    if (!confDirectoryListeners.containsKey(zkDir)) {\n      confDirectoryListeners.put(zkDir,  new HashSet<Runnable>());\n      setConfWatcher(zkDir, new WatcherImpl(zkDir), null);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a459b94e2efbfd9079ee913563d160b3b9ab9c1","date":1427330029,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#watchZKConfDir(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#watchZKConfDir(String).mjava","sourceNew":"  void watchZKConfDir(final String zkDir) {\n    log.info(\"watch zkdir {}\" , zkDir);\n    if (!confDirectoryListeners.containsKey(zkDir)) {\n      confDirectoryListeners.put(zkDir, new HashSet<>());\n      setConfWatcher(zkDir, new WatcherImpl(zkDir), null);\n    }\n  }\n\n","sourceOld":"  void watchZKConfDir(final String zkDir) {\n    log.info(\"watch zkdir \" + zkDir);\n    if (!confDirectoryListeners.containsKey(zkDir)) {\n      confDirectoryListeners.put(zkDir, new HashSet<Runnable>());\n      setConfWatcher(zkDir, new WatcherImpl(zkDir), null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#watchZKConfDir(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#watchZKConfDir(String).mjava","sourceNew":"  void watchZKConfDir(final String zkDir) {\n    log.info(\"watch zkdir {}\" , zkDir);\n    if (!confDirectoryListeners.containsKey(zkDir)) {\n      confDirectoryListeners.put(zkDir, new HashSet<>());\n      setConfWatcher(zkDir, new WatcherImpl(zkDir), null);\n    }\n  }\n\n","sourceOld":"  void watchZKConfDir(final String zkDir) {\n    log.info(\"watch zkdir \" + zkDir);\n    if (!confDirectoryListeners.containsKey(zkDir)) {\n      confDirectoryListeners.put(zkDir,  new HashSet<Runnable>());\n      setConfWatcher(zkDir, new WatcherImpl(zkDir));\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54bb8da55080e4569804e0661b83a3c72cbd8d4d","date":1429691126,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#watchZKConfDir(String).mjava","sourceNew":null,"sourceOld":"  void watchZKConfDir(final String zkDir) {\n    log.info(\"watch zkdir {}\" , zkDir);\n    if (!confDirectoryListeners.containsKey(zkDir)) {\n      confDirectoryListeners.put(zkDir, new HashSet<>());\n      setConfWatcher(zkDir, new WatcherImpl(zkDir), null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["08f9f60ad238cb88d12306a20077e84d1f1f93e4","5a459b94e2efbfd9079ee913563d160b3b9ab9c1"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["5a459b94e2efbfd9079ee913563d160b3b9ab9c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98798900014e18f407b1910aa34db4d3ae76ecc6":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"5a459b94e2efbfd9079ee913563d160b3b9ab9c1":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["98798900014e18f407b1910aa34db4d3ae76ecc6"]},"commit2Childs":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","98798900014e18f407b1910aa34db4d3ae76ecc6"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"531fe719c7218235a679452eb3d137bfd8fc6af1":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"98798900014e18f407b1910aa34db4d3ae76ecc6":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"5a459b94e2efbfd9079ee913563d160b3b9ab9c1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["5a459b94e2efbfd9079ee913563d160b3b9ab9c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}