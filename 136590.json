{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeEquals(Rectangle,BBoxFieldInfo).mjava","commits":[{"id":"ebd6f706eb59fe367493c820daeccd76587ec6bf","date":1340868972,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeEquals(Rectangle,BBoxFieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a query to retrieve documents that equal the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeEquals(Rectangle bbox, BBoxFieldInfo fieldInfo) {\n\n    // docMinX = queryExtent.getMinX() AND docMinY = queryExtent.getMinY() AND docMaxX = queryExtent.getMaxX() AND docMaxY = queryExtent.getMaxY()\n    Query qMinX = NumericRangeQuery.newDoubleRange(fieldInfo.minX, finfo.precisionStep, bbox.getMinX(), bbox.getMinX(), true, true);\n    Query qMinY = NumericRangeQuery.newDoubleRange(fieldInfo.minY, finfo.precisionStep, bbox.getMinY(), bbox.getMinY(), true, true);\n    Query qMaxX = NumericRangeQuery.newDoubleRange(fieldInfo.maxX, finfo.precisionStep, bbox.getMaxX(), bbox.getMaxX(), true, true);\n    Query qMaxY = NumericRangeQuery.newDoubleRange(fieldInfo.maxY, finfo.precisionStep, bbox.getMaxY(), bbox.getMaxY(), true, true);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(qMinX, BooleanClause.Occur.MUST);\n    bq.add(qMinY, BooleanClause.Occur.MUST);\n    bq.add(qMaxX, BooleanClause.Occur.MUST);\n    bq.add(qMaxY, BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0415a016b37e58a017fed0a91234f733ab359971","date":1341458183,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeEquals(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeEquals(Rectangle,BBoxFieldInfo).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that equal the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeEquals(Rectangle bbox) {\n\n    // docMinX = queryExtent.getMinX() AND docMinY = queryExtent.getMinY() AND docMaxX = queryExtent.getMaxX() AND docMaxY = queryExtent.getMaxY()\n    Query qMinX = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, bbox.getMinX(), bbox.getMinX(), true, true);\n    Query qMinY = NumericRangeQuery.newDoubleRange(field_minY, precisionStep, bbox.getMinY(), bbox.getMinY(), true, true);\n    Query qMaxX = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), bbox.getMaxX(), true, true);\n    Query qMaxY = NumericRangeQuery.newDoubleRange(field_maxY, precisionStep, bbox.getMaxY(), bbox.getMaxY(), true, true);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(qMinX, BooleanClause.Occur.MUST);\n    bq.add(qMinY, BooleanClause.Occur.MUST);\n    bq.add(qMaxX, BooleanClause.Occur.MUST);\n    bq.add(qMaxY, BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that equal the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeEquals(Rectangle bbox, BBoxFieldInfo fieldInfo) {\n\n    // docMinX = queryExtent.getMinX() AND docMinY = queryExtent.getMinY() AND docMaxX = queryExtent.getMaxX() AND docMaxY = queryExtent.getMaxY()\n    Query qMinX = NumericRangeQuery.newDoubleRange(fieldInfo.minX, finfo.precisionStep, bbox.getMinX(), bbox.getMinX(), true, true);\n    Query qMinY = NumericRangeQuery.newDoubleRange(fieldInfo.minY, finfo.precisionStep, bbox.getMinY(), bbox.getMinY(), true, true);\n    Query qMaxX = NumericRangeQuery.newDoubleRange(fieldInfo.maxX, finfo.precisionStep, bbox.getMaxX(), bbox.getMaxX(), true, true);\n    Query qMaxY = NumericRangeQuery.newDoubleRange(fieldInfo.maxY, finfo.precisionStep, bbox.getMaxY(), bbox.getMaxY(), true, true);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(qMinX, BooleanClause.Occur.MUST);\n    bq.add(qMinY, BooleanClause.Occur.MUST);\n    bq.add(qMaxX, BooleanClause.Occur.MUST);\n    bq.add(qMaxY, BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0415a016b37e58a017fed0a91234f733ab359971":["ebd6f706eb59fe367493c820daeccd76587ec6bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0415a016b37e58a017fed0a91234f733ab359971"],"ebd6f706eb59fe367493c820daeccd76587ec6bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0415a016b37e58a017fed0a91234f733ab359971":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ebd6f706eb59fe367493c820daeccd76587ec6bf"],"ebd6f706eb59fe367493c820daeccd76587ec6bf":["0415a016b37e58a017fed0a91234f733ab359971"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}