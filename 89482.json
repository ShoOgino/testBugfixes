{"path":"backwards/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoWaitClose() throws IOException {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<10;iter++) {\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(100);\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      writer.setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, ANALYZER, false, IndexWriter.MaxFieldLength.UNLIMITED);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws IOException {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<10;iter++) {\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(100);\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      writer.setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, ANALYZER, false, IndexWriter.MaxFieldLength.UNLIMITED);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws IOException {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<10;iter++) {\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(100);\n\n      for(int j=0;j<201;j++) {\n        idField.setValue(Integer.toString(iter*201+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = iter*201;\n      for(int j=0;j<20;j++) {\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n        delID += 5;\n      }\n\n      // Force a bunch of merge threads to kick off so we\n      // stress out aborting them on close:\n      writer.setMergeFactor(3);\n      writer.addDocument(doc);\n      writer.commit();\n\n      writer.close(false);\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals((1+iter)*182, reader.numDocs());\n      reader.close();\n\n      // Reopen\n      writer = new IndexWriter(directory, ANALYZER, false, IndexWriter.MaxFieldLength.UNLIMITED);\n    }\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}