{"path":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testWrongNumBooleans().mjava","commits":[{"id":"781d424d5cb04a1e2b47a26a0080e299279e56d3","date":1456427035,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testWrongNumBooleans().mjava","pathOld":"/dev/null","sourceNew":"  /** ensure good exception when boolean[]s for inclusive have wrong length */\n  public void testWrongNumBooleans() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new LongPoint(\"value\", 1L, 2L));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    // no wrapping, else the exc might happen in executor thread:\n    IndexSearcher s = new IndexSearcher(r);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      s.count(LongPoint.newMultiRangeQuery(\"value\", new Long[] { 1L, 2L }, new boolean[] {true}, new Long[] { 1L, 2L }, new boolean[] {true, true}));\n    });\n    assertEquals(\"lowerInclusive has length=1 but expected=2\", expected.getMessage());\n\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      s.count(LongPoint.newMultiRangeQuery(\"value\", new Long[] { 1L, 2L }, new boolean[] {true, true}, new Long[] { 1L, 2L }, new boolean[] {true}));\n    });\n    assertEquals(\"upperInclusive has length=1 but expected=2\", expected.getMessage());\n\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testWrongNumBooleans().mjava","sourceNew":null,"sourceOld":"  /** ensure good exception when boolean[]s for inclusive have wrong length */\n  public void testWrongNumBooleans() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new LongPoint(\"value\", 1L, 2L));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    // no wrapping, else the exc might happen in executor thread:\n    IndexSearcher s = new IndexSearcher(r);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      s.count(LongPoint.newMultiRangeQuery(\"value\", new Long[] { 1L, 2L }, new boolean[] {true}, new Long[] { 1L, 2L }, new boolean[] {true, true}));\n    });\n    assertEquals(\"lowerInclusive has length=1 but expected=2\", expected.getMessage());\n\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      s.count(LongPoint.newMultiRangeQuery(\"value\", new Long[] { 1L, 2L }, new boolean[] {true, true}, new Long[] { 1L, 2L }, new boolean[] {true}));\n    });\n    assertEquals(\"upperInclusive has length=1 but expected=2\", expected.getMessage());\n\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testWrongNumBooleans().mjava","sourceNew":null,"sourceOld":"  /** ensure good exception when boolean[]s for inclusive have wrong length */\n  public void testWrongNumBooleans() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new LongPoint(\"value\", 1L, 2L));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    // no wrapping, else the exc might happen in executor thread:\n    IndexSearcher s = new IndexSearcher(r);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      s.count(LongPoint.newMultiRangeQuery(\"value\", new Long[] { 1L, 2L }, new boolean[] {true}, new Long[] { 1L, 2L }, new boolean[] {true, true}));\n    });\n    assertEquals(\"lowerInclusive has length=1 but expected=2\", expected.getMessage());\n\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      s.count(LongPoint.newMultiRangeQuery(\"value\", new Long[] { 1L, 2L }, new boolean[] {true, true}, new Long[] { 1L, 2L }, new boolean[] {true}));\n    });\n    assertEquals(\"upperInclusive has length=1 but expected=2\", expected.getMessage());\n\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testWrongNumBooleans().mjava","sourceNew":null,"sourceOld":"  /** ensure good exception when boolean[]s for inclusive have wrong length */\n  public void testWrongNumBooleans() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new LongPoint(\"value\", 1L, 2L));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    // no wrapping, else the exc might happen in executor thread:\n    IndexSearcher s = new IndexSearcher(r);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      s.count(LongPoint.newMultiRangeQuery(\"value\", new Long[] { 1L, 2L }, new boolean[] {true}, new Long[] { 1L, 2L }, new boolean[] {true, true}));\n    });\n    assertEquals(\"lowerInclusive has length=1 but expected=2\", expected.getMessage());\n\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      s.count(LongPoint.newMultiRangeQuery(\"value\", new Long[] { 1L, 2L }, new boolean[] {true, true}, new Long[] { 1L, 2L }, new boolean[] {true}));\n    });\n    assertEquals(\"upperInclusive has length=1 but expected=2\", expected.getMessage());\n\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["781d424d5cb04a1e2b47a26a0080e299279e56d3","c422e924212367b334b4938f1fd3e44438e88c40"],"c422e924212367b334b4938f1fd3e44438e88c40":["781d424d5cb04a1e2b47a26a0080e299279e56d3","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["781d424d5cb04a1e2b47a26a0080e299279e56d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"781d424d5cb04a1e2b47a26a0080e299279e56d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["781d424d5cb04a1e2b47a26a0080e299279e56d3"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"781d424d5cb04a1e2b47a26a0080e299279e56d3":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}