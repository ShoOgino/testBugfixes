{"path":"src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","commits":[{"id":"8d38e6f83876012dcad7baa43e8297a09a7f7c28","date":1019242415,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","pathOld":"/dev/null","sourceNew":"    public void testQuestionmark()\n\tthrows IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n\tdoc1.add(Field.Text(\"body\", \"metal\"));\n        doc2.add(Field.Text(\"body\", \"metals\"));\n        doc3.add(Field.Text(\"body\", \"mXtals\"));\n        doc4.add(Field.Text(\"body\", \"mXtXls\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n\twriter.optimize();\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\tQuery query1 = new TermQuery(new Term(\"body\", \"m?tal\"));       // 1\n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));  // 2\n        Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\")); // 1\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));  // 3\n\n\tHits result;\n\n\tresult = searcher.search(query1);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(2, result.length());\n\n\tresult = searcher.search(query3);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query4);\n\tassertEquals(3, result.length());\n\n\twriter.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e0aeed39289ab7fc7a2f3a678f3027b2bc8b9e0","date":1020955102,"type":3,"author":"Peter Carlson","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","sourceNew":"    public void testQuestionmark()\n\tthrows IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n\tdoc1.add(Field.Text(\"body\", \"metal\"));\n        doc2.add(Field.Text(\"body\", \"metals\"));\n        doc3.add(Field.Text(\"body\", \"mXtals\"));\n        doc4.add(Field.Text(\"body\", \"mXtXls\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n\twriter.optimize();\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\t    Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));       // 1\n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));  // 2\n        Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\")); // 1\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));  // 3\n\n\tHits result;\n\n\tresult = searcher.search(query1);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(2, result.length());\n\n\tresult = searcher.search(query3);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query4);\n\tassertEquals(3, result.length());\n\n\twriter.close();\n    }\n\n","sourceOld":"    public void testQuestionmark()\n\tthrows IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n\tdoc1.add(Field.Text(\"body\", \"metal\"));\n        doc2.add(Field.Text(\"body\", \"metals\"));\n        doc3.add(Field.Text(\"body\", \"mXtals\"));\n        doc4.add(Field.Text(\"body\", \"mXtXls\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n\twriter.optimize();\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\tQuery query1 = new TermQuery(new Term(\"body\", \"m?tal\"));       // 1\n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));  // 2\n        Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\")); // 1\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));  // 3\n\n\tHits result;\n\n\tresult = searcher.search(query1);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(2, result.length());\n\n\tresult = searcher.search(query3);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query4);\n\tassertEquals(3, result.length());\n\n\twriter.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a80f1c1871c574f7d3793290fb74228d71e85bdc","date":1021477864,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","sourceNew":"    public void testQuestionmark()\n\tthrows IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n\tdoc1.add(Field.Text(\"body\", \"metal\"));\n        doc2.add(Field.Text(\"body\", \"metals\"));\n        doc3.add(Field.Text(\"body\", \"mXtals\"));\n        doc4.add(Field.Text(\"body\", \"mXtXls\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n\twriter.optimize();\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n        Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\")); \n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n        Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n\n\tHits result;\n\n\tresult = searcher.search(query1);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(2, result.length());\n\n\tresult = searcher.search(query3);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query4);\n\tassertEquals(3, result.length());\n\n\twriter.close();\n    }\n\n","sourceOld":"    public void testQuestionmark()\n\tthrows IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n\tdoc1.add(Field.Text(\"body\", \"metal\"));\n        doc2.add(Field.Text(\"body\", \"metals\"));\n        doc3.add(Field.Text(\"body\", \"mXtals\"));\n        doc4.add(Field.Text(\"body\", \"mXtXls\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n\twriter.optimize();\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\t    Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));       // 1\n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));  // 2\n        Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\")); // 1\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));  // 3\n\n\tHits result;\n\n\tresult = searcher.search(query1);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(2, result.length());\n\n\tresult = searcher.search(query3);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query4);\n\tassertEquals(3, result.length());\n\n\twriter.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03f833b5ec0d601205f139d7738cdc62b5b79d91","date":1027003299,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","sourceNew":"    public void testQuestionmark()\n\tthrows IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n\tdoc1.add(Field.Text(\"body\", \"metal\"));\n        doc2.add(Field.Text(\"body\", \"metals\"));\n        doc3.add(Field.Text(\"body\", \"mXtals\"));\n        doc4.add(Field.Text(\"body\", \"mXtXls\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n\twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n        Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));\n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n        Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n\n\tHits result;\n\n\tresult = searcher.search(query1);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(2, result.length());\n\n\tresult = searcher.search(query3);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query4);\n\tassertEquals(3, result.length());\n    }\n\n","sourceOld":"    public void testQuestionmark()\n\tthrows IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n\tdoc1.add(Field.Text(\"body\", \"metal\"));\n        doc2.add(Field.Text(\"body\", \"metals\"));\n        doc3.add(Field.Text(\"body\", \"mXtals\"));\n        doc4.add(Field.Text(\"body\", \"mXtXls\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n\twriter.optimize();\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n        Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\")); \n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n        Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n\n\tHits result;\n\n\tresult = searcher.search(query1);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(2, result.length());\n\n\tresult = searcher.search(query3);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query4);\n\tassertEquals(3, result.length());\n\n\twriter.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dca593206e9e07eee9839b23d0c0b435915af416","date":1046539941,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","sourceNew":"    /**\n     * Tests Wildcard queries with a question mark.\n     *\n     * @exception IOException if an error occurs\n     */\n    public void testQuestionmark()\n\tthrows IOException\n    {\n        RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n\t    { \"metal\", \"metals\", \"mXtals\", \"mXtXls\" }\n\t\t\t\t\t\t);\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n        Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));\n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n        Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n        Query query5 = new WildcardQuery(new Term(\"body\", \"M?t?ls\"));\n\n\tassertMatches(searcher, query1, 1);\n\tassertMatches(searcher, query2, 2);\n\tassertMatches(searcher, query3, 1);\n\tassertMatches(searcher, query4, 3);\n\tassertMatches(searcher, query5, 0);\n    }\n\n","sourceOld":"    public void testQuestionmark()\n\tthrows IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n\tdoc1.add(Field.Text(\"body\", \"metal\"));\n        doc2.add(Field.Text(\"body\", \"metals\"));\n        doc3.add(Field.Text(\"body\", \"mXtals\"));\n        doc4.add(Field.Text(\"body\", \"mXtXls\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n\twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n        Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));\n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n        Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n\n\tHits result;\n\n\tresult = searcher.search(query1);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(2, result.length());\n\n\tresult = searcher.search(query3);\n\tassertEquals(1, result.length());\n\n\tresult = searcher.search(query4);\n\tassertEquals(3, result.length());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fb70d5d797131bf722eac86615eae787b5af9ea","date":1112363464,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","sourceNew":"  /**\n   * Tests Wildcard queries with a question mark.\n   *\n   * @throws IOException if an error occurs\n   */\n  public void testQuestionmark()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\", \"mXtals\", \"mXtXls\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore);\n    Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"M?t?ls\"));\n\n    assertMatches(searcher, query1, 1);\n    assertMatches(searcher, query2, 2);\n    assertMatches(searcher, query3, 1);\n    assertMatches(searcher, query4, 3);\n    assertMatches(searcher, query5, 0);\n  }\n\n","sourceOld":"    /**\n     * Tests Wildcard queries with a question mark.\n     *\n     * @exception IOException if an error occurs\n     */\n    public void testQuestionmark()\n\tthrows IOException\n    {\n        RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n\t    { \"metal\", \"metals\", \"mXtals\", \"mXtXls\" }\n\t\t\t\t\t\t);\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n        Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));\n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n        Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n        Query query5 = new WildcardQuery(new Term(\"body\", \"M?t?ls\"));\n\n\tassertMatches(searcher, query1, 1);\n\tassertMatches(searcher, query2, 2);\n\tassertMatches(searcher, query3, 1);\n\tassertMatches(searcher, query4, 3);\n\tassertMatches(searcher, query5, 0);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ffe46471ff2f6bb0a2e76f664c16569286f8834","date":1130778389,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","sourceNew":"  /**\n   * Tests Wildcard queries with a question mark.\n   *\n   * @throws IOException if an error occurs\n   */\n  public void testQuestionmark()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\", \"mXtals\", \"mXtXls\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore);\n    Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"M?t?ls\"));\n    Query query6 = new WildcardQuery(new Term(\"body\", \"meta??\"));\n    \n    assertMatches(searcher, query1, 1); \n    assertMatches(searcher, query2, 1);\n    assertMatches(searcher, query3, 0);\n    assertMatches(searcher, query4, 3);\n    assertMatches(searcher, query5, 0);\n    assertMatches(searcher, query6, 1); // Query: 'meta??' matches 'metals' not 'metal'\n  }\n\n","sourceOld":"  /**\n   * Tests Wildcard queries with a question mark.\n   *\n   * @throws IOException if an error occurs\n   */\n  public void testQuestionmark()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\", \"mXtals\", \"mXtXls\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore);\n    Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"M?t?ls\"));\n\n    assertMatches(searcher, query1, 1);\n    assertMatches(searcher, query2, 2);\n    assertMatches(searcher, query3, 1);\n    assertMatches(searcher, query4, 3);\n    assertMatches(searcher, query5, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","sourceNew":"  /**\n   * Tests Wildcard queries with a question mark.\n   *\n   * @throws IOException if an error occurs\n   */\n  public void testQuestionmark()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\", \"mXtals\", \"mXtXls\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"M?t?ls\"));\n    Query query6 = new WildcardQuery(new Term(\"body\", \"meta??\"));\n    \n    assertMatches(searcher, query1, 1); \n    assertMatches(searcher, query2, 1);\n    assertMatches(searcher, query3, 0);\n    assertMatches(searcher, query4, 3);\n    assertMatches(searcher, query5, 0);\n    assertMatches(searcher, query6, 1); // Query: 'meta??' matches 'metals' not 'metal'\n  }\n\n","sourceOld":"  /**\n   * Tests Wildcard queries with a question mark.\n   *\n   * @throws IOException if an error occurs\n   */\n  public void testQuestionmark()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\", \"mXtals\", \"mXtXls\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore);\n    Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"M?t?ls\"));\n    Query query6 = new WildcardQuery(new Term(\"body\", \"meta??\"));\n    \n    assertMatches(searcher, query1, 1); \n    assertMatches(searcher, query2, 1);\n    assertMatches(searcher, query3, 0);\n    assertMatches(searcher, query4, 3);\n    assertMatches(searcher, query5, 0);\n    assertMatches(searcher, query6, 1); // Query: 'meta??' matches 'metals' not 'metal'\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","sourceNew":"  /**\n   * Tests Wildcard queries with a question mark.\n   *\n   * @throws IOException if an error occurs\n   */\n  public void testQuestionmark()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\", \"mXtals\", \"mXtXls\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"M?t?ls\"));\n    Query query6 = new WildcardQuery(new Term(\"body\", \"meta??\"));\n    \n    assertMatches(searcher, query1, 1); \n    assertMatches(searcher, query2, 1);\n    assertMatches(searcher, query3, 0);\n    assertMatches(searcher, query4, 3);\n    assertMatches(searcher, query5, 0);\n    assertMatches(searcher, query6, 1); // Query: 'meta??' matches 'metals' not 'metal'\n  }\n\n","sourceOld":"  /**\n   * Tests Wildcard queries with a question mark.\n   *\n   * @throws IOException if an error occurs\n   */\n  public void testQuestionmark()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\", \"mXtals\", \"mXtXls\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore);\n    Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"M?t?ls\"));\n    Query query6 = new WildcardQuery(new Term(\"body\", \"meta??\"));\n    \n    assertMatches(searcher, query1, 1); \n    assertMatches(searcher, query2, 1);\n    assertMatches(searcher, query3, 0);\n    assertMatches(searcher, query4, 3);\n    assertMatches(searcher, query5, 0);\n    assertMatches(searcher, query6, 1); // Query: 'meta??' matches 'metals' not 'metal'\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","sourceNew":"  /**\n   * Tests Wildcard queries with a question mark.\n   *\n   * @throws IOException if an error occurs\n   */\n  public void testQuestionmark()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\", \"mXtals\", \"mXtXls\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"M?t?ls\"));\n    Query query6 = new WildcardQuery(new Term(\"body\", \"meta??\"));\n    \n    assertMatches(searcher, query1, 1); \n    assertMatches(searcher, query2, 1);\n    assertMatches(searcher, query3, 0);\n    assertMatches(searcher, query4, 3);\n    assertMatches(searcher, query5, 0);\n    assertMatches(searcher, query6, 1); // Query: 'meta??' matches 'metals' not 'metal'\n  }\n\n","sourceOld":"  /**\n   * Tests Wildcard queries with a question mark.\n   *\n   * @throws IOException if an error occurs\n   */\n  public void testQuestionmark()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\", \"mXtals\", \"mXtXls\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"M?t?ls\"));\n    Query query6 = new WildcardQuery(new Term(\"body\", \"meta??\"));\n    \n    assertMatches(searcher, query1, 1); \n    assertMatches(searcher, query2, 1);\n    assertMatches(searcher, query3, 0);\n    assertMatches(searcher, query4, 3);\n    assertMatches(searcher, query5, 0);\n    assertMatches(searcher, query6, 1); // Query: 'meta??' matches 'metals' not 'metal'\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1fb70d5d797131bf722eac86615eae787b5af9ea":["dca593206e9e07eee9839b23d0c0b435915af416"],"a80f1c1871c574f7d3793290fb74228d71e85bdc":["5e0aeed39289ab7fc7a2f3a678f3027b2bc8b9e0"],"03f833b5ec0d601205f139d7738cdc62b5b79d91":["a80f1c1871c574f7d3793290fb74228d71e85bdc"],"3ffe46471ff2f6bb0a2e76f664c16569286f8834":["1fb70d5d797131bf722eac86615eae787b5af9ea"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["3ffe46471ff2f6bb0a2e76f664c16569286f8834"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["3ffe46471ff2f6bb0a2e76f664c16569286f8834","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"5e0aeed39289ab7fc7a2f3a678f3027b2bc8b9e0":["8d38e6f83876012dcad7baa43e8297a09a7f7c28"],"dca593206e9e07eee9839b23d0c0b435915af416":["03f833b5ec0d601205f139d7738cdc62b5b79d91"],"8d38e6f83876012dcad7baa43e8297a09a7f7c28":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"1fb70d5d797131bf722eac86615eae787b5af9ea":["3ffe46471ff2f6bb0a2e76f664c16569286f8834"],"a80f1c1871c574f7d3793290fb74228d71e85bdc":["03f833b5ec0d601205f139d7738cdc62b5b79d91"],"03f833b5ec0d601205f139d7738cdc62b5b79d91":["dca593206e9e07eee9839b23d0c0b435915af416"],"3ffe46471ff2f6bb0a2e76f664c16569286f8834":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d38e6f83876012dcad7baa43e8297a09a7f7c28"],"0a046c0c310bc77931fc8441bd920053b607dd14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5e0aeed39289ab7fc7a2f3a678f3027b2bc8b9e0":["a80f1c1871c574f7d3793290fb74228d71e85bdc"],"dca593206e9e07eee9839b23d0c0b435915af416":["1fb70d5d797131bf722eac86615eae787b5af9ea"],"8d38e6f83876012dcad7baa43e8297a09a7f7c28":["5e0aeed39289ab7fc7a2f3a678f3027b2bc8b9e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}