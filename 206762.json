{"path":"solr/solrj/src/java/org/apache/solr/common/util/Utils#forEachMapEntry(Object,BiConsumer).mjava","commits":[{"id":"3167eae3325cf45449a75ab0468b53c0545606a3","date":1538465698,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#forEachMapEntry(Object,BiConsumer).mjava","pathOld":"/dev/null","sourceNew":"  public static void forEachMapEntry(Object o, BiConsumer fun) {\n    if (o instanceof MapWriter) {\n      MapWriter m = (MapWriter) o;\n      try {\n        m.writeMap(new MapWriter.EntryWriter() {\n          @Override\n          public MapWriter.EntryWriter put(String k, Object v) {\n            fun.accept(k, v);\n            return this;\n          }\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    } else if (o instanceof Map) {\n      ((Map) o).forEach((k, v) -> fun.accept(k, v));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"457ac99a6d7227f954082cc753a08b18225e4553","date":1540167281,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#forEachMapEntry(Object,BiConsumer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#forEachMapEntry(Object,BiConsumer).mjava","sourceNew":"  public static void forEachMapEntry(Object o, BiConsumer fun) {\n    if (o instanceof MapWriter) {\n      MapWriter m = (MapWriter) o;\n      try {\n        m.writeMap(new MapWriter.EntryWriter() {\n          @Override\n          public MapWriter.EntryWriter put(CharSequence k, Object v) {\n            fun.accept(k, v);\n            return this;\n          }\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    } else if (o instanceof Map) {\n      ((Map) o).forEach((k, v) -> fun.accept(k, v));\n    }\n  }\n\n","sourceOld":"  public static void forEachMapEntry(Object o, BiConsumer fun) {\n    if (o instanceof MapWriter) {\n      MapWriter m = (MapWriter) o;\n      try {\n        m.writeMap(new MapWriter.EntryWriter() {\n          @Override\n          public MapWriter.EntryWriter put(String k, Object v) {\n            fun.accept(k, v);\n            return this;\n          }\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    } else if (o instanceof Map) {\n      ((Map) o).forEach((k, v) -> fun.accept(k, v));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","date":1591450217,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#forEachMapEntry(Object,BiConsumer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#forEachMapEntry(Object,BiConsumer).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public static void forEachMapEntry(Object o, @SuppressWarnings({\"rawtypes\"})BiConsumer fun) {\n    if (o instanceof MapWriter) {\n      MapWriter m = (MapWriter) o;\n      try {\n        m.writeMap(new MapWriter.EntryWriter() {\n          @Override\n          public MapWriter.EntryWriter put(CharSequence k, Object v) {\n            fun.accept(k, v);\n            return this;\n          }\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    } else if (o instanceof Map) {\n      ((Map) o).forEach((k, v) -> fun.accept(k, v));\n    }\n  }\n\n","sourceOld":"  public static void forEachMapEntry(Object o, BiConsumer fun) {\n    if (o instanceof MapWriter) {\n      MapWriter m = (MapWriter) o;\n      try {\n        m.writeMap(new MapWriter.EntryWriter() {\n          @Override\n          public MapWriter.EntryWriter put(CharSequence k, Object v) {\n            fun.accept(k, v);\n            return this;\n          }\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    } else if (o instanceof Map) {\n      ((Map) o).forEach((k, v) -> fun.accept(k, v));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["457ac99a6d7227f954082cc753a08b18225e4553"],"457ac99a6d7227f954082cc753a08b18225e4553":["3167eae3325cf45449a75ab0468b53c0545606a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3167eae3325cf45449a75ab0468b53c0545606a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"]},"commit2Childs":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"457ac99a6d7227f954082cc753a08b18225e4553":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3167eae3325cf45449a75ab0468b53c0545606a3"],"3167eae3325cf45449a75ab0468b53c0545606a3":["457ac99a6d7227f954082cc753a08b18225e4553"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}