{"path":"solr/core/src/test/org/apache/solr/cloud/TestDownShardTolerantSearch#test().mjava","commits":[{"id":"84bf44b1557bad2a5df2cb3af4c39a2b3f0e1efe","date":1434139436,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestDownShardTolerantSearch#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    waitForRecoveriesToFinish(true);\n\n    indexAbunchOfDocs();\n    commit();\n    QueryResponse response = cloudClient.query(new SolrQuery(\"*:*\").setRows(1));\n    assertThat(response.getStatus(), is(0));\n    assertThat(response.getResults().getNumFound(), is(66L));\n\n    ChaosMonkey.kill(shardToJetty.get(SHARD1).get(0));\n\n    response = cloudClient.query(new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, true));\n    assertThat(response.getStatus(), is(0));\n    assertTrue(response.getResults().getNumFound() > 0);\n\n    try {\n      response = cloudClient.query(new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, false));\n      fail(\"Request should have failed because we killed shard1 jetty\");\n    } catch (SolrServerException e) {\n      log.info(\"error from server\", e);\n      assertNotNull(e.getCause());\n      assertTrue(\"Error message from server should have the name of the down shard\", e.getCause().getMessage().contains(\"shard1\"));\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9f53fdbc82a7efa1329d4d258cd91da69061f70","date":1434146626,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestDownShardTolerantSearch#searchingShouldFailWithoutTolerantSearchSetToTrue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestDownShardTolerantSearch#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void searchingShouldFailWithoutTolerantSearchSetToTrue() throws Exception {\n    waitForRecoveriesToFinish(true);\n\n    indexAbunchOfDocs();\n    commit();\n    QueryResponse response = cloudClient.query(new SolrQuery(\"*:*\").setRows(1));\n    assertThat(response.getStatus(), is(0));\n    assertThat(response.getResults().getNumFound(), is(66L));\n\n    ChaosMonkey.kill(shardToJetty.get(SHARD1).get(0));\n\n    response = cloudClient.query(new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, true));\n    assertThat(response.getStatus(), is(0));\n    assertTrue(response.getResults().getNumFound() > 0);\n\n    try {\n      cloudClient.query(new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, false));\n      fail(\"Request should have failed because we killed shard1 jetty\");\n    } catch (SolrServerException e) {\n      log.info(\"error from server\", e);\n      assertNotNull(e.getCause());\n      assertTrue(\"Error message from server should have the name of the down shard\",\n          e.getCause().getMessage().contains(SHARD1));\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    waitForRecoveriesToFinish(true);\n\n    indexAbunchOfDocs();\n    commit();\n    QueryResponse response = cloudClient.query(new SolrQuery(\"*:*\").setRows(1));\n    assertThat(response.getStatus(), is(0));\n    assertThat(response.getResults().getNumFound(), is(66L));\n\n    ChaosMonkey.kill(shardToJetty.get(SHARD1).get(0));\n\n    response = cloudClient.query(new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, true));\n    assertThat(response.getStatus(), is(0));\n    assertTrue(response.getResults().getNumFound() > 0);\n\n    try {\n      response = cloudClient.query(new SolrQuery(\"*:*\").setRows(1).setParam(ShardParams.SHARDS_TOLERANT, false));\n      fail(\"Request should have failed because we killed shard1 jetty\");\n    } catch (SolrServerException e) {\n      log.info(\"error from server\", e);\n      assertNotNull(e.getCause());\n      assertTrue(\"Error message from server should have the name of the down shard\", e.getCause().getMessage().contains(\"shard1\"));\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9f53fdbc82a7efa1329d4d258cd91da69061f70":["84bf44b1557bad2a5df2cb3af4c39a2b3f0e1efe"],"84bf44b1557bad2a5df2cb3af4c39a2b3f0e1efe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a9f53fdbc82a7efa1329d4d258cd91da69061f70"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84bf44b1557bad2a5df2cb3af4c39a2b3f0e1efe"],"a9f53fdbc82a7efa1329d4d258cd91da69061f70":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84bf44b1557bad2a5df2cb3af4c39a2b3f0e1efe":["a9f53fdbc82a7efa1329d4d258cd91da69061f70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}