{"path":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","sourceNew":"  /** Wait for any running merge threads to finish */\n  public void sync() {\n    while (true) {\n      MergeThread toSync = null;\n      synchronized (this) {\n        for (MergeThread t : mergeThreads) {\n          if (t.isAlive()) {\n            toSync = t;\n            break;\n          }\n        }\n      }\n      if (toSync != null) {\n        try {\n          toSync.join();\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      } else {\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  /** Wait for any running merge threads to finish */\n  public void sync() {\n    while (true) {\n      MergeThread toSync = null;\n      synchronized (this) {\n        for (MergeThread t : mergeThreads) {\n          if (t.isAlive()) {\n            toSync = t;\n            break;\n          }\n        }\n      }\n      if (toSync != null) {\n        try {\n          toSync.join();\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      } else {\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e9b91640bcf21617f742fa506dc0a1495bb7d6","date":1343107563,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","sourceNew":"  /** Wait for any running merge threads to finish. This call is not interruptible as used by {@link #close()}. */\n  public void sync() {\n    boolean interrupted = false;\n    try {\n      while (true) {\n        MergeThread toSync = null;\n        synchronized (this) {\n          for (MergeThread t : mergeThreads) {\n            if (t.isAlive()) {\n              toSync = t;\n              break;\n            }\n          }\n        }\n        if (toSync != null) {\n          try {\n            toSync.join();\n          } catch (InterruptedException ie) {\n            // ignore this Exception, we will retry until all threads are dead\n            interrupted = true;\n          }\n        } else {\n          break;\n        }\n      }\n    } finally {\n      // finally, restore interrupt status:\n      if (interrupted) Thread.currentThread().interrupt();\n    }\n  }\n\n","sourceOld":"  /** Wait for any running merge threads to finish */\n  public void sync() {\n    while (true) {\n      MergeThread toSync = null;\n      synchronized (this) {\n        for (MergeThread t : mergeThreads) {\n          if (t.isAlive()) {\n            toSync = t;\n            break;\n          }\n        }\n      }\n      if (toSync != null) {\n        try {\n          toSync.join();\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      } else {\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","date":1343203827,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","sourceNew":"  /** Wait for any running merge threads to finish. This call is not interruptible as used by {@link #close()}. */\n  public void sync() {\n    boolean interrupted = false;\n    try {\n      while (true) {\n        MergeThread toSync = null;\n        synchronized (this) {\n          for (MergeThread t : mergeThreads) {\n            if (t.isAlive()) {\n              toSync = t;\n              break;\n            }\n          }\n        }\n        if (toSync != null) {\n          try {\n            toSync.join();\n          } catch (InterruptedException ie) {\n            // ignore this Exception, we will retry until all threads are dead\n            interrupted = true;\n          }\n        } else {\n          break;\n        }\n      }\n    } finally {\n      // finally, restore interrupt status:\n      if (interrupted) Thread.currentThread().interrupt();\n    }\n  }\n\n","sourceOld":"  /** Wait for any running merge threads to finish */\n  public void sync() {\n    while (true) {\n      MergeThread toSync = null;\n      synchronized (this) {\n        for (MergeThread t : mergeThreads) {\n          if (t.isAlive()) {\n            toSync = t;\n            break;\n          }\n        }\n      }\n      if (toSync != null) {\n        try {\n          toSync.join();\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      } else {\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","sourceNew":"  /** Wait for any running merge threads to finish. This call is not interruptible as used by {@link #close()}. */\n  public void sync() {\n    boolean interrupted = false;\n    try {\n      while (true) {\n        MergeThread toSync = null;\n        synchronized (this) {\n          for (MergeThread t : mergeThreads) {\n            if (t.isAlive()) {\n              toSync = t;\n              break;\n            }\n          }\n        }\n        if (toSync != null) {\n          try {\n            toSync.join();\n          } catch (InterruptedException ie) {\n            // ignore this Exception, we will retry until all threads are dead\n            interrupted = true;\n          }\n        } else {\n          break;\n        }\n      }\n    } finally {\n      // finally, restore interrupt status:\n      if (interrupted) Thread.currentThread().interrupt();\n    }\n  }\n\n","sourceOld":"  /** Wait for any running merge threads to finish */\n  public void sync() {\n    while (true) {\n      MergeThread toSync = null;\n      synchronized (this) {\n        for (MergeThread t : mergeThreads) {\n          if (t.isAlive()) {\n            toSync = t;\n            break;\n          }\n        }\n      }\n      if (toSync != null) {\n        try {\n          toSync.join();\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      } else {\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","sourceNew":"  /** Wait for any running merge threads to finish. This call is not interruptible as used by {@link #close()}. */\n  public void sync() {\n    boolean interrupted = false;\n    try {\n      while (true) {\n        MergeThread toSync = null;\n        synchronized (this) {\n          for (MergeThread t : mergeThreads) {\n            if (t.isAlive()) {\n              toSync = t;\n              break;\n            }\n          }\n        }\n        if (toSync != null) {\n          try {\n            toSync.join();\n          } catch (InterruptedException ie) {\n            // ignore this Exception, we will retry until all threads are dead\n            interrupted = true;\n          }\n        } else {\n          break;\n        }\n      }\n    } finally {\n      // finally, restore interrupt status:\n      if (interrupted) Thread.currentThread().interrupt();\n    }\n  }\n\n","sourceOld":"  /** Wait for any running merge threads to finish */\n  public void sync() {\n    while (true) {\n      MergeThread toSync = null;\n      synchronized (this) {\n        for (MergeThread t : mergeThreads) {\n          if (t.isAlive()) {\n            toSync = t;\n            break;\n          }\n        }\n      }\n      if (toSync != null) {\n        try {\n          toSync.join();\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      } else {\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9e22bdf0692bfa61e342b04a6ac7078670c1e16","date":1436866730,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","sourceNew":"  /** Wait for any running merge threads to finish. This call is not interruptible as used by {@link #close()}. */\n  public void sync() {\n    boolean interrupted = false;\n    try {\n      while (true) {\n        MergeThread toSync = null;\n        synchronized (this) {\n          for (MergeThread t : mergeThreads) {\n            // In case a merge thread is calling us, don't try to sync on\n            // itself, since that will never finish!\n            if (t.isAlive() && t != Thread.currentThread()) {\n              toSync = t;\n              break;\n            }\n          }\n        }\n        if (toSync != null) {\n          try {\n            toSync.join();\n          } catch (InterruptedException ie) {\n            // ignore this Exception, we will retry until all threads are dead\n            interrupted = true;\n          }\n        } else {\n          break;\n        }\n      }\n    } finally {\n      // finally, restore interrupt status:\n      if (interrupted) Thread.currentThread().interrupt();\n    }\n  }\n\n","sourceOld":"  /** Wait for any running merge threads to finish. This call is not interruptible as used by {@link #close()}. */\n  public void sync() {\n    boolean interrupted = false;\n    try {\n      while (true) {\n        MergeThread toSync = null;\n        synchronized (this) {\n          for (MergeThread t : mergeThreads) {\n            if (t.isAlive()) {\n              toSync = t;\n              break;\n            }\n          }\n        }\n        if (toSync != null) {\n          try {\n            toSync.join();\n          } catch (InterruptedException ie) {\n            // ignore this Exception, we will retry until all threads are dead\n            interrupted = true;\n          }\n        } else {\n          break;\n        }\n      }\n    } finally {\n      // finally, restore interrupt status:\n      if (interrupted) Thread.currentThread().interrupt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9e22bdf0692bfa61e342b04a6ac7078670c1e16":["e9e9b91640bcf21617f742fa506dc0a1495bb7d6"],"e9e9b91640bcf21617f742fa506dc0a1495bb7d6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"aba371508186796cc6151d8223a5b4e16d02e26e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","e9e9b91640bcf21617f742fa506dc0a1495bb7d6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","e9e9b91640bcf21617f742fa506dc0a1495bb7d6"],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","e9e9b91640bcf21617f742fa506dc0a1495bb7d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16"]},"commit2Childs":{"d9e22bdf0692bfa61e342b04a6ac7078670c1e16":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9e9b91640bcf21617f742fa506dc0a1495bb7d6":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e9e9b91640bcf21617f742fa506dc0a1495bb7d6","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}