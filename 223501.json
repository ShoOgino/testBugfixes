{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/BiJoinStream#init().mjava","commits":[{"id":"333d804f5abfaf34c57493306a4cb2e01e55662d","date":1447206304,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/BiJoinStream#init().mjava","pathOld":"/dev/null","sourceNew":"  private void init() throws IOException {\n    \n    // Validates all incoming streams for tuple order\n    validateTupleOrder();\n    \n    leftStream = getStream(0);\n    rightStream = getStream(1);\n    \n    // iterationComparator is a combination of the equalitor and the comp from each stream. This can easily be done by\n    // grabbing the first N parts of each comp where N is the number of parts in the equalitor. Because we've already\n    // validated tuple order (the comps) then we know this can be done.\n    iterationComparator = createIterationComparator(eq, leftStream.getStreamSort());\n    leftStreamComparator = createSideComparator(eq, leftStream.getStreamSort());\n    rightStreamComparator = createSideComparator(eq, rightStream.getStreamSort());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"333d804f5abfaf34c57493306a4cb2e01e55662d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["333d804f5abfaf34c57493306a4cb2e01e55662d"]},"commit2Childs":{"333d804f5abfaf34c57493306a4cb2e01e55662d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["333d804f5abfaf34c57493306a4cb2e01e55662d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}