{"path":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,String,boolean).mjava","commits":[{"id":"52c5280f6286c7546ab75b72c663f7bb1dc10e96","date":1427372570,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String).mjava","sourceNew":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, String sort, String prefix, String contains, boolean ignoreCase)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = params.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n\n    IndexSchema schema = searcher.getSchema();\n    LeafReader r = searcher.getLeafReader();\n    FieldType ft = schema.getFieldType(field);\n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n    \n    BytesRef containsTermBytes = null;\n    if (contains != null) {\n      String indexedContains = ft.toInternal(contains);\n      containsTermBytes = new BytesRef(indexedContains);\n    }\n\n    Fields fields = r.fields();\n    Terms terms = fields==null ? null : fields.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator(null);\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (containsTermBytes == null || StringHelper.contains(term, containsTermBytes, ignoreCase)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = r.getLiveDocs();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              c = searcher.numDocs(docs, deState);\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(null, postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) c++;\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) c++;\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, String sort, String prefix)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = params.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n\n    IndexSchema schema = searcher.getSchema();\n    LeafReader r = searcher.getLeafReader();\n    FieldType ft = schema.getFieldType(field);\n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef startTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      startTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Fields fields = r.fields();\n    Terms terms = fields==null ? null : fields.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator(null);\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (startTermBytes != null) {\n        if (termsEnum.seekCeil(startTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (startTermBytes != null && !StringHelper.startsWith(term, startTermBytes))\n          break;\n\n        int df = termsEnum.docFreq();\n\n        // If we are sorting, we can use df>min (rather than >=) since we\n        // are going in index order.  For certain term distributions this can\n        // make a large difference (for example, many terms with df=1).\n        if (df>0 && df>min) {\n          int c;\n\n          if (df >= minDfFilterCache) {\n            // use the filter cache\n\n            if (deState==null) {\n              deState = new SolrIndexSearcher.DocsEnumState();\n              deState.fieldName = field;\n              deState.liveDocs = r.getLiveDocs();\n              deState.termsEnum = termsEnum;\n              deState.postingsEnum = postingsEnum;\n            }\n\n            c = searcher.numDocs(docs, deState);\n\n            postingsEnum = deState.postingsEnum;\n          } else {\n            // iterate over TermDocs to calculate the intersection\n\n            // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n            // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n            // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n            postingsEnum = termsEnum.postings(null, postingsEnum, PostingsEnum.NONE);\n            c=0;\n\n            if (postingsEnum instanceof MultiPostingsEnum) {\n              MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n              int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n              for (int subindex = 0; subindex<numSubs; subindex++) {\n                MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                if (sub.postingsEnum == null) continue;\n                int base = sub.slice.start;\n                int docid;\n                while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid+base)) c++;\n                }\n              }\n            } else {\n              int docid;\n              while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                if (fastForRandomSet.exists(docid)) c++;\n              }\n            }\n            \n\n          }\n\n          if (sortByCount) {\n            if (c>min) {\n              BytesRef termCopy = BytesRef.deepCopyOf(term);\n              queue.add(new CountPair<>(termCopy, c));\n              if (queue.size()>=maxsize) min=queue.last().val;\n            }\n          } else {\n            if (c >= mincount && --off<0) {\n              if (--lim<0) break;\n              ft.indexedToReadable(term, charsRef);\n              res.add(charsRef.toString(), c);\n            }\n          }\n        }\n\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, String sort, String prefix, String contains, boolean ignoreCase)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = params.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n\n    IndexSchema schema = searcher.getSchema();\n    LeafReader r = searcher.getLeafReader();\n    FieldType ft = schema.getFieldType(field);\n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n    \n    BytesRef containsTermBytes = null;\n    if (contains != null) {\n      String indexedContains = ft.toInternal(contains);\n      containsTermBytes = new BytesRef(indexedContains);\n    }\n\n    Fields fields = r.fields();\n    Terms terms = fields==null ? null : fields.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator(null);\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (containsTermBytes == null || StringHelper.contains(term, containsTermBytes, ignoreCase)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = r.getLiveDocs();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              c = searcher.numDocs(docs, deState);\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(null, postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) c++;\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) c++;\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5963c53b53608d00d165849e6b52e71b0209c9b6","date":1428506893,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,String,boolean).mjava","sourceNew":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, String sort, String prefix, String contains, boolean ignoreCase)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = params.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n\n    IndexSchema schema = searcher.getSchema();\n    LeafReader r = searcher.getLeafReader();\n    FieldType ft = schema.getFieldType(field);\n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Fields fields = r.fields();\n    Terms terms = fields==null ? null : fields.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator(null);\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (contains == null || contains(term.utf8ToString(), contains, ignoreCase)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = r.getLiveDocs();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              c = searcher.numDocs(docs, deState);\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(null, postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) c++;\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) c++;\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, String sort, String prefix, String contains, boolean ignoreCase)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = params.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n\n    IndexSchema schema = searcher.getSchema();\n    LeafReader r = searcher.getLeafReader();\n    FieldType ft = schema.getFieldType(field);\n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n    \n    BytesRef containsTermBytes = null;\n    if (contains != null) {\n      String indexedContains = ft.toInternal(contains);\n      containsTermBytes = new BytesRef(indexedContains);\n    }\n\n    Fields fields = r.fields();\n    Terms terms = fields==null ? null : fields.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator(null);\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (containsTermBytes == null || StringHelper.contains(term, containsTermBytes, ignoreCase)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = r.getLiveDocs();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              c = searcher.numDocs(docs, deState);\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(null, postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) c++;\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) c++;\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,String,boolean).mjava","sourceNew":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, String sort, String prefix, String contains, boolean ignoreCase)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = params.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n\n    IndexSchema schema = searcher.getSchema();\n    LeafReader r = searcher.getLeafReader();\n    FieldType ft = schema.getFieldType(field);\n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Fields fields = r.fields();\n    Terms terms = fields==null ? null : fields.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (contains == null || contains(term.utf8ToString(), contains, ignoreCase)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = r.getLiveDocs();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              c = searcher.numDocs(docs, deState);\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(null, postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) c++;\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) c++;\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, String sort, String prefix, String contains, boolean ignoreCase)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = params.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n\n    IndexSchema schema = searcher.getSchema();\n    LeafReader r = searcher.getLeafReader();\n    FieldType ft = schema.getFieldType(field);\n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Fields fields = r.fields();\n    Terms terms = fields==null ? null : fields.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator(null);\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (contains == null || contains(term.utf8ToString(), contains, ignoreCase)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = r.getLiveDocs();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              c = searcher.numDocs(docs, deState);\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(null, postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) c++;\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) c++;\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,String,boolean).mjava","sourceNew":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, String sort, String prefix, String contains, boolean ignoreCase)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = params.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n\n    IndexSchema schema = searcher.getSchema();\n    LeafReader r = searcher.getLeafReader();\n    FieldType ft = schema.getFieldType(field);\n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Fields fields = r.fields();\n    Terms terms = fields==null ? null : fields.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (contains == null || contains(term.utf8ToString(), contains, ignoreCase)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = r.getLiveDocs();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              c = searcher.numDocs(docs, deState);\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) c++;\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) c++;\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, String sort, String prefix, String contains, boolean ignoreCase)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = params.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n\n    IndexSchema schema = searcher.getSchema();\n    LeafReader r = searcher.getLeafReader();\n    FieldType ft = schema.getFieldType(field);\n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Fields fields = r.fields();\n    Terms terms = fields==null ? null : fields.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (contains == null || contains(term.utf8ToString(), contains, ignoreCase)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = r.getLiveDocs();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              c = searcher.numDocs(docs, deState);\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(null, postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) c++;\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) c++;\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa62c79a7afa4d7f22e1f71b883659f3213d7db1","date":1435334422,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,String,boolean).mjava","sourceNew":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, String sort, String prefix, String contains, boolean ignoreCase)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = global.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n\n    IndexSchema schema = searcher.getSchema();\n    LeafReader r = searcher.getLeafReader();\n    FieldType ft = schema.getFieldType(field);\n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Fields fields = r.fields();\n    Terms terms = fields==null ? null : fields.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (contains == null || contains(term.utf8ToString(), contains, ignoreCase)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = r.getLiveDocs();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              c = searcher.numDocs(docs, deState);\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) c++;\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) c++;\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, String sort, String prefix, String contains, boolean ignoreCase)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = params.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n\n    IndexSchema schema = searcher.getSchema();\n    LeafReader r = searcher.getLeafReader();\n    FieldType ft = schema.getFieldType(field);\n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Fields fields = r.fields();\n    Terms terms = fields==null ? null : fields.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (contains == null || contains(term.utf8ToString(), contains, ignoreCase)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = r.getLiveDocs();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              c = searcher.numDocs(docs, deState);\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) c++;\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) c++;\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","bugFix":["52c5280f6286c7546ab75b72c663f7bb1dc10e96"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,String,boolean,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,String,boolean).mjava","sourceNew":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, String sort, String prefix, String contains, boolean ignoreCase, SolrParams params)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = global.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n\n    IndexSchema schema = searcher.getSchema();\n    LeafReader r = searcher.getLeafReader();\n    FieldType ft = schema.getFieldType(field);\n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Fields fields = r.fields();\n    Terms terms = fields==null ? null : fields.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (contains == null || contains(term.utf8ToString(), contains, ignoreCase)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = r.getLiveDocs();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              c = searcher.numDocs(docs, deState);\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) c++;\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) c++;\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, String sort, String prefix, String contains, boolean ignoreCase)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = global.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n\n    IndexSchema schema = searcher.getSchema();\n    LeafReader r = searcher.getLeafReader();\n    FieldType ft = schema.getFieldType(field);\n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Fields fields = r.fields();\n    Terms terms = fields==null ? null : fields.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (contains == null || contains(term.utf8ToString(), contains, ignoreCase)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = r.getLiveDocs();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              c = searcher.numDocs(docs, deState);\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) c++;\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) c++;\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["5963c53b53608d00d165849e6b52e71b0209c9b6"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","52c5280f6286c7546ab75b72c663f7bb1dc10e96"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"5963c53b53608d00d165849e6b52e71b0209c9b6":["52c5280f6286c7546ab75b72c663f7bb1dc10e96"],"52c5280f6286c7546ab75b72c663f7bb1dc10e96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"aa62c79a7afa4d7f22e1f71b883659f3213d7db1":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0f4464508ee83288c8c4585b533f9faaa93aa314":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"5963c53b53608d00d165849e6b52e71b0209c9b6":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"52c5280f6286c7546ab75b72c663f7bb1dc10e96":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5963c53b53608d00d165849e6b52e71b0209c9b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","52c5280f6286c7546ab75b72c663f7bb1dc10e96"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aa62c79a7afa4d7f22e1f71b883659f3213d7db1":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}