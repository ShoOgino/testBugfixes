{"path":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsMerge#testInconsistentTopDocsFail().mjava","commits":[{"id":"500a89755c0c3953ca1886b5abb653b8cef8e299","date":1487933004,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsMerge#testInconsistentTopDocsFail().mjava","pathOld":"/dev/null","sourceNew":"  public void testInconsistentTopDocsFail() {\n    TopDocs[] topDocs = new TopDocs[] {\n        new TopDocs(1, new ScoreDoc[] { new ScoreDoc(1, 1.0f, 1) }),\n        new TopDocs(1, new ScoreDoc[] { new ScoreDoc(1, 1.0f, -1) })\n    };\n    if (random().nextBoolean()) {\n      ArrayUtil.swap(topDocs, 0, 1);\n    }\n    expectThrows(IllegalStateException.class, () -> {\n      TopDocs.merge(0, 1, topDocs);\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a5b816df64f2b489d1e711be80f9416f9862c1b","date":1487973679,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsMerge#testInconsistentTopDocsFail().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsMerge#testInconsistentTopDocsFail().mjava","sourceNew":"  public void testInconsistentTopDocsFail() {\n    TopDocs[] topDocs = new TopDocs[] {\n        new TopDocs(1, new ScoreDoc[] { new ScoreDoc(1, 1.0f) }),\n        new TopDocs(1, new ScoreDoc[] { new ScoreDoc(1, 1.0f, -1) })\n    };\n    if (random().nextBoolean()) {\n      ArrayUtil.swap(topDocs, 0, 1);\n    }\n    expectThrows(IllegalArgumentException.class, () -> {\n        TopDocs.merge(0, 1, topDocs, false);\n    });\n  }\n\n","sourceOld":"  public void testInconsistentTopDocsFail() {\n    TopDocs[] topDocs = new TopDocs[] {\n        new TopDocs(1, new ScoreDoc[] { new ScoreDoc(1, 1.0f, 1) }),\n        new TopDocs(1, new ScoreDoc[] { new ScoreDoc(1, 1.0f, -1) })\n    };\n    if (random().nextBoolean()) {\n      ArrayUtil.swap(topDocs, 0, 1);\n    }\n    expectThrows(IllegalStateException.class, () -> {\n      TopDocs.merge(0, 1, topDocs);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsMerge#testInconsistentTopDocsFail().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsMerge#testInconsistentTopDocsFail().mjava","sourceNew":"  public void testInconsistentTopDocsFail() {\n    TopDocs[] topDocs = new TopDocs[] {\n        new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] { new ScoreDoc(1, 1.0f) }),\n        new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] { new ScoreDoc(1, 1.0f, -1) })\n    };\n    if (random().nextBoolean()) {\n      ArrayUtil.swap(topDocs, 0, 1);\n    }\n    expectThrows(IllegalArgumentException.class, () -> {\n        TopDocs.merge(0, 1, topDocs, false);\n    });\n  }\n\n","sourceOld":"  public void testInconsistentTopDocsFail() {\n    TopDocs[] topDocs = new TopDocs[] {\n        new TopDocs(1, new ScoreDoc[] { new ScoreDoc(1, 1.0f) }),\n        new TopDocs(1, new ScoreDoc[] { new ScoreDoc(1, 1.0f, -1) })\n    };\n    if (random().nextBoolean()) {\n      ArrayUtil.swap(topDocs, 0, 1);\n    }\n    expectThrows(IllegalArgumentException.class, () -> {\n        TopDocs.merge(0, 1, topDocs, false);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36510a8e3c1ec60d366b45f8f716e9dc47589661","date":1561989412,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsMerge#testInconsistentTopDocsFail().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsMerge#testInconsistentTopDocsFail().mjava","sourceNew":"  public void testInconsistentTopDocsFail() {\n    TopDocs[] topDocs = new TopDocs[] {\n        new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] { new ScoreDoc(1, 1.0f, 5) }),\n        new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] { new ScoreDoc(1, 1.0f, -1) })\n    };\n    if (random().nextBoolean()) {\n      ArrayUtil.swap(topDocs, 0, 1);\n    }\n    expectThrows(IllegalArgumentException.class, () -> {\n        TopDocs.merge(0, 2, topDocs);\n    });\n  }\n\n","sourceOld":"  public void testInconsistentTopDocsFail() {\n    TopDocs[] topDocs = new TopDocs[] {\n        new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] { new ScoreDoc(1, 1.0f) }),\n        new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] { new ScoreDoc(1, 1.0f, -1) })\n    };\n    if (random().nextBoolean()) {\n      ArrayUtil.swap(topDocs, 0, 1);\n    }\n    expectThrows(IllegalArgumentException.class, () -> {\n        TopDocs.merge(0, 1, topDocs, false);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4f6b0fb6f08ac48f438f03002a283a63cb9992","date":1561992803,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsMerge#testInconsistentTopDocsFail().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsMerge#testInconsistentTopDocsFail().mjava","sourceNew":"  public void testInconsistentTopDocsFail() {\n    TopDocs[] topDocs = new TopDocs[] {\n        new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] { new ScoreDoc(1, 1.0f) }),\n        new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] { new ScoreDoc(1, 1.0f, -1) })\n    };\n    if (random().nextBoolean()) {\n      ArrayUtil.swap(topDocs, 0, 1);\n    }\n    expectThrows(IllegalArgumentException.class, () -> {\n        TopDocs.merge(0, 1, topDocs, false);\n    });\n  }\n\n","sourceOld":"  public void testInconsistentTopDocsFail() {\n    TopDocs[] topDocs = new TopDocs[] {\n        new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] { new ScoreDoc(1, 1.0f, 5) }),\n        new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] { new ScoreDoc(1, 1.0f, -1) })\n    };\n    if (random().nextBoolean()) {\n      ArrayUtil.swap(topDocs, 0, 1);\n    }\n    expectThrows(IllegalArgumentException.class, () -> {\n        TopDocs.merge(0, 2, topDocs);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fccd4a691aac1aff06ab8110d8693514a34160c3","date":1562092518,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsMerge#testInconsistentTopDocsFail().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsMerge#testInconsistentTopDocsFail().mjava","sourceNew":"  public void testInconsistentTopDocsFail() {\n    TopDocs[] topDocs = new TopDocs[] {\n        new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] { new ScoreDoc(1, 1.0f, 5) }),\n        new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] { new ScoreDoc(1, 1.0f, -1) })\n    };\n    if (random().nextBoolean()) {\n      ArrayUtil.swap(topDocs, 0, 1);\n    }\n    expectThrows(IllegalArgumentException.class, () -> {\n        TopDocs.merge(0, 2, topDocs);\n    });\n  }\n\n","sourceOld":"  public void testInconsistentTopDocsFail() {\n    TopDocs[] topDocs = new TopDocs[] {\n        new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] { new ScoreDoc(1, 1.0f) }),\n        new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] { new ScoreDoc(1, 1.0f, -1) })\n    };\n    if (random().nextBoolean()) {\n      ArrayUtil.swap(topDocs, 0, 1);\n    }\n    expectThrows(IllegalArgumentException.class, () -> {\n        TopDocs.merge(0, 1, topDocs, false);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36510a8e3c1ec60d366b45f8f716e9dc47589661":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"9a5b816df64f2b489d1e711be80f9416f9862c1b":["500a89755c0c3953ca1886b5abb653b8cef8e299"],"fccd4a691aac1aff06ab8110d8693514a34160c3":["5f4f6b0fb6f08ac48f438f03002a283a63cb9992"],"500a89755c0c3953ca1886b5abb653b8cef8e299":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["9a5b816df64f2b489d1e711be80f9416f9862c1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fccd4a691aac1aff06ab8110d8693514a34160c3"],"5f4f6b0fb6f08ac48f438f03002a283a63cb9992":["36510a8e3c1ec60d366b45f8f716e9dc47589661"]},"commit2Childs":{"36510a8e3c1ec60d366b45f8f716e9dc47589661":["5f4f6b0fb6f08ac48f438f03002a283a63cb9992"],"9a5b816df64f2b489d1e711be80f9416f9862c1b":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"500a89755c0c3953ca1886b5abb653b8cef8e299":["9a5b816df64f2b489d1e711be80f9416f9862c1b"],"fccd4a691aac1aff06ab8110d8693514a34160c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["500a89755c0c3953ca1886b5abb653b8cef8e299"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["36510a8e3c1ec60d366b45f8f716e9dc47589661"],"5f4f6b0fb6f08ac48f438f03002a283a63cb9992":["fccd4a691aac1aff06ab8110d8693514a34160c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}