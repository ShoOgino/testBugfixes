{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectWithinPolyPrecise(double,double,double,double,double[],double[],double,double,double,double).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectWithinPolyPrecise(double,double,double,double,double[],double[],double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectWithinPolyPrecise(double,double,double,double,double[],double[],double,double,double,double).mjava","sourceNew":"  public static boolean rectWithinPolyPrecise(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                       final double[] shapeX, final double[] shapeY, final double sMinX,\n                                       final double sMinY, final double sMaxX, final double sMaxY) {\n    // check if rectangle crosses poly (to handle concave/pacman polys), then check that all 4 corners\n    // are contained\n    return !(rectCrossesPolyPrecise(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY, sMinX, sMinY, sMaxX, sMaxY) ||\n        !pointInPolygon(shapeX, shapeY, rMinY, rMinX) || !pointInPolygon(shapeX, shapeY, rMinY, rMaxX) ||\n        !pointInPolygon(shapeX, shapeY, rMaxY, rMaxX) || !pointInPolygon(shapeX, shapeY, rMaxY, rMinX));\n  }\n\n","sourceOld":"  public static boolean rectWithinPolyPrecise(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                       final double[] shapeX, final double[] shapeY, final double sMinX,\n                                       final double sMinY, final double sMaxX, final double sMaxY) {\n    // check if rectangle crosses poly (to handle concave/pacman polys), then check that all 4 corners\n    // are contained\n    return !(rectCrossesPolyPrecise(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY, sMinX, sMinY, sMaxX, sMaxY) ||\n        !pointInPolygon(shapeX, shapeY, rMinY, rMinX) || !pointInPolygon(shapeX, shapeY, rMinY, rMaxX) ||\n        !pointInPolygon(shapeX, shapeY, rMaxY, rMaxX) || !pointInPolygon(shapeX, shapeY, rMaxY, rMinX));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectWithinPolyPrecise(double,double,double,double,double[],double[],double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectWithinPoly(double,double,double,double,double[],double[],double,double,double,double,boolean).mjava","sourceNew":"  public static boolean rectWithinPolyPrecise(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                       final double[] shapeX, final double[] shapeY, final double sMinX,\n                                       final double sMinY, final double sMaxX, final double sMaxY) {\n    // check if rectangle crosses poly (to handle concave/pacman polys), then check that all 4 corners\n    // are contained\n    return !(rectCrossesPolyPrecise(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY, sMinX, sMinY, sMaxX, sMaxY) ||\n        !pointInPolygon(shapeX, shapeY, rMinY, rMinX) || !pointInPolygon(shapeX, shapeY, rMinY, rMaxX) ||\n        !pointInPolygon(shapeX, shapeY, rMaxY, rMaxX) || !pointInPolygon(shapeX, shapeY, rMaxY, rMinX));\n  }\n\n","sourceOld":"  /**\n   * Computes whether a rectangle is within a given polygon (shared boundaries allowed)\n   */\n  public static boolean rectWithinPoly(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                       final double[] shapeX, final double[] shapeY, final double sMinX,\n                                       final double sMinY, final double sMaxX, final double sMaxY, boolean approx) {\n    // approximation: check if rectangle crosses poly (to handle concave/pacman polys), then check one of the corners\n    // are contained\n    if (approx == true) {\n      // short-cut: if bounding boxes cross, rect is not within\n      if (rectCrosses(rMinX, rMinY, rMaxX, rMaxY, sMinX, sMinY, sMaxX, sMaxY) == true) {\n        return false;\n      }\n\n      return !(rectCrossesPoly(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY, sMinX, sMinY, sMaxX, sMaxY) ||\n          !pointInPolygon(shapeX, shapeY, rMinY, rMinX));\n    }\n    // check if rectangle crosses poly (to handle concave/pacman polys), then check that all 4 corners\n    // are contained\n    return !(rectCrossesPoly(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY, sMinX, sMinY, sMaxX, sMaxY) ||\n        !pointInPolygon(shapeX, shapeY, rMinY, rMinX) || !pointInPolygon(shapeX, shapeY, rMinY, rMaxX) ||\n        !pointInPolygon(shapeX, shapeY, rMaxY, rMaxX) || !pointInPolygon(shapeX, shapeY, rMaxY, rMinX));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectWithinPolyPrecise(double,double,double,double,double[],double[],double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectWithinPolyPrecise(double,double,double,double,double[],double[],double,double,double,double).mjava","sourceNew":"  /**\n   * Computes whether a rectangle is within a polygon (shared boundaries not allowed) with more rigor than the\n   * {@link GeoRelationUtils#rectWithinPolyApprox} counterpart\n   */\n  public static boolean rectWithinPolyPrecise(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                       final double[] shapeX, final double[] shapeY, final double sMinX,\n                                       final double sMinY, final double sMaxX, final double sMaxY) {\n    // check if rectangle crosses poly (to handle concave/pacman polys), then check that all 4 corners\n    // are contained\n    return !(rectCrossesPolyPrecise(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY, sMinX, sMinY, sMaxX, sMaxY) ||\n        !pointInPolygon(shapeX, shapeY, rMinY, rMinX) || !pointInPolygon(shapeX, shapeY, rMinY, rMaxX) ||\n        !pointInPolygon(shapeX, shapeY, rMaxY, rMaxX) || !pointInPolygon(shapeX, shapeY, rMaxY, rMinX));\n  }\n\n","sourceOld":"  public static boolean rectWithinPolyPrecise(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                       final double[] shapeX, final double[] shapeY, final double sMinX,\n                                       final double sMinY, final double sMaxX, final double sMaxY) {\n    // check if rectangle crosses poly (to handle concave/pacman polys), then check that all 4 corners\n    // are contained\n    return !(rectCrossesPolyPrecise(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY, sMinX, sMinY, sMaxX, sMaxY) ||\n        !pointInPolygon(shapeX, shapeY, rMinY, rMinX) || !pointInPolygon(shapeX, shapeY, rMinY, rMaxX) ||\n        !pointInPolygon(shapeX, shapeY, rMaxY, rMaxX) || !pointInPolygon(shapeX, shapeY, rMaxY, rMinX));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectWithinPolyPrecise(double,double,double,double,double[],double[],double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectWithinPolyPrecise(double,double,double,double,double[],double[],double,double,double,double).mjava","sourceNew":"  /**\n   * Computes whether a rectangle is within a polygon (shared boundaries not allowed) with more rigor than the\n   * {@link GeoRelationUtils#rectWithinPolyApprox} counterpart\n   */\n  public static boolean rectWithinPolyPrecise(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                       final double[] shapeX, final double[] shapeY, final double sMinX,\n                                       final double sMinY, final double sMaxX, final double sMaxY) {\n    // check if rectangle crosses poly (to handle concave/pacman polys), then check that all 4 corners\n    // are contained\n    return !(rectCrossesPolyPrecise(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY, sMinX, sMinY, sMaxX, sMaxY) ||\n        !pointInPolygon(shapeX, shapeY, rMinY, rMinX) || !pointInPolygon(shapeX, shapeY, rMinY, rMaxX) ||\n        !pointInPolygon(shapeX, shapeY, rMaxY, rMaxX) || !pointInPolygon(shapeX, shapeY, rMaxY, rMinX));\n  }\n\n","sourceOld":"  public static boolean rectWithinPolyPrecise(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                       final double[] shapeX, final double[] shapeY, final double sMinX,\n                                       final double sMinY, final double sMaxX, final double sMaxY) {\n    // check if rectangle crosses poly (to handle concave/pacman polys), then check that all 4 corners\n    // are contained\n    return !(rectCrossesPolyPrecise(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY, sMinX, sMinY, sMaxX, sMaxY) ||\n        !pointInPolygon(shapeX, shapeY, rMinY, rMinX) || !pointInPolygon(shapeX, shapeY, rMinY, rMaxX) ||\n        !pointInPolygon(shapeX, shapeY, rMaxY, rMaxX) || !pointInPolygon(shapeX, shapeY, rMaxY, rMinX));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectWithinPolyPrecise(double,double,double,double,double[],double[],double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectWithinPolyPrecise(double,double,double,double,double[],double[],double,double,double,double).mjava","sourceNew":"  /**\n   * Computes whether a rectangle is within a polygon (shared boundaries not allowed) with more rigor than the\n   * {@link GeoRelationUtils#rectWithinPolyApprox} counterpart\n   */\n  public static boolean rectWithinPolyPrecise(final double rMinLat, final double rMaxLat, final double rMinLon, final double rMaxLon,\n                                              final double[] shapeLats, final double[] shapeLons, final double sMinLat,\n                                              final double sMaxLat, final double sMinLon, final double sMaxLon) {\n    // check if rectangle crosses poly (to handle concave/pacman polys), then check that all 4 corners\n    // are contained\n    return !(rectCrossesPolyPrecise(rMinLat, rMaxLat, rMinLon, rMaxLon, shapeLats, shapeLons, sMinLat, sMaxLat, sMinLon, sMaxLon) ||\n        !pointInPolygon(shapeLats, shapeLons, rMinLat, rMinLon) || !pointInPolygon(shapeLats, shapeLons, rMinLat, rMaxLon) ||\n        !pointInPolygon(shapeLats, shapeLons, rMaxLat, rMaxLon) || !pointInPolygon(shapeLats, shapeLons, rMaxLat, rMinLon));\n  }\n\n","sourceOld":"  /**\n   * Computes whether a rectangle is within a polygon (shared boundaries not allowed) with more rigor than the\n   * {@link GeoRelationUtils#rectWithinPolyApprox} counterpart\n   */\n  public static boolean rectWithinPolyPrecise(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                       final double[] shapeX, final double[] shapeY, final double sMinX,\n                                       final double sMinY, final double sMaxX, final double sMaxY) {\n    // check if rectangle crosses poly (to handle concave/pacman polys), then check that all 4 corners\n    // are contained\n    return !(rectCrossesPolyPrecise(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY, sMinX, sMinY, sMaxX, sMaxY) ||\n        !pointInPolygon(shapeX, shapeY, rMinY, rMinX) || !pointInPolygon(shapeX, shapeY, rMinY, rMaxX) ||\n        !pointInPolygon(shapeX, shapeY, rMaxY, rMaxX) || !pointInPolygon(shapeX, shapeY, rMaxY, rMinX));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95ddcac9ac08381985af6eac8f8b77ba881d4ad8","date":1459477726,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectWithinPolyPrecise(double,double,double,double,double[],double[],double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Computes whether a rectangle is within a polygon (shared boundaries not allowed) with more rigor than the\n   * {@link GeoRelationUtils#rectWithinPolyApprox} counterpart\n   */\n  public static boolean rectWithinPolyPrecise(final double rMinLat, final double rMaxLat, final double rMinLon, final double rMaxLon,\n                                              final double[] shapeLats, final double[] shapeLons, final double sMinLat,\n                                              final double sMaxLat, final double sMinLon, final double sMaxLon) {\n    // check if rectangle crosses poly (to handle concave/pacman polys), then check that all 4 corners\n    // are contained\n    return !(rectCrossesPolyPrecise(rMinLat, rMaxLat, rMinLon, rMaxLon, shapeLats, shapeLons, sMinLat, sMaxLat, sMinLon, sMaxLon) ||\n        !pointInPolygon(shapeLats, shapeLons, rMinLat, rMinLon) || !pointInPolygon(shapeLats, shapeLons, rMinLat, rMaxLon) ||\n        !pointInPolygon(shapeLats, shapeLons, rMaxLat, rMaxLon) || !pointInPolygon(shapeLats, shapeLons, rMaxLat, rMinLon));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"af2638813028b254a88b418ebeafb541afb49653":["937923083e4d137932336fc80f3d78758ff698a6","112d77ac8d3e10a362516ad834c9a11d35c94234"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["af2638813028b254a88b418ebeafb541afb49653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"]},"commit2Childs":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af2638813028b254a88b418ebeafb541afb49653":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"937923083e4d137932336fc80f3d78758ff698a6":["af2638813028b254a88b418ebeafb541afb49653","1e6acbaae7af722f17204ceccf0f7db5753eccf3","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}