{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,ZkNodeProps).mjava","commits":[{"id":"3f9f2cd4fc995f484da092b8100a389072ed49ff","date":1386062964,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  private String createConfNode(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(OverseerCollectionProcessor.COLL_CONF);\n    if(configName == null){\n      // if there is only one conf, use that\n      List<String> configNames=null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkController.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n\n    }\n\n    if(configName!= null){\n      log.info(\"creating collections conf node {} \",ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll);\n      zkStateReader.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll,\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(ZkController.CONFIGNAME_PROP,configName)),true );\n\n    } else {\n      String msg = \"Could not obtain config name\";\n      log.warn(msg);\n    }\n    return configName;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  private String createConfNode(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(OverseerCollectionProcessor.COLL_CONF);\n    if(configName == null){\n      // if there is only one conf, use that\n      List<String> configNames=null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkController.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n\n    }\n\n    if(configName!= null){\n      log.info(\"creating collections conf node {} \",ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll);\n      zkStateReader.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll,\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(ZkController.CONFIGNAME_PROP,configName)),true );\n\n    } else {\n      String msg = \"Could not obtain config name\";\n      log.warn(msg);\n    }\n    return configName;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8497bb4f9de61b5520423bd9af88ea11a6e109e7","date":1393245090,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,ZkNodeProps,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,ZkNodeProps).mjava","sourceNew":"  private String createConfNode(String coll, ZkNodeProps message, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    String configName = message.getStr(OverseerCollectionProcessor.COLL_CONF);\n    if(configName == null){\n      // if there is only one conf, use that\n      List<String> configNames=null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkController.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n\n    }\n\n    if(configName!= null){\n      log.info(\"creating collections conf node {} \",ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll);\n      zkStateReader.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll,\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(ZkController.CONFIGNAME_PROP,configName)),true );\n\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n    return configName;\n\n  }\n\n","sourceOld":"  private String createConfNode(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(OverseerCollectionProcessor.COLL_CONF);\n    if(configName == null){\n      // if there is only one conf, use that\n      List<String> configNames=null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkController.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n\n    }\n\n    if(configName!= null){\n      log.info(\"creating collections conf node {} \",ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll);\n      zkStateReader.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll,\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(ZkController.CONFIGNAME_PROP,configName)),true );\n\n    } else {\n      String msg = \"Could not obtain config name\";\n      log.warn(msg);\n    }\n    return configName;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,ZkNodeProps,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,ZkNodeProps).mjava","sourceNew":"  private String createConfNode(String coll, ZkNodeProps message, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    String configName = message.getStr(OverseerCollectionProcessor.COLL_CONF);\n    if(configName == null){\n      // if there is only one conf, use that\n      List<String> configNames=null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkController.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n\n    }\n\n    if(configName!= null){\n      log.info(\"creating collections conf node {} \",ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll);\n      zkStateReader.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll,\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(ZkController.CONFIGNAME_PROP,configName)),true );\n\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n    return configName;\n\n  }\n\n","sourceOld":"  private String createConfNode(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(OverseerCollectionProcessor.COLL_CONF);\n    if(configName == null){\n      // if there is only one conf, use that\n      List<String> configNames=null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkController.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n\n    }\n\n    if(configName!= null){\n      log.info(\"creating collections conf node {} \",ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll);\n      zkStateReader.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll,\n          ZkStateReader.toJSON(ZkNodeProps.makeMap(ZkController.CONFIGNAME_PROP,configName)),true );\n\n    } else {\n      String msg = \"Could not obtain config name\";\n      log.warn(msg);\n    }\n    return configName;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f9f2cd4fc995f484da092b8100a389072ed49ff"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["3f9f2cd4fc995f484da092b8100a389072ed49ff"],"3f9f2cd4fc995f484da092b8100a389072ed49ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["3f9f2cd4fc995f484da092b8100a389072ed49ff","8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","3f9f2cd4fc995f484da092b8100a389072ed49ff"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f9f2cd4fc995f484da092b8100a389072ed49ff":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","8497bb4f9de61b5520423bd9af88ea11a6e109e7","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}