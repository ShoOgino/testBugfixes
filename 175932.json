{"path":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#next().mjava","commits":[{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#next().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns null when done */\n  public T next() {\n    // Loop until we find a non-deleted document\n    if (queue != null) {\n      T top = queue.top();\n      if (top == null) {\n        // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n        return null;\n      }\n\n      if (first == false) {\n        while (true) {\n          int docID = top.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            queue.pop();\n            top = queue.top();\n            break;\n          } else if (top.liveDocs != null && top.liveDocs.get(docID) == false) {\n            continue;\n          } else {\n            top.mappedDocID = top.docMap.get(docID);\n            top = queue.updateTop();\n            break;\n          }\n        }\n      }\n\n      first = false;\n\n      return top;\n\n    } else {\n      while (true) {\n        if (current == null) {\n          // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n          return null;\n        }\n        int docID = current.nextDoc();\n        if (docID == NO_MORE_DOCS) {\n          if (nextIndex == subs.size()) {\n            current = null;\n            return null;\n          }\n          current = subs.get(nextIndex);\n          nextIndex++;\n          continue;\n        } else if (current.liveDocs != null && current.liveDocs.get(docID) == false) {\n          // Document is deleted\n          continue;\n        }\n\n        current.mappedDocID = current.docMap.get(docID);\n        return current;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14","date":1462698019,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#next().mjava","sourceNew":"  /** Returns null when done */\n  public T next() {\n    // Loop until we find a non-deleted document\n    if (queue != null) {\n      T top = queue.top();\n      if (top == null) {\n        // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n        return null;\n      }\n\n      if (first == false) {\n        while (true) {\n          int docID = top.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            queue.pop();\n            top = queue.top();\n            break;\n          }\n          int mappedDocID = top.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            top.mappedDocID = mappedDocID;\n            top = queue.updateTop();\n            break;\n          }\n        }\n      }\n\n      first = false;\n\n      return top;\n\n    } else {\n      while (true) {\n        if (current == null) {\n          // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n          return null;\n        }\n        int docID = current.nextDoc();\n        if (docID == NO_MORE_DOCS) {\n          if (nextIndex == subs.size()) {\n            current = null;\n            return null;\n          }\n          current = subs.get(nextIndex);\n          nextIndex++;\n          continue;\n        }\n        int mappedDocID = current.docMap.get(docID);\n        if (mappedDocID == -1) {\n          // doc is deleted\n          continue;\n        }\n\n        current.mappedDocID = mappedDocID;\n        return current;\n      }\n    }\n  }\n\n","sourceOld":"  /** Returns null when done */\n  public T next() {\n    // Loop until we find a non-deleted document\n    if (queue != null) {\n      T top = queue.top();\n      if (top == null) {\n        // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n        return null;\n      }\n\n      if (first == false) {\n        while (true) {\n          int docID = top.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            queue.pop();\n            top = queue.top();\n            break;\n          } else if (top.liveDocs != null && top.liveDocs.get(docID) == false) {\n            continue;\n          } else {\n            top.mappedDocID = top.docMap.get(docID);\n            top = queue.updateTop();\n            break;\n          }\n        }\n      }\n\n      first = false;\n\n      return top;\n\n    } else {\n      while (true) {\n        if (current == null) {\n          // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n          return null;\n        }\n        int docID = current.nextDoc();\n        if (docID == NO_MORE_DOCS) {\n          if (nextIndex == subs.size()) {\n            current = null;\n            return null;\n          }\n          current = subs.get(nextIndex);\n          nextIndex++;\n          continue;\n        } else if (current.liveDocs != null && current.liveDocs.get(docID) == false) {\n          // Document is deleted\n          continue;\n        }\n\n        current.mappedDocID = current.docMap.get(docID);\n        return current;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#next().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns null when done */\n  public T next() {\n    // Loop until we find a non-deleted document\n    if (queue != null) {\n      T top = queue.top();\n      if (top == null) {\n        // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n        return null;\n      }\n\n      if (first == false) {\n        while (true) {\n          int docID = top.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            queue.pop();\n            top = queue.top();\n            break;\n          }\n          int mappedDocID = top.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            top.mappedDocID = mappedDocID;\n            top = queue.updateTop();\n            break;\n          }\n        }\n      }\n\n      first = false;\n\n      return top;\n\n    } else {\n      while (true) {\n        if (current == null) {\n          // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n          return null;\n        }\n        int docID = current.nextDoc();\n        if (docID == NO_MORE_DOCS) {\n          if (nextIndex == subs.size()) {\n            current = null;\n            return null;\n          }\n          current = subs.get(nextIndex);\n          nextIndex++;\n          continue;\n        }\n        int mappedDocID = current.docMap.get(docID);\n        if (mappedDocID == -1) {\n          // doc is deleted\n          continue;\n        }\n\n        current.mappedDocID = mappedDocID;\n        return current;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#next().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns null when done */\n  public T next() {\n    // Loop until we find a non-deleted document\n    if (queue != null) {\n      T top = queue.top();\n      if (top == null) {\n        // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n        return null;\n      }\n\n      if (first == false) {\n        while (true) {\n          int docID = top.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            queue.pop();\n            top = queue.top();\n            break;\n          }\n          int mappedDocID = top.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            top.mappedDocID = mappedDocID;\n            top = queue.updateTop();\n            break;\n          }\n        }\n      }\n\n      first = false;\n\n      return top;\n\n    } else {\n      while (true) {\n        if (current == null) {\n          // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n          return null;\n        }\n        int docID = current.nextDoc();\n        if (docID == NO_MORE_DOCS) {\n          if (nextIndex == subs.size()) {\n            current = null;\n            return null;\n          }\n          current = subs.get(nextIndex);\n          nextIndex++;\n          continue;\n        }\n        int mappedDocID = current.docMap.get(docID);\n        if (mappedDocID == -1) {\n          // doc is deleted\n          continue;\n        }\n\n        current.mappedDocID = mappedDocID;\n        return current;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#next().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns null when done */\n  public T next() {\n    // Loop until we find a non-deleted document\n    if (queue != null) {\n      T top = queue.top();\n      if (top == null) {\n        // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n        return null;\n      }\n\n      if (first == false) {\n        while (true) {\n          int docID = top.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            queue.pop();\n            top = queue.top();\n            break;\n          }\n          int mappedDocID = top.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            top.mappedDocID = mappedDocID;\n            top = queue.updateTop();\n            break;\n          }\n        }\n      }\n\n      first = false;\n\n      return top;\n\n    } else {\n      while (true) {\n        if (current == null) {\n          // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n          return null;\n        }\n        int docID = current.nextDoc();\n        if (docID == NO_MORE_DOCS) {\n          if (nextIndex == subs.size()) {\n            current = null;\n            return null;\n          }\n          current = subs.get(nextIndex);\n          nextIndex++;\n          continue;\n        }\n        int mappedDocID = current.docMap.get(docID);\n        if (mappedDocID == -1) {\n          // doc is deleted\n          continue;\n        }\n\n        current.mappedDocID = mappedDocID;\n        return current;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#next().mjava","sourceNew":"  /** Returns null when done */\n  public T next() throws IOException {\n    // Loop until we find a non-deleted document\n    if (queue != null) {\n      T top = queue.top();\n      if (top == null) {\n        // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n        return null;\n      }\n\n      if (first == false) {\n        while (true) {\n          int docID = top.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            queue.pop();\n            top = queue.top();\n            break;\n          }\n          int mappedDocID = top.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            top.mappedDocID = mappedDocID;\n            top = queue.updateTop();\n            break;\n          }\n        }\n      }\n\n      first = false;\n\n      return top;\n\n    } else {\n      while (true) {\n        if (current == null) {\n          // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n          return null;\n        }\n        int docID = current.nextDoc();\n        if (docID == NO_MORE_DOCS) {\n          if (nextIndex == subs.size()) {\n            current = null;\n            return null;\n          }\n          current = subs.get(nextIndex);\n          nextIndex++;\n          continue;\n        }\n        int mappedDocID = current.docMap.get(docID);\n        if (mappedDocID == -1) {\n          // doc is deleted\n          continue;\n        }\n\n        current.mappedDocID = mappedDocID;\n        return current;\n      }\n    }\n  }\n\n","sourceOld":"  /** Returns null when done */\n  public T next() {\n    // Loop until we find a non-deleted document\n    if (queue != null) {\n      T top = queue.top();\n      if (top == null) {\n        // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n        return null;\n      }\n\n      if (first == false) {\n        while (true) {\n          int docID = top.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            queue.pop();\n            top = queue.top();\n            break;\n          }\n          int mappedDocID = top.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            top.mappedDocID = mappedDocID;\n            top = queue.updateTop();\n            break;\n          }\n        }\n      }\n\n      first = false;\n\n      return top;\n\n    } else {\n      while (true) {\n        if (current == null) {\n          // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n          return null;\n        }\n        int docID = current.nextDoc();\n        if (docID == NO_MORE_DOCS) {\n          if (nextIndex == subs.size()) {\n            current = null;\n            return null;\n          }\n          current = subs.get(nextIndex);\n          nextIndex++;\n          continue;\n        }\n        int mappedDocID = current.docMap.get(docID);\n        if (mappedDocID == -1) {\n          // doc is deleted\n          continue;\n        }\n\n        current.mappedDocID = mappedDocID;\n        return current;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#next().mjava","sourceNew":"  /** Returns null when done */\n  public T next() throws IOException {\n    // Loop until we find a non-deleted document\n    if (queue != null) {\n      T top = queue.top();\n      if (top == null) {\n        // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n        return null;\n      }\n\n      if (first == false) {\n        while (true) {\n          int docID = top.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            queue.pop();\n            top = queue.top();\n            break;\n          }\n          int mappedDocID = top.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            top.mappedDocID = mappedDocID;\n            top = queue.updateTop();\n            break;\n          }\n        }\n      }\n\n      first = false;\n\n      return top;\n\n    } else {\n      while (true) {\n        if (current == null) {\n          // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n          return null;\n        }\n        int docID = current.nextDoc();\n        if (docID == NO_MORE_DOCS) {\n          if (nextIndex == subs.size()) {\n            current = null;\n            return null;\n          }\n          current = subs.get(nextIndex);\n          nextIndex++;\n          continue;\n        }\n        int mappedDocID = current.docMap.get(docID);\n        if (mappedDocID == -1) {\n          // doc is deleted\n          continue;\n        }\n\n        current.mappedDocID = mappedDocID;\n        return current;\n      }\n    }\n  }\n\n","sourceOld":"  /** Returns null when done */\n  public T next() {\n    // Loop until we find a non-deleted document\n    if (queue != null) {\n      T top = queue.top();\n      if (top == null) {\n        // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n        return null;\n      }\n\n      if (first == false) {\n        while (true) {\n          int docID = top.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            queue.pop();\n            top = queue.top();\n            break;\n          }\n          int mappedDocID = top.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            top.mappedDocID = mappedDocID;\n            top = queue.updateTop();\n            break;\n          }\n        }\n      }\n\n      first = false;\n\n      return top;\n\n    } else {\n      while (true) {\n        if (current == null) {\n          // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n          return null;\n        }\n        int docID = current.nextDoc();\n        if (docID == NO_MORE_DOCS) {\n          if (nextIndex == subs.size()) {\n            current = null;\n            return null;\n          }\n          current = subs.get(nextIndex);\n          nextIndex++;\n          continue;\n        }\n        int mappedDocID = current.docMap.get(docID);\n        if (mappedDocID == -1) {\n          // doc is deleted\n          continue;\n        }\n\n        current.mappedDocID = mappedDocID;\n        return current;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#next().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns null when done */\n  public T next() throws IOException {\n    // Loop until we find a non-deleted document\n    if (queue != null) {\n      T top = queue.top();\n      if (top == null) {\n        // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n        return null;\n      }\n\n      if (first == false) {\n        while (true) {\n          int docID = top.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            queue.pop();\n            top = queue.top();\n            break;\n          }\n          int mappedDocID = top.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            top.mappedDocID = mappedDocID;\n            top = queue.updateTop();\n            break;\n          }\n        }\n      }\n\n      first = false;\n\n      return top;\n\n    } else {\n      while (true) {\n        if (current == null) {\n          // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n          return null;\n        }\n        int docID = current.nextDoc();\n        if (docID == NO_MORE_DOCS) {\n          if (nextIndex == subs.size()) {\n            current = null;\n            return null;\n          }\n          current = subs.get(nextIndex);\n          nextIndex++;\n          continue;\n        }\n        int mappedDocID = current.docMap.get(docID);\n        if (mappedDocID == -1) {\n          // doc is deleted\n          continue;\n        }\n\n        current.mappedDocID = mappedDocID;\n        return current;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d85b6e22926e7564c040d2a864f4887f6c59fa92","date":1482349496,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#next().mjava","sourceNew":"  /** Returns null when done */\n  public abstract T next() throws IOException;\n\n","sourceOld":"  /** Returns null when done */\n  public T next() throws IOException {\n    // Loop until we find a non-deleted document\n    if (queue != null) {\n      T top = queue.top();\n      if (top == null) {\n        // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n        return null;\n      }\n\n      if (first == false) {\n        while (true) {\n          int docID = top.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            queue.pop();\n            top = queue.top();\n            break;\n          }\n          int mappedDocID = top.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            top.mappedDocID = mappedDocID;\n            top = queue.updateTop();\n            break;\n          }\n        }\n      }\n\n      first = false;\n\n      return top;\n\n    } else {\n      while (true) {\n        if (current == null) {\n          // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n          return null;\n        }\n        int docID = current.nextDoc();\n        if (docID == NO_MORE_DOCS) {\n          if (nextIndex == subs.size()) {\n            current = null;\n            return null;\n          }\n          current = subs.get(nextIndex);\n          nextIndex++;\n          continue;\n        }\n        int mappedDocID = current.docMap.get(docID);\n        if (mappedDocID == -1) {\n          // doc is deleted\n          continue;\n        }\n\n        current.mappedDocID = mappedDocID;\n        return current;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef448bb356177500448b3db5e8a3c771c1055869","date":1482433216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#next().mjava","sourceNew":"  /** Returns null when done.\n   *  <b>NOTE:</b> after the iterator has exhausted you should not call this\n   *  method, as it may result in unpredicted behavior. */\n  public abstract T next() throws IOException;\n\n","sourceOld":"  /** Returns null when done */\n  public abstract T next() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#next().mjava","sourceNew":"  /** Returns null when done.\n   *  <b>NOTE:</b> after the iterator has exhausted you should not call this\n   *  method, as it may result in unpredicted behavior. */\n  public abstract T next() throws IOException;\n\n","sourceOld":"  /** Returns null when done */\n  public T next() throws IOException {\n    // Loop until we find a non-deleted document\n    if (queue != null) {\n      T top = queue.top();\n      if (top == null) {\n        // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n        return null;\n      }\n\n      if (first == false) {\n        while (true) {\n          int docID = top.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            queue.pop();\n            top = queue.top();\n            break;\n          }\n          int mappedDocID = top.docMap.get(docID);\n          if (mappedDocID == -1) {\n            // doc was deleted\n            continue;\n          } else {\n            top.mappedDocID = mappedDocID;\n            top = queue.updateTop();\n            break;\n          }\n        }\n      }\n\n      first = false;\n\n      return top;\n\n    } else {\n      while (true) {\n        if (current == null) {\n          // NOTE: it's annoying that caller is allowed to call us again even after we returned null before\n          return null;\n        }\n        int docID = current.nextDoc();\n        if (docID == NO_MORE_DOCS) {\n          if (nextIndex == subs.size()) {\n            current = null;\n            return null;\n          }\n          current = subs.get(nextIndex);\n          nextIndex++;\n          continue;\n        }\n        int mappedDocID = current.docMap.get(docID);\n        if (mappedDocID == -1) {\n          // doc is deleted\n          continue;\n        }\n\n        current.mappedDocID = mappedDocID;\n        return current;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d85b6e22926e7564c040d2a864f4887f6c59fa92":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ef448bb356177500448b3db5e8a3c771c1055869"],"ef448bb356177500448b3db5e8a3c771c1055869":["d85b6e22926e7564c040d2a864f4887f6c59fa92"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6d8200beeffd3fa5155855f4cb8a8a5e38aeff14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ef448bb356177500448b3db5e8a3c771c1055869"]},"commit2Childs":{"d85b6e22926e7564c040d2a864f4887f6c59fa92":["ef448bb356177500448b3db5e8a3c771c1055869"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"ef448bb356177500448b3db5e8a3c771c1055869":["f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["6d8200beeffd3fa5155855f4cb8a8a5e38aeff14"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d85b6e22926e7564c040d2a864f4887f6c59fa92","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}