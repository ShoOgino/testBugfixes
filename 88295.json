{"path":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","sourceNew":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters578LinesFile(),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    TestPerfTasksLogic.execBenchmark(algLines);\n  }\n\n","sourceOld":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters578LinesFile(),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    TestPerfTasksLogic.execBenchmark(algLines);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aedcfb5ebceafe4a0285436fa86269ed6c926442","date":1271441603,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","sourceNew":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getWorkDirResourcePath(\"reuters.578.lines.txt.bz2\"),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    execBenchmark(algLines);\n  }\n\n","sourceOld":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters578LinesFile(),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    TestPerfTasksLogic.execBenchmark(algLines);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683d3f90dda2bbb999c3ce855706d74563a53680","date":1285654576,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","sourceNew":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"analyzer=org.apache.lucene.analysis.standard.ClassicAnalyzer\",\n        \"docs.file=\" + getWorkDirResourcePath(\"reuters.578.lines.txt.bz2\"),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    execBenchmark(algLines);\n  }\n\n","sourceOld":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getWorkDirResourcePath(\"reuters.578.lines.txt.bz2\"),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    execBenchmark(algLines);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","sourceNew":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"analyzer=org.apache.lucene.analysis.standard.ClassicAnalyzer\",\n        \"docs.file=\" + getWorkDirResourcePath(\"reuters.578.lines.txt.bz2\"),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    execBenchmark(algLines);\n  }\n\n","sourceOld":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getWorkDirResourcePath(\"reuters.578.lines.txt.bz2\"),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    execBenchmark(algLines);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","sourceNew":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"analyzer=org.apache.lucene.analysis.standard.ClassicAnalyzer\",\n        \"docs.file=\" + getWorkDirResourcePath(\"reuters.578.lines.txt.bz2\"),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    execBenchmark(algLines);\n  }\n\n","sourceOld":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"analyzer=org.apache.lucene.analysis.standard.ClassicAnalyzer\",\n        \"docs.file=\" + getWorkDirResourcePath(\"reuters.578.lines.txt.bz2\"),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    execBenchmark(algLines);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","sourceNew":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"analyzer=org.apache.lucene.analysis.standard.ClassicAnalyzer\",\n        \"docs.file=\" + getWorkDirResourcePath(\"reuters.578.lines.txt.bz2\"),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    execBenchmark(algLines);\n  }\n\n","sourceOld":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"analyzer=org.apache.lucene.analysis.standard.ClassicAnalyzer\",\n        \"docs.file=\" + getWorkDirResourcePath(\"reuters.578.lines.txt.bz2\"),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    execBenchmark(algLines);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#createReutersIndex().mjava","sourceNew":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"analyzer=org.apache.lucene.analysis.standard.ClassicAnalyzer\",\n        \"docs.file=\" + getWorkDirResourcePath(\"reuters.578.lines.txt.bz2\"),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    execBenchmark(algLines);\n  }\n\n","sourceOld":"  // use benchmark logic to create the mini Reuters index\n  private void createReutersIndex() throws Exception {\n    // 1. alg definition\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"analyzer=org.apache.lucene.analysis.standard.ClassicAnalyzer\",\n        \"docs.file=\" + getWorkDirResourcePath(\"reuters.578.lines.txt.bz2\"),\n        \"content.source.log.step=2500\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=FSDirectory\",\n        \"doc.stored=true\",\n        \"doc.tokenized=true\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : *\",\n        \"CloseIndex\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    execBenchmark(algLines);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["683d3f90dda2bbb999c3ce855706d74563a53680","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["683d3f90dda2bbb999c3ce855706d74563a53680"],"683d3f90dda2bbb999c3ce855706d74563a53680":["aedcfb5ebceafe4a0285436fa86269ed6c926442"],"aedcfb5ebceafe4a0285436fa86269ed6c926442":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["aedcfb5ebceafe4a0285436fa86269ed6c926442","683d3f90dda2bbb999c3ce855706d74563a53680"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"683d3f90dda2bbb999c3ce855706d74563a53680":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aedcfb5ebceafe4a0285436fa86269ed6c926442":["683d3f90dda2bbb999c3ce855706d74563a53680","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["aedcfb5ebceafe4a0285436fa86269ed6c926442"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}