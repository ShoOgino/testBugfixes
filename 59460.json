{"path":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map[String,Int],TermFreqVector).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map[String,Int],TermFreqVector).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map[String,Int],TermFreqVector).mjava","sourceNew":"\t/**\n\t * Adds terms and frequencies found in vector into the Map termFreqMap\n\t * @param termFreqMap a Map of terms and their frequencies\n\t * @param vector List of terms and their frequencies for a doc/field\n\t */\n\tprivate void addTermFrequencies(Map<String,Int> termFreqMap, TermFreqVector vector)\n\t{\n\t\tString[] terms = vector.getTerms();\n\t\tint freqs[]=vector.getTermFrequencies();\n\t\tfor (int j = 0; j < terms.length; j++) {\n\t\t    String term = terms[j];\n\t\t\n\t\t\tif(isNoiseWord(term)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t    // increment frequency\n\t\t    Int cnt = termFreqMap.get(term);\n\t\t    if (cnt == null) {\n\t\t    \tcnt=new Int();\n\t\t\t\ttermFreqMap.put(term, cnt);\n\t\t\t\tcnt.x=freqs[j];\t\t\t\t\n\t\t    }\n\t\t    else {\n\t\t        cnt.x+=freqs[j];\n\t\t    }\n\t\t}\n\t}\n\n","sourceOld":"\t/**\n\t * Adds terms and frequencies found in vector into the Map termFreqMap\n\t * @param termFreqMap a Map of terms and their frequencies\n\t * @param vector List of terms and their frequencies for a doc/field\n\t */\n\tprivate void addTermFrequencies(Map<String,Int> termFreqMap, TermFreqVector vector)\n\t{\n\t\tString[] terms = vector.getTerms();\n\t\tint freqs[]=vector.getTermFrequencies();\n\t\tfor (int j = 0; j < terms.length; j++) {\n\t\t    String term = terms[j];\n\t\t\n\t\t\tif(isNoiseWord(term)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t    // increment frequency\n\t\t    Int cnt = termFreqMap.get(term);\n\t\t    if (cnt == null) {\n\t\t    \tcnt=new Int();\n\t\t\t\ttermFreqMap.put(term, cnt);\n\t\t\t\tcnt.x=freqs[j];\t\t\t\t\n\t\t    }\n\t\t    else {\n\t\t        cnt.x+=freqs[j];\n\t\t    }\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map[String,Int],TermFreqVector).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map[String,Int],TermFreqVector).mjava","sourceNew":"\t/**\n\t * Adds terms and frequencies found in vector into the Map termFreqMap\n\t * @param termFreqMap a Map of terms and their frequencies\n\t * @param vector List of terms and their frequencies for a doc/field\n\t */\n\tprivate void addTermFrequencies(Map<String,Int> termFreqMap, TermFreqVector vector)\n\t{\n\t\tBytesRef[] terms = vector.getTerms();\n\t\tint freqs[]=vector.getTermFrequencies();\n\t\tfor (int j = 0; j < terms.length; j++) {\n\t\t    String term = terms[j].utf8ToString();\n\t\t\n\t\t\tif(isNoiseWord(term)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t    // increment frequency\n\t\t    Int cnt = termFreqMap.get(term);\n\t\t    if (cnt == null) {\n\t\t    \tcnt=new Int();\n\t\t\t\ttermFreqMap.put(term, cnt);\n\t\t\t\tcnt.x=freqs[j];\t\t\t\t\n\t\t    }\n\t\t    else {\n\t\t        cnt.x+=freqs[j];\n\t\t    }\n\t\t}\n\t}\n\n","sourceOld":"\t/**\n\t * Adds terms and frequencies found in vector into the Map termFreqMap\n\t * @param termFreqMap a Map of terms and their frequencies\n\t * @param vector List of terms and their frequencies for a doc/field\n\t */\n\tprivate void addTermFrequencies(Map<String,Int> termFreqMap, TermFreqVector vector)\n\t{\n\t\tString[] terms = vector.getTerms();\n\t\tint freqs[]=vector.getTermFrequencies();\n\t\tfor (int j = 0; j < terms.length; j++) {\n\t\t    String term = terms[j];\n\t\t\n\t\t\tif(isNoiseWord(term)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t    // increment frequency\n\t\t    Int cnt = termFreqMap.get(term);\n\t\t    if (cnt == null) {\n\t\t    \tcnt=new Int();\n\t\t\t\ttermFreqMap.put(term, cnt);\n\t\t\t\tcnt.x=freqs[j];\t\t\t\t\n\t\t    }\n\t\t    else {\n\t\t        cnt.x+=freqs[j];\n\t\t    }\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map[String,Int],TermFreqVector).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map[String,Int],TermFreqVector).mjava","sourceNew":"\t/**\n\t * Adds terms and frequencies found in vector into the Map termFreqMap\n\t * @param termFreqMap a Map of terms and their frequencies\n\t * @param vector List of terms and their frequencies for a doc/field\n\t */\n\tprivate void addTermFrequencies(Map<String,Int> termFreqMap, TermFreqVector vector)\n\t{\n\t\tBytesRef[] terms = vector.getTerms();\n\t\tint freqs[]=vector.getTermFrequencies();\n\t\tfor (int j = 0; j < terms.length; j++) {\n\t\t    String term = terms[j].utf8ToString();\n\t\t\n\t\t\tif(isNoiseWord(term)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t    // increment frequency\n\t\t    Int cnt = termFreqMap.get(term);\n\t\t    if (cnt == null) {\n\t\t    \tcnt=new Int();\n\t\t\t\ttermFreqMap.put(term, cnt);\n\t\t\t\tcnt.x=freqs[j];\t\t\t\t\n\t\t    }\n\t\t    else {\n\t\t        cnt.x+=freqs[j];\n\t\t    }\n\t\t}\n\t}\n\n","sourceOld":"\t/**\n\t * Adds terms and frequencies found in vector into the Map termFreqMap\n\t * @param termFreqMap a Map of terms and their frequencies\n\t * @param vector List of terms and their frequencies for a doc/field\n\t */\n\tprivate void addTermFrequencies(Map<String,Int> termFreqMap, TermFreqVector vector)\n\t{\n\t\tString[] terms = vector.getTerms();\n\t\tint freqs[]=vector.getTermFrequencies();\n\t\tfor (int j = 0; j < terms.length; j++) {\n\t\t    String term = terms[j];\n\t\t\n\t\t\tif(isNoiseWord(term)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t    // increment frequency\n\t\t    Int cnt = termFreqMap.get(term);\n\t\t    if (cnt == null) {\n\t\t    \tcnt=new Int();\n\t\t\t\ttermFreqMap.put(term, cnt);\n\t\t\t\tcnt.x=freqs[j];\t\t\t\t\n\t\t    }\n\t\t    else {\n\t\t        cnt.x+=freqs[j];\n\t\t    }\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b3a24d5d9b47345473ff564f5cc127a7b526b4","date":1306277076,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map[String,Int],TermFreqVector).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map[String,Int],TermFreqVector).mjava","sourceNew":"\t/**\n\t * Adds terms and frequencies found in vector into the Map termFreqMap\n\t * @param termFreqMap a Map of terms and their frequencies\n\t * @param vector List of terms and their frequencies for a doc/field\n\t */\n\tprivate void addTermFrequencies(Map<String,Int> termFreqMap, TermFreqVector vector)\n\t{\n\t\tBytesRef[] terms = vector.getTerms();\n\t\tint freqs[]=vector.getTermFrequencies();\n\t\tfinal CharsRef spare = new CharsRef();\n\t\tfor (int j = 0; j < terms.length; j++) {\n\t\t  final String term = terms[j].utf8ToChars(spare).toString();\n\t\t\n\t\t\tif(isNoiseWord(term)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t    // increment frequency\n\t\t    Int cnt = termFreqMap.get(term);\n\t\t    if (cnt == null) {\n\t\t    \tcnt=new Int();\n\t\t\t\ttermFreqMap.put(term, cnt);\n\t\t\t\tcnt.x=freqs[j];\t\t\t\t\n\t\t    }\n\t\t    else {\n\t\t        cnt.x+=freqs[j];\n\t\t    }\n\t\t}\n\t}\n\n","sourceOld":"\t/**\n\t * Adds terms and frequencies found in vector into the Map termFreqMap\n\t * @param termFreqMap a Map of terms and their frequencies\n\t * @param vector List of terms and their frequencies for a doc/field\n\t */\n\tprivate void addTermFrequencies(Map<String,Int> termFreqMap, TermFreqVector vector)\n\t{\n\t\tBytesRef[] terms = vector.getTerms();\n\t\tint freqs[]=vector.getTermFrequencies();\n\t\tfor (int j = 0; j < terms.length; j++) {\n\t\t    String term = terms[j].utf8ToString();\n\t\t\n\t\t\tif(isNoiseWord(term)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t    // increment frequency\n\t\t    Int cnt = termFreqMap.get(term);\n\t\t    if (cnt == null) {\n\t\t    \tcnt=new Int();\n\t\t\t\ttermFreqMap.put(term, cnt);\n\t\t\t\tcnt.x=freqs[j];\t\t\t\t\n\t\t    }\n\t\t    else {\n\t\t        cnt.x+=freqs[j];\n\t\t    }\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map[String,Int],TermFreqVector).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map[String,Int],TermFreqVector).mjava","sourceNew":"\t/**\n\t * Adds terms and frequencies found in vector into the Map termFreqMap\n\t * @param termFreqMap a Map of terms and their frequencies\n\t * @param vector List of terms and their frequencies for a doc/field\n\t */\n\tprivate void addTermFrequencies(Map<String,Int> termFreqMap, TermFreqVector vector)\n\t{\n\t\tBytesRef[] terms = vector.getTerms();\n\t\tint freqs[]=vector.getTermFrequencies();\n\t\tfinal CharsRef spare = new CharsRef();\n\t\tfor (int j = 0; j < terms.length; j++) {\n\t\t  final String term = terms[j].utf8ToChars(spare).toString();\n\t\t\n\t\t\tif(isNoiseWord(term)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t    // increment frequency\n\t\t    Int cnt = termFreqMap.get(term);\n\t\t    if (cnt == null) {\n\t\t    \tcnt=new Int();\n\t\t\t\ttermFreqMap.put(term, cnt);\n\t\t\t\tcnt.x=freqs[j];\t\t\t\t\n\t\t    }\n\t\t    else {\n\t\t        cnt.x+=freqs[j];\n\t\t    }\n\t\t}\n\t}\n\n","sourceOld":"\t/**\n\t * Adds terms and frequencies found in vector into the Map termFreqMap\n\t * @param termFreqMap a Map of terms and their frequencies\n\t * @param vector List of terms and their frequencies for a doc/field\n\t */\n\tprivate void addTermFrequencies(Map<String,Int> termFreqMap, TermFreqVector vector)\n\t{\n\t\tBytesRef[] terms = vector.getTerms();\n\t\tint freqs[]=vector.getTermFrequencies();\n\t\tfor (int j = 0; j < terms.length; j++) {\n\t\t    String term = terms[j].utf8ToString();\n\t\t\n\t\t\tif(isNoiseWord(term)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t    // increment frequency\n\t\t    Int cnt = termFreqMap.get(term);\n\t\t    if (cnt == null) {\n\t\t    \tcnt=new Int();\n\t\t\t\ttermFreqMap.put(term, cnt);\n\t\t\t\tcnt.x=freqs[j];\t\t\t\t\n\t\t    }\n\t\t    else {\n\t\t        cnt.x+=freqs[j];\n\t\t    }\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map[String,Int],TermFreqVector).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map[String,Int],TermFreqVector).mjava","sourceNew":"\t/**\n\t * Adds terms and frequencies found in vector into the Map termFreqMap\n\t * @param termFreqMap a Map of terms and their frequencies\n\t * @param vector List of terms and their frequencies for a doc/field\n\t */\n\tprivate void addTermFrequencies(Map<String,Int> termFreqMap, TermFreqVector vector)\n\t{\n\t\tBytesRef[] terms = vector.getTerms();\n\t\tint freqs[]=vector.getTermFrequencies();\n\t\tfinal CharsRef spare = new CharsRef();\n\t\tfor (int j = 0; j < terms.length; j++) {\n\t\t  final String term = terms[j].utf8ToChars(spare).toString();\n\t\t\n\t\t\tif(isNoiseWord(term)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t    // increment frequency\n\t\t    Int cnt = termFreqMap.get(term);\n\t\t    if (cnt == null) {\n\t\t    \tcnt=new Int();\n\t\t\t\ttermFreqMap.put(term, cnt);\n\t\t\t\tcnt.x=freqs[j];\t\t\t\t\n\t\t    }\n\t\t    else {\n\t\t        cnt.x+=freqs[j];\n\t\t    }\n\t\t}\n\t}\n\n","sourceOld":"\t/**\n\t * Adds terms and frequencies found in vector into the Map termFreqMap\n\t * @param termFreqMap a Map of terms and their frequencies\n\t * @param vector List of terms and their frequencies for a doc/field\n\t */\n\tprivate void addTermFrequencies(Map<String,Int> termFreqMap, TermFreqVector vector)\n\t{\n\t\tBytesRef[] terms = vector.getTerms();\n\t\tint freqs[]=vector.getTermFrequencies();\n\t\tfor (int j = 0; j < terms.length; j++) {\n\t\t    String term = terms[j].utf8ToString();\n\t\t\n\t\t\tif(isNoiseWord(term)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t    // increment frequency\n\t\t    Int cnt = termFreqMap.get(term);\n\t\t    if (cnt == null) {\n\t\t    \tcnt=new Int();\n\t\t\t\ttermFreqMap.put(term, cnt);\n\t\t\t\tcnt.x=freqs[j];\t\t\t\t\n\t\t    }\n\t\t    else {\n\t\t        cnt.x+=freqs[j];\n\t\t    }\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e141595402370bee958745de8b1c9de1fa182581","date":1310547892,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map[String,Int],TermFreqVector).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map[String,Int],TermFreqVector).mjava","sourceNew":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param termFreqMap a Map of terms and their frequencies\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Int> termFreqMap, TermFreqVector vector) {\n    BytesRef[] terms = vector.getTerms();\n    int freqs[] = vector.getTermFrequencies();\n    final CharsRef spare = new CharsRef();\n    for (int j = 0; j < terms.length; j++) {\n      final String term = terms[j].utf8ToChars(spare).toString();\n\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freqs[j];\n      } else {\n        cnt.x += freqs[j];\n      }\n    }\n  }\n\n","sourceOld":"\t/**\n\t * Adds terms and frequencies found in vector into the Map termFreqMap\n\t * @param termFreqMap a Map of terms and their frequencies\n\t * @param vector List of terms and their frequencies for a doc/field\n\t */\n\tprivate void addTermFrequencies(Map<String,Int> termFreqMap, TermFreqVector vector)\n\t{\n\t\tBytesRef[] terms = vector.getTerms();\n\t\tint freqs[]=vector.getTermFrequencies();\n\t\tfinal CharsRef spare = new CharsRef();\n\t\tfor (int j = 0; j < terms.length; j++) {\n\t\t  final String term = terms[j].utf8ToChars(spare).toString();\n\t\t\n\t\t\tif(isNoiseWord(term)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t    // increment frequency\n\t\t    Int cnt = termFreqMap.get(term);\n\t\t    if (cnt == null) {\n\t\t    \tcnt=new Int();\n\t\t\t\ttermFreqMap.put(term, cnt);\n\t\t\t\tcnt.x=freqs[j];\t\t\t\t\n\t\t    }\n\t\t    else {\n\t\t        cnt.x+=freqs[j];\n\t\t    }\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1","date":1310609231,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Int],TermFreqVector).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map[String,Int],TermFreqVector).mjava","sourceNew":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param termFreqMap a Map of terms and their frequencies\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Int> termFreqMap, TermFreqVector vector) {\n    BytesRef[] terms = vector.getTerms();\n    int freqs[] = vector.getTermFrequencies();\n    final CharsRef spare = new CharsRef();\n    for (int j = 0; j < terms.length; j++) {\n      final String term = terms[j].utf8ToChars(spare).toString();\n\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freqs[j];\n      } else {\n        cnt.x += freqs[j];\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param termFreqMap a Map of terms and their frequencies\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Int> termFreqMap, TermFreqVector vector) {\n    BytesRef[] terms = vector.getTerms();\n    int freqs[] = vector.getTermFrequencies();\n    final CharsRef spare = new CharsRef();\n    for (int j = 0; j < terms.length; j++) {\n      final String term = terms[j].utf8ToChars(spare).toString();\n\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freqs[j];\n      } else {\n        cnt.x += freqs[j];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1":["e141595402370bee958745de8b1c9de1fa182581"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"e141595402370bee958745de8b1c9de1fa182581":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","5f4e87790277826a2aea119328600dfb07761f32","a1b3a24d5d9b47345473ff564f5cc127a7b526b4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f4e87790277826a2aea119328600dfb07761f32":[],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","e141595402370bee958745de8b1c9de1fa182581","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"e141595402370bee958745de8b1c9de1fa182581":["b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}