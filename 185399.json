{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","commits":[{"id":"7811b56f2d9e37eb839450d346535c87f1f504c2","date":1502459873,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","pathOld":"/dev/null","sourceNew":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(solrClient);\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = provider.getNodeValues(collection .getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","sourceNew":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(new ZkDistributedQueueFactory(cluster.getZkClient()), solrClient);\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = provider.getNodeValues(collection .getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","sourceOld":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(solrClient);\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = provider.getNodeValues(collection .getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","sourceNew":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(solrClient);\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = provider.getNodeValues(collection .getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","sourceOld":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(new ZkDistributedQueueFactory(cluster.getZkClient()), solrClient);\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = provider.getNodeValues(collection .getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","pathOld":"/dev/null","sourceNew":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(solrClient);\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = provider.getNodeValues(collection .getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","pathOld":"/dev/null","sourceNew":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(solrClient);\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = provider.getNodeValues(collection .getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","sourceNew":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    DistributedQueueFactory queueFactory = new ZkDistributedQueueFactory(cluster.getZkClient());\n    SolrCloudManager provider = new SolrClientCloudManager(queueFactory, solrClient);\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = provider.getNodeStateProvider().getNodeValues(collection .getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","sourceOld":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    SolrClientDataProvider provider = new SolrClientDataProvider(solrClient);\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = provider.getNodeValues(collection .getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744465f732e2b3edb5c265322043558ae158c076","date":1515499090,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","sourceNew":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    DistributedQueueFactory queueFactory = new ZkDistributedQueueFactory(cluster.getZkClient());\n    SolrCloudManager provider = new SolrClientCloudManager(queueFactory, solrClient);\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = provider.getNodeStateProvider().getNodeValues(collection .getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n    val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), Collections.singleton(\"diskType\"));\n    Set<String> diskTypes = ImmutableSet.of(\"rotational\", \"ssd\");\n    assertTrue(diskTypes.contains(val.get(\"diskType\")));\n  }\n\n","sourceOld":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    DistributedQueueFactory queueFactory = new ZkDistributedQueueFactory(cluster.getZkClient());\n    SolrCloudManager provider = new SolrClientCloudManager(queueFactory, solrClient);\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = provider.getNodeStateProvider().getNodeValues(collection .getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","sourceNew":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    DistributedQueueFactory queueFactory = new ZkDistributedQueueFactory(cluster.getZkClient());\n    SolrCloudManager provider = new SolrClientCloudManager(queueFactory, solrClient);\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = provider.getNodeStateProvider().getNodeValues(collection .getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n    val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), Collections.singleton(\"diskType\"));\n    Set<String> diskTypes = ImmutableSet.of(\"rotational\", \"ssd\");\n    assertTrue(diskTypes.contains(val.get(\"diskType\")));\n  }\n\n","sourceOld":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    DistributedQueueFactory queueFactory = new ZkDistributedQueueFactory(cluster.getZkClient());\n    SolrCloudManager provider = new SolrClientCloudManager(queueFactory, solrClient);\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = provider.getNodeStateProvider().getNodeValues(collection .getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","sourceNew":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    DistributedQueueFactory queueFactory = new ZkDistributedQueueFactory(cluster.getZkClient());\n    try (SolrCloudManager provider = new SolrClientCloudManager(queueFactory, solrClient)) {\n      List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n          \"metrics:solr.jvm:buffers.direct.Count\");\n      Map<String, Object> val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n      for (String tag : tags) {\n        assertNotNull(\"missing : \" + tag, val.get(tag));\n      }\n      val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), Collections.singleton(\"diskType\"));\n\n      Set<String> diskTypes = ImmutableSet.of(\"rotational\", \"ssd\");\n      assertTrue(diskTypes.contains(val.get(\"diskType\")));\n    }\n  }\n\n","sourceOld":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    DistributedQueueFactory queueFactory = new ZkDistributedQueueFactory(cluster.getZkClient());\n    SolrCloudManager provider = new SolrClientCloudManager(queueFactory, solrClient);\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = provider.getNodeStateProvider().getNodeValues(collection .getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n    val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), Collections.singleton(\"diskType\"));\n    Set<String> diskTypes = ImmutableSet.of(\"rotational\", \"ssd\");\n    assertTrue(diskTypes.contains(val.get(\"diskType\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","sourceNew":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    DistributedQueueFactory queueFactory = new ZkDistributedQueueFactory(cluster.getZkClient());\n    try (SolrCloudManager provider = new SolrClientCloudManager(queueFactory, solrClient)) {\n      List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n          \"metrics:solr.jvm:buffers.direct.Count\");\n      Map<String, Object> val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n      for (String tag : tags) {\n        assertNotNull(\"missing : \" + tag, val.get(tag));\n      }\n      val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), Collections.singleton(\"diskType\"));\n\n      Set<String> diskTypes = ImmutableSet.of(\"rotational\", \"ssd\");\n      assertTrue(diskTypes.contains(val.get(\"diskType\")));\n    }\n  }\n\n","sourceOld":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    DistributedQueueFactory queueFactory = new ZkDistributedQueueFactory(cluster.getZkClient());\n    try (SolrCloudManager provider = new SolrClientCloudManager(queueFactory, solrClient)) {\n      List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n          \"metrics:solr.jvm:buffers.direct.Count\");\n      Map<String, Object> val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n      for (String tag : tags) {\n        assertNotNull(\"missing : \" + tag, val.get(tag));\n      }\n      val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), Collections.singleton(\"diskType\"));\n\n      Set<String> diskTypes = ImmutableSet.of(\"rotational\", \"ssd\");\n      assertTrue(diskTypes.contains(val.get(\"diskType\")));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6ae69e36b15b227a219d4e334ccf5f58fb8affd","date":1562804219,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","sourceNew":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    final String collectionName = \"metrics_tags\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collectionName, 1, 1);\n    DocCollection collection = getCollectionState(collectionName);\n    DistributedQueueFactory queueFactory = new ZkDistributedQueueFactory(cluster.getZkClient());\n    try (SolrCloudManager provider = new SolrClientCloudManager(queueFactory, solrClient)) {\n      List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n          \"metrics:solr.jvm:buffers.direct.Count\");\n      Map<String, Object> val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n      for (String tag : tags) {\n        assertNotNull(\"missing : \" + tag, val.get(tag));\n      }\n      val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), Collections.singleton(\"diskType\"));\n\n      Set<String> diskTypes = ImmutableSet.of(\"rotational\", \"ssd\");\n      assertTrue(diskTypes.contains(val.get(\"diskType\")));\n    }\n  }\n\n","sourceOld":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    DistributedQueueFactory queueFactory = new ZkDistributedQueueFactory(cluster.getZkClient());\n    try (SolrCloudManager provider = new SolrClientCloudManager(queueFactory, solrClient)) {\n      List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n          \"metrics:solr.jvm:buffers.direct.Count\");\n      Map<String, Object> val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n      for (String tag : tags) {\n        assertNotNull(\"missing : \" + tag, val.get(tag));\n      }\n      val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), Collections.singleton(\"diskType\"));\n\n      Set<String> diskTypes = ImmutableSet.of(\"rotational\", \"ssd\");\n      assertTrue(diskTypes.contains(val.get(\"diskType\")));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","sourceNew":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    final String collectionName = \"metrics_tags\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collectionName, 1, 1);\n    DocCollection collection = getCollectionState(collectionName);\n    DistributedQueueFactory queueFactory = new ZkDistributedQueueFactory(cluster.getZkClient());\n    try (SolrCloudManager provider = new SolrClientCloudManager(queueFactory, solrClient)) {\n      List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n          \"metrics:solr.jvm:buffers.direct.Count\");\n      Map<String, Object> val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n      for (String tag : tags) {\n        assertNotNull(\"missing : \" + tag, val.get(tag));\n      }\n      val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), Collections.singleton(\"diskType\"));\n\n      Set<String> diskTypes = ImmutableSet.of(\"rotational\", \"ssd\");\n      assertTrue(diskTypes.contains(val.get(\"diskType\")));\n    }\n  }\n\n","sourceOld":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    final String collectionName = \"metrics_tags\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collectionName, 1, 1);\n    DocCollection collection = getCollectionState(collectionName);\n    DistributedQueueFactory queueFactory = new ZkDistributedQueueFactory(cluster.getZkClient());\n    try (SolrCloudManager provider = new SolrClientCloudManager(queueFactory, solrClient)) {\n      List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n          \"metrics:solr.jvm:buffers.direct.Count\");\n      Map<String, Object> val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n      for (String tag : tags) {\n        assertNotNull(\"missing : \" + tag, val.get(tag));\n      }\n      val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), Collections.singleton(\"diskType\"));\n\n      Set<String> diskTypes = ImmutableSet.of(\"rotational\", \"ssd\");\n      assertTrue(diskTypes.contains(val.get(\"diskType\")));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","sourceNew":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    final String collectionName = \"metrics_tags\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collectionName, 1, 1);\n    DocCollection collection = getCollectionState(collectionName);\n    DistributedQueueFactory queueFactory = new ZkDistributedQueueFactory(cluster.getZkClient());\n    try (SolrCloudManager provider = new SolrClientCloudManager(queueFactory, solrClient)) {\n      List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n          \"metrics:solr.jvm:buffers.direct.Count\");\n      Map<String, Object> val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n      for (String tag : tags) {\n        assertNotNull(\"missing : \" + tag, val.get(tag));\n      }\n      val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), Collections.singleton(\"diskType\"));\n\n      Set<String> diskTypes = ImmutableSet.of(\"rotational\", \"ssd\");\n      assertTrue(diskTypes.contains(val.get(\"diskType\")));\n    }\n  }\n\n","sourceOld":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    final String collectionName = \"metrics_tags\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collectionName, 1, 1);\n    DocCollection collection = getCollectionState(collectionName);\n    DistributedQueueFactory queueFactory = new ZkDistributedQueueFactory(cluster.getZkClient());\n    try (SolrCloudManager provider = new SolrClientCloudManager(queueFactory, solrClient)) {\n      List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n          \"metrics:solr.jvm:buffers.direct.Count\");\n      Map<String, Object> val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n      for (String tag : tags) {\n        assertNotNull(\"missing : \" + tag, val.get(tag));\n      }\n      val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), Collections.singleton(\"diskType\"));\n\n      Set<String> diskTypes = ImmutableSet.of(\"rotational\", \"ssd\");\n      assertTrue(diskTypes.contains(val.get(\"diskType\")));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testMetricsTag().mjava","sourceNew":null,"sourceOld":"  public void testMetricsTag() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    final String collectionName = \"metrics_tags\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collectionName, 1, 1);\n    DocCollection collection = getCollectionState(collectionName);\n    DistributedQueueFactory queueFactory = new ZkDistributedQueueFactory(cluster.getZkClient());\n    try (SolrCloudManager provider = new SolrClientCloudManager(queueFactory, solrClient)) {\n      List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n          \"metrics:solr.jvm:buffers.direct.Count\");\n      Map<String, Object> val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n      for (String tag : tags) {\n        assertNotNull(\"missing : \" + tag, val.get(tag));\n      }\n      val = provider.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), Collections.singleton(\"diskType\"));\n\n      Set<String> diskTypes = ImmutableSet.of(\"rotational\", \"ssd\");\n      assertTrue(diskTypes.contains(val.get(\"diskType\")));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"744465f732e2b3edb5c265322043558ae158c076":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"b94236357aaa22b76c10629851fe4e376e0cea82":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","744465f732e2b3edb5c265322043558ae158c076"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b869898f50ca80263bac2e3ae0949f7700e5c977"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["7811b56f2d9e37eb839450d346535c87f1f504c2"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["db96734b79e26d948b59f68bd4564c4836a71acf"],"7811b56f2d9e37eb839450d346535c87f1f504c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f6ae69e36b15b227a219d4e334ccf5f58fb8affd":["89948af0461fead48f44ba8fb7866f107ce83f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db96734b79e26d948b59f68bd4564c4836a71acf":["f6ae69e36b15b227a219d4e334ccf5f58fb8affd"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["b94236357aaa22b76c10629851fe4e376e0cea82"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"89948af0461fead48f44ba8fb7866f107ce83f22":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"744465f732e2b3edb5c265322043558ae158c076":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["744465f732e2b3edb5c265322043558ae158c076","b94236357aaa22b76c10629851fe4e376e0cea82"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"7811b56f2d9e37eb839450d346535c87f1f504c2":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"f6ae69e36b15b227a219d4e334ccf5f58fb8affd":["db96734b79e26d948b59f68bd4564c4836a71acf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","7811b56f2d9e37eb839450d346535c87f1f504c2","560c18d71dad43d675158783c3840f8c80d6d39c"],"db96734b79e26d948b59f68bd4564c4836a71acf":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["89948af0461fead48f44ba8fb7866f107ce83f22"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"89948af0461fead48f44ba8fb7866f107ce83f22":["f6ae69e36b15b227a219d4e334ccf5f58fb8affd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}