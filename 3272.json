{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#setCollectionCacheTTl(int).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#setCollectionCacheTTl(int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#setCollectionCacheTTl(int).mjava","sourceNew":"  /**Sets the cache ttl for DocCollection Objects cached  . This is only applicable for collections which are persisted outside of clusterstate.json\n   * @param seconds ttl value in seconds\n   */\n  public void setCollectionCacheTTl(int seconds){\n    assert seconds > 0;\n    timeToLive = seconds*1000L;\n  }\n\n","sourceOld":"  /**Sets the cache ttl for DocCollection Objects cached  . This is only applicable for collections which are persisted outside of clusterstate.json\n   * @param seconds ttl value in seconds\n   */\n  public void setCollectionCacheTTl(int seconds){\n    assert seconds > 0;\n    timeToLive = seconds*1000L;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eaeb36333664e8cb92108ef03f68a7b90beb759","date":1480015298,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#setCollectionCacheTTl(int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#setCollectionCacheTTl(int).mjava","sourceNew":"  /**Sets the cache ttl for DocCollection Objects cached  . This is only applicable for collections which are persisted outside of clusterstate.json\n   * @param seconds ttl value in seconds\n   */\n  public void setCollectionCacheTTl(int seconds){\n    assert seconds > 0;\n    this.collectionStateCache.timeToLive = seconds * 1000L;\n  }\n\n","sourceOld":"  /**Sets the cache ttl for DocCollection Objects cached  . This is only applicable for collections which are persisted outside of clusterstate.json\n   * @param seconds ttl value in seconds\n   */\n  public void setCollectionCacheTTl(int seconds){\n    assert seconds > 0;\n    timeToLive = seconds*1000L;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#setCollectionCacheTTl(int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#setCollectionCacheTTl(int).mjava","sourceNew":"  /**Sets the cache ttl for DocCollection Objects cached  . This is only applicable for collections which are persisted outside of clusterstate.json\n   * @param seconds ttl value in seconds\n   */\n  public void setCollectionCacheTTl(int seconds){\n    assert seconds > 0;\n    this.collectionStateCache.timeToLive = seconds * 1000L;\n  }\n\n","sourceOld":"  /**Sets the cache ttl for DocCollection Objects cached  . This is only applicable for collections which are persisted outside of clusterstate.json\n   * @param seconds ttl value in seconds\n   */\n  public void setCollectionCacheTTl(int seconds){\n    assert seconds > 0;\n    timeToLive = seconds*1000L;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#setCollectionCacheTTl(int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#setCollectionCacheTTl(int).mjava","sourceNew":"  /** Sets the cache ttl for DocCollection Objects cached  . This is only applicable for collections which are persisted outside of clusterstate.json\n   * @param seconds ttl value in seconds\n   */\n  public void setCollectionCacheTTl(int seconds){\n    assert seconds > 0;\n    this.collectionStateCache.timeToLive = seconds * 1000L;\n  }\n\n","sourceOld":"  /**Sets the cache ttl for DocCollection Objects cached  . This is only applicable for collections which are persisted outside of clusterstate.json\n   * @param seconds ttl value in seconds\n   */\n  public void setCollectionCacheTTl(int seconds){\n    assert seconds > 0;\n    this.collectionStateCache.timeToLive = seconds * 1000L;\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#setCollectionCacheTTl(int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#setCollectionCacheTTl(int).mjava","sourceNew":"  /** Sets the cache ttl for DocCollection Objects cached  . This is only applicable for collections which are persisted outside of clusterstate.json\n   * @param seconds ttl value in seconds\n   */\n  public void setCollectionCacheTTl(int seconds){\n    assert seconds > 0;\n    this.collectionStateCache.timeToLive = seconds * 1000L;\n  }\n\n","sourceOld":"  /** Sets the cache ttl for DocCollection Objects cached  . This is only applicable for collections which are persisted outside of clusterstate.json\n   * @param seconds ttl value in seconds\n   */\n  public void setCollectionCacheTTl(int seconds){\n    assert seconds > 0;\n    this.collectionStateCache.timeToLive = seconds * 1000L;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["3eaeb36333664e8cb92108ef03f68a7b90beb759"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"727bb765ff2542275f6d31f67be18d7104bae148":["bafca15d8e408346a67f4282ad1143b88023893b","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"]},"commit2Childs":{"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06","727bb765ff2542275f6d31f67be18d7104bae148"],"bafca15d8e408346a67f4282ad1143b88023893b":["727bb765ff2542275f6d31f67be18d7104bae148","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}