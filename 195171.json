{"path":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#read().mjava","commits":[{"id":"34960db40f081388a12ae7131547fb03236705fd","date":1461892880,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#read().mjava","pathOld":"/dev/null","sourceNew":"    // Return a metadata tuple as the first tuple and then pass through to the underlying stream.\n    public Tuple read() throws IOException {\n      try {\n        Map<String, Object> fields = new HashMap<>();\n        if(firstTuple && params.getBool(\"includeMetadata\")) {\n          firstTuple = false;\n\n          List<String> metadataFields = new ArrayList<>();\n          Map<String, String> metadataAliases = new HashMap<>();\n          for(int i = 1; i <= numColumns; i++) {\n            String columnName = resultSetMetaData.getColumnName(i);\n            String columnLabel = resultSetMetaData.getColumnLabel(i);\n            metadataFields.add(columnName);\n            metadataAliases.put(columnName, columnLabel);\n          }\n\n          fields.put(\"isMetadata\", true);\n          fields.put(\"fields\", metadataFields);\n          fields.put(\"aliases\", metadataAliases);\n        } else {\n          if(this.resultSet.next()){\n            for(int i = 1; i <= numColumns; i++) {\n              fields.put(resultSetMetaData.getColumnName(i), this.resultSet.getObject(i));\n            }\n          } else {\n            fields.put(\"EOF\", true);\n          }\n\n        }\n        return new Tuple(fields);\n      } catch (SQLException e) {\n        throw new IOException(e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0104212f65198f40658f73c83200eaa99553ea09","date":1462026700,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#read().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#read().mjava","sourceNew":"    // Return a metadata tuple as the first tuple and then pass through to the underlying stream.\n    public Tuple read() throws IOException {\n      try {\n        Map<String, Object> fields = new HashMap<>();\n        if(firstTuple) {\n          firstTuple = false;\n\n          List<String> metadataFields = new ArrayList<>();\n          Map<String, String> metadataAliases = new HashMap<>();\n          for(int i = 1; i <= numColumns; i++) {\n            String columnName = resultSetMetaData.getColumnName(i);\n            String columnLabel = resultSetMetaData.getColumnLabel(i);\n            metadataFields.add(columnName);\n            metadataAliases.put(columnName, columnLabel);\n          }\n\n          fields.put(\"isMetadata\", true);\n          fields.put(\"fields\", metadataFields);\n          fields.put(\"aliases\", metadataAliases);\n        } else {\n          if(this.resultSet.next()){\n            for(int i = 1; i <= numColumns; i++) {\n              fields.put(resultSetMetaData.getColumnName(i), this.resultSet.getObject(i));\n            }\n          } else {\n            fields.put(\"EOF\", true);\n          }\n\n        }\n        return new Tuple(fields);\n      } catch (SQLException e) {\n        throw new IOException(e);\n      }\n    }\n\n","sourceOld":"    // Return a metadata tuple as the first tuple and then pass through to the underlying stream.\n    public Tuple read() throws IOException {\n      try {\n        Map<String, Object> fields = new HashMap<>();\n        if(firstTuple && params.getBool(\"includeMetadata\")) {\n          firstTuple = false;\n\n          List<String> metadataFields = new ArrayList<>();\n          Map<String, String> metadataAliases = new HashMap<>();\n          for(int i = 1; i <= numColumns; i++) {\n            String columnName = resultSetMetaData.getColumnName(i);\n            String columnLabel = resultSetMetaData.getColumnLabel(i);\n            metadataFields.add(columnName);\n            metadataAliases.put(columnName, columnLabel);\n          }\n\n          fields.put(\"isMetadata\", true);\n          fields.put(\"fields\", metadataFields);\n          fields.put(\"aliases\", metadataAliases);\n        } else {\n          if(this.resultSet.next()){\n            for(int i = 1; i <= numColumns; i++) {\n              fields.put(resultSetMetaData.getColumnName(i), this.resultSet.getObject(i));\n            }\n          } else {\n            fields.put(\"EOF\", true);\n          }\n\n        }\n        return new Tuple(fields);\n      } catch (SQLException e) {\n        throw new IOException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcbcd58b7af0ce15c2274481aebfaa9c1eab9890","date":1477598910,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#read().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#read().mjava","sourceNew":"    // Return a metadata tuple as the first tuple and then pass through to the underlying stream.\n    public Tuple read() throws IOException {\n      try {\n        Map<String, Object> fields = new HashMap<>();\n        if(firstTuple) {\n          firstTuple = false;\n\n          List<String> metadataFields = new ArrayList<>();\n          Map<String, String> metadataAliases = new HashMap<>();\n          for(int i = 1; i <= numColumns; i++) {\n            String columnName = resultSetMetaData.getColumnName(i);\n            String columnLabel = resultSetMetaData.getColumnLabel(i);\n            metadataFields.add(columnLabel);\n            metadataAliases.put(columnLabel, columnName);\n          }\n\n          fields.put(\"isMetadata\", true);\n          fields.put(\"fields\", metadataFields);\n          fields.put(\"aliases\", metadataAliases);\n        } else {\n          if(this.resultSet.next()){\n            for(int i = 1; i <= numColumns; i++) {\n              fields.put(resultSetMetaData.getColumnName(i), this.resultSet.getObject(i));\n            }\n          } else {\n            fields.put(\"EOF\", true);\n          }\n\n        }\n        return new Tuple(fields);\n      } catch (SQLException e) {\n        throw new IOException(e);\n      }\n    }\n\n","sourceOld":"    // Return a metadata tuple as the first tuple and then pass through to the underlying stream.\n    public Tuple read() throws IOException {\n      try {\n        Map<String, Object> fields = new HashMap<>();\n        if(firstTuple) {\n          firstTuple = false;\n\n          List<String> metadataFields = new ArrayList<>();\n          Map<String, String> metadataAliases = new HashMap<>();\n          for(int i = 1; i <= numColumns; i++) {\n            String columnName = resultSetMetaData.getColumnName(i);\n            String columnLabel = resultSetMetaData.getColumnLabel(i);\n            metadataFields.add(columnName);\n            metadataAliases.put(columnName, columnLabel);\n          }\n\n          fields.put(\"isMetadata\", true);\n          fields.put(\"fields\", metadataFields);\n          fields.put(\"aliases\", metadataAliases);\n        } else {\n          if(this.resultSet.next()){\n            for(int i = 1; i <= numColumns; i++) {\n              fields.put(resultSetMetaData.getColumnName(i), this.resultSet.getObject(i));\n            }\n          } else {\n            fields.put(\"EOF\", true);\n          }\n\n        }\n        return new Tuple(fields);\n      } catch (SQLException e) {\n        throw new IOException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"269a15064e17800f4de01681203c64af61f6a724","date":1477603030,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#read().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#read().mjava","sourceNew":"    // Return a metadata tuple as the first tuple and then pass through to the underlying stream.\n    public Tuple read() throws IOException {\n      try {\n        Map<String, Object> fields = new HashMap<>();\n        if(firstTuple) {\n          firstTuple = false;\n\n          List<String> metadataFields = new ArrayList<>();\n          Map<String, String> metadataAliases = new HashMap<>();\n          for(int i = 1; i <= numColumns; i++) {\n            String columnName = resultSetMetaData.getColumnName(i);\n            String columnLabel = resultSetMetaData.getColumnLabel(i);\n            metadataFields.add(columnName);\n            metadataAliases.put(columnName, columnLabel);\n          }\n\n          fields.put(\"isMetadata\", true);\n          fields.put(\"fields\", metadataFields);\n          fields.put(\"aliases\", metadataAliases);\n        } else {\n          if(this.resultSet.next()){\n            for(int i = 1; i <= numColumns; i++) {\n              fields.put(resultSetMetaData.getColumnLabel(i), this.resultSet.getObject(i));\n            }\n          } else {\n            fields.put(\"EOF\", true);\n          }\n\n        }\n        return new Tuple(fields);\n      } catch (SQLException e) {\n        throw new IOException(e);\n      }\n    }\n\n","sourceOld":"    // Return a metadata tuple as the first tuple and then pass through to the underlying stream.\n    public Tuple read() throws IOException {\n      try {\n        Map<String, Object> fields = new HashMap<>();\n        if(firstTuple) {\n          firstTuple = false;\n\n          List<String> metadataFields = new ArrayList<>();\n          Map<String, String> metadataAliases = new HashMap<>();\n          for(int i = 1; i <= numColumns; i++) {\n            String columnName = resultSetMetaData.getColumnName(i);\n            String columnLabel = resultSetMetaData.getColumnLabel(i);\n            metadataFields.add(columnLabel);\n            metadataAliases.put(columnLabel, columnName);\n          }\n\n          fields.put(\"isMetadata\", true);\n          fields.put(\"fields\", metadataFields);\n          fields.put(\"aliases\", metadataAliases);\n        } else {\n          if(this.resultSet.next()){\n            for(int i = 1; i <= numColumns; i++) {\n              fields.put(resultSetMetaData.getColumnName(i), this.resultSet.getObject(i));\n            }\n          } else {\n            fields.put(\"EOF\", true);\n          }\n\n        }\n        return new Tuple(fields);\n      } catch (SQLException e) {\n        throw new IOException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b26cec00dcbe989f5d09d27b2c1a2d2b9bb03e98","date":1478186540,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#read().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#read().mjava","sourceNew":"    @Override\n    public Tuple read() throws IOException {\n      // Return a metadata tuple as the first tuple and then pass through to the JDBCStream.\n      if(includeMetadata && firstTuple) {\n        try {\n          Map<String, Object> fields = new HashMap<>();\n\n          firstTuple = false;\n\n          ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n\n          List<String> metadataFields = new ArrayList<>();\n          Map<String, String> metadataAliases = new HashMap<>();\n          for(int i = 1; i <= resultSetMetaData.getColumnCount(); i++) {\n            String columnName = resultSetMetaData.getColumnName(i);\n            String columnLabel = resultSetMetaData.getColumnLabel(i);\n            metadataFields.add(columnName);\n            metadataAliases.put(columnName, columnLabel);\n          }\n\n          fields.put(\"isMetadata\", true);\n          fields.put(\"fields\", metadataFields);\n          fields.put(\"aliases\", metadataAliases);\n          return new Tuple(fields);\n        } catch (SQLException e) {\n          throw new IOException(e);\n        }\n      } else {\n        return super.read();\n      }\n    }\n\n","sourceOld":"    // Return a metadata tuple as the first tuple and then pass through to the underlying stream.\n    public Tuple read() throws IOException {\n      try {\n        Map<String, Object> fields = new HashMap<>();\n        if(firstTuple) {\n          firstTuple = false;\n\n          List<String> metadataFields = new ArrayList<>();\n          Map<String, String> metadataAliases = new HashMap<>();\n          for(int i = 1; i <= numColumns; i++) {\n            String columnName = resultSetMetaData.getColumnName(i);\n            String columnLabel = resultSetMetaData.getColumnLabel(i);\n            metadataFields.add(columnName);\n            metadataAliases.put(columnName, columnLabel);\n          }\n\n          fields.put(\"isMetadata\", true);\n          fields.put(\"fields\", metadataFields);\n          fields.put(\"aliases\", metadataAliases);\n        } else {\n          if(this.resultSet.next()){\n            for(int i = 1; i <= numColumns; i++) {\n              fields.put(resultSetMetaData.getColumnLabel(i), this.resultSet.getObject(i));\n            }\n          } else {\n            fields.put(\"EOF\", true);\n          }\n\n        }\n        return new Tuple(fields);\n      } catch (SQLException e) {\n        throw new IOException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":0,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#read().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Tuple read() throws IOException {\n      // Return a metadata tuple as the first tuple and then pass through to the JDBCStream.\n      if(includeMetadata && firstTuple) {\n        try {\n          Map<String, Object> fields = new HashMap<>();\n\n          firstTuple = false;\n\n          ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n\n          List<String> metadataFields = new ArrayList<>();\n          Map<String, String> metadataAliases = new HashMap<>();\n          for(int i = 1; i <= resultSetMetaData.getColumnCount(); i++) {\n            String columnName = resultSetMetaData.getColumnName(i);\n            String columnLabel = resultSetMetaData.getColumnLabel(i);\n            metadataFields.add(columnName);\n            metadataAliases.put(columnName, columnLabel);\n          }\n\n          fields.put(\"isMetadata\", true);\n          fields.put(\"fields\", metadataFields);\n          fields.put(\"aliases\", metadataAliases);\n          return new Tuple(fields);\n        } catch (SQLException e) {\n          throw new IOException(e);\n        }\n      } else {\n        return super.read();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81","date":1489617105,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#read().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#read().mjava","sourceNew":"    @Override\n    public Tuple read() throws IOException {\n      // Return a metadata tuple as the first tuple and then pass through to the JDBCStream.\n      if(firstTuple) {\n        try {\n          Map<String, Object> fields = new HashMap<>();\n\n          firstTuple = false;\n\n          ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n\n          for(int i = 1; i <= resultSetMetaData.getColumnCount(); i++) {\n            String columnName = resultSetMetaData.getColumnName(i);\n            String columnLabel = resultSetMetaData.getColumnLabel(i);\n            metadataFields.add(columnName);\n            metadataAliases.put(columnName, columnLabel);\n          }\n\n          if(includeMetadata) {\n            fields.put(\"isMetadata\", true);\n            fields.put(\"fields\", metadataFields);\n            fields.put(\"aliases\", metadataAliases);\n            return new Tuple(fields);\n          }\n        } catch (SQLException e) {\n          throw new IOException(e);\n        }\n      }\n\n      Tuple tuple = super.read();\n      if(!tuple.EOF) {\n        tuple.fieldNames = metadataFields;\n        tuple.fieldLabels = metadataAliases;\n      }\n      return tuple;\n    }\n\n","sourceOld":"    @Override\n    public Tuple read() throws IOException {\n      // Return a metadata tuple as the first tuple and then pass through to the JDBCStream.\n      if(includeMetadata && firstTuple) {\n        try {\n          Map<String, Object> fields = new HashMap<>();\n\n          firstTuple = false;\n\n          ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n\n          List<String> metadataFields = new ArrayList<>();\n          Map<String, String> metadataAliases = new HashMap<>();\n          for(int i = 1; i <= resultSetMetaData.getColumnCount(); i++) {\n            String columnName = resultSetMetaData.getColumnName(i);\n            String columnLabel = resultSetMetaData.getColumnLabel(i);\n            metadataFields.add(columnName);\n            metadataAliases.put(columnName, columnLabel);\n          }\n\n          fields.put(\"isMetadata\", true);\n          fields.put(\"fields\", metadataFields);\n          fields.put(\"aliases\", metadataAliases);\n          return new Tuple(fields);\n        } catch (SQLException e) {\n          throw new IOException(e);\n        }\n      } else {\n        return super.read();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6106d879512729bf1e4840d612448c4180d110c8","date":1489651910,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#read().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#read().mjava","sourceNew":"    @Override\n    public Tuple read() throws IOException {\n      // Return a metadata tuple as the first tuple and then pass through to the JDBCStream.\n      if(firstTuple) {\n        try {\n          Map<String, Object> fields = new HashMap<>();\n\n          firstTuple = false;\n\n          ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n\n          for(int i = 1; i <= resultSetMetaData.getColumnCount(); i++) {\n            String columnName = resultSetMetaData.getColumnName(i);\n            String columnLabel = resultSetMetaData.getColumnLabel(i);\n            metadataFields.add(columnName);\n            metadataAliases.put(columnName, columnLabel);\n          }\n\n          if(includeMetadata) {\n            fields.put(\"isMetadata\", true);\n            fields.put(\"fields\", metadataFields);\n            fields.put(\"aliases\", metadataAliases);\n            return new Tuple(fields);\n          }\n        } catch (SQLException e) {\n          throw new IOException(e);\n        }\n      }\n\n      Tuple tuple = super.read();\n      if(!tuple.EOF) {\n        tuple.fieldNames = metadataFields;\n        tuple.fieldLabels = metadataAliases;\n      }\n      return tuple;\n    }\n\n","sourceOld":"    @Override\n    public Tuple read() throws IOException {\n      // Return a metadata tuple as the first tuple and then pass through to the JDBCStream.\n      if(includeMetadata && firstTuple) {\n        try {\n          Map<String, Object> fields = new HashMap<>();\n\n          firstTuple = false;\n\n          ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n\n          List<String> metadataFields = new ArrayList<>();\n          Map<String, String> metadataAliases = new HashMap<>();\n          for(int i = 1; i <= resultSetMetaData.getColumnCount(); i++) {\n            String columnName = resultSetMetaData.getColumnName(i);\n            String columnLabel = resultSetMetaData.getColumnLabel(i);\n            metadataFields.add(columnName);\n            metadataAliases.put(columnName, columnLabel);\n          }\n\n          fields.put(\"isMetadata\", true);\n          fields.put(\"fields\", metadataFields);\n          fields.put(\"aliases\", metadataAliases);\n          return new Tuple(fields);\n        } catch (SQLException e) {\n          throw new IOException(e);\n        }\n      } else {\n        return super.read();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#read().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#read().mjava","sourceNew":"    @Override\n    public Tuple read() throws IOException {\n      // Return a metadata tuple as the first tuple and then pass through to the JDBCStream.\n      if(firstTuple) {\n        try {\n          Map<String, Object> fields = new HashMap<>();\n\n          firstTuple = false;\n\n          ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n\n          for(int i = 1; i <= resultSetMetaData.getColumnCount(); i++) {\n            String columnName = resultSetMetaData.getColumnName(i);\n            String columnLabel = resultSetMetaData.getColumnLabel(i);\n            metadataFields.add(columnName);\n            metadataAliases.put(columnName, columnLabel);\n          }\n\n          if(includeMetadata) {\n            fields.put(\"isMetadata\", true);\n            fields.put(\"fields\", metadataFields);\n            fields.put(\"aliases\", metadataAliases);\n            return new Tuple(fields);\n          }\n        } catch (SQLException e) {\n          throw new IOException(e);\n        }\n      }\n\n      Tuple tuple = super.read();\n      if(!tuple.EOF) {\n        tuple.fieldNames = metadataFields;\n        tuple.fieldLabels = metadataAliases;\n      }\n      return tuple;\n    }\n\n","sourceOld":"    @Override\n    public Tuple read() throws IOException {\n      // Return a metadata tuple as the first tuple and then pass through to the JDBCStream.\n      if(includeMetadata && firstTuple) {\n        try {\n          Map<String, Object> fields = new HashMap<>();\n\n          firstTuple = false;\n\n          ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n\n          List<String> metadataFields = new ArrayList<>();\n          Map<String, String> metadataAliases = new HashMap<>();\n          for(int i = 1; i <= resultSetMetaData.getColumnCount(); i++) {\n            String columnName = resultSetMetaData.getColumnName(i);\n            String columnLabel = resultSetMetaData.getColumnLabel(i);\n            metadataFields.add(columnName);\n            metadataAliases.put(columnName, columnLabel);\n          }\n\n          fields.put(\"isMetadata\", true);\n          fields.put(\"fields\", metadataFields);\n          fields.put(\"aliases\", metadataAliases);\n          return new Tuple(fields);\n        } catch (SQLException e) {\n          throw new IOException(e);\n        }\n      } else {\n        return super.read();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#read().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SqlHandlerStream#read().mjava","sourceNew":"    @Override\n    public Tuple read() throws IOException {\n      // Return a metadata tuple as the first tuple and then pass through to the JDBCStream.\n      if(firstTuple) {\n        try {\n          Tuple tuple = new Tuple();\n\n          firstTuple = false;\n\n          ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n\n          for(int i = 1; i <= resultSetMetaData.getColumnCount(); i++) {\n            String columnName = resultSetMetaData.getColumnName(i);\n            String columnLabel = resultSetMetaData.getColumnLabel(i);\n            metadataFields.add(columnName);\n            metadataAliases.put(columnName, columnLabel);\n          }\n\n          if(includeMetadata) {\n            tuple.put(\"isMetadata\", true);\n            tuple.put(\"fields\", metadataFields);\n            tuple.put(\"aliases\", metadataAliases);\n            return tuple;\n          }\n        } catch (SQLException e) {\n          throw new IOException(e);\n        }\n      }\n\n      Tuple tuple = super.read();\n      if(!tuple.EOF) {\n        tuple.fieldNames = metadataFields;\n        tuple.fieldLabels = metadataAliases;\n      }\n      return tuple;\n    }\n\n","sourceOld":"    @Override\n    public Tuple read() throws IOException {\n      // Return a metadata tuple as the first tuple and then pass through to the JDBCStream.\n      if(firstTuple) {\n        try {\n          Map<String, Object> fields = new HashMap<>();\n\n          firstTuple = false;\n\n          ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n\n          for(int i = 1; i <= resultSetMetaData.getColumnCount(); i++) {\n            String columnName = resultSetMetaData.getColumnName(i);\n            String columnLabel = resultSetMetaData.getColumnLabel(i);\n            metadataFields.add(columnName);\n            metadataAliases.put(columnName, columnLabel);\n          }\n\n          if(includeMetadata) {\n            fields.put(\"isMetadata\", true);\n            fields.put(\"fields\", metadataFields);\n            fields.put(\"aliases\", metadataAliases);\n            return new Tuple(fields);\n          }\n        } catch (SQLException e) {\n          throw new IOException(e);\n        }\n      }\n\n      Tuple tuple = super.read();\n      if(!tuple.EOF) {\n        tuple.fieldNames = metadataFields;\n        tuple.fieldLabels = metadataAliases;\n      }\n      return tuple;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34960db40f081388a12ae7131547fb03236705fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6106d879512729bf1e4840d612448c4180d110c8":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b26cec00dcbe989f5d09d27b2c1a2d2b9bb03e98"],"269a15064e17800f4de01681203c64af61f6a724":["dcbcd58b7af0ce15c2274481aebfaa9c1eab9890"],"0104212f65198f40658f73c83200eaa99553ea09":["34960db40f081388a12ae7131547fb03236705fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b26cec00dcbe989f5d09d27b2c1a2d2b9bb03e98":["269a15064e17800f4de01681203c64af61f6a724"],"7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"804a8d5358fe7b7563b85ee7838714d720b89272":["7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81"],"dcbcd58b7af0ce15c2274481aebfaa9c1eab9890":["0104212f65198f40658f73c83200eaa99553ea09"],"ab68488225b6a6c357dda72ed11dedca9914a192":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","6106d879512729bf1e4840d612448c4180d110c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"34960db40f081388a12ae7131547fb03236705fd":["0104212f65198f40658f73c83200eaa99553ea09"],"6106d879512729bf1e4840d612448c4180d110c8":["ab68488225b6a6c357dda72ed11dedca9914a192"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["6106d879512729bf1e4840d612448c4180d110c8","7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81","ab68488225b6a6c357dda72ed11dedca9914a192"],"269a15064e17800f4de01681203c64af61f6a724":["b26cec00dcbe989f5d09d27b2c1a2d2b9bb03e98"],"0104212f65198f40658f73c83200eaa99553ea09":["dcbcd58b7af0ce15c2274481aebfaa9c1eab9890"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["34960db40f081388a12ae7131547fb03236705fd","116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"b26cec00dcbe989f5d09d27b2c1a2d2b9bb03e98":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81":["804a8d5358fe7b7563b85ee7838714d720b89272"],"dcbcd58b7af0ce15c2274481aebfaa9c1eab9890":["269a15064e17800f4de01681203c64af61f6a724"],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab68488225b6a6c357dda72ed11dedca9914a192","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}