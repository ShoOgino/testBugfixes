{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyFromClusterProp(Map[String,Object],String).mjava","commits":[{"id":"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444","date":1527778252,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyFromClusterProp(Map[String,Object],String).mjava","pathOld":"/dev/null","sourceNew":"  protected void copyFromClusterProp(Map<String, Object> props, String prop) {\n    if (props.get(prop) != null) return;//if it's already specified , return\n    Object defVal = coreContainer.getZkController().getZkStateReader().getClusterProperty(ImmutableList.of(COLLECTION_DEF, prop), null);\n    if (defVal != null) props.put(prop, String.valueOf(defVal));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dd9e307b8831fae9a784d5d04fe1d9606d4f973","date":1528204451,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyFromClusterProp(Map[String,Object],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyFromClusterProp(Map[String,Object],String).mjava","sourceNew":"  protected void copyFromClusterProp(Map<String, Object> props, String prop) throws IOException {\n    if (props.get(prop) != null) return;//if it's already specified , return\n    Object defVal = new ClusterProperties(coreContainer.getZkController().getZkStateReader().getZkClient())\n        .getClusterProperty(ImmutableList.of(COLLECTION_DEF, prop), null);\n    if (defVal != null) props.put(prop, String.valueOf(defVal));\n  }\n\n","sourceOld":"  protected void copyFromClusterProp(Map<String, Object> props, String prop) {\n    if (props.get(prop) != null) return;//if it's already specified , return\n    Object defVal = coreContainer.getZkController().getZkStateReader().getClusterProperty(ImmutableList.of(COLLECTION_DEF, prop), null);\n    if (defVal != null) props.put(prop, String.valueOf(defVal));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyFromClusterProp(Map[String,Object],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyFromClusterProp(Map[String,Object],String).mjava","sourceNew":"  protected void copyFromClusterProp(Map<String, Object> props, String prop) throws IOException {\n    if (props.get(prop) != null) return;//if it's already specified , return\n    Object defVal = new ClusterProperties(coreContainer.getZkController().getZkStateReader().getZkClient())\n        .getClusterProperty(ImmutableList.of(COLLECTION_DEF, prop), null);\n    if (defVal != null) props.put(prop, String.valueOf(defVal));\n  }\n\n","sourceOld":"  protected void copyFromClusterProp(Map<String, Object> props, String prop) {\n    if (props.get(prop) != null) return;//if it's already specified , return\n    Object defVal = coreContainer.getZkController().getZkStateReader().getClusterProperty(ImmutableList.of(COLLECTION_DEF, prop), null);\n    if (defVal != null) props.put(prop, String.valueOf(defVal));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyFromClusterProp(Map[String,Object],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyFromClusterProp(Map[String,Object],String).mjava","sourceNew":"  protected void copyFromClusterProp(Map<String, Object> props, String prop) throws IOException {\n    if (props.get(prop) != null) return;//if it's already specified , return\n    Object defVal = new ClusterProperties(coreContainer.getZkController().getZkStateReader().getZkClient())\n        .getClusterProperty(ImmutableList.of(COLLECTION_DEF, prop), null);\n    if (defVal != null) props.put(prop, String.valueOf(defVal));\n  }\n\n","sourceOld":"  protected void copyFromClusterProp(Map<String, Object> props, String prop) {\n    if (props.get(prop) != null) return;//if it's already specified , return\n    Object defVal = coreContainer.getZkController().getZkStateReader().getClusterProperty(ImmutableList.of(COLLECTION_DEF, prop), null);\n    if (defVal != null) props.put(prop, String.valueOf(defVal));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e","date":1538649775,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyFromClusterProp(Map[String,Object],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#copyFromClusterProp(Map[String,Object],String).mjava","sourceNew":"  protected void copyFromClusterProp(Map<String, Object> props, String prop) throws IOException {\n    if (props.get(prop) != null) return;//if it's already specified , return\n    Object defVal = new ClusterProperties(coreContainer.getZkController().getZkStateReader().getZkClient())\n        .getClusterProperty(ImmutableList.of(CollectionAdminParams.DEFAULTS, CollectionAdminParams.COLLECTION, prop), null);\n    if (defVal != null) props.put(prop, String.valueOf(defVal));\n  }\n\n","sourceOld":"  protected void copyFromClusterProp(Map<String, Object> props, String prop) throws IOException {\n    if (props.get(prop) != null) return;//if it's already specified , return\n    Object defVal = new ClusterProperties(coreContainer.getZkController().getZkStateReader().getZkClient())\n        .getClusterProperty(ImmutableList.of(COLLECTION_DEF, prop), null);\n    if (defVal != null) props.put(prop, String.valueOf(defVal));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e":["5dd9e307b8831fae9a784d5d04fe1d9606d4f973"],"5dd9e307b8831fae9a784d5d04fe1d9606d4f973":["9fa9cb6b109951110cc6d6a6a79c22ad6ee88444"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["9fa9cb6b109951110cc6d6a6a79c22ad6ee88444","5dd9e307b8831fae9a784d5d04fe1d9606d4f973"],"f592209545c71895260367152601e9200399776d":["9fa9cb6b109951110cc6d6a6a79c22ad6ee88444","5dd9e307b8831fae9a784d5d04fe1d9606d4f973"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e"],"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5dd9e307b8831fae9a784d5d04fe1d9606d4f973":["03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fa9cb6b109951110cc6d6a6a79c22ad6ee88444"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f592209545c71895260367152601e9200399776d":[],"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444":["5dd9e307b8831fae9a784d5d04fe1d9606d4f973","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}