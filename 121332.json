{"path":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","sourceNew":null,"sourceOld":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","sourceNew":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","sourceOld":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","sourceNew":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","sourceOld":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","sourceNew":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","sourceOld":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","sourceNew":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","sourceOld":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}