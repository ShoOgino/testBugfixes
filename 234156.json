{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean,boolean).mjava","commits":[{"id":"9a0e5953a07337cd41bcde610503024c07073b26","date":1519143251,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean).mjava","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean doSlowChecks, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // doSlowChecks is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose, doSlowChecks);\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose);\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"071935ce120b55517dcd86b9f985dbda028ba94e","date":1525265372,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean doSlowChecks, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // doSlowChecks is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      NormsProducer normsProducer = reader.getNormsReader();\n      if (normsProducer != null) {\n        normsProducer = normsProducer.getMergeInstance();\n      }\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, normsProducer, true, false, infoStream, verbose, doSlowChecks);\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean doSlowChecks, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // doSlowChecks is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, reader.getLiveDocs(), maxDoc, fieldInfos, true, false, infoStream, verbose, doSlowChecks);\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"071935ce120b55517dcd86b9f985dbda028ba94e":["9a0e5953a07337cd41bcde610503024c07073b26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9a0e5953a07337cd41bcde610503024c07073b26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["071935ce120b55517dcd86b9f985dbda028ba94e"]},"commit2Childs":{"071935ce120b55517dcd86b9f985dbda028ba94e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0e5953a07337cd41bcde610503024c07073b26"],"9a0e5953a07337cd41bcde610503024c07073b26":["071935ce120b55517dcd86b9f985dbda028ba94e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}