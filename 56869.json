{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int,CodecProvider).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int,CodecProvider).mjava","pathOld":"/dev/null","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor, CodecProvider codecs) throws IOException {\n\n      if (termsIndexDivisor < 1 && termsIndexDivisor != -1) {\n        throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + termsIndexDivisor);\n      }\n\n      segment = si.name;\n      if (codecs == null) {\n        codecs = CodecProvider.getDefault();\n      }\n      this.codecs = codecs;      \n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n\n        // Ask codec for its Fields\n        fields = si.getCodec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        isPreFlex = fields instanceof PreFlexFields;\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int,CodecProvider).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor, CodecProvider codecs) throws IOException {\n\n      if (termsIndexDivisor < 1 && termsIndexDivisor != -1) {\n        throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + termsIndexDivisor);\n      }\n\n      segment = si.name;\n      if (codecs == null) {\n        codecs = CodecProvider.getDefault();\n      }\n      this.codecs = codecs;      \n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n\n        // Ask codec for its Fields\n        fields = si.getCodec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        isPreFlex = fields instanceof PreFlexFields;\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor, CodecProvider codecs) throws IOException {\n\n      if (termsIndexDivisor < 1 && termsIndexDivisor != -1) {\n        throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + termsIndexDivisor);\n      }\n\n      segment = si.name;\n      if (codecs == null) {\n        codecs = CodecProvider.getDefault();\n      }\n      this.codecs = codecs;      \n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n\n        // Ask codec for its Fields\n        fields = si.getCodec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        isPreFlex = fields instanceof PreFlexFields;\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int,CodecProvider).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor, CodecProvider codecs) throws IOException {\n\n      if (termsIndexDivisor < 1 && termsIndexDivisor != -1) {\n        throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + termsIndexDivisor);\n      }\n\n      segment = si.name;\n      if (codecs == null) {\n        codecs = CodecProvider.getDefault();\n      }\n      this.codecs = codecs;      \n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n\n        // Ask codec for its Fields\n        fields = si.getCodec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor, CodecProvider codecs) throws IOException {\n\n      if (termsIndexDivisor < 1 && termsIndexDivisor != -1) {\n        throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + termsIndexDivisor);\n      }\n\n      segment = si.name;\n      if (codecs == null) {\n        codecs = CodecProvider.getDefault();\n      }\n      this.codecs = codecs;      \n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n\n        // Ask codec for its Fields\n        fields = si.getCodec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        isPreFlex = fields instanceof PreFlexFields;\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int,CodecProvider).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor, CodecProvider codecs) throws IOException {\n\n      if (termsIndexDivisor < 1 && termsIndexDivisor != -1) {\n        throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + termsIndexDivisor);\n      }\n\n      segment = si.name;\n      if (codecs == null) {\n        codecs = CodecProvider.getDefault();\n      }\n      this.codecs = codecs;      \n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n\n        // Ask codec for its Fields\n        fields = si.getCodec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor, CodecProvider codecs) throws IOException {\n\n      if (termsIndexDivisor < 1 && termsIndexDivisor != -1) {\n        throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + termsIndexDivisor);\n      }\n\n      segment = si.name;\n      if (codecs == null) {\n        codecs = CodecProvider.getDefault();\n      }\n      this.codecs = codecs;      \n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n\n        // Ask codec for its Fields\n        fields = si.getCodec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        isPreFlex = fields instanceof PreFlexFields;\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int,CodecProvider).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor, CodecProvider codecs) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      if (codecs == null) {\n        codecs = CodecProvider.getDefault();\n      }\n      this.codecs = codecs;      \n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n\n        // Ask codec for its Fields\n        fields = si.getCodec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor, CodecProvider codecs) throws IOException {\n\n      if (termsIndexDivisor < 1 && termsIndexDivisor != -1) {\n        throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + termsIndexDivisor);\n      }\n\n      segment = si.name;\n      if (codecs == null) {\n        codecs = CodecProvider.getDefault();\n      }\n      this.codecs = codecs;      \n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n\n        // Ask codec for its Fields\n        fields = si.getCodec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int,CodecProvider).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor, CodecProvider codecs) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      if (codecs == null) {\n        codecs = CodecProvider.getDefault();\n      }\n      this.codecs = codecs;      \n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n\n        // Ask codec for its Fields\n        fields = si.getCodec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n        openIndexValuesReaders(cfsDir, si);\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor, CodecProvider codecs) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      if (codecs == null) {\n        codecs = CodecProvider.getDefault();\n      }\n      this.codecs = codecs;      \n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n\n        // Ask codec for its Fields\n        fields = si.getCodec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e28c49f1fb6215a550fdadcf3805aa629b63ec0","date":1288081775,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int,CodecProvider).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor, CodecProvider codecs) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      if (codecs == null) {\n        codecs = CodecProvider.getDefault();\n      }\n      this.codecs = codecs;      \n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n\n        // Ask codec for its Fields\n        fields = si.getCodec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor, CodecProvider codecs) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      if (codecs == null) {\n        codecs = CodecProvider.getDefault();\n      }\n      this.codecs = codecs;      \n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n\n        // Ask codec for its Fields\n        fields = si.getCodec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n        openIndexValuesReaders(cfsDir, si);\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int,CodecProvider).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs codecInfo = si.getCodecInfo();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = codecInfo.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor, CodecProvider codecs) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      if (codecs == null) {\n        codecs = CodecProvider.getDefault();\n      }\n      this.codecs = codecs;      \n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n\n        // Ask codec for its Fields\n        fields = si.getCodec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int,CodecProvider).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs codecInfo = si.getCodecInfo();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = codecInfo.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor, CodecProvider codecs) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      if (codecs == null) {\n        codecs = CodecProvider.getDefault();\n      }\n      this.codecs = codecs;      \n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n\n        // Ask codec for its Fields\n        fields = si.getCodec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int,CodecProvider).mjava","sourceNew":null,"sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor, CodecProvider codecs) throws IOException {\n\n      if (termsIndexDivisor < 1 && termsIndexDivisor != -1) {\n        throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + termsIndexDivisor);\n      }\n\n      segment = si.name;\n      if (codecs == null) {\n        codecs = CodecProvider.getDefault();\n      }\n      this.codecs = codecs;      \n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n\n        // Ask codec for its Fields\n        fields = si.getCodec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","28427ef110c4c5bf5b4057731b83110bd1e13724"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"]},"commit2Childs":{"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"85a883878c0af761245ab048babc63d099f835f3":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","b21422ff1d1d56499dec481f193b402e5e8def5b"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["85a883878c0af761245ab048babc63d099f835f3"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}