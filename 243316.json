{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String],ZkStateReader).mjava","commits":[{"id":"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","date":1386334715,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String],ZkStateReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String]).mjava","sourceNew":"  /**\n   * Create ClusterState by reading the current state from zookeeper. \n   */\n  public static ClusterState load(SolrZkClient zkClient, Set<String> liveNodes, ZkStateReader stateReader) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, stat, true);\n    return load(stat.getVersion(), state, liveNodes, stateReader);\n  }\n\n","sourceOld":"  /**\n   * Create ClusterState by reading the current state from zookeeper. \n   */\n  public static ClusterState load(SolrZkClient zkClient, Set<String> liveNodes) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, stat, true);\n    return load(stat.getVersion(), state, liveNodes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String],ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create ClusterState by reading the current state from zookeeper. \n   */\n  public static ClusterState load(SolrZkClient zkClient, Set<String> liveNodes, ZkStateReader stateReader) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, stat, true);\n    return load(stat.getVersion(), state, liveNodes, stateReader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String],ZkStateReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String],ZkStateReader).mjava","sourceNew":"  /**\n   * Create ClusterState by reading the current state from zookeeper. \n   */\n  public static ClusterState load(SolrZkClient zkClient, Set<String> liveNodes, ZkStateReader stateReader) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, stat, true);\n    return load(stat.getVersion(), state, liveNodes);\n  }\n\n","sourceOld":"  /**\n   * Create ClusterState by reading the current state from zookeeper. \n   */\n  public static ClusterState load(SolrZkClient zkClient, Set<String> liveNodes, ZkStateReader stateReader) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, stat, true);\n    return load(stat.getVersion(), state, liveNodes, stateReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String],ZkStateReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String],ZkStateReader).mjava","sourceNew":"  /**\n   * Create ClusterState by reading the current state from zookeeper. \n   */\n  public static ClusterState load(SolrZkClient zkClient, Set<String> liveNodes, ZkStateReader stateReader) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, stat, true);\n    return load(stat.getVersion(), state, liveNodes, stateReader, ZkStateReader.CLUSTER_STATE);\n  }\n\n","sourceOld":"  /**\n   * Create ClusterState by reading the current state from zookeeper. \n   */\n  public static ClusterState load(SolrZkClient zkClient, Set<String> liveNodes, ZkStateReader stateReader) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, stat, true);\n    return load(stat.getVersion(), state, liveNodes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String],ZkStateReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String],ZkStateReader).mjava","sourceNew":"  /**\n   * Create ClusterState by reading the current state from zookeeper. \n   */\n  public static ClusterState load(SolrZkClient zkClient, Set<String> liveNodes, ZkStateReader stateReader) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, stat, true);\n    return load(stat.getVersion(), state, liveNodes);\n  }\n\n","sourceOld":"  /**\n   * Create ClusterState by reading the current state from zookeeper. \n   */\n  public static ClusterState load(SolrZkClient zkClient, Set<String> liveNodes, ZkStateReader stateReader) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, stat, true);\n    return load(stat.getVersion(), state, liveNodes, stateReader, ZkStateReader.CLUSTER_STATE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String],ZkStateReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create ClusterState by reading the current state from zookeeper. \n   */\n  public static ClusterState load(SolrZkClient zkClient, Set<String> liveNodes, ZkStateReader stateReader) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, stat, true);\n    return load(stat.getVersion(), state, liveNodes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9279b175e5e66258442d2123a50f052219a9cc1b"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"]},"commit2Childs":{"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9279b175e5e66258442d2123a50f052219a9cc1b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}