{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger[FacetModule]#getMergedResult().mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger[FacetModule]#getMergedResult().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n    // TODO: if we implement mincount for ranges, we'll need to sort buckets (see FacetFieldMerger)\n\n    for (FacetBucket bucket : buckets.values()) {\n      /***\n       if (bucket.getCount() < freq.mincount) {\n       continue;\n       }\n       ***/\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(\"before\", beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(\"after\", afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(\"between\", betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c05b634713ca09b2267477408773904d4c69dd9d","c05b634713ca09b2267477408773904d4c69dd9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger[FacetModule]#getMergedResult().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n    // TODO: if we implement mincount for ranges, we'll need to sort buckets (see FacetFieldMerger)\n\n    for (FacetBucket bucket : buckets.values()) {\n      /***\n       if (bucket.getCount() < freq.mincount) {\n       continue;\n       }\n       ***/\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(\"before\", beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(\"after\", afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(\"between\", betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"637b14d3587fbf956ba5f8d39409d579d34f69de","date":1430057809,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger[FacetModule]#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger[FacetModule]#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n\n    for (FacetBucket bucket : buckets.values()) {\n       if (bucket.getCount() < freq.mincount) {\n         continue;\n       }\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(\"before\", beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(\"after\", afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(\"between\", betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n    // TODO: if we implement mincount for ranges, we'll need to sort buckets (see FacetFieldMerger)\n\n    for (FacetBucket bucket : buckets.values()) {\n      /***\n       if (bucket.getCount() < freq.mincount) {\n       continue;\n       }\n       ***/\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(\"before\", beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(\"after\", afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(\"between\", betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1931d98b40b01d5075753b197c2461a5c2652689","date":1471971289,"type":5,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger[FacetModule]#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    // TODO: use sortedBuckets\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n\n    for (FacetBucket bucket : buckets.values()) {\n       if (bucket.getCount() < freq.mincount) {\n         continue;\n       }\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(\"before\", beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(\"after\", afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(\"between\", betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n\n    for (FacetBucket bucket : buckets.values()) {\n       if (bucket.getCount() < freq.mincount) {\n         continue;\n       }\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(\"before\", beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(\"after\", afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(\"between\", betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger[FacetModule]#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    // TODO: use sortedBuckets\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n\n    for (FacetBucket bucket : buckets.values()) {\n       if (bucket.getCount() < freq.mincount) {\n         continue;\n       }\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(\"before\", beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(\"after\", afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(\"between\", betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n\n    for (FacetBucket bucket : buckets.values()) {\n       if (bucket.getCount() < freq.mincount) {\n         continue;\n       }\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(\"before\", beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(\"after\", afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(\"between\", betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger[FacetModule]#getMergedResult().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n\n    for (FacetBucket bucket : buckets.values()) {\n       if (bucket.getCount() < freq.mincount) {\n         continue;\n       }\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(\"before\", beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(\"after\", afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(\"between\", betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"637b14d3587fbf956ba5f8d39409d579d34f69de":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"1931d98b40b01d5075753b197c2461a5c2652689":["637b14d3587fbf956ba5f8d39409d579d34f69de"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["637b14d3587fbf956ba5f8d39409d579d34f69de","1931d98b40b01d5075753b197c2461a5c2652689"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["637b14d3587fbf956ba5f8d39409d579d34f69de","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","637b14d3587fbf956ba5f8d39409d579d34f69de"],"637b14d3587fbf956ba5f8d39409d579d34f69de":["1931d98b40b01d5075753b197c2461a5c2652689","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1931d98b40b01d5075753b197c2461a5c2652689":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}