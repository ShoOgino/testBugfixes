{"path":"src/webapp/src/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","commits":[{"id":"d80013b5e260def972025c93a0b08524f9c38f49","date":1170102801,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"/dev/null","sourceNew":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( 400, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( uploadLimitKB*1024 );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Only add it if it actually has something...\n        else if( item.getSize() > 0 ) { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ae36ac6ff9f1747176a1596521bdf0a23edeff1","5ae36ac6ff9f1747176a1596521bdf0a23edeff1","5ae36ac6ff9f1747176a1596521bdf0a23edeff1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( uploadLimitKB*1024 );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Only add it if it actually has something...\n        else if( item.getSize() > 0 ) { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","sourceOld":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( 400, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( uploadLimitKB*1024 );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Only add it if it actually has something...\n        else if( item.getSize() > 0 ) { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43a89c1b665c7572c870f5fd6951c7822f003763","date":1180565082,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( uploadLimitKB*1024 );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Only add it if it actually has something...\n        else if( item.getSize() > 0 ) { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","sourceOld":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( uploadLimitKB*1024 );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Only add it if it actually has something...\n        else if( item.getSize() > 0 ) { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/MultipartRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( uploadLimitKB*1024 );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Only add it if it actually has something...\n        else if( item.getSize() > 0 ) { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","sourceOld":"  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if( !ServletFileUpload.isMultipartContent(req) ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n    }\n    \n    MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );\n    \n    // Create a factory for disk-based file items\n    DiskFileItemFactory factory = new DiskFileItemFactory();\n\n    // Set factory constraints\n    // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n    // TODO - configure factory.setRepository(yourTempDirectory);\n\n    // Create a new file upload handler\n    ServletFileUpload upload = new ServletFileUpload(factory);\n    upload.setSizeMax( uploadLimitKB*1024 );\n\n    // Parse the request\n    List items = upload.parseRequest(req);\n    Iterator iter = items.iterator();\n    while (iter.hasNext()) {\n        FileItem item = (FileItem) iter.next();\n\n        // If its a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam( \n            item.getFieldName(), \n            item.getString(), params.getMap() );\n        }\n        // Only add it if it actually has something...\n        else if( item.getSize() > 0 ) { \n          streams.add( new FileItemContentStream( item ) );\n        }\n    }\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["43a89c1b665c7572c870f5fd6951c7822f003763"],"43a89c1b665c7572c870f5fd6951c7822f003763":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["d80013b5e260def972025c93a0b08524f9c38f49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d80013b5e260def972025c93a0b08524f9c38f49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d80013b5e260def972025c93a0b08524f9c38f49"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"43a89c1b665c7572c870f5fd6951c7822f003763":["ad94625fb8d088209f46650c8097196fec67f00c"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["43a89c1b665c7572c870f5fd6951c7822f003763"],"d80013b5e260def972025c93a0b08524f9c38f49":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}