{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#cancelCoreRecoveries().mjava","commits":[{"id":"af02ebb711553a2cc1969b3ccd4997202c6b50ff","date":1330311169,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#cancelCoreRecoveries().mjava","pathOld":"/dev/null","sourceNew":"  private void cancelCoreRecoveries() {\n    ArrayList<SolrCoreState> coreStates = null;\n    synchronized (cores) {\n        for (SolrCore core : cores.values()) {\n          try {\n            coreStates = new ArrayList<SolrCoreState>(cores.size());\n            // make sure we wait for any recoveries to stop\n            coreStates.add(core.getUpdateHandler().getSolrCoreState());\n          } catch (Throwable t) {\n            SolrException.log(log, \"Error canceling recovery for core\", t);\n          }\n        }\n    }\n    \n    // we must cancel without holding the cores sync\n    if (coreStates != null) {\n      for (SolrCoreState coreState : coreStates) {\n        coreState.cancelRecovery();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#cancelCoreRecoveries().mjava","pathOld":"/dev/null","sourceNew":"  private void cancelCoreRecoveries() {\n    ArrayList<SolrCoreState> coreStates = null;\n    synchronized (cores) {\n        for (SolrCore core : cores.values()) {\n          try {\n            coreStates = new ArrayList<SolrCoreState>(cores.size());\n            // make sure we wait for any recoveries to stop\n            coreStates.add(core.getUpdateHandler().getSolrCoreState());\n          } catch (Throwable t) {\n            SolrException.log(log, \"Error canceling recovery for core\", t);\n          }\n        }\n    }\n    \n    // we must cancel without holding the cores sync\n    if (coreStates != null) {\n      for (SolrCoreState coreState : coreStates) {\n        coreState.cancelRecovery();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c76806dcdb4841b4f71ecfe9e9e95147f7201f2","date":1337787106,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#cancelCoreRecoveries().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#cancelCoreRecoveries().mjava","sourceNew":"  private void cancelCoreRecoveries() {\n    ArrayList<SolrCoreState> coreStates = new ArrayList<SolrCoreState>();\n    synchronized (cores) {\n      for (SolrCore core : cores.values()) {\n        coreStates.add(core.getUpdateHandler().getSolrCoreState());\n      }\n    }\n\n    // we must cancel without holding the cores sync\n    // make sure we wait for any recoveries to stop\n    for (SolrCoreState coreState : coreStates) {\n      try {\n        coreState.cancelRecovery();\n      } catch (Throwable t) {\n        SolrException.log(log, \"Error canceling recovery for core\", t);\n      }\n    }\n  }\n\n","sourceOld":"  private void cancelCoreRecoveries() {\n    ArrayList<SolrCoreState> coreStates = null;\n    synchronized (cores) {\n        for (SolrCore core : cores.values()) {\n          try {\n            coreStates = new ArrayList<SolrCoreState>(cores.size());\n            // make sure we wait for any recoveries to stop\n            coreStates.add(core.getUpdateHandler().getSolrCoreState());\n          } catch (Throwable t) {\n            SolrException.log(log, \"Error canceling recovery for core\", t);\n          }\n        }\n    }\n    \n    // we must cancel without holding the cores sync\n    if (coreStates != null) {\n      for (SolrCoreState coreState : coreStates) {\n        coreState.cancelRecovery();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#cancelCoreRecoveries().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#cancelCoreRecoveries().mjava","sourceNew":"  private void cancelCoreRecoveries() {\n    ArrayList<SolrCoreState> coreStates = new ArrayList<SolrCoreState>();\n    synchronized (cores) {\n      for (SolrCore core : cores.values()) {\n        coreStates.add(core.getUpdateHandler().getSolrCoreState());\n      }\n    }\n\n    // we must cancel without holding the cores sync\n    // make sure we wait for any recoveries to stop\n    for (SolrCoreState coreState : coreStates) {\n      try {\n        coreState.cancelRecovery();\n      } catch (Throwable t) {\n        SolrException.log(log, \"Error canceling recovery for core\", t);\n      }\n    }\n  }\n\n","sourceOld":"  private void cancelCoreRecoveries() {\n    ArrayList<SolrCoreState> coreStates = null;\n    synchronized (cores) {\n        for (SolrCore core : cores.values()) {\n          try {\n            coreStates = new ArrayList<SolrCoreState>(cores.size());\n            // make sure we wait for any recoveries to stop\n            coreStates.add(core.getUpdateHandler().getSolrCoreState());\n          } catch (Throwable t) {\n            SolrException.log(log, \"Error canceling recovery for core\", t);\n          }\n        }\n    }\n    \n    // we must cancel without holding the cores sync\n    if (coreStates != null) {\n      for (SolrCoreState coreState : coreStates) {\n        coreState.cancelRecovery();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#cancelCoreRecoveries().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#cancelCoreRecoveries().mjava","sourceNew":"  public void cancelCoreRecoveries() {\n    ArrayList<SolrCoreState> coreStates = new ArrayList<SolrCoreState>();\n    synchronized (cores) {\n      for (SolrCore core : cores.values()) {\n        coreStates.add(core.getUpdateHandler().getSolrCoreState());\n      }\n    }\n\n    // we must cancel without holding the cores sync\n    // make sure we wait for any recoveries to stop\n    for (SolrCoreState coreState : coreStates) {\n      try {\n        coreState.cancelRecovery();\n      } catch (Throwable t) {\n        SolrException.log(log, \"Error canceling recovery for core\", t);\n      }\n    }\n  }\n\n","sourceOld":"  private void cancelCoreRecoveries() {\n    ArrayList<SolrCoreState> coreStates = new ArrayList<SolrCoreState>();\n    synchronized (cores) {\n      for (SolrCore core : cores.values()) {\n        coreStates.add(core.getUpdateHandler().getSolrCoreState());\n      }\n    }\n\n    // we must cancel without holding the cores sync\n    // make sure we wait for any recoveries to stop\n    for (SolrCoreState coreState : coreStates) {\n      try {\n        coreState.cancelRecovery();\n      } catch (Throwable t) {\n        SolrException.log(log, \"Error canceling recovery for core\", t);\n      }\n    }\n  }\n\n","bugFix":["af02ebb711553a2cc1969b3ccd4997202c6b50ff"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#cancelCoreRecoveries().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#cancelCoreRecoveries().mjava","sourceNew":"  public void cancelCoreRecoveries() {\n    ArrayList<SolrCoreState> coreStates = new ArrayList<SolrCoreState>();\n    coreMaps.addCoresToList(coreStates);\n\n    // we must cancel without holding the cores sync\n    // make sure we wait for any recoveries to stop\n    for (SolrCoreState coreState : coreStates) {\n      try {\n        coreState.cancelRecovery();\n      } catch (Throwable t) {\n        SolrException.log(log, \"Error canceling recovery for core\", t);\n      }\n    }\n  }\n\n","sourceOld":"  public void cancelCoreRecoveries() {\n    ArrayList<SolrCoreState> coreStates = new ArrayList<SolrCoreState>();\n    synchronized (cores) {\n      for (SolrCore core : cores.values()) {\n        coreStates.add(core.getUpdateHandler().getSolrCoreState());\n      }\n    }\n\n    // we must cancel without holding the cores sync\n    // make sure we wait for any recoveries to stop\n    for (SolrCoreState coreState : coreStates) {\n      try {\n        coreState.cancelRecovery();\n      } catch (Throwable t) {\n        SolrException.log(log, \"Error canceling recovery for core\", t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#cancelCoreRecoveries().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#cancelCoreRecoveries().mjava","sourceNew":"  public void cancelCoreRecoveries() {\n    ArrayList<SolrCoreState> coreStates = new ArrayList<SolrCoreState>();\n    solrCores.addCoresToList(coreStates);\n\n    // we must cancel without holding the cores sync\n    // make sure we wait for any recoveries to stop\n    for (SolrCoreState coreState : coreStates) {\n      try {\n        coreState.cancelRecovery();\n      } catch (Throwable t) {\n        SolrException.log(log, \"Error canceling recovery for core\", t);\n      }\n    }\n  }\n\n","sourceOld":"  public void cancelCoreRecoveries() {\n    ArrayList<SolrCoreState> coreStates = new ArrayList<SolrCoreState>();\n    coreMaps.addCoresToList(coreStates);\n\n    // we must cancel without holding the cores sync\n    // make sure we wait for any recoveries to stop\n    for (SolrCoreState coreState : coreStates) {\n      try {\n        coreState.cancelRecovery();\n      } catch (Throwable t) {\n        SolrException.log(log, \"Error canceling recovery for core\", t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b29abed5661c7911e4b45d5a3d79a186268e28c4","date":1366675770,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#cancelCoreRecoveries().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#cancelCoreRecoveries().mjava","sourceNew":"  public void cancelCoreRecoveries() {\n\n    List<SolrCore> cores = solrCores.getCores();\n\n    // we must cancel without holding the cores sync\n    // make sure we wait for any recoveries to stop\n    for (SolrCore core : cores) {\n      try {\n        core.getSolrCoreState().cancelRecovery();\n      } catch (Throwable t) {\n        SolrException.log(log, \"Error canceling recovery for core\", t);\n      }\n    }\n  }\n\n","sourceOld":"  public void cancelCoreRecoveries() {\n    ArrayList<SolrCoreState> coreStates = new ArrayList<SolrCoreState>();\n    solrCores.addCoresToList(coreStates);\n\n    // we must cancel without holding the cores sync\n    // make sure we wait for any recoveries to stop\n    for (SolrCoreState coreState : coreStates) {\n      try {\n        coreState.cancelRecovery();\n      } catch (Throwable t) {\n        SolrException.log(log, \"Error canceling recovery for core\", t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#cancelCoreRecoveries().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#cancelCoreRecoveries().mjava","sourceNew":"  public void cancelCoreRecoveries() {\n\n    List<SolrCore> cores = solrCores.getCores();\n\n    // we must cancel without holding the cores sync\n    // make sure we wait for any recoveries to stop\n    for (SolrCore core : cores) {\n      try {\n        core.getSolrCoreState().cancelRecovery();\n      } catch (Exception e) {\n        SolrException.log(log, \"Error canceling recovery for core\", e);\n      }\n    }\n  }\n\n","sourceOld":"  public void cancelCoreRecoveries() {\n\n    List<SolrCore> cores = solrCores.getCores();\n\n    // we must cancel without holding the cores sync\n    // make sure we wait for any recoveries to stop\n    for (SolrCore core : cores) {\n      try {\n        core.getSolrCoreState().cancelRecovery();\n      } catch (Throwable t) {\n        SolrException.log(log, \"Error canceling recovery for core\", t);\n      }\n    }\n  }\n\n","bugFix":["5c76806dcdb4841b4f71ecfe9e9e95147f7201f2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b29abed5661c7911e4b45d5a3d79a186268e28c4":["9409650933cc688e77e565092a25e58adfc2e18d"],"a6378064655e76cd7b908b1cab4ce425b384b508":["5c76806dcdb4841b4f71ecfe9e9e95147f7201f2"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af02ebb711553a2cc1969b3ccd4997202c6b50ff"],"9409650933cc688e77e565092a25e58adfc2e18d":["a837c064b67fa63a9394136e31218b908cdcf783"],"5c76806dcdb4841b4f71ecfe9e9e95147f7201f2":["af02ebb711553a2cc1969b3ccd4997202c6b50ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["af02ebb711553a2cc1969b3ccd4997202c6b50ff","5c76806dcdb4841b4f71ecfe9e9e95147f7201f2"],"af02ebb711553a2cc1969b3ccd4997202c6b50ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a837c064b67fa63a9394136e31218b908cdcf783":["a6378064655e76cd7b908b1cab4ce425b384b508"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"]},"commit2Childs":{"b29abed5661c7911e4b45d5a3d79a186268e28c4":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"a6378064655e76cd7b908b1cab4ce425b384b508":["a837c064b67fa63a9394136e31218b908cdcf783"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"9409650933cc688e77e565092a25e58adfc2e18d":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"5c76806dcdb4841b4f71ecfe9e9e95147f7201f2":["a6378064655e76cd7b908b1cab4ce425b384b508","3599646b4d4c346cf74d334813488b8b337b5bf5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","af02ebb711553a2cc1969b3ccd4997202c6b50ff"],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"af02ebb711553a2cc1969b3ccd4997202c6b50ff":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","5c76806dcdb4841b4f71ecfe9e9e95147f7201f2","3599646b4d4c346cf74d334813488b8b337b5bf5"],"a837c064b67fa63a9394136e31218b908cdcf783":["9409650933cc688e77e565092a25e58adfc2e18d"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","3599646b4d4c346cf74d334813488b8b337b5bf5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}