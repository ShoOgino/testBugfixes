{"path":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload();\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":null,"sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload();\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload();\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload();\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload();\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","date":1282571040,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload();\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload();\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["c220849f876de24a79f756f65b3eb045db59f63f","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","4ff4f089150b5073dcd4fa1e2018954e3a1eb1af"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c220849f876de24a79f756f65b3eb045db59f63f":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af"],"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c220849f876de24a79f756f65b3eb045db59f63f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["c220849f876de24a79f756f65b3eb045db59f63f"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"1da8d55113b689b06716246649de6f62430f15c0":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ff4f089150b5073dcd4fa1e2018954e3a1eb1af"],"c220849f876de24a79f756f65b3eb045db59f63f":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295"],"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f","29ef99d61cda9641b6250bf9567329a6e65f901d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}