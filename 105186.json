{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OldAnalyticsParams.FieldFacetParamParser#applyParam(AnalyticsValueFacetRequest,String,String).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OldAnalyticsParams.FieldFacetParamParser#applyParam(AnalyticsValueFacetRequest,String,String).mjava","pathOld":"/dev/null","sourceNew":"    public static void applyParam(AnalyticsValueFacetRequest facet, String param, String value) {\n      if (isLimit.test(param)) {\n        getSort(facet).limit = Integer.parseInt(value);\n      } else if (isOffset.test(param)) {\n        getSort(facet).offset = Integer.parseInt(value);\n      } else if (isShowMissing.test(param)) {\n        facet.expression = \"fillmissing(\" + facet.expression + \",\\\"(MISSING)\\\")\";\n      } else if (isSortExpr.test(param)) {\n        AnalyticsSortRequest sort = getSort(facet);\n        AnalyticsExpressionSortRequest criterion;\n        if (sort.criteria.size() == 0) {\n          criterion = new AnalyticsExpressionSortRequest();\n          sort.criteria.add(criterion);\n        } else {\n          criterion = (AnalyticsExpressionSortRequest) sort.criteria.get(0);\n        }\n        criterion.expression = value;\n      } else if (isSortDir.test(param)) {\n        AnalyticsSortRequest sort = getSort(facet);\n        AnalyticsExpressionSortRequest criterion;\n        if (sort.criteria.size() == 0) {\n          criterion = new AnalyticsExpressionSortRequest();\n          sort.criteria.add(criterion);\n        } else {\n          criterion = (AnalyticsExpressionSortRequest) sort.criteria.get(0);\n        }\n        criterion.direction = value;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OldAnalyticsParams.FieldFacetParamParser#applyParam(AnalyticsValueFacetRequest,String,String).mjava","pathOld":"/dev/null","sourceNew":"    public static void applyParam(AnalyticsValueFacetRequest facet, String param, String value) {\n      if (isLimit.test(param)) {\n        getSort(facet).limit = Integer.parseInt(value);\n      } else if (isOffset.test(param)) {\n        getSort(facet).offset = Integer.parseInt(value);\n      } else if (isShowMissing.test(param)) {\n        facet.expression = \"fillmissing(\" + facet.expression + \",\\\"(MISSING)\\\")\";\n      } else if (isSortExpr.test(param)) {\n        AnalyticsSortRequest sort = getSort(facet);\n        AnalyticsExpressionSortRequest criterion;\n        if (sort.criteria.size() == 0) {\n          criterion = new AnalyticsExpressionSortRequest();\n          sort.criteria.add(criterion);\n        } else {\n          criterion = (AnalyticsExpressionSortRequest) sort.criteria.get(0);\n        }\n        criterion.expression = value;\n      } else if (isSortDir.test(param)) {\n        AnalyticsSortRequest sort = getSort(facet);\n        AnalyticsExpressionSortRequest criterion;\n        if (sort.criteria.size() == 0) {\n          criterion = new AnalyticsExpressionSortRequest();\n          sort.criteria.add(criterion);\n        } else {\n          criterion = (AnalyticsExpressionSortRequest) sort.criteria.get(0);\n        }\n        criterion.direction = value;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OldAnalyticsParams.FieldFacetParamParser#applyParam(AnalyticsValueFacetRequest,String,String).mjava","pathOld":"/dev/null","sourceNew":"    public static void applyParam(AnalyticsValueFacetRequest facet, String param, String value) {\n      if (isLimit.test(param)) {\n        getSort(facet).limit = Integer.parseInt(value);\n      } else if (isOffset.test(param)) {\n        getSort(facet).offset = Integer.parseInt(value);\n      } else if (isShowMissing.test(param)) {\n        facet.expression = \"fillmissing(\" + facet.expression + \",\\\"(MISSING)\\\")\";\n      } else if (isSortExpr.test(param)) {\n        AnalyticsSortRequest sort = getSort(facet);\n        AnalyticsExpressionSortRequest criterion;\n        if (sort.criteria.size() == 0) {\n          criterion = new AnalyticsExpressionSortRequest();\n          sort.criteria.add(criterion);\n        } else {\n          criterion = (AnalyticsExpressionSortRequest) sort.criteria.get(0);\n        }\n        criterion.expression = value;\n      } else if (isSortDir.test(param)) {\n        AnalyticsSortRequest sort = getSort(facet);\n        AnalyticsExpressionSortRequest criterion;\n        if (sort.criteria.size() == 0) {\n          criterion = new AnalyticsExpressionSortRequest();\n          sort.criteria.add(criterion);\n        } else {\n          criterion = (AnalyticsExpressionSortRequest) sort.criteria.get(0);\n        }\n        criterion.direction = value;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OldAnalyticsParams.FieldFacetParamParser#applyParam(AnalyticsValueFacetRequest,String,String).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OldAnalyticsParams.FieldFacetParamParser#applyParam(AnalyticsValueFacetRequest,String,String).mjava","sourceNew":"    public static void applyParam(AnalyticsValueFacetRequest facet, String param, String value) {\n      if (isLimit.test(param)) {\n        getSort(facet).limit = Integer.parseInt(value);\n      } else if (isOffset.test(param)) {\n        getSort(facet).offset = Integer.parseInt(value);\n      } else if (isShowMissing.test(param)) {\n        facet.expression = FillMissingFunction.name + \"(\" + facet.expression + \",\\\"(MISSING)\\\")\";\n      } else if (isSortExpr.test(param)) {\n        AnalyticsSortRequest sort = getSort(facet);\n        AnalyticsExpressionSortRequest criterion;\n        if (sort.criteria.size() == 0) {\n          criterion = new AnalyticsExpressionSortRequest();\n          sort.criteria.add(criterion);\n        } else {\n          criterion = (AnalyticsExpressionSortRequest) sort.criteria.get(0);\n        }\n        criterion.expression = value;\n      } else if (isSortDir.test(param)) {\n        AnalyticsSortRequest sort = getSort(facet);\n        AnalyticsExpressionSortRequest criterion;\n        if (sort.criteria.size() == 0) {\n          criterion = new AnalyticsExpressionSortRequest();\n          sort.criteria.add(criterion);\n        } else {\n          criterion = (AnalyticsExpressionSortRequest) sort.criteria.get(0);\n        }\n        criterion.direction = value;\n      }\n    }\n\n","sourceOld":"    public static void applyParam(AnalyticsValueFacetRequest facet, String param, String value) {\n      if (isLimit.test(param)) {\n        getSort(facet).limit = Integer.parseInt(value);\n      } else if (isOffset.test(param)) {\n        getSort(facet).offset = Integer.parseInt(value);\n      } else if (isShowMissing.test(param)) {\n        facet.expression = \"fillmissing(\" + facet.expression + \",\\\"(MISSING)\\\")\";\n      } else if (isSortExpr.test(param)) {\n        AnalyticsSortRequest sort = getSort(facet);\n        AnalyticsExpressionSortRequest criterion;\n        if (sort.criteria.size() == 0) {\n          criterion = new AnalyticsExpressionSortRequest();\n          sort.criteria.add(criterion);\n        } else {\n          criterion = (AnalyticsExpressionSortRequest) sort.criteria.get(0);\n        }\n        criterion.expression = value;\n      } else if (isSortDir.test(param)) {\n        AnalyticsSortRequest sort = getSort(facet);\n        AnalyticsExpressionSortRequest criterion;\n        if (sort.criteria.size() == 0) {\n          criterion = new AnalyticsExpressionSortRequest();\n          sort.criteria.add(criterion);\n        } else {\n          criterion = (AnalyticsExpressionSortRequest) sort.criteria.get(0);\n        }\n        criterion.direction = value;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","3bd4c6955956e76c96eb12dfe64108ed03522983"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}