{"path":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","commits":[{"id":"0445bcd8433e331f296f5502fc089b336cbac3a6","date":1322630375,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random, false);\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random.nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(500);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = leftWriter.getReader();\n    leftWriter.close();\n    rightReader = rightWriter.getReader();\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random, false);\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random.nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = leftWriter.getReader();\n    leftWriter.close();\n    rightReader = rightWriter.getReader();\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random, false);\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random.nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(500);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = leftWriter.getReader();\n    leftWriter.close();\n    rightReader = rightWriter.getReader();\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random, false);\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random.nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = leftWriter.getReader();\n    leftWriter.close();\n    rightReader = rightWriter.getReader();\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random, false);\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random.nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = leftWriter.getReader();\n    leftWriter.close();\n    rightReader = rightWriter.getReader();\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0445bcd8433e331f296f5502fc089b336cbac3a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8be580b58bcc650d428f3f22de81cadcf51d650a":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0445bcd8433e331f296f5502fc089b336cbac3a6":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}