{"path":"src/java/org/apache/lucene/search/function/DocValues#getInnerArray().mjava","commits":[{"id":"3f74570911bfdb9f7b01948745dcd67c69676c0e","date":1181060975,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/function/DocValues#getInnerArray().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: for test purposes only, return the inner array of values, or null if not applicable.\n   * <p>\n   * Allows tests to verify that loaded values are:\n   * <ol>\n   *   <li>indeed cached/reused.</li>\n   *   <li>stored in the expected size/type (byte/short/int/float).</li>\n   * </ol>\n   * Note: Tested implementations of DocValues must override this method for the test to pass!\n   */\n  Object getInnerArray() {\n    return new Object[0];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e385df0c8e079b3d13c7ccb0b221b5145d48cfd2","date":1197497193,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/function/DocValues#getInnerArray().mjava","pathOld":"src/java/org/apache/lucene/search/function/DocValues#getInnerArray().mjava","sourceNew":"  /**\n   * Expert: for test purposes only, return the inner array of values, or null if not applicable.\n   * <p>\n   * Allows tests to verify that loaded values are:\n   * <ol>\n   *   <li>indeed cached/reused.</li>\n   *   <li>stored in the expected size/type (byte/short/int/float).</li>\n   * </ol>\n   * Note: implementations of DocValues must override this method for \n   * these test elements to be tested, Otherwise the test would not fail, just \n   * print a warning.\n   */\n  Object getInnerArray() {\n    throw new UnsupportedOperationException(\"this optional method is for test purposes only\");\n  }\n\n","sourceOld":"  /**\n   * Expert: for test purposes only, return the inner array of values, or null if not applicable.\n   * <p>\n   * Allows tests to verify that loaded values are:\n   * <ol>\n   *   <li>indeed cached/reused.</li>\n   *   <li>stored in the expected size/type (byte/short/int/float).</li>\n   * </ol>\n   * Note: Tested implementations of DocValues must override this method for the test to pass!\n   */\n  Object getInnerArray() {\n    return new Object[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/function/DocValues#getInnerArray().mjava","pathOld":"src/java/org/apache/lucene/search/function/DocValues#getInnerArray().mjava","sourceNew":"  /**\n   * Expert: for test purposes only, return the inner array of values, or null if not applicable.\n   * <p>\n   * Allows tests to verify that loaded values are:\n   * <ol>\n   *   <li>indeed cached/reused.</li>\n   *   <li>stored in the expected size/type (byte/short/int/float).</li>\n   * </ol>\n   * Note: implementations of DocValues must override this method for \n   * these test elements to be tested, Otherwise the test would not fail, just \n   * print a warning.\n   */\n  Object getInnerArray() {\n    throw new UnsupportedOperationException(\"this optional method is for test purposes only\");\n  }\n\n","sourceOld":"  /**\n   * Expert: for test purposes only, return the inner array of values, or null if not applicable.\n   * <p>\n   * Allows tests to verify that loaded values are:\n   * <ol>\n   *   <li>indeed cached/reused.</li>\n   *   <li>stored in the expected size/type (byte/short/int/float).</li>\n   * </ol>\n   * Note: implementations of DocValues must override this method for \n   * these test elements to be tested, Otherwise the test would not fail, just \n   * print a warning.\n   */\n  Object getInnerArray() {\n    throw new UnsupportedOperationException(\"this optional method is for test purposes only\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e385df0c8e079b3d13c7ccb0b221b5145d48cfd2":["3f74570911bfdb9f7b01948745dcd67c69676c0e"],"3f74570911bfdb9f7b01948745dcd67c69676c0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e385df0c8e079b3d13c7ccb0b221b5145d48cfd2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f74570911bfdb9f7b01948745dcd67c69676c0e"],"e385df0c8e079b3d13c7ccb0b221b5145d48cfd2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3f74570911bfdb9f7b01948745dcd67c69676c0e":["e385df0c8e079b3d13c7ccb0b221b5145d48cfd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}