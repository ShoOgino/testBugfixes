{"path":"src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(IndexReader).mjava","commits":[{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/search/CachingWrapperFilterHelper#bits(IndexReader).mjava","sourceNew":"  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap();\n    }\n    \n    synchronized (cache) {  // check cache\n      DocIdSet cached = (DocIdSet) cache.get(reader);\n      if (shouldHaveCache) {\n        TestCase.assertNotNull(\"Cache should have data \", cached);\n      } else {\n        TestCase.assertNull(\"Cache should be null \" + cached , cached);\n      }\n      if (cached != null) {\n        return cached;\n      }\n    }\n\n    final DocIdSet bits = filter.getDocIdSet(reader);\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, bits);\n    }\n\n    return bits;\n  }\n\n","sourceOld":"  public BitSet bits(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap();\n    }\n    \n    synchronized (cache) {  // check cache\n      BitSet cached = (BitSet) cache.get(reader);\n      if (shouldHaveCache) {\n        TestCase.assertNotNull(\"Cache should have data \", cached);\n      } else {\n        TestCase.assertNull(\"Cache should be null \" + cached , cached);\n      }\n      if (cached != null) {\n        return cached;\n      }\n    }\n\n    final BitSet bits = filter.bits(reader);\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, bits);\n    }\n\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap();\n    }\n    \n    synchronized (cache) {  // check cache\n      DocIdSet cached = (DocIdSet) cache.get(reader);\n      if (shouldHaveCache) {\n        TestCase.assertNotNull(\"Cache should have data \", cached);\n      } else {\n        TestCase.assertNull(\"Cache should be null \" + cached , cached);\n      }\n      if (cached != null) {\n        return cached;\n      }\n    }\n\n    final DocIdSet bits = filter.getDocIdSet(reader);\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, bits);\n    }\n\n    return bits;\n  }\n\n","sourceOld":"  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap();\n    }\n    \n    synchronized (cache) {  // check cache\n      DocIdSet cached = (DocIdSet) cache.get(reader);\n      if (shouldHaveCache) {\n        TestCase.assertNotNull(\"Cache should have data \", cached);\n      } else {\n        TestCase.assertNull(\"Cache should be null \" + cached , cached);\n      }\n      if (cached != null) {\n        return cached;\n      }\n    }\n\n    final DocIdSet bits = filter.getDocIdSet(reader);\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, bits);\n    }\n\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap<IndexReader,DocIdSet>();\n    }\n    \n    synchronized (cache) {  // check cache\n      DocIdSet cached = cache.get(reader);\n      if (shouldHaveCache) {\n        TestCase.assertNotNull(\"Cache should have data \", cached);\n      } else {\n        TestCase.assertNull(\"Cache should be null \" + cached , cached);\n      }\n      if (cached != null) {\n        return cached;\n      }\n    }\n\n    final DocIdSet bits = filter.getDocIdSet(reader);\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, bits);\n    }\n\n    return bits;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap();\n    }\n    \n    synchronized (cache) {  // check cache\n      DocIdSet cached = (DocIdSet) cache.get(reader);\n      if (shouldHaveCache) {\n        TestCase.assertNotNull(\"Cache should have data \", cached);\n      } else {\n        TestCase.assertNull(\"Cache should be null \" + cached , cached);\n      }\n      if (cached != null) {\n        return cached;\n      }\n    }\n\n    final DocIdSet bits = filter.getDocIdSet(reader);\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, bits);\n    }\n\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap<IndexReader,DocIdSet>();\n    }\n    \n    synchronized (cache) {  // check cache\n      DocIdSet cached = cache.get(reader);\n      if (shouldHaveCache) {\n        Assert.assertNotNull(\"Cache should have data \", cached);\n      } else {\n        Assert.assertNull(\"Cache should be null \" + cached , cached);\n      }\n      if (cached != null) {\n        return cached;\n      }\n    }\n\n    final DocIdSet bits = filter.getDocIdSet(reader);\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, bits);\n    }\n\n    return bits;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap<IndexReader,DocIdSet>();\n    }\n    \n    synchronized (cache) {  // check cache\n      DocIdSet cached = cache.get(reader);\n      if (shouldHaveCache) {\n        TestCase.assertNotNull(\"Cache should have data \", cached);\n      } else {\n        TestCase.assertNull(\"Cache should be null \" + cached , cached);\n      }\n      if (cached != null) {\n        return cached;\n      }\n    }\n\n    final DocIdSet bits = filter.getDocIdSet(reader);\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, bits);\n    }\n\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap<IndexReader,DocIdSet>();\n    }\n    \n    synchronized (cache) {  // check cache\n      DocIdSet cached = cache.get(reader);\n      if (shouldHaveCache) {\n        Assert.assertNotNull(\"Cache should have data \", cached);\n      } else {\n        Assert.assertNull(\"Cache should be null \" + cached , cached);\n      }\n      if (cached != null) {\n        return cached;\n      }\n    }\n\n    final DocIdSet bits = filter.getDocIdSet(reader);\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, bits);\n    }\n\n    return bits;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap<IndexReader,DocIdSet>();\n    }\n    \n    synchronized (cache) {  // check cache\n      DocIdSet cached = cache.get(reader);\n      if (shouldHaveCache) {\n        Assert.assertNotNull(\"Cache should have data \", cached);\n      } else {\n        Assert.assertNull(\"Cache should be null \" + cached , cached);\n      }\n      if (cached != null) {\n        return cached;\n      }\n    }\n\n    final DocIdSet bits = filter.getDocIdSet(reader);\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, bits);\n    }\n\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}