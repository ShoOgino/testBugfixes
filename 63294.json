{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getSortedNumeric(FieldInfo).mjava","commits":[{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    NumericEntry numericEntry = numerics.get(field.name);\n    final LongValues values = getNumeric(numericEntry);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      final Bits docsWithField = getMissingBits(numericEntry.missingOffset);\n      return DocValues.singleton(values, docsWithField);\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      final MonotonicBlockPackedReader ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n      \n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        \n        @Override\n        public void setDocument(int doc) {\n          startOffset = ordIndex.get(doc);\n          endOffset = ordIndex.get(doc+1L);\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return values.get(startOffset + index);\n        }\n\n        @Override\n        public int count() {\n          return (int) (endOffset - startOffset);\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    NumericEntry numericEntry = numerics.get(field.name);\n    final LongValues values = getNumeric(numericEntry);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      final Bits docsWithField = getMissingBits(numericEntry.missingOffset);\n      return DocValues.singleton(values, docsWithField);\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      final MonotonicBlockPackedReader ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n      \n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        \n        @Override\n        public void setDocument(int doc) {\n          startOffset = ordIndex.get(doc);\n          endOffset = ordIndex.get(doc+1L);\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return values.get(startOffset + index);\n        }\n\n        @Override\n        public int count() {\n          return (int) (endOffset - startOffset);\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    NumericEntry numericEntry = numerics.get(field.name);\n    final LongValues values = getNumeric(numericEntry);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      final Bits docsWithField = getMissingBits(numericEntry.missingOffset);\n      return DocValues.singleton(values, docsWithField);\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      final MonotonicBlockPackedReader ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n      \n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        \n        @Override\n        public void setDocument(int doc) {\n          startOffset = ordIndex.get(doc);\n          endOffset = ordIndex.get(doc+1L);\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return values.get(startOffset + index);\n        }\n\n        @Override\n        public int count() {\n          return (int) (endOffset - startOffset);\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    NumericEntry numericEntry = numerics.get(field.name);\n    final LongValues values = getNumeric(numericEntry);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      final Bits docsWithField = getMissingBits(numericEntry.missingOffset);\n      return DocValues.singleton(values, docsWithField);\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      final MonotonicBlockPackedReader ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n      \n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        \n        @Override\n        public void setDocument(int doc) {\n          startOffset = ordIndex.get(doc);\n          endOffset = ordIndex.get(doc+1L);\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return values.get(startOffset + index);\n        }\n\n        @Override\n        public int count() {\n          return (int) (endOffset - startOffset);\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    NumericEntry numericEntry = numerics.get(field.name);\n    final LongValues values = getNumeric(numericEntry);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      final Bits docsWithField = getMissingBits(numericEntry.missingOffset);\n      return DocValues.singleton(values, docsWithField);\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      final MonotonicBlockPackedReader ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n      \n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        \n        @Override\n        public void setDocument(int doc) {\n          startOffset = ordIndex.get(doc);\n          endOffset = ordIndex.get(doc+1L);\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return values.get(startOffset + index);\n        }\n\n        @Override\n        public int count() {\n          return (int) (endOffset - startOffset);\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}