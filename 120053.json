{"path":"lucene/src/java/org/apache/lucene/search/FieldCache.StringIndex#binarySearchLookup(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCache.StringIndex#binarySearchLookup(String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCache.StringIndex#binarySearchLookup(String).mjava","sourceNew":"    public int binarySearchLookup(String key) {\n      // this special case is the reason that Arrays.binarySearch() isn't useful.\n      if (key == null)\n        return 0;\n\t  \n      int low = 1;\n      int high = lookup.length-1;\n\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        int cmp = lookup[mid].compareTo(key);\n\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else\n          return mid; // key found\n      }\n      return -(low + 1);  // key not found.\n    }\n\n","sourceOld":"    public int binarySearchLookup(String key) {\n      // this special case is the reason that Arrays.binarySearch() isn't useful.\n      if (key == null)\n        return 0;\n\t  \n      int low = 1;\n      int high = lookup.length-1;\n\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        int cmp = lookup[mid].compareTo(key);\n\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else\n          return mid; // key found\n      }\n      return -(low + 1);  // key not found.\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCache.DocTermsIndex#binarySearchLookup(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCache.StringIndex#binarySearchLookup(String).mjava","sourceNew":"    public int binarySearchLookup(BytesRef key, BytesRef spare) {\n      // this special case is the reason that Arrays.binarySearch() isn't useful.\n      if (key == null)\n        return 0;\n\t  \n      int low = 1;\n      int high = numOrd()-1;\n\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        int cmp = lookup(mid, spare).compareTo(key);\n\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else\n          return mid; // key found\n      }\n      return -(low + 1);  // key not found.\n    }\n\n","sourceOld":"    public int binarySearchLookup(String key) {\n      // this special case is the reason that Arrays.binarySearch() isn't useful.\n      if (key == null)\n        return 0;\n\t  \n      int low = 1;\n      int high = lookup.length-1;\n\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        int cmp = lookup[mid].compareTo(key);\n\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else\n          return mid; // key found\n      }\n      return -(low + 1);  // key not found.\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}