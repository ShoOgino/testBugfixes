{"path":"lucene/core/src/java/org/apache/lucene/search/Weight#topScorer(AtomicReaderContext,boolean,Bits).mjava","commits":[{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight#topScorer(AtomicReaderContext,boolean,Bits).mjava","pathOld":"/dev/null","sourceNew":"  // nocommit jdocs\n  public TopScorer topScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n\n    final Scorer scorer = scorer(context, acceptDocs);\n    if (scorer == null) {\n      // No docs match\n      return null;\n    }\n\n    // This impl always scores docs in order, so we can\n    // ignore scoreDocsInOrder:\n    return new TopScorer() {\n\n      @Override\n      public boolean score(Collector collector, int max) throws IOException {\n        // nocommit weird to do this here?  we do it many,\n        // many times from BS1 inside one segment?\n        collector.setScorer(scorer);\n        if (scorer.docID() == -1) {\n          scorer.nextDoc();\n        }\n        int doc;\n        for (doc = scorer.docID(); doc < max; doc = scorer.nextDoc()) {\n          collector.collect(doc);\n        }\n        return doc != DocsEnum.NO_MORE_DOCS;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"551db74111df22d4f6684319479c9f3d5f7ddf23","date":1394018258,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight#topScorer(AtomicReaderContext,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight#topScorer(AtomicReaderContext,boolean,Bits).mjava","sourceNew":"  /**\n   * Optional method, to return a {@link TopScorer} to\n   * score the query and send hits to a {@link Collector}.\n   * Only queries that have a different top-level approach\n   * need to override this; the default implementation\n   * pulls a normal {@link Scorer} and iterates and\n   * collects the resulting hits.\n   *\n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param scoreDocsInOrder\n   *          specifies whether in-order scoring of documents is required. Note\n   *          that if set to false (i.e., out-of-order scoring is required),\n   *          this method can return whatever scoring mode it supports, as every\n   *          in-order scorer is also an out-of-order one. However, an\n   *          out-of-order scorer may not support {@link Scorer#nextDoc()}\n   *          and/or {@link Scorer#advance(int)}, therefore it is recommended to\n   *          request an in-order scorer if use of these\n   *          methods is required.\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *\n   * @return a {@link TopScorer} which scores documents and\n   * passes them to a collector.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public TopScorer topScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n\n    final Scorer scorer = scorer(context, acceptDocs);\n    if (scorer == null) {\n      // No docs match\n      return null;\n    }\n\n    // This impl always scores docs in order, so we can\n    // ignore scoreDocsInOrder:\n    return new TopScorer() {\n\n      @Override\n      public boolean score(Collector collector, int max) throws IOException {\n        // nocommit weird to do this here?  we do it many,\n        // many times from BS1 inside one segment?\n        collector.setScorer(scorer);\n        if (scorer.docID() == -1) {\n          scorer.nextDoc();\n        }\n        int doc;\n        for (doc = scorer.docID(); doc < max; doc = scorer.nextDoc()) {\n          collector.collect(doc);\n        }\n        return doc != DocsEnum.NO_MORE_DOCS;\n      }\n    };\n  }\n\n","sourceOld":"  // nocommit jdocs\n  public TopScorer topScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n\n    final Scorer scorer = scorer(context, acceptDocs);\n    if (scorer == null) {\n      // No docs match\n      return null;\n    }\n\n    // This impl always scores docs in order, so we can\n    // ignore scoreDocsInOrder:\n    return new TopScorer() {\n\n      @Override\n      public boolean score(Collector collector, int max) throws IOException {\n        // nocommit weird to do this here?  we do it many,\n        // many times from BS1 inside one segment?\n        collector.setScorer(scorer);\n        if (scorer.docID() == -1) {\n          scorer.nextDoc();\n        }\n        int doc;\n        for (doc = scorer.docID(); doc < max; doc = scorer.nextDoc()) {\n          collector.collect(doc);\n        }\n        return doc != DocsEnum.NO_MORE_DOCS;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5a7a379c47cb10a09ea1ff0b2460819a73c5988","date":1394142503,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight#topScorer(AtomicReaderContext,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight#topScorer(AtomicReaderContext,boolean,Bits).mjava","sourceNew":"  /**\n   * Optional method, to return a {@link TopScorer} to\n   * score the query and send hits to a {@link Collector}.\n   * Only queries that have a different top-level approach\n   * need to override this; the default implementation\n   * pulls a normal {@link Scorer} and iterates and\n   * collects the resulting hits.\n   *\n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param scoreDocsInOrder\n   *          specifies whether in-order scoring of documents is required. Note\n   *          that if set to false (i.e., out-of-order scoring is required),\n   *          this method can return whatever scoring mode it supports, as every\n   *          in-order scorer is also an out-of-order one. However, an\n   *          out-of-order scorer may not support {@link Scorer#nextDoc()}\n   *          and/or {@link Scorer#advance(int)}, therefore it is recommended to\n   *          request an in-order scorer if use of these\n   *          methods is required.\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *\n   * @return a {@link TopScorer} which scores documents and\n   * passes them to a collector.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public TopScorer topScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n\n    Scorer scorer = scorer(context, acceptDocs);\n    if (scorer == null) {\n      // No docs match\n      return null;\n    }\n\n    // This impl always scores docs in order, so we can\n    // ignore scoreDocsInOrder:\n    return new DefaultTopScorer(scorer);\n  }\n\n","sourceOld":"  /**\n   * Optional method, to return a {@link TopScorer} to\n   * score the query and send hits to a {@link Collector}.\n   * Only queries that have a different top-level approach\n   * need to override this; the default implementation\n   * pulls a normal {@link Scorer} and iterates and\n   * collects the resulting hits.\n   *\n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param scoreDocsInOrder\n   *          specifies whether in-order scoring of documents is required. Note\n   *          that if set to false (i.e., out-of-order scoring is required),\n   *          this method can return whatever scoring mode it supports, as every\n   *          in-order scorer is also an out-of-order one. However, an\n   *          out-of-order scorer may not support {@link Scorer#nextDoc()}\n   *          and/or {@link Scorer#advance(int)}, therefore it is recommended to\n   *          request an in-order scorer if use of these\n   *          methods is required.\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *\n   * @return a {@link TopScorer} which scores documents and\n   * passes them to a collector.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public TopScorer topScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n\n    final Scorer scorer = scorer(context, acceptDocs);\n    if (scorer == null) {\n      // No docs match\n      return null;\n    }\n\n    // This impl always scores docs in order, so we can\n    // ignore scoreDocsInOrder:\n    return new TopScorer() {\n\n      @Override\n      public boolean score(Collector collector, int max) throws IOException {\n        // nocommit weird to do this here?  we do it many,\n        // many times from BS1 inside one segment?\n        collector.setScorer(scorer);\n        if (scorer.docID() == -1) {\n          scorer.nextDoc();\n        }\n        int doc;\n        for (doc = scorer.docID(); doc < max; doc = scorer.nextDoc()) {\n          collector.collect(doc);\n        }\n        return doc != DocsEnum.NO_MORE_DOCS;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5794e5c995c57444b154b01a9f3c837cd530a77","date":1394190201,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight#topScorer(AtomicReaderContext,boolean,Bits).mjava","sourceNew":"  /**\n   * Optional method, to return a {@link BulkScorer} to\n   * score the query and send hits to a {@link Collector}.\n   * Only queries that have a different top-level approach\n   * need to override this; the default implementation\n   * pulls a normal {@link Scorer} and iterates and\n   * collects the resulting hits.\n   *\n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param scoreDocsInOrder\n   *          specifies whether in-order scoring of documents is required. Note\n   *          that if set to false (i.e., out-of-order scoring is required),\n   *          this method can return whatever scoring mode it supports, as every\n   *          in-order scorer is also an out-of-order one. However, an\n   *          out-of-order scorer may not support {@link Scorer#nextDoc()}\n   *          and/or {@link Scorer#advance(int)}, therefore it is recommended to\n   *          request an in-order scorer if use of these\n   *          methods is required.\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *\n   * @return a {@link BulkScorer} which scores documents and\n   * passes them to a collector.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n\n    Scorer scorer = scorer(context, acceptDocs);\n    if (scorer == null) {\n      // No docs match\n      return null;\n    }\n\n    // This impl always scores docs in order, so we can\n    // ignore scoreDocsInOrder:\n    return new DefaultBulkScorer(scorer);\n  }\n\n","sourceOld":"  /**\n   * Optional method, to return a {@link TopScorer} to\n   * score the query and send hits to a {@link Collector}.\n   * Only queries that have a different top-level approach\n   * need to override this; the default implementation\n   * pulls a normal {@link Scorer} and iterates and\n   * collects the resulting hits.\n   *\n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param scoreDocsInOrder\n   *          specifies whether in-order scoring of documents is required. Note\n   *          that if set to false (i.e., out-of-order scoring is required),\n   *          this method can return whatever scoring mode it supports, as every\n   *          in-order scorer is also an out-of-order one. However, an\n   *          out-of-order scorer may not support {@link Scorer#nextDoc()}\n   *          and/or {@link Scorer#advance(int)}, therefore it is recommended to\n   *          request an in-order scorer if use of these\n   *          methods is required.\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *\n   * @return a {@link TopScorer} which scores documents and\n   * passes them to a collector.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public TopScorer topScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n\n    Scorer scorer = scorer(context, acceptDocs);\n    if (scorer == null) {\n      // No docs match\n      return null;\n    }\n\n    // This impl always scores docs in order, so we can\n    // ignore scoreDocsInOrder:\n    return new DefaultTopScorer(scorer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f5a7a379c47cb10a09ea1ff0b2460819a73c5988":["551db74111df22d4f6684319479c9f3d5f7ddf23"],"551db74111df22d4f6684319479c9f3d5f7ddf23":["2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5794e5c995c57444b154b01a9f3c837cd530a77":["f5a7a379c47cb10a09ea1ff0b2460819a73c5988"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["551db74111df22d4f6684319479c9f3d5f7ddf23"],"f5a7a379c47cb10a09ea1ff0b2460819a73c5988":["a5794e5c995c57444b154b01a9f3c837cd530a77"],"551db74111df22d4f6684319479c9f3d5f7ddf23":["f5a7a379c47cb10a09ea1ff0b2460819a73c5988"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5794e5c995c57444b154b01a9f3c837cd530a77":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a5794e5c995c57444b154b01a9f3c837cd530a77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}