{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTestCommon(ShingleFilter,Token[],int[],String[],boolean).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTestCommon(ShingleFilter,Token[],int[],String[],boolean).mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTestCommon(ShingleFilter,Token[],int[],String[],boolean).mjava","sourceNew":"  protected void shingleFilterTestCommon(ShingleFilter filter,\n                                         Token[] tokensToCompare,\n                                         int[] positionIncrements,\n                                         String[] types, boolean outputUnigrams)\n    throws IOException {\n\n    filter.setOutputUnigrams(outputUnigrams);\n\n    String text[] = new String[tokensToCompare.length];\n    int startOffsets[] = new int[tokensToCompare.length];\n    int endOffsets[] = new int[tokensToCompare.length];\n    \n    for (int i = 0; i < tokensToCompare.length; i++) {\n      text[i] = new String(tokensToCompare[i].buffer(),0, tokensToCompare[i].length());\n      startOffsets[i] = tokensToCompare[i].startOffset();\n      endOffsets[i] = tokensToCompare[i].endOffset();\n    }\n    \n    assertTokenStreamContents(filter, text, startOffsets, endOffsets, types, positionIncrements);\n  }\n\n","sourceOld":"  protected void shingleFilterTestCommon(ShingleFilter filter,\n                                         Token[] tokensToCompare,\n                                         int[] positionIncrements,\n                                         String[] types, boolean outputUnigrams)\n    throws IOException {\n\n    filter.setOutputUnigrams(outputUnigrams);\n\n    String text[] = new String[tokensToCompare.length];\n    int startOffsets[] = new int[tokensToCompare.length];\n    int endOffsets[] = new int[tokensToCompare.length];\n    \n    for (int i = 0; i < tokensToCompare.length; i++) {\n      text[i] = new String(tokensToCompare[i].buffer(),0, tokensToCompare[i].length());\n      startOffsets[i] = tokensToCompare[i].startOffset();\n      endOffsets[i] = tokensToCompare[i].endOffset();\n    }\n    \n    assertTokenStreamContents(filter, text, startOffsets, endOffsets, types, positionIncrements);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62dce719f7b1e83e0b4020f146a516e5cf618884","date":1286643323,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTestCommon(ShingleFilter,Token[],int[],String[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTestCommon(ShingleFilter,Token[],int[],String[],boolean).mjava","sourceNew":"  protected void shingleFilterTestCommon(ShingleFilter filter,\n                                         Token[] tokensToCompare,\n                                         int[] positionIncrements,\n                                         String[] types)\n    throws IOException {\n    String text[] = new String[tokensToCompare.length];\n    int startOffsets[] = new int[tokensToCompare.length];\n    int endOffsets[] = new int[tokensToCompare.length];\n    \n    for (int i = 0; i < tokensToCompare.length; i++) {\n      text[i] = new String(tokensToCompare[i].buffer(),0, tokensToCompare[i].length());\n      startOffsets[i] = tokensToCompare[i].startOffset();\n      endOffsets[i] = tokensToCompare[i].endOffset();\n    }\n    \n    assertTokenStreamContents(filter, text, startOffsets, endOffsets, types, positionIncrements);\n  }\n\n","sourceOld":"  protected void shingleFilterTestCommon(ShingleFilter filter,\n                                         Token[] tokensToCompare,\n                                         int[] positionIncrements,\n                                         String[] types, boolean outputUnigrams)\n    throws IOException {\n\n    filter.setOutputUnigrams(outputUnigrams);\n\n    String text[] = new String[tokensToCompare.length];\n    int startOffsets[] = new int[tokensToCompare.length];\n    int endOffsets[] = new int[tokensToCompare.length];\n    \n    for (int i = 0; i < tokensToCompare.length; i++) {\n      text[i] = new String(tokensToCompare[i].buffer(),0, tokensToCompare[i].length());\n      startOffsets[i] = tokensToCompare[i].startOffset();\n      endOffsets[i] = tokensToCompare[i].endOffset();\n    }\n    \n    assertTokenStreamContents(filter, text, startOffsets, endOffsets, types, positionIncrements);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTestCommon(ShingleFilter,Token[],int[],String[],boolean).mjava","sourceNew":null,"sourceOld":"  protected void shingleFilterTestCommon(ShingleFilter filter,\n                                         Token[] tokensToCompare,\n                                         int[] positionIncrements,\n                                         String[] types, boolean outputUnigrams)\n    throws IOException {\n\n    filter.setOutputUnigrams(outputUnigrams);\n\n    String text[] = new String[tokensToCompare.length];\n    int startOffsets[] = new int[tokensToCompare.length];\n    int endOffsets[] = new int[tokensToCompare.length];\n    \n    for (int i = 0; i < tokensToCompare.length; i++) {\n      text[i] = new String(tokensToCompare[i].buffer(),0, tokensToCompare[i].length());\n      startOffsets[i] = tokensToCompare[i].startOffset();\n      endOffsets[i] = tokensToCompare[i].endOffset();\n    }\n    \n    assertTokenStreamContents(filter, text, startOffsets, endOffsets, types, positionIncrements);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"62dce719f7b1e83e0b4020f146a516e5cf618884":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","62dce719f7b1e83e0b4020f146a516e5cf618884"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["62dce719f7b1e83e0b4020f146a516e5cf618884"]},"commit2Childs":{"62dce719f7b1e83e0b4020f146a516e5cf618884":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["62dce719f7b1e83e0b4020f146a516e5cf618884","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}