{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simAddNodeValue(String,String,Object).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simAddNodeValue(String,String,Object).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simAddNodeValue(String,String,Object).mjava","sourceNew":"  /**\n   * Add a node value, creating a list of values if necessary.\n   * NOTE: if key is 'nodeRole' then /roles.json is updated.\n   * @param node node id\n   * @param key property name\n   * @param value property value.\n   */\n  public void simAddNodeValue(String node, String key, Object value) throws InterruptedException {\n    lock.lockInterruptibly();\n    try {\n      Map<String, Object> values = nodeValues.computeIfAbsent(node, n -> new ConcurrentHashMap<>());\n      Object existing = values.get(key);\n      if (existing == null) {\n        values.put(key, value);\n      } else if (existing instanceof Set) {\n        ((Set)existing).add(value);\n      } else {\n        Set<Object> vals = new HashSet<>();\n        vals.add(existing);\n        vals.add(value);\n        values.put(key, vals);\n      }\n      if (key.equals(\"nodeRole\")) {\n        saveRoles();\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Add a node value, creating a list of values if necessary.\n   * NOTE: if key is 'nodeRole' then /roles.json is updated.\n   * @param node node id\n   * @param key property name\n   * @param value property value.\n   */\n  public void simAddNodeValue(String node, String key, Object value) throws InterruptedException {\n    lock.lockInterruptibly();\n    try {\n      Map<String, Object> values = nodeValues.computeIfAbsent(node, n -> new ConcurrentHashMap<>());\n      Object existing = values.get(key);\n      if (existing == null) {\n        values.put(key, value);\n      } else if (existing instanceof Set) {\n        ((Set)existing).add(value);\n      } else {\n        Set<Object> vals = new HashSet<>();\n        vals.add(existing);\n        vals.add(value);\n        values.put(key, vals);\n      }\n      if (key.equals(\"nodeRole\")) {\n        saveRoles();\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simAddNodeValue(String,String,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simAddNodeValue(String,String,Object).mjava","sourceNew":"  /**\n   * Add a node value, creating a list of values if necessary.\n   * NOTE: if key is 'nodeRole' then /roles.json is updated.\n   * @param node node id\n   * @param key property name\n   * @param value property value.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public void simAddNodeValue(String node, String key, Object value) throws InterruptedException {\n    lock.lockInterruptibly();\n    try {\n      Map<String, Object> values = nodeValues.computeIfAbsent(node, n -> new ConcurrentHashMap<>());\n      Object existing = values.get(key);\n      if (existing == null) {\n        values.put(key, value);\n      } else if (existing instanceof Set) {\n        ((Set)existing).add(value);\n      } else {\n        Set<Object> vals = new HashSet<>();\n        vals.add(existing);\n        vals.add(value);\n        values.put(key, vals);\n      }\n      if (key.equals(\"nodeRole\")) {\n        saveRoles();\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Add a node value, creating a list of values if necessary.\n   * NOTE: if key is 'nodeRole' then /roles.json is updated.\n   * @param node node id\n   * @param key property name\n   * @param value property value.\n   */\n  public void simAddNodeValue(String node, String key, Object value) throws InterruptedException {\n    lock.lockInterruptibly();\n    try {\n      Map<String, Object> values = nodeValues.computeIfAbsent(node, n -> new ConcurrentHashMap<>());\n      Object existing = values.get(key);\n      if (existing == null) {\n        values.put(key, value);\n      } else if (existing instanceof Set) {\n        ((Set)existing).add(value);\n      } else {\n        Set<Object> vals = new HashSet<>();\n        vals.add(existing);\n        vals.add(value);\n        values.put(key, vals);\n      }\n      if (key.equals(\"nodeRole\")) {\n        saveRoles();\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simAddNodeValue(String,String,Object).mjava","sourceNew":null,"sourceOld":"  /**\n   * Add a node value, creating a list of values if necessary.\n   * NOTE: if key is 'nodeRole' then /roles.json is updated.\n   * @param node node id\n   * @param key property name\n   * @param value property value.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public void simAddNodeValue(String node, String key, Object value) throws InterruptedException {\n    lock.lockInterruptibly();\n    try {\n      Map<String, Object> values = nodeValues.computeIfAbsent(node, n -> new ConcurrentHashMap<>());\n      Object existing = values.get(key);\n      if (existing == null) {\n        values.put(key, value);\n      } else if (existing instanceof Set) {\n        ((Set)existing).add(value);\n      } else {\n        Set<Object> vals = new HashSet<>();\n        vals.add(existing);\n        vals.add(value);\n        values.put(key, vals);\n      }\n      if (key.equals(\"nodeRole\")) {\n        saveRoles();\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}