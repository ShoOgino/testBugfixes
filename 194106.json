{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testWildcard().mjava","commits":[{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testWildcard().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2.0\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^3\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(2.0f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2.0\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2.0\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^3\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(2.0f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2.0\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5629050969c1e696c5dc14e8639f3e733e8e33c","date":1313606044,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2.0\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^3\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(2.0f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2.0\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2.0\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^3\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(2.0f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2.0\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5629050969c1e696c5dc14e8639f3e733e8e33c":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5629050969c1e696c5dc14e8639f3e733e8e33c"]},"commit2Childs":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["b5629050969c1e696c5dc14e8639f3e733e8e33c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"b5629050969c1e696c5dc14e8639f3e733e8e33c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}