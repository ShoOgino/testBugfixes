{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","commits":[{"id":"0e75d826d1f37079d934ae6ec2016a235d96c041","date":1321875173,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req);\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n\n\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (Object o : doclist) {\n        if (o instanceof List) {\n          solrInputDocs.add(listToSolrInputDocument((List<NamedList>)o));\n        } else  {\n          solrInputDocs.add((SolrInputDocument)o);\n        }\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = (SolrInputDocument)o;\n          handler.document(sdoc, updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n\n\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (Object o : doclist) {\n        solrInputDocs.add((SolrInputDocument)o);\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"818d704eaaf0fba0561d0d2752832e1015053482","date":1327419676,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req);\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (Object o : doclist) {\n        if (o instanceof List) {\n          solrInputDocs.add(listToSolrInputDocument((List<NamedList>)o));\n        } else  {\n          solrInputDocs.add((SolrInputDocument)o);\n        }\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req);\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n\n\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (Object o : doclist) {\n        if (o instanceof List) {\n          solrInputDocs.add(listToSolrInputDocument((List<NamedList>)o));\n        } else  {\n          solrInputDocs.add((SolrInputDocument)o);\n        }\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req);\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (Object o : doclist) {\n        if (o instanceof List) {\n          solrInputDocs.add(listToSolrInputDocument((List<NamedList>)o));\n        } else  {\n          solrInputDocs.add((SolrInputDocument)o);\n        }\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req);\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n\n\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (Object o : doclist) {\n        if (o instanceof List) {\n          solrInputDocs.add(listToSolrInputDocument((List<NamedList>)o));\n        } else  {\n          solrInputDocs.add((SolrInputDocument)o);\n        }\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req);\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (Object o : doclist) {\n        if (o instanceof List) {\n          solrInputDocs.add(listToSolrInputDocument((List<NamedList>)o));\n        } else  {\n          solrInputDocs.add((SolrInputDocument)o);\n        }\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req);\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n\n\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (Object o : doclist) {\n        if (o instanceof List) {\n          solrInputDocs.add(listToSolrInputDocument((List<NamedList>)o));\n        } else  {\n          solrInputDocs.add((SolrInputDocument)o);\n        }\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fcfd8b392582391d5804daa94c05f917c7fbdc7","date":1370873427,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req);\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (Object o : doclist) {\n        if (o instanceof List) {\n          solrInputDocs.add(listToSolrInputDocument((List<NamedList>)o));\n        } else  {\n          solrInputDocs.add((SolrInputDocument)o);\n        }\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req);\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (Object o : doclist) {\n        if (o instanceof List) {\n          solrInputDocs.add(listToSolrInputDocument((List<NamedList>)o));\n        } else  {\n          solrInputDocs.add((SolrInputDocument)o);\n        }\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1","date":1378862385,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    Map<SolrInputDocument,Map<String,Object>>  docMap;\n    List<String> delById;\n    Map<String,Long> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req);\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Long>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    docMap =  (Map<SolrInputDocument,Map<String,Object>>) namedList[0].get(\"docsMap\");\n    \n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (Object o : doclist) {\n        if (o instanceof List) {\n          solrInputDocs.add(listToSolrInputDocument((List<NamedList>)o));\n        } else  {\n          solrInputDocs.add((SolrInputDocument)o);\n        }\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (docMap != null && !docMap.isEmpty()) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = docMap.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        Map<String,Object> map = entry.getValue();\n        Boolean overwrite = null;\n        Integer commitWithin = null;\n        if (map != null) {\n          overwrite = (Boolean) map.get(UpdateRequest.OVERWRITE);\n          commitWithin = (Integer) map.get(UpdateRequest.COMMIT_WITHIN);\n        }\n        updateRequest.add(entry.getKey(), commitWithin, overwrite);\n      }\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Long> entry : delByIdMap.entrySet()) {\n        updateRequest.deleteById(entry.getKey(), entry.getValue());\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req);\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (Object o : doclist) {\n        if (o instanceof List) {\n          solrInputDocs.add(listToSolrInputDocument((List<NamedList>)o));\n        } else  {\n          solrInputDocs.add((SolrInputDocument)o);\n        }\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":["f517609336abda4a2852a6d56a0d92b97f5f7a9f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f517609336abda4a2852a6d56a0d92b97f5f7a9f","date":1382153013,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    Map<SolrInputDocument,Map<String,Object>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req);\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    docMap =  (Map<SolrInputDocument,Map<String,Object>>) namedList[0].get(\"docsMap\");\n    \n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (Object o : doclist) {\n        if (o instanceof List) {\n          solrInputDocs.add(listToSolrInputDocument((List<NamedList>)o));\n        } else  {\n          solrInputDocs.add((SolrInputDocument)o);\n        }\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (docMap != null && !docMap.isEmpty()) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = docMap.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        Map<String,Object> map = entry.getValue();\n        Boolean overwrite = null;\n        Integer commitWithin = null;\n        if (map != null) {\n          overwrite = (Boolean) map.get(UpdateRequest.OVERWRITE);\n          commitWithin = (Integer) map.get(UpdateRequest.COMMIT_WITHIN);\n        }\n        updateRequest.add(entry.getKey(), commitWithin, overwrite);\n      }\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(\"ver\");\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    Map<SolrInputDocument,Map<String,Object>>  docMap;\n    List<String> delById;\n    Map<String,Long> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req);\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Long>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    docMap =  (Map<SolrInputDocument,Map<String,Object>>) namedList[0].get(\"docsMap\");\n    \n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (Object o : doclist) {\n        if (o instanceof List) {\n          solrInputDocs.add(listToSolrInputDocument((List<NamedList>)o));\n        } else  {\n          solrInputDocs.add((SolrInputDocument)o);\n        }\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (docMap != null && !docMap.isEmpty()) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = docMap.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        Map<String,Object> map = entry.getValue();\n        Boolean overwrite = null;\n        Integer commitWithin = null;\n        if (map != null) {\n          overwrite = (Boolean) map.get(UpdateRequest.OVERWRITE);\n          commitWithin = (Integer) map.get(UpdateRequest.COMMIT_WITHIN);\n        }\n        updateRequest.add(entry.getKey(), commitWithin, overwrite);\n      }\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Long> entry : delByIdMap.entrySet()) {\n        updateRequest.deleteById(entry.getKey(), entry.getValue());\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab8657e27d6bdd6107b9d64da71c635e1f47b59e","date":1390524786,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n          \n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      System.out.println(\"unmarchal params:\" + params);\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    docMap =  (List<Entry<SolrInputDocument,Map<Object,Object>>>) namedList[0].get(\"docsMap\");\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    Map<SolrInputDocument,Map<String,Object>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req);\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    docMap =  (Map<SolrInputDocument,Map<String,Object>>) namedList[0].get(\"docsMap\");\n    \n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (Object o : doclist) {\n        if (o instanceof List) {\n          solrInputDocs.add(listToSolrInputDocument((List<NamedList>)o));\n        } else  {\n          solrInputDocs.add((SolrInputDocument)o);\n        }\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (docMap != null && !docMap.isEmpty()) {\n      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = docMap.entrySet();\n      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {\n        Map<String,Object> map = entry.getValue();\n        Boolean overwrite = null;\n        Integer commitWithin = null;\n        if (map != null) {\n          overwrite = (Boolean) map.get(UpdateRequest.OVERWRITE);\n          commitWithin = (Integer) map.get(UpdateRequest.COMMIT_WITHIN);\n        }\n        updateRequest.add(entry.getKey(), commitWithin, overwrite);\n      }\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(\"ver\");\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":["8da82893d5e353d2449455b404921423e0ebc20c","8a07f36987c5fdea9c277dd14366d44b4ada5173"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a07f36987c5fdea9c277dd14366d44b4ada5173","date":1391091628,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n          \n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    docMap =  (List<Entry<SolrInputDocument,Map<Object,Object>>>) namedList[0].get(\"docsMap\");\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n          \n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      System.out.println(\"unmarchal params:\" + params);\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    docMap =  (List<Entry<SolrInputDocument,Map<Object,Object>>>) namedList[0].get(\"docsMap\");\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","bugFix":["ab8657e27d6bdd6107b9d64da71c635e1f47b59e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8da82893d5e353d2449455b404921423e0ebc20c","date":1393049956,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n          \n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n          \n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    docMap =  (List<Entry<SolrInputDocument,Map<Object,Object>>>) namedList[0].get(\"docsMap\");\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","bugFix":["ab8657e27d6bdd6107b9d64da71c635e1f47b59e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"747dd71fefcbc7142661c25334b74c518fef4d81","date":1423504825,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n          \n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(UpdateRequest.ROUTE))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(UpdateRequest.ROUTE));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n          \n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7749d6fa52f4781f8f7488f2bd18b0fbb5959d0b","date":1432083803,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        Object o = null;\n        while (true) {\n          if (o == null) {\n            o = readVal(fis);\n          }\n\n          if (o == END_OBJ) {\n            break;\n          }\n\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n\n          // peek at the next object to see if we're at the end\n          o = readVal(fis);\n          if (o == END_OBJ) {\n            // indicate that we've hit the last doc in the batch, used to enable optimizations when doing replication\n            updateRequest.lastDocInBatch();\n          }\n\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(UpdateRequest.ROUTE))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(UpdateRequest.ROUTE));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n          \n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(UpdateRequest.ROUTE))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(UpdateRequest.ROUTE));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        Object o = null;\n        while (true) {\n          if (o == null) {\n            o = readVal(fis);\n          }\n\n          if (o == END_OBJ) {\n            break;\n          }\n\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n\n          // peek at the next object to see if we're at the end\n          o = readVal(fis);\n          if (o == END_OBJ) {\n            // indicate that we've hit the last doc in the batch, used to enable optimizations when doing replication\n            updateRequest.lastDocInBatch();\n          }\n\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(ShardParams._ROUTE_))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(ShardParams._ROUTE_));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        Object o = null;\n        while (true) {\n          if (o == null) {\n            o = readVal(fis);\n          }\n\n          if (o == END_OBJ) {\n            break;\n          }\n\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n\n          // peek at the next object to see if we're at the end\n          o = readVal(fis);\n          if (o == END_OBJ) {\n            // indicate that we've hit the last doc in the batch, used to enable optimizations when doing replication\n            updateRequest.lastDocInBatch();\n          }\n\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(UpdateRequest.ROUTE))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(UpdateRequest.ROUTE));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        Object o = null;\n        while (true) {\n          if (o == null) {\n            o = readVal(fis);\n          }\n\n          if (o == END_OBJ) {\n            break;\n          }\n\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n\n          // peek at the next object to see if we're at the end\n          o = readVal(fis);\n          if (o == END_OBJ) {\n            // indicate that we've hit the last doc in the batch, used to enable optimizations when doing replication\n            updateRequest.lastDocInBatch();\n          }\n\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(ShardParams._ROUTE_))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(ShardParams._ROUTE_));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        Object o = null;\n        while (true) {\n          if (o == null) {\n            o = readVal(fis);\n          }\n\n          if (o == END_OBJ) {\n            break;\n          }\n\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n\n          // peek at the next object to see if we're at the end\n          o = readVal(fis);\n          if (o == END_OBJ) {\n            // indicate that we've hit the last doc in the batch, used to enable optimizations when doing replication\n            updateRequest.lastDocInBatch();\n          }\n\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(UpdateRequest.ROUTE))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(UpdateRequest.ROUTE));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","date":1497850557,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    try (JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        Object o = null;\n        while (true) {\n          if (o == null) {\n            o = readVal(fis);\n          }\n\n          if (o == END_OBJ) {\n            break;\n          }\n\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n\n          // peek at the next object to see if we're at the end\n          o = readVal(fis);\n          if (o == END_OBJ) {\n            // indicate that we've hit the last doc in the batch, used to enable optimizations when doing replication\n            updateRequest.lastDocInBatch();\n          }\n\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };) {\n\n      codec.unmarshal(is);\n    }\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(ShardParams._ROUTE_))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(ShardParams._ROUTE_));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        Object o = null;\n        while (true) {\n          if (o == null) {\n            o = readVal(fis);\n          }\n\n          if (o == END_OBJ) {\n            break;\n          }\n\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n\n          // peek at the next object to see if we're at the end\n          o = readVal(fis);\n          if (o == END_OBJ) {\n            // indicate that we've hit the last doc in the batch, used to enable optimizations when doing replication\n            updateRequest.lastDocInBatch();\n          }\n\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(ShardParams._ROUTE_))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(ShardParams._ROUTE_));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    try (JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        Object o = null;\n        while (true) {\n          if (o == null) {\n            o = readVal(fis);\n          }\n\n          if (o == END_OBJ) {\n            break;\n          }\n\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n\n          // peek at the next object to see if we're at the end\n          o = readVal(fis);\n          if (o == END_OBJ) {\n            // indicate that we've hit the last doc in the batch, used to enable optimizations when doing replication\n            updateRequest.lastDocInBatch();\n          }\n\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };) {\n\n      codec.unmarshal(is);\n    }\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(ShardParams._ROUTE_))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(ShardParams._ROUTE_));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        Object o = null;\n        while (true) {\n          if (o == null) {\n            o = readVal(fis);\n          }\n\n          if (o == END_OBJ) {\n            break;\n          }\n\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n\n          // peek at the next object to see if we're at the end\n          o = readVal(fis);\n          if (o == END_OBJ) {\n            // indicate that we've hit the last doc in the batch, used to enable optimizations when doing replication\n            updateRequest.lastDocInBatch();\n          }\n\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(ShardParams._ROUTE_))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(ShardParams._ROUTE_));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    try (JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        Object o = null;\n        while (true) {\n          if (o == null) {\n            o = readVal(fis);\n          }\n\n          if (o == END_OBJ) {\n            break;\n          }\n\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n\n          // peek at the next object to see if we're at the end\n          o = readVal(fis);\n          if (o == END_OBJ) {\n            // indicate that we've hit the last doc in the batch, used to enable optimizations when doing replication\n            updateRequest.lastDocInBatch();\n          }\n\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };) {\n\n      codec.unmarshal(is);\n    }\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(ShardParams._ROUTE_))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(ShardParams._ROUTE_));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        Object o = null;\n        while (true) {\n          if (o == null) {\n            o = readVal(fis);\n          }\n\n          if (o == END_OBJ) {\n            break;\n          }\n\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n\n          // peek at the next object to see if we're at the end\n          o = readVal(fis);\n          if (o == END_OBJ) {\n            // indicate that we've hit the last doc in the batch, used to enable optimizations when doing replication\n            updateRequest.lastDocInBatch();\n          }\n\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };\n\n    codec.unmarshal(is);\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(ShardParams._ROUTE_))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(ShardParams._ROUTE_));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129e5b874f99ae4e04f39c337c940dda690f2d38","date":1524504409,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    try (JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(params.toSolrParams()));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        Object o = null;\n        while (true) {\n          if (o == null) {\n            o = readVal(fis);\n          }\n\n          if (o == END_OBJ) {\n            break;\n          }\n\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(((NamedList) o).toSolrParams()));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n\n          // peek at the next object to see if we're at the end\n          o = readVal(fis);\n          if (o == END_OBJ) {\n            // indicate that we've hit the last doc in the batch, used to enable optimizations when doing replication\n            updateRequest.lastDocInBatch();\n          }\n\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };) {\n\n      codec.unmarshal(is);\n    }\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(params.toSolrParams()));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(ShardParams._ROUTE_))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(ShardParams._ROUTE_));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    try (JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        Object o = null;\n        while (true) {\n          if (o == null) {\n            o = readVal(fis);\n          }\n\n          if (o == END_OBJ) {\n            break;\n          }\n\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n\n          // peek at the next object to see if we're at the end\n          o = readVal(fis);\n          if (o == END_OBJ) {\n            // indicate that we've hit the last doc in the batch, used to enable optimizations when doing replication\n            updateRequest.lastDocInBatch();\n          }\n\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };) {\n\n      codec.unmarshal(is);\n    }\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(ShardParams._ROUTE_))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(ShardParams._ROUTE_));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7b5b9bd55a953275a0efc3c5272ed76129541fb","date":1546921668,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    try (JavaBinCodec codec = new StreamingCodec(namedList, updateRequest, handler)) {\n      codec.unmarshal(is);\n    }\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(params.toSolrParams()));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(ShardParams._ROUTE_))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(ShardParams._ROUTE_));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    try (JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(DataInputInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(DataInputInputStream fis) throws IOException {\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].get(\"params\");\n        updateRequest.setParams(new ModifiableSolrParams(params.toSolrParams()));\n        if (handler == null) return super.readIterator(fis);\n        Integer commitWithin = null;\n        Boolean overwrite = null;\n        Object o = null;\n        while (true) {\n          if (o == null) {\n            o = readVal(fis);\n          }\n\n          if (o == END_OBJ) {\n            break;\n          }\n\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(((NamedList) o).toSolrParams()));\n            handler.update(null, req, null, null);\n          } else if (o instanceof Map.Entry){\n            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();\n            Map p = (Map) ((Map.Entry) o).getValue();\n            if (p != null) {\n              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);\n              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);\n            }\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n\n          // peek at the next object to see if we're at the end\n          o = readVal(fis);\n          if (o == END_OBJ) {\n            // indicate that we've hit the last doc in the batch, used to enable optimizations when doing replication\n            updateRequest.lastDocInBatch();\n          }\n\n          handler.update(sdoc, updateRequest, commitWithin, overwrite);\n        }\n        return Collections.EMPTY_LIST;\n      }\n\n    };) {\n\n      codec.unmarshal(is);\n    }\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(params.toSolrParams()));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(ShardParams._ROUTE_))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(ShardParams._ROUTE_));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"074c4e385ea7c9ae29556e95c886ea0ccc614029","date":1571011658,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    try (JavaBinCodec codec = new StreamingCodec(namedList, updateRequest, handler)) {\n      codec.unmarshal(is);\n    }\n\n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(params.toSolrParams()));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n\n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(ShardParams._ROUTE_))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(ShardParams._ROUTE_));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n\n    return updateRequest;\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    try (JavaBinCodec codec = new StreamingCodec(namedList, updateRequest, handler)) {\n      codec.unmarshal(is);\n    }\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(params.toSolrParams()));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(ShardParams._ROUTE_))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(ShardParams._ROUTE_));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    try (JavaBinCodec codec = new StreamingCodec(namedList, updateRequest, handler)) {\n      codec.unmarshal(is);\n    }\n\n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(params.toSolrParams()));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n\n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(ShardParams._ROUTE_))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(ShardParams._ROUTE_));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n\n    return updateRequest;\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    try (JavaBinCodec codec = new StreamingCodec(namedList, updateRequest, handler)) {\n      codec.unmarshal(is);\n    }\n    \n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(params.toSolrParams()));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n    \n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n    \n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(ShardParams._ROUTE_))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(ShardParams._ROUTE_));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n  \n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    \n    return updateRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    try (JavaBinCodec codec = new StreamingCodec(namedList, updateRequest, handler)) {\n      codec.unmarshal(is);\n    }\n\n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(params.toSolrParams()));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n\n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(ShardParams._ROUTE_))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(ShardParams._ROUTE_));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n\n    return updateRequest;\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;\n    List<String> delById;\n    Map<String,Map<String,Object>> delByIdMap;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    try (JavaBinCodec codec = new StreamingCodec(namedList, updateRequest, handler)) {\n      codec.unmarshal(is);\n    }\n\n    // NOTE: if the update request contains only delete commands the params\n    // must be loaded now\n    if(updateRequest.getParams()==null) {\n      NamedList params = (NamedList) namedList[0].get(\"params\");\n      if(params!=null) {\n        updateRequest.setParams(new ModifiableSolrParams(params.toSolrParams()));\n      }\n    }\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get(\"delByIdMap\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n    Object docsMapObj = namedList[0].get(\"docsMap\");\n\n    if (docsMapObj instanceof Map) {//SOLR-5762\n      docMap =  new ArrayList(((Map)docsMapObj).entrySet());\n    } else {\n      docMap = (List<Entry<SolrInputDocument, Map<Object, Object>>>) docsMapObj;\n    }\n\n\n    // we don't add any docs, because they were already processed\n    // deletes are handled later, and must be passed back on the UpdateRequest\n\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByIdMap != null) {\n      for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {\n        Map<String,Object> params = entry.getValue();\n        if (params != null) {\n          Long version = (Long) params.get(UpdateRequest.VER);\n          if (params.containsKey(ShardParams._ROUTE_))\n            updateRequest.deleteById(entry.getKey(), (String) params.get(ShardParams._ROUTE_));\n          else\n          updateRequest.deleteById(entry.getKey(), version);\n        } else {\n          updateRequest.deleteById(entry.getKey());\n        }\n\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n\n    return updateRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["2fcfd8b392582391d5804daa94c05f917c7fbdc7"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["7749d6fa52f4781f8f7488f2bd18b0fbb5959d0b"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["074c4e385ea7c9ae29556e95c886ea0ccc614029"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["0e75d826d1f37079d934ae6ec2016a235d96c041","818d704eaaf0fba0561d0d2752832e1015053482"],"747dd71fefcbc7142661c25334b74c518fef4d81":["8da82893d5e353d2449455b404921423e0ebc20c"],"818d704eaaf0fba0561d0d2752832e1015053482":["0e75d826d1f37079d934ae6ec2016a235d96c041"],"28288370235ed02234a64753cdbf0c6ec096304a":["6d2dadc1f5ca8703d8659f4964961f9967935d75","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"2fcfd8b392582391d5804daa94c05f917c7fbdc7":["818d704eaaf0fba0561d0d2752832e1015053482"],"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":["7749d6fa52f4781f8f7488f2bd18b0fbb5959d0b"],"b7b5b9bd55a953275a0efc3c5272ed76129541fb":["129e5b874f99ae4e04f39c337c940dda690f2d38"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["0e75d826d1f37079d934ae6ec2016a235d96c041","818d704eaaf0fba0561d0d2752832e1015053482"],"8da82893d5e353d2449455b404921423e0ebc20c":["8a07f36987c5fdea9c277dd14366d44b4ada5173"],"f517609336abda4a2852a6d56a0d92b97f5f7a9f":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"ab8657e27d6bdd6107b9d64da71c635e1f47b59e":["f517609336abda4a2852a6d56a0d92b97f5f7a9f"],"7749d6fa52f4781f8f7488f2bd18b0fbb5959d0b":["747dd71fefcbc7142661c25334b74c518fef4d81"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["28288370235ed02234a64753cdbf0c6ec096304a"],"0e75d826d1f37079d934ae6ec2016a235d96c041":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"074c4e385ea7c9ae29556e95c886ea0ccc614029":["b7b5b9bd55a953275a0efc3c5272ed76129541fb"],"8a07f36987c5fdea9c277dd14366d44b4ada5173":["ab8657e27d6bdd6107b9d64da71c635e1f47b59e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e5fa6615014cd2288fe930f8c8bb726f9504961d","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"b0b597c65628ca9e73913a07e81691f8229bae35":["b7b5b9bd55a953275a0efc3c5272ed76129541fb","074c4e385ea7c9ae29556e95c886ea0ccc614029"]},"commit2Childs":{"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["f517609336abda4a2852a6d56a0d92b97f5f7a9f"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["28288370235ed02234a64753cdbf0c6ec096304a","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"818d704eaaf0fba0561d0d2752832e1015053482":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2fcfd8b392582391d5804daa94c05f917c7fbdc7","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"747dd71fefcbc7142661c25334b74c518fef4d81":["7749d6fa52f4781f8f7488f2bd18b0fbb5959d0b"],"28288370235ed02234a64753cdbf0c6ec096304a":["129e5b874f99ae4e04f39c337c940dda690f2d38"],"2fcfd8b392582391d5804daa94c05f917c7fbdc7":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"b7b5b9bd55a953275a0efc3c5272ed76129541fb":["074c4e385ea7c9ae29556e95c886ea0ccc614029","b0b597c65628ca9e73913a07e81691f8229bae35"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"8da82893d5e353d2449455b404921423e0ebc20c":["747dd71fefcbc7142661c25334b74c518fef4d81"],"f517609336abda4a2852a6d56a0d92b97f5f7a9f":["ab8657e27d6bdd6107b9d64da71c635e1f47b59e"],"ab8657e27d6bdd6107b9d64da71c635e1f47b59e":["8a07f36987c5fdea9c277dd14366d44b4ada5173"],"7749d6fa52f4781f8f7488f2bd18b0fbb5959d0b":["6d2dadc1f5ca8703d8659f4964961f9967935d75","e5fa6615014cd2288fe930f8c8bb726f9504961d"],"0e75d826d1f37079d934ae6ec2016a235d96c041":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","818d704eaaf0fba0561d0d2752832e1015053482","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["b7b5b9bd55a953275a0efc3c5272ed76129541fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e75d826d1f37079d934ae6ec2016a235d96c041"],"074c4e385ea7c9ae29556e95c886ea0ccc614029":["a7dfea4f7c80813344b0152e37fc18b31369e8ff","b0b597c65628ca9e73913a07e81691f8229bae35"],"8a07f36987c5fdea9c277dd14366d44b4ada5173":["8da82893d5e353d2449455b404921423e0ebc20c"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}