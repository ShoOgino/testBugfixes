{"path":"modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","commits":[{"id":"1f9f2355d68aab1348539f7a1603279405e566a4","date":1313634992,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","sourceNew":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Throwable {\n    DocIdSetIterator disi = filt.getDocIdSet(new AtomicReaderContext(reader)).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","sourceOld":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Throwable {\n    DocIdSetIterator disi = filt.getDocIdSet(new AtomicReaderContext(reader)).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4f5ec97a7b7e3e63d7c80c6e71db06e7ed0797b","date":1316724540,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","sourceNew":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Throwable {\n    // BooleanFilter never returns null DIS or null DISI!\n    DocIdSetIterator disi = filt.getDocIdSet(new AtomicReaderContext(reader)).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","sourceOld":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Throwable {\n    DocIdSetIterator disi = filt.getDocIdSet(new AtomicReaderContext(reader)).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a577e6c0f434f9db36661dde6ceabdb75ce92b86","date":1316954936,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","sourceNew":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Exception {\n    // BooleanFilter never returns null DIS or null DISI!\n    DocIdSetIterator disi = filt.getDocIdSet(new AtomicReaderContext(reader)).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","sourceOld":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Throwable {\n    // BooleanFilter never returns null DIS or null DISI!\n    DocIdSetIterator disi = filt.getDocIdSet(new AtomicReaderContext(reader)).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","sourceNew":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Exception {\n    // BooleanFilter never returns null DIS or null DISI!\n    DocIdSetIterator disi = filt.getDocIdSet(new AtomicReaderContext(reader), reader.getLiveDocs()).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","sourceOld":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Exception {\n    // BooleanFilter never returns null DIS or null DISI!\n    DocIdSetIterator disi = filt.getDocIdSet(new AtomicReaderContext(reader)).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e00dc2d44dc4e14788fbeb649970c757f024592d","date":1327883708,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","sourceNew":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Exception {\n    // BooleanFilter never returns null DIS or null DISI!\n    DocIdSetIterator disi = filt.getDocIdSet(reader.getTopReaderContext(), reader.getLiveDocs()).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","sourceOld":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Exception {\n    // BooleanFilter never returns null DIS or null DISI!\n    DocIdSetIterator disi = filt.getDocIdSet(new AtomicReaderContext(reader), reader.getLiveDocs()).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","sourceNew":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Exception {\n    // BooleanFilter never returns null DIS or null DISI!\n    DocIdSetIterator disi = filt.getDocIdSet(reader.getTopReaderContext(), reader.getLiveDocs()).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","sourceOld":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Exception {\n    // BooleanFilter never returns null DIS or null DISI!\n    DocIdSetIterator disi = filt.getDocIdSet(new AtomicReaderContext(reader), reader.getLiveDocs()).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","sourceNew":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Exception {\n    // BooleanFilter never returns null DIS or null DISI!\n    DocIdSetIterator disi = filt.getDocIdSet(reader.getTopReaderContext(), reader.getLiveDocs()).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","sourceOld":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Exception {\n    // BooleanFilter never returns null DIS or null DISI!\n    DocIdSetIterator disi = filt.getDocIdSet(reader.getTopReaderContext(), reader.getLiveDocs()).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a577e6c0f434f9db36661dde6ceabdb75ce92b86":["a4f5ec97a7b7e3e63d7c80c6e71db06e7ed0797b"],"6620df8541b174097b1133a4fc370adb2e570524":["a577e6c0f434f9db36661dde6ceabdb75ce92b86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e00dc2d44dc4e14788fbeb649970c757f024592d":["6620df8541b174097b1133a4fc370adb2e570524"],"a4f5ec97a7b7e3e63d7c80c6e71db06e7ed0797b":["1f9f2355d68aab1348539f7a1603279405e566a4"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["6620df8541b174097b1133a4fc370adb2e570524","e00dc2d44dc4e14788fbeb649970c757f024592d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1f9f2355d68aab1348539f7a1603279405e566a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a577e6c0f434f9db36661dde6ceabdb75ce92b86":["6620df8541b174097b1133a4fc370adb2e570524"],"6620df8541b174097b1133a4fc370adb2e570524":["e00dc2d44dc4e14788fbeb649970c757f024592d","5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f9f2355d68aab1348539f7a1603279405e566a4"],"e00dc2d44dc4e14788fbeb649970c757f024592d":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a4f5ec97a7b7e3e63d7c80c6e71db06e7ed0797b":["a577e6c0f434f9db36661dde6ceabdb75ce92b86"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1f9f2355d68aab1348539f7a1603279405e566a4":["a4f5ec97a7b7e3e63d7c80c6e71db06e7ed0797b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}