{"path":"lucene/src/java/org/apache/lucene/util/BytesRef#bytesEquals(BytesRef).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef#bytesEquals(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  public boolean bytesEquals(BytesRef other) {\n    if (length == other.length) {\n      int otherUpto = other.offset;\n      final byte[] otherBytes = other.bytes;\n      final int end = offset + length;\n      for(int upto=offset;upto<end;upto++,otherUpto++) {\n        if (bytes[upto] != otherBytes[otherUpto]) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867c935d21f9b0e5740841f988a4919546dcb374","date":1322417002,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef#bytesEquals(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef#bytesEquals(BytesRef).mjava","sourceNew":"  /**\n   * Expert: compares the bytes against another BytesRef,\n   * returning true if the bytes are equal.\n   * \n   * @param other Another BytesRef, should not be null.\n   * @lucene.internal\n   */\n  public boolean bytesEquals(BytesRef other) {\n    assert other != null;\n    if (length == other.length) {\n      int otherUpto = other.offset;\n      final byte[] otherBytes = other.bytes;\n      final int end = offset + length;\n      for(int upto=offset;upto<end;upto++,otherUpto++) {\n        if (bytes[upto] != otherBytes[otherUpto]) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  public boolean bytesEquals(BytesRef other) {\n    if (length == other.length) {\n      int otherUpto = other.offset;\n      final byte[] otherBytes = other.bytes;\n      final int end = offset + length;\n      for(int upto=offset;upto<end;upto++,otherUpto++) {\n        if (bytes[upto] != otherBytes[otherUpto]) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef#bytesEquals(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef#bytesEquals(BytesRef).mjava","sourceNew":"  /**\n   * Expert: compares the bytes against another BytesRef,\n   * returning true if the bytes are equal.\n   * \n   * @param other Another BytesRef, should not be null.\n   * @lucene.internal\n   */\n  public boolean bytesEquals(BytesRef other) {\n    assert other != null;\n    if (length == other.length) {\n      int otherUpto = other.offset;\n      final byte[] otherBytes = other.bytes;\n      final int end = offset + length;\n      for(int upto=offset;upto<end;upto++,otherUpto++) {\n        if (bytes[upto] != otherBytes[otherUpto]) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: compares the bytes against another BytesRef,\n   * returning true if the bytes are equal.\n   * \n   * @param other Another BytesRef, should not be null.\n   * @lucene.internal\n   */\n  public boolean bytesEquals(BytesRef other) {\n    assert other != null;\n    if (length == other.length) {\n      int otherUpto = other.offset;\n      final byte[] otherBytes = other.bytes;\n      final int end = offset + length;\n      for(int upto=offset;upto<end;upto++,otherUpto++) {\n        if (bytes[upto] != otherBytes[otherUpto]) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["867c935d21f9b0e5740841f988a4919546dcb374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"867c935d21f9b0e5740841f988a4919546dcb374":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["867c935d21f9b0e5740841f988a4919546dcb374"],"867c935d21f9b0e5740841f988a4919546dcb374":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}