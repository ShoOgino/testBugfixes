{"path":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testCreateErrors().mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testCreateErrors().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCreateErrors() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"configSet\");\n\n    // no action\n    CreateNoErrorChecking createNoAction = new CreateNoErrorChecking();\n    createNoAction.setAction(null);\n    verifyException(solrClient, createNoAction, \"action\");\n\n    // no ConfigSet name\n    CreateNoErrorChecking create = new CreateNoErrorChecking();\n    verifyException(solrClient, create, NAME);\n\n    // no base ConfigSet name\n    create.setConfigSetName(\"configSetName\");\n    verifyException(solrClient, create, BASE_CONFIGSET);\n\n    // ConfigSet already exists\n    Create alreadyExists = new Create();\n    alreadyExists.setConfigSetName(\"configSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, alreadyExists, \"ConfigSet already exists\");\n\n    // Base ConfigSet does not exist\n    Create baseConfigNoExists = new Create();\n    baseConfigNoExists.setConfigSetName(\"newConfigSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, baseConfigNoExists, \"Base ConfigSet does not exist\");\n\n    solrClient.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testCreateErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testCreateErrors().mjava","sourceNew":"  @Test\n  public void testCreateErrors() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"configSet\");\n\n    // no action\n    CreateNoErrorChecking createNoAction = new CreateNoErrorChecking();\n    createNoAction.setAction(null);\n    verifyException(solrClient, createNoAction, \"action\");\n\n    // no ConfigSet name\n    CreateNoErrorChecking create = new CreateNoErrorChecking();\n    verifyException(solrClient, create, NAME);\n\n    // no base ConfigSet name\n    create.setConfigSetName(\"configSetName\");\n    verifyException(solrClient, create, BASE_CONFIGSET);\n\n    // ConfigSet already exists\n    Create alreadyExists = new Create();\n    alreadyExists.setConfigSetName(\"configSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, alreadyExists, \"ConfigSet already exists\");\n\n    // Base ConfigSet does not exist\n    Create baseConfigNoExists = new Create();\n    baseConfigNoExists.setConfigSetName(\"newConfigSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, baseConfigNoExists, \"Base ConfigSet does not exist\");\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCreateErrors() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"configSet\");\n\n    // no action\n    CreateNoErrorChecking createNoAction = new CreateNoErrorChecking();\n    createNoAction.setAction(null);\n    verifyException(solrClient, createNoAction, \"action\");\n\n    // no ConfigSet name\n    CreateNoErrorChecking create = new CreateNoErrorChecking();\n    verifyException(solrClient, create, NAME);\n\n    // no base ConfigSet name\n    create.setConfigSetName(\"configSetName\");\n    verifyException(solrClient, create, BASE_CONFIGSET);\n\n    // ConfigSet already exists\n    Create alreadyExists = new Create();\n    alreadyExists.setConfigSetName(\"configSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, alreadyExists, \"ConfigSet already exists\");\n\n    // Base ConfigSet does not exist\n    Create baseConfigNoExists = new Create();\n    baseConfigNoExists.setConfigSetName(\"newConfigSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, baseConfigNoExists, \"Base ConfigSet does not exist\");\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testCreateErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testCreateErrors().mjava","sourceNew":"  @Test\n  public void testCreateErrors() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"configSet\");\n\n    // no action\n    CreateNoErrorChecking createNoAction = new CreateNoErrorChecking();\n    createNoAction.setAction(null);\n    verifyException(solrClient, createNoAction, \"action\");\n\n    // no ConfigSet name\n    CreateNoErrorChecking create = new CreateNoErrorChecking();\n    verifyException(solrClient, create, NAME);\n\n    // no base ConfigSet name\n    create.setConfigSetName(\"configSetName\");\n    verifyException(solrClient, create, BASE_CONFIGSET);\n\n    // ConfigSet already exists\n    Create alreadyExists = new Create();\n    alreadyExists.setConfigSetName(\"configSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, alreadyExists, \"ConfigSet already exists\");\n\n    // Base ConfigSet does not exist\n    Create baseConfigNoExists = new Create();\n    baseConfigNoExists.setConfigSetName(\"newConfigSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, baseConfigNoExists, \"Base ConfigSet does not exist\");\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCreateErrors() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"configSet\");\n\n    // no action\n    CreateNoErrorChecking createNoAction = new CreateNoErrorChecking();\n    createNoAction.setAction(null);\n    verifyException(solrClient, createNoAction, \"action\");\n\n    // no ConfigSet name\n    CreateNoErrorChecking create = new CreateNoErrorChecking();\n    verifyException(solrClient, create, NAME);\n\n    // no base ConfigSet name\n    create.setConfigSetName(\"configSetName\");\n    verifyException(solrClient, create, BASE_CONFIGSET);\n\n    // ConfigSet already exists\n    Create alreadyExists = new Create();\n    alreadyExists.setConfigSetName(\"configSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, alreadyExists, \"ConfigSet already exists\");\n\n    // Base ConfigSet does not exist\n    Create baseConfigNoExists = new Create();\n    baseConfigNoExists.setConfigSetName(\"newConfigSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, baseConfigNoExists, \"Base ConfigSet does not exist\");\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e89a32cc825033ebae8bb9e1c6877c2d9d76749e","date":1476790453,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testCreateErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testCreateErrors().mjava","sourceNew":"  @Test\n  public void testCreateErrors() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    solrCluster.uploadConfigSet(configset(\"configset-2\"), \"configSet\");\n\n    // no action\n    CreateNoErrorChecking createNoAction = new CreateNoErrorChecking();\n    createNoAction.setAction(null);\n    verifyException(solrClient, createNoAction, \"action\");\n\n    // no ConfigSet name\n    CreateNoErrorChecking create = new CreateNoErrorChecking();\n    verifyException(solrClient, create, NAME);\n\n    // no base ConfigSet name\n    create.setConfigSetName(\"configSetName\");\n    verifyException(solrClient, create, BASE_CONFIGSET);\n\n    // ConfigSet already exists\n    Create alreadyExists = new Create();\n    alreadyExists.setConfigSetName(\"configSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, alreadyExists, \"ConfigSet already exists\");\n\n    // Base ConfigSet does not exist\n    Create baseConfigNoExists = new Create();\n    baseConfigNoExists.setConfigSetName(\"newConfigSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, baseConfigNoExists, \"Base ConfigSet does not exist\");\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCreateErrors() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"configSet\");\n\n    // no action\n    CreateNoErrorChecking createNoAction = new CreateNoErrorChecking();\n    createNoAction.setAction(null);\n    verifyException(solrClient, createNoAction, \"action\");\n\n    // no ConfigSet name\n    CreateNoErrorChecking create = new CreateNoErrorChecking();\n    verifyException(solrClient, create, NAME);\n\n    // no base ConfigSet name\n    create.setConfigSetName(\"configSetName\");\n    verifyException(solrClient, create, BASE_CONFIGSET);\n\n    // ConfigSet already exists\n    Create alreadyExists = new Create();\n    alreadyExists.setConfigSetName(\"configSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, alreadyExists, \"ConfigSet already exists\");\n\n    // Base ConfigSet does not exist\n    Create baseConfigNoExists = new Create();\n    baseConfigNoExists.setConfigSetName(\"newConfigSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, baseConfigNoExists, \"Base ConfigSet does not exist\");\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testCreateErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testCreateErrors().mjava","sourceNew":"  @Test\n  public void testCreateErrors() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    solrCluster.uploadConfigSet(configset(\"configset-2\"), \"configSet\");\n\n    // no action\n    CreateNoErrorChecking createNoAction = new CreateNoErrorChecking();\n    createNoAction.setAction(null);\n    verifyException(solrClient, createNoAction, \"action\");\n\n    // no ConfigSet name\n    CreateNoErrorChecking create = new CreateNoErrorChecking();\n    verifyException(solrClient, create, NAME);\n\n    // no base ConfigSet name\n    create.setConfigSetName(\"configSetName\");\n    verifyException(solrClient, create, BASE_CONFIGSET);\n\n    // ConfigSet already exists\n    Create alreadyExists = new Create();\n    alreadyExists.setConfigSetName(\"configSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, alreadyExists, \"ConfigSet already exists\");\n\n    // Base ConfigSet does not exist\n    Create baseConfigNoExists = new Create();\n    baseConfigNoExists.setConfigSetName(\"newConfigSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, baseConfigNoExists, \"Base ConfigSet does not exist\");\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCreateErrors() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    solrCluster.uploadConfigDir(configDir, \"configSet\");\n\n    // no action\n    CreateNoErrorChecking createNoAction = new CreateNoErrorChecking();\n    createNoAction.setAction(null);\n    verifyException(solrClient, createNoAction, \"action\");\n\n    // no ConfigSet name\n    CreateNoErrorChecking create = new CreateNoErrorChecking();\n    verifyException(solrClient, create, NAME);\n\n    // no base ConfigSet name\n    create.setConfigSetName(\"configSetName\");\n    verifyException(solrClient, create, BASE_CONFIGSET);\n\n    // ConfigSet already exists\n    Create alreadyExists = new Create();\n    alreadyExists.setConfigSetName(\"configSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, alreadyExists, \"ConfigSet already exists\");\n\n    // Base ConfigSet does not exist\n    Create baseConfigNoExists = new Create();\n    baseConfigNoExists.setConfigSetName(\"newConfigSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, baseConfigNoExists, \"Base ConfigSet does not exist\");\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29778bfb04e9115636606cb8f74e23ecba15c7b","date":1536084166,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testCreateErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testCreateErrors().mjava","sourceNew":"  @Test\n  public void testCreateErrors() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    solrCluster.uploadConfigSet(configset(\"configset-2\"), \"configSet\");\n\n    // no action\n    CreateNoErrorChecking createNoAction = new CreateNoErrorChecking();\n    createNoAction.setAction(null);\n    verifyException(solrClient, createNoAction, \"action\");\n\n    // no ConfigSet name\n    CreateNoErrorChecking create = new CreateNoErrorChecking();\n    verifyException(solrClient, create, NAME);\n\n    // set ConfigSet\n    create.setConfigSetName(\"configSetName\");\n\n    // ConfigSet already exists\n    Create alreadyExists = new Create();\n    alreadyExists.setConfigSetName(\"configSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, alreadyExists, \"ConfigSet already exists\");\n\n    // Base ConfigSet does not exist\n    Create baseConfigNoExists = new Create();\n    baseConfigNoExists.setConfigSetName(\"newConfigSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, baseConfigNoExists, \"Base ConfigSet does not exist\");\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCreateErrors() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    solrCluster.uploadConfigSet(configset(\"configset-2\"), \"configSet\");\n\n    // no action\n    CreateNoErrorChecking createNoAction = new CreateNoErrorChecking();\n    createNoAction.setAction(null);\n    verifyException(solrClient, createNoAction, \"action\");\n\n    // no ConfigSet name\n    CreateNoErrorChecking create = new CreateNoErrorChecking();\n    verifyException(solrClient, create, NAME);\n\n    // no base ConfigSet name\n    create.setConfigSetName(\"configSetName\");\n    verifyException(solrClient, create, BASE_CONFIGSET);\n\n    // ConfigSet already exists\n    Create alreadyExists = new Create();\n    alreadyExists.setConfigSetName(\"configSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, alreadyExists, \"ConfigSet already exists\");\n\n    // Base ConfigSet does not exist\n    Create baseConfigNoExists = new Create();\n    baseConfigNoExists.setConfigSetName(\"newConfigSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, baseConfigNoExists, \"Base ConfigSet does not exist\");\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7612891097d4751617c396cdd7a092833799147","date":1600707827,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testCreateErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testCreateErrors().mjava","sourceNew":"  @Test\n  public void testCreateErrors() throws Exception {\n    final String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    zkConfigManager.uploadConfigDir(configset(\"configset-2\"), \"configSet\");\n\n    // no action\n    CreateNoErrorChecking createNoAction = new CreateNoErrorChecking();\n    createNoAction.setAction(null);\n    verifyException(solrClient, createNoAction, \"action\");\n\n    // no ConfigSet name\n    CreateNoErrorChecking create = new CreateNoErrorChecking();\n    verifyException(solrClient, create, NAME);\n\n    // set ConfigSet\n    create.setConfigSetName(\"configSetName\");\n\n    // ConfigSet already exists\n    Create alreadyExists = new Create();\n    alreadyExists.setConfigSetName(\"configSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, alreadyExists, \"ConfigSet already exists\");\n\n    // Base ConfigSet does not exist\n    Create baseConfigNoExists = new Create();\n    baseConfigNoExists.setConfigSetName(\"newConfigSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, baseConfigNoExists, \"Base ConfigSet does not exist\");\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCreateErrors() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    solrCluster.uploadConfigSet(configset(\"configset-2\"), \"configSet\");\n\n    // no action\n    CreateNoErrorChecking createNoAction = new CreateNoErrorChecking();\n    createNoAction.setAction(null);\n    verifyException(solrClient, createNoAction, \"action\");\n\n    // no ConfigSet name\n    CreateNoErrorChecking create = new CreateNoErrorChecking();\n    verifyException(solrClient, create, NAME);\n\n    // set ConfigSet\n    create.setConfigSetName(\"configSetName\");\n\n    // ConfigSet already exists\n    Create alreadyExists = new Create();\n    alreadyExists.setConfigSetName(\"configSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, alreadyExists, \"ConfigSet already exists\");\n\n    // Base ConfigSet does not exist\n    Create baseConfigNoExists = new Create();\n    baseConfigNoExists.setConfigSetName(\"newConfigSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, baseConfigNoExists, \"Base ConfigSet does not exist\");\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01ee5edcdd3cffaab03842feda0c26516290698","date":1601586820,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testCreateErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testCreateErrors().mjava","sourceNew":"  @Test\n  public void testCreateErrors() throws Exception {\n    final String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    try (final SolrClient solrClient = getHttpSolrClient(baseUrl)) {\n      zkConfigManager.uploadConfigDir(configset(\"configset-2\"), \"configSet\");\n\n      // no action\n      CreateNoErrorChecking createNoAction = new CreateNoErrorChecking();\n      createNoAction.setAction(null);\n      verifyException(solrClient, createNoAction, \"action\");\n\n      // no ConfigSet name\n      CreateNoErrorChecking create = new CreateNoErrorChecking();\n      verifyException(solrClient, create, NAME);\n\n      // set ConfigSet\n      create.setConfigSetName(\"configSetName\");\n\n      // ConfigSet already exists\n      Create alreadyExists = new Create();\n      alreadyExists.setConfigSetName(\"configSet\").setBaseConfigSetName(\"baseConfigSet\");\n      verifyException(solrClient, alreadyExists, \"ConfigSet already exists\");\n\n      // Base ConfigSet does not exist\n      Create baseConfigNoExists = new Create();\n      baseConfigNoExists.setConfigSetName(\"newConfigSet\").setBaseConfigSetName(\"baseConfigSet\");\n      verifyException(solrClient, baseConfigNoExists, \"Base ConfigSet does not exist\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCreateErrors() throws Exception {\n    final String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    zkConfigManager.uploadConfigDir(configset(\"configset-2\"), \"configSet\");\n\n    // no action\n    CreateNoErrorChecking createNoAction = new CreateNoErrorChecking();\n    createNoAction.setAction(null);\n    verifyException(solrClient, createNoAction, \"action\");\n\n    // no ConfigSet name\n    CreateNoErrorChecking create = new CreateNoErrorChecking();\n    verifyException(solrClient, create, NAME);\n\n    // set ConfigSet\n    create.setConfigSetName(\"configSetName\");\n\n    // ConfigSet already exists\n    Create alreadyExists = new Create();\n    alreadyExists.setConfigSetName(\"configSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, alreadyExists, \"ConfigSet already exists\");\n\n    // Base ConfigSet does not exist\n    Create baseConfigNoExists = new Create();\n    baseConfigNoExists.setConfigSetName(\"newConfigSet\").setBaseConfigSetName(\"baseConfigSet\");\n    verifyException(solrClient, baseConfigNoExists, \"Base ConfigSet does not exist\");\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7612891097d4751617c396cdd7a092833799147":["e29778bfb04e9115636606cb8f74e23ecba15c7b"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c01ee5edcdd3cffaab03842feda0c26516290698":["c7612891097d4751617c396cdd7a092833799147"],"e29778bfb04e9115636606cb8f74e23ecba15c7b":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["2209af2c265d2258ec4b29c8cc78622d36994a15","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c01ee5edcdd3cffaab03842feda0c26516290698"]},"commit2Childs":{"c7612891097d4751617c396cdd7a092833799147":["c01ee5edcdd3cffaab03842feda0c26516290698"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["e29778bfb04e9115636606cb8f74e23ecba15c7b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e29778bfb04e9115636606cb8f74e23ecba15c7b":["c7612891097d4751617c396cdd7a092833799147"],"c01ee5edcdd3cffaab03842feda0c26516290698":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}