{"path":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,SolrParams,IndexSchema).mjava","commits":[{"id":"2ae0782f8714819fbf2b48737d98875f3cea82a9","date":1158171441,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,SolrParams,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param qs query expression\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param params used to determine the default operator, overriding the schema specified operator\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   * @return\n   */\n  public static Query parseQuery(String qs, String defaultField, SolrParams params, IndexSchema schema) {\n    try {\n      String opParam = params.get(OP, schema.getQueryParserDefaultOperator());\n      QueryParser.Operator defaultOperator = \"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR;\n      SolrQueryParser parser = new SolrQueryParser(schema, defaultField);\n      parser.setDefaultOperator(defaultOperator);\n      Query query = parser.parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(400,\"Error parsing Lucene query\",e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c686ad76bb74d110ec3c727914fb5693a7da23","date":1158901446,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,SolrParams,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,SolrParams,IndexSchema).mjava","sourceNew":"  /**\n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param params used to determine the default operator, overriding the schema specified operator\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, SolrParams params, IndexSchema schema) {\n    try {\n      String opParam = params.get(OP, schema.getQueryParserDefaultOperator());\n      QueryParser.Operator defaultOperator = \"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR;\n      SolrQueryParser parser = new SolrQueryParser(schema, defaultField);\n      parser.setDefaultOperator(defaultOperator);\n      Query query = parser.parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(400,\"Error parsing Lucene query\",e);\n    }\n  }\n\n","sourceOld":"  /**\n   * @param qs query expression\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param params used to determine the default operator, overriding the schema specified operator\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   * @return\n   */\n  public static Query parseQuery(String qs, String defaultField, SolrParams params, IndexSchema schema) {\n    try {\n      String opParam = params.get(OP, schema.getQueryParserDefaultOperator());\n      QueryParser.Operator defaultOperator = \"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR;\n      SolrQueryParser parser = new SolrQueryParser(schema, defaultField);\n      parser.setDefaultOperator(defaultOperator);\n      Query query = parser.parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(400,\"Error parsing Lucene query\",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28f87e4e419c12d17fbe4945b9676539e91e0a7f","date":1160170998,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,SolrParams,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,SolrParams,IndexSchema).mjava","sourceNew":"  /**\n   * Helper utility for parsing a query using the Lucene QueryParser syntax. \n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param params used to determine the default operator, overriding the schema specified operator\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, SolrParams params, IndexSchema schema) {\n    try {\n      String opParam = params.get(OP, schema.getQueryParserDefaultOperator());\n      QueryParser.Operator defaultOperator = \"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR;\n      SolrQueryParser parser = new SolrQueryParser(schema, defaultField);\n      parser.setDefaultOperator(defaultOperator);\n      Query query = parser.parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(400,\"Error parsing Lucene query\",e);\n    }\n  }\n\n","sourceOld":"  /**\n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param params used to determine the default operator, overriding the schema specified operator\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, SolrParams params, IndexSchema schema) {\n    try {\n      String opParam = params.get(OP, schema.getQueryParserDefaultOperator());\n      QueryParser.Operator defaultOperator = \"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR;\n      SolrQueryParser parser = new SolrQueryParser(schema, defaultField);\n      parser.setDefaultOperator(defaultOperator);\n      Query query = parser.parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(400,\"Error parsing Lucene query\",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be8ed1a226944f6331478d1e92b3d8713b0fceea","date":1172106023,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,SolrParams,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,SolrParams,IndexSchema).mjava","sourceNew":"  /**\n   * Helper utility for parsing a query using the Lucene QueryParser syntax. \n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param params used to determine the default operator, overriding the schema specified operator\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, SolrParams params, IndexSchema schema) {\n    try {\n      SolrQueryParser parser = new SolrQueryParser(schema, defaultField);\n      String opParam = params.get(OP);\n      if (opParam != null) {\n        parser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n      }\n      Query query = parser.parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(400,\"Error parsing Lucene query\",e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper utility for parsing a query using the Lucene QueryParser syntax. \n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param params used to determine the default operator, overriding the schema specified operator\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, SolrParams params, IndexSchema schema) {\n    try {\n      String opParam = params.get(OP, schema.getQueryParserDefaultOperator());\n      QueryParser.Operator defaultOperator = \"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR;\n      SolrQueryParser parser = new SolrQueryParser(schema, defaultField);\n      parser.setDefaultOperator(defaultOperator);\n      Query query = parser.parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(400,\"Error parsing Lucene query\",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d1d1f748be6299a4bb58280fa1697824edc82c6","date":1172182682,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,SolrParams,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,SolrParams,IndexSchema).mjava","sourceNew":"  /**\n   * Helper utility for parsing a query using the Lucene QueryParser syntax. \n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param params used to determine the default operator, overriding the schema specified operator\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, SolrParams params, IndexSchema schema) {\n    try {\n      SolrQueryParser parser = schema.getSolrQueryParser(defaultField);\n      String opParam = params.get(OP);\n      if (opParam != null) {\n        parser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n      }\n      Query query = parser.parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(400,\"Error parsing Lucene query\",e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper utility for parsing a query using the Lucene QueryParser syntax. \n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param params used to determine the default operator, overriding the schema specified operator\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, SolrParams params, IndexSchema schema) {\n    try {\n      SolrQueryParser parser = new SolrQueryParser(schema, defaultField);\n      String opParam = params.get(OP);\n      if (opParam != null) {\n        parser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n      }\n      Query query = parser.parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(400,\"Error parsing Lucene query\",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0923b3337a44a00e4ad768bccfea5b45b43754a4","date":1177866029,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,SolrParams,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,SolrParams,IndexSchema).mjava","sourceNew":"  /**\n   * Helper utility for parsing a query using the Lucene QueryParser syntax. \n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param params used to determine the default operator, overriding the schema specified operator\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, SolrParams params, IndexSchema schema) {\n    try {\n      SolrQueryParser parser = schema.getSolrQueryParser(defaultField);\n      String opParam = params.get(OP);\n      if (opParam != null) {\n        parser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n      }\n      Query query = parser.parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(400,\"Query parsing error: \" + e.getMessage(),e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper utility for parsing a query using the Lucene QueryParser syntax. \n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param params used to determine the default operator, overriding the schema specified operator\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, SolrParams params, IndexSchema schema) {\n    try {\n      SolrQueryParser parser = schema.getSolrQueryParser(defaultField);\n      String opParam = params.get(OP);\n      if (opParam != null) {\n        parser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n      }\n      Query query = parser.parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(400,\"Error parsing Lucene query\",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,SolrParams,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,SolrParams,IndexSchema).mjava","sourceNew":"  /**\n   * Helper utility for parsing a query using the Lucene QueryParser syntax. \n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param params used to determine the default operator, overriding the schema specified operator\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, SolrParams params, IndexSchema schema) {\n    try {\n      SolrQueryParser parser = schema.getSolrQueryParser(defaultField);\n      String opParam = params.get(OP);\n      if (opParam != null) {\n        parser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n      }\n      Query query = parser.parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Query parsing error: \" + e.getMessage(),e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper utility for parsing a query using the Lucene QueryParser syntax. \n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param params used to determine the default operator, overriding the schema specified operator\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, SolrParams params, IndexSchema schema) {\n    try {\n      SolrQueryParser parser = schema.getSolrQueryParser(defaultField);\n      String opParam = params.get(OP);\n      if (opParam != null) {\n        parser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n      }\n      Query query = parser.parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(400,\"Query parsing error: \" + e.getMessage(),e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,SolrParams,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,SolrParams,IndexSchema).mjava","sourceNew":"  /**\n   * Helper utility for parsing a query using the Lucene QueryParser syntax. \n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param params used to determine the default operator, overriding the schema specified operator\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, SolrParams params, IndexSchema schema) {\n    try {\n      SolrQueryParser parser = schema.getSolrQueryParser(defaultField);\n      String opParam = params.get(OP);\n      if (opParam != null) {\n        parser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n      }\n      Query query = parser.parse(qs);\n\n      if (SolrCore.log.isTraceEnabled() ) {\n        SolrCore.log.trace(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Query parsing error: \" + e.getMessage(),e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper utility for parsing a query using the Lucene QueryParser syntax. \n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param params used to determine the default operator, overriding the schema specified operator\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, SolrParams params, IndexSchema schema) {\n    try {\n      SolrQueryParser parser = schema.getSolrQueryParser(defaultField);\n      String opParam = params.get(OP);\n      if (opParam != null) {\n        parser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n      }\n      Query query = parser.parse(qs);\n\n      if (SolrCore.log.isLoggable(Level.FINEST)) {\n        SolrCore.log.finest(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Query parsing error: \" + e.getMessage(),e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32ef722831135736529762b4b97a13dd58b06f66","date":1260567610,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,SolrParams,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,SolrParams,IndexSchema).mjava","sourceNew":"  /**\n   * Helper utility for parsing a query using the Lucene QueryParser syntax.\n   *\n   * @param qs           query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param params       used to determine the default operator, overriding the schema specified operator\n   * @param schema       used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, SolrParams params, IndexSchema schema) {\n    try {\n      SolrQueryParser parser = schema.getSolrQueryParser(defaultField);\n      String opParam = params.get(OP);\n      if (opParam != null) {\n        parser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n      }\n      Query query = parser.parse(qs);\n\n      if (SolrCore.log.isTraceEnabled()) {\n        SolrCore.log.trace(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Query parsing error: \" + e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper utility for parsing a query using the Lucene QueryParser syntax. \n   * @param qs query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param params used to determine the default operator, overriding the schema specified operator\n   * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, SolrParams params, IndexSchema schema) {\n    try {\n      SolrQueryParser parser = schema.getSolrQueryParser(defaultField);\n      String opParam = params.get(OP);\n      if (opParam != null) {\n        parser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n      }\n      Query query = parser.parse(qs);\n\n      if (SolrCore.log.isTraceEnabled() ) {\n        SolrCore.log.trace(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Query parsing error: \" + e.getMessage(),e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,SolrParams,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseQuery(String,String,SolrParams,IndexSchema).mjava","sourceNew":"  /**\n   * Helper utility for parsing a query using the Lucene QueryParser syntax.\n   *\n   * @param qs           query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param params       used to determine the default operator, overriding the schema specified operator\n   * @param schema       used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, SolrParams params, IndexSchema schema) {\n    try {\n      SolrQueryParser parser = schema.getSolrQueryParser(defaultField);\n      String opParam = params.get(OP);\n      if (opParam != null) {\n        parser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n      }\n      Query query = parser.parse(qs);\n\n      if (SolrCore.log.isTraceEnabled()) {\n        SolrCore.log.trace(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Query parsing error: \" + e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper utility for parsing a query using the Lucene QueryParser syntax.\n   *\n   * @param qs           query expression in standard Lucene syntax\n   * @param defaultField default field used for unqualified search terms in the query expression\n   * @param params       used to determine the default operator, overriding the schema specified operator\n   * @param schema       used for default operator (overridden by params) and passed to the query parser for field format analysis information\n   */\n  public static Query parseQuery(String qs, String defaultField, SolrParams params, IndexSchema schema) {\n    try {\n      SolrQueryParser parser = schema.getSolrQueryParser(defaultField);\n      String opParam = params.get(OP);\n      if (opParam != null) {\n        parser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n      }\n      Query query = parser.parse(qs);\n\n      if (SolrCore.log.isTraceEnabled()) {\n        SolrCore.log.trace(\"After QueryParser:\" + query);\n      }\n\n      return query;\n\n    } catch (ParseException e) {\n      SolrCore.log(e);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Query parsing error: \" + e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be8ed1a226944f6331478d1e92b3d8713b0fceea":["28f87e4e419c12d17fbe4945b9676539e91e0a7f"],"2ae0782f8714819fbf2b48737d98875f3cea82a9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"32ef722831135736529762b4b97a13dd58b06f66":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["0923b3337a44a00e4ad768bccfea5b45b43754a4"],"79c686ad76bb74d110ec3c727914fb5693a7da23":["2ae0782f8714819fbf2b48737d98875f3cea82a9"],"0923b3337a44a00e4ad768bccfea5b45b43754a4":["4d1d1f748be6299a4bb58280fa1697824edc82c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["32ef722831135736529762b4b97a13dd58b06f66"],"4d1d1f748be6299a4bb58280fa1697824edc82c6":["be8ed1a226944f6331478d1e92b3d8713b0fceea"],"28f87e4e419c12d17fbe4945b9676539e91e0a7f":["79c686ad76bb74d110ec3c727914fb5693a7da23"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"be8ed1a226944f6331478d1e92b3d8713b0fceea":["4d1d1f748be6299a4bb58280fa1697824edc82c6"],"2ae0782f8714819fbf2b48737d98875f3cea82a9":["79c686ad76bb74d110ec3c727914fb5693a7da23"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["2ae0782f8714819fbf2b48737d98875f3cea82a9"],"32ef722831135736529762b4b97a13dd58b06f66":["ad94625fb8d088209f46650c8097196fec67f00c"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["32ef722831135736529762b4b97a13dd58b06f66"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"79c686ad76bb74d110ec3c727914fb5693a7da23":["28f87e4e419c12d17fbe4945b9676539e91e0a7f"],"0923b3337a44a00e4ad768bccfea5b45b43754a4":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"28f87e4e419c12d17fbe4945b9676539e91e0a7f":["be8ed1a226944f6331478d1e92b3d8713b0fceea"],"4d1d1f748be6299a4bb58280fa1697824edc82c6":["0923b3337a44a00e4ad768bccfea5b45b43754a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}