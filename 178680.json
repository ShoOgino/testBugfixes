{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/http/HttpReplicatorTest#testServerErrors().mjava","commits":[{"id":"f9462128d6aef6f10f721e3635944ede9327665c","date":1397750801,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/http/HttpReplicatorTest#testServerErrors().mjava","pathOld":"/dev/null","sourceNew":"  @Test  \n  public void testServerErrors() throws Exception {\n    // tests the behaviour of the client when the server sends an error\n    // must use BasicClientConnectionManager to test whether the client is closed correctly\n    BasicClientConnectionManager conMgr = new BasicClientConnectionManager();\n    Replicator replicator = new HttpReplicator(host, port, ReplicationService.REPLICATION_CONTEXT + \"/s1\", conMgr);\n    ReplicationClient client = new ReplicationClient(replicator, new IndexReplicationHandler(handlerIndexDir, null), \n        new PerSessionDirectoryFactory(clientWorkDir));\n    \n    try {\n      publishRevision(5);\n      \n      try {\n        replicationServlet.setRespondWithError(true);\n        client.updateNow();\n        fail(\"expected exception\");\n      } catch (Throwable t) {\n        // expected\n      }\n      \n      replicationServlet.setRespondWithError(false);\n      client.updateNow(); // now it should work\n      reopenReader();\n      assertEquals(5, Integer.parseInt(reader.getIndexCommit().getUserData().get(\"ID\"), 16));\n      \n      client.close();\n    } finally {\n      replicationServlet.setRespondWithError(false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e74546db799fc6f708fb74c45693c303e8a1812a","date":1398178381,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/http/HttpReplicatorTest#testServerErrors().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/http/HttpReplicatorTest#testServerErrors().mjava","sourceNew":"  @Test  \n  public void testServerErrors() throws Exception {\n    // tests the behaviour of the client when the server sends an error\n    // must use BasicClientConnectionManager to test whether the client is closed correctly\n    BasicHttpClientConnectionManager conMgr = new BasicHttpClientConnectionManager();\n    Replicator replicator = new HttpReplicator(host, port, ReplicationService.REPLICATION_CONTEXT + \"/s1\", conMgr);\n    ReplicationClient client = new ReplicationClient(replicator, new IndexReplicationHandler(handlerIndexDir, null), \n        new PerSessionDirectoryFactory(clientWorkDir));\n    \n    try {\n      publishRevision(5);\n      \n      try {\n        replicationServlet.setRespondWithError(true);\n        client.updateNow();\n        fail(\"expected exception\");\n      } catch (Throwable t) {\n        // expected\n      }\n      \n      replicationServlet.setRespondWithError(false);\n      client.updateNow(); // now it should work\n      reopenReader();\n      assertEquals(5, Integer.parseInt(reader.getIndexCommit().getUserData().get(\"ID\"), 16));\n      \n      client.close();\n    } finally {\n      replicationServlet.setRespondWithError(false);\n    }\n  }\n\n","sourceOld":"  @Test  \n  public void testServerErrors() throws Exception {\n    // tests the behaviour of the client when the server sends an error\n    // must use BasicClientConnectionManager to test whether the client is closed correctly\n    BasicClientConnectionManager conMgr = new BasicClientConnectionManager();\n    Replicator replicator = new HttpReplicator(host, port, ReplicationService.REPLICATION_CONTEXT + \"/s1\", conMgr);\n    ReplicationClient client = new ReplicationClient(replicator, new IndexReplicationHandler(handlerIndexDir, null), \n        new PerSessionDirectoryFactory(clientWorkDir));\n    \n    try {\n      publishRevision(5);\n      \n      try {\n        replicationServlet.setRespondWithError(true);\n        client.updateNow();\n        fail(\"expected exception\");\n      } catch (Throwable t) {\n        // expected\n      }\n      \n      replicationServlet.setRespondWithError(false);\n      client.updateNow(); // now it should work\n      reopenReader();\n      assertEquals(5, Integer.parseInt(reader.getIndexCommit().getUserData().get(\"ID\"), 16));\n      \n      client.close();\n    } finally {\n      replicationServlet.setRespondWithError(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/http/HttpReplicatorTest#testServerErrors().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/http/HttpReplicatorTest#testServerErrors().mjava","sourceNew":"  @Test  \n  public void testServerErrors() throws Exception {\n    // tests the behaviour of the client when the server sends an error\n    // must use BasicClientConnectionManager to test whether the client is closed correctly\n    BasicHttpClientConnectionManager conMgr = new BasicHttpClientConnectionManager();\n    Replicator replicator = new HttpReplicator(host, port, ReplicationService.REPLICATION_CONTEXT + \"/s1\", conMgr);\n    ReplicationClient client = new ReplicationClient(replicator, new IndexReplicationHandler(handlerIndexDir, null), \n        new PerSessionDirectoryFactory(clientWorkDir));\n    \n    try {\n      publishRevision(5);\n      \n      try {\n        replicationServlet.setRespondWithError(true);\n        client.updateNow();\n        fail(\"expected exception\");\n      } catch (Throwable t) {\n        // expected\n      }\n      \n      replicationServlet.setRespondWithError(false);\n      client.updateNow(); // now it should work\n      reopenReader();\n      assertEquals(5, Integer.parseInt(reader.getIndexCommit().getUserData().get(\"ID\"), 16));\n      \n      client.close();\n    } finally {\n      replicationServlet.setRespondWithError(false);\n    }\n  }\n\n","sourceOld":"  @Test  \n  public void testServerErrors() throws Exception {\n    // tests the behaviour of the client when the server sends an error\n    // must use BasicClientConnectionManager to test whether the client is closed correctly\n    BasicClientConnectionManager conMgr = new BasicClientConnectionManager();\n    Replicator replicator = new HttpReplicator(host, port, ReplicationService.REPLICATION_CONTEXT + \"/s1\", conMgr);\n    ReplicationClient client = new ReplicationClient(replicator, new IndexReplicationHandler(handlerIndexDir, null), \n        new PerSessionDirectoryFactory(clientWorkDir));\n    \n    try {\n      publishRevision(5);\n      \n      try {\n        replicationServlet.setRespondWithError(true);\n        client.updateNow();\n        fail(\"expected exception\");\n      } catch (Throwable t) {\n        // expected\n      }\n      \n      replicationServlet.setRespondWithError(false);\n      client.updateNow(); // now it should work\n      reopenReader();\n      assertEquals(5, Integer.parseInt(reader.getIndexCommit().getUserData().get(\"ID\"), 16));\n      \n      client.close();\n    } finally {\n      replicationServlet.setRespondWithError(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd8a7e622c1138188be79e193b1dc52f3f0889a5","date":1564419078,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/http/HttpReplicatorTest#testServerErrors().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/http/HttpReplicatorTest#testServerErrors().mjava","sourceNew":"  @Test  \n  public void testServerErrors() throws Exception {\n    // tests the behaviour of the client when the server sends an error\n    // must use BasicClientConnectionManager to test whether the client is closed correctly\n    BasicHttpClientConnectionManager conMgr = new BasicHttpClientConnectionManager();\n    Replicator replicator = new HttpReplicator(host, port, ReplicationService.REPLICATION_CONTEXT + \"/s1\", conMgr);\n    ReplicationClient client = new ReplicationClient(replicator, new IndexReplicationHandler(handlerIndexDir, null), \n        new PerSessionDirectoryFactory(clientWorkDir));\n    \n    try {\n      publishRevision(5);\n\n      replicationServlet.setRespondWithError(true);\n      expectThrows(Exception.class, client::updateNow);\n      \n      replicationServlet.setRespondWithError(false);\n      client.updateNow(); // now it should work\n      reopenReader();\n      assertEquals(5, Integer.parseInt(reader.getIndexCommit().getUserData().get(\"ID\"), 16));\n      \n      client.close();\n    } finally {\n      replicationServlet.setRespondWithError(false);\n    }\n  }\n\n","sourceOld":"  @Test  \n  public void testServerErrors() throws Exception {\n    // tests the behaviour of the client when the server sends an error\n    // must use BasicClientConnectionManager to test whether the client is closed correctly\n    BasicHttpClientConnectionManager conMgr = new BasicHttpClientConnectionManager();\n    Replicator replicator = new HttpReplicator(host, port, ReplicationService.REPLICATION_CONTEXT + \"/s1\", conMgr);\n    ReplicationClient client = new ReplicationClient(replicator, new IndexReplicationHandler(handlerIndexDir, null), \n        new PerSessionDirectoryFactory(clientWorkDir));\n    \n    try {\n      publishRevision(5);\n      \n      try {\n        replicationServlet.setRespondWithError(true);\n        client.updateNow();\n        fail(\"expected exception\");\n      } catch (Throwable t) {\n        // expected\n      }\n      \n      replicationServlet.setRespondWithError(false);\n      client.updateNow(); // now it should work\n      reopenReader();\n      assertEquals(5, Integer.parseInt(reader.getIndexCommit().getUserData().get(\"ID\"), 16));\n      \n      client.close();\n    } finally {\n      replicationServlet.setRespondWithError(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/http/HttpReplicatorTest#testServerErrors().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/http/HttpReplicatorTest#testServerErrors().mjava","sourceNew":"  @Test  \n  public void testServerErrors() throws Exception {\n    // tests the behaviour of the client when the server sends an error\n    // must use BasicClientConnectionManager to test whether the client is closed correctly\n    BasicHttpClientConnectionManager conMgr = new BasicHttpClientConnectionManager();\n    Replicator replicator = new HttpReplicator(host, port, ReplicationService.REPLICATION_CONTEXT + \"/s1\", conMgr);\n    ReplicationClient client = new ReplicationClient(replicator, new IndexReplicationHandler(handlerIndexDir, null), \n        new PerSessionDirectoryFactory(clientWorkDir));\n    \n    try {\n      publishRevision(5);\n\n      replicationServlet.setRespondWithError(true);\n      expectThrows(Exception.class, client::updateNow);\n      \n      replicationServlet.setRespondWithError(false);\n      client.updateNow(); // now it should work\n      reopenReader();\n      assertEquals(5, Integer.parseInt(reader.getIndexCommit().getUserData().get(\"ID\"), 16));\n      \n      client.close();\n    } finally {\n      replicationServlet.setRespondWithError(false);\n    }\n  }\n\n","sourceOld":"  @Test  \n  public void testServerErrors() throws Exception {\n    // tests the behaviour of the client when the server sends an error\n    // must use BasicClientConnectionManager to test whether the client is closed correctly\n    BasicHttpClientConnectionManager conMgr = new BasicHttpClientConnectionManager();\n    Replicator replicator = new HttpReplicator(host, port, ReplicationService.REPLICATION_CONTEXT + \"/s1\", conMgr);\n    ReplicationClient client = new ReplicationClient(replicator, new IndexReplicationHandler(handlerIndexDir, null), \n        new PerSessionDirectoryFactory(clientWorkDir));\n    \n    try {\n      publishRevision(5);\n      \n      try {\n        replicationServlet.setRespondWithError(true);\n        client.updateNow();\n        fail(\"expected exception\");\n      } catch (Throwable t) {\n        // expected\n      }\n      \n      replicationServlet.setRespondWithError(false);\n      client.updateNow(); // now it should work\n      reopenReader();\n      assertEquals(5, Integer.parseInt(reader.getIndexCommit().getUserData().get(\"ID\"), 16));\n      \n      client.close();\n    } finally {\n      replicationServlet.setRespondWithError(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cd8a7e622c1138188be79e193b1dc52f3f0889a5":["e74546db799fc6f708fb74c45693c303e8a1812a"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["f9462128d6aef6f10f721e3635944ede9327665c","e74546db799fc6f708fb74c45693c303e8a1812a"],"f9462128d6aef6f10f721e3635944ede9327665c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e74546db799fc6f708fb74c45693c303e8a1812a":["f9462128d6aef6f10f721e3635944ede9327665c"],"f8061ddd97f3352007d927dae445884a6f3d857b":["e74546db799fc6f708fb74c45693c303e8a1812a","cd8a7e622c1138188be79e193b1dc52f3f0889a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd8a7e622c1138188be79e193b1dc52f3f0889a5"]},"commit2Childs":{"cd8a7e622c1138188be79e193b1dc52f3f0889a5":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"f9462128d6aef6f10f721e3635944ede9327665c":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","e74546db799fc6f708fb74c45693c303e8a1812a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f9462128d6aef6f10f721e3635944ede9327665c"],"e74546db799fc6f708fb74c45693c303e8a1812a":["cd8a7e622c1138188be79e193b1dc52f3f0889a5","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}