{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#createRandomGroupingSearch(String,Sort,int,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#createRandomGroupingSearch(String,Sort,int,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#createRandomGroupingSearch(String,Sort,int,boolean).mjava","sourceNew":"  private GroupingSearch createRandomGroupingSearch(String groupField, Sort groupSort, int docsInGroup, boolean canUseIDV) throws IOException {\n    GroupingSearch groupingSearch;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      groupingSearch = new GroupingSearch(vs, new HashMap<Object, Object>());\n    } else {\n      if (canUseIDV && random().nextBoolean()) {\n        boolean diskResident = random().nextBoolean();\n        groupingSearch = new GroupingSearch(groupField, DocValues.Type.BYTES_VAR_SORTED, diskResident);\n      } else {\n        groupingSearch = new GroupingSearch(groupField);  \n      }\n    }\n\n    groupingSearch.setGroupSort(groupSort);\n    groupingSearch.setGroupDocsLimit(docsInGroup);\n\n    if (random().nextBoolean()) {\n      groupingSearch.setCachingInMB(4.0, true);\n    }\n\n    return groupingSearch;\n  }\n\n","sourceOld":"  private GroupingSearch createRandomGroupingSearch(String groupField, Sort groupSort, int docsInGroup, boolean canUseIDV) throws IOException {\n    GroupingSearch groupingSearch;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      groupingSearch = new GroupingSearch(vs, new HashMap<Object, Object>());\n    } else {\n      if (canUseIDV && random().nextBoolean()) {\n        boolean diskResident = random().nextBoolean();\n        groupingSearch = new GroupingSearch(groupField, DocValues.Type.BYTES_VAR_SORTED, diskResident);\n      } else {\n        groupingSearch = new GroupingSearch(groupField);  \n      }\n    }\n\n    groupingSearch.setGroupSort(groupSort);\n    groupingSearch.setGroupDocsLimit(docsInGroup);\n\n    if (random().nextBoolean()) {\n      groupingSearch.setCachingInMB(4.0, true);\n    }\n\n    return groupingSearch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#createRandomGroupingSearch(String,Sort,int,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#createRandomGroupingSearch(String,Sort,int,boolean).mjava","sourceNew":"  private GroupingSearch createRandomGroupingSearch(String groupField, Sort groupSort, int docsInGroup, boolean canUseIDV) {\n    GroupingSearch groupingSearch;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      groupingSearch = new GroupingSearch(vs, new HashMap<Object, Object>());\n    } else {\n      if (canUseIDV && random().nextBoolean()) {\n        boolean diskResident = random().nextBoolean();\n        groupingSearch = new GroupingSearch(groupField, DocValues.Type.BYTES_VAR_SORTED, diskResident);\n      } else {\n        groupingSearch = new GroupingSearch(groupField);  \n      }\n    }\n\n    groupingSearch.setGroupSort(groupSort);\n    groupingSearch.setGroupDocsLimit(docsInGroup);\n\n    if (random().nextBoolean()) {\n      groupingSearch.setCachingInMB(4.0, true);\n    }\n\n    return groupingSearch;\n  }\n\n","sourceOld":"  private GroupingSearch createRandomGroupingSearch(String groupField, Sort groupSort, int docsInGroup, boolean canUseIDV) throws IOException {\n    GroupingSearch groupingSearch;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      groupingSearch = new GroupingSearch(vs, new HashMap<Object, Object>());\n    } else {\n      if (canUseIDV && random().nextBoolean()) {\n        boolean diskResident = random().nextBoolean();\n        groupingSearch = new GroupingSearch(groupField, DocValues.Type.BYTES_VAR_SORTED, diskResident);\n      } else {\n        groupingSearch = new GroupingSearch(groupField);  \n      }\n    }\n\n    groupingSearch.setGroupSort(groupSort);\n    groupingSearch.setGroupDocsLimit(docsInGroup);\n\n    if (random().nextBoolean()) {\n      groupingSearch.setCachingInMB(4.0, true);\n    }\n\n    return groupingSearch;\n  }\n\n","bugFix":["3ec363f8022f02e8aca0cc8dfc2cdd6bc5d87e29"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#createRandomGroupingSearch(String,Sort,int,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#createRandomGroupingSearch(String,Sort,int,boolean).mjava","sourceNew":"  private GroupingSearch createRandomGroupingSearch(String groupField, Sort groupSort, int docsInGroup, boolean canUseIDV) {\n    GroupingSearch groupingSearch;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      groupingSearch = new GroupingSearch(vs, new HashMap<Object, Object>());\n    } else {\n      if (canUseIDV && random().nextBoolean()) {\n        boolean diskResident = random().nextBoolean();\n        groupingSearch = new GroupingSearch(groupField, DocValues.Type.BYTES_VAR_SORTED, diskResident);\n      } else {\n        groupingSearch = new GroupingSearch(groupField);  \n      }\n    }\n\n    groupingSearch.setGroupSort(groupSort);\n    groupingSearch.setGroupDocsLimit(docsInGroup);\n\n    if (random().nextBoolean()) {\n      groupingSearch.setCachingInMB(4.0, true);\n    }\n\n    return groupingSearch;\n  }\n\n","sourceOld":"  private GroupingSearch createRandomGroupingSearch(String groupField, Sort groupSort, int docsInGroup, boolean canUseIDV) throws IOException {\n    GroupingSearch groupingSearch;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      groupingSearch = new GroupingSearch(vs, new HashMap<Object, Object>());\n    } else {\n      if (canUseIDV && random().nextBoolean()) {\n        boolean diskResident = random().nextBoolean();\n        groupingSearch = new GroupingSearch(groupField, DocValues.Type.BYTES_VAR_SORTED, diskResident);\n      } else {\n        groupingSearch = new GroupingSearch(groupField);  \n      }\n    }\n\n    groupingSearch.setGroupSort(groupSort);\n    groupingSearch.setGroupDocsLimit(docsInGroup);\n\n    if (random().nextBoolean()) {\n      groupingSearch.setCachingInMB(4.0, true);\n    }\n\n    return groupingSearch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#createRandomGroupingSearch(String,Sort,int,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#createRandomGroupingSearch(String,Sort,int,boolean).mjava","sourceNew":"  private GroupingSearch createRandomGroupingSearch(String groupField, Sort groupSort, int docsInGroup, boolean canUseIDV) {\n    GroupingSearch groupingSearch;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      groupingSearch = new GroupingSearch(vs, new HashMap<Object, Object>());\n    } else {\n      groupingSearch = new GroupingSearch(groupField);\n    }\n\n    groupingSearch.setGroupSort(groupSort);\n    groupingSearch.setGroupDocsLimit(docsInGroup);\n\n    if (random().nextBoolean()) {\n      groupingSearch.setCachingInMB(4.0, true);\n    }\n\n    return groupingSearch;\n  }\n\n","sourceOld":"  private GroupingSearch createRandomGroupingSearch(String groupField, Sort groupSort, int docsInGroup, boolean canUseIDV) {\n    GroupingSearch groupingSearch;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      groupingSearch = new GroupingSearch(vs, new HashMap<Object, Object>());\n    } else {\n      if (canUseIDV && random().nextBoolean()) {\n        boolean diskResident = random().nextBoolean();\n        groupingSearch = new GroupingSearch(groupField, DocValues.Type.BYTES_VAR_SORTED, diskResident);\n      } else {\n        groupingSearch = new GroupingSearch(groupField);  \n      }\n    }\n\n    groupingSearch.setGroupSort(groupSort);\n    groupingSearch.setGroupDocsLimit(docsInGroup);\n\n    if (random().nextBoolean()) {\n      groupingSearch.setCachingInMB(4.0, true);\n    }\n\n    return groupingSearch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#createRandomGroupingSearch(String,Sort,int,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#createRandomGroupingSearch(String,Sort,int,boolean).mjava","sourceNew":"  private GroupingSearch createRandomGroupingSearch(String groupField, Sort groupSort, int docsInGroup, boolean canUseIDV) {\n    GroupingSearch groupingSearch;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      groupingSearch = new GroupingSearch(vs, new HashMap<Object, Object>());\n    } else {\n      groupingSearch = new GroupingSearch(groupField);\n    }\n\n    groupingSearch.setGroupSort(groupSort);\n    groupingSearch.setGroupDocsLimit(docsInGroup);\n\n    if (random().nextBoolean()) {\n      groupingSearch.setCachingInMB(4.0, true);\n    }\n\n    return groupingSearch;\n  }\n\n","sourceOld":"  private GroupingSearch createRandomGroupingSearch(String groupField, Sort groupSort, int docsInGroup, boolean canUseIDV) {\n    GroupingSearch groupingSearch;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      groupingSearch = new GroupingSearch(vs, new HashMap<Object, Object>());\n    } else {\n      if (canUseIDV && random().nextBoolean()) {\n        boolean diskResident = random().nextBoolean();\n        groupingSearch = new GroupingSearch(groupField, DocValues.Type.BYTES_VAR_SORTED, diskResident);\n      } else {\n        groupingSearch = new GroupingSearch(groupField);  \n      }\n    }\n\n    groupingSearch.setGroupSort(groupSort);\n    groupingSearch.setGroupDocsLimit(docsInGroup);\n\n    if (random().nextBoolean()) {\n      groupingSearch.setCachingInMB(4.0, true);\n    }\n\n    return groupingSearch;\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","3ec363f8022f02e8aca0cc8dfc2cdd6bc5d87e29"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97d4692d0c601ff773f0a2231967312428a904e4","date":1366026608,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#createRandomGroupingSearch(String,Sort,int,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#createRandomGroupingSearch(String,Sort,int,boolean).mjava","sourceNew":"  private GroupingSearch createRandomGroupingSearch(String groupField, Sort groupSort, int docsInGroup, boolean canUseIDV) {\n    GroupingSearch groupingSearch;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      groupingSearch = new GroupingSearch(vs, new HashMap<>());\n    } else {\n      groupingSearch = new GroupingSearch(groupField);\n    }\n\n    groupingSearch.setGroupSort(groupSort);\n    groupingSearch.setGroupDocsLimit(docsInGroup);\n\n    if (random().nextBoolean()) {\n      groupingSearch.setCachingInMB(4.0, true);\n    }\n\n    return groupingSearch;\n  }\n\n","sourceOld":"  private GroupingSearch createRandomGroupingSearch(String groupField, Sort groupSort, int docsInGroup, boolean canUseIDV) {\n    GroupingSearch groupingSearch;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      groupingSearch = new GroupingSearch(vs, new HashMap<Object, Object>());\n    } else {\n      groupingSearch = new GroupingSearch(groupField);\n    }\n\n    groupingSearch.setGroupSort(groupSort);\n    groupingSearch.setGroupDocsLimit(docsInGroup);\n\n    if (random().nextBoolean()) {\n      groupingSearch.setCachingInMB(4.0, true);\n    }\n\n    return groupingSearch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","0837ab0472feecb3a54260729d845f839e1cbd72"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"97d4692d0c601ff773f0a2231967312428a904e4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97d4692d0c601ff773f0a2231967312428a904e4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["97d4692d0c601ff773f0a2231967312428a904e4"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"97d4692d0c601ff773f0a2231967312428a904e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d4d69c535930b5cce125cff868d40f6373dc27d4","fe33227f6805edab2036cbb80645cc4e2d1fa424","0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}