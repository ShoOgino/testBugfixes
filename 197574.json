{"path":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","commits":[{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo,SolrCore).mjava","sourceNew":"  PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.info(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<>(meta, info, core, core.getMemClassLoader());\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.info(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader());\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","sourceOld":"  PluginHolder<T> createPlugin(PluginInfo info, SolrCore core) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.info(\" {} : '{}'  created with runtimeLib=true \", meta.tag, info.name);\n      return new LazyPluginHolder<>(meta, info, core, core.getMemClassLoader());\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.info(\"{} : '{}' created with startup=lazy \", meta.tag, info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader());\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.tag, null, core.getResourceLoader());\n      initInstance(inst, info, core);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"  PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.info(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<>(meta, info, core, core.getMemClassLoader());\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.info(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader());\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<>(meta, info, core, core.getMemClassLoader());\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader());\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","sourceOld":"  PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.info(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<>(meta, info, core, core.getMemClassLoader());\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.info(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader());\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<>(meta, info, core, core.getMemClassLoader());\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader());\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","sourceOld":"  PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.info(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<>(meta, info, core, core.getMemClassLoader());\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.info(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader());\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<>(meta, info, core, core.getMemClassLoader());\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader());\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","sourceOld":"  PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.info(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<>(meta, info, core, core.getMemClassLoader());\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.info(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader());\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<>(meta, info, core, core.getMemClassLoader());\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader());\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","sourceOld":"  PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.info(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<>(meta, info, core, core.getMemClassLoader());\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.info(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader());\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1de703f36b1071144037c80ca5fe118aa5e96fd","date":1493947151,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<>(meta, info, core, core.getMemClassLoader());\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader());\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","sourceOld":"  PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<>(meta, info, core, core.getMemClassLoader());\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader());\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<>(meta, info, core, core.getMemClassLoader());\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader());\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","sourceOld":"  PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<>(meta, info, core, core.getMemClassLoader());\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader());\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed1b270b5ea6e1859f4b77233891fbb991898dba","date":1497429460,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, \"true\".equals(System.getProperty(\"enable.runtime.lib\")) ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","sourceOld":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<>(meta, info, core, core.getMemClassLoader());\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader());\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, \"true\".equals(System.getProperty(\"enable.runtime.lib\")) ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","sourceOld":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<>(meta, info, core, core.getMemClassLoader());\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader());\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, \"true\".equals(System.getProperty(\"enable.runtime.lib\")) ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","sourceOld":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<>(meta, info, core, core.getMemClassLoader());\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader());\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"061081e87f853ad5aa1f3ccf8a5187a37a2c0c60","date":1527258339,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, \"true\".equals(System.getProperty(\"enable.runtime.lib\")) ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder(holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","sourceOld":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, \"true\".equals(System.getProperty(\"enable.runtime.lib\")) ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"627e70d5711ab39d080a080f089685268525f54d","date":1560754171,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder(holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","sourceOld":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, \"true\".equals(System.getProperty(\"enable.runtime.lib\")) ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder(holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(RuntimeLib.TYPE)))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder(holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","sourceOld":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder(holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74","date":1563736916,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    String runtimeType = info.getRuntimeLibType();\n    if (\"global\".equals(runtimeType)) {\n      log.debug(\" {} : '{}'  created with runtimeLib=global \", meta.getCleanTag(), info.name);\n      PluginHolder<T> holder = new GlobalLoaderPluginHolder<T>(info, core, meta);\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder((PluginHolder<UpdateRequestProcessorFactory>) holder) :\n          holder;\n\n    } else if (\"core\".equals(String.valueOf(runtimeType))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder((PluginHolder<UpdateRequestProcessorFactory>) holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","sourceOld":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(RuntimeLib.TYPE)))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder(holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39dabfd19b49b248d63cedbb01ea144ee5ad071c","date":1566241238,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    String pkg = info.attributes.get(CommonParams.PACKAGE);\n    if (pkg != null) {\n      log.debug(\" {} : '{}'  created with package={} \", meta.getCleanTag(), info.name, pkg);\n      PluginHolder<T> holder = new PackagePluginHolder<T>(info, core, meta);\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder((PluginHolder<UpdateRequestProcessorFactory>) holder) :\n          holder;\n\n    } else if (info.isRuntimePlugin()) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder((PluginHolder<UpdateRequestProcessorFactory>) holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","sourceOld":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    String runtimeType = info.getRuntimeLibType();\n    if (\"global\".equals(runtimeType)) {\n      log.debug(\" {} : '{}'  created with runtimeLib=global \", meta.getCleanTag(), info.name);\n      PluginHolder<T> holder = new GlobalLoaderPluginHolder<T>(info, core, meta);\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder((PluginHolder<UpdateRequestProcessorFactory>) holder) :\n          holder;\n\n    } else if (\"core\".equals(String.valueOf(runtimeType))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder((PluginHolder<UpdateRequestProcessorFactory>) holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","date":1566455239,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    String pkg = info.attributes.get(CommonParams.PACKAGE);\n    if (pkg != null) {\n      log.debug(\" {} : '{}'  created with package={} \", meta.getCleanTag(), info.name, pkg);\n      PluginHolder<T> holder = new PackagePluginHolder<T>(info, core, meta);\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder((PluginHolder<UpdateRequestProcessorFactory>) holder) :\n          holder;\n\n    } else if (info.isRuntimePlugin()) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder((PluginHolder<UpdateRequestProcessorFactory>) holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      T inst = SolrCore.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","sourceOld":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    String pkg = info.attributes.get(CommonParams.PACKAGE);\n    if (pkg != null) {\n      log.debug(\" {} : '{}'  created with package={} \", meta.getCleanTag(), info.name, pkg);\n      PluginHolder<T> holder = new PackagePluginHolder<T>(info, core, meta);\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder((PluginHolder<UpdateRequestProcessorFactory>) holder) :\n          holder;\n\n    } else if (info.isRuntimePlugin()) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder((PluginHolder<UpdateRequestProcessorFactory>) holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder(holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","sourceOld":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    String pkg = info.attributes.get(CommonParams.PACKAGE);\n    if (pkg != null) {\n      log.debug(\" {} : '{}'  created with package={} \", meta.getCleanTag(), info.name, pkg);\n      PluginHolder<T> holder = new PackagePluginHolder<T>(info, core, meta);\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder((PluginHolder<UpdateRequestProcessorFactory>) holder) :\n          holder;\n\n    } else if (info.isRuntimePlugin()) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder((PluginHolder<UpdateRequestProcessorFactory>) holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      T inst = SolrCore.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder(holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","sourceOld":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    String pkg = info.attributes.get(CommonParams.PACKAGE);\n    if (pkg != null) {\n      log.debug(\" {} : '{}'  created with package={} \", meta.getCleanTag(), info.name, pkg);\n      PluginHolder<T> holder = new PackagePluginHolder<T>(info, core, meta);\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder((PluginHolder<UpdateRequestProcessorFactory>) holder) :\n          holder;\n\n    } else if (info.isRuntimePlugin()) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder((PluginHolder<UpdateRequestProcessorFactory>) holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      T inst = SolrCore.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder(holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      if (info.pkgName != null) {\n        PackagePluginHolder<T> holder = new PackagePluginHolder<>(info, core, meta);\n        return meta.clazz == UpdateRequestProcessorFactory.class ?\n            new PluginHolder(info, new LazyUpdateProcessorFactoryHolder(holder)) :\n            holder;\n      } else {\n        T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader(info.pkgName));\n        initInstance(inst, info);\n        return new PluginHolder<>(info, inst);\n      }\n    }\n  }\n\n","sourceOld":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder(holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());\n      initInstance(inst, info);\n      return new PluginHolder<>(info, inst);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc09d7c591d6661c79bcdfd1c661da97e638804d","date":1574295916,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder(holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      if (info.pkgName != null) {\n        PackagePluginHolder<T> holder = new PackagePluginHolder<>(info, core, meta);\n        return holder;\n      } else {\n        T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader(info.pkgName));\n        initInstance(inst, info);\n        return new PluginHolder<>(info, inst);\n      }\n    }\n  }\n\n","sourceOld":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder(holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      if (info.pkgName != null) {\n        PackagePluginHolder<T> holder = new PackagePluginHolder<>(info, core, meta);\n        return meta.clazz == UpdateRequestProcessorFactory.class ?\n            new PluginHolder(info, new LazyUpdateProcessorFactoryHolder(holder)) :\n            holder;\n      } else {\n        T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader(info.pkgName));\n        initInstance(inst, info);\n        return new PluginHolder<>(info, inst);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      if (log.isDebugEnabled()) {\n        log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      }\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder(holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      }\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      if (info.pkgName != null) {\n        PackagePluginHolder<T> holder = new PackagePluginHolder<>(info, core, meta);\n        return holder;\n      } else {\n        T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader(info.pkgName));\n        initInstance(inst, info);\n        return new PluginHolder<>(info, inst);\n      }\n    }\n  }\n\n","sourceOld":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder(holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      if (info.pkgName != null) {\n        PackagePluginHolder<T> holder = new PackagePluginHolder<>(info, core, meta);\n        return holder;\n      } else {\n        T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader(info.pkgName));\n        initInstance(inst, info);\n        return new PluginHolder<>(info, inst);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      if (log.isDebugEnabled()) {\n        log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      }\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder(holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      }\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      if (info.pkgName != null) {\n        PackagePluginHolder<T> holder = new PackagePluginHolder<>(info, core, meta);\n        return holder;\n      } else {\n        T inst = SolrCore.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader(info.pkgName));\n        initInstance(inst, info);\n        return new PluginHolder<>(info, inst);\n      }\n    }\n  }\n\n","sourceOld":"  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      if (log.isDebugEnabled()) {\n        log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      }\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder(holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      }\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      if (info.pkgName != null) {\n        PackagePluginHolder<T> holder = new PackagePluginHolder<>(info, core, meta);\n        return holder;\n      } else {\n        T inst = core.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader(info.pkgName));\n        initInstance(inst, info);\n        return new PluginHolder<>(info, inst);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d16198391f70a4ee52a8c8792c91eb87a30f1d6","date":1596695552,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#createPlugin(PluginInfo).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public PluginHolder<T> createPlugin(PluginInfo info) {\n   if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      }\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader());\n    } else {\n      if (info.pkgName != null) {\n        PackagePluginHolder<T> holder = new PackagePluginHolder<>(info, core, meta);\n        return holder;\n      } else {\n        T inst = SolrCore.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader(info.pkgName));\n        initInstance(inst, info);\n        return new PluginHolder<>(info, inst);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  public PluginHolder<T> createPlugin(PluginInfo info) {\n    if (\"true\".equals(String.valueOf(info.attributes.get(\"runtimeLib\")))) {\n      if (log.isDebugEnabled()) {\n        log.debug(\" {} : '{}'  created with runtimeLib=true \", meta.getCleanTag(), info.name);\n      }\n      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?\n          core.getMemClassLoader() :\n          core.getResourceLoader(), true);\n\n      return meta.clazz == UpdateRequestProcessorFactory.class ?\n          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder(holder) :\n          holder;\n    } else if (\"lazy\".equals(info.attributes.get(\"startup\")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"{} : '{}' created with startup=lazy \", meta.getCleanTag(), info.name);\n      }\n      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);\n    } else {\n      if (info.pkgName != null) {\n        PackagePluginHolder<T> holder = new PackagePluginHolder<>(info, core, meta);\n        return holder;\n      } else {\n        T inst = SolrCore.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader(info.pkgName));\n        initInstance(inst, info);\n        return new PluginHolder<>(info, inst);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["140be51d03394488536f4aacedace29f9b318347"],"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74"],"fc09d7c591d6661c79bcdfd1c661da97e638804d":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"c44cc06c26e456fe9c215072b79fce30babe3975":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"ed1b270b5ea6e1859f4b77233891fbb991898dba":["f1de703f36b1071144037c80ca5fe118aa5e96fd"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","f1de703f36b1071144037c80ca5fe118aa5e96fd"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["c44cc06c26e456fe9c215072b79fce30babe3975"],"140be51d03394488536f4aacedace29f9b318347":["fc09d7c591d6661c79bcdfd1c661da97e638804d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","126d6ad24eed13163ba0959435d5a80e5672837c"],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"f1de703f36b1071144037c80ca5fe118aa5e96fd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"627e70d5711ab39d080a080f089685268525f54d":["061081e87f853ad5aa1f3ccf8a5187a37a2c0c60"],"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"28288370235ed02234a64753cdbf0c6ec096304a":["f1de703f36b1071144037c80ca5fe118aa5e96fd","ed1b270b5ea6e1859f4b77233891fbb991898dba"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"126d6ad24eed13163ba0959435d5a80e5672837c":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"061081e87f853ad5aa1f3ccf8a5187a37a2c0c60":["28288370235ed02234a64753cdbf0c6ec096304a"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["627e70d5711ab39d080a080f089685268525f54d"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","ed1b270b5ea6e1859f4b77233891fbb991898dba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"b0b597c65628ca9e73913a07e81691f8229bae35":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"fc09d7c591d6661c79bcdfd1c661da97e638804d":["140be51d03394488536f4aacedace29f9b318347"],"c44cc06c26e456fe9c215072b79fce30babe3975":["954ae83b7dfacaa33d48ea056448ae11f7745a93","b0b597c65628ca9e73913a07e81691f8229bae35"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["7f0c8426396c925de8db3ed3f8ff40fd73670a5c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","126d6ad24eed13163ba0959435d5a80e5672837c"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"ed1b270b5ea6e1859f4b77233891fbb991898dba":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["fc09d7c591d6661c79bcdfd1c661da97e638804d"],"140be51d03394488536f4aacedace29f9b318347":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e9017cf144952056066919f1ebc7897ff9bd71b1","f1de703f36b1071144037c80ca5fe118aa5e96fd","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f1de703f36b1071144037c80ca5fe118aa5e96fd":["ed1b270b5ea6e1859f4b77233891fbb991898dba","e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"627e70d5711ab39d080a080f089685268525f54d":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"28288370235ed02234a64753cdbf0c6ec096304a":["061081e87f853ad5aa1f3ccf8a5187a37a2c0c60"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"061081e87f853ad5aa1f3ccf8a5187a37a2c0c60":["627e70d5711ab39d080a080f089685268525f54d"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}