{"path":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docs(Bits,DocsEnum,boolean).mjava","commits":[{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docs(Bits,DocsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docs(Bits,DocsEnum).mjava","sourceNew":"  @Override\n  public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    MultiDocsEnum docsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsEnum\n    if (reuse != null && reuse instanceof MultiDocsEnum) {\n      docsEnum = (MultiDocsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsEnum.canReuse(this)) {\n        docsEnum = new MultiDocsEnum(this, subs.length);\n      }\n    } else {\n      docsEnum = new MultiDocsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(entry.subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access\n          b = new BitsSlice(liveDocs, entry.subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, entry.subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsEnum.subDocsEnum.length: entry.index + \" vs \" + docsEnum.subDocsEnum.length + \"; \" + subs.length;\n      final DocsEnum subDocsEnum = entry.terms.docs(b, docsEnum.subDocsEnum[entry.index], needsFreqs);\n      if (subDocsEnum != null) {\n        docsEnum.subDocsEnum[entry.index] = subDocsEnum;\n        subDocs[upto].docsEnum = subDocsEnum;\n        subDocs[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        // One of our subs cannot provide freqs:\n        assert needsFreqs;\n        return null;\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsEnum.reset(subDocs, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(Bits liveDocs, DocsEnum reuse) throws IOException {\n    MultiDocsEnum docsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsEnum\n    if (reuse != null && reuse instanceof MultiDocsEnum) {\n      docsEnum = (MultiDocsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsEnum.canReuse(this)) {\n        docsEnum = new MultiDocsEnum(this, subs.length);\n      }\n    } else {\n      docsEnum = new MultiDocsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(entry.subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access\n          b = new BitsSlice(liveDocs, entry.subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, entry.subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsEnum.subDocsEnum.length: entry.index + \" vs \" + docsEnum.subDocsEnum.length + \"; \" + subs.length;\n      final DocsEnum subDocsEnum = entry.terms.docs(b, docsEnum.subDocsEnum[entry.index]);\n\n      if (subDocsEnum != null) {\n        docsEnum.subDocsEnum[entry.index] = subDocsEnum;\n        subDocs[upto].docsEnum = subDocsEnum;\n        subDocs[upto].slice = entry.subSlice;\n\n        upto++;\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsEnum.reset(subDocs, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docs(Bits,DocsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docs(Bits,DocsEnum).mjava","sourceNew":"  @Override\n  public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    MultiDocsEnum docsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsEnum\n    if (reuse != null && reuse instanceof MultiDocsEnum) {\n      docsEnum = (MultiDocsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsEnum.canReuse(this)) {\n        docsEnum = new MultiDocsEnum(this, subs.length);\n      }\n    } else {\n      docsEnum = new MultiDocsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(entry.subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access\n          b = new BitsSlice(liveDocs, entry.subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, entry.subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsEnum.subDocsEnum.length: entry.index + \" vs \" + docsEnum.subDocsEnum.length + \"; \" + subs.length;\n      final DocsEnum subDocsEnum = entry.terms.docs(b, docsEnum.subDocsEnum[entry.index], needsFreqs);\n      if (subDocsEnum != null) {\n        docsEnum.subDocsEnum[entry.index] = subDocsEnum;\n        subDocs[upto].docsEnum = subDocsEnum;\n        subDocs[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        // One of our subs cannot provide freqs:\n        assert needsFreqs;\n        return null;\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsEnum.reset(subDocs, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(Bits liveDocs, DocsEnum reuse) throws IOException {\n    MultiDocsEnum docsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsEnum\n    if (reuse != null && reuse instanceof MultiDocsEnum) {\n      docsEnum = (MultiDocsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsEnum.canReuse(this)) {\n        docsEnum = new MultiDocsEnum(this, subs.length);\n      }\n    } else {\n      docsEnum = new MultiDocsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(entry.subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access\n          b = new BitsSlice(liveDocs, entry.subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, entry.subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsEnum.subDocsEnum.length: entry.index + \" vs \" + docsEnum.subDocsEnum.length + \"; \" + subs.length;\n      final DocsEnum subDocsEnum = entry.terms.docs(b, docsEnum.subDocsEnum[entry.index]);\n\n      if (subDocsEnum != null) {\n        docsEnum.subDocsEnum[entry.index] = subDocsEnum;\n        subDocs[upto].docsEnum = subDocsEnum;\n        subDocs[upto].slice = entry.subSlice;\n\n        upto++;\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsEnum.reset(subDocs, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docs(Bits,DocsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docs(Bits,DocsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    MultiDocsEnum docsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsEnum\n    if (reuse != null && reuse instanceof MultiDocsEnum) {\n      docsEnum = (MultiDocsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsEnum.canReuse(this)) {\n        docsEnum = new MultiDocsEnum(this, subs.length);\n      }\n    } else {\n      docsEnum = new MultiDocsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(entry.subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access\n          b = new BitsSlice(liveDocs, entry.subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, entry.subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsEnum.subDocsEnum.length: entry.index + \" vs \" + docsEnum.subDocsEnum.length + \"; \" + subs.length;\n      final DocsEnum subDocsEnum = entry.terms.docs(b, docsEnum.subDocsEnum[entry.index], needsFreqs);\n      if (subDocsEnum != null) {\n        docsEnum.subDocsEnum[entry.index] = subDocsEnum;\n        subDocs[upto].docsEnum = subDocsEnum;\n        subDocs[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        // One of our subs cannot provide freqs:\n        assert needsFreqs;\n        return null;\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsEnum.reset(subDocs, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    MultiDocsEnum docsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsEnum\n    if (reuse != null && reuse instanceof MultiDocsEnum) {\n      docsEnum = (MultiDocsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsEnum.canReuse(this)) {\n        docsEnum = new MultiDocsEnum(this, subs.length);\n      }\n    } else {\n      docsEnum = new MultiDocsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(entry.subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access\n          b = new BitsSlice(liveDocs, entry.subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, entry.subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsEnum.subDocsEnum.length: entry.index + \" vs \" + docsEnum.subDocsEnum.length + \"; \" + subs.length;\n      final DocsEnum subDocsEnum = entry.terms.docs(b, docsEnum.subDocsEnum[entry.index], needsFreqs);\n      if (subDocsEnum != null) {\n        docsEnum.subDocsEnum[entry.index] = subDocsEnum;\n        subDocs[upto].docsEnum = subDocsEnum;\n        subDocs[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        // One of our subs cannot provide freqs:\n        assert needsFreqs;\n        return null;\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsEnum.reset(subDocs, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}