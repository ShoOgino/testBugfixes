{"path":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = IndexReader.open(dir);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Field field = (Field) doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.fieldType().storeTermVectors());\n\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertTrue(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_ONLY);\n\n    DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(DocHelper.TEXT_FIELD_3_KEY);\n    reader.document(0, visitor);\n    final List<IndexableField> fields = visitor.getDocument().getFields();\n    assertEquals(1, fields.size());\n    assertEquals(DocHelper.TEXT_FIELD_3_KEY, fields.get(0).name());\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = IndexReader.open(dir);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Field field = (Field) doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.fieldType().storeTermVectors());\n\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertTrue(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_ONLY);\n\n    DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(DocHelper.TEXT_FIELD_3_KEY);\n    reader.document(0, visitor);\n    final List<IndexableField> fields = visitor.getDocument().getFields();\n    assertEquals(1, fields.size());\n    assertEquals(DocHelper.TEXT_FIELD_3_KEY, fields.get(0).name());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = DirectoryReader.open(dir);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Field field = (Field) doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.fieldType().storeTermVectors());\n\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertTrue(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_ONLY);\n\n    DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(DocHelper.TEXT_FIELD_3_KEY);\n    reader.document(0, visitor);\n    final List<IndexableField> fields = visitor.getDocument().getFields();\n    assertEquals(1, fields.size());\n    assertEquals(DocHelper.TEXT_FIELD_3_KEY, fields.get(0).name());\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = IndexReader.open(dir);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Field field = (Field) doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.fieldType().storeTermVectors());\n\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertTrue(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_ONLY);\n\n    DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(DocHelper.TEXT_FIELD_3_KEY);\n    reader.document(0, visitor);\n    final List<IndexableField> fields = visitor.getDocument().getFields();\n    assertEquals(1, fields.size());\n    assertEquals(DocHelper.TEXT_FIELD_3_KEY, fields.get(0).name());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = DirectoryReader.open(dir);\n    StoredDocument doc = reader.document(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Field field = (Field) doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.fieldType().storeTermVectors());\n\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertTrue(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_ONLY);\n\n    DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(DocHelper.TEXT_FIELD_3_KEY);\n    reader.document(0, visitor);\n    final List<StorableField> fields = visitor.getDocument().getFields();\n    assertEquals(1, fields.size());\n    assertEquals(DocHelper.TEXT_FIELD_3_KEY, fields.get(0).name());\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = DirectoryReader.open(dir);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Field field = (Field) doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.fieldType().storeTermVectors());\n\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertTrue(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_ONLY);\n\n    DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(DocHelper.TEXT_FIELD_3_KEY);\n    reader.document(0, visitor);\n    final List<IndexableField> fields = visitor.getDocument().getFields();\n    assertEquals(1, fields.size());\n    assertEquals(DocHelper.TEXT_FIELD_3_KEY, fields.get(0).name());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = DirectoryReader.open(dir);\n    StoredDocument doc = reader.document(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Field field = (Field) doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.fieldType().storeTermVectors());\n\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertTrue(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_ONLY);\n\n    DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(DocHelper.TEXT_FIELD_3_KEY);\n    reader.document(0, visitor);\n    final List<StorableField> fields = visitor.getDocument().getFields();\n    assertEquals(1, fields.size());\n    assertEquals(DocHelper.TEXT_FIELD_3_KEY, fields.get(0).name());\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = DirectoryReader.open(dir);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Field field = (Field) doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.fieldType().storeTermVectors());\n\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertTrue(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_ONLY);\n\n    DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(DocHelper.TEXT_FIELD_3_KEY);\n    reader.document(0, visitor);\n    final List<IndexableField> fields = visitor.getDocument().getFields();\n    assertEquals(1, fields.size());\n    assertEquals(DocHelper.TEXT_FIELD_3_KEY, fields.get(0).name());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = DirectoryReader.open(dir);\n    StoredDocument doc = reader.document(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Field field = (Field) doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.fieldType().storeTermVectors());\n\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertTrue(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS);\n\n    DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(DocHelper.TEXT_FIELD_3_KEY);\n    reader.document(0, visitor);\n    final List<StorableField> fields = visitor.getDocument().getFields();\n    assertEquals(1, fields.size());\n    assertEquals(DocHelper.TEXT_FIELD_3_KEY, fields.get(0).name());\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = DirectoryReader.open(dir);\n    StoredDocument doc = reader.document(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Field field = (Field) doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.fieldType().storeTermVectors());\n\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertTrue(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_ONLY);\n\n    DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(DocHelper.TEXT_FIELD_3_KEY);\n    reader.document(0, visitor);\n    final List<StorableField> fields = visitor.getDocument().getFields();\n    assertEquals(1, fields.size());\n    assertEquals(DocHelper.TEXT_FIELD_3_KEY, fields.get(0).name());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = DirectoryReader.open(dir);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Field field = (Field) doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.fieldType().storeTermVectors());\n\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertTrue(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS);\n\n    DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(DocHelper.TEXT_FIELD_3_KEY);\n    reader.document(0, visitor);\n    final List<IndexableField> fields = visitor.getDocument().getFields();\n    assertEquals(1, fields.size());\n    assertEquals(DocHelper.TEXT_FIELD_3_KEY, fields.get(0).name());\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = DirectoryReader.open(dir);\n    StoredDocument doc = reader.document(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Field field = (Field) doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.fieldType().storeTermVectors());\n\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertTrue(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n\n    field = (Field) doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertFalse(field.fieldType().storeTermVectors());\n    assertFalse(field.fieldType().omitNorms());\n    assertTrue(field.fieldType().indexOptions() == IndexOptions.DOCS);\n\n    DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(DocHelper.TEXT_FIELD_3_KEY);\n    reader.document(0, visitor);\n    final List<StorableField> fields = visitor.getDocument().getFields();\n    assertEquals(1, fields.size());\n    assertEquals(DocHelper.TEXT_FIELD_3_KEY, fields.get(0).name());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"1d028314cced5858683a1bb4741423d0f934257b":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2bb2842e561df4e8e9ad89010605fc86ac265465":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["2bb2842e561df4e8e9ad89010605fc86ac265465"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}