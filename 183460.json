{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytesWithThreads(Directory).mjava","commits":[{"id":"c15a75016387504d70a40cba6e9314b8885307f0","date":1397542349,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytesWithThreads(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytesWithThreads().mjava","sourceNew":"  public static void testCopyBytesWithThreads(Directory d) throws Exception {\n    int datalen = TestUtil.nextInt(random(), 101, 10000);\n    byte data[] = new byte[datalen];\n    random().nextBytes(data);\n    \n    IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n    output.writeBytes(data, 0, datalen);\n    output.close();\n    \n    IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n    IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n    // copy our 100-byte header\n    outputHeader.copyBytes(input, 100);\n    outputHeader.close();\n    \n    // now make N copies of the remaining bytes\n    CopyThread copies[] = new CopyThread[10];\n    for (int i = 0; i < copies.length; i++) {\n      copies[i] = new CopyThread(input.clone(), d.createOutput(\"copy\" + i, IOContext.DEFAULT));\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].start();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].join();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT);\n      byte[] dataCopy = new byte[datalen];\n      System.arraycopy(data, 0, dataCopy, 0, 100); // copy the header for easy testing\n      copiedData.readBytes(dataCopy, 100, datalen-100);\n      assertArrayEquals(data, dataCopy);\n      copiedData.close();\n    }\n    input.close();\n    d.close();\n    \n  }\n\n","sourceOld":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    int datalen = TestUtil.nextInt(random(), 101, 10000);\n    byte data[] = new byte[datalen];\n    random().nextBytes(data);\n    \n    Directory d = newDirectory();\n    IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n    output.writeBytes(data, 0, datalen);\n    output.close();\n    \n    IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n    IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n    // copy our 100-byte header\n    outputHeader.copyBytes(input, 100);\n    outputHeader.close();\n    \n    // now make N copies of the remaining bytes\n    CopyThread copies[] = new CopyThread[10];\n    for (int i = 0; i < copies.length; i++) {\n      copies[i] = new CopyThread(input.clone(), d.createOutput(\"copy\" + i, IOContext.DEFAULT));\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].start();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].join();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT);\n      byte[] dataCopy = new byte[datalen];\n      System.arraycopy(data, 0, dataCopy, 0, 100); // copy the header for easy testing\n      copiedData.readBytes(dataCopy, 100, datalen-100);\n      assertArrayEquals(data, dataCopy);\n      copiedData.close();\n    }\n    input.close();\n    d.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytesWithThreads(Directory).mjava","sourceNew":null,"sourceOld":"  public static void testCopyBytesWithThreads(Directory d) throws Exception {\n    int datalen = TestUtil.nextInt(random(), 101, 10000);\n    byte data[] = new byte[datalen];\n    random().nextBytes(data);\n    \n    IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n    output.writeBytes(data, 0, datalen);\n    output.close();\n    \n    IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n    IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n    // copy our 100-byte header\n    outputHeader.copyBytes(input, 100);\n    outputHeader.close();\n    \n    // now make N copies of the remaining bytes\n    CopyThread copies[] = new CopyThread[10];\n    for (int i = 0; i < copies.length; i++) {\n      copies[i] = new CopyThread(input.clone(), d.createOutput(\"copy\" + i, IOContext.DEFAULT));\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].start();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].join();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT);\n      byte[] dataCopy = new byte[datalen];\n      System.arraycopy(data, 0, dataCopy, 0, 100); // copy the header for easy testing\n      copiedData.readBytes(dataCopy, 100, datalen-100);\n      assertArrayEquals(data, dataCopy);\n      copiedData.close();\n    }\n    input.close();\n    d.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c15a75016387504d70a40cba6e9314b8885307f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["c15a75016387504d70a40cba6e9314b8885307f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f3adea0022cffaaa592081efed775a7b8bf86b51"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c15a75016387504d70a40cba6e9314b8885307f0"],"c15a75016387504d70a40cba6e9314b8885307f0":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}