{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","sourceNew":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed32 p32 = new Packed32(INDEX, BITS);\n    p32.set(INDEX-1, 1);\n    assertEquals(\"The value at position \" + (INDEX-1)\n        + \" should be correct for Packed32\", 1, p32.get(INDEX-1));\n    p32 = null; // To free the 256MB used\n\n    Packed64 p64 = new Packed64(INDEX, BITS);\n    p64.set(INDEX-1, 1);\n    assertEquals(\"The value at position \" + (INDEX-1)\n        + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n  }\n\n","sourceOld":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed32 p32 = new Packed32(INDEX, BITS);\n    p32.set(INDEX-1, 1);\n    assertEquals(\"The value at position \" + (INDEX-1)\n        + \" should be correct for Packed32\", 1, p32.get(INDEX-1));\n    p32 = null; // To free the 256MB used\n\n    Packed64 p64 = new Packed64(INDEX, BITS);\n    p64.set(INDEX-1, 1);\n    assertEquals(\"The value at position \" + (INDEX-1)\n        + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","sourceNew":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed64 p64 = new Packed64(INDEX, BITS);\n    p64.set(INDEX-1, 1);\n    assertEquals(\"The value at position \" + (INDEX-1)\n        + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n    p64 = null;\n\n    for (int bits = 1; bits <=64; ++bits) {\n      if (Packed64SingleBlock.isSupported(bits)) {\n        int index = Integer.MAX_VALUE / bits + (bits == 1 ? 0 : 1);\n        Packed64SingleBlock p64sb = Packed64SingleBlock.create(index, bits);\n        p64sb.set(index - 1, 1);\n        assertEquals(\"The value at position \" + (index-1)\n            + \" should be correct for \" + p64sb.getClass().getSimpleName(),\n            1, p64sb.get(index-1));\n      }\n    }\n\n    int index = Integer.MAX_VALUE / 24 + 1;\n    Packed8ThreeBlocks p8 = new Packed8ThreeBlocks(index);\n    p8.set(index - 1, 1);\n    assertEquals(\"The value at position \" + (index-1)\n        + \" should be correct for Packed8ThreeBlocks\", 1, p8.get(index-1));\n    p8 = null;\n\n    index = Integer.MAX_VALUE / 48 + 1;\n    Packed16ThreeBlocks p16 = new Packed16ThreeBlocks(index);\n    p16.set(index - 1, 1);\n    assertEquals(\"The value at position \" + (index-1)\n        + \" should be correct for Packed16ThreeBlocks\", 1, p16.get(index-1));\n    p16 = null;\n  }\n\n","sourceOld":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed32 p32 = new Packed32(INDEX, BITS);\n    p32.set(INDEX-1, 1);\n    assertEquals(\"The value at position \" + (INDEX-1)\n        + \" should be correct for Packed32\", 1, p32.get(INDEX-1));\n    p32 = null; // To free the 256MB used\n\n    Packed64 p64 = new Packed64(INDEX, BITS);\n    p64.set(INDEX-1, 1);\n    assertEquals(\"The value at position \" + (INDEX-1)\n        + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b5d37e1b11745510a67d6fa6cf99f1ed809b921","date":1338507223,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","sourceNew":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed64 p64 = null;\n    try {\n      p64 = new Packed64(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // This can easily happen: we're allocating a\n      // long[] that needs 256-273 MB.  Heap is 512 MB,\n      // but not all of that is available for large\n      // objects ... empirical testing shows we only\n      // have ~ 67 MB free.\n    }\n    if (p64 != null) {\n      p64.set(INDEX-1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n                   + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n      p64 = null;\n    }\n\n    for (int bits = 1; bits <=64; ++bits) {\n      if (Packed64SingleBlock.isSupported(bits)) {\n        int index = Integer.MAX_VALUE / bits + (bits == 1 ? 0 : 1);\n        Packed64SingleBlock p64sb = null;\n        try {\n          p64sb = Packed64SingleBlock.create(index, bits);\n        } catch (OutOfMemoryError oome) {\n          // Ignore: see comment above\n          continue;\n        }\n        p64sb.set(index - 1, 1);\n        assertEquals(\"The value at position \" + (index-1)\n            + \" should be correct for \" + p64sb.getClass().getSimpleName(),\n            1, p64sb.get(index-1));\n      }\n    }\n\n    int index = Integer.MAX_VALUE / 24 + 1;\n    Packed8ThreeBlocks p8 = null;\n    try {\n      p8 = new Packed8ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p8 != null) {\n      p8.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed8ThreeBlocks\", 1, p8.get(index-1));\n      p8 = null;\n    }\n\n    index = Integer.MAX_VALUE / 48 + 1;\n    Packed16ThreeBlocks p16 = null;\n    try {\n      p16 = new Packed16ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p16 != null) {\n      p16.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed16ThreeBlocks\", 1, p16.get(index-1));\n      p16 = null;\n    }\n  }\n\n","sourceOld":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed64 p64 = new Packed64(INDEX, BITS);\n    p64.set(INDEX-1, 1);\n    assertEquals(\"The value at position \" + (INDEX-1)\n        + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n    p64 = null;\n\n    for (int bits = 1; bits <=64; ++bits) {\n      if (Packed64SingleBlock.isSupported(bits)) {\n        int index = Integer.MAX_VALUE / bits + (bits == 1 ? 0 : 1);\n        Packed64SingleBlock p64sb = Packed64SingleBlock.create(index, bits);\n        p64sb.set(index - 1, 1);\n        assertEquals(\"The value at position \" + (index-1)\n            + \" should be correct for \" + p64sb.getClass().getSimpleName(),\n            1, p64sb.get(index-1));\n      }\n    }\n\n    int index = Integer.MAX_VALUE / 24 + 1;\n    Packed8ThreeBlocks p8 = new Packed8ThreeBlocks(index);\n    p8.set(index - 1, 1);\n    assertEquals(\"The value at position \" + (index-1)\n        + \" should be correct for Packed8ThreeBlocks\", 1, p8.get(index-1));\n    p8 = null;\n\n    index = Integer.MAX_VALUE / 48 + 1;\n    Packed16ThreeBlocks p16 = new Packed16ThreeBlocks(index);\n    p16.set(index - 1, 1);\n    assertEquals(\"The value at position \" + (index-1)\n        + \" should be correct for Packed16ThreeBlocks\", 1, p16.get(index-1));\n    p16 = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"829d9441b99897377d279219000bb71b50c026be","date":1342046363,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","sourceNew":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed64 p64 = null;\n    try {\n      p64 = new Packed64(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // This can easily happen: we're allocating a\n      // long[] that needs 256-273 MB.  Heap is 512 MB,\n      // but not all of that is available for large\n      // objects ... empirical testing shows we only\n      // have ~ 67 MB free.\n    }\n    if (p64 != null) {\n      p64.set(INDEX-1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n                   + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n      p64 = null;\n    }\n\n    Packed64SingleBlock p64sb = null;\n    try {\n      p64sb = Packed64SingleBlock.create(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p64sb != null) {\n      p64sb.set(INDEX - 1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n          + \" should be correct for \" + p64sb.getClass().getSimpleName(),\n          1, p64sb.get(INDEX-1));\n    }\n\n    int index = Integer.MAX_VALUE / 24 + 1;\n    Packed8ThreeBlocks p8 = null;\n    try {\n      p8 = new Packed8ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p8 != null) {\n      p8.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed8ThreeBlocks\", 1, p8.get(index-1));\n      p8 = null;\n    }\n\n    index = Integer.MAX_VALUE / 48 + 1;\n    Packed16ThreeBlocks p16 = null;\n    try {\n      p16 = new Packed16ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p16 != null) {\n      p16.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed16ThreeBlocks\", 1, p16.get(index-1));\n      p16 = null;\n    }\n  }\n\n","sourceOld":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed64 p64 = null;\n    try {\n      p64 = new Packed64(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // This can easily happen: we're allocating a\n      // long[] that needs 256-273 MB.  Heap is 512 MB,\n      // but not all of that is available for large\n      // objects ... empirical testing shows we only\n      // have ~ 67 MB free.\n    }\n    if (p64 != null) {\n      p64.set(INDEX-1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n                   + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n      p64 = null;\n    }\n\n    for (int bits = 1; bits <=64; ++bits) {\n      if (Packed64SingleBlock.isSupported(bits)) {\n        int index = Integer.MAX_VALUE / bits + (bits == 1 ? 0 : 1);\n        Packed64SingleBlock p64sb = null;\n        try {\n          p64sb = Packed64SingleBlock.create(index, bits);\n        } catch (OutOfMemoryError oome) {\n          // Ignore: see comment above\n          continue;\n        }\n        p64sb.set(index - 1, 1);\n        assertEquals(\"The value at position \" + (index-1)\n            + \" should be correct for \" + p64sb.getClass().getSimpleName(),\n            1, p64sb.get(index-1));\n      }\n    }\n\n    int index = Integer.MAX_VALUE / 24 + 1;\n    Packed8ThreeBlocks p8 = null;\n    try {\n      p8 = new Packed8ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p8 != null) {\n      p8.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed8ThreeBlocks\", 1, p8.get(index-1));\n      p8 = null;\n    }\n\n    index = Integer.MAX_VALUE / 48 + 1;\n    Packed16ThreeBlocks p16 = null;\n    try {\n      p16 = new Packed16ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p16 != null) {\n      p16.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed16ThreeBlocks\", 1, p16.get(index-1));\n      p16 = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","sourceNew":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed64 p64 = null;\n    try {\n      p64 = new Packed64(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // This can easily happen: we're allocating a\n      // long[] that needs 256-273 MB.  Heap is 512 MB,\n      // but not all of that is available for large\n      // objects ... empirical testing shows we only\n      // have ~ 67 MB free.\n    }\n    if (p64 != null) {\n      p64.set(INDEX-1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n                   + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n      p64 = null;\n    }\n\n    Packed64SingleBlock p64sb = null;\n    try {\n      p64sb = Packed64SingleBlock.create(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p64sb != null) {\n      p64sb.set(INDEX - 1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n          + \" should be correct for \" + p64sb.getClass().getSimpleName(),\n          1, p64sb.get(INDEX-1));\n    }\n\n    int index = Integer.MAX_VALUE / 24 + 1;\n    Packed8ThreeBlocks p8 = null;\n    try {\n      p8 = new Packed8ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p8 != null) {\n      p8.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed8ThreeBlocks\", 1, p8.get(index-1));\n      p8 = null;\n    }\n\n    index = Integer.MAX_VALUE / 48 + 1;\n    Packed16ThreeBlocks p16 = null;\n    try {\n      p16 = new Packed16ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p16 != null) {\n      p16.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed16ThreeBlocks\", 1, p16.get(index-1));\n      p16 = null;\n    }\n  }\n\n","sourceOld":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed64 p64 = null;\n    try {\n      p64 = new Packed64(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // This can easily happen: we're allocating a\n      // long[] that needs 256-273 MB.  Heap is 512 MB,\n      // but not all of that is available for large\n      // objects ... empirical testing shows we only\n      // have ~ 67 MB free.\n    }\n    if (p64 != null) {\n      p64.set(INDEX-1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n                   + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n      p64 = null;\n    }\n\n    for (int bits = 1; bits <=64; ++bits) {\n      if (Packed64SingleBlock.isSupported(bits)) {\n        int index = Integer.MAX_VALUE / bits + (bits == 1 ? 0 : 1);\n        Packed64SingleBlock p64sb = null;\n        try {\n          p64sb = Packed64SingleBlock.create(index, bits);\n        } catch (OutOfMemoryError oome) {\n          // Ignore: see comment above\n          continue;\n        }\n        p64sb.set(index - 1, 1);\n        assertEquals(\"The value at position \" + (index-1)\n            + \" should be correct for \" + p64sb.getClass().getSimpleName(),\n            1, p64sb.get(index-1));\n      }\n    }\n\n    int index = Integer.MAX_VALUE / 24 + 1;\n    Packed8ThreeBlocks p8 = null;\n    try {\n      p8 = new Packed8ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p8 != null) {\n      p8.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed8ThreeBlocks\", 1, p8.get(index-1));\n      p8 = null;\n    }\n\n    index = Integer.MAX_VALUE / 48 + 1;\n    Packed16ThreeBlocks p16 = null;\n    try {\n      p16 = new Packed16ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p16 != null) {\n      p16.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed16ThreeBlocks\", 1, p16.get(index-1));\n      p16 = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","sourceNew":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed64 p64 = null;\n    try {\n      p64 = new Packed64(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // This can easily happen: we're allocating a\n      // long[] that needs 256-273 MB.  Heap is 512 MB,\n      // but not all of that is available for large\n      // objects ... empirical testing shows we only\n      // have ~ 67 MB free.\n    }\n    if (p64 != null) {\n      p64.set(INDEX-1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n                   + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n      p64 = null;\n    }\n\n    Packed64SingleBlock p64sb = null;\n    try {\n      p64sb = Packed64SingleBlock.create(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p64sb != null) {\n      p64sb.set(INDEX - 1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n          + \" should be correct for \" + p64sb.getClass().getSimpleName(),\n          1, p64sb.get(INDEX-1));\n    }\n\n    int index = Integer.MAX_VALUE / 24 + 1;\n    Packed8ThreeBlocks p8 = null;\n    try {\n      p8 = new Packed8ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p8 != null) {\n      p8.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed8ThreeBlocks\", 1, p8.get(index-1));\n      p8 = null;\n    }\n\n    index = Integer.MAX_VALUE / 48 + 1;\n    Packed16ThreeBlocks p16 = null;\n    try {\n      p16 = new Packed16ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p16 != null) {\n      p16.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed16ThreeBlocks\", 1, p16.get(index-1));\n      p16 = null;\n    }\n  }\n\n","sourceOld":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed64 p64 = null;\n    try {\n      p64 = new Packed64(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // This can easily happen: we're allocating a\n      // long[] that needs 256-273 MB.  Heap is 512 MB,\n      // but not all of that is available for large\n      // objects ... empirical testing shows we only\n      // have ~ 67 MB free.\n    }\n    if (p64 != null) {\n      p64.set(INDEX-1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n                   + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n      p64 = null;\n    }\n\n    for (int bits = 1; bits <=64; ++bits) {\n      if (Packed64SingleBlock.isSupported(bits)) {\n        int index = Integer.MAX_VALUE / bits + (bits == 1 ? 0 : 1);\n        Packed64SingleBlock p64sb = null;\n        try {\n          p64sb = Packed64SingleBlock.create(index, bits);\n        } catch (OutOfMemoryError oome) {\n          // Ignore: see comment above\n          continue;\n        }\n        p64sb.set(index - 1, 1);\n        assertEquals(\"The value at position \" + (index-1)\n            + \" should be correct for \" + p64sb.getClass().getSimpleName(),\n            1, p64sb.get(index-1));\n      }\n    }\n\n    int index = Integer.MAX_VALUE / 24 + 1;\n    Packed8ThreeBlocks p8 = null;\n    try {\n      p8 = new Packed8ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p8 != null) {\n      p8.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed8ThreeBlocks\", 1, p8.get(index-1));\n      p8 = null;\n    }\n\n    index = Integer.MAX_VALUE / 48 + 1;\n    Packed16ThreeBlocks p16 = null;\n    try {\n      p16 = new Packed16ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p16 != null) {\n      p16.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed16ThreeBlocks\", 1, p16.get(index-1));\n      p16 = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56f67b2f1d8c5140b4f57f0c01298df5cf8021c4","date":1350584314,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","sourceNew":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  @Ignore(\"See LUCENE-4488\")\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed64 p64 = null;\n    try {\n      p64 = new Packed64(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // This can easily happen: we're allocating a\n      // long[] that needs 256-273 MB.  Heap is 512 MB,\n      // but not all of that is available for large\n      // objects ... empirical testing shows we only\n      // have ~ 67 MB free.\n    }\n    if (p64 != null) {\n      p64.set(INDEX-1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n                   + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n      p64 = null;\n    }\n\n    Packed64SingleBlock p64sb = null;\n    try {\n      p64sb = Packed64SingleBlock.create(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p64sb != null) {\n      p64sb.set(INDEX - 1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n          + \" should be correct for \" + p64sb.getClass().getSimpleName(),\n          1, p64sb.get(INDEX-1));\n    }\n\n    int index = Integer.MAX_VALUE / 24 + 1;\n    Packed8ThreeBlocks p8 = null;\n    try {\n      p8 = new Packed8ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p8 != null) {\n      p8.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed8ThreeBlocks\", 1, p8.get(index-1));\n      p8 = null;\n    }\n\n    index = Integer.MAX_VALUE / 48 + 1;\n    Packed16ThreeBlocks p16 = null;\n    try {\n      p16 = new Packed16ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p16 != null) {\n      p16.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed16ThreeBlocks\", 1, p16.get(index-1));\n      p16 = null;\n    }\n  }\n\n","sourceOld":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed64 p64 = null;\n    try {\n      p64 = new Packed64(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // This can easily happen: we're allocating a\n      // long[] that needs 256-273 MB.  Heap is 512 MB,\n      // but not all of that is available for large\n      // objects ... empirical testing shows we only\n      // have ~ 67 MB free.\n    }\n    if (p64 != null) {\n      p64.set(INDEX-1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n                   + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n      p64 = null;\n    }\n\n    Packed64SingleBlock p64sb = null;\n    try {\n      p64sb = Packed64SingleBlock.create(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p64sb != null) {\n      p64sb.set(INDEX - 1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n          + \" should be correct for \" + p64sb.getClass().getSimpleName(),\n          1, p64sb.get(INDEX-1));\n    }\n\n    int index = Integer.MAX_VALUE / 24 + 1;\n    Packed8ThreeBlocks p8 = null;\n    try {\n      p8 = new Packed8ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p8 != null) {\n      p8.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed8ThreeBlocks\", 1, p8.get(index-1));\n      p8 = null;\n    }\n\n    index = Integer.MAX_VALUE / 48 + 1;\n    Packed16ThreeBlocks p16 = null;\n    try {\n      p16 = new Packed16ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p16 != null) {\n      p16.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed16ThreeBlocks\", 1, p16.get(index-1));\n      p16 = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","sourceNew":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  @Ignore(\"See LUCENE-4488\")\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed64 p64 = null;\n    try {\n      p64 = new Packed64(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // This can easily happen: we're allocating a\n      // long[] that needs 256-273 MB.  Heap is 512 MB,\n      // but not all of that is available for large\n      // objects ... empirical testing shows we only\n      // have ~ 67 MB free.\n    }\n    if (p64 != null) {\n      p64.set(INDEX-1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n                   + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n      p64 = null;\n    }\n\n    Packed64SingleBlock p64sb = null;\n    try {\n      p64sb = Packed64SingleBlock.create(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p64sb != null) {\n      p64sb.set(INDEX - 1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n          + \" should be correct for \" + p64sb.getClass().getSimpleName(),\n          1, p64sb.get(INDEX-1));\n    }\n\n    int index = Integer.MAX_VALUE / 24 + 1;\n    Packed8ThreeBlocks p8 = null;\n    try {\n      p8 = new Packed8ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p8 != null) {\n      p8.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed8ThreeBlocks\", 1, p8.get(index-1));\n      p8 = null;\n    }\n\n    index = Integer.MAX_VALUE / 48 + 1;\n    Packed16ThreeBlocks p16 = null;\n    try {\n      p16 = new Packed16ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p16 != null) {\n      p16.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed16ThreeBlocks\", 1, p16.get(index-1));\n      p16 = null;\n    }\n  }\n\n","sourceOld":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed64 p64 = null;\n    try {\n      p64 = new Packed64(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // This can easily happen: we're allocating a\n      // long[] that needs 256-273 MB.  Heap is 512 MB,\n      // but not all of that is available for large\n      // objects ... empirical testing shows we only\n      // have ~ 67 MB free.\n    }\n    if (p64 != null) {\n      p64.set(INDEX-1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n                   + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n      p64 = null;\n    }\n\n    Packed64SingleBlock p64sb = null;\n    try {\n      p64sb = Packed64SingleBlock.create(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p64sb != null) {\n      p64sb.set(INDEX - 1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n          + \" should be correct for \" + p64sb.getClass().getSimpleName(),\n          1, p64sb.get(INDEX-1));\n    }\n\n    int index = Integer.MAX_VALUE / 24 + 1;\n    Packed8ThreeBlocks p8 = null;\n    try {\n      p8 = new Packed8ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p8 != null) {\n      p8.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed8ThreeBlocks\", 1, p8.get(index-1));\n      p8 = null;\n    }\n\n    index = Integer.MAX_VALUE / 48 + 1;\n    Packed16ThreeBlocks p16 = null;\n    try {\n      p16 = new Packed16ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p16 != null) {\n      p16.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed16ThreeBlocks\", 1, p16.get(index-1));\n      p16 = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f440d3f04c39b9b18e8e48a78ef7b9f840674e22","date":1568209549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","sourceNew":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  @Ignore(\"See LUCENE-4488\")\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed64 p64 = null;\n    try {\n      p64 = new Packed64(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // This can easily happen: we're allocating a\n      // long[] that needs 256-273 MB.  Heap is 512 MB,\n      // but not all of that is available for large\n      // objects ... empirical testing shows we only\n      // have ~ 67 MB free.\n    }\n    if (p64 != null) {\n      p64.set(INDEX-1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n                   + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n      p64 = null;\n    }\n\n    Packed64SingleBlock p64sb = null;\n    try {\n      p64sb = Packed64SingleBlock.create(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p64sb != null) {\n      p64sb.set(INDEX - 1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n          + \" should be correct for \" + p64sb.getClass().getSimpleName(),\n          1, p64sb.get(INDEX-1));\n    }\n  }\n\n","sourceOld":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  @Ignore(\"See LUCENE-4488\")\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed64 p64 = null;\n    try {\n      p64 = new Packed64(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // This can easily happen: we're allocating a\n      // long[] that needs 256-273 MB.  Heap is 512 MB,\n      // but not all of that is available for large\n      // objects ... empirical testing shows we only\n      // have ~ 67 MB free.\n    }\n    if (p64 != null) {\n      p64.set(INDEX-1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n                   + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n      p64 = null;\n    }\n\n    Packed64SingleBlock p64sb = null;\n    try {\n      p64sb = Packed64SingleBlock.create(INDEX, BITS);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p64sb != null) {\n      p64sb.set(INDEX - 1, 1);\n      assertEquals(\"The value at position \" + (INDEX-1)\n          + \" should be correct for \" + p64sb.getClass().getSimpleName(),\n          1, p64sb.get(INDEX-1));\n    }\n\n    int index = Integer.MAX_VALUE / 24 + 1;\n    Packed8ThreeBlocks p8 = null;\n    try {\n      p8 = new Packed8ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p8 != null) {\n      p8.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed8ThreeBlocks\", 1, p8.get(index-1));\n      p8 = null;\n    }\n\n    index = Integer.MAX_VALUE / 48 + 1;\n    Packed16ThreeBlocks p16 = null;\n    try {\n      p16 = new Packed16ThreeBlocks(index);\n    } catch (OutOfMemoryError oome) {\n      // Ignore: see comment above\n    }\n    if (p16 != null) {\n      p16.set(index - 1, 1);\n      assertEquals(\"The value at position \" + (index-1)\n                   + \" should be correct for Packed16ThreeBlocks\", 1, p16.get(index-1));\n      p16 = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56f67b2f1d8c5140b4f57f0c01298df5cf8021c4":["829d9441b99897377d279219000bb71b50c026be"],"2b5d37e1b11745510a67d6fa6cf99f1ed809b921":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"aba371508186796cc6151d8223a5b4e16d02e26e":["2b5d37e1b11745510a67d6fa6cf99f1ed809b921","829d9441b99897377d279219000bb71b50c026be"],"62e52115b56781006682fd92c6938efaf174304d":["829d9441b99897377d279219000bb71b50c026be","56f67b2f1d8c5140b4f57f0c01298df5cf8021c4"],"f440d3f04c39b9b18e8e48a78ef7b9f840674e22":["56f67b2f1d8c5140b4f57f0c01298df5cf8021c4"],"829d9441b99897377d279219000bb71b50c026be":["2b5d37e1b11745510a67d6fa6cf99f1ed809b921"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["2b5d37e1b11745510a67d6fa6cf99f1ed809b921","829d9441b99897377d279219000bb71b50c026be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f440d3f04c39b9b18e8e48a78ef7b9f840674e22"]},"commit2Childs":{"56f67b2f1d8c5140b4f57f0c01298df5cf8021c4":["62e52115b56781006682fd92c6938efaf174304d","f440d3f04c39b9b18e8e48a78ef7b9f840674e22"],"2b5d37e1b11745510a67d6fa6cf99f1ed809b921":["aba371508186796cc6151d8223a5b4e16d02e26e","829d9441b99897377d279219000bb71b50c026be","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"62e52115b56781006682fd92c6938efaf174304d":[],"829d9441b99897377d279219000bb71b50c026be":["56f67b2f1d8c5140b4f57f0c01298df5cf8021c4","aba371508186796cc6151d8223a5b4e16d02e26e","62e52115b56781006682fd92c6938efaf174304d","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"f440d3f04c39b9b18e8e48a78ef7b9f840674e22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["2b5d37e1b11745510a67d6fa6cf99f1ed809b921"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","62e52115b56781006682fd92c6938efaf174304d","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}