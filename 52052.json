{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testCooldown().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testCooldown().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 1);\n    for (int i = 0; i < capturedEvents.size() - 1; i++) {\n      CapturedEvent ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d5ef2a9b4062088bd74169faad5ae11897a6d77","date":1516279764,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testCooldown().mjava","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 1);\n    for (int i = 0; i < capturedEvents.size() - 1; i++) {\n      CapturedEvent ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testCooldown().mjava","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 1);\n    for (int i = 0; i < capturedEvents.size() - 1; i++) {\n      CapturedEvent ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01e3e55745c6667006f67aaa604466b9974425f4","date":1518776937,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testCooldown().mjava","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testCooldown().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testCooldown().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testCooldown() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(5000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"no events for 'bar'!\", capturedEvents);\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    String newNode2 = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    cluster.getTimeSource().sleep(2000);\n\n    // there must be exactly one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 1);\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","0d5ef2a9b4062088bd74169faad5ae11897a6d77"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["01e3e55745c6667006f67aaa604466b9974425f4"],"0d5ef2a9b4062088bd74169faad5ae11897a6d77":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"01e3e55745c6667006f67aaa604466b9974425f4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b94236357aaa22b76c10629851fe4e376e0cea82":["01e3e55745c6667006f67aaa604466b9974425f4"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"0d5ef2a9b4062088bd74169faad5ae11897a6d77":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","0d5ef2a9b4062088bd74169faad5ae11897a6d77"],"01e3e55745c6667006f67aaa604466b9974425f4":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}