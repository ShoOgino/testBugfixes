{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","commits":[{"id":"25e4a4cddd699db6cce60282e747c7705897e821","date":1496721158,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollectionSplitShard() throws Exception  {\n    JettySolrRunner firstNode = cluster.getRandomJetty(random());\n    int firstNodePort = firstNode.getLocalPort();\n\n    JettySolrRunner secondNode = null;\n    while (true)  {\n      secondNode = cluster.getRandomJetty(random());\n      if (secondNode.getLocalPort() != firstNodePort)  break;\n    }\n    int secondNodePort = secondNode.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 2)\n        .setPolicy(\"c1\")\n        .setMaxShardsPerNode(10)\n        .process(cluster.getSolrClient());\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode.getNodeName());\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(cluster.getSolrClient());\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode.getNodeName());\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","c0ee0c7f6bcf49646748d46aee9383b68eb55c80"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollectionSplitShard() throws Exception  {\n    JettySolrRunner firstNode = cluster.getRandomJetty(random());\n    int firstNodePort = firstNode.getLocalPort();\n\n    JettySolrRunner secondNode = null;\n    while (true)  {\n      secondNode = cluster.getRandomJetty(random());\n      if (secondNode.getLocalPort() != firstNodePort)  break;\n    }\n    int secondNodePort = secondNode.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 2)\n        .setPolicy(\"c1\")\n        .setMaxShardsPerNode(10)\n        .process(cluster.getSolrClient());\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode.getNodeName());\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(cluster.getSolrClient());\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode.getNodeName());\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollectionSplitShard() throws Exception  {\n    JettySolrRunner firstNode = cluster.getRandomJetty(random());\n    int firstNodePort = firstNode.getLocalPort();\n\n    JettySolrRunner secondNode = null;\n    while (true)  {\n      secondNode = cluster.getRandomJetty(random());\n      if (secondNode.getLocalPort() != firstNodePort)  break;\n    }\n    int secondNodePort = secondNode.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 2)\n        .setPolicy(\"c1\")\n        .setMaxShardsPerNode(10)\n        .process(cluster.getSolrClient());\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode.getNodeName());\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(cluster.getSolrClient());\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode.getNodeName());\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","sourceNew":"  public void testCreateCollectionSplitShard() throws Exception  {\n    JettySolrRunner firstNode = cluster.getRandomJetty(random());\n    int firstNodePort = firstNode.getLocalPort();\n\n    JettySolrRunner secondNode = null;\n    while (true)  {\n      secondNode = cluster.getRandomJetty(random());\n      if (secondNode.getLocalPort() != firstNodePort)  break;\n    }\n    int secondNodePort = secondNode.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .setMaxShardsPerNode(10)\n        .process(cluster.getSolrClient());\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode.getNodeName());\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(cluster.getSolrClient());\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode.getNodeName());\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n  }\n\n","sourceOld":"  public void testCreateCollectionSplitShard() throws Exception  {\n    JettySolrRunner firstNode = cluster.getRandomJetty(random());\n    int firstNodePort = firstNode.getLocalPort();\n\n    JettySolrRunner secondNode = null;\n    while (true)  {\n      secondNode = cluster.getRandomJetty(random());\n      if (secondNode.getLocalPort() != firstNodePort)  break;\n    }\n    int secondNodePort = secondNode.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 2)\n        .setPolicy(\"c1\")\n        .setMaxShardsPerNode(10)\n        .process(cluster.getSolrClient());\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode.getNodeName());\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(cluster.getSolrClient());\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode.getNodeName());\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","sourceNew":"  public void testCreateCollectionSplitShard() throws Exception  {\n    JettySolrRunner firstNode = cluster.getRandomJetty(random());\n    int firstNodePort = firstNode.getLocalPort();\n\n    JettySolrRunner secondNode = null;\n    while (true)  {\n      secondNode = cluster.getRandomJetty(random());\n      if (secondNode.getLocalPort() != firstNodePort)  break;\n    }\n    int secondNodePort = secondNode.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .setMaxShardsPerNode(10)\n        .process(cluster.getSolrClient());\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode.getNodeName());\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(cluster.getSolrClient());\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode.getNodeName());\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n  }\n\n","sourceOld":"  public void testCreateCollectionSplitShard() throws Exception  {\n    JettySolrRunner firstNode = cluster.getRandomJetty(random());\n    int firstNodePort = firstNode.getLocalPort();\n\n    JettySolrRunner secondNode = null;\n    while (true)  {\n      secondNode = cluster.getRandomJetty(random());\n      if (secondNode.getLocalPort() != firstNodePort)  break;\n    }\n    int secondNodePort = secondNode.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 2)\n        .setPolicy(\"c1\")\n        .setMaxShardsPerNode(10)\n        .process(cluster.getSolrClient());\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode.getNodeName());\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(cluster.getSolrClient());\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode.getNodeName());\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollectionSplitShard() throws Exception  {\n    JettySolrRunner firstNode = cluster.getRandomJetty(random());\n    int firstNodePort = firstNode.getLocalPort();\n\n    JettySolrRunner secondNode = null;\n    while (true)  {\n      secondNode = cluster.getRandomJetty(random());\n      if (secondNode.getLocalPort() != firstNodePort)  break;\n    }\n    int secondNodePort = secondNode.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .setMaxShardsPerNode(10)\n        .process(cluster.getSolrClient());\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode.getNodeName());\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(cluster.getSolrClient());\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode.getNodeName());\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0806aac02ecbbdc6b5d9705ae15da193219c7af4","date":1499930856,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","sourceNew":"  public void testCreateCollectionSplitShard() throws Exception  {\n    JettySolrRunner firstNode = cluster.getRandomJetty(random());\n    int firstNodePort = firstNode.getLocalPort();\n\n    JettySolrRunner secondNode = null;\n    while (true)  {\n      secondNode = cluster.getRandomJetty(random());\n      if (secondNode.getLocalPort() != firstNodePort)  break;\n    }\n    int secondNodePort = secondNode.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode.getNodeName());\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(cluster.getSolrClient());\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode.getNodeName());\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n  }\n\n","sourceOld":"  public void testCreateCollectionSplitShard() throws Exception  {\n    JettySolrRunner firstNode = cluster.getRandomJetty(random());\n    int firstNodePort = firstNode.getLocalPort();\n\n    JettySolrRunner secondNode = null;\n    while (true)  {\n      secondNode = cluster.getRandomJetty(random());\n      if (secondNode.getLocalPort() != firstNodePort)  break;\n    }\n    int secondNodePort = secondNode.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .setMaxShardsPerNode(10)\n        .process(cluster.getSolrClient());\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode.getNodeName());\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(cluster.getSolrClient());\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode.getNodeName());\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ee0c7f6bcf49646748d46aee9383b68eb55c80","date":1502884592,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","sourceNew":"  public void testCreateCollectionSplitShard() throws Exception  {\n    JettySolrRunner firstNode = cluster.getRandomJetty(random());\n    int firstNodePort = firstNode.getLocalPort();\n\n    JettySolrRunner secondNode = null;\n    while (true)  {\n      secondNode = cluster.getRandomJetty(random());\n      if (secondNode.getLocalPort() != firstNodePort)  break;\n    }\n    int secondNodePort = secondNode.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode.getNodeName());\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(cluster.getSolrClient());\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode.getNodeName());\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n  }\n\n","sourceOld":"  public void testCreateCollectionSplitShard() throws Exception  {\n    JettySolrRunner firstNode = cluster.getRandomJetty(random());\n    int firstNodePort = firstNode.getLocalPort();\n\n    JettySolrRunner secondNode = null;\n    while (true)  {\n      secondNode = cluster.getRandomJetty(random());\n      if (secondNode.getLocalPort() != firstNodePort)  break;\n    }\n    int secondNodePort = secondNode.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .setMaxShardsPerNode(10)\n        .process(cluster.getSolrClient());\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode.getNodeName());\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(cluster.getSolrClient());\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode.getNodeName());\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n  }\n\n","bugFix":["25e4a4cddd699db6cce60282e747c7705897e821"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","sourceNew":"  public void testCreateCollectionSplitShard() throws Exception  {\n    JettySolrRunner firstNode = cluster.getRandomJetty(random());\n    int firstNodePort = firstNode.getLocalPort();\n\n    JettySolrRunner secondNode = null;\n    while (true)  {\n      secondNode = cluster.getRandomJetty(random());\n      if (secondNode.getLocalPort() != firstNodePort)  break;\n    }\n    int secondNodePort = secondNode.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode.getNodeName());\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(cluster.getSolrClient());\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode.getNodeName());\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n  }\n\n","sourceOld":"  public void testCreateCollectionSplitShard() throws Exception  {\n    JettySolrRunner firstNode = cluster.getRandomJetty(random());\n    int firstNodePort = firstNode.getLocalPort();\n\n    JettySolrRunner secondNode = null;\n    while (true)  {\n      secondNode = cluster.getRandomJetty(random());\n      if (secondNode.getLocalPort() != firstNodePort)  break;\n    }\n    int secondNodePort = secondNode.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode.getNodeName());\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(cluster.getSolrClient());\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode.getNodeName());\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","sourceNew":"  public void testCreateCollectionSplitShard() throws Exception  {\n    JettySolrRunner firstNode = cluster.getRandomJetty(random());\n    int firstNodePort = firstNode.getLocalPort();\n\n    JettySolrRunner secondNode = null;\n    while (true)  {\n      secondNode = cluster.getRandomJetty(random());\n      if (secondNode.getLocalPort() != firstNodePort)  break;\n    }\n    int secondNodePort = secondNode.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collectionName, 1, 2);\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode.getNodeName());\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(cluster.getSolrClient());\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode.getNodeName());\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n  }\n\n","sourceOld":"  public void testCreateCollectionSplitShard() throws Exception  {\n    JettySolrRunner firstNode = cluster.getRandomJetty(random());\n    int firstNodePort = firstNode.getLocalPort();\n\n    JettySolrRunner secondNode = null;\n    while (true)  {\n      secondNode = cluster.getRandomJetty(random());\n      if (secondNode.getLocalPort() != firstNodePort)  break;\n    }\n    int secondNodePort = secondNode.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode.getNodeName());\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(cluster.getSolrClient());\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode.getNodeName());\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n  }\n\n","bugFix":["25e4a4cddd699db6cce60282e747c7705897e821"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","sourceNew":"  public void testCreateCollectionSplitShard() throws Exception  {\n    JettySolrRunner firstNode = cluster.getRandomJetty(random());\n    int firstNodePort = firstNode.getLocalPort();\n\n    JettySolrRunner secondNode = null;\n    while (true)  {\n      secondNode = cluster.getRandomJetty(random());\n      if (secondNode.getLocalPort() != firstNodePort)  break;\n    }\n    int secondNodePort = secondNode.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collectionName, 1, 2);\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode.getNodeName());\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(cluster.getSolrClient());\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode.getNodeName());\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n  }\n\n","sourceOld":"  public void testCreateCollectionSplitShard() throws Exception  {\n    JettySolrRunner firstNode = cluster.getRandomJetty(random());\n    int firstNodePort = firstNode.getLocalPort();\n\n    JettySolrRunner secondNode = null;\n    while (true)  {\n      secondNode = cluster.getRandomJetty(random());\n      if (secondNode.getLocalPort() != firstNodePort)  break;\n    }\n    int secondNodePort = secondNode.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collectionName, 1, 2);\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode.getNodeName());\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(cluster.getSolrClient());\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode.getNodeName());\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6ae69e36b15b227a219d4e334ccf5f58fb8affd","date":1562804219,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","sourceNew":"  public void testCreateCollectionSplitShard() throws Exception  {\n\n    final List<JettySolrRunner> shuffledJetties = new ArrayList<>(cluster.getJettySolrRunners());\n    Collections.shuffle(shuffledJetties, random());\n    assertTrue(2 < shuffledJetties.size()); // sanity check test setup\n    \n    final JettySolrRunner firstNode = shuffledJetties.get(0);\n    final JettySolrRunner secondNode = shuffledJetties.get(1);\n\n    final int firstNodePort = firstNode.getLocalPort();\n    final int secondNodePort = secondNode.getLocalPort();\n    assertNotEquals(firstNodePort, secondNodePort);\n    \n    final String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" +\n      firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n\n    final String firstNodeName = firstNode.getNodeName();\n    final String secondNodeName = secondNode.getNodeName();\n    assertNotEquals(firstNodeName, secondNodeName);\n\n    final NamedList<Object> response = cluster.getSolrClient()\n      .request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    // through out the test, every shard shuld have 2 replicas, one on each of these two nodes\n    final Set<String> expectedNodeNames = ImmutableSet.of(firstNodeName, secondNodeName);\n    \n    final String collectionName = \"testCreateCollectionSplitShard\";\n    log.info(\"Creating collection {}\", collectionName);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n                   \n    waitForState(\"Should have found exactly 1 slice w/2 live Replicas, one on each expected jetty: \" +\n                 firstNodeName + \"/\" + firstNodePort + \" & \" +  secondNodeName + \"/\" + secondNodePort,\n                 collectionName, (liveNodes, collection) -> {\n                   // short circut if collection is deleted\n                   // or we some how have the wrong number of slices\n                   if (null == collection || 1 != collection.getSlices().size()) {\n                     return false;\n                   }\n                   // Note: only 1 slices, but simpler to loop then extract...\n                   for (Slice slice : collection.getSlices()) {\n                     // short circut if our slice isn't active, or has wrong # replicas\n                     if (Slice.State.ACTIVE != slice.getState()\n                         || 2 != slice.getReplicas().size()) {\n                       return false;\n                     }\n                     // make sure our replicas are fully live...\n                     final List<Replica> liveReplicas = slice.getReplicas\n                       ((r) -> r.isActive(liveNodes));\n                     if (2 != liveReplicas.size()) {\n                       return false;\n                     }\n                     // now the main check we care about: were the replicas split up on\n                     // the expected nodes...\n                     if (! expectedNodeNames.equals(ImmutableSet.of\n                                                  (liveReplicas.get(0).getNodeName(),\n                                                   liveReplicas.get(1).getNodeName()))) {\n                       return false;\n                     }\n                   }\n                   return true;\n                 });\n\n    log.info(\"Splitting (single) Shard on collection {}\", collectionName);\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\")\n      .process(cluster.getSolrClient());\n\n    waitForState(\"Should have found exactly 3 shards (1 inactive) each w/two live Replicas, \" +\n                 \"one on each expected jetty: \" +\n                 firstNodeName + \"/\" + firstNodePort + \" & \" +  secondNodeName + \"/\" + secondNodePort,\n                 collectionName, (liveNodes, collection) -> {\n                   // short circut if collection is deleted\n                   // or we some how have the wrong number of (active) slices\n                   if (null == collection\n                       || 3 != collection.getSlices().size()\n                       || 2 != collection.getActiveSlices().size()) {\n                     return false;\n                   }\n                   // Note: we're checking all slices, even the inactive (split) slice...\n                   for (Slice slice : collection.getSlices()) {\n                     // short circut if our slice has wrong # replicas\n                     if (2 != slice.getReplicas().size()) {\n                       return false;\n                     }\n                     // make sure our replicas are fully live...\n                     final List<Replica> liveReplicas = slice.getReplicas\n                       ((r) -> r.isActive(liveNodes));\n                     if (2 != liveReplicas.size()) {\n                       return false;\n                     }\n                     // now the main check we care about: were the replicas split up on\n                     // the expected nodes...\n                     if (! expectedNodeNames.equals(ImmutableSet.of\n                                                    (liveReplicas.get(0).getNodeName(),\n                                                     liveReplicas.get(1).getNodeName()))) {\n                       return false;\n                     }\n                   }\n                   return true;\n                 });\n  }\n\n","sourceOld":"  public void testCreateCollectionSplitShard() throws Exception  {\n    JettySolrRunner firstNode = cluster.getRandomJetty(random());\n    int firstNodePort = firstNode.getLocalPort();\n\n    JettySolrRunner secondNode = null;\n    while (true)  {\n      secondNode = cluster.getRandomJetty(random());\n      if (secondNode.getLocalPort() != firstNodePort)  break;\n    }\n    int secondNodePort = secondNode.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collectionName, 1, 2);\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode.getNodeName());\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(cluster.getSolrClient());\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode.getNodeName());\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode.getNodeName());\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionSplitShard().mjava","sourceNew":null,"sourceOld":"  public void testCreateCollectionSplitShard() throws Exception  {\n\n    final List<JettySolrRunner> shuffledJetties = new ArrayList<>(cluster.getJettySolrRunners());\n    Collections.shuffle(shuffledJetties, random());\n    assertTrue(2 < shuffledJetties.size()); // sanity check test setup\n    \n    final JettySolrRunner firstNode = shuffledJetties.get(0);\n    final JettySolrRunner secondNode = shuffledJetties.get(1);\n\n    final int firstNodePort = firstNode.getLocalPort();\n    final int secondNodePort = secondNode.getLocalPort();\n    assertNotEquals(firstNodePort, secondNodePort);\n    \n    final String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" +\n      firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n\n    final String firstNodeName = firstNode.getNodeName();\n    final String secondNodeName = secondNode.getNodeName();\n    assertNotEquals(firstNodeName, secondNodeName);\n\n    final NamedList<Object> response = cluster.getSolrClient()\n      .request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    // through out the test, every shard shuld have 2 replicas, one on each of these two nodes\n    final Set<String> expectedNodeNames = ImmutableSet.of(firstNodeName, secondNodeName);\n    \n    final String collectionName = \"testCreateCollectionSplitShard\";\n    log.info(\"Creating collection {}\", collectionName);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n                   \n    waitForState(\"Should have found exactly 1 slice w/2 live Replicas, one on each expected jetty: \" +\n                 firstNodeName + \"/\" + firstNodePort + \" & \" +  secondNodeName + \"/\" + secondNodePort,\n                 collectionName, (liveNodes, collection) -> {\n                   // short circut if collection is deleted\n                   // or we some how have the wrong number of slices\n                   if (null == collection || 1 != collection.getSlices().size()) {\n                     return false;\n                   }\n                   // Note: only 1 slices, but simpler to loop then extract...\n                   for (Slice slice : collection.getSlices()) {\n                     // short circut if our slice isn't active, or has wrong # replicas\n                     if (Slice.State.ACTIVE != slice.getState()\n                         || 2 != slice.getReplicas().size()) {\n                       return false;\n                     }\n                     // make sure our replicas are fully live...\n                     final List<Replica> liveReplicas = slice.getReplicas\n                       ((r) -> r.isActive(liveNodes));\n                     if (2 != liveReplicas.size()) {\n                       return false;\n                     }\n                     // now the main check we care about: were the replicas split up on\n                     // the expected nodes...\n                     if (! expectedNodeNames.equals(ImmutableSet.of\n                                                  (liveReplicas.get(0).getNodeName(),\n                                                   liveReplicas.get(1).getNodeName()))) {\n                       return false;\n                     }\n                   }\n                   return true;\n                 });\n\n    log.info(\"Splitting (single) Shard on collection {}\", collectionName);\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\")\n      .process(cluster.getSolrClient());\n\n    waitForState(\"Should have found exactly 3 shards (1 inactive) each w/two live Replicas, \" +\n                 \"one on each expected jetty: \" +\n                 firstNodeName + \"/\" + firstNodePort + \" & \" +  secondNodeName + \"/\" + secondNodePort,\n                 collectionName, (liveNodes, collection) -> {\n                   // short circut if collection is deleted\n                   // or we some how have the wrong number of (active) slices\n                   if (null == collection\n                       || 3 != collection.getSlices().size()\n                       || 2 != collection.getActiveSlices().size()) {\n                     return false;\n                   }\n                   // Note: we're checking all slices, even the inactive (split) slice...\n                   for (Slice slice : collection.getSlices()) {\n                     // short circut if our slice has wrong # replicas\n                     if (2 != slice.getReplicas().size()) {\n                       return false;\n                     }\n                     // make sure our replicas are fully live...\n                     final List<Replica> liveReplicas = slice.getReplicas\n                       ((r) -> r.isActive(liveNodes));\n                     if (2 != liveReplicas.size()) {\n                       return false;\n                     }\n                     // now the main check we care about: were the replicas split up on\n                     // the expected nodes...\n                     if (! expectedNodeNames.equals(ImmutableSet.of\n                                                    (liveReplicas.get(0).getNodeName(),\n                                                     liveReplicas.get(1).getNodeName()))) {\n                       return false;\n                     }\n                   }\n                   return true;\n                 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"25e4a4cddd699db6cce60282e747c7705897e821":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"197bbedf08450ade98a11f4a0001448059666bec":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"3f504512a03d978990cbff30db0522b354e846db":["f6ae69e36b15b227a219d4e334ccf5f58fb8affd"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","197bbedf08450ade98a11f4a0001448059666bec"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"f6ae69e36b15b227a219d4e334ccf5f58fb8affd":["89948af0461fead48f44ba8fb7866f107ce83f22"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","25e4a4cddd699db6cce60282e747c7705897e821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["e9017cf144952056066919f1ebc7897ff9bd71b1","197bbedf08450ade98a11f4a0001448059666bec"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["c0ee0c7f6bcf49646748d46aee9383b68eb55c80"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"c0ee0c7f6bcf49646748d46aee9383b68eb55c80":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"25e4a4cddd699db6cce60282e747c7705897e821":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"197bbedf08450ade98a11f4a0001448059666bec":["28288370235ed02234a64753cdbf0c6ec096304a","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":[],"28288370235ed02234a64753cdbf0c6ec096304a":["c0ee0c7f6bcf49646748d46aee9383b68eb55c80"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["197bbedf08450ade98a11f4a0001448059666bec","e9017cf144952056066919f1ebc7897ff9bd71b1"],"f6ae69e36b15b227a219d4e334ccf5f58fb8affd":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25e4a4cddd699db6cce60282e747c7705897e821","28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"89948af0461fead48f44ba8fb7866f107ce83f22":["f6ae69e36b15b227a219d4e334ccf5f58fb8affd"],"c0ee0c7f6bcf49646748d46aee9383b68eb55c80":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0806aac02ecbbdc6b5d9705ae15da193219c7af4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}