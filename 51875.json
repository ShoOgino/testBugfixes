{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler,String,Map[String,String]).mjava","commits":[{"id":"3bbb741690cdafda7f1f7549c26351c912917a69","date":1453203134,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler,String,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                        Slice slice, ShardHandler shardHandler, String asyncId, Map<String, String> requestMap) {\n\n    for (Replica replica : slice.getReplicas()) {\n      if (clusterState.liveNodesContain(replica.getStr(ZkStateReader.NODE_NAME_PROP))\n          && (stateMatcher == null || Replica.State.getState(replica.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        sendShardRequest(replica.getStr(ZkStateReader.NODE_NAME_PROP), cloneParams, shardHandler, asyncId, requestMap);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["06263309947a9804c326e35ce627be8768e123a4","06263309947a9804c326e35ce627be8768e123a4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler,String,Map[String,String]).mjava","sourceNew":"  void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                Slice slice, ShardHandler shardHandler, String asyncId, Map<String, String> requestMap) {\n\n    for (Replica replica : slice.getReplicas()) {\n      if (clusterState.liveNodesContain(replica.getStr(ZkStateReader.NODE_NAME_PROP))\n          && (stateMatcher == null || Replica.State.getState(replica.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        sendShardRequest(replica.getStr(ZkStateReader.NODE_NAME_PROP), cloneParams, shardHandler, asyncId, requestMap);\n      }\n    }\n  }\n\n","sourceOld":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                        Slice slice, ShardHandler shardHandler, String asyncId, Map<String, String> requestMap) {\n\n    for (Replica replica : slice.getReplicas()) {\n      if (clusterState.liveNodesContain(replica.getStr(ZkStateReader.NODE_NAME_PROP))\n          && (stateMatcher == null || Replica.State.getState(replica.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        sendShardRequest(replica.getStr(ZkStateReader.NODE_NAME_PROP), cloneParams, shardHandler, asyncId, requestMap);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["06263309947a9804c326e35ce627be8768e123a4","06263309947a9804c326e35ce627be8768e123a4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler,String,Map[String,String]).mjava","sourceNew":"  void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                Slice slice, ShardHandler shardHandler, String asyncId, Map<String, String> requestMap) {\n\n    for (Replica replica : slice.getReplicas()) {\n      if (clusterState.liveNodesContain(replica.getStr(ZkStateReader.NODE_NAME_PROP))\n          && (stateMatcher == null || Replica.State.getState(replica.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        sendShardRequest(replica.getStr(ZkStateReader.NODE_NAME_PROP), cloneParams, shardHandler, asyncId, requestMap);\n      }\n    }\n  }\n\n","sourceOld":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                        Slice slice, ShardHandler shardHandler, String asyncId, Map<String, String> requestMap) {\n\n    for (Replica replica : slice.getReplicas()) {\n      if (clusterState.liveNodesContain(replica.getStr(ZkStateReader.NODE_NAME_PROP))\n          && (stateMatcher == null || Replica.State.getState(replica.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        sendShardRequest(replica.getStr(ZkStateReader.NODE_NAME_PROP), cloneParams, shardHandler, asyncId, requestMap);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler,String,Map[String,String]).mjava","sourceNew":"  void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                Slice slice, ShardHandler shardHandler, String asyncId, Map<String, String> requestMap) {\n\n    for (Replica replica : slice.getReplicas()) {\n      if (clusterState.liveNodesContain(replica.getStr(ZkStateReader.NODE_NAME_PROP))\n          && (stateMatcher == null || Replica.State.getState(replica.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        sendShardRequest(replica.getStr(ZkStateReader.NODE_NAME_PROP), cloneParams, shardHandler, asyncId, requestMap);\n      }\n    }\n  }\n\n","sourceOld":"  private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                        Slice slice, ShardHandler shardHandler, String asyncId, Map<String, String> requestMap) {\n\n    for (Replica replica : slice.getReplicas()) {\n      if (clusterState.liveNodesContain(replica.getStr(ZkStateReader.NODE_NAME_PROP))\n          && (stateMatcher == null || Replica.State.getState(replica.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        sendShardRequest(replica.getStr(ZkStateReader.NODE_NAME_PROP), cloneParams, shardHandler, asyncId, requestMap);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler,String,Map[String,String]).mjava","sourceNew":"  void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                Slice slice, ShardHandler shardHandler, String asyncId, Map<String, String> requestMap) {\n\n    for (Replica replica : slice.getReplicas()) {\n      if (clusterState.liveNodesContain(replica.getStr(ZkStateReader.NODE_NAME_PROP))\n          && (stateMatcher == null || Replica.State.getState(replica.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        sendShardRequest(replica.getStr(ZkStateReader.NODE_NAME_PROP), cloneParams, shardHandler, asyncId, requestMap);\n      }\n    }\n  }\n\n","sourceOld":"  void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                Slice slice, ShardHandler shardHandler, String asyncId, Map<String, String> requestMap) {\n\n    for (Replica replica : slice.getReplicas()) {\n      if (clusterState.liveNodesContain(replica.getStr(ZkStateReader.NODE_NAME_PROP))\n          && (stateMatcher == null || Replica.State.getState(replica.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        sendShardRequest(replica.getStr(ZkStateReader.NODE_NAME_PROP), cloneParams, shardHandler, asyncId, requestMap);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sliceCmd(ClusterState,ModifiableSolrParams,Replica.State,Slice,ShardHandler,String,Map[String,String]).mjava","sourceNew":"  void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                Slice slice, ShardHandler shardHandler, String asyncId, Map<String, String> requestMap) {\n\n    for (Replica replica : slice.getReplicas()) {\n      if (clusterState.liveNodesContain(replica.getStr(ZkStateReader.NODE_NAME_PROP))\n          && (stateMatcher == null || Replica.State.getState(replica.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        sendShardRequest(replica.getStr(ZkStateReader.NODE_NAME_PROP), cloneParams, shardHandler, asyncId, requestMap);\n      }\n    }\n  }\n\n","sourceOld":"  void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, Replica.State stateMatcher,\n                Slice slice, ShardHandler shardHandler, String asyncId, Map<String, String> requestMap) {\n\n    for (Replica replica : slice.getReplicas()) {\n      if (clusterState.liveNodesContain(replica.getStr(ZkStateReader.NODE_NAME_PROP))\n          && (stateMatcher == null || Replica.State.getState(replica.getStr(ZkStateReader.STATE_PROP)) == stateMatcher)) {\n\n        // For thread safety, only simple clone the ModifiableSolrParams\n        ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n        cloneParams.add(params);\n        cloneParams.set(CoreAdminParams.CORE, replica.getStr(ZkStateReader.CORE_NAME_PROP));\n\n        sendShardRequest(replica.getStr(ZkStateReader.NODE_NAME_PROP), cloneParams, shardHandler, asyncId, requestMap);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["403d05f7f8d69b65659157eff1bc1d2717f04c66","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"3bbb741690cdafda7f1f7549c26351c912917a69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["3bbb741690cdafda7f1f7549c26351c912917a69","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["3bbb741690cdafda7f1f7549c26351c912917a69"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3bbb741690cdafda7f1f7549c26351c912917a69","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3bbb741690cdafda7f1f7549c26351c912917a69":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bbb741690cdafda7f1f7549c26351c912917a69"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}