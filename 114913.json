{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","commits":[{"id":"1e15bea9339982eec538668b67ae252b28e0003e","date":1319539476,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","pathOld":"/dev/null","sourceNew":"    /** Construct the compound token based on a slice of the current {@link CompoundWordTokenFilterBase#termAtt}. */\n    public CompoundToken(int offset, int length) {\n      final int newStart = CompoundWordTokenFilterBase.this.offsetAtt.startOffset() + offset;\n      this.txt = CompoundWordTokenFilterBase.this.termAtt.subSequence(offset, offset + length);\n      // TODO: This ignores the original endOffset, if a CharFilter/Tokenizer/Filter removed\n      // chars from the term, offsets may not match correctly (other filters producing tokens\n      // may also have this problem):\n      this.startOffset = newStart;\n      this.endOffset = newStart + length;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ad9b045ba726c4e5cd4a99bac259518a632bc901"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad9b045ba726c4e5cd4a99bac259518a632bc901","date":1327250466,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","sourceNew":"    /** Construct the compound token based on a slice of the current {@link CompoundWordTokenFilterBase#termAtt}. */\n    public CompoundToken(int offset, int length) {\n      this.txt = CompoundWordTokenFilterBase.this.termAtt.subSequence(offset, offset + length);\n      \n      // offsets of the original word\n      int startOff = CompoundWordTokenFilterBase.this.offsetAtt.startOffset();\n      int endOff = CompoundWordTokenFilterBase.this.offsetAtt.endOffset();\n      \n      if (endOff - startOff != CompoundWordTokenFilterBase.this.termAtt.length()) {\n        // if length by start + end offsets doesn't match the term text then assume\n        // this is a synonym and don't adjust the offsets.\n        this.startOffset = startOff;\n        this.endOffset = endOff;\n      } else {\n        final int newStart = startOff + offset;\n        this.startOffset = newStart;\n        this.endOffset = newStart + length;\n      }\n    }\n\n","sourceOld":"    /** Construct the compound token based on a slice of the current {@link CompoundWordTokenFilterBase#termAtt}. */\n    public CompoundToken(int offset, int length) {\n      final int newStart = CompoundWordTokenFilterBase.this.offsetAtt.startOffset() + offset;\n      this.txt = CompoundWordTokenFilterBase.this.termAtt.subSequence(offset, offset + length);\n      // TODO: This ignores the original endOffset, if a CharFilter/Tokenizer/Filter removed\n      // chars from the term, offsets may not match correctly (other filters producing tokens\n      // may also have this problem):\n      this.startOffset = newStart;\n      this.endOffset = newStart + length;\n    }\n\n","bugFix":["1e15bea9339982eec538668b67ae252b28e0003e"],"bugIntro":["1497255a2ce11dc672a80859c79fabe7efa51d2e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a89676536a5d3e2e875a9eed6b3f22a63cca643","date":1327356915,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","sourceNew":"    /** Construct the compound token based on a slice of the current {@link CompoundWordTokenFilterBase#termAtt}. */\n    public CompoundToken(int offset, int length) {\n      this.txt = CompoundWordTokenFilterBase.this.termAtt.subSequence(offset, offset + length);\n      \n      // offsets of the original word\n      int startOff = CompoundWordTokenFilterBase.this.offsetAtt.startOffset();\n      int endOff = CompoundWordTokenFilterBase.this.offsetAtt.endOffset();\n      \n      if (endOff - startOff != CompoundWordTokenFilterBase.this.termAtt.length()) {\n        // if length by start + end offsets doesn't match the term text then assume\n        // this is a synonym and don't adjust the offsets.\n        this.startOffset = startOff;\n        this.endOffset = endOff;\n      } else {\n        final int newStart = startOff + offset;\n        this.startOffset = newStart;\n        this.endOffset = newStart + length;\n      }\n    }\n\n","sourceOld":"    /** Construct the compound token based on a slice of the current {@link CompoundWordTokenFilterBase#termAtt}. */\n    public CompoundToken(int offset, int length) {\n      final int newStart = CompoundWordTokenFilterBase.this.offsetAtt.startOffset() + offset;\n      this.txt = CompoundWordTokenFilterBase.this.termAtt.subSequence(offset, offset + length);\n      // TODO: This ignores the original endOffset, if a CharFilter/Tokenizer/Filter removed\n      // chars from the term, offsets may not match correctly (other filters producing tokens\n      // may also have this problem):\n      this.startOffset = newStart;\n      this.endOffset = newStart + length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","sourceNew":"    /** Construct the compound token based on a slice of the current {@link CompoundWordTokenFilterBase#termAtt}. */\n    public CompoundToken(int offset, int length) {\n      this.txt = CompoundWordTokenFilterBase.this.termAtt.subSequence(offset, offset + length);\n      \n      // offsets of the original word\n      int startOff = CompoundWordTokenFilterBase.this.offsetAtt.startOffset();\n      int endOff = CompoundWordTokenFilterBase.this.offsetAtt.endOffset();\n      \n      if (endOff - startOff != CompoundWordTokenFilterBase.this.termAtt.length()) {\n        // if length by start + end offsets doesn't match the term text then assume\n        // this is a synonym and don't adjust the offsets.\n        this.startOffset = startOff;\n        this.endOffset = endOff;\n      } else {\n        final int newStart = startOff + offset;\n        this.startOffset = newStart;\n        this.endOffset = newStart + length;\n      }\n    }\n\n","sourceOld":"    /** Construct the compound token based on a slice of the current {@link CompoundWordTokenFilterBase#termAtt}. */\n    public CompoundToken(int offset, int length) {\n      final int newStart = CompoundWordTokenFilterBase.this.offsetAtt.startOffset() + offset;\n      this.txt = CompoundWordTokenFilterBase.this.termAtt.subSequence(offset, offset + length);\n      // TODO: This ignores the original endOffset, if a CharFilter/Tokenizer/Filter removed\n      // chars from the term, offsets may not match correctly (other filters producing tokens\n      // may also have this problem):\n      this.startOffset = newStart;\n      this.endOffset = newStart + length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","sourceNew":"    /** Construct the compound token based on a slice of the current {@link CompoundWordTokenFilterBase#termAtt}. */\n    public CompoundToken(int offset, int length) {\n      this.txt = CompoundWordTokenFilterBase.this.termAtt.subSequence(offset, offset + length);\n      \n      // offsets of the original word\n      int startOff = CompoundWordTokenFilterBase.this.offsetAtt.startOffset();\n      int endOff = CompoundWordTokenFilterBase.this.offsetAtt.endOffset();\n      \n      if (endOff - startOff != CompoundWordTokenFilterBase.this.termAtt.length()) {\n        // if length by start + end offsets doesn't match the term text then assume\n        // this is a synonym and don't adjust the offsets.\n        this.startOffset = startOff;\n        this.endOffset = endOff;\n      } else {\n        final int newStart = startOff + offset;\n        this.startOffset = newStart;\n        this.endOffset = newStart + length;\n      }\n    }\n\n","sourceOld":"    /** Construct the compound token based on a slice of the current {@link CompoundWordTokenFilterBase#termAtt}. */\n    public CompoundToken(int offset, int length) {\n      this.txt = CompoundWordTokenFilterBase.this.termAtt.subSequence(offset, offset + length);\n      \n      // offsets of the original word\n      int startOff = CompoundWordTokenFilterBase.this.offsetAtt.startOffset();\n      int endOff = CompoundWordTokenFilterBase.this.offsetAtt.endOffset();\n      \n      if (endOff - startOff != CompoundWordTokenFilterBase.this.termAtt.length()) {\n        // if length by start + end offsets doesn't match the term text then assume\n        // this is a synonym and don't adjust the offsets.\n        this.startOffset = startOff;\n        this.endOffset = endOff;\n      } else {\n        final int newStart = startOff + offset;\n        this.startOffset = newStart;\n        this.endOffset = newStart + length;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":["1e15bea9339982eec538668b67ae252b28e0003e","ad9b045ba726c4e5cd4a99bac259518a632bc901"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ad9b045ba726c4e5cd4a99bac259518a632bc901"],"1e15bea9339982eec538668b67ae252b28e0003e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad9b045ba726c4e5cd4a99bac259518a632bc901":["1e15bea9339982eec538668b67ae252b28e0003e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["1e15bea9339982eec538668b67ae252b28e0003e","ad9b045ba726c4e5cd4a99bac259518a632bc901"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":[],"1e15bea9339982eec538668b67ae252b28e0003e":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","ad9b045ba726c4e5cd4a99bac259518a632bc901","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad9b045ba726c4e5cd4a99bac259518a632bc901":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","b89678825b68eccaf09e6ab71675fc0b0af1e099","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e15bea9339982eec538668b67ae252b28e0003e"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}