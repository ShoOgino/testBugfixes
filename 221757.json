{"path":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getCustomFieldsMap(SolrParams).mjava","commits":[{"id":"e6d9348a7814f90f24c043aa0d0109adc467a48a","date":1323446657,"type":0,"author":"Stanisław Osiński","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getCustomFieldsMap(SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Prepares a map of Solr field names (keys) to the corresponding Carrot2\n   * custom field names.\n   */\n  private Map<String, String> getCustomFieldsMap(SolrParams solrParams) {\n    Map<String, String> customFields = Maps.newHashMap();\n    String [] customFieldsSpec = solrParams.getParams(CarrotParams.CUSTOM_FIELD_NAME);\n    if (customFieldsSpec != null) {\n      customFields = Maps.newHashMap();\n      for (String customFieldSpec : customFieldsSpec) {\n        String [] split = customFieldSpec.split(\":\"); \n        if (split.length == 2 && StringUtils.isNotBlank(split[0]) && StringUtils.isNotBlank(split[1])) {\n          customFields.put(split[0], split[1]);\n        } else {\n          log.warn(\"Unsupported format for \" + CarrotParams.CUSTOM_FIELD_NAME\n              + \": '\" + customFieldSpec + \"'. Skipping this field definition.\");\n        }\n      }\n    }\n    return customFields;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","date":1323540308,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getCustomFieldsMap(SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Prepares a map of Solr field names (keys) to the corresponding Carrot2\n   * custom field names.\n   */\n  private Map<String, String> getCustomFieldsMap(SolrParams solrParams) {\n    Map<String, String> customFields = Maps.newHashMap();\n    String [] customFieldsSpec = solrParams.getParams(CarrotParams.CUSTOM_FIELD_NAME);\n    if (customFieldsSpec != null) {\n      customFields = Maps.newHashMap();\n      for (String customFieldSpec : customFieldsSpec) {\n        String [] split = customFieldSpec.split(\":\"); \n        if (split.length == 2 && StringUtils.isNotBlank(split[0]) && StringUtils.isNotBlank(split[1])) {\n          customFields.put(split[0], split[1]);\n        } else {\n          log.warn(\"Unsupported format for \" + CarrotParams.CUSTOM_FIELD_NAME\n              + \": '\" + customFieldSpec + \"'. Skipping this field definition.\");\n        }\n      }\n    }\n    return customFields;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f","date":1478271720,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getCustomFieldsMap(SolrParams).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getCustomFieldsMap(SolrParams).mjava","sourceNew":"  /**\n   * Prepares a map of Solr field names (keys) to the corresponding Carrot2\n   * custom field names.\n   */\n  private Map<String, String> getCustomFieldsMap(SolrParams solrParams) {\n    Map<String, String> customFields = new HashMap<>();\n    String [] customFieldsSpec = solrParams.getParams(CarrotParams.CUSTOM_FIELD_NAME);\n    if (customFieldsSpec != null) {\n      customFields = new HashMap<>();\n      for (String customFieldSpec : customFieldsSpec) {\n        String [] split = customFieldSpec.split(\":\"); \n        if (split.length == 2 && StringUtils.isNotBlank(split[0]) && StringUtils.isNotBlank(split[1])) {\n          customFields.put(split[0], split[1]);\n        } else {\n          log.warn(\"Unsupported format for \" + CarrotParams.CUSTOM_FIELD_NAME\n              + \": '\" + customFieldSpec + \"'. Skipping this field definition.\");\n        }\n      }\n    }\n    return customFields;\n  }\n\n","sourceOld":"  /**\n   * Prepares a map of Solr field names (keys) to the corresponding Carrot2\n   * custom field names.\n   */\n  private Map<String, String> getCustomFieldsMap(SolrParams solrParams) {\n    Map<String, String> customFields = Maps.newHashMap();\n    String [] customFieldsSpec = solrParams.getParams(CarrotParams.CUSTOM_FIELD_NAME);\n    if (customFieldsSpec != null) {\n      customFields = Maps.newHashMap();\n      for (String customFieldSpec : customFieldsSpec) {\n        String [] split = customFieldSpec.split(\":\"); \n        if (split.length == 2 && StringUtils.isNotBlank(split[0]) && StringUtils.isNotBlank(split[1])) {\n          customFields.put(split[0], split[1]);\n        } else {\n          log.warn(\"Unsupported format for \" + CarrotParams.CUSTOM_FIELD_NAME\n              + \": '\" + customFieldSpec + \"'. Skipping this field definition.\");\n        }\n      }\n    }\n    return customFields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getCustomFieldsMap(SolrParams).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getCustomFieldsMap(SolrParams).mjava","sourceNew":"  /**\n   * Prepares a map of Solr field names (keys) to the corresponding Carrot2\n   * custom field names.\n   */\n  private Map<String, String> getCustomFieldsMap(SolrParams solrParams) {\n    Map<String, String> customFields = new HashMap<>();\n    String [] customFieldsSpec = solrParams.getParams(CarrotParams.CUSTOM_FIELD_NAME);\n    if (customFieldsSpec != null) {\n      customFields = new HashMap<>();\n      for (String customFieldSpec : customFieldsSpec) {\n        String [] split = customFieldSpec.split(\":\"); \n        if (split.length == 2 && StringUtils.isNotBlank(split[0]) && StringUtils.isNotBlank(split[1])) {\n          customFields.put(split[0], split[1]);\n        } else {\n          log.warn(\"Unsupported format for \" + CarrotParams.CUSTOM_FIELD_NAME\n              + \": '\" + customFieldSpec + \"'. Skipping this field definition.\");\n        }\n      }\n    }\n    return customFields;\n  }\n\n","sourceOld":"  /**\n   * Prepares a map of Solr field names (keys) to the corresponding Carrot2\n   * custom field names.\n   */\n  private Map<String, String> getCustomFieldsMap(SolrParams solrParams) {\n    Map<String, String> customFields = Maps.newHashMap();\n    String [] customFieldsSpec = solrParams.getParams(CarrotParams.CUSTOM_FIELD_NAME);\n    if (customFieldsSpec != null) {\n      customFields = Maps.newHashMap();\n      for (String customFieldSpec : customFieldsSpec) {\n        String [] split = customFieldSpec.split(\":\"); \n        if (split.length == 2 && StringUtils.isNotBlank(split[0]) && StringUtils.isNotBlank(split[1])) {\n          customFields.put(split[0], split[1]);\n        } else {\n          log.warn(\"Unsupported format for \" + CarrotParams.CUSTOM_FIELD_NAME\n              + \": '\" + customFieldSpec + \"'. Skipping this field definition.\");\n        }\n      }\n    }\n    return customFields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getCustomFieldsMap(SolrParams).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getCustomFieldsMap(SolrParams).mjava","sourceNew":"  /**\n   * Prepares a map of Solr field names (keys) to the corresponding Carrot2\n   * custom field names.\n   */\n  private Map<String, String> getCustomFieldsMap(SolrParams solrParams) {\n    Map<String, String> customFields = new HashMap<>();\n    String [] customFieldsSpec = solrParams.getParams(CarrotParams.CUSTOM_FIELD_NAME);\n    if (customFieldsSpec != null) {\n      customFields = new HashMap<>();\n      for (String customFieldSpec : customFieldsSpec) {\n        String [] split = customFieldSpec.split(\":\"); \n        if (split.length == 2 && StringUtils.isNotBlank(split[0]) && StringUtils.isNotBlank(split[1])) {\n          customFields.put(split[0], split[1]);\n        } else {\n          log.warn(\"Unsupported format for {}: '{}'. Skipping this field definition.\"\n              , CarrotParams.CUSTOM_FIELD_NAME, customFieldSpec);\n        }\n      }\n    }\n    return customFields;\n  }\n\n","sourceOld":"  /**\n   * Prepares a map of Solr field names (keys) to the corresponding Carrot2\n   * custom field names.\n   */\n  private Map<String, String> getCustomFieldsMap(SolrParams solrParams) {\n    Map<String, String> customFields = new HashMap<>();\n    String [] customFieldsSpec = solrParams.getParams(CarrotParams.CUSTOM_FIELD_NAME);\n    if (customFieldsSpec != null) {\n      customFields = new HashMap<>();\n      for (String customFieldSpec : customFieldsSpec) {\n        String [] split = customFieldSpec.split(\":\"); \n        if (split.length == 2 && StringUtils.isNotBlank(split[0]) && StringUtils.isNotBlank(split[1])) {\n          customFields.put(split[0], split[1]);\n        } else {\n          log.warn(\"Unsupported format for \" + CarrotParams.CUSTOM_FIELD_NAME\n              + \": '\" + customFieldSpec + \"'. Skipping this field definition.\");\n        }\n      }\n    }\n    return customFields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f":["e6d9348a7814f90f24c043aa0d0109adc467a48a"],"e6d9348a7814f90f24c043aa0d0109adc467a48a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["e6d9348a7814f90f24c043aa0d0109adc467a48a","7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e6d9348a7814f90f24c043aa0d0109adc467a48a"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f":["199dfa410f1fdbfd3294106b04096cce5ed34b21","a966532d92cf9ba2856f15a8140151bb6b518e4b"],"e6d9348a7814f90f24c043aa0d0109adc467a48a":["7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f","199dfa410f1fdbfd3294106b04096cce5ed34b21","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6d9348a7814f90f24c043aa0d0109adc467a48a","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}