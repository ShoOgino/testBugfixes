{"path":"solr/core/src/test/org/apache/solr/cloud/TestRequestStatusCollectionAPI#doTest().mjava","commits":[{"id":"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","date":1394784078,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRequestStatusCollectionAPI#doTest().mjava","pathOld":"/dev/null","sourceNew":"  public void doTest() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(\"async\", \"1000\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n    int maxCounter = 10;\n\n    NamedList r = null;\n    NamedList status = null;\n    String message = null;\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, \"1000\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, 10);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 1000 not found in completed tasks.\", \"found 1000 in completed tasks\", message);\n\n    // Check for a random (hopefully non-existent request id\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, \"9999999\");\n    try {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      message = (String) status.get(\"msg\");\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 9999999 found in tasks queue.\", \"Did not find taskid [9999999] in any tasks queue\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", \"collection2\");\n    params.set(\"shard\", \"shard1\");\n    params.set(\"async\", \"1001\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n      params.set(OverseerCollectionProcessor.REQUESTID, \"1001\");\n    try {\n      message = sendStatusRequestWithRetry(params, maxCounter);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 1001 not found in completed tasks.\", \"found 1001 in completed tasks\", message);\n\n      params = new ModifiableSolrParams();\n      params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"collection2\");\n      params.set(\"numShards\", 2);\n      params.set(\"replicationFactor\", 1);\n      params.set(\"maxShardsPerNode\", 100);\n      params.set(\"collection.configName\", \"conf1\");\n      params.set(\"async\", \"1002\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n\n    params = new ModifiableSolrParams();\n\n      params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n      params.set(OverseerCollectionProcessor.REQUESTID, \"1002\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, 10);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n\n    assertEquals(\"Task 1002 not found in completed tasks.\", \"found 1002 in failed tasks\", message);\n\n      params = new ModifiableSolrParams();\n      params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"collection3\");\n      params.set(\"numShards\", 1);\n      params.set(\"replicationFactor\", 1);\n      params.set(\"maxShardsPerNode\", 100);\n      params.set(\"collection.configName\", \"conf1\");\n      params.set(\"async\", \"1002\");\n    try {\n      r = sendRequest(params);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Did not error out on duplicate requests (same request id)\",\n          \"Task with the same requestid already exists.\", r.get(\"error\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","69e6520a21709190413a63084ed135271aab1a7c","69e6520a21709190413a63084ed135271aab1a7c","3aeb3c21ed4f08d89cb237970a0b6ef324c17441"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3aeb3c21ed4f08d89cb237970a0b6ef324c17441","date":1400995257,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRequestStatusCollectionAPI#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRequestStatusCollectionAPI#doTest().mjava","sourceNew":"  public void doTest() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(\"async\", \"1000\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n\n    NamedList r = null;\n    NamedList status = null;\n    String message = null;\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, \"1000\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 1000 not found in completed tasks.\", \"found 1000 in completed tasks\", message);\n\n    // Check for a random (hopefully non-existent request id\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, \"9999999\");\n    try {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      message = (String) status.get(\"msg\");\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 9999999 found in tasks queue.\", \"Did not find taskid [9999999] in any tasks queue\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", \"collection2\");\n    params.set(\"shard\", \"shard1\");\n    params.set(\"async\", \"1001\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n      params.set(OverseerCollectionProcessor.REQUESTID, \"1001\");\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 1001 not found in completed tasks.\", \"found 1001 in completed tasks\", message);\n\n      params = new ModifiableSolrParams();\n      params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"collection2\");\n      params.set(\"numShards\", 2);\n      params.set(\"replicationFactor\", 1);\n      params.set(\"maxShardsPerNode\", 100);\n      params.set(\"collection.configName\", \"conf1\");\n      params.set(\"async\", \"1002\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n\n    params = new ModifiableSolrParams();\n\n      params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n      params.set(OverseerCollectionProcessor.REQUESTID, \"1002\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n\n    assertEquals(\"Task 1002 not found in completed tasks.\", \"found 1002 in failed tasks\", message);\n\n      params = new ModifiableSolrParams();\n      params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"collection3\");\n      params.set(\"numShards\", 1);\n      params.set(\"replicationFactor\", 1);\n      params.set(\"maxShardsPerNode\", 100);\n      params.set(\"collection.configName\", \"conf1\");\n      params.set(\"async\", \"1002\");\n    try {\n      r = sendRequest(params);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Did not error out on duplicate requests (same request id)\",\n          \"Task with the same requestid already exists.\", r.get(\"error\"));\n\n  }\n\n","sourceOld":"  public void doTest() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(\"async\", \"1000\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n    int maxCounter = 10;\n\n    NamedList r = null;\n    NamedList status = null;\n    String message = null;\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, \"1000\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, 10);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 1000 not found in completed tasks.\", \"found 1000 in completed tasks\", message);\n\n    // Check for a random (hopefully non-existent request id\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, \"9999999\");\n    try {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      message = (String) status.get(\"msg\");\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 9999999 found in tasks queue.\", \"Did not find taskid [9999999] in any tasks queue\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", \"collection2\");\n    params.set(\"shard\", \"shard1\");\n    params.set(\"async\", \"1001\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n      params.set(OverseerCollectionProcessor.REQUESTID, \"1001\");\n    try {\n      message = sendStatusRequestWithRetry(params, maxCounter);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 1001 not found in completed tasks.\", \"found 1001 in completed tasks\", message);\n\n      params = new ModifiableSolrParams();\n      params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"collection2\");\n      params.set(\"numShards\", 2);\n      params.set(\"replicationFactor\", 1);\n      params.set(\"maxShardsPerNode\", 100);\n      params.set(\"collection.configName\", \"conf1\");\n      params.set(\"async\", \"1002\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n\n    params = new ModifiableSolrParams();\n\n      params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n      params.set(OverseerCollectionProcessor.REQUESTID, \"1002\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, 10);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n\n    assertEquals(\"Task 1002 not found in completed tasks.\", \"found 1002 in failed tasks\", message);\n\n      params = new ModifiableSolrParams();\n      params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"collection3\");\n      params.set(\"numShards\", 1);\n      params.set(\"replicationFactor\", 1);\n      params.set(\"maxShardsPerNode\", 100);\n      params.set(\"collection.configName\", \"conf1\");\n      params.set(\"async\", \"1002\");\n    try {\n      r = sendRequest(params);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Did not error out on duplicate requests (same request id)\",\n          \"Task with the same requestid already exists.\", r.get(\"error\"));\n\n  }\n\n","bugFix":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"bugIntro":["69e6520a21709190413a63084ed135271aab1a7c","69e6520a21709190413a63084ed135271aab1a7c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRequestStatusCollectionAPI#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRequestStatusCollectionAPI#doTest().mjava","sourceNew":"  public void doTest() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(\"async\", \"1000\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n\n    NamedList r = null;\n    NamedList status = null;\n    String message = null;\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, \"1000\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 1000 not found in completed tasks.\", \"found 1000 in completed tasks\", message);\n\n    // Check for a random (hopefully non-existent request id\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, \"9999999\");\n    try {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      message = (String) status.get(\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 9999999 found in tasks queue.\", \"Did not find taskid [9999999] in any tasks queue\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", \"collection2\");\n    params.set(\"shard\", \"shard1\");\n    params.set(\"async\", \"1001\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n      params.set(OverseerCollectionProcessor.REQUESTID, \"1001\");\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 1001 not found in completed tasks.\", \"found 1001 in completed tasks\", message);\n\n      params = new ModifiableSolrParams();\n      params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"collection2\");\n      params.set(\"numShards\", 2);\n      params.set(\"replicationFactor\", 1);\n      params.set(\"maxShardsPerNode\", 100);\n      params.set(\"collection.configName\", \"conf1\");\n      params.set(\"async\", \"1002\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n\n    params = new ModifiableSolrParams();\n\n      params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n      params.set(OverseerCollectionProcessor.REQUESTID, \"1002\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n\n    assertEquals(\"Task 1002 not found in completed tasks.\", \"found 1002 in failed tasks\", message);\n\n      params = new ModifiableSolrParams();\n      params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"collection3\");\n      params.set(\"numShards\", 1);\n      params.set(\"replicationFactor\", 1);\n      params.set(\"maxShardsPerNode\", 100);\n      params.set(\"collection.configName\", \"conf1\");\n      params.set(\"async\", \"1002\");\n    try {\n      r = sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Did not error out on duplicate requests (same request id)\",\n          \"Task with the same requestid already exists.\", r.get(\"error\"));\n\n  }\n\n","sourceOld":"  public void doTest() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(\"async\", \"1000\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n\n    NamedList r = null;\n    NamedList status = null;\n    String message = null;\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, \"1000\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 1000 not found in completed tasks.\", \"found 1000 in completed tasks\", message);\n\n    // Check for a random (hopefully non-existent request id\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, \"9999999\");\n    try {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      message = (String) status.get(\"msg\");\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 9999999 found in tasks queue.\", \"Did not find taskid [9999999] in any tasks queue\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", \"collection2\");\n    params.set(\"shard\", \"shard1\");\n    params.set(\"async\", \"1001\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n      params.set(OverseerCollectionProcessor.REQUESTID, \"1001\");\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 1001 not found in completed tasks.\", \"found 1001 in completed tasks\", message);\n\n      params = new ModifiableSolrParams();\n      params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"collection2\");\n      params.set(\"numShards\", 2);\n      params.set(\"replicationFactor\", 1);\n      params.set(\"maxShardsPerNode\", 100);\n      params.set(\"collection.configName\", \"conf1\");\n      params.set(\"async\", \"1002\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n\n    params = new ModifiableSolrParams();\n\n      params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n      params.set(OverseerCollectionProcessor.REQUESTID, \"1002\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n\n    assertEquals(\"Task 1002 not found in completed tasks.\", \"found 1002 in failed tasks\", message);\n\n      params = new ModifiableSolrParams();\n      params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"collection3\");\n      params.set(\"numShards\", 1);\n      params.set(\"replicationFactor\", 1);\n      params.set(\"maxShardsPerNode\", 100);\n      params.set(\"collection.configName\", \"conf1\");\n      params.set(\"async\", \"1002\");\n    try {\n      r = sendRequest(params);\n    } catch (SolrServerException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Did not error out on duplicate requests (same request id)\",\n          \"Task with the same requestid already exists.\", r.get(\"error\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRequestStatusCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRequestStatusCollectionAPI#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(\"async\", \"1000\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n\n    NamedList r = null;\n    NamedList status = null;\n    String message = null;\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, \"1000\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 1000 not found in completed tasks.\", \"found 1000 in completed tasks\", message);\n\n    // Check for a random (hopefully non-existent request id\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, \"9999999\");\n    try {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      message = (String) status.get(\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 9999999 found in tasks queue.\", \"Did not find taskid [9999999] in any tasks queue\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", \"collection2\");\n    params.set(\"shard\", \"shard1\");\n    params.set(\"async\", \"1001\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n      params.set(OverseerCollectionProcessor.REQUESTID, \"1001\");\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 1001 not found in completed tasks.\", \"found 1001 in completed tasks\", message);\n\n      params = new ModifiableSolrParams();\n      params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"collection2\");\n      params.set(\"numShards\", 2);\n      params.set(\"replicationFactor\", 1);\n      params.set(\"maxShardsPerNode\", 100);\n      params.set(\"collection.configName\", \"conf1\");\n      params.set(\"async\", \"1002\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n\n    params = new ModifiableSolrParams();\n\n      params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n      params.set(OverseerCollectionProcessor.REQUESTID, \"1002\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n\n    assertEquals(\"Task 1002 not found in completed tasks.\", \"found 1002 in failed tasks\", message);\n\n      params = new ModifiableSolrParams();\n      params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"collection3\");\n      params.set(\"numShards\", 1);\n      params.set(\"replicationFactor\", 1);\n      params.set(\"maxShardsPerNode\", 100);\n      params.set(\"collection.configName\", \"conf1\");\n      params.set(\"async\", \"1002\");\n    try {\n      r = sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Did not error out on duplicate requests (same request id)\",\n          \"Task with the same requestid already exists.\", r.get(\"error\"));\n\n  }\n\n","sourceOld":"  public void doTest() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(\"async\", \"1000\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n\n    NamedList r = null;\n    NamedList status = null;\n    String message = null;\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, \"1000\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 1000 not found in completed tasks.\", \"found 1000 in completed tasks\", message);\n\n    // Check for a random (hopefully non-existent request id\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionProcessor.REQUESTID, \"9999999\");\n    try {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      message = (String) status.get(\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 9999999 found in tasks queue.\", \"Did not find taskid [9999999] in any tasks queue\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", \"collection2\");\n    params.set(\"shard\", \"shard1\");\n    params.set(\"async\", \"1001\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n      params.set(OverseerCollectionProcessor.REQUESTID, \"1001\");\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task 1001 not found in completed tasks.\", \"found 1001 in completed tasks\", message);\n\n      params = new ModifiableSolrParams();\n      params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"collection2\");\n      params.set(\"numShards\", 2);\n      params.set(\"replicationFactor\", 1);\n      params.set(\"maxShardsPerNode\", 100);\n      params.set(\"collection.configName\", \"conf1\");\n      params.set(\"async\", \"1002\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n\n    params = new ModifiableSolrParams();\n\n      params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n      params.set(OverseerCollectionProcessor.REQUESTID, \"1002\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n\n    assertEquals(\"Task 1002 not found in completed tasks.\", \"found 1002 in failed tasks\", message);\n\n      params = new ModifiableSolrParams();\n      params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"collection3\");\n      params.set(\"numShards\", 1);\n      params.set(\"replicationFactor\", 1);\n      params.set(\"maxShardsPerNode\", 100);\n      params.set(\"collection.configName\", \"conf1\");\n      params.set(\"async\", \"1002\");\n    try {\n      r = sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Did not error out on duplicate requests (same request id)\",\n          \"Task with the same requestid already exists.\", r.get(\"error\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["3aeb3c21ed4f08d89cb237970a0b6ef324c17441"],"abb23fcc2461782ab204e61213240feb77d355aa":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3aeb3c21ed4f08d89cb237970a0b6ef324c17441":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["abb23fcc2461782ab204e61213240feb77d355aa"],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["3aeb3c21ed4f08d89cb237970a0b6ef324c17441"],"3aeb3c21ed4f08d89cb237970a0b6ef324c17441":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}