{"path":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#createSampler(int,ScoredDocIDs,boolean).mjava","commits":[{"id":"99b17503f4e360f8140fe80a593268486cd718b4","date":1318337685,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#createSampler(int,ScoredDocIDs,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private Sampler createSampler(int nTrial, ScoredDocIDs scoredDocIDs, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n\n    samplingParams.setSampingThreshold(11000); //force sampling \n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random.nextLong())) :\n          new RepeatableSampler(samplingParams);\n    assertTrue(\"must enable sampling for this test!\",sampler.shouldSample(scoredDocIDs));\n    return sampler;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#createSampler(int,ScoredDocIDs,boolean).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#createSampler(int,ScoredDocIDs,boolean).mjava","sourceNew":"  private Sampler createSampler(int nTrial, ScoredDocIDs scoredDocIDs, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n\n    samplingParams.setSampingThreshold(11000); //force sampling \n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    assertTrue(\"must enable sampling for this test!\",sampler.shouldSample(scoredDocIDs));\n    return sampler;\n  }\n\n","sourceOld":"  private Sampler createSampler(int nTrial, ScoredDocIDs scoredDocIDs, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n\n    samplingParams.setSampingThreshold(11000); //force sampling \n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random.nextLong())) :\n          new RepeatableSampler(samplingParams);\n    assertTrue(\"must enable sampling for this test!\",sampler.shouldSample(scoredDocIDs));\n    return sampler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#createSampler(int,ScoredDocIDs,boolean).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#createSampler(int,ScoredDocIDs,boolean).mjava","sourceNew":"  private Sampler createSampler(int nTrial, ScoredDocIDs scoredDocIDs, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n\n    samplingParams.setSampingThreshold(11000); //force sampling \n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    assertTrue(\"must enable sampling for this test!\",sampler.shouldSample(scoredDocIDs));\n    return sampler;\n  }\n\n","sourceOld":"  private Sampler createSampler(int nTrial, ScoredDocIDs scoredDocIDs, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n\n    samplingParams.setSampingThreshold(11000); //force sampling \n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    assertTrue(\"must enable sampling for this test!\",sampler.shouldSample(scoredDocIDs));\n    return sampler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"99b17503f4e360f8140fe80a593268486cd718b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["99b17503f4e360f8140fe80a593268486cd718b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"99b17503f4e360f8140fe80a593268486cd718b4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99b17503f4e360f8140fe80a593268486cd718b4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}