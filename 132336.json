{"path":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","commits":[{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms).mjava","sourceNew":"  /** \n   * Terms api equivalency \n   */\n  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    // TODO: test seeking too\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random);\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Terms api equivalency \n   */\n  public void assertTerms(Terms leftTerms, Terms rightTerms) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    // TODO: test seeking too\n    \n    int numIntersections = atLeast(3);\n    for (int i = 0; i < numIntersections; i++) {\n      String re = AutomatonTestUtil.randomRegexp(random);\n      CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n      if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n        // TODO: test start term too\n        TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n        TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n        assertTermsEnum(leftIntersection, rightIntersection, rarely());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  /** \n   * Terms api equivalency \n   */\n  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    // TODO: test seeking too\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random);\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Terms api equivalency \n   */\n  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    // TODO: test seeking too\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random);\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8be580b58bcc650d428f3f22de81cadcf51d650a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}