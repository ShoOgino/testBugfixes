{"path":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#generateString(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#generateString(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#generateString(int).mjava","sourceNew":"  private static String generateString(int i) {\n    String s = null;\n    if (i > 0 && random.nextInt(3) == 1) {\n      // reuse past string -- try to find one that's not null\n      for(int iter = 0; iter < 10 && s == null;iter++) {\n        s = unicodeStrings[random.nextInt(i)];\n      }\n      if (s == null) {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n    } else {\n      s = _TestUtil.randomUnicodeString(random);\n    }\n    return s;\n  }\n\n","sourceOld":"  private static String generateString(int i) {\n    String s = null;\n    if (i > 0 && random.nextInt(3) == 1) {\n      // reuse past string -- try to find one that's not null\n      for(int iter = 0; iter < 10 && s == null;iter++) {\n        s = unicodeStrings[random.nextInt(i)];\n      }\n      if (s == null) {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n    } else {\n      s = _TestUtil.randomUnicodeString(random);\n    }\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#generateString(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#generateString(int).mjava","sourceNew":"  private static String generateString(int i) {\n    String s = null;\n    if (i > 0 && random().nextInt(3) == 1) {\n      // reuse past string -- try to find one that's not null\n      for(int iter = 0; iter < 10 && s == null;iter++) {\n        s = unicodeStrings[random().nextInt(i)];\n      }\n      if (s == null) {\n        s = _TestUtil.randomUnicodeString(random());\n      }\n    } else {\n      s = _TestUtil.randomUnicodeString(random());\n    }\n    return s;\n  }\n\n","sourceOld":"  private static String generateString(int i) {\n    String s = null;\n    if (i > 0 && random.nextInt(3) == 1) {\n      // reuse past string -- try to find one that's not null\n      for(int iter = 0; iter < 10 && s == null;iter++) {\n        s = unicodeStrings[random.nextInt(i)];\n      }\n      if (s == null) {\n        s = _TestUtil.randomUnicodeString(random);\n      }\n    } else {\n      s = _TestUtil.randomUnicodeString(random);\n    }\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#generateString(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#generateString(int).mjava","sourceNew":"  private static String generateString(int i) {\n    String s = null;\n    if (i > 0 && random().nextInt(3) == 1) {\n      // reuse past string -- try to find one that's not null\n      for(int iter = 0; iter < 10 && s == null;iter++) {\n        s = unicodeStrings[random().nextInt(i)];\n      }\n      if (s == null) {\n        s = TestUtil.randomUnicodeString(random());\n      }\n    } else {\n      s = TestUtil.randomUnicodeString(random());\n    }\n    return s;\n  }\n\n","sourceOld":"  private static String generateString(int i) {\n    String s = null;\n    if (i > 0 && random().nextInt(3) == 1) {\n      // reuse past string -- try to find one that's not null\n      for(int iter = 0; iter < 10 && s == null;iter++) {\n        s = unicodeStrings[random().nextInt(i)];\n      }\n      if (s == null) {\n        s = _TestUtil.randomUnicodeString(random());\n      }\n    } else {\n      s = _TestUtil.randomUnicodeString(random());\n    }\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#generateString(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#generateString(int).mjava","sourceNew":"  private static String generateString(int i) {\n    String s = null;\n    if (i > 0 && random().nextInt(3) == 1) {\n      // reuse past string -- try to find one that's not null\n      for(int iter = 0; iter < 10 && s == null;iter++) {\n        s = unicodeStrings[random().nextInt(i)];\n      }\n      if (s == null) {\n        s = TestUtil.randomUnicodeString(random());\n      }\n    } else {\n      s = TestUtil.randomUnicodeString(random());\n    }\n    return s;\n  }\n\n","sourceOld":"  private static String generateString(int i) {\n    String s = null;\n    if (i > 0 && random().nextInt(3) == 1) {\n      // reuse past string -- try to find one that's not null\n      for(int iter = 0; iter < 10 && s == null;iter++) {\n        s = unicodeStrings[random().nextInt(i)];\n      }\n      if (s == null) {\n        s = TestUtil.randomUnicodeString(random());\n      }\n    } else {\n      s = TestUtil.randomUnicodeString(random());\n    }\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#generateString(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#generateString(int).mjava","sourceNew":"  private static String generateString(int i) {\n    String s = null;\n    if (i > 0 && random().nextInt(3) == 1) {\n      // reuse past string -- try to find one that's not null\n      for(int iter = 0; iter < 10 && s == null;iter++) {\n        s = unicodeStrings[random().nextInt(i)];\n      }\n      if (s == null) {\n        s = TestUtil.randomUnicodeString(random());\n      }\n    } else {\n      s = TestUtil.randomUnicodeString(random());\n    }\n    return s;\n  }\n\n","sourceOld":"  private static String generateString(int i) {\n    String s = null;\n    if (i > 0 && random().nextInt(3) == 1) {\n      // reuse past string -- try to find one that's not null\n      for(int iter = 0; iter < 10 && s == null;iter++) {\n        s = unicodeStrings[random().nextInt(i)];\n      }\n      if (s == null) {\n        s = TestUtil.randomUnicodeString(random());\n      }\n    } else {\n      s = TestUtil.randomUnicodeString(random());\n    }\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#generateString(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#generateString(int).mjava","sourceNew":"  private static String generateString(int i) {\n    String s = null;\n    if (i > 0 && random().nextInt(3) == 1) {\n      // reuse past string -- try to find one that's not null\n      for(int iter = 0; iter < 10 && s == null;iter++) {\n        s = unicodeStrings[random().nextInt(i)];\n      }\n      if (s == null) {\n        s = TestUtil.randomUnicodeString(random());\n      }\n    } else {\n      s = TestUtil.randomUnicodeString(random());\n    }\n    return s;\n  }\n\n","sourceOld":"  private static String generateString(int i) {\n    String s = null;\n    if (i > 0 && random().nextInt(3) == 1) {\n      // reuse past string -- try to find one that's not null\n      for(int iter = 0; iter < 10 && s == null;iter++) {\n        s = unicodeStrings[random().nextInt(i)];\n      }\n      if (s == null) {\n        s = TestUtil.randomUnicodeString(random());\n      }\n    } else {\n      s = TestUtil.randomUnicodeString(random());\n    }\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["6613659748fe4411a7dcf85266e55db1f95f7315","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["6613659748fe4411a7dcf85266e55db1f95f7315"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"56572ec06f1407c066d6b7399413178b33176cd8":["6613659748fe4411a7dcf85266e55db1f95f7315","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}