{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestSpatialPrefixField#testRawTokens().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestSpatialPrefixField#testRawTokens().mjava","pathOld":"modules/spatial/src/test/org/apache/lucene/spatial/prefix/TestSpatialPrefixField#testRawTokens().mjava","sourceNew":"  @Test\n  public void testRawTokens() {\n    // Ignoring geometry for now, and focus on what tokens need to match\n\n    List<String> docA = Arrays.asList(\n        \"AAAAAA*\",\n        \"AAAAAB+\"\n    );\n\n    List<String> docB = Arrays.asList(\n        \"A*\",\n        \"BB*\"\n    );\n\n    // Assumptions:\n    checkQuery(\"AAAAA\", \"docA\", \"docB\");\n    checkQuery(\"AAAAA*\", \"docA\", \"docB\"); // for now * and + are essentially identical\n    checkQuery(\"AAAAA+\", \"docA\", \"docB\"); // down the road, there may be a difference between 'covers' and an edge\n\n    checkQuery(\"AA*\", \"docB\", \"docA\"); // Bigger input query\n\n    checkQuery(\"AAAAAAAAAAAA*\", \"docA\", \"docB\"); // small\n\n    checkQuery(\"BC\"); // nothing\n    checkQuery(\"XX\"); // nothing\n\n    // match only B\n    checkQuery(\"B\", \"docB\");\n    checkQuery(\"BBBB\", \"docB\");\n    checkQuery(\"B*\", \"docB\");\n    checkQuery(\"BBBB*\", \"docB\");\n  }\n\n","sourceOld":"  @Test\n  public void testRawTokens() {\n    // Ignoring geometry for now, and focus on what tokens need to match\n\n    List<String> docA = Arrays.asList(\n        \"AAAAAA*\",\n        \"AAAAAB+\"\n    );\n\n    List<String> docB = Arrays.asList(\n        \"A*\",\n        \"BB*\"\n    );\n\n    // Assumptions:\n    checkQuery(\"AAAAA\", \"docA\", \"docB\");\n    checkQuery(\"AAAAA*\", \"docA\", \"docB\"); // for now * and + are essentially identical\n    checkQuery(\"AAAAA+\", \"docA\", \"docB\"); // down the road, there may be a difference between 'covers' and an edge\n\n    checkQuery(\"AA*\", \"docB\", \"docA\"); // Bigger input query\n\n    checkQuery(\"AAAAAAAAAAAA*\", \"docA\", \"docB\"); // small\n\n    checkQuery(\"BC\"); // nothing\n    checkQuery(\"XX\"); // nothing\n\n    // match only B\n    checkQuery(\"B\", \"docB\");\n    checkQuery(\"BBBB\", \"docB\");\n    checkQuery(\"B*\", \"docB\");\n    checkQuery(\"BBBB*\", \"docB\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c327517edf97b94827c01757fbf21e0ca625eb7","date":1341211669,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestSpatialPrefixField#testRawTokens().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRawTokens() {\n    // Ignoring geometry for now, and focus on what tokens need to match\n\n    List<String> docA = Arrays.asList(\n        \"AAAAAA*\",\n        \"AAAAAB+\"\n    );\n\n    List<String> docB = Arrays.asList(\n        \"A*\",\n        \"BB*\"\n    );\n\n    // Assumptions:\n    checkQuery(\"AAAAA\", \"docA\", \"docB\");\n    checkQuery(\"AAAAA*\", \"docA\", \"docB\"); // for now * and + are essentially identical\n    checkQuery(\"AAAAA+\", \"docA\", \"docB\"); // down the road, there may be a difference between 'covers' and an edge\n\n    checkQuery(\"AA*\", \"docB\", \"docA\"); // Bigger input query\n\n    checkQuery(\"AAAAAAAAAAAA*\", \"docA\", \"docB\"); // small\n\n    checkQuery(\"BC\"); // nothing\n    checkQuery(\"XX\"); // nothing\n\n    // match only B\n    checkQuery(\"B\", \"docB\");\n    checkQuery(\"BBBB\", \"docB\");\n    checkQuery(\"B*\", \"docB\");\n    checkQuery(\"BBBB*\", \"docB\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestSpatialPrefixField#testRawTokens().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRawTokens() {\n    // Ignoring geometry for now, and focus on what tokens need to match\n\n    List<String> docA = Arrays.asList(\n        \"AAAAAA*\",\n        \"AAAAAB+\"\n    );\n\n    List<String> docB = Arrays.asList(\n        \"A*\",\n        \"BB*\"\n    );\n\n    // Assumptions:\n    checkQuery(\"AAAAA\", \"docA\", \"docB\");\n    checkQuery(\"AAAAA*\", \"docA\", \"docB\"); // for now * and + are essentially identical\n    checkQuery(\"AAAAA+\", \"docA\", \"docB\"); // down the road, there may be a difference between 'covers' and an edge\n\n    checkQuery(\"AA*\", \"docB\", \"docA\"); // Bigger input query\n\n    checkQuery(\"AAAAAAAAAAAA*\", \"docA\", \"docB\"); // small\n\n    checkQuery(\"BC\"); // nothing\n    checkQuery(\"XX\"); // nothing\n\n    // match only B\n    checkQuery(\"B\", \"docB\");\n    checkQuery(\"BBBB\", \"docB\");\n    checkQuery(\"B*\", \"docB\");\n    checkQuery(\"BBBB*\", \"docB\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9c327517edf97b94827c01757fbf21e0ca625eb7":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9c327517edf97b94827c01757fbf21e0ca625eb7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c327517edf97b94827c01757fbf21e0ca625eb7"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["9c327517edf97b94827c01757fbf21e0ca625eb7","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"9c327517edf97b94827c01757fbf21e0ca625eb7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}