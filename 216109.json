{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","sourceNew":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.info(\"Starting reconnect to ZooKeeper attempts ...\");\n    executor = Executors.newScheduledThreadPool(1);\n    executor.schedule(new Runnable() {\n      private int delay = 1000;\n      public void run() {\n        log.info(\"Attempting the connect...\");\n        boolean connected = false;\n        try {\n          updater.update(new SolrZooKeeper(serverAddress, zkClientTimeout, watcher));\n          log.info(\"Reconnected to ZooKeeper\");\n          connected = true;\n        } catch (Exception e) {\n          log.error(\"\", e);\n          log.info(\"Reconnect to ZooKeeper failed\");\n        }\n        if(connected) {\n          executor.shutdownNow();\n        } else {\n          if(delay < 240000) {\n            delay = delay * 2;\n          }\n          executor.schedule(this, delay, TimeUnit.MILLISECONDS);\n        }\n        \n      }\n    }, 1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.info(\"Starting reconnect to ZooKeeper attempts ...\");\n    executor = Executors.newScheduledThreadPool(1);\n    executor.schedule(new Runnable() {\n      private int delay = 1000;\n      public void run() {\n        log.info(\"Attempting the connect...\");\n        boolean connected = false;\n        try {\n          updater.update(new SolrZooKeeper(serverAddress, zkClientTimeout, watcher));\n          log.info(\"Reconnected to ZooKeeper\");\n          connected = true;\n        } catch (Exception e) {\n          log.error(\"\", e);\n          log.info(\"Reconnect to ZooKeeper failed\");\n        }\n        if(connected) {\n          executor.shutdownNow();\n        } else {\n          if(delay < 240000) {\n            delay = delay * 2;\n          }\n          executor.schedule(this, delay, TimeUnit.MILLISECONDS);\n        }\n        \n      }\n    }, 1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","sourceNew":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.info(\"Starting reconnect to ZooKeeper attempts ...\");\n    executor = Executors.newScheduledThreadPool(1);\n    executor.schedule(new Runnable() {\n      private int delay = 1000;\n      public void run() {\n        log.info(\"Attempting the connect...\");\n        boolean connected = false;\n        try {\n          updater.update(new SolrZooKeeper(serverAddress, zkClientTimeout, watcher));\n          log.info(\"Reconnected to ZooKeeper\");\n          connected = true;\n        } catch (Exception e) {\n          log.error(\"\", e);\n          log.info(\"Reconnect to ZooKeeper failed\");\n        }\n        if(connected) {\n          executor.shutdownNow();\n        } else {\n          if(delay < 240000) {\n            delay = delay * 2;\n          }\n          executor.schedule(this, delay, TimeUnit.MILLISECONDS);\n        }\n        \n      }\n    }, 1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.info(\"Starting reconnect to ZooKeeper attempts ...\");\n    executor = Executors.newScheduledThreadPool(1);\n    executor.schedule(new Runnable() {\n      private int delay = 1000;\n      public void run() {\n        log.info(\"Attempting the connect...\");\n        boolean connected = false;\n        try {\n          updater.update(new SolrZooKeeper(serverAddress, zkClientTimeout, watcher));\n          log.info(\"Reconnected to ZooKeeper\");\n          connected = true;\n        } catch (Exception e) {\n          log.error(\"\", e);\n          log.info(\"Reconnect to ZooKeeper failed\");\n        }\n        if(connected) {\n          executor.shutdownNow();\n        } else {\n          if(delay < 240000) {\n            delay = delay * 2;\n          }\n          executor.schedule(this, delay, TimeUnit.MILLISECONDS);\n        }\n        \n      }\n    }, 1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","sourceNew":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.info(\"Starting reconnect to ZooKeeper attempts ...\");\n    executor = Executors.newScheduledThreadPool(1);\n    executor.schedule(new Runnable() {\n      private int delay = 1000;\n      public void run() {\n        log.info(\"Attempting the connect...\");\n        boolean connected = false;\n        try {\n          updater.update(new SolrZooKeeper(serverAddress, zkClientTimeout, watcher));\n          log.info(\"Reconnected to ZooKeeper\");\n          connected = true;\n        } catch (Exception e) {\n          log.error(\"\", e);\n          log.info(\"Reconnect to ZooKeeper failed\");\n        }\n        if(connected) {\n          executor.shutdownNow();\n        } else {\n          if(delay < 240000) {\n            delay = delay * 2;\n          }\n          executor.schedule(this, delay, TimeUnit.MILLISECONDS);\n        }\n        \n      }\n    }, 1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.info(\"Starting reconnect to ZooKeeper attempts ...\");\n    executor = Executors.newScheduledThreadPool(1);\n    executor.schedule(new Runnable() {\n      private int delay = 1000;\n      public void run() {\n        log.info(\"Attempting the connect...\");\n        boolean connected = false;\n        try {\n          updater.update(new SolrZooKeeper(serverAddress, zkClientTimeout, watcher));\n          log.info(\"Reconnected to ZooKeeper\");\n          connected = true;\n        } catch (Exception e) {\n          log.error(\"\", e);\n          log.info(\"Reconnect to ZooKeeper failed\");\n        }\n        if(connected) {\n          executor.shutdownNow();\n        } else {\n          if(delay < 240000) {\n            delay = delay * 2;\n          }\n          executor.schedule(this, delay, TimeUnit.MILLISECONDS);\n        }\n        \n      }\n    }, 1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","sourceNew":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.info(\"Connection expired - starting a new one...\");\n    \n    try {\n      updater\n          .update(new SolrZooKeeper(serverAddress, zkClientTimeout, watcher));\n      log.info(\"Reconnected to ZooKeeper\");\n    } catch (Exception e) {\n      SolrException.log(log, \"Reconnect to ZooKeeper failed\", e);\n      log.info(\"Reconnect to ZooKeeper failed\");\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.info(\"Starting reconnect to ZooKeeper attempts ...\");\n    executor = Executors.newScheduledThreadPool(1);\n    executor.schedule(new Runnable() {\n      private int delay = 1000;\n      public void run() {\n        log.info(\"Attempting the connect...\");\n        boolean connected = false;\n        try {\n          updater.update(new SolrZooKeeper(serverAddress, zkClientTimeout, watcher));\n          log.info(\"Reconnected to ZooKeeper\");\n          connected = true;\n        } catch (Exception e) {\n          log.error(\"\", e);\n          log.info(\"Reconnect to ZooKeeper failed\");\n        }\n        if(connected) {\n          executor.shutdownNow();\n        } else {\n          if(delay < 240000) {\n            delay = delay * 2;\n          }\n          executor.schedule(this, delay, TimeUnit.MILLISECONDS);\n        }\n        \n      }\n    }, 1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":["c7f3712a3e82b6f849bec5eb4eea89be0463f611","a697d0472461db648ff3f697d6b99115204c6054","bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","sourceNew":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.info(\"Connection expired - starting a new one...\");\n    \n    try {\n      updater\n          .update(new SolrZooKeeper(serverAddress, zkClientTimeout, watcher));\n      log.info(\"Reconnected to ZooKeeper\");\n    } catch (Exception e) {\n      SolrException.log(log, \"Reconnect to ZooKeeper failed\", e);\n      log.info(\"Reconnect to ZooKeeper failed\");\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.info(\"Starting reconnect to ZooKeeper attempts ...\");\n    executor = Executors.newScheduledThreadPool(1);\n    executor.schedule(new Runnable() {\n      private int delay = 1000;\n      public void run() {\n        log.info(\"Attempting the connect...\");\n        boolean connected = false;\n        try {\n          updater.update(new SolrZooKeeper(serverAddress, zkClientTimeout, watcher));\n          log.info(\"Reconnected to ZooKeeper\");\n          connected = true;\n        } catch (Exception e) {\n          log.error(\"\", e);\n          log.info(\"Reconnect to ZooKeeper failed\");\n        }\n        if(connected) {\n          executor.shutdownNow();\n        } else {\n          if(delay < 240000) {\n            delay = delay * 2;\n          }\n          executor.schedule(this, delay, TimeUnit.MILLISECONDS);\n        }\n        \n      }\n    }, 1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","sourceNew":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.info(\"Connection expired - starting a new one...\");\n    \n    try {\n      updater\n          .update(new SolrZooKeeper(serverAddress, zkClientTimeout, watcher));\n      log.info(\"Reconnected to ZooKeeper\");\n    } catch (Exception e) {\n      SolrException.log(log, \"Reconnect to ZooKeeper failed\", e);\n      log.info(\"Reconnect to ZooKeeper failed\");\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.info(\"Starting reconnect to ZooKeeper attempts ...\");\n    executor = Executors.newScheduledThreadPool(1);\n    executor.schedule(new Runnable() {\n      private int delay = 1000;\n      public void run() {\n        log.info(\"Attempting the connect...\");\n        boolean connected = false;\n        try {\n          updater.update(new SolrZooKeeper(serverAddress, zkClientTimeout, watcher));\n          log.info(\"Reconnected to ZooKeeper\");\n          connected = true;\n        } catch (Exception e) {\n          log.error(\"\", e);\n          log.info(\"Reconnect to ZooKeeper failed\");\n        }\n        if(connected) {\n          executor.shutdownNow();\n        } else {\n          if(delay < 240000) {\n            delay = delay * 2;\n          }\n          executor.schedule(this, delay, TimeUnit.MILLISECONDS);\n        }\n        \n      }\n    }, 1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f3712a3e82b6f849bec5eb4eea89be0463f611","date":1382202596,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","sourceNew":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.info(\"Connection expired - starting a new one...\");\n    SolrZooKeeper zk = new SolrZooKeeper(serverAddress, zkClientTimeout, watcher);\n    boolean success = false;\n    try {\n      updater\n          .update(zk);\n      success = true;\n      log.info(\"Reconnected to ZooKeeper\");\n    } catch (Exception e) {\n      SolrException.log(log, \"Reconnect to ZooKeeper failed\", e);\n      log.info(\"Reconnect to ZooKeeper failed\");\n    } finally {\n      if (!success) {\n        try {\n          zk.close();\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.info(\"Connection expired - starting a new one...\");\n    \n    try {\n      updater\n          .update(new SolrZooKeeper(serverAddress, zkClientTimeout, watcher));\n      log.info(\"Reconnected to ZooKeeper\");\n    } catch (Exception e) {\n      SolrException.log(log, \"Reconnect to ZooKeeper failed\", e);\n      log.info(\"Reconnect to ZooKeeper failed\");\n    }\n    \n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c83f985d9828d30801541f1eed26aa3169646baf","date":1409315453,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","sourceNew":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.info(\"Connection expired - starting a new one...\");\n    SolrZooKeeper zk = createSolrZooKeeper(serverAddress, zkClientTimeout, watcher);\n    boolean success = false;\n    try {\n      updater\n          .update(zk);\n      success = true;\n      log.info(\"Reconnected to ZooKeeper\");\n    } catch (Exception e) {\n      SolrException.log(log, \"Reconnect to ZooKeeper failed\", e);\n      log.info(\"Reconnect to ZooKeeper failed\");\n    } finally {\n      if (!success) {\n        try {\n          zk.close();\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.info(\"Connection expired - starting a new one...\");\n    SolrZooKeeper zk = new SolrZooKeeper(serverAddress, zkClientTimeout, watcher);\n    boolean success = false;\n    try {\n      updater\n          .update(zk);\n      success = true;\n      log.info(\"Reconnected to ZooKeeper\");\n    } catch (Exception e) {\n      SolrException.log(log, \"Reconnect to ZooKeeper failed\", e);\n      log.info(\"Reconnect to ZooKeeper failed\");\n    } finally {\n      if (!success) {\n        try {\n          zk.close();\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a697d0472461db648ff3f697d6b99115204c6054","date":1469556699,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","sourceNew":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.warn(\"Connection expired - starting a new one...\");\n    SolrZooKeeper zk = createSolrZooKeeper(serverAddress, zkClientTimeout, watcher);\n    boolean success = false;\n    try {\n      updater\n          .update(zk);\n      success = true;\n      log.info(\"Reconnected to ZooKeeper\");\n    } catch (Exception e) {\n      SolrException.log(log, \"Reconnect to ZooKeeper failed\", e);\n      log.warn(\"Reconnect to ZooKeeper failed\");\n    } finally {\n      if (!success) {\n        try {\n          zk.close();\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.info(\"Connection expired - starting a new one...\");\n    SolrZooKeeper zk = createSolrZooKeeper(serverAddress, zkClientTimeout, watcher);\n    boolean success = false;\n    try {\n      updater\n          .update(zk);\n      success = true;\n      log.info(\"Reconnected to ZooKeeper\");\n    } catch (Exception e) {\n      SolrException.log(log, \"Reconnect to ZooKeeper failed\", e);\n      log.info(\"Reconnect to ZooKeeper failed\");\n    } finally {\n      if (!success) {\n        try {\n          zk.close();\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    \n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":["bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","sourceNew":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.warn(\"Connection expired - starting a new one...\");\n    SolrZooKeeper zk = createSolrZooKeeper(serverAddress, zkClientTimeout, watcher);\n    boolean success = false;\n    try {\n      updater\n          .update(zk);\n      success = true;\n      log.info(\"Reconnected to ZooKeeper\");\n    } catch (Exception e) {\n      SolrException.log(log, \"Reconnect to ZooKeeper failed\", e);\n      log.warn(\"Reconnect to ZooKeeper failed\");\n    } finally {\n      if (!success) {\n        try {\n          zk.close();\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.info(\"Connection expired - starting a new one...\");\n    SolrZooKeeper zk = createSolrZooKeeper(serverAddress, zkClientTimeout, watcher);\n    boolean success = false;\n    try {\n      updater\n          .update(zk);\n      success = true;\n      log.info(\"Reconnected to ZooKeeper\");\n    } catch (Exception e) {\n      SolrException.log(log, \"Reconnect to ZooKeeper failed\", e);\n      log.info(\"Reconnect to ZooKeeper failed\");\n    } finally {\n      if (!success) {\n        try {\n          zk.close();\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","sourceNew":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.warn(\"Connection expired - starting a new one...\");\n    SolrZooKeeper zk = createSolrZooKeeper(serverAddress, zkClientTimeout, watcher);\n    boolean success = false;\n    try {\n      updater\n          .update(zk);\n      success = true;\n      log.info(\"Reconnected to ZooKeeper\");\n    } catch (Exception e) {\n      SolrException.log(log, \"Reconnect to ZooKeeper failed\", e);\n      log.warn(\"Reconnect to ZooKeeper failed\");\n    } finally {\n      if (!success) {\n        try {\n          zk.close();\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.info(\"Connection expired - starting a new one...\");\n    SolrZooKeeper zk = createSolrZooKeeper(serverAddress, zkClientTimeout, watcher);\n    boolean success = false;\n    try {\n      updater\n          .update(zk);\n      success = true;\n      log.info(\"Reconnected to ZooKeeper\");\n    } catch (Exception e) {\n      SolrException.log(log, \"Reconnect to ZooKeeper failed\", e);\n      log.info(\"Reconnect to ZooKeeper failed\");\n    } finally {\n      if (!success) {\n        try {\n          zk.close();\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","sourceNew":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.warn(\"Connection expired - starting a new one...\");\n    SolrZooKeeper zk = createSolrZooKeeper(serverAddress, zkClientTimeout, watcher);\n    boolean success = false;\n    try {\n      updater\n          .update(zk);\n      success = true;\n      log.info(\"Reconnected to ZooKeeper\");\n    } catch (AlreadyClosedException e) {\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Reconnect to ZooKeeper failed\", e);\n      log.warn(\"Reconnect to ZooKeeper failed\");\n    } finally {\n      if (!success) {\n        try {\n          zk.close();\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.warn(\"Connection expired - starting a new one...\");\n    SolrZooKeeper zk = createSolrZooKeeper(serverAddress, zkClientTimeout, watcher);\n    boolean success = false;\n    try {\n      updater\n          .update(zk);\n      success = true;\n      log.info(\"Reconnected to ZooKeeper\");\n    } catch (Exception e) {\n      SolrException.log(log, \"Reconnect to ZooKeeper failed\", e);\n      log.warn(\"Reconnect to ZooKeeper failed\");\n    } finally {\n      if (!success) {\n        try {\n          zk.close();\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bbb0b5c5101d175049b4ced1462f4c266d32fc63","date":1559534216,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DefaultConnectionStrategy#reconnect(String,int,Watcher,ZkUpdate).mjava","sourceNew":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException, InterruptedException, TimeoutException {\n    log.warn(\"Connection expired - starting a new one...\");\n    SolrZooKeeper zk = createSolrZooKeeper(serverAddress, zkClientTimeout, watcher);\n    boolean success = false;\n    try {\n      updater\n          .update(zk);\n      success = true;\n      log.info(\"Reconnected to ZooKeeper\");\n    } catch (AlreadyClosedException e) {\n\n    } finally {\n      if (!success) {\n        try {\n          zk.close();\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void reconnect(final String serverAddress, final int zkClientTimeout,\n      final Watcher watcher, final ZkUpdate updater) throws IOException {\n    log.warn(\"Connection expired - starting a new one...\");\n    SolrZooKeeper zk = createSolrZooKeeper(serverAddress, zkClientTimeout, watcher);\n    boolean success = false;\n    try {\n      updater\n          .update(zk);\n      success = true;\n      log.info(\"Reconnected to ZooKeeper\");\n    } catch (AlreadyClosedException e) {\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Reconnect to ZooKeeper failed\", e);\n      log.warn(\"Reconnect to ZooKeeper failed\");\n    } finally {\n      if (!success) {\n        try {\n          zk.close();\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    \n  }\n\n","bugFix":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","2c007e7c4cf8c55bc2a5884e315123afaaeec87f","a697d0472461db648ff3f697d6b99115204c6054"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7f3712a3e82b6f849bec5eb4eea89be0463f611":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a697d0472461db648ff3f697d6b99115204c6054"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c83f985d9828d30801541f1eed26aa3169646baf","a697d0472461db648ff3f697d6b99115204c6054"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a697d0472461db648ff3f697d6b99115204c6054":["c83f985d9828d30801541f1eed26aa3169646baf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bbb0b5c5101d175049b4ced1462f4c266d32fc63":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"c83f985d9828d30801541f1eed26aa3169646baf":["c7f3712a3e82b6f849bec5eb4eea89be0463f611"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["c83f985d9828d30801541f1eed26aa3169646baf","a697d0472461db648ff3f697d6b99115204c6054"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bbb0b5c5101d175049b4ced1462f4c266d32fc63"]},"commit2Childs":{"c7f3712a3e82b6f849bec5eb4eea89be0463f611":["c83f985d9828d30801541f1eed26aa3169646baf"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a697d0472461db648ff3f697d6b99115204c6054":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c7f3712a3e82b6f849bec5eb4eea89be0463f611","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"bbb0b5c5101d175049b4ced1462f4c266d32fc63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c83f985d9828d30801541f1eed26aa3169646baf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a697d0472461db648ff3f697d6b99115204c6054","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0d22ac6a4146774c1bc8400160fc0b6150294e92","a258fbb26824fd104ed795e5d9033d2d040049ee","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}