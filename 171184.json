{"path":"modules/spatial-lucene/src/test/java/org/apache/lucene/spatial/base/prefix/TestGridMatchInfo#testMatchInfo().mjava","commits":[{"id":"b17c5c53627893d93f9261826cc6d9c447c5ee3a","date":1329777932,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial-lucene/src/test/java/org/apache/lucene/spatial/base/prefix/TestGridMatchInfo#testMatchInfo().mjava","pathOld":"/dev/null","sourceNew":"  @Test @Ignore\n  public void testMatchInfo() {\n    // Check Validation\n    SpatialContext ctx = new SimpleSpatialContext(DistanceUnits.CARTESIAN,null,new RectangleImpl(0,10,0,10));\n    QuadPrefixTree grid = new QuadPrefixTree(ctx, 2);\n\n\n//    GeometricShapeFactory gsf = new GeometricShapeFactory();\n//    gsf.setCentre( new com.vividsolutions.jts.geom.Coordinate( 5,5 ) );\n//    gsf.setSize( 9.5 );\n//    Shape shape = new JtsGeometry( gsf.createCircle() );\n\n    Shape shape = new RectangleImpl(0, 6, 5, 10);\n\n    shape = new PointImpl(3, 3);\n\n    //TODO UPDATE BASED ON NEW API\n    List<String> m = SpatialPrefixTree.nodesToTokenStrings(grid.getNodes(shape,3,false));\n    System.out.println(m);\n\n    for (CharSequence s : m) {\n      System.out.println(s);\n    }\n\n\n//    // query should intersect everything one level down\n//    ArrayList<String> descr = new ArrayList<String>();\n//    descr.add( \"AAA*\" );\n//    descr.add( \"AABC*\" );\n//    System.out.println( descr );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/prefix/TestGridMatchInfo#testMatchInfo().mjava","pathOld":"modules/spatial-lucene/src/test/java/org/apache/lucene/spatial/base/prefix/TestGridMatchInfo#testMatchInfo().mjava","sourceNew":"  @Test @Ignore\n  public void testMatchInfo() {\n    // Check Validation\n    SpatialContext ctx = new SimpleSpatialContext(DistanceUnits.CARTESIAN,null,new RectangleImpl(0,10,0,10));\n    QuadPrefixTree grid = new QuadPrefixTree(ctx, 2);\n\n\n//    GeometricShapeFactory gsf = new GeometricShapeFactory();\n//    gsf.setCentre( new com.vividsolutions.jts.geom.Coordinate( 5,5 ) );\n//    gsf.setSize( 9.5 );\n//    Shape shape = new JtsGeometry( gsf.createCircle() );\n\n    Shape shape = new RectangleImpl(0, 6, 5, 10);\n\n    shape = new PointImpl(3, 3);\n\n    //TODO UPDATE BASED ON NEW API\n    List<String> m = SpatialPrefixTree.nodesToTokenStrings(grid.getNodes(shape,3,false));\n    System.out.println(m);\n\n    for (CharSequence s : m) {\n      System.out.println(s);\n    }\n\n\n//    // query should intersect everything one level down\n//    ArrayList<String> descr = new ArrayList<String>();\n//    descr.add( \"AAA*\" );\n//    descr.add( \"AABC*\" );\n//    System.out.println( descr );\n  }\n\n","sourceOld":"  @Test @Ignore\n  public void testMatchInfo() {\n    // Check Validation\n    SpatialContext ctx = new SimpleSpatialContext(DistanceUnits.CARTESIAN,null,new RectangleImpl(0,10,0,10));\n    QuadPrefixTree grid = new QuadPrefixTree(ctx, 2);\n\n\n//    GeometricShapeFactory gsf = new GeometricShapeFactory();\n//    gsf.setCentre( new com.vividsolutions.jts.geom.Coordinate( 5,5 ) );\n//    gsf.setSize( 9.5 );\n//    Shape shape = new JtsGeometry( gsf.createCircle() );\n\n    Shape shape = new RectangleImpl(0, 6, 5, 10);\n\n    shape = new PointImpl(3, 3);\n\n    //TODO UPDATE BASED ON NEW API\n    List<String> m = SpatialPrefixTree.nodesToTokenStrings(grid.getNodes(shape,3,false));\n    System.out.println(m);\n\n    for (CharSequence s : m) {\n      System.out.println(s);\n    }\n\n\n//    // query should intersect everything one level down\n//    ArrayList<String> descr = new ArrayList<String>();\n//    descr.add( \"AAA*\" );\n//    descr.add( \"AABC*\" );\n//    System.out.println( descr );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["b17c5c53627893d93f9261826cc6d9c447c5ee3a"],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b17c5c53627893d93f9261826cc6d9c447c5ee3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":[],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}