{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,boolean,boolean).mjava","commits":[{"id":"a18a03f140cbd3f78694787c9f98cf452aab7b7f","date":1423241474,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public BooleanWeight(BooleanQuery query, IndexSearcher searcher, boolean needsScores, boolean disableCoord) throws IOException {\n    super(query);\n    this.query = query;\n    this.needsScores = needsScores;\n    this.similarity = searcher.getSimilarity();\n    this.disableCoord = disableCoord;\n    weights = new ArrayList<>(query.clauses().size());\n    for (int i = 0 ; i < query.clauses().size(); i++) {\n      BooleanClause c = query.clauses().get(i);\n      final boolean queryNeedsScores = needsScores && c.getOccur() != Occur.MUST_NOT;\n      Weight w = c.getQuery().createWeight(searcher, queryNeedsScores);\n      weights.add(w);\n      if (!c.isProhibited()) {\n        maxCoord++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,boolean,boolean).mjava","sourceNew":"  public BooleanWeight(BooleanQuery query, IndexSearcher searcher, int postingsFlags, boolean disableCoord) throws IOException {\n    super(query);\n    this.query = query;\n    this.needsScores = (postingsFlags & PostingsEnum.FLAG_FREQS) != 0;\n    this.similarity = searcher.getSimilarity();\n    this.disableCoord = disableCoord;\n    weights = new ArrayList<>(query.clauses().size());\n    for (int i = 0 ; i < query.clauses().size(); i++) {\n      BooleanClause c = query.clauses().get(i);\n      final int subQueryFlags = c.getOccur() == Occur.MUST_NOT ? PostingsEnum.FLAG_NONE : postingsFlags;\n      Weight w = c.getQuery().createWeight(searcher, subQueryFlags);\n      weights.add(w);\n      if (!c.isProhibited()) {\n        maxCoord++;\n      }\n    }\n  }\n\n","sourceOld":"  public BooleanWeight(BooleanQuery query, IndexSearcher searcher, boolean needsScores, boolean disableCoord) throws IOException {\n    super(query);\n    this.query = query;\n    this.needsScores = needsScores;\n    this.similarity = searcher.getSimilarity();\n    this.disableCoord = disableCoord;\n    weights = new ArrayList<>(query.clauses().size());\n    for (int i = 0 ; i < query.clauses().size(); i++) {\n      BooleanClause c = query.clauses().get(i);\n      final boolean queryNeedsScores = needsScores && c.getOccur() != Occur.MUST_NOT;\n      Weight w = c.getQuery().createWeight(searcher, queryNeedsScores);\n      weights.add(w);\n      if (!c.isProhibited()) {\n        maxCoord++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,int,boolean).mjava","sourceNew":"  public BooleanWeight(BooleanQuery query, IndexSearcher searcher, boolean needsScores, boolean disableCoord) throws IOException {\n    super(query);\n    this.query = query;\n    this.needsScores = needsScores;\n    this.similarity = searcher.getSimilarity();\n    this.disableCoord = disableCoord;\n    weights = new ArrayList<>(query.clauses().size());\n    for (int i = 0 ; i < query.clauses().size(); i++) {\n      BooleanClause c = query.clauses().get(i);\n      final boolean queryNeedsScores = needsScores && c.getOccur() != Occur.MUST_NOT;\n      Weight w = c.getQuery().createWeight(searcher, queryNeedsScores);\n      weights.add(w);\n      if (!c.isProhibited()) {\n        maxCoord++;\n      }\n    }\n  }\n\n","sourceOld":"  public BooleanWeight(BooleanQuery query, IndexSearcher searcher, int postingsFlags, boolean disableCoord) throws IOException {\n    super(query);\n    this.query = query;\n    this.needsScores = (postingsFlags & PostingsEnum.FLAG_FREQS) != 0;\n    this.similarity = searcher.getSimilarity();\n    this.disableCoord = disableCoord;\n    weights = new ArrayList<>(query.clauses().size());\n    for (int i = 0 ; i < query.clauses().size(); i++) {\n      BooleanClause c = query.clauses().get(i);\n      final int subQueryFlags = c.getOccur() == Occur.MUST_NOT ? PostingsEnum.FLAG_NONE : postingsFlags;\n      Weight w = c.getQuery().createWeight(searcher, subQueryFlags);\n      weights.add(w);\n      if (!c.isProhibited()) {\n        maxCoord++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25f698887111a682424e759ba36083180899a1fd","date":1423588899,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,boolean,boolean).mjava","sourceNew":"  public BooleanWeight(BooleanQuery query, IndexSearcher searcher, boolean needsScores, boolean disableCoord) throws IOException {\n    super(query);\n    this.query = query;\n    this.needsScores = needsScores;\n    this.similarity = searcher.getSimilarity();\n    this.disableCoord = disableCoord;\n    weights = new ArrayList<>(query.clauses().size());\n    for (int i = 0 ; i < query.clauses().size(); i++) {\n      BooleanClause c = query.clauses().get(i);\n      Weight w = c.getQuery().createWeight(searcher, needsScores && c.isScoring());\n      weights.add(w);\n      if (c.isScoring()) {\n        maxCoord++;\n      }\n    }\n  }\n\n","sourceOld":"  public BooleanWeight(BooleanQuery query, IndexSearcher searcher, boolean needsScores, boolean disableCoord) throws IOException {\n    super(query);\n    this.query = query;\n    this.needsScores = needsScores;\n    this.similarity = searcher.getSimilarity();\n    this.disableCoord = disableCoord;\n    weights = new ArrayList<>(query.clauses().size());\n    for (int i = 0 ; i < query.clauses().size(); i++) {\n      BooleanClause c = query.clauses().get(i);\n      final boolean queryNeedsScores = needsScores && c.getOccur() != Occur.MUST_NOT;\n      Weight w = c.getQuery().createWeight(searcher, queryNeedsScores);\n      weights.add(w);\n      if (!c.isProhibited()) {\n        maxCoord++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,boolean,boolean).mjava","sourceNew":"  public BooleanWeight(BooleanQuery query, IndexSearcher searcher, boolean needsScores, boolean disableCoord) throws IOException {\n    super(query);\n    this.query = query;\n    this.needsScores = needsScores;\n    this.similarity = searcher.getSimilarity();\n    this.disableCoord = disableCoord;\n    weights = new ArrayList<>(query.clauses().size());\n    for (int i = 0 ; i < query.clauses().size(); i++) {\n      BooleanClause c = query.clauses().get(i);\n      Weight w = searcher.createWeight(c.getQuery(), needsScores && c.isScoring());\n      weights.add(w);\n      if (c.isScoring()) {\n        maxCoord++;\n      }\n    }\n  }\n\n","sourceOld":"  public BooleanWeight(BooleanQuery query, IndexSearcher searcher, boolean needsScores, boolean disableCoord) throws IOException {\n    super(query);\n    this.query = query;\n    this.needsScores = needsScores;\n    this.similarity = searcher.getSimilarity();\n    this.disableCoord = disableCoord;\n    weights = new ArrayList<>(query.clauses().size());\n    for (int i = 0 ; i < query.clauses().size(); i++) {\n      BooleanClause c = query.clauses().get(i);\n      Weight w = c.getQuery().createWeight(searcher, needsScores && c.isScoring());\n      weights.add(w);\n      if (c.isScoring()) {\n        maxCoord++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"603e11ad1dfc3a603ed848618c542ab244327332","date":1425141834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,boolean,boolean).mjava","sourceNew":"  public BooleanWeight(BooleanQuery query, IndexSearcher searcher, boolean needsScores, boolean disableCoord) throws IOException {\n    super(query);\n    this.query = query;\n    this.needsScores = needsScores;\n    this.similarity = searcher.getSimilarity();\n    weights = new ArrayList<>(query.clauses().size());\n    for (int i = 0 ; i < query.clauses().size(); i++) {\n      BooleanClause c = query.clauses().get(i);\n      Weight w = searcher.createWeight(c.getQuery(), needsScores && c.isScoring());\n      weights.add(w);\n      if (c.isScoring()) {\n        maxCoord++;\n      }\n    }\n    \n    // precompute coords (0..N, N).\n    // set disableCoord when its explicit, scores are not needed, no scoring clauses, or the sim doesn't use it.\n    coords = new float[maxCoord+1];\n    Arrays.fill(coords, 1F);\n    coords[0] = 0f;\n    if (maxCoord > 0 && needsScores && disableCoord == false) {\n      // compute coords from the similarity, look for any actual ones.\n      boolean seenActualCoord = false;\n      for (int i = 1; i < coords.length; i++) {\n        coords[i] = coord(i, maxCoord);\n        seenActualCoord |= (coords[i] != 1F);\n      }\n      this.disableCoord = seenActualCoord == false;\n    } else {\n      this.disableCoord = true;\n    }\n  }\n\n","sourceOld":"  public BooleanWeight(BooleanQuery query, IndexSearcher searcher, boolean needsScores, boolean disableCoord) throws IOException {\n    super(query);\n    this.query = query;\n    this.needsScores = needsScores;\n    this.similarity = searcher.getSimilarity();\n    this.disableCoord = disableCoord;\n    weights = new ArrayList<>(query.clauses().size());\n    for (int i = 0 ; i < query.clauses().size(); i++) {\n      BooleanClause c = query.clauses().get(i);\n      Weight w = searcher.createWeight(c.getQuery(), needsScores && c.isScoring());\n      weights.add(w);\n      if (c.isScoring()) {\n        maxCoord++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,boolean,boolean).mjava","sourceNew":"  public BooleanWeight(BooleanQuery query, IndexSearcher searcher, boolean needsScores, boolean disableCoord) throws IOException {\n    super(query);\n    this.query = query;\n    this.needsScores = needsScores;\n    this.similarity = searcher.getSimilarity();\n    weights = new ArrayList<>(query.clauses().size());\n    for (int i = 0 ; i < query.clauses().size(); i++) {\n      BooleanClause c = query.clauses().get(i);\n      Weight w = searcher.createWeight(c.getQuery(), needsScores && c.isScoring());\n      weights.add(w);\n      if (c.isScoring()) {\n        maxCoord++;\n      }\n    }\n    \n    // precompute coords (0..N, N).\n    // set disableCoord when its explicit, scores are not needed, no scoring clauses, or the sim doesn't use it.\n    coords = new float[maxCoord+1];\n    Arrays.fill(coords, 1F);\n    coords[0] = 0f;\n    if (maxCoord > 0 && needsScores && disableCoord == false) {\n      // compute coords from the similarity, look for any actual ones.\n      boolean seenActualCoord = false;\n      for (int i = 1; i < coords.length; i++) {\n        coords[i] = coord(i, maxCoord);\n        seenActualCoord |= (coords[i] != 1F);\n      }\n      this.disableCoord = seenActualCoord == false;\n    } else {\n      this.disableCoord = true;\n    }\n  }\n\n","sourceOld":"  public BooleanWeight(BooleanQuery query, IndexSearcher searcher, boolean needsScores, boolean disableCoord) throws IOException {\n    super(query);\n    this.query = query;\n    this.needsScores = needsScores;\n    this.similarity = searcher.getSimilarity();\n    this.disableCoord = disableCoord;\n    weights = new ArrayList<>(query.clauses().size());\n    for (int i = 0 ; i < query.clauses().size(); i++) {\n      BooleanClause c = query.clauses().get(i);\n      Weight w = c.getQuery().createWeight(searcher, needsScores && c.isScoring());\n      weights.add(w);\n      if (c.isScoring()) {\n        maxCoord++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"485545da3b4429d6f138b4baac573a97820ee93b","date":1433876557,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,boolean,boolean).mjava","sourceNew":"  public BooleanWeight(BooleanQuery query, IndexSearcher searcher, boolean needsScores, boolean disableCoord) throws IOException {\n    super(query);\n    this.query = query;\n    this.needsScores = needsScores;\n    this.similarity = searcher.getSimilarity(needsScores);\n    weights = new ArrayList<>(query.clauses().size());\n    for (int i = 0 ; i < query.clauses().size(); i++) {\n      BooleanClause c = query.clauses().get(i);\n      Weight w = searcher.createWeight(c.getQuery(), needsScores && c.isScoring());\n      weights.add(w);\n      if (c.isScoring()) {\n        maxCoord++;\n      }\n    }\n    \n    // precompute coords (0..N, N).\n    // set disableCoord when its explicit, scores are not needed, no scoring clauses, or the sim doesn't use it.\n    coords = new float[maxCoord+1];\n    Arrays.fill(coords, 1F);\n    coords[0] = 0f;\n    if (maxCoord > 0 && needsScores && disableCoord == false) {\n      // compute coords from the similarity, look for any actual ones.\n      boolean seenActualCoord = false;\n      for (int i = 1; i < coords.length; i++) {\n        coords[i] = coord(i, maxCoord);\n        seenActualCoord |= (coords[i] != 1F);\n      }\n      this.disableCoord = seenActualCoord == false;\n    } else {\n      this.disableCoord = true;\n    }\n  }\n\n","sourceOld":"  public BooleanWeight(BooleanQuery query, IndexSearcher searcher, boolean needsScores, boolean disableCoord) throws IOException {\n    super(query);\n    this.query = query;\n    this.needsScores = needsScores;\n    this.similarity = searcher.getSimilarity();\n    weights = new ArrayList<>(query.clauses().size());\n    for (int i = 0 ; i < query.clauses().size(); i++) {\n      BooleanClause c = query.clauses().get(i);\n      Weight w = searcher.createWeight(c.getQuery(), needsScores && c.isScoring());\n      weights.add(w);\n      if (c.isScoring()) {\n        maxCoord++;\n      }\n    }\n    \n    // precompute coords (0..N, N).\n    // set disableCoord when its explicit, scores are not needed, no scoring clauses, or the sim doesn't use it.\n    coords = new float[maxCoord+1];\n    Arrays.fill(coords, 1F);\n    coords[0] = 0f;\n    if (maxCoord > 0 && needsScores && disableCoord == false) {\n      // compute coords from the similarity, look for any actual ones.\n      boolean seenActualCoord = false;\n      for (int i = 1; i < coords.length; i++) {\n        coords[i] = coord(i, maxCoord);\n        seenActualCoord |= (coords[i] != 1F);\n      }\n      this.disableCoord = seenActualCoord == false;\n    } else {\n      this.disableCoord = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,boolean,boolean).mjava","sourceNew":"  BooleanWeight(BooleanQuery query, IndexSearcher searcher, boolean needsScores, boolean disableCoord) throws IOException {\n    super(query);\n    this.query = query;\n    this.needsScores = needsScores;\n    this.similarity = searcher.getSimilarity(needsScores);\n    weights = new ArrayList<>();\n    int i = 0;\n    int maxCoord = 0;\n    for (BooleanClause c : query) {\n      Weight w = searcher.createWeight(c.getQuery(), needsScores && c.isScoring());\n      weights.add(w);\n      if (c.isScoring()) {\n        maxCoord++;\n      }\n      i += 1;\n    }\n    this.maxCoord = maxCoord;\n    \n    // precompute coords (0..N, N).\n    // set disableCoord when its explicit, scores are not needed, no scoring clauses, or the sim doesn't use it.\n    coords = new float[maxCoord+1];\n    Arrays.fill(coords, 1F);\n    coords[0] = 0f;\n    if (maxCoord > 0 && needsScores && disableCoord == false) {\n      // compute coords from the similarity, look for any actual ones.\n      boolean seenActualCoord = false;\n      for (i = 1; i < coords.length; i++) {\n        coords[i] = coord(i, maxCoord);\n        seenActualCoord |= (coords[i] != 1F);\n      }\n      this.disableCoord = seenActualCoord == false;\n    } else {\n      this.disableCoord = true;\n    }\n  }\n\n","sourceOld":"  public BooleanWeight(BooleanQuery query, IndexSearcher searcher, boolean needsScores, boolean disableCoord) throws IOException {\n    super(query);\n    this.query = query;\n    this.needsScores = needsScores;\n    this.similarity = searcher.getSimilarity(needsScores);\n    weights = new ArrayList<>(query.clauses().size());\n    for (int i = 0 ; i < query.clauses().size(); i++) {\n      BooleanClause c = query.clauses().get(i);\n      Weight w = searcher.createWeight(c.getQuery(), needsScores && c.isScoring());\n      weights.add(w);\n      if (c.isScoring()) {\n        maxCoord++;\n      }\n    }\n    \n    // precompute coords (0..N, N).\n    // set disableCoord when its explicit, scores are not needed, no scoring clauses, or the sim doesn't use it.\n    coords = new float[maxCoord+1];\n    Arrays.fill(coords, 1F);\n    coords[0] = 0f;\n    if (maxCoord > 0 && needsScores && disableCoord == false) {\n      // compute coords from the similarity, look for any actual ones.\n      boolean seenActualCoord = false;\n      for (int i = 1; i < coords.length; i++) {\n        coords[i] = coord(i, maxCoord);\n        seenActualCoord |= (coords[i] != 1F);\n      }\n      this.disableCoord = seenActualCoord == false;\n    } else {\n      this.disableCoord = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,boolean,boolean).mjava","sourceNew":"  BooleanWeight(BooleanQuery query, IndexSearcher searcher, boolean needsScores) throws IOException {\n    super(query);\n    this.query = query;\n    this.needsScores = needsScores;\n    this.similarity = searcher.getSimilarity(needsScores);\n    weights = new ArrayList<>();\n    for (BooleanClause c : query) {\n      Weight w = searcher.createWeight(c.getQuery(), needsScores && c.isScoring());\n      weights.add(w);\n    }\n  }\n\n","sourceOld":"  BooleanWeight(BooleanQuery query, IndexSearcher searcher, boolean needsScores, boolean disableCoord) throws IOException {\n    super(query);\n    this.query = query;\n    this.needsScores = needsScores;\n    this.similarity = searcher.getSimilarity(needsScores);\n    weights = new ArrayList<>();\n    int i = 0;\n    int maxCoord = 0;\n    for (BooleanClause c : query) {\n      Weight w = searcher.createWeight(c.getQuery(), needsScores && c.isScoring());\n      weights.add(w);\n      if (c.isScoring()) {\n        maxCoord++;\n      }\n      i += 1;\n    }\n    this.maxCoord = maxCoord;\n    \n    // precompute coords (0..N, N).\n    // set disableCoord when its explicit, scores are not needed, no scoring clauses, or the sim doesn't use it.\n    coords = new float[maxCoord+1];\n    Arrays.fill(coords, 1F);\n    coords[0] = 0f;\n    if (maxCoord > 0 && needsScores && disableCoord == false) {\n      // compute coords from the similarity, look for any actual ones.\n      boolean seenActualCoord = false;\n      for (i = 1; i < coords.length; i++) {\n        coords[i] = coord(i, maxCoord);\n        seenActualCoord |= (coords[i] != 1F);\n      }\n      this.disableCoord = seenActualCoord == false;\n    } else {\n      this.disableCoord = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#BooleanWeight(BooleanQuery,IndexSearcher,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  BooleanWeight(BooleanQuery query, IndexSearcher searcher, boolean needsScores, boolean disableCoord) throws IOException {\n    super(query);\n    this.query = query;\n    this.needsScores = needsScores;\n    this.similarity = searcher.getSimilarity(needsScores);\n    weights = new ArrayList<>();\n    int i = 0;\n    int maxCoord = 0;\n    for (BooleanClause c : query) {\n      Weight w = searcher.createWeight(c.getQuery(), needsScores && c.isScoring());\n      weights.add(w);\n      if (c.isScoring()) {\n        maxCoord++;\n      }\n      i += 1;\n    }\n    this.maxCoord = maxCoord;\n    \n    // precompute coords (0..N, N).\n    // set disableCoord when its explicit, scores are not needed, no scoring clauses, or the sim doesn't use it.\n    coords = new float[maxCoord+1];\n    Arrays.fill(coords, 1F);\n    coords[0] = 0f;\n    if (maxCoord > 0 && needsScores && disableCoord == false) {\n      // compute coords from the similarity, look for any actual ones.\n      boolean seenActualCoord = false;\n      for (i = 1; i < coords.length; i++) {\n        coords[i] = coord(i, maxCoord);\n        seenActualCoord |= (coords[i] != 1F);\n      }\n      this.disableCoord = seenActualCoord == false;\n    } else {\n      this.disableCoord = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["25f698887111a682424e759ba36083180899a1fd"],"485545da3b4429d6f138b4baac573a97820ee93b":["603e11ad1dfc3a603ed848618c542ab244327332"],"954e59be3da8dc1b046646ad7af4b466852009d3":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","c8a0e442f7b61f811680273b25da95994a724466"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["485545da3b4429d6f138b4baac573a97820ee93b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["25f698887111a682424e759ba36083180899a1fd","603e11ad1dfc3a603ed848618c542ab244327332"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"603e11ad1dfc3a603ed848618c542ab244327332":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"25f698887111a682424e759ba36083180899a1fd":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["25f698887111a682424e759ba36083180899a1fd"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["603e11ad1dfc3a603ed848618c542ab244327332"],"485545da3b4429d6f138b4baac573a97820ee93b":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["954e59be3da8dc1b046646ad7af4b466852009d3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c8a0e442f7b61f811680273b25da95994a724466"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"603e11ad1dfc3a603ed848618c542ab244327332":["485545da3b4429d6f138b4baac573a97820ee93b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"25f698887111a682424e759ba36083180899a1fd":["60596f28be69b10c37a56a303c2dbea07b2ca4ba","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}