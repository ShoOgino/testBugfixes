{"path":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#solrStopWordsNotDefinedOnAFieldForClustering().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#solrStopWordsNotDefinedOnAFieldForClustering().mjava","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#solrStopWordsNotDefinedOnAFieldForClustering().mjava","sourceNew":"\t@Test\n\tpublic void solrStopWordsNotDefinedOnAFieldForClustering() throws Exception {\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\t// Force string fields to be used for clustering. Does not make sense\n\t\t// in a real word, but does the job in the test.\n\t\tparams.set(CarrotParams.TITLE_FIELD_NAME, \"url\");\n\t\tparams.set(CarrotParams.SNIPPET_FIELD_NAME, \"url\");\n\t\tparams.set(\"merge-resources\", false);\n\t\tparams.set(AttributeUtils.getKey(\n\t\t\t\tLexicalResourcesCheckClusteringAlgorithm.class, \"wordsToCheck\"),\n\t\t\"online,solrownstopword\");\n\n\t\tfinal List<NamedList<Object>> clusters = checkEngine(\n\t\t\t\tgetClusteringEngine(\"lexical-resource-check\"), 2, params);\n\t\tassertEquals(ImmutableList.of(\"online\"), getLabels(clusters.get(0)));\n\t\tassertEquals(ImmutableList.of(\"solrownstopword\"),\n\t\t\t\tgetLabels(clusters.get(1)));\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void solrStopWordsNotDefinedOnAFieldForClustering() throws Exception {\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\t// Force string fields to be used for clustering. Does not make sense\n\t\t// in a real word, but does the job in the test.\n\t\tparams.set(CarrotParams.TITLE_FIELD_NAME, \"url\");\n\t\tparams.set(CarrotParams.SNIPPET_FIELD_NAME, \"url\");\n\t\tparams.set(\"merge-resources\", false);\n\t\tparams.set(AttributeUtils.getKey(\n\t\t\t\tLexicalResourcesCheckClusteringAlgorithm.class, \"wordsToCheck\"),\n\t\t\"online,solrownstopword\");\n\n\t\tfinal List<NamedList<Object>> clusters = checkEngine(\n\t\t\t\tgetClusteringEngine(\"lexical-resource-check\"), 2, params);\n\t\tassertEquals(ImmutableList.of(\"online\"), getLabels(clusters.get(0)));\n\t\tassertEquals(ImmutableList.of(\"solrownstopword\"),\n\t\t\t\tgetLabels(clusters.get(1)));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#solrStopWordsNotDefinedOnAFieldForClustering().mjava","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#solrStopWordsNotDefinedOnAFieldForClustering().mjava","sourceNew":"\t@Test\n\tpublic void solrStopWordsNotDefinedOnAFieldForClustering() throws Exception {\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\t// Force string fields to be used for clustering. Does not make sense\n\t\t// in a real word, but does the job in the test.\n\t\tparams.set(CarrotParams.TITLE_FIELD_NAME, \"url\");\n\t\tparams.set(CarrotParams.SNIPPET_FIELD_NAME, \"url\");\n\t\tparams.set(\"merge-resources\", false);\n\t\tparams.set(AttributeUtils.getKey(\n\t\t\t\tLexicalResourcesCheckClusteringAlgorithm.class, \"wordsToCheck\"),\n\t\t\"online,solrownstopword\");\n\n\t\tfinal List<NamedList<Object>> clusters = checkEngine(\n\t\t\t\tgetClusteringEngine(\"lexical-resource-check\"), 2, params);\n\t\tassertEquals(ImmutableList.of(\"online\"), getLabels(clusters.get(0)));\n\t\tassertEquals(ImmutableList.of(\"solrownstopword\"),\n\t\t\t\tgetLabels(clusters.get(1)));\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void solrStopWordsNotDefinedOnAFieldForClustering() throws Exception {\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\t// Force string fields to be used for clustering. Does not make sense\n\t\t// in a real word, but does the job in the test.\n\t\tparams.set(CarrotParams.TITLE_FIELD_NAME, \"url\");\n\t\tparams.set(CarrotParams.SNIPPET_FIELD_NAME, \"url\");\n\t\tparams.set(\"merge-resources\", false);\n\t\tparams.set(AttributeUtils.getKey(\n\t\t\t\tLexicalResourcesCheckClusteringAlgorithm.class, \"wordsToCheck\"),\n\t\t\"online,solrownstopword\");\n\n\t\tfinal List<NamedList<Object>> clusters = checkEngine(\n\t\t\t\tgetClusteringEngine(\"lexical-resource-check\"), 2, params);\n\t\tassertEquals(ImmutableList.of(\"online\"), getLabels(clusters.get(0)));\n\t\tassertEquals(ImmutableList.of(\"solrownstopword\"),\n\t\t\t\tgetLabels(clusters.get(1)));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef9e7ba08c124ce913ef60415c21ae1ca833d211","date":1323446079,"type":3,"author":"Stanisław Osiński","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#solrStopWordsNotDefinedOnAFieldForClustering().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#solrStopWordsNotDefinedOnAFieldForClustering().mjava","sourceNew":"  @Test\n  public void solrStopWordsNotDefinedOnAFieldForClustering() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    // Force string fields to be used for clustering. Does not make sense\n    // in a real word, but does the job in the test.\n    params.set(CarrotParams.TITLE_FIELD_NAME, \"url\");\n    params.set(CarrotParams.SNIPPET_FIELD_NAME, \"url\");\n    params.set(\"merge-resources\", false);\n    params.set(AttributeUtils.getKey(\n        LexicalResourcesCheckClusteringAlgorithm.class, \"wordsToCheck\"),\n    \"online,solrownstopword\");\n\n    final List<NamedList<Object>> clusters = checkEngine(\n        getClusteringEngine(\"lexical-resource-check\"), 2, params);\n    assertEquals(ImmutableList.of(\"online\"), getLabels(clusters.get(0)));\n    assertEquals(ImmutableList.of(\"solrownstopword\"),\n        getLabels(clusters.get(1)));\n  }\n\n","sourceOld":"\t@Test\n\tpublic void solrStopWordsNotDefinedOnAFieldForClustering() throws Exception {\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\t// Force string fields to be used for clustering. Does not make sense\n\t\t// in a real word, but does the job in the test.\n\t\tparams.set(CarrotParams.TITLE_FIELD_NAME, \"url\");\n\t\tparams.set(CarrotParams.SNIPPET_FIELD_NAME, \"url\");\n\t\tparams.set(\"merge-resources\", false);\n\t\tparams.set(AttributeUtils.getKey(\n\t\t\t\tLexicalResourcesCheckClusteringAlgorithm.class, \"wordsToCheck\"),\n\t\t\"online,solrownstopword\");\n\n\t\tfinal List<NamedList<Object>> clusters = checkEngine(\n\t\t\t\tgetClusteringEngine(\"lexical-resource-check\"), 2, params);\n\t\tassertEquals(ImmutableList.of(\"online\"), getLabels(clusters.get(0)));\n\t\tassertEquals(ImmutableList.of(\"solrownstopword\"),\n\t\t\t\tgetLabels(clusters.get(1)));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","date":1323540308,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#solrStopWordsNotDefinedOnAFieldForClustering().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#solrStopWordsNotDefinedOnAFieldForClustering().mjava","sourceNew":"  @Test\n  public void solrStopWordsNotDefinedOnAFieldForClustering() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    // Force string fields to be used for clustering. Does not make sense\n    // in a real word, but does the job in the test.\n    params.set(CarrotParams.TITLE_FIELD_NAME, \"url\");\n    params.set(CarrotParams.SNIPPET_FIELD_NAME, \"url\");\n    params.set(\"merge-resources\", false);\n    params.set(AttributeUtils.getKey(\n        LexicalResourcesCheckClusteringAlgorithm.class, \"wordsToCheck\"),\n    \"online,solrownstopword\");\n\n    final List<NamedList<Object>> clusters = checkEngine(\n        getClusteringEngine(\"lexical-resource-check\"), 2, params);\n    assertEquals(ImmutableList.of(\"online\"), getLabels(clusters.get(0)));\n    assertEquals(ImmutableList.of(\"solrownstopword\"),\n        getLabels(clusters.get(1)));\n  }\n\n","sourceOld":"\t@Test\n\tpublic void solrStopWordsNotDefinedOnAFieldForClustering() throws Exception {\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\t// Force string fields to be used for clustering. Does not make sense\n\t\t// in a real word, but does the job in the test.\n\t\tparams.set(CarrotParams.TITLE_FIELD_NAME, \"url\");\n\t\tparams.set(CarrotParams.SNIPPET_FIELD_NAME, \"url\");\n\t\tparams.set(\"merge-resources\", false);\n\t\tparams.set(AttributeUtils.getKey(\n\t\t\t\tLexicalResourcesCheckClusteringAlgorithm.class, \"wordsToCheck\"),\n\t\t\"online,solrownstopword\");\n\n\t\tfinal List<NamedList<Object>> clusters = checkEngine(\n\t\t\t\tgetClusteringEngine(\"lexical-resource-check\"), 2, params);\n\t\tassertEquals(ImmutableList.of(\"online\"), getLabels(clusters.get(0)));\n\t\tassertEquals(ImmutableList.of(\"solrownstopword\"),\n\t\t\t\tgetLabels(clusters.get(1)));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9fddef147e9702c85a51239935df11e5338bfbf","date":1337590651,"type":5,"author":"Stanisław Osiński","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#testSolrStopWordsNotDefinedOnAFieldForClustering().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#solrStopWordsNotDefinedOnAFieldForClustering().mjava","sourceNew":"  @Test\n  public void testSolrStopWordsNotDefinedOnAFieldForClustering() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    // Force string fields to be used for clustering. Does not make sense\n    // in a real word, but does the job in the test.\n    params.set(CarrotParams.TITLE_FIELD_NAME, \"url\");\n    params.set(CarrotParams.SNIPPET_FIELD_NAME, \"url\");\n    params.set(\"merge-resources\", false);\n    params.set(AttributeUtils.getKey(\n        LexicalResourcesCheckClusteringAlgorithm.class, \"wordsToCheck\"),\n    \"online,solrownstopword\");\n\n    final List<NamedList<Object>> clusters = checkEngine(\n        getClusteringEngine(\"lexical-resource-check\"), 2, params);\n    assertEquals(ImmutableList.of(\"online\"), getLabels(clusters.get(0)));\n    assertEquals(ImmutableList.of(\"solrownstopword\"),\n        getLabels(clusters.get(1)));\n  }\n\n","sourceOld":"  @Test\n  public void solrStopWordsNotDefinedOnAFieldForClustering() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    // Force string fields to be used for clustering. Does not make sense\n    // in a real word, but does the job in the test.\n    params.set(CarrotParams.TITLE_FIELD_NAME, \"url\");\n    params.set(CarrotParams.SNIPPET_FIELD_NAME, \"url\");\n    params.set(\"merge-resources\", false);\n    params.set(AttributeUtils.getKey(\n        LexicalResourcesCheckClusteringAlgorithm.class, \"wordsToCheck\"),\n    \"online,solrownstopword\");\n\n    final List<NamedList<Object>> clusters = checkEngine(\n        getClusteringEngine(\"lexical-resource-check\"), 2, params);\n    assertEquals(ImmutableList.of(\"online\"), getLabels(clusters.get(0)));\n    assertEquals(ImmutableList.of(\"solrownstopword\"),\n        getLabels(clusters.get(1)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#testSolrStopWordsNotDefinedOnAFieldForClustering().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#solrStopWordsNotDefinedOnAFieldForClustering().mjava","sourceNew":"  @Test\n  public void testSolrStopWordsNotDefinedOnAFieldForClustering() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    // Force string fields to be used for clustering. Does not make sense\n    // in a real word, but does the job in the test.\n    params.set(CarrotParams.TITLE_FIELD_NAME, \"url\");\n    params.set(CarrotParams.SNIPPET_FIELD_NAME, \"url\");\n    params.set(\"merge-resources\", false);\n    params.set(AttributeUtils.getKey(\n        LexicalResourcesCheckClusteringAlgorithm.class, \"wordsToCheck\"),\n    \"online,solrownstopword\");\n\n    final List<NamedList<Object>> clusters = checkEngine(\n        getClusteringEngine(\"lexical-resource-check\"), 2, params);\n    assertEquals(ImmutableList.of(\"online\"), getLabels(clusters.get(0)));\n    assertEquals(ImmutableList.of(\"solrownstopword\"),\n        getLabels(clusters.get(1)));\n  }\n\n","sourceOld":"  @Test\n  public void solrStopWordsNotDefinedOnAFieldForClustering() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    // Force string fields to be used for clustering. Does not make sense\n    // in a real word, but does the job in the test.\n    params.set(CarrotParams.TITLE_FIELD_NAME, \"url\");\n    params.set(CarrotParams.SNIPPET_FIELD_NAME, \"url\");\n    params.set(\"merge-resources\", false);\n    params.set(AttributeUtils.getKey(\n        LexicalResourcesCheckClusteringAlgorithm.class, \"wordsToCheck\"),\n    \"online,solrownstopword\");\n\n    final List<NamedList<Object>> clusters = checkEngine(\n        getClusteringEngine(\"lexical-resource-check\"), 2, params);\n    assertEquals(ImmutableList.of(\"online\"), getLabels(clusters.get(0)));\n    assertEquals(ImmutableList.of(\"solrownstopword\"),\n        getLabels(clusters.get(1)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9fddef147e9702c85a51239935df11e5338bfbf":["ef9e7ba08c124ce913ef60415c21ae1ca833d211"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["c26f00b574427b55127e869b935845554afde1fa","ef9e7ba08c124ce913ef60415c21ae1ca833d211"],"ef9e7ba08c124ce913ef60415c21ae1ca833d211":["c26f00b574427b55127e869b935845554afde1fa"],"ef0d8a69209261514c5739c770bba706c2308450":["ef9e7ba08c124ce913ef60415c21ae1ca833d211","f9fddef147e9702c85a51239935df11e5338bfbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f9fddef147e9702c85a51239935df11e5338bfbf"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"f9fddef147e9702c85a51239935df11e5338bfbf":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","ef9e7ba08c124ce913ef60415c21ae1ca833d211"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":[],"ef9e7ba08c124ce913ef60415c21ae1ca833d211":["f9fddef147e9702c85a51239935df11e5338bfbf","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","ef0d8a69209261514c5739c770bba706c2308450"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}