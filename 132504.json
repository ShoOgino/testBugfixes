{"path":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getWildcardQuery(String,String).mjava","commits":[{"id":"9e87c4193bc100c3b96235f14bee01a5b2009ce5","date":1287756261,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#getWildcardQuery(String,String).mjava","sourceNew":"  /**\r\n   * Factory method for generating a query. Called when parser\r\n   * parses an input term token that contains one or more wildcard\r\n   * characters (? and *), but is not a prefix term token (one\r\n   * that has just a single * character at the end)\r\n   *<p>\r\n   * Depending on settings, prefix term may be lower-cased\r\n   * automatically. It will not go through the default Analyzer,\r\n   * however, since normal Analyzers are unlikely to work properly\r\n   * with wildcard templates.\r\n   *<p>\r\n   * Can be overridden by extending classes, to provide custom handling for\r\n   * wildcard queries, which may be necessary due to missing analyzer calls.\r\n   *\r\n   * @param field Name of the field query will use.\r\n   * @param termStr Term token that contains one or more wild card\r\n   *   characters (? or *), but is not simple prefix term\r\n   *\r\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\r\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\r\n   */\r\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException\r\n  {\r\n    if (\"*\".equals(field)) {\r\n      if (\"*\".equals(termStr)) return newMatchAllDocsQuery();\r\n    }\r\n    if (!allowLeadingWildcard && (termStr.startsWith(\"*\") || termStr.startsWith(\"?\")))\r\n      throw new ParseException(\"'*' or '?' not allowed as first character in WildcardQuery\");\r\n    if (lowercaseExpandedTerms) {\r\n      termStr = termStr.toLowerCase();\r\n    }\r\n    Term t = new Term(field, termStr);\r\n    return newWildcardQuery(t);\r\n  }\r\n\n","sourceOld":"  /**\n   * Factory method for generating a query. Called when parser\n   * parses an input term token that contains one or more wildcard\n   * characters (? and *), but is not a prefix term token (one\n   * that has just a single * character at the end)\n   *<p>\n   * Depending on settings, prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wildcard queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token that contains one or more wild card\n   *   characters (? or *), but is not simple prefix term\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException\n  {\n    if (\"*\".equals(field)) {\n      if (\"*\".equals(termStr)) return newMatchAllDocsQuery();\n    }\n    if (!allowLeadingWildcard && (termStr.startsWith(\"*\") || termStr.startsWith(\"?\")))\n      throw new ParseException(\"'*' or '?' not allowed as first character in WildcardQuery\");\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return newWildcardQuery(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#getWildcardQuery(String,String).mjava","sourceNew":"  /**\r\n   * Factory method for generating a query. Called when parser\r\n   * parses an input term token that contains one or more wildcard\r\n   * characters (? and *), but is not a prefix term token (one\r\n   * that has just a single * character at the end)\r\n   *<p>\r\n   * Depending on settings, prefix term may be lower-cased\r\n   * automatically. It will not go through the default Analyzer,\r\n   * however, since normal Analyzers are unlikely to work properly\r\n   * with wildcard templates.\r\n   *<p>\r\n   * Can be overridden by extending classes, to provide custom handling for\r\n   * wildcard queries, which may be necessary due to missing analyzer calls.\r\n   *\r\n   * @param field Name of the field query will use.\r\n   * @param termStr Term token that contains one or more wild card\r\n   *   characters (? or *), but is not simple prefix term\r\n   *\r\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\r\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\r\n   */\r\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException\r\n  {\r\n    if (\"*\".equals(field)) {\r\n      if (\"*\".equals(termStr)) return newMatchAllDocsQuery();\r\n    }\r\n    if (!allowLeadingWildcard && (termStr.startsWith(\"*\") || termStr.startsWith(\"?\")))\r\n      throw new ParseException(\"'*' or '?' not allowed as first character in WildcardQuery\");\r\n    if (lowercaseExpandedTerms) {\r\n      termStr = termStr.toLowerCase();\r\n    }\r\n    Term t = new Term(field, termStr);\r\n    return newWildcardQuery(t);\r\n  }\r\n\n","sourceOld":"  /**\n   * Factory method for generating a query. Called when parser\n   * parses an input term token that contains one or more wildcard\n   * characters (? and *), but is not a prefix term token (one\n   * that has just a single * character at the end)\n   *<p>\n   * Depending on settings, prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wildcard queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token that contains one or more wild card\n   *   characters (? or *), but is not simple prefix term\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException\n  {\n    if (\"*\".equals(field)) {\n      if (\"*\".equals(termStr)) return newMatchAllDocsQuery();\n    }\n    if (!allowLeadingWildcard && (termStr.startsWith(\"*\") || termStr.startsWith(\"?\")))\n      throw new ParseException(\"'*' or '?' not allowed as first character in WildcardQuery\");\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return newWildcardQuery(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Factory method for generating a query. Called when parser\r\n   * parses an input term token that contains one or more wildcard\r\n   * characters (? and *), but is not a prefix term token (one\r\n   * that has just a single * character at the end)\r\n   *<p>\r\n   * Depending on settings, prefix term may be lower-cased\r\n   * automatically. It will not go through the default Analyzer,\r\n   * however, since normal Analyzers are unlikely to work properly\r\n   * with wildcard templates.\r\n   *<p>\r\n   * Can be overridden by extending classes, to provide custom handling for\r\n   * wildcard queries, which may be necessary due to missing analyzer calls.\r\n   *\r\n   * @param field Name of the field query will use.\r\n   * @param termStr Term token that contains one or more wild card\r\n   *   characters (? or *), but is not simple prefix term\r\n   *\r\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\r\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\r\n   */\r\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException\r\n  {\r\n    if (\"*\".equals(field)) {\r\n      if (\"*\".equals(termStr)) return newMatchAllDocsQuery();\r\n    }\r\n    if (!allowLeadingWildcard && (termStr.startsWith(\"*\") || termStr.startsWith(\"?\")))\r\n      throw new ParseException(\"'*' or '?' not allowed as first character in WildcardQuery\");\r\n    if (lowercaseExpandedTerms) {\r\n      termStr = termStr.toLowerCase();\r\n    }\r\n    Term t = new Term(field, termStr);\r\n    return newWildcardQuery(t);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bed62fe6383040eaff2ec720cdc55bb1462c61da","date":1296408595,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getWildcardQuery(String,String).mjava","sourceNew":"  /**\n   * Factory method for generating a query. Called when parser\n   * parses an input term token that contains one or more wildcard\n   * characters (? and *), but is not a prefix term token (one\n   * that has just a single * character at the end)\n   *<p>\n   * Depending on settings, prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wildcard queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token that contains one or more wild card\n   *   characters (? or *), but is not simple prefix term\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\n   */\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException\n  {\n    if (\"*\".equals(field)) {\n      if (\"*\".equals(termStr)) return newMatchAllDocsQuery();\n    }\n    if (!allowLeadingWildcard && (termStr.startsWith(\"*\") || termStr.startsWith(\"?\")))\n      throw new ParseException(\"'*' or '?' not allowed as first character in WildcardQuery\");\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return newWildcardQuery(t);\n  }\n\n","sourceOld":"  /**\r\n   * Factory method for generating a query. Called when parser\r\n   * parses an input term token that contains one or more wildcard\r\n   * characters (? and *), but is not a prefix term token (one\r\n   * that has just a single * character at the end)\r\n   *<p>\r\n   * Depending on settings, prefix term may be lower-cased\r\n   * automatically. It will not go through the default Analyzer,\r\n   * however, since normal Analyzers are unlikely to work properly\r\n   * with wildcard templates.\r\n   *<p>\r\n   * Can be overridden by extending classes, to provide custom handling for\r\n   * wildcard queries, which may be necessary due to missing analyzer calls.\r\n   *\r\n   * @param field Name of the field query will use.\r\n   * @param termStr Term token that contains one or more wild card\r\n   *   characters (? or *), but is not simple prefix term\r\n   *\r\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\r\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\r\n   */\r\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException\r\n  {\r\n    if (\"*\".equals(field)) {\r\n      if (\"*\".equals(termStr)) return newMatchAllDocsQuery();\r\n    }\r\n    if (!allowLeadingWildcard && (termStr.startsWith(\"*\") || termStr.startsWith(\"?\")))\r\n      throw new ParseException(\"'*' or '?' not allowed as first character in WildcardQuery\");\r\n    if (lowercaseExpandedTerms) {\r\n      termStr = termStr.toLowerCase();\r\n    }\r\n    Term t = new Term(field, termStr);\r\n    return newWildcardQuery(t);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getWildcardQuery(String,String).mjava","sourceNew":"  /**\n   * Factory method for generating a query. Called when parser\n   * parses an input term token that contains one or more wildcard\n   * characters (? and *), but is not a prefix term token (one\n   * that has just a single * character at the end)\n   *<p>\n   * Depending on settings, prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wildcard queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token that contains one or more wild card\n   *   characters (? or *), but is not simple prefix term\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\n   */\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException\n  {\n    if (\"*\".equals(field)) {\n      if (\"*\".equals(termStr)) return newMatchAllDocsQuery();\n    }\n    if (!allowLeadingWildcard && (termStr.startsWith(\"*\") || termStr.startsWith(\"?\")))\n      throw new ParseException(\"'*' or '?' not allowed as first character in WildcardQuery\");\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return newWildcardQuery(t);\n  }\n\n","sourceOld":"  /**\r\n   * Factory method for generating a query. Called when parser\r\n   * parses an input term token that contains one or more wildcard\r\n   * characters (? and *), but is not a prefix term token (one\r\n   * that has just a single * character at the end)\r\n   *<p>\r\n   * Depending on settings, prefix term may be lower-cased\r\n   * automatically. It will not go through the default Analyzer,\r\n   * however, since normal Analyzers are unlikely to work properly\r\n   * with wildcard templates.\r\n   *<p>\r\n   * Can be overridden by extending classes, to provide custom handling for\r\n   * wildcard queries, which may be necessary due to missing analyzer calls.\r\n   *\r\n   * @param field Name of the field query will use.\r\n   * @param termStr Term token that contains one or more wild card\r\n   *   characters (? or *), but is not simple prefix term\r\n   *\r\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\r\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\r\n   */\r\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException\r\n  {\r\n    if (\"*\".equals(field)) {\r\n      if (\"*\".equals(termStr)) return newMatchAllDocsQuery();\r\n    }\r\n    if (!allowLeadingWildcard && (termStr.startsWith(\"*\") || termStr.startsWith(\"?\")))\r\n      throw new ParseException(\"'*' or '?' not allowed as first character in WildcardQuery\");\r\n    if (lowercaseExpandedTerms) {\r\n      termStr = termStr.toLowerCase();\r\n    }\r\n    Term t = new Term(field, termStr);\r\n    return newWildcardQuery(t);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getWildcardQuery(String,String).mjava","sourceNew":"  /**\n   * Factory method for generating a query. Called when parser\n   * parses an input term token that contains one or more wildcard\n   * characters (? and *), but is not a prefix term token (one\n   * that has just a single * character at the end)\n   *<p>\n   * Depending on settings, prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wildcard queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token that contains one or more wild card\n   *   characters (? or *), but is not simple prefix term\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\n   */\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException\n  {\n    if (\"*\".equals(field)) {\n      if (\"*\".equals(termStr)) return newMatchAllDocsQuery();\n    }\n    if (!allowLeadingWildcard && (termStr.startsWith(\"*\") || termStr.startsWith(\"?\")))\n      throw new ParseException(\"'*' or '?' not allowed as first character in WildcardQuery\");\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return newWildcardQuery(t);\n  }\n\n","sourceOld":"  /**\r\n   * Factory method for generating a query. Called when parser\r\n   * parses an input term token that contains one or more wildcard\r\n   * characters (? and *), but is not a prefix term token (one\r\n   * that has just a single * character at the end)\r\n   *<p>\r\n   * Depending on settings, prefix term may be lower-cased\r\n   * automatically. It will not go through the default Analyzer,\r\n   * however, since normal Analyzers are unlikely to work properly\r\n   * with wildcard templates.\r\n   *<p>\r\n   * Can be overridden by extending classes, to provide custom handling for\r\n   * wildcard queries, which may be necessary due to missing analyzer calls.\r\n   *\r\n   * @param field Name of the field query will use.\r\n   * @param termStr Term token that contains one or more wild card\r\n   *   characters (? or *), but is not simple prefix term\r\n   *\r\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\r\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\r\n   */\r\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException\r\n  {\r\n    if (\"*\".equals(field)) {\r\n      if (\"*\".equals(termStr)) return newMatchAllDocsQuery();\r\n    }\r\n    if (!allowLeadingWildcard && (termStr.startsWith(\"*\") || termStr.startsWith(\"?\")))\r\n      throw new ParseException(\"'*' or '?' not allowed as first character in WildcardQuery\");\r\n    if (lowercaseExpandedTerms) {\r\n      termStr = termStr.toLowerCase();\r\n    }\r\n    Term t = new Term(field, termStr);\r\n    return newWildcardQuery(t);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getWildcardQuery(String,String).mjava","sourceNew":"  /**\n   * Factory method for generating a query. Called when parser\n   * parses an input term token that contains one or more wildcard\n   * characters (? and *), but is not a prefix term token (one\n   * that has just a single * character at the end)\n   *<p>\n   * Depending on settings, prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wildcard queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token that contains one or more wild card\n   *   characters (? or *), but is not simple prefix term\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException\n  {\n    if (\"*\".equals(field)) {\n      if (\"*\".equals(termStr)) return newMatchAllDocsQuery();\n    }\n    if (!allowLeadingWildcard && (termStr.startsWith(\"*\") || termStr.startsWith(\"?\")))\n      throw new ParseException(\"'*' or '?' not allowed as first character in WildcardQuery\");\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return newWildcardQuery(t);\n  }\n\n","sourceOld":"  /**\n   * Factory method for generating a query. Called when parser\n   * parses an input term token that contains one or more wildcard\n   * characters (? and *), but is not a prefix term token (one\n   * that has just a single * character at the end)\n   *<p>\n   * Depending on settings, prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wildcard queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token that contains one or more wild card\n   *   characters (? or *), but is not simple prefix term\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} built for the term\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\n   */\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException\n  {\n    if (\"*\".equals(field)) {\n      if (\"*\".equals(termStr)) return newMatchAllDocsQuery();\n    }\n    if (!allowLeadingWildcard && (termStr.startsWith(\"*\") || termStr.startsWith(\"?\")))\n      throw new ParseException(\"'*' or '?' not allowed as first character in WildcardQuery\");\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return newWildcardQuery(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["b12d3e81e0f95a4527b5703953c503f71120ffcc","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["bed62fe6383040eaff2ec720cdc55bb1462c61da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["9e87c4193bc100c3b96235f14bee01a5b2009ce5"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e87c4193bc100c3b96235f14bee01a5b2009ce5","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["29ef99d61cda9641b6250bf9567329a6e65f901d","91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}