{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","commits":[{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      if (numTerms > 0 && numTerms % SKIP_INTERVAL == 0) {\n        bufferSkip();\n      }\n      // write term meta data into fst\n      final long longs[] = new long[longsSize];\n      final long delta = stats.totalTermFreq - stats.docFreq;\n      if (stats.totalTermFreq > 0) {\n        if (delta == 0) {\n          statsOut.writeVInt(stats.docFreq<<1|1);\n        } else {\n          statsOut.writeVInt(stats.docFreq<<1|0);\n          statsOut.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      } else {\n        statsOut.writeVInt(stats.docFreq);\n      }\n      BlockTermState state = postingsWriter.newTermState();\n      state.docFreq = stats.docFreq;\n      state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(longs, metaBytesOut, fieldInfo, state, true);\n      for (int i = 0; i < longsSize; i++) {\n        metaLongsOut.writeVLong(longs[i] - lastLongs[i]);\n        lastLongs[i] = longs[i];\n      }\n      metaLongsOut.writeVLong(metaBytesOut.getFilePointer() - lastMetaBytesFP);\n\n      builder.add(Util.toIntsRef(text, scratchTerm), numTerms);\n      numTerms++;\n\n      lastMetaBytesFP = metaBytesOut.getFilePointer();\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      if (numTerms > 0 && numTerms % SKIP_INTERVAL == 0) {\n        bufferSkip();\n      }\n      // write term meta data into fst\n      final long longs[] = new long[longsSize];\n      final long delta = stats.totalTermFreq - stats.docFreq;\n      if (stats.totalTermFreq > 0) {\n        if (delta == 0) {\n          statsOut.writeVInt(stats.docFreq<<1|1);\n        } else {\n          statsOut.writeVInt(stats.docFreq<<1|0);\n          statsOut.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      } else {\n        statsOut.writeVInt(stats.docFreq);\n      }\n      BlockTermState state = postingsWriter.newTermState();\n      state.docFreq = stats.docFreq;\n      state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(longs, metaBytesOut, fieldInfo, state, true);\n      for (int i = 0; i < longsSize; i++) {\n        metaLongsOut.writeVLong(longs[i] - lastLongs[i]);\n        lastLongs[i] = longs[i];\n      }\n      metaLongsOut.writeVLong(metaBytesOut.getFilePointer() - lastMetaBytesFP);\n\n      builder.add(Util.toIntsRef(text, scratchTerm), numTerms);\n      numTerms++;\n\n      lastMetaBytesFP = metaBytesOut.getFilePointer();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      if (numTerms > 0 && numTerms % SKIP_INTERVAL == 0) {\n        bufferSkip();\n      }\n      // write term meta data into fst\n      final long longs[] = new long[longsSize];\n      final long delta = stats.totalTermFreq - stats.docFreq;\n      if (stats.totalTermFreq > 0) {\n        if (delta == 0) {\n          statsOut.writeVInt(stats.docFreq<<1|1);\n        } else {\n          statsOut.writeVInt(stats.docFreq<<1|0);\n          statsOut.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      } else {\n        statsOut.writeVInt(stats.docFreq);\n      }\n      BlockTermState state = postingsWriter.newTermState();\n      state.docFreq = stats.docFreq;\n      state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(longs, metaBytesOut, fieldInfo, state, true);\n      for (int i = 0; i < longsSize; i++) {\n        metaLongsOut.writeVLong(longs[i] - lastLongs[i]);\n        lastLongs[i] = longs[i];\n      }\n      metaLongsOut.writeVLong(metaBytesOut.getFilePointer() - lastMetaBytesFP);\n\n      builder.add(Util.toIntsRef(text, scratchTerm), numTerms);\n      numTerms++;\n\n      lastMetaBytesFP = metaBytesOut.getFilePointer();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    public void finishTerm(BytesRef text, BlockTermState state) throws IOException {\n      if (numTerms > 0 && numTerms % SKIP_INTERVAL == 0) {\n        bufferSkip();\n      }\n      // write term meta data into fst\n      final long longs[] = new long[longsSize];\n      final long delta = state.totalTermFreq - state.docFreq;\n      if (state.totalTermFreq > 0) {\n        if (delta == 0) {\n          statsOut.writeVInt(state.docFreq<<1|1);\n        } else {\n          statsOut.writeVInt(state.docFreq<<1|0);\n          statsOut.writeVLong(state.totalTermFreq-state.docFreq);\n        }\n      } else {\n        statsOut.writeVInt(state.docFreq);\n      }\n      postingsWriter.encodeTerm(longs, metaBytesOut, fieldInfo, state, true);\n      for (int i = 0; i < longsSize; i++) {\n        metaLongsOut.writeVLong(longs[i] - lastLongs[i]);\n        lastLongs[i] = longs[i];\n      }\n      metaLongsOut.writeVLong(metaBytesOut.getFilePointer() - lastMetaBytesFP);\n\n      builder.add(Util.toIntsRef(text, scratchTerm), numTerms);\n      numTerms++;\n\n      lastMetaBytesFP = metaBytesOut.getFilePointer();\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      if (numTerms > 0 && numTerms % SKIP_INTERVAL == 0) {\n        bufferSkip();\n      }\n      // write term meta data into fst\n      final long longs[] = new long[longsSize];\n      final long delta = stats.totalTermFreq - stats.docFreq;\n      if (stats.totalTermFreq > 0) {\n        if (delta == 0) {\n          statsOut.writeVInt(stats.docFreq<<1|1);\n        } else {\n          statsOut.writeVInt(stats.docFreq<<1|0);\n          statsOut.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      } else {\n        statsOut.writeVInt(stats.docFreq);\n      }\n      BlockTermState state = postingsWriter.newTermState();\n      state.docFreq = stats.docFreq;\n      state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(longs, metaBytesOut, fieldInfo, state, true);\n      for (int i = 0; i < longsSize; i++) {\n        metaLongsOut.writeVLong(longs[i] - lastLongs[i]);\n        lastLongs[i] = longs[i];\n      }\n      metaLongsOut.writeVLong(metaBytesOut.getFilePointer() - lastMetaBytesFP);\n\n      builder.add(Util.toIntsRef(text, scratchTerm), numTerms);\n      numTerms++;\n\n      lastMetaBytesFP = metaBytesOut.getFilePointer();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56df73d43b6fc340f5332322862382c7e30f4368":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56df73d43b6fc340f5332322862382c7e30f4368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"]},"commit2Childs":{"56df73d43b6fc340f5332322862382c7e30f4368":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56df73d43b6fc340f5332322862382c7e30f4368","2f948dd442d23baa6cbb28daf77c8db78b351329"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}