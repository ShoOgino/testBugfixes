{"path":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","commits":[{"id":"ef658003003b32165df5d5016addcee1da98e4a2","date":1419764948,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","pathOld":"/dev/null","sourceNew":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes());       // attributes\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","sourceNew":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        0, 0);                       // dimensional count,numBytes\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","sourceOld":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes());       // attributes\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e7f3c6423c9f64e03c630917e38b85c14ea0bcc","date":1446148297,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","sourceNew":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        oldInfo.getDimensionCount(),\n                                        oldInfo.getDimensionNumBytes());\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","sourceOld":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        0, 0);                       // dimensional count,numBytes\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","sourceNew":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        oldInfo.getDimensionCount(),      // dimension count\n                                        oldInfo.getDimensionNumBytes());  // dimension numBytes\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","sourceOld":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        oldInfo.getDimensionCount(),\n                                        oldInfo.getDimensionNumBytes());\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","sourceNew":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        oldInfo.getPointDimensionCount(),      // dimension count\n                                        oldInfo.getPointNumBytes());  // dimension numBytes\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","sourceOld":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        oldInfo.getDimensionCount(),      // dimension count\n                                        oldInfo.getDimensionNumBytes());  // dimension numBytes\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeba0a4d0845889a402dd225793d62f009d029c9","date":1527938093,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","sourceNew":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        oldInfo.getPointDimensionCount(),      // dimension count\n                                        oldInfo.getPointNumBytes(),  // dimension numBytes\n                                        oldInfo.isSoftDeletesField()); // used as soft-deletes field\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","sourceOld":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        oldInfo.getPointDimensionCount(),      // dimension count\n                                        oldInfo.getPointNumBytes());  // dimension numBytes\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab548c8f96022b4780f7500a30b19b4f4a5feeb6","date":1527940044,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","sourceNew":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        oldInfo.getPointDimensionCount(),      // dimension count\n                                        oldInfo.getPointNumBytes());  // dimension numBytes\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","sourceOld":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        oldInfo.getPointDimensionCount(),      // dimension count\n                                        oldInfo.getPointNumBytes(),  // dimension numBytes\n                                        oldInfo.isSoftDeletesField()); // used as soft-deletes field\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7e4ca6dc9612ff741d8713743e2bccfae5eadac","date":1528093718,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","sourceNew":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        oldInfo.getPointDimensionCount(),      // dimension count\n                                        oldInfo.getPointNumBytes(),  // dimension numBytes\n                                        oldInfo.isSoftDeletesField()); // used as soft-deletes field\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","sourceOld":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        oldInfo.getPointDimensionCount(),      // dimension count\n                                        oldInfo.getPointNumBytes());  // dimension numBytes\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","sourceNew":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        oldInfo.getPointDimensionCount(),      // dimension count\n                                        oldInfo.getPointNumBytes(),  // dimension numBytes\n                                        oldInfo.isSoftDeletesField()); // used as soft-deletes field\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","sourceOld":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        oldInfo.getPointDimensionCount(),      // dimension count\n                                        oldInfo.getPointNumBytes());  // dimension numBytes\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","sourceNew":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        oldInfo.getPointDimensionCount(),      // dimension count\n                                        oldInfo.getPointNumBytes(),  // dimension numBytes\n                                        oldInfo.isSoftDeletesField()); // used as soft-deletes field\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","sourceOld":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        oldInfo.getPointDimensionCount(),      // dimension count\n                                        oldInfo.getPointNumBytes());  // dimension numBytes\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","sourceNew":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        oldInfo.getPointDataDimensionCount(),      // data dimension count\n                                        oldInfo.getPointIndexDimensionCount(),      // index dimension count\n                                        oldInfo.getPointNumBytes(),  // dimension numBytes\n                                        oldInfo.isSoftDeletesField()); // used as soft-deletes field\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","sourceOld":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        oldInfo.getPointDimensionCount(),      // dimension count\n                                        oldInfo.getPointNumBytes(),  // dimension numBytes\n                                        oldInfo.isSoftDeletesField()); // used as soft-deletes field\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader#shuffleInfos(FieldInfos,Random).mjava","sourceNew":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        oldInfo.getPointDimensionCount(),      // data dimension count\n                                        oldInfo.getPointIndexDimensionCount(),      // index dimension count\n                                        oldInfo.getPointNumBytes(),  // dimension numBytes\n                                        oldInfo.isSoftDeletesField()); // used as soft-deletes field\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","sourceOld":"  static FieldInfos shuffleInfos(FieldInfos infos, Random random) {\n    // first, shuffle the order\n    List<FieldInfo> shuffled = new ArrayList<>();\n    for (FieldInfo info : infos) {\n      shuffled.add(info);\n    }\n    Collections.shuffle(shuffled, random);\n    \n    // now renumber:\n    for (int i = 0; i < shuffled.size(); i++) {\n      FieldInfo oldInfo = shuffled.get(i);\n      // TODO: should we introduce \"gaps\" too?\n      FieldInfo newInfo = new FieldInfo(oldInfo.name,                // name\n                                        i,                           // number\n                                        oldInfo.hasVectors(),        // storeTermVector\n                                        oldInfo.omitsNorms(),        // omitNorms\n                                        oldInfo.hasPayloads(),       // storePayloads\n                                        oldInfo.getIndexOptions(),   // indexOptions\n                                        oldInfo.getDocValuesType(),  // docValuesType\n                                        oldInfo.getDocValuesGen(),   // dvGen\n                                        oldInfo.attributes(),        // attributes\n                                        oldInfo.getPointDataDimensionCount(),      // data dimension count\n                                        oldInfo.getPointIndexDimensionCount(),      // index dimension count\n                                        oldInfo.getPointNumBytes(),  // dimension numBytes\n                                        oldInfo.isSoftDeletesField()); // used as soft-deletes field\n      shuffled.set(i, newInfo);\n    }\n    \n    return new FieldInfos(shuffled.toArray(new FieldInfo[shuffled.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"8e7f3c6423c9f64e03c630917e38b85c14ea0bcc":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["eeba0a4d0845889a402dd225793d62f009d029c9"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["ef658003003b32165df5d5016addcee1da98e4a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"eeba0a4d0845889a402dd225793d62f009d029c9":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["8e7f3c6423c9f64e03c630917e38b85c14ea0bcc"],"ef658003003b32165df5d5016addcee1da98e4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f592209545c71895260367152601e9200399776d":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["b70042a8a492f7054d480ccdd2be9796510d4327","eeba0a4d0845889a402dd225793d62f009d029c9"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"8e7f3c6423c9f64e03c630917e38b85c14ea0bcc":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["8e7f3c6423c9f64e03c630917e38b85c14ea0bcc"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac","f592209545c71895260367152601e9200399776d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef658003003b32165df5d5016addcee1da98e4a2"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["f6652c943595e92c187ee904c382863013eae28f","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"eeba0a4d0845889a402dd225793d62f009d029c9":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"ef658003003b32165df5d5016addcee1da98e4a2":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}