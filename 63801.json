{"path":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        (random, searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapSearcher(random, searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Searcher \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n                        \n    if ( ! ( searcher instanceof IndexSearcher ) ) return;\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        (random, (IndexSearcher)searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        (random, searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        (random, searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      s.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        (random, searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      s.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      s.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        (random, searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      s.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        (random, searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"790e1fde4caa765b3faaad3fbcd25c6973450336":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["790e1fde4caa765b3faaad3fbcd25c6973450336"]},"commit2Childs":{"790e1fde4caa765b3faaad3fbcd25c6973450336":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["790e1fde4caa765b3faaad3fbcd25c6973450336","70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}