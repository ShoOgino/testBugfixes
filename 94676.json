{"path":"solr/core/src/test/org/apache/solr/util/hll/IntegrationTestGenerator#generateRandomHLL().mjava","commits":[{"id":"6faa211c4af605e3cf078a76d200c1dc348973f5","date":1437043657,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/IntegrationTestGenerator#generateRandomHLL().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Generates a random HLL and populates it with random values.\n     *\n     * @return the populated HLL. This will never be <code>null</code>.\n     */\n    public static HLL generateRandomHLL() {\n        final int randomTypeInt = randomIntBetween(0, HLLType.values().length - 1);\n        final HLLType type;\n        switch(randomTypeInt) {\n            case 0:\n                type = HLLType.EMPTY;\n                break;\n            case 1:\n                type = HLLType.EXPLICIT;\n                break;\n            case 2:\n                type = HLLType.FULL;\n                break;\n            case 3:\n                type = HLLType.EMPTY;\n                break;\n            case 4:\n                type = HLLType.SPARSE;\n                break;\n            default:\n                throw new RuntimeException(\"Unassigned type int \" + randomTypeInt);\n        }\n\n        final int cardinalityCap;\n        final int cardinalityBaseline;\n\n        switch(type) {\n            case EMPTY:\n                return newHLL(HLLType.EMPTY);\n            case EXPLICIT:\n                cardinalityCap = EXPLICIT_THRESHOLD;\n                cardinalityBaseline = 1;\n                break;\n            case SPARSE:\n                cardinalityCap = SPARSE_THRESHOLD;\n                cardinalityBaseline = (EXPLICIT_THRESHOLD + 1);\n                break;\n            case FULL:\n                cardinalityCap = 100000;\n                cardinalityBaseline = (SPARSE_THRESHOLD*10);\n                break;\n            default:\n                throw new RuntimeException(\"We should never be here.\");\n        }\n\n        final HLL hll = newHLL(HLLType.EMPTY);\n        for(int i=0; i<cardinalityBaseline; i++) {\n            hll.addRaw(randomLong());\n        }\n        for(int i=0; i<randomInt(cardinalityCap - cardinalityBaseline); i++) {\n            hll.addRaw(randomLong());\n        }\n\n        return hll;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/IntegrationTestGenerator#generateRandomHLL().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Generates a random HLL and populates it with random values.\n     *\n     * @return the populated HLL. This will never be <code>null</code>.\n     */\n    public static HLL generateRandomHLL() {\n        final int randomTypeInt = randomIntBetween(0, HLLType.values().length - 1);\n        final HLLType type;\n        switch(randomTypeInt) {\n            case 0:\n                type = HLLType.EMPTY;\n                break;\n            case 1:\n                type = HLLType.EXPLICIT;\n                break;\n            case 2:\n                type = HLLType.FULL;\n                break;\n            case 3:\n                type = HLLType.EMPTY;\n                break;\n            case 4:\n                type = HLLType.SPARSE;\n                break;\n            default:\n                throw new RuntimeException(\"Unassigned type int \" + randomTypeInt);\n        }\n\n        final int cardinalityCap;\n        final int cardinalityBaseline;\n\n        switch(type) {\n            case EMPTY:\n                return newHLL(HLLType.EMPTY);\n            case EXPLICIT:\n                cardinalityCap = EXPLICIT_THRESHOLD;\n                cardinalityBaseline = 1;\n                break;\n            case SPARSE:\n                cardinalityCap = SPARSE_THRESHOLD;\n                cardinalityBaseline = (EXPLICIT_THRESHOLD + 1);\n                break;\n            case FULL:\n                cardinalityCap = 100000;\n                cardinalityBaseline = (SPARSE_THRESHOLD*10);\n                break;\n            default:\n                throw new RuntimeException(\"We should never be here.\");\n        }\n\n        final HLL hll = newHLL(HLLType.EMPTY);\n        for(int i=0; i<cardinalityBaseline; i++) {\n            hll.addRaw(randomLong());\n        }\n        for(int i=0; i<randomInt(cardinalityCap - cardinalityBaseline); i++) {\n            hll.addRaw(randomLong());\n        }\n\n        return hll;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6faa211c4af605e3cf078a76d200c1dc348973f5"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6faa211c4af605e3cf078a76d200c1dc348973f5"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}