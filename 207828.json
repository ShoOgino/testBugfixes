{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testStopPositons().mjava","commits":[{"id":"ba64142b9196306ad35a6d525c0bdf5fd411690a","date":1327172564,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testStopPositons().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test Position increments applied by TypeTokenFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 10; i < 20; i++) {\n      if (i % 3 != 0) {\n        sb.append(i).append(\" \");\n      } else {\n        String w = English.intToEnglish(i).trim();\n        sb.append(w).append(\" \");\n      }\n    }\n    log(sb.toString());\n    String stopTypes[] = new String[]{\"<NUM>\"};\n    Set<String> stopSet = asSet(stopTypes);\n\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    TypeTokenFilter typeTokenFilter = new TypeTokenFilter(true, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    testPositons(typeTokenFilter);\n\n    // without increments\n    reader = new StringReader(sb.toString());\n    typeTokenFilter = new TypeTokenFilter(false, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    testPositons(typeTokenFilter);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testStopPositons().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test Position increments applied by TypeTokenFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 10; i < 20; i++) {\n      if (i % 3 != 0) {\n        sb.append(i).append(\" \");\n      } else {\n        String w = English.intToEnglish(i).trim();\n        sb.append(w).append(\" \");\n      }\n    }\n    log(sb.toString());\n    String stopTypes[] = new String[]{\"<NUM>\"};\n    Set<String> stopSet = asSet(stopTypes);\n\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    TypeTokenFilter typeTokenFilter = new TypeTokenFilter(true, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    testPositons(typeTokenFilter);\n\n    // without increments\n    reader = new StringReader(sb.toString());\n    typeTokenFilter = new TypeTokenFilter(false, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    testPositons(typeTokenFilter);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testStopPositons().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by TypeTokenFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 10; i < 20; i++) {\n      if (i % 3 != 0) {\n        sb.append(i).append(\" \");\n      } else {\n        String w = English.intToEnglish(i).trim();\n        sb.append(w).append(\" \");\n      }\n    }\n    log(sb.toString());\n    String stopTypes[] = new String[]{\"<NUM>\"};\n    Set<String> stopSet = asSet(stopTypes);\n\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    TypeTokenFilter typeTokenFilter = new TypeTokenFilter(true, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    testPositons(typeTokenFilter);\n\n    // without increments\n    reader = new StringReader(sb.toString());\n    typeTokenFilter = new TypeTokenFilter(false, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    testPositons(typeTokenFilter);\n\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by TypeTokenFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 10; i < 20; i++) {\n      if (i % 3 != 0) {\n        sb.append(i).append(\" \");\n      } else {\n        String w = English.intToEnglish(i).trim();\n        sb.append(w).append(\" \");\n      }\n    }\n    log(sb.toString());\n    String stopTypes[] = new String[]{\"<NUM>\"};\n    Set<String> stopSet = asSet(stopTypes);\n\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    TypeTokenFilter typeTokenFilter = new TypeTokenFilter(true, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    testPositons(typeTokenFilter);\n\n    // without increments\n    reader = new StringReader(sb.toString());\n    typeTokenFilter = new TypeTokenFilter(false, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    testPositons(typeTokenFilter);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ba64142b9196306ad35a6d525c0bdf5fd411690a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba64142b9196306ad35a6d525c0bdf5fd411690a"],"ba64142b9196306ad35a6d525c0bdf5fd411690a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","ba64142b9196306ad35a6d525c0bdf5fd411690a"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"ba64142b9196306ad35a6d525c0bdf5fd411690a":["b89678825b68eccaf09e6ab71675fc0b0af1e099","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}