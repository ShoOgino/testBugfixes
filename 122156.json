{"path":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","commits":[{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(IndexSearcher,int).mjava","sourceNew":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(random, 0), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(random, edge < 0 ? 4 : 0), true),\n        IndexReader.open(makeEmptyIndex(random, 0), true),\n        0 == edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)\n      }),\n      IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n        IndexReader.open(makeEmptyIndex(random, 0), true),\n        0 < edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)\n      })\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(0), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(edge < 0 ? 4 : 0), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 == edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      }),\n      IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 5), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 < edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      })\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(IndexSearcher,int).mjava","sourceNew":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(random, 0), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(random, edge < 0 ? 4 : 0), true),\n        IndexReader.open(makeEmptyIndex(random, 0), true),\n        0 == edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)\n      }),\n      IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n        IndexReader.open(makeEmptyIndex(random, 0), true),\n        0 < edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)\n      })\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(0), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(edge < 0 ? 4 : 0), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 == edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      }),\n      IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(0 < edge ? 0 : 5), true),\n        IndexReader.open(makeEmptyIndex(0), true),\n        0 < edge ? r : IndexReader.open(makeEmptyIndex(0), true)\n      })\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","sourceNew":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(random, 0), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, edge < 0 ? 4 : 0), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 == edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)),\n      IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 < edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true))\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(random, 0), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(random, edge < 0 ? 4 : 0), true),\n        IndexReader.open(makeEmptyIndex(random, 0), true),\n        0 == edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)\n      }),\n      IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n        IndexReader.open(makeEmptyIndex(random, 0), true),\n        0 < edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)\n      })\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","sourceNew":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(random, 0), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, edge < 0 ? 4 : 0), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 == edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)),\n      IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 < edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true))\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(random, 0), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(random, edge < 0 ? 4 : 0), true),\n        IndexReader.open(makeEmptyIndex(random, 0), true),\n        0 == edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)\n      }),\n      IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(new IndexReader[] {\n        IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n        IndexReader.open(makeEmptyIndex(random, 0), true),\n        0 < edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)\n      })\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(random, 0), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, edge < 0 ? 4 : 0), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 == edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)),\n      IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 < edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true))\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","sourceNew":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(random, 0), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, edge < 0 ? 4 : 0), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 == edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)),\n      IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 < edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true))\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarityProvider(s.getSimilarityProvider());\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(random, 0), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, edge < 0 ? 4 : 0), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 == edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)),\n      IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 < edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true))\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","sourceNew":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(random, 0), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, edge < 0 ? 4 : 0), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 == edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)),\n      IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 < edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true))\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarityProvider(s.getSimilarityProvider());\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(random, 0), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, edge < 0 ? 4 : 0), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 == edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)),\n      IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 < edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true))\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","sourceNew":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(random, 0), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, edge < 0 ? 4 : 0), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 == edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)),\n      IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 < edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true))\n    };\n    IndexSearcher out = LuceneTestCase.newSearcher(new MultiReader(readers));\n    out.setSimilarityProvider(s.getSimilarityProvider());\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(random, 0), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, edge < 0 ? 4 : 0), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 == edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)),\n      IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 < edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true))\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarityProvider(s.getSimilarityProvider());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","sourceNew":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(random, 0), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, edge < 0 ? 4 : 0), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 == edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)),\n      IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 < edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true))\n    };\n    IndexSearcher out = LuceneTestCase.newSearcher(new MultiReader(readers));\n    out.setSimilarityProvider(s.getSimilarityProvider());\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(random, 0), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, edge < 0 ? 4 : 0), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 == edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)),\n      IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 < edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true))\n    };\n    IndexSearcher out = LuceneTestCase.newSearcher(new MultiReader(readers));\n    out.setSimilarityProvider(s.getSimilarityProvider());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(random, 0), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, edge < 0 ? 4 : 0), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 == edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)),\n      IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 < edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true))\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","sourceNew":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(random, 0), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, edge < 0 ? 4 : 0), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 == edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)),\n      IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 < edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true))\n    };\n    IndexSearcher out = LuceneTestCase.newSearcher(new MultiReader(readers));\n    out.setSimilarityProvider(s.getSimilarityProvider());\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : IndexReader.open(makeEmptyIndex(random, 0), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, edge < 0 ? 4 : 0), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 == edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true)),\n      IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 7), true),\n      IndexReader.open(makeEmptyIndex(random, 0), true),\n      new MultiReader(IndexReader.open(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n          IndexReader.open(makeEmptyIndex(random, 0), true),\n          0 < edge ? r : IndexReader.open(makeEmptyIndex(random, 0), true))\n    };\n    IndexSearcher out = new IndexSearcher(new MultiReader(readers));\n    out.setSimilarityProvider(s.getSimilarityProvider());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53a31399f2471493d67b19a95c028a74e0113b6a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"53a31399f2471493d67b19a95c028a74e0113b6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["53a31399f2471493d67b19a95c028a74e0113b6a"]},"commit2Childs":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","53a31399f2471493d67b19a95c028a74e0113b6a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fd9325c7ff9928fabe81c28553b41fc7aa57dfab","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}