{"path":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingIntersectVisitor#AssertingIntersectVisitor(int,int,IntersectVisitor).mjava","commits":[{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingIntersectVisitor#AssertingIntersectVisitor(int,int,IntersectVisitor).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#AssertingIntersectVisitor(int,int,IntersectVisitor).mjava","sourceNew":"    AssertingIntersectVisitor(int numDims, int bytesPerDim, IntersectVisitor in) {\n      this.in = in;\n      this.numDims = numDims;\n      this.bytesPerDim = bytesPerDim;\n      lastMaxPackedValue = new byte[numDims*bytesPerDim];\n      lastMinPackedValue = new byte[numDims*bytesPerDim];\n      if (numDims == 1) {\n        lastDocValue = new byte[bytesPerDim];\n      } else {\n        lastDocValue = null;\n      }\n    }\n\n","sourceOld":"    public AssertingIntersectVisitor(int numDims, int bytesPerDim, IntersectVisitor in) {\n      this.in = in;\n      this.numDims = numDims;\n      this.bytesPerDim = bytesPerDim;\n      lastMaxPackedValue = new byte[numDims*bytesPerDim];\n      lastMinPackedValue = new byte[numDims*bytesPerDim];\n      if (numDims == 1) {\n        lastDocValue = new byte[bytesPerDim];\n      } else {\n        lastDocValue = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingIntersectVisitor#AssertingIntersectVisitor(int,int,IntersectVisitor).mjava","pathOld":"/dev/null","sourceNew":"    AssertingIntersectVisitor(int numDims, int bytesPerDim, IntersectVisitor in) {\n      this.in = in;\n      this.numDims = numDims;\n      this.bytesPerDim = bytesPerDim;\n      lastMaxPackedValue = new byte[numDims*bytesPerDim];\n      lastMinPackedValue = new byte[numDims*bytesPerDim];\n      if (numDims == 1) {\n        lastDocValue = new byte[bytesPerDim];\n      } else {\n        lastDocValue = null;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingIntersectVisitor#AssertingIntersectVisitor(int,int,int,IntersectVisitor).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingIntersectVisitor#AssertingIntersectVisitor(int,int,IntersectVisitor).mjava","sourceNew":"    AssertingIntersectVisitor(int numDataDims, int numIndexDims, int bytesPerDim, IntersectVisitor in) {\n      this.in = in;\n      this.numDataDims = numDataDims;\n      this.numIndexDims = numIndexDims;\n      this.bytesPerDim = bytesPerDim;\n      lastMaxPackedValue = new byte[numDataDims*bytesPerDim];\n      lastMinPackedValue = new byte[numDataDims*bytesPerDim];\n      if (numDataDims == 1) {\n        lastDocValue = new byte[bytesPerDim];\n      } else {\n        lastDocValue = null;\n      }\n    }\n\n","sourceOld":"    AssertingIntersectVisitor(int numDims, int bytesPerDim, IntersectVisitor in) {\n      this.in = in;\n      this.numDims = numDims;\n      this.bytesPerDim = bytesPerDim;\n      lastMaxPackedValue = new byte[numDims*bytesPerDim];\n      lastMinPackedValue = new byte[numDims*bytesPerDim];\n      if (numDims == 1) {\n        lastDocValue = new byte[bytesPerDim];\n      } else {\n        lastDocValue = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f6652c943595e92c187ee904c382863013eae28f":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6652c943595e92c187ee904c382863013eae28f"]},"commit2Childs":{"f6652c943595e92c187ee904c382863013eae28f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["f6652c943595e92c187ee904c382863013eae28f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}