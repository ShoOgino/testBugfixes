{"path":"lucene/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testPrefix().mjava","commits":[{"id":"a848bab7293f0a257ec5153d4995973083b451e1","date":1308958830,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testPrefix().mjava","pathOld":"/dev/null","sourceNew":"  public void testPrefix() throws Exception {\n    WildcardQuery wq = new WildcardQuery(new Term(\"field\", \"extrem*\"));\n    SpanQuery swq = new SpanMultiTermQueryWrapper<WildcardQuery>(wq);\n    // will only match \"jumps over extremely very lazy broxn dog\"\n    SpanFirstQuery sfq = new SpanFirstQuery(swq, 3);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testPrefix().mjava","pathOld":"/dev/null","sourceNew":"  public void testPrefix() throws Exception {\n    WildcardQuery wq = new WildcardQuery(new Term(\"field\", \"extrem*\"));\n    SpanQuery swq = new SpanMultiTermQueryWrapper<WildcardQuery>(wq);\n    // will only match \"jumps over extremely very lazy broxn dog\"\n    SpanFirstQuery sfq = new SpanFirstQuery(swq, 3);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testPrefix().mjava","pathOld":"/dev/null","sourceNew":"  public void testPrefix() throws Exception {\n    WildcardQuery wq = new WildcardQuery(new Term(\"field\", \"extrem*\"));\n    SpanQuery swq = new SpanMultiTermQueryWrapper<WildcardQuery>(wq);\n    // will only match \"jumps over extremely very lazy broxn dog\"\n    SpanFirstQuery sfq = new SpanFirstQuery(swq, 3);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testPrefix().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testPrefix().mjava","sourceNew":"  public void testPrefix() throws Exception {\n    WildcardQuery wq = new WildcardQuery(new Term(\"field\", \"extrem*\"));\n    SpanQuery swq = new SpanMultiTermQueryWrapper<WildcardQuery>(wq);\n    // will only match \"jumps over extremely very lazy broxn dog\"\n    SpanFirstQuery sfq = new SpanFirstQuery(swq, 3);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n  }\n\n","sourceOld":"  public void testPrefix() throws Exception {\n    WildcardQuery wq = new WildcardQuery(new Term(\"field\", \"extrem*\"));\n    SpanQuery swq = new SpanMultiTermQueryWrapper<WildcardQuery>(wq);\n    // will only match \"jumps over extremely very lazy broxn dog\"\n    SpanFirstQuery sfq = new SpanFirstQuery(swq, 3);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a848bab7293f0a257ec5153d4995973083b451e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a848bab7293f0a257ec5153d4995973083b451e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a848bab7293f0a257ec5153d4995973083b451e1"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a848bab7293f0a257ec5153d4995973083b451e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a848bab7293f0a257ec5153d4995973083b451e1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a848bab7293f0a257ec5153d4995973083b451e1","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}