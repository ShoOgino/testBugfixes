{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrMovesForward().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrMovesForward().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrMovesForward().mjava","sourceNew":"  public void testSpanOrMovesForward() throws Exception {\n    Spans spans = orSpans(new String[] {\"w1\", \"xx\"});\n\n    spans.next();\n    int doc = spans.doc();\n    assertEquals(0, doc);\n    \n    spans.skipTo(0);\n    doc = spans.doc();\n    \n    // LUCENE-1583:\n    // according to Spans, a skipTo to the same doc or less\n    // should still call next() on the underlying Spans\n    assertEquals(1, doc);\n\n  }\n\n","sourceOld":"  public void testSpanOrMovesForward() throws Exception {\n    Spans spans = orSpans(new String[] {\"w1\", \"xx\"});\n\n    spans.next();\n    int doc = spans.doc();\n    assertEquals(0, doc);\n    \n    spans.skipTo(0);\n    doc = spans.doc();\n    \n    // LUCENE-1583:\n    // according to Spans, a skipTo to the same doc or less\n    // should still call next() on the underlying Spans\n    assertEquals(1, doc);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrMovesForward().mjava","sourceNew":null,"sourceOld":"  public void testSpanOrMovesForward() throws Exception {\n    Spans spans = orSpans(new String[] {\"w1\", \"xx\"});\n\n    spans.next();\n    int doc = spans.doc();\n    assertEquals(0, doc);\n    \n    spans.skipTo(0);\n    doc = spans.doc();\n    \n    // LUCENE-1583:\n    // according to Spans, a skipTo to the same doc or less\n    // should still call next() on the underlying Spans\n    assertEquals(1, doc);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrMovesForward().mjava","sourceNew":null,"sourceOld":"  public void testSpanOrMovesForward() throws Exception {\n    Spans spans = orSpans(new String[] {\"w1\", \"xx\"});\n\n    spans.next();\n    int doc = spans.doc();\n    assertEquals(0, doc);\n    \n    spans.skipTo(0);\n    doc = spans.doc();\n    \n    // LUCENE-1583:\n    // according to Spans, a skipTo to the same doc or less\n    // should still call next() on the underlying Spans\n    assertEquals(1, doc);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fab172655716b96f7e42376116235017a922de3a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}