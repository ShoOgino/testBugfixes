{"path":"src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","commits":[{"id":"5c6bd70b660528bcf8dd3216ea1f7565ac220a20","date":1156813990,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getLockPrefix().mjava","sourceNew":"  public String getLockID() {\n    String dirName;                               // name to be hashed\n    try {\n      dirName = directory.getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString(), e);\n    }\n\n    byte digest[];\n    synchronized (DIGESTER) {\n      digest = DIGESTER.digest(dirName.getBytes());\n    }\n    StringBuffer buf = new StringBuffer();\n    buf.append(\"lucene-\");\n    for (int i = 0; i < digest.length; i++) {\n      int b = digest[i];\n      buf.append(HEX_DIGITS[(b >> 4) & 0xf]);\n      buf.append(HEX_DIGITS[b & 0xf]);\n    }\n\n    return buf.toString();\n  }\n\n","sourceOld":"  private StringBuffer getLockPrefix() {\n    String dirName;                               // name to be hashed\n    try {\n      dirName = directory.getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString(), e);\n    }\n\n    byte digest[];\n    synchronized (DIGESTER) {\n      digest = DIGESTER.digest(dirName.getBytes());\n    }\n    StringBuffer buf = new StringBuffer();\n    buf.append(\"lucene-\");\n    for (int i = 0; i < digest.length; i++) {\n      int b = digest[i];\n      buf.append(HEX_DIGITS[(b >> 4) & 0xf]);\n      buf.append(HEX_DIGITS[b & 0xf]);\n    }\n\n    return buf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0bf957228b21d5093ca182ac6e90ce6da3eab00","date":1215682064,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","sourceNew":"  public String getLockID() {\n    ensureOpen();\n    String dirName;                               // name to be hashed\n    try {\n      dirName = directory.getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString(), e);\n    }\n\n    byte digest[];\n    synchronized (DIGESTER) {\n      digest = DIGESTER.digest(dirName.getBytes());\n    }\n    StringBuffer buf = new StringBuffer();\n    buf.append(\"lucene-\");\n    for (int i = 0; i < digest.length; i++) {\n      int b = digest[i];\n      buf.append(HEX_DIGITS[(b >> 4) & 0xf]);\n      buf.append(HEX_DIGITS[b & 0xf]);\n    }\n\n    return buf.toString();\n  }\n\n","sourceOld":"  public String getLockID() {\n    String dirName;                               // name to be hashed\n    try {\n      dirName = directory.getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString(), e);\n    }\n\n    byte digest[];\n    synchronized (DIGESTER) {\n      digest = DIGESTER.digest(dirName.getBytes());\n    }\n    StringBuffer buf = new StringBuffer();\n    buf.append(\"lucene-\");\n    for (int i = 0; i < digest.length; i++) {\n      int b = digest[i];\n      buf.append(HEX_DIGITS[(b >> 4) & 0xf]);\n      buf.append(HEX_DIGITS[b & 0xf]);\n    }\n\n    return buf.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","sourceNew":"  public String getLockID() {\n    ensureOpen();\n    String dirName;                               // name to be hashed\n    try {\n      dirName = directory.getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString(), e);\n    }\n\n    byte digest[];\n    synchronized (DIGESTER) {\n      digest = DIGESTER.digest(dirName.getBytes());\n    }\n    StringBuilder buf = new StringBuilder();\n    buf.append(\"lucene-\");\n    for (int i = 0; i < digest.length; i++) {\n      int b = digest[i];\n      buf.append(HEX_DIGITS[(b >> 4) & 0xf]);\n      buf.append(HEX_DIGITS[b & 0xf]);\n    }\n\n    return buf.toString();\n  }\n\n","sourceOld":"  public String getLockID() {\n    ensureOpen();\n    String dirName;                               // name to be hashed\n    try {\n      dirName = directory.getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString(), e);\n    }\n\n    byte digest[];\n    synchronized (DIGESTER) {\n      digest = DIGESTER.digest(dirName.getBytes());\n    }\n    StringBuffer buf = new StringBuffer();\n    buf.append(\"lucene-\");\n    for (int i = 0; i < digest.length; i++) {\n      int b = digest[i];\n      buf.append(HEX_DIGITS[(b >> 4) & 0xf]);\n      buf.append(HEX_DIGITS[b & 0xf]);\n    }\n\n    return buf.toString();\n  }\n\n","bugFix":null,"bugIntro":["1e538cbd7f572f646f36c73053aea561d95c2cb2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","sourceNew":"  @Override\n  public String getLockID() {\n    ensureOpen();\n    String dirName;                               // name to be hashed\n    try {\n      dirName = directory.getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString(), e);\n    }\n\n    byte digest[];\n    synchronized (DIGESTER) {\n      digest = DIGESTER.digest(dirName.getBytes());\n    }\n    StringBuilder buf = new StringBuilder();\n    buf.append(\"lucene-\");\n    for (int i = 0; i < digest.length; i++) {\n      int b = digest[i];\n      buf.append(HEX_DIGITS[(b >> 4) & 0xf]);\n      buf.append(HEX_DIGITS[b & 0xf]);\n    }\n\n    return buf.toString();\n  }\n\n","sourceOld":"  public String getLockID() {\n    ensureOpen();\n    String dirName;                               // name to be hashed\n    try {\n      dirName = directory.getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString(), e);\n    }\n\n    byte digest[];\n    synchronized (DIGESTER) {\n      digest = DIGESTER.digest(dirName.getBytes());\n    }\n    StringBuilder buf = new StringBuilder();\n    buf.append(\"lucene-\");\n    for (int i = 0; i < digest.length; i++) {\n      int b = digest[i];\n      buf.append(HEX_DIGITS[(b >> 4) & 0xf]);\n      buf.append(HEX_DIGITS[b & 0xf]);\n    }\n\n    return buf.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getLockID().mjava","sourceNew":"  @Override\n  public String getLockID() {\n    ensureOpen();\n    String dirName;                               // name to be hashed\n    try {\n      dirName = directory.getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString(), e);\n    }\n\n    byte digest[];\n    synchronized (DIGESTER) {\n      digest = DIGESTER.digest(dirName.getBytes());\n    }\n    StringBuilder buf = new StringBuilder();\n    buf.append(\"lucene-\");\n    for (int i = 0; i < digest.length; i++) {\n      int b = digest[i];\n      buf.append(HEX_DIGITS[(b >> 4) & 0xf]);\n      buf.append(HEX_DIGITS[b & 0xf]);\n    }\n\n    return buf.toString();\n  }\n\n","sourceOld":"  @Override\n  public String getLockID() {\n    ensureOpen();\n    String dirName;                               // name to be hashed\n    try {\n      dirName = directory.getCanonicalPath();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString(), e);\n    }\n\n    byte digest[];\n    synchronized (DIGESTER) {\n      digest = DIGESTER.digest(dirName.getBytes());\n    }\n    StringBuilder buf = new StringBuilder();\n    buf.append(\"lucene-\");\n    for (int i = 0; i < digest.length; i++) {\n      int b = digest[i];\n      buf.append(HEX_DIGITS[(b >> 4) & 0xf]);\n      buf.append(HEX_DIGITS[b & 0xf]);\n    }\n\n    return buf.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0bf957228b21d5093ca182ac6e90ce6da3eab00":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["d0bf957228b21d5093ca182ac6e90ce6da3eab00"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["d0bf957228b21d5093ca182ac6e90ce6da3eab00"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d0bf957228b21d5093ca182ac6e90ce6da3eab00":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}