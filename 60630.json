{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#checkLIR(String,boolean).mjava","commits":[{"id":"b8d1bb706d514ef68ac7d45c7bb70ffbc8a16efd","date":1447422052,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#checkLIR(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void checkLIR(String coreName, boolean allReplicasInLine)\n      throws InterruptedException, KeeperException, IOException {\n    if (allReplicasInLine) {\n      // SOLR-8075: A bug may allow the proper leader to get marked as LIR DOWN and\n      // if we are marked as DOWN but were able to become the leader, we remove\n      // the DOWN entry here so that we don't fail publishing ACTIVE due to being in LIR.\n      // We only do this if all the replicas participated in the election just in case\n      // this was a valid LIR entry and the proper leader replica is missing.\n      try (SolrCore core = cc.getCore(coreName)) {\n        final Replica.State lirState = zkController.getLeaderInitiatedRecoveryState(collection, shardId,\n            core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        if (lirState == Replica.State.DOWN) {\n          // We can do this before registering as leader because only setting DOWN requires that\n          // we are already registered as leader, and here we are setting ACTIVE\n          // The fact that we just won the zk leader election provides a quasi lock on setting this state, but\n          // we should improve this: see SOLR-8075 discussion\n          zkController.updateLeaderInitiatedRecoveryState(collection, shardId,\n              leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP), Replica.State.ACTIVE, core.getCoreDescriptor(), true);\n        }\n      }\n      \n    } else {\n      try (SolrCore core = cc.getCore(coreName)) {\n        final Replica.State lirState = zkController.getLeaderInitiatedRecoveryState(collection, shardId,\n            core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        if (lirState == Replica.State.DOWN || lirState == Replica.State.RECOVERING) {\n          log.warn(\"The previous leader marked me \" + core.getName()\n              + \" as \" + lirState.toString() + \" and I haven't recovered yet, so I shouldn't be the leader.\");\n          \n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader Initiated Recovery prevented leadership\");\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4820e7931c05e4eb25ac34917774fbacab59c3a3","date":1454991883,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#checkLIR(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#checkLIR(String,boolean).mjava","sourceNew":"  public void checkLIR(String coreName, boolean allReplicasInLine)\n      throws InterruptedException, KeeperException, IOException {\n    if (allReplicasInLine) {\n      // SOLR-8075: A bug may allow the proper leader to get marked as LIR DOWN and\n      // if we are marked as DOWN but were able to become the leader, we remove\n      // the DOWN entry here so that we don't fail publishing ACTIVE due to being in LIR.\n      // We only do this if all the replicas participated in the election just in case\n      // this was a valid LIR entry and the proper leader replica is missing.\n      try (SolrCore core = cc.getCore(coreName)) {\n        final Replica.State lirState = zkController.getLeaderInitiatedRecoveryState(collection, shardId,\n            core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        if (lirState == Replica.State.DOWN) {\n          // We can do this before registering as leader because only setting DOWN requires that\n          // we are already registered as leader, and here we are setting ACTIVE\n          // The fact that we just won the zk leader election provides a quasi lock on setting this state, but\n          // we should improve this: see SOLR-8075 discussion\n          zkController.updateLeaderInitiatedRecoveryState(collection, shardId,\n              leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP), Replica.State.ACTIVE, core.getCoreDescriptor(), true);\n        }\n      }\n      \n    } else {\n      try (SolrCore core = cc.getCore(coreName)) {\n        if (core != null) {\n          final Replica.State lirState = zkController.getLeaderInitiatedRecoveryState(collection, shardId,\n              core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n          if (lirState == Replica.State.DOWN || lirState == Replica.State.RECOVERING) {\n            log.warn(\"The previous leader marked me \" + core.getName()\n                + \" as \" + lirState.toString() + \" and I haven't recovered yet, so I shouldn't be the leader.\");\n\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader Initiated Recovery prevented leadership\");\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void checkLIR(String coreName, boolean allReplicasInLine)\n      throws InterruptedException, KeeperException, IOException {\n    if (allReplicasInLine) {\n      // SOLR-8075: A bug may allow the proper leader to get marked as LIR DOWN and\n      // if we are marked as DOWN but were able to become the leader, we remove\n      // the DOWN entry here so that we don't fail publishing ACTIVE due to being in LIR.\n      // We only do this if all the replicas participated in the election just in case\n      // this was a valid LIR entry and the proper leader replica is missing.\n      try (SolrCore core = cc.getCore(coreName)) {\n        final Replica.State lirState = zkController.getLeaderInitiatedRecoveryState(collection, shardId,\n            core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        if (lirState == Replica.State.DOWN) {\n          // We can do this before registering as leader because only setting DOWN requires that\n          // we are already registered as leader, and here we are setting ACTIVE\n          // The fact that we just won the zk leader election provides a quasi lock on setting this state, but\n          // we should improve this: see SOLR-8075 discussion\n          zkController.updateLeaderInitiatedRecoveryState(collection, shardId,\n              leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP), Replica.State.ACTIVE, core.getCoreDescriptor(), true);\n        }\n      }\n      \n    } else {\n      try (SolrCore core = cc.getCore(coreName)) {\n        final Replica.State lirState = zkController.getLeaderInitiatedRecoveryState(collection, shardId,\n            core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        if (lirState == Replica.State.DOWN || lirState == Replica.State.RECOVERING) {\n          log.warn(\"The previous leader marked me \" + core.getName()\n              + \" as \" + lirState.toString() + \" and I haven't recovered yet, so I shouldn't be the leader.\");\n          \n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader Initiated Recovery prevented leadership\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d21dace9d18b198721b5f6835adb37c57acd5d20","date":1487384563,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#checkLIR(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#checkLIR(String,boolean).mjava","sourceNew":"  public void checkLIR(String coreName, boolean allReplicasInLine)\n      throws InterruptedException, KeeperException, IOException {\n    if (allReplicasInLine) {\n      log.info(\"Found all replicas participating in election, clear LIR\");\n      // SOLR-8075: A bug may allow the proper leader to get marked as LIR DOWN and\n      // if we are marked as DOWN but were able to become the leader, we remove\n      // the DOWN entry here so that we don't fail publishing ACTIVE due to being in LIR.\n      // We only do this if all the replicas participated in the election just in case\n      // this was a valid LIR entry and the proper leader replica is missing.\n      try (SolrCore core = cc.getCore(coreName)) {\n        final Replica.State lirState = zkController.getLeaderInitiatedRecoveryState(collection, shardId,\n            core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        if (lirState == Replica.State.DOWN) {\n          // We can do this before registering as leader because only setting DOWN requires that\n          // we are already registered as leader, and here we are setting ACTIVE\n          // The fact that we just won the zk leader election provides a quasi lock on setting this state, but\n          // we should improve this: see SOLR-8075 discussion\n          zkController.updateLeaderInitiatedRecoveryState(collection, shardId,\n              leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP), Replica.State.ACTIVE, core.getCoreDescriptor(), true);\n        }\n      }\n      \n    } else {\n      try (SolrCore core = cc.getCore(coreName)) {\n        if (core != null) {\n          final Replica.State lirState = zkController.getLeaderInitiatedRecoveryState(collection, shardId,\n              core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n          if (lirState == Replica.State.DOWN || lirState == Replica.State.RECOVERING) {\n            log.warn(\"The previous leader marked me \" + core.getName()\n                + \" as \" + lirState.toString() + \" and I haven't recovered yet, so I shouldn't be the leader.\");\n\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader Initiated Recovery prevented leadership\");\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void checkLIR(String coreName, boolean allReplicasInLine)\n      throws InterruptedException, KeeperException, IOException {\n    if (allReplicasInLine) {\n      // SOLR-8075: A bug may allow the proper leader to get marked as LIR DOWN and\n      // if we are marked as DOWN but were able to become the leader, we remove\n      // the DOWN entry here so that we don't fail publishing ACTIVE due to being in LIR.\n      // We only do this if all the replicas participated in the election just in case\n      // this was a valid LIR entry and the proper leader replica is missing.\n      try (SolrCore core = cc.getCore(coreName)) {\n        final Replica.State lirState = zkController.getLeaderInitiatedRecoveryState(collection, shardId,\n            core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        if (lirState == Replica.State.DOWN) {\n          // We can do this before registering as leader because only setting DOWN requires that\n          // we are already registered as leader, and here we are setting ACTIVE\n          // The fact that we just won the zk leader election provides a quasi lock on setting this state, but\n          // we should improve this: see SOLR-8075 discussion\n          zkController.updateLeaderInitiatedRecoveryState(collection, shardId,\n              leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP), Replica.State.ACTIVE, core.getCoreDescriptor(), true);\n        }\n      }\n      \n    } else {\n      try (SolrCore core = cc.getCore(coreName)) {\n        if (core != null) {\n          final Replica.State lirState = zkController.getLeaderInitiatedRecoveryState(collection, shardId,\n              core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n          if (lirState == Replica.State.DOWN || lirState == Replica.State.RECOVERING) {\n            log.warn(\"The previous leader marked me \" + core.getName()\n                + \" as \" + lirState.toString() + \" and I haven't recovered yet, so I shouldn't be the leader.\");\n\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader Initiated Recovery prevented leadership\");\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#checkLIR(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#checkLIR(String,boolean).mjava","sourceNew":"  @Deprecated\n  public void checkLIR(String coreName, boolean allReplicasInLine)\n      throws InterruptedException, KeeperException, IOException {\n    if (allReplicasInLine) {\n      log.info(\"Found all replicas participating in election, clear LIR\");\n      // SOLR-8075: A bug may allow the proper leader to get marked as LIR DOWN and\n      // if we are marked as DOWN but were able to become the leader, we remove\n      // the DOWN entry here so that we don't fail publishing ACTIVE due to being in LIR.\n      // We only do this if all the replicas participated in the election just in case\n      // this was a valid LIR entry and the proper leader replica is missing.\n      try (SolrCore core = cc.getCore(coreName)) {\n        final Replica.State lirState = zkController.getLeaderInitiatedRecoveryState(collection, shardId,\n            core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        if (lirState == Replica.State.DOWN) {\n          // We can do this before registering as leader because only setting DOWN requires that\n          // we are already registered as leader, and here we are setting ACTIVE\n          // The fact that we just won the zk leader election provides a quasi lock on setting this state, but\n          // we should improve this: see SOLR-8075 discussion\n          zkController.updateLeaderInitiatedRecoveryState(collection, shardId,\n              leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP), Replica.State.ACTIVE, core.getCoreDescriptor(), true);\n        }\n      }\n\n    } else {\n      try (SolrCore core = cc.getCore(coreName)) {\n        if (core != null) {\n          final Replica.State lirState = zkController.getLeaderInitiatedRecoveryState(collection, shardId,\n              core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n          if (lirState == Replica.State.DOWN || lirState == Replica.State.RECOVERING) {\n            log.warn(\"The previous leader marked me \" + core.getName()\n                + \" as \" + lirState.toString() + \" and I haven't recovered yet, so I shouldn't be the leader.\");\n\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader Initiated Recovery prevented leadership\");\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void checkLIR(String coreName, boolean allReplicasInLine)\n      throws InterruptedException, KeeperException, IOException {\n    if (allReplicasInLine) {\n      log.info(\"Found all replicas participating in election, clear LIR\");\n      // SOLR-8075: A bug may allow the proper leader to get marked as LIR DOWN and\n      // if we are marked as DOWN but were able to become the leader, we remove\n      // the DOWN entry here so that we don't fail publishing ACTIVE due to being in LIR.\n      // We only do this if all the replicas participated in the election just in case\n      // this was a valid LIR entry and the proper leader replica is missing.\n      try (SolrCore core = cc.getCore(coreName)) {\n        final Replica.State lirState = zkController.getLeaderInitiatedRecoveryState(collection, shardId,\n            core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        if (lirState == Replica.State.DOWN) {\n          // We can do this before registering as leader because only setting DOWN requires that\n          // we are already registered as leader, and here we are setting ACTIVE\n          // The fact that we just won the zk leader election provides a quasi lock on setting this state, but\n          // we should improve this: see SOLR-8075 discussion\n          zkController.updateLeaderInitiatedRecoveryState(collection, shardId,\n              leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP), Replica.State.ACTIVE, core.getCoreDescriptor(), true);\n        }\n      }\n      \n    } else {\n      try (SolrCore core = cc.getCore(coreName)) {\n        if (core != null) {\n          final Replica.State lirState = zkController.getLeaderInitiatedRecoveryState(collection, shardId,\n              core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n          if (lirState == Replica.State.DOWN || lirState == Replica.State.RECOVERING) {\n            log.warn(\"The previous leader marked me \" + core.getName()\n                + \" as \" + lirState.toString() + \" and I haven't recovered yet, so I shouldn't be the leader.\");\n\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader Initiated Recovery prevented leadership\");\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180","date":1539076849,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#checkLIR(String,boolean).mjava","sourceNew":null,"sourceOld":"  @Deprecated\n  public void checkLIR(String coreName, boolean allReplicasInLine)\n      throws InterruptedException, KeeperException, IOException {\n    if (allReplicasInLine) {\n      log.info(\"Found all replicas participating in election, clear LIR\");\n      // SOLR-8075: A bug may allow the proper leader to get marked as LIR DOWN and\n      // if we are marked as DOWN but were able to become the leader, we remove\n      // the DOWN entry here so that we don't fail publishing ACTIVE due to being in LIR.\n      // We only do this if all the replicas participated in the election just in case\n      // this was a valid LIR entry and the proper leader replica is missing.\n      try (SolrCore core = cc.getCore(coreName)) {\n        final Replica.State lirState = zkController.getLeaderInitiatedRecoveryState(collection, shardId,\n            core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n        if (lirState == Replica.State.DOWN) {\n          // We can do this before registering as leader because only setting DOWN requires that\n          // we are already registered as leader, and here we are setting ACTIVE\n          // The fact that we just won the zk leader election provides a quasi lock on setting this state, but\n          // we should improve this: see SOLR-8075 discussion\n          zkController.updateLeaderInitiatedRecoveryState(collection, shardId,\n              leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP), Replica.State.ACTIVE, core.getCoreDescriptor(), true);\n        }\n      }\n\n    } else {\n      try (SolrCore core = cc.getCore(coreName)) {\n        if (core != null) {\n          final Replica.State lirState = zkController.getLeaderInitiatedRecoveryState(collection, shardId,\n              core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n          if (lirState == Replica.State.DOWN || lirState == Replica.State.RECOVERING) {\n            log.warn(\"The previous leader marked me \" + core.getName()\n                + \" as \" + lirState.toString() + \" and I haven't recovered yet, so I shouldn't be the leader.\");\n\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader Initiated Recovery prevented leadership\");\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d21dace9d18b198721b5f6835adb37c57acd5d20":["4820e7931c05e4eb25ac34917774fbacab59c3a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84f20f331d8001864545c7021812d8c6509c7593":["d21dace9d18b198721b5f6835adb37c57acd5d20"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["84f20f331d8001864545c7021812d8c6509c7593"],"4820e7931c05e4eb25ac34917774fbacab59c3a3":["b8d1bb706d514ef68ac7d45c7bb70ffbc8a16efd"],"b8d1bb706d514ef68ac7d45c7bb70ffbc8a16efd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"]},"commit2Childs":{"d21dace9d18b198721b5f6835adb37c57acd5d20":["84f20f331d8001864545c7021812d8c6509c7593"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b8d1bb706d514ef68ac7d45c7bb70ffbc8a16efd"],"84f20f331d8001864545c7021812d8c6509c7593":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"],"4820e7931c05e4eb25ac34917774fbacab59c3a3":["d21dace9d18b198721b5f6835adb37c57acd5d20"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b8d1bb706d514ef68ac7d45c7bb70ffbc8a16efd":["4820e7931c05e4eb25ac34917774fbacab59c3a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}