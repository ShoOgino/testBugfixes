{"path":"solr/src/test/org/apache/solr/analysis/TestSynonymFilter#testOverlap().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestSynonymFilter#testOverlap().mjava","pathOld":"/dev/null","sourceNew":"  public void testOverlap() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"qwe\"), tokens(\"qq/ww/ee\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"xx\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"yy\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"zz\"), orig, merge);\n    assertTokenizesTo(map, \"$\", new String[] { \"$\" });\n    assertTokenizesTo(map, \"qwe\",\n        new String[] { \"qq\", \"ww\", \"ee\", \"xx\", \"yy\", \"zz\" },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n\n    // test merging within the map\n\n    map.add(strings(\"a\"), tokens(\"a5,5 a8,3 a10,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3 a7,4 a9,2 a11,2 a111,100\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"a5\", \"a7\", \"a8\", \"a9\", \"a10\", \"a11\", \"a111\" },\n        new int[] { 1, 2, 2, 1, 1, 1, 1, 100 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/analysis/TestSynonymFilter#testOverlap().mjava","sourceNew":null,"sourceOld":"  public void testOverlap() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"qwe\"), tokens(\"qq/ww/ee\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"xx\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"yy\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"zz\"), orig, merge);\n    assertTokenizesTo(map, \"$\", new String[] { \"$\" });\n    assertTokenizesTo(map, \"qwe\",\n        new String[] { \"qq\", \"ww\", \"ee\", \"xx\", \"yy\", \"zz\" },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n\n    // test merging within the map\n\n    map.add(strings(\"a\"), tokens(\"a5,5 a8,3 a10,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3 a7,4 a9,2 a11,2 a111,100\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"a5\", \"a7\", \"a8\", \"a9\", \"a10\", \"a11\", \"a111\" },\n        new int[] { 1, 2, 2, 1, 1, 1, 1, 100 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestSynonymFilter#testOverlap().mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#testOverlap().mjava","sourceNew":"  public void testOverlap() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"qwe\"), tokens(\"qq/ww/ee\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"xx\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"yy\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"zz\"), orig, merge);\n    assertTokenizesTo(map, \"$\", new String[] { \"$\" });\n    assertTokenizesTo(map, \"qwe\",\n        new String[] { \"qq\", \"ww\", \"ee\", \"xx\", \"yy\", \"zz\" },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n\n    // test merging within the map\n\n    map.add(strings(\"a\"), tokens(\"a5,5 a8,3 a10,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3 a7,4 a9,2 a11,2 a111,100\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"a5\", \"a7\", \"a8\", \"a9\", \"a10\", \"a11\", \"a111\" },\n        new int[] { 1, 2, 2, 1, 1, 1, 1, 100 });\n  }\n\n","sourceOld":"  public void testOverlap() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"qwe\"), tokens(\"qq/ww/ee\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"xx\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"yy\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"zz\"), orig, merge);\n    assertTokenizesTo(map, \"$\", new String[] { \"$\" });\n    assertTokenizesTo(map, \"qwe\",\n        new String[] { \"qq\", \"ww\", \"ee\", \"xx\", \"yy\", \"zz\" },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n\n    // test merging within the map\n\n    map.add(strings(\"a\"), tokens(\"a5,5 a8,3 a10,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3 a7,4 a9,2 a11,2 a111,100\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"a5\", \"a7\", \"a8\", \"a9\", \"a10\", \"a11\", \"a111\" },\n        new int[] { 1, 2, 2, 1, 1, 1, 1, 100 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestSynonymFilter#testOverlap().mjava","pathOld":"/dev/null","sourceNew":"  public void testOverlap() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"qwe\"), tokens(\"qq/ww/ee\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"xx\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"yy\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"zz\"), orig, merge);\n    assertTokenizesTo(map, \"$\", new String[] { \"$\" });\n    assertTokenizesTo(map, \"qwe\",\n        new String[] { \"qq\", \"ww\", \"ee\", \"xx\", \"yy\", \"zz\" },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n\n    // test merging within the map\n\n    map.add(strings(\"a\"), tokens(\"a5,5 a8,3 a10,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3 a7,4 a9,2 a11,2 a111,100\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"a5\", \"a7\", \"a8\", \"a9\", \"a10\", \"a11\", \"a111\" },\n        new int[] { 1, 2, 2, 1, 1, 1, 1, 100 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b59603a30f81d2af70cd2033270521dc7c8ec626","date":1273513065,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#testOverlap().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestSynonymFilter#testOverlap().mjava","sourceNew":"  public void testOverlap() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"qwe\"), tokens(\"qq/ww/ee\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"xx\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"yy\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"zz\"), orig, merge);\n    assertTokenizesTo(map, \"$\", new String[] { \"$\" });\n    assertTokenizesTo(map, \"qwe\",\n        new String[] { \"qq\", \"ww\", \"ee\", \"xx\", \"yy\", \"zz\" },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n\n    // test merging within the map\n\n    map.add(strings(\"a\"), tokens(\"a5,5 a8,3 a10,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3 a7,4 a9,2 a11,2 a111,100\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"a5\", \"a7\", \"a8\", \"a9\", \"a10\", \"a11\", \"a111\" },\n        new int[] { 1, 2, 2, 1, 1, 1, 1, 100 });\n  }\n\n","sourceOld":"  public void testOverlap() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"qwe\"), tokens(\"qq/ww/ee\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"xx\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"yy\"), orig, merge);\n    map.add(strings(\"qwe\"), tokens(\"zz\"), orig, merge);\n    assertTokenizesTo(map, \"$\", new String[] { \"$\" });\n    assertTokenizesTo(map, \"qwe\",\n        new String[] { \"qq\", \"ww\", \"ee\", \"xx\", \"yy\", \"zz\" },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n\n    // test merging within the map\n\n    map.add(strings(\"a\"), tokens(\"a5,5 a8,3 a10,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3 a7,4 a9,2 a11,2 a111,100\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"a5\", \"a7\", \"a8\", \"a9\", \"a10\", \"a11\", \"a111\" },\n        new int[] { 1, 2, 2, 1, 1, 1, 1, 100 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b59603a30f81d2af70cd2033270521dc7c8ec626":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b59603a30f81d2af70cd2033270521dc7c8ec626"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["b59603a30f81d2af70cd2033270521dc7c8ec626"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"b59603a30f81d2af70cd2033270521dc7c8ec626":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}