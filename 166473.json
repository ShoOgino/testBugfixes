{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#createExpectedRange(String,int,int,int,int...).mjava","commits":[{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#createExpectedRange(String,int,int,int,int...).mjava","pathOld":"/dev/null","sourceNew":"  private List<RangeFacet> createExpectedRange(String key, int start, int end,\n                                               int gap, int... values) {\n    List<RangeFacet> expectedRanges = new ArrayList<>();\n    RangeFacet expectedPrices = new RangeFacet.Numeric(key, start, end, gap, null, null, null);\n    expectedRanges.add(expectedPrices);\n    int idx = 0;\n    for (int range = start; range < end; range += gap) {\n      expectedPrices.addCount(String.valueOf(range), values[idx]);\n      if (idx < values.length) {\n        idx++;\n      }\n    }\n    return expectedRanges;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#createExpectedRange(String,int,int,int,int...).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#createExpectedRange(String,int,int,int,int...).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  private List<RangeFacet> createExpectedRange(String key, int start, int end,\n                                               int gap, int... values) {\n    List<RangeFacet> expectedRanges = new ArrayList<>();\n    RangeFacet expectedPrices = new RangeFacet.Numeric(key, start, end, gap, null, null, null);\n    expectedRanges.add(expectedPrices);\n    int idx = 0;\n    for (int range = start; range < end; range += gap) {\n      expectedPrices.addCount(String.valueOf(range), values[idx]);\n      if (idx < values.length) {\n        idx++;\n      }\n    }\n    return expectedRanges;\n  }\n\n","sourceOld":"  private List<RangeFacet> createExpectedRange(String key, int start, int end,\n                                               int gap, int... values) {\n    List<RangeFacet> expectedRanges = new ArrayList<>();\n    RangeFacet expectedPrices = new RangeFacet.Numeric(key, start, end, gap, null, null, null);\n    expectedRanges.add(expectedPrices);\n    int idx = 0;\n    for (int range = start; range < end; range += gap) {\n      expectedPrices.addCount(String.valueOf(range), values[idx]);\n      if (idx < values.length) {\n        idx++;\n      }\n    }\n    return expectedRanges;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}