{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,int).mjava","commits":[{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#createCollection(CloudState,String,int).mjava","sourceNew":"      private ClusterState createCollection(ClusterState state, String collectionName, int numShards) {\n        Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String, Slice>>();\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newStates.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n          newSlices.put(sliceName, new Slice(sliceName, Collections.EMPTY_MAP));\n        }\n        newStates.put(collectionName, newSlices);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newStates);\n        return newClusterState;\n      }\n\n","sourceOld":"      private CloudState createCollection(CloudState state, String collectionName, int numShards) {\n        Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String, Slice>>();\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newStates.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n          newSlices.put(sliceName, new Slice(sliceName, Collections.EMPTY_MAP));\n        }\n        newStates.put(collectionName, newSlices);\n        CloudState newCloudState = new CloudState(state.getLiveNodes(), newStates);\n        return newCloudState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#createCollection(CloudState,String,int).mjava","sourceNew":"      private ClusterState createCollection(ClusterState state, String collectionName, int numShards) {\n        Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String, Slice>>();\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newStates.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n          newSlices.put(sliceName, new Slice(sliceName, Collections.EMPTY_MAP));\n        }\n        newStates.put(collectionName, newSlices);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newStates);\n        return newClusterState;\n      }\n\n","sourceOld":"      private CloudState createCollection(CloudState state, String collectionName, int numShards) {\n        Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String, Slice>>();\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newStates.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n          newSlices.put(sliceName, new Slice(sliceName, Collections.EMPTY_MAP));\n        }\n        newStates.put(collectionName, newSlices);\n        CloudState newCloudState = new CloudState(state.getLiveNodes(), newStates);\n        return newCloudState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,int).mjava","pathOld":"/dev/null","sourceNew":"      private ClusterState createCollection(ClusterState state, String collectionName, int numShards) {\n        Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String, Slice>>();\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newStates.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n          newSlices.put(sliceName, new Slice(sliceName, Collections.EMPTY_MAP));\n        }\n        newStates.put(collectionName, newSlices);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newStates);\n        return newClusterState;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e7d59baa18f0aed2bb5f93a76ffce5343aee13d","date":1347918051,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,int).mjava","sourceNew":"      private ClusterState createCollection(ClusterState state, String collectionName, int numShards) {\n        HashPartitioner hp = new HashPartitioner();\n        List<HashPartitioner.Range> ranges = hp.partitionRange(numShards, hp.fullRange());\n\n\n        Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String, Slice>>();\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newStates.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n\n          Map<String,Object> sliceProps = new LinkedHashMap<String,Object>(1);\n          sliceProps.put(Slice.RANGE, ranges.get(i));\n\n          newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n        }\n        newStates.put(collectionName, newSlices);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newStates);\n        return newClusterState;\n      }\n\n","sourceOld":"      private ClusterState createCollection(ClusterState state, String collectionName, int numShards) {\n        Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String, Slice>>();\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newStates.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n          newSlices.put(sliceName, new Slice(sliceName, Collections.EMPTY_MAP));\n        }\n        newStates.put(collectionName, newSlices);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newStates);\n        return newClusterState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1525b4dfbc0d413b8d7247da232009778e624836","date":1351101135,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,int).mjava","sourceNew":"      private ClusterState createCollection(ClusterState state, String collectionName, int numShards) {\n        log.info(\"Create collection {} with numShards {}\", collectionName, numShards);\n        \n        HashPartitioner hp = new HashPartitioner();\n        List<HashPartitioner.Range> ranges = hp.partitionRange(numShards, hp.fullRange());\n\n\n        Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String, Slice>>();\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newStates.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n\n          Map<String,Object> sliceProps = new LinkedHashMap<String,Object>(1);\n          sliceProps.put(Slice.RANGE, ranges.get(i));\n\n          newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n        }\n        newStates.put(collectionName, newSlices);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newStates);\n        return newClusterState;\n      }\n\n","sourceOld":"      private ClusterState createCollection(ClusterState state, String collectionName, int numShards) {\n        HashPartitioner hp = new HashPartitioner();\n        List<HashPartitioner.Range> ranges = hp.partitionRange(numShards, hp.fullRange());\n\n\n        Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String, Slice>>();\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newStates.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n\n          Map<String,Object> sliceProps = new LinkedHashMap<String,Object>(1);\n          sliceProps.put(Slice.RANGE, ranges.get(i));\n\n          newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n        }\n        newStates.put(collectionName, newSlices);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newStates);\n        return newClusterState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,int).mjava","sourceNew":"      private ClusterState createCollection(ClusterState state, String collectionName, int numShards) {\n        log.info(\"Create collection {} with numShards {}\", collectionName, numShards);\n        \n        HashPartitioner hp = new HashPartitioner();\n        List<HashPartitioner.Range> ranges = hp.partitionRange(numShards, hp.fullRange());\n\n\n        Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String, Slice>>();\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newStates.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n\n          Map<String,Object> sliceProps = new LinkedHashMap<String,Object>(1);\n          sliceProps.put(Slice.RANGE, ranges.get(i));\n\n          newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n        }\n        newStates.put(collectionName, newSlices);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newStates);\n        return newClusterState;\n      }\n\n","sourceOld":"      private ClusterState createCollection(ClusterState state, String collectionName, int numShards) {\n        HashPartitioner hp = new HashPartitioner();\n        List<HashPartitioner.Range> ranges = hp.partitionRange(numShards, hp.fullRange());\n\n\n        Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String, Slice>>();\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newStates.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n\n          Map<String,Object> sliceProps = new LinkedHashMap<String,Object>(1);\n          sliceProps.put(Slice.RANGE, ranges.get(i));\n\n          newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n        }\n        newStates.put(collectionName, newSlices);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newStates);\n        return newClusterState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,int).mjava","sourceNew":"      private ClusterState createCollection(ClusterState state, String collectionName, int numShards) {\n        log.info(\"Create collection {} with numShards {}\", collectionName, numShards);\n        \n        DocRouter hp = new DocRouter();\n        List<DocRouter.Range> ranges = hp.partitionRange(numShards, hp.fullRange());\n\n\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>();\n\n\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newCollections.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n\n          Map<String,Object> sliceProps = new LinkedHashMap<String,Object>(1);\n          sliceProps.put(Slice.RANGE, ranges.get(i));\n\n          newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n        }\n\n        // TODO: fill in with collection properties read from the /collections/<collectionName> node\n        Map<String,Object> collectionProps = defaultCollectionProps();\n        DocRouter router = DocRouter.DEFAULT;\n\n        DocCollection newCollection = new DocCollection(collectionName, newSlices, collectionProps, router);\n\n        newCollections.put(collectionName, newCollection);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newCollections);\n        return newClusterState;\n      }\n\n","sourceOld":"      private ClusterState createCollection(ClusterState state, String collectionName, int numShards) {\n        log.info(\"Create collection {} with numShards {}\", collectionName, numShards);\n        \n        HashPartitioner hp = new HashPartitioner();\n        List<HashPartitioner.Range> ranges = hp.partitionRange(numShards, hp.fullRange());\n\n\n        Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String, Slice>>();\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newStates.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n\n          Map<String,Object> sliceProps = new LinkedHashMap<String,Object>(1);\n          sliceProps.put(Slice.RANGE, ranges.get(i));\n\n          newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n        }\n        newStates.put(collectionName, newSlices);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newStates);\n        return newClusterState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89f828d954597b98a28942874636f35c719b8a5d","date":1354471211,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,int).mjava","sourceNew":"      private ClusterState createCollection(ClusterState state, String collectionName, int numShards) {\n        log.info(\"Create collection {} with numShards {}\", collectionName, numShards);\n\n        DocRouter router = DocRouter.DEFAULT;\n        List<DocRouter.Range> ranges = router.partitionRange(numShards, router.fullRange());\n\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>();\n\n\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newCollections.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n\n          Map<String,Object> sliceProps = new LinkedHashMap<String,Object>(1);\n          sliceProps.put(Slice.RANGE, ranges.get(i));\n\n          newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n        }\n\n        // TODO: fill in with collection properties read from the /collections/<collectionName> node\n        Map<String,Object> collectionProps = defaultCollectionProps();\n\n        DocCollection newCollection = new DocCollection(collectionName, newSlices, collectionProps, router);\n\n        newCollections.put(collectionName, newCollection);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newCollections);\n        return newClusterState;\n      }\n\n","sourceOld":"      private ClusterState createCollection(ClusterState state, String collectionName, int numShards) {\n        log.info(\"Create collection {} with numShards {}\", collectionName, numShards);\n        \n        DocRouter hp = new DocRouter();\n        List<DocRouter.Range> ranges = hp.partitionRange(numShards, hp.fullRange());\n\n\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>();\n\n\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newCollections.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n\n          Map<String,Object> sliceProps = new LinkedHashMap<String,Object>(1);\n          sliceProps.put(Slice.RANGE, ranges.get(i));\n\n          newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n        }\n\n        // TODO: fill in with collection properties read from the /collections/<collectionName> node\n        Map<String,Object> collectionProps = defaultCollectionProps();\n        DocRouter router = DocRouter.DEFAULT;\n\n        DocCollection newCollection = new DocCollection(collectionName, newSlices, collectionProps, router);\n\n        newCollections.put(collectionName, newCollection);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newCollections);\n        return newClusterState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,int).mjava","sourceNew":"      private ClusterState createCollection(ClusterState state, String collectionName, int numShards) {\n        log.info(\"Create collection {} with numShards {}\", collectionName, numShards);\n\n        DocRouter router = DocRouter.DEFAULT;\n        List<DocRouter.Range> ranges = router.partitionRange(numShards, router.fullRange());\n\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>();\n\n\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newCollections.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n\n          Map<String,Object> sliceProps = new LinkedHashMap<String,Object>(1);\n          sliceProps.put(Slice.RANGE, ranges.get(i));\n\n          newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n        }\n\n        // TODO: fill in with collection properties read from the /collections/<collectionName> node\n        Map<String,Object> collectionProps = defaultCollectionProps();\n\n        DocCollection newCollection = new DocCollection(collectionName, newSlices, collectionProps, router);\n\n        newCollections.put(collectionName, newCollection);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newCollections);\n        return newClusterState;\n      }\n\n","sourceOld":"      private ClusterState createCollection(ClusterState state, String collectionName, int numShards) {\n        log.info(\"Create collection {} with numShards {}\", collectionName, numShards);\n        \n        HashPartitioner hp = new HashPartitioner();\n        List<HashPartitioner.Range> ranges = hp.partitionRange(numShards, hp.fullRange());\n\n\n        Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String, Slice>>();\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newStates.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n\n          Map<String,Object> sliceProps = new LinkedHashMap<String,Object>(1);\n          sliceProps.put(Slice.RANGE, ranges.get(i));\n\n          newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n        }\n        newStates.put(collectionName, newSlices);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newStates);\n        return newClusterState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eeda7e62e149f90eee8895af874c74efa7d4852","date":1375293182,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,List[String],ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,int).mjava","sourceNew":"      private ClusterState createCollection(ClusterState state, String collectionName, List<String> shards , ZkNodeProps message) {\n        log.info(\"Create collection {} with shards {}\", collectionName, shards);;\n\n        String routerName = message.getStr(OverseerCollectionProcessor.ROUTER,DocRouter.DEFAULT_NAME);\n        DocRouter router = DocRouter.getDocRouter(routerName);\n\n        List<DocRouter.Range> ranges = router.partitionRange(shards.size(), router.fullRange());\n\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>();\n\n\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newCollections.putAll(state.getCollectionStates());\n        for (int i = 0; i < shards.size(); i++) {\n          String sliceName = shards.get(i);\n        /*}\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);*/\n\n          Map<String, Object> sliceProps = new LinkedHashMap<String, Object>(1);\n          sliceProps.put(Slice.RANGE, ranges == null? null: ranges.get(i));\n\n          newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n        }\n\n        // TODO: fill in with collection properties read from the /collections/<collectionName> node\n        Map<String,Object> collectionProps = new HashMap<String,Object>();\n\n        for (Entry<String, Object> e : OverseerCollectionProcessor.COLL_PROPS.entrySet()) {\n          Object val = message.get(e.getKey());\n          if(val == null){\n            val = OverseerCollectionProcessor.COLL_PROPS.get(e.getKey());\n          }\n          if(val != null) collectionProps.put(e.getKey(),val);\n        }\n        collectionProps.put(DocCollection.DOC_ROUTER, routerName);\n\n        DocCollection newCollection = new DocCollection(collectionName, newSlices, collectionProps, router);\n\n        newCollections.put(collectionName, newCollection);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newCollections);\n        return newClusterState;\n      }\n\n","sourceOld":"      private ClusterState createCollection(ClusterState state, String collectionName, int numShards) {\n        log.info(\"Create collection {} with numShards {}\", collectionName, numShards);\n\n        DocRouter router = DocRouter.DEFAULT;\n        List<DocRouter.Range> ranges = router.partitionRange(numShards, router.fullRange());\n\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>();\n\n\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newCollections.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n\n          Map<String,Object> sliceProps = new LinkedHashMap<String,Object>(1);\n          sliceProps.put(Slice.RANGE, ranges.get(i));\n\n          newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n        }\n\n        // TODO: fill in with collection properties read from the /collections/<collectionName> node\n        Map<String,Object> collectionProps = defaultCollectionProps();\n\n        DocCollection newCollection = new DocCollection(collectionName, newSlices, collectionProps, router);\n\n        newCollections.put(collectionName, newCollection);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newCollections);\n        return newClusterState;\n      }\n\n","bugFix":null,"bugIntro":["9eafdca347a58310b9b997a3154436991e98999b","9eafdca347a58310b9b997a3154436991e98999b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":5,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,List[String],ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,int).mjava","sourceNew":"      private ClusterState createCollection(ClusterState state, String collectionName, List<String> shards , ZkNodeProps message) {\n        log.info(\"Create collection {} with shards {}\", collectionName, shards);;\n\n        String routerName = message.getStr(OverseerCollectionProcessor.ROUTER,DocRouter.DEFAULT_NAME);\n        DocRouter router = DocRouter.getDocRouter(routerName);\n\n        List<DocRouter.Range> ranges = router.partitionRange(shards.size(), router.fullRange());\n\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>();\n\n\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newCollections.putAll(state.getCollectionStates());\n        for (int i = 0; i < shards.size(); i++) {\n          String sliceName = shards.get(i);\n        /*}\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);*/\n\n          Map<String, Object> sliceProps = new LinkedHashMap<String, Object>(1);\n          sliceProps.put(Slice.RANGE, ranges == null? null: ranges.get(i));\n\n          newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n        }\n\n        // TODO: fill in with collection properties read from the /collections/<collectionName> node\n        Map<String,Object> collectionProps = new HashMap<String,Object>();\n\n        for (Entry<String, Object> e : OverseerCollectionProcessor.COLL_PROPS.entrySet()) {\n          Object val = message.get(e.getKey());\n          if(val == null){\n            val = OverseerCollectionProcessor.COLL_PROPS.get(e.getKey());\n          }\n          if(val != null) collectionProps.put(e.getKey(),val);\n        }\n        collectionProps.put(DocCollection.DOC_ROUTER, routerName);\n\n        DocCollection newCollection = new DocCollection(collectionName, newSlices, collectionProps, router);\n\n        newCollections.put(collectionName, newCollection);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newCollections);\n        return newClusterState;\n      }\n\n","sourceOld":"      private ClusterState createCollection(ClusterState state, String collectionName, int numShards) {\n        log.info(\"Create collection {} with numShards {}\", collectionName, numShards);\n\n        DocRouter router = DocRouter.DEFAULT;\n        List<DocRouter.Range> ranges = router.partitionRange(numShards, router.fullRange());\n\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>();\n\n\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newCollections.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n\n          Map<String,Object> sliceProps = new LinkedHashMap<String,Object>(1);\n          sliceProps.put(Slice.RANGE, ranges.get(i));\n\n          newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n        }\n\n        // TODO: fill in with collection properties read from the /collections/<collectionName> node\n        Map<String,Object> collectionProps = defaultCollectionProps();\n\n        DocCollection newCollection = new DocCollection(collectionName, newSlices, collectionProps, router);\n\n        newCollections.put(collectionName, newCollection);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newCollections);\n        return newClusterState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89f828d954597b98a28942874636f35c719b8a5d":["c5a558d54519c651068ddb202f03befefb1514a7"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["89f828d954597b98a28942874636f35c719b8a5d","1eeda7e62e149f90eee8895af874c74efa7d4852"],"7e7d59baa18f0aed2bb5f93a76ffce5343aee13d":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"407687e67faf6e1f02a211ca078d8e3eed631027":["1525b4dfbc0d413b8d7247da232009778e624836","89f828d954597b98a28942874636f35c719b8a5d"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["89f828d954597b98a28942874636f35c719b8a5d"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5a558d54519c651068ddb202f03befefb1514a7":["1525b4dfbc0d413b8d7247da232009778e624836"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"f2126b84bd093fa3d921582a109a0ee578c28126":["7e7d59baa18f0aed2bb5f93a76ffce5343aee13d","1525b4dfbc0d413b8d7247da232009778e624836"],"1525b4dfbc0d413b8d7247da232009778e624836":["7e7d59baa18f0aed2bb5f93a76ffce5343aee13d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eeda7e62e149f90eee8895af874c74efa7d4852"]},"commit2Childs":{"89f828d954597b98a28942874636f35c719b8a5d":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","1eeda7e62e149f90eee8895af874c74efa7d4852"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"7e7d59baa18f0aed2bb5f93a76ffce5343aee13d":["f2126b84bd093fa3d921582a109a0ee578c28126","1525b4dfbc0d413b8d7247da232009778e624836"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"1eeda7e62e149f90eee8895af874c74efa7d4852":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["7e7d59baa18f0aed2bb5f93a76ffce5343aee13d","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c5a558d54519c651068ddb202f03befefb1514a7":["89f828d954597b98a28942874636f35c719b8a5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"1525b4dfbc0d413b8d7247da232009778e624836":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7","f2126b84bd093fa3d921582a109a0ee578c28126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}