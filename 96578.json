{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsFilter().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsFilter().mjava","sourceNew":"  public void testCommonGramsFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field, Reader in) {\n        Tokenizer tokenizer = new MockTokenizer(in, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    // one word queries\n    assertAnalyzesTo(a, \"the\", new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", new String[] { \"foo\" });\n\n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" }, \n        new int[] { 1, 1 });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1 });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" }, \n        new int[] { 1, 1, 1 });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" }, \n        new int[] { 1, 1, 1 });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown\", \"brown_the\", \"the\" }, \n        new int[] { 1, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick the fox\", \n        new String[] { \"quick\", \"quick_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox\", \"fox_of\", \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n\" }, \n        new int[] { 1, 0, 1, 1 });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the\", \"the_quick\", \"quick\", \"brown\" }, \n        new int[] { 1, 0, 1, 1 });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the\", \"the_fox\", \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n  }\n\n","sourceOld":"  public void testCommonGramsFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field, Reader in) {\n        Tokenizer tokenizer = new MockTokenizer(in, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    // one word queries\n    assertAnalyzesTo(a, \"the\", new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", new String[] { \"foo\" });\n\n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" }, \n        new int[] { 1, 1 });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1 });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" }, \n        new int[] { 1, 1, 1 });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" }, \n        new int[] { 1, 1, 1 });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown\", \"brown_the\", \"the\" }, \n        new int[] { 1, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick the fox\", \n        new String[] { \"quick\", \"quick_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox\", \"fox_of\", \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n\" }, \n        new int[] { 1, 0, 1, 1 });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the\", \"the_quick\", \"quick\", \"brown\" }, \n        new int[] { 1, 0, 1, 1 });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the\", \"the_fox\", \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsFilter().mjava","sourceNew":"  public void testCommonGramsFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    // one word queries\n    assertAnalyzesTo(a, \"the\", new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", new String[] { \"foo\" });\n\n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" }, \n        new int[] { 1, 1 });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1 });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" }, \n        new int[] { 1, 1, 1 });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" }, \n        new int[] { 1, 1, 1 });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown\", \"brown_the\", \"the\" }, \n        new int[] { 1, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick the fox\", \n        new String[] { \"quick\", \"quick_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox\", \"fox_of\", \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n\" }, \n        new int[] { 1, 0, 1, 1 });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the\", \"the_quick\", \"quick\", \"brown\" }, \n        new int[] { 1, 0, 1, 1 });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the\", \"the_fox\", \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n  }\n\n","sourceOld":"  public void testCommonGramsFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field, Reader in) {\n        Tokenizer tokenizer = new MockTokenizer(in, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    // one word queries\n    assertAnalyzesTo(a, \"the\", new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", new String[] { \"foo\" });\n\n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" }, \n        new int[] { 1, 1 });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1 });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" }, \n        new int[] { 1, 1, 1 });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" }, \n        new int[] { 1, 1, 1 });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown\", \"brown_the\", \"the\" }, \n        new int[] { 1, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick the fox\", \n        new String[] { \"quick\", \"quick_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox\", \"fox_of\", \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n\" }, \n        new int[] { 1, 0, 1, 1 });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the\", \"the_quick\", \"quick\", \"brown\" }, \n        new int[] { 1, 0, 1, 1 });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the\", \"the_fox\", \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsFilter().mjava","sourceNew":"  public void testCommonGramsFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsFilter(tokenizer, commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    // one word queries\n    assertAnalyzesTo(a, \"the\", new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", new String[] { \"foo\" });\n\n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" }, \n        new int[] { 1, 1 });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1 });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" }, \n        new int[] { 1, 1, 1 });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" }, \n        new int[] { 1, 1, 1 });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown\", \"brown_the\", \"the\" }, \n        new int[] { 1, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick the fox\", \n        new String[] { \"quick\", \"quick_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox\", \"fox_of\", \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n\" }, \n        new int[] { 1, 0, 1, 1 });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the\", \"the_quick\", \"quick\", \"brown\" }, \n        new int[] { 1, 0, 1, 1 });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the\", \"the_fox\", \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n  }\n\n","sourceOld":"  public void testCommonGramsFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    // one word queries\n    assertAnalyzesTo(a, \"the\", new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", new String[] { \"foo\" });\n\n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" }, \n        new int[] { 1, 1 });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1 });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" }, \n        new int[] { 1, 1, 1 });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" }, \n        new int[] { 1, 1, 1 });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown\", \"brown_the\", \"the\" }, \n        new int[] { 1, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick the fox\", \n        new String[] { \"quick\", \"quick_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox\", \"fox_of\", \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n\" }, \n        new int[] { 1, 0, 1, 1 });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the\", \"the_quick\", \"quick\", \"brown\" }, \n        new int[] { 1, 0, 1, 1 });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the\", \"the_fox\", \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsFilter().mjava","sourceNew":"  public void testCommonGramsFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    // one word queries\n    assertAnalyzesTo(a, \"the\", new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", new String[] { \"foo\" });\n\n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" }, \n        new int[] { 1, 1 });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1 });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" }, \n        new int[] { 1, 1, 1 });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" }, \n        new int[] { 1, 1, 1 });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown\", \"brown_the\", \"the\" }, \n        new int[] { 1, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick the fox\", \n        new String[] { \"quick\", \"quick_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox\", \"fox_of\", \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n\" }, \n        new int[] { 1, 0, 1, 1 });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the\", \"the_quick\", \"quick\", \"brown\" }, \n        new int[] { 1, 0, 1, 1 });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the\", \"the_fox\", \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n  }\n\n","sourceOld":"  public void testCommonGramsFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsFilter(tokenizer, commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    // one word queries\n    assertAnalyzesTo(a, \"the\", new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", new String[] { \"foo\" });\n\n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" }, \n        new int[] { 1, 1 });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1 });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" }, \n        new int[] { 1, 1, 1 });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" }, \n        new int[] { 1, 1, 1 });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown\", \"brown_the\", \"the\" }, \n        new int[] { 1, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick the fox\", \n        new String[] { \"quick\", \"quick_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox\", \"fox_of\", \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n\" }, \n        new int[] { 1, 0, 1, 1 });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the\", \"the_quick\", \"quick\", \"brown\" }, \n        new int[] { 1, 0, 1, 1 });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the\", \"the_fox\", \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsFilter().mjava","sourceNew":"  public void testCommonGramsFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsFilter(tokenizer, commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    // one word queries\n    assertAnalyzesTo(a, \"the\", new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", new String[] { \"foo\" });\n\n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" }, \n        new int[] { 1, 1 });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1 });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" }, \n        new int[] { 1, 1, 1 });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" }, \n        new int[] { 1, 1, 1 });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown\", \"brown_the\", \"the\" }, \n        new int[] { 1, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick the fox\", \n        new String[] { \"quick\", \"quick_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox\", \"fox_of\", \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n\" }, \n        new int[] { 1, 0, 1, 1 });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the\", \"the_quick\", \"quick\", \"brown\" }, \n        new int[] { 1, 0, 1, 1 });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the\", \"the_fox\", \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n  }\n\n","sourceOld":"  public void testCommonGramsFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    // one word queries\n    assertAnalyzesTo(a, \"the\", new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", new String[] { \"foo\" });\n\n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" }, \n        new int[] { 1, 1 });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1 });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" }, \n        new int[] { 1, 1, 1 });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" }, \n        new int[] { 1, 1, 1 });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown\", \"brown_the\", \"the\" }, \n        new int[] { 1, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick the fox\", \n        new String[] { \"quick\", \"quick_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox\", \"fox_of\", \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n\" }, \n        new int[] { 1, 0, 1, 1 });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the\", \"the_quick\", \"quick\", \"brown\" }, \n        new int[] { 1, 0, 1, 1 });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the\", \"the_fox\", \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsFilter().mjava","sourceNew":"  public void testCommonGramsFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsFilter(tokenizer, commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    // one word queries\n    assertAnalyzesTo(a, \"the\", new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", new String[] { \"foo\" });\n\n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" }, \n        new int[] { 1, 1 });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1 });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" }, \n        new int[] { 1, 1, 1 });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" }, \n        new int[] { 1, 1, 1 });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown\", \"brown_the\", \"the\" }, \n        new int[] { 1, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick the fox\", \n        new String[] { \"quick\", \"quick_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox\", \"fox_of\", \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n\" }, \n        new int[] { 1, 0, 1, 1 });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the\", \"the_quick\", \"quick\", \"brown\" }, \n        new int[] { 1, 0, 1, 1 });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the\", \"the_fox\", \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    a.close();\n  }\n\n","sourceOld":"  public void testCommonGramsFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsFilter(tokenizer, commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    // one word queries\n    assertAnalyzesTo(a, \"the\", new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", new String[] { \"foo\" });\n\n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" }, \n        new int[] { 1, 1 });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1 });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" }, \n        new int[] { 1, 1, 1 });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" }, \n        new int[] { 1, 1, 1 });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown\", \"brown_the\", \"the\" }, \n        new int[] { 1, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick the fox\", \n        new String[] { \"quick\", \"quick_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox\", \"fox_of\", \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n\" }, \n        new int[] { 1, 0, 1, 1 });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the\", \"the_quick\", \"quick\", \"brown\" }, \n        new int[] { 1, 0, 1, 1 });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the\", \"the_fox\", \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsFilter().mjava","sourceNew":"  public void testCommonGramsFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsFilter(tokenizer, commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    // one word queries\n    assertAnalyzesTo(a, \"the\", new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", new String[] { \"foo\" });\n\n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" }, \n        new int[] { 1, 1 });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1 });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" }, \n        new int[] { 1, 1, 1 });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" }, \n        new int[] { 1, 1, 1 });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown\", \"brown_the\", \"the\" }, \n        new int[] { 1, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick the fox\", \n        new String[] { \"quick\", \"quick_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox\", \"fox_of\", \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n\" }, \n        new int[] { 1, 0, 1, 1 });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the\", \"the_quick\", \"quick\", \"brown\" }, \n        new int[] { 1, 0, 1, 1 });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the\", \"the_fox\", \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    a.close();\n  }\n\n","sourceOld":"  public void testCommonGramsFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsFilter(tokenizer, commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    // one word queries\n    assertAnalyzesTo(a, \"the\", new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", new String[] { \"foo\" });\n\n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" }, \n        new int[] { 1, 1 });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1 });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" }, \n        new int[] { 1, 1, 1 });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" }, \n        new int[] { 1, 1, 1 });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown\", \"brown_the\", \"the\" }, \n        new int[] { 1, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"quick the fox\", \n        new String[] { \"quick\", \"quick_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n\", \"n_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox\", \"fox_of\", \"of\", \"of_the\", \"the\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n\" }, \n        new int[] { 1, 0, 1, 1 });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the\", \"the_quick\", \"quick\", \"brown\" }, \n        new int[] { 1, 0, 1, 1 });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s\", \"s_n\", \"n\", \"n_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the\", \"the_fox\", \"fox\", \"fox_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_n\", \"n\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_fox\", \"fox\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s\", \"s_s\", \"s\", \"s_s\", \"s\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of\", \"of_the\", \"the\", \"the_of\", \"of\" }, \n        new int[] { 1, 0, 1, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}