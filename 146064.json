{"path":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeChars(FastOutputStream,String,int,int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeChars(FastOutputStream,String,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Writes a sequence of UTF-8 encoded characters from a string.\n   *\n   * @param s      the source of the characters\n   * @param start  the first character in the sequence\n   * @param length the number of characters in the sequence\n   *\n   * @see org.apache.lucene.store.IndexInput#readChars(char[],int,int)\n   */\n  public static void writeChars(FastOutputStream os, String s, int start, int length)\n          throws IOException {\n    final int end = start + length;\n    for (int i = start; i < end; i++) {\n      final int code = (int) s.charAt(i);\n      if (code >= 0x01 && code <= 0x7F)\n        os.write(code);\n      else if (((code >= 0x80) && (code <= 0x7FF)) || code == 0) {\n        os.write(0xC0 | (code >> 6));\n        os.write(0x80 | (code & 0x3F));\n      } else {\n        os.write(0xE0 | (code >>> 12));\n        os.write(0x80 | ((code >> 6) & 0x3F));\n        os.write(0x80 | (code & 0x3F));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeChars(FastOutputStream,String,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Writes a sequence of UTF-8 encoded characters from a string.\n   *\n   * @param s      the source of the characters\n   * @param start  the first character in the sequence\n   * @param length the number of characters in the sequence\n   *\n   * @see org.apache.lucene.store.IndexInput#readChars(char[],int,int)\n   */\n  public static void writeChars(FastOutputStream os, String s, int start, int length)\n          throws IOException {\n    final int end = start + length;\n    for (int i = start; i < end; i++) {\n      final int code = (int) s.charAt(i);\n      if (code >= 0x01 && code <= 0x7F)\n        os.write(code);\n      else if (((code >= 0x80) && (code <= 0x7FF)) || code == 0) {\n        os.write(0xC0 | (code >> 6));\n        os.write(0x80 | (code & 0x3F));\n      } else {\n        os.write(0xE0 | (code >>> 12));\n        os.write(0x80 | ((code >> 6) & 0x3F));\n        os.write(0x80 | (code & 0x3F));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeChars(FastOutputStream,String,int,int).mjava","pathOld":"src/common/org/apache/solr/common/util/JavaBinCodec#writeChars(FastOutputStream,String,int,int).mjava","sourceNew":"  /**\n   * Writes a sequence of UTF-8 encoded characters from a string.\n   *\n   * @param s      the source of the characters\n   * @param start  the first character in the sequence\n   * @param length the number of characters in the sequence\n   *\n   * @see org.apache.lucene.store.IndexInput#readChars(char[],int,int)\n   */\n  public static void writeChars(FastOutputStream os, String s, int start, int length)\n          throws IOException {\n    final int end = start + length;\n    for (int i = start; i < end; i++) {\n      final int code = (int) s.charAt(i);\n      if (code >= 0x01 && code <= 0x7F)\n        os.write(code);\n      else if (((code >= 0x80) && (code <= 0x7FF)) || code == 0) {\n        os.write(0xC0 | (code >> 6));\n        os.write(0x80 | (code & 0x3F));\n      } else {\n        os.write(0xE0 | (code >>> 12));\n        os.write(0x80 | ((code >> 6) & 0x3F));\n        os.write(0x80 | (code & 0x3F));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes a sequence of UTF-8 encoded characters from a string.\n   *\n   * @param s      the source of the characters\n   * @param start  the first character in the sequence\n   * @param length the number of characters in the sequence\n   *\n   * @see org.apache.lucene.store.IndexInput#readChars(char[],int,int)\n   */\n  public static void writeChars(FastOutputStream os, String s, int start, int length)\n          throws IOException {\n    final int end = start + length;\n    for (int i = start; i < end; i++) {\n      final int code = (int) s.charAt(i);\n      if (code >= 0x01 && code <= 0x7F)\n        os.write(code);\n      else if (((code >= 0x80) && (code <= 0x7FF)) || code == 0) {\n        os.write(0xC0 | (code >> 6));\n        os.write(0x80 | (code & 0x3F));\n      } else {\n        os.write(0xE0 | (code >>> 12));\n        os.write(0x80 | ((code >> 6) & 0x3F));\n        os.write(0x80 | (code & 0x3F));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeChars(FastOutputStream,String,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Writes a sequence of UTF-8 encoded characters from a string.\n   *\n   * @param s      the source of the characters\n   * @param start  the first character in the sequence\n   * @param length the number of characters in the sequence\n   *\n   * @see org.apache.lucene.store.IndexInput#readChars(char[],int,int)\n   */\n  public static void writeChars(FastOutputStream os, String s, int start, int length)\n          throws IOException {\n    final int end = start + length;\n    for (int i = start; i < end; i++) {\n      final int code = (int) s.charAt(i);\n      if (code >= 0x01 && code <= 0x7F)\n        os.write(code);\n      else if (((code >= 0x80) && (code <= 0x7FF)) || code == 0) {\n        os.write(0xC0 | (code >> 6));\n        os.write(0x80 | (code & 0x3F));\n      } else {\n        os.write(0xE0 | (code >>> 12));\n        os.write(0x80 | ((code >> 6) & 0x3F));\n        os.write(0x80 | (code & 0x3F));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75db8ef3eec8aa3c49d42c476471ae9935bbdc6c","date":1282923617,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeChars(FastOutputStream,String,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Writes a sequence of UTF-8 encoded characters from a string.\n   *\n   * @param s      the source of the characters\n   * @param start  the first character in the sequence\n   * @param length the number of characters in the sequence\n   *\n   * @see org.apache.lucene.store.IndexInput#readChars(char[],int,int)\n   */\n  public static void writeChars(FastOutputStream os, String s, int start, int length)\n          throws IOException {\n    final int end = start + length;\n    for (int i = start; i < end; i++) {\n      final int code = (int) s.charAt(i);\n      if (code >= 0x01 && code <= 0x7F)\n        os.write(code);\n      else if (((code >= 0x80) && (code <= 0x7FF)) || code == 0) {\n        os.write(0xC0 | (code >> 6));\n        os.write(0x80 | (code & 0x3F));\n      } else {\n        os.write(0xE0 | (code >>> 12));\n        os.write(0x80 | ((code >> 6) & 0x3F));\n        os.write(0x80 | (code & 0x3F));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeChars(FastOutputStream,String,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Writes a sequence of UTF-8 encoded characters from a string.\n   *\n   * @param s      the source of the characters\n   * @param start  the first character in the sequence\n   * @param length the number of characters in the sequence\n   *\n   * @see org.apache.lucene.store.IndexInput#readChars(char[],int,int)\n   */\n  public static void writeChars(FastOutputStream os, String s, int start, int length)\n          throws IOException {\n    final int end = start + length;\n    for (int i = start; i < end; i++) {\n      final int code = (int) s.charAt(i);\n      if (code >= 0x01 && code <= 0x7F)\n        os.write(code);\n      else if (((code >= 0x80) && (code <= 0x7FF)) || code == 0) {\n        os.write(0xC0 | (code >> 6));\n        os.write(0x80 | (code & 0x3F));\n      } else {\n        os.write(0xE0 | (code >>> 12));\n        os.write(0x80 | ((code >> 6) & 0x3F));\n        os.write(0x80 | (code & 0x3F));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"75db8ef3eec8aa3c49d42c476471ae9935bbdc6c":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","75db8ef3eec8aa3c49d42c476471ae9935bbdc6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75db8ef3eec8aa3c49d42c476471ae9935bbdc6c"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["75db8ef3eec8aa3c49d42c476471ae9935bbdc6c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"75db8ef3eec8aa3c49d42c476471ae9935bbdc6c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}