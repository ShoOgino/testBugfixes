{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#run(LightAutomaton,IntsRef).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#run(LightAutomaton,IntsRef).mjava","pathOld":"/dev/null","sourceNew":"  public static boolean run(LightAutomaton a, IntsRef s) {\n    // nocommit too slow?\n    assert isDeterministic(a);\n    int state = 0;\n    for (int i=0;i<s.length;i++) {\n      int nextState = a.step(state, s.ints[s.offset+i]);\n      if (nextState == -1) {\n        return false;\n      }\n      state = nextState;\n    }\n    return a.isAccept(state);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#run(LightAutomaton,IntsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#run(LightAutomaton,IntsRef).mjava","sourceNew":"  /**\n   * Returns true if the given string (expressed as unicode codepoints) is accepted by the automaton.  The input must be deterministic.\n   * <p>\n   * Complexity: linear in the length of the string.\n   * <p>\n   * <b>Note:</b> for full performance, use the {@link RunAutomaton} class.\n   */\n  public static boolean run(LightAutomaton a, IntsRef s) {\n    // nocommit too slow?\n    assert isDeterministic(a);\n    int state = 0;\n    for (int i=0;i<s.length;i++) {\n      int nextState = a.step(state, s.ints[s.offset+i]);\n      if (nextState == -1) {\n        return false;\n      }\n      state = nextState;\n    }\n    return a.isAccept(state);\n  }\n\n","sourceOld":"  public static boolean run(LightAutomaton a, IntsRef s) {\n    // nocommit too slow?\n    assert isDeterministic(a);\n    int state = 0;\n    for (int i=0;i<s.length;i++) {\n      int nextState = a.step(state, s.ints[s.offset+i]);\n      if (nextState == -1) {\n        return false;\n      }\n      state = nextState;\n    }\n    return a.isAccept(state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67285d1a68175d877eb9fd1624fccad3db028ff","date":1402779028,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#run(LightAutomaton,IntsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#run(LightAutomaton,IntsRef).mjava","sourceNew":"  /**\n   * Returns true if the given string (expressed as unicode codepoints) is accepted by the automaton.  The input must be deterministic.\n   * <p>\n   * Complexity: linear in the length of the string.\n   * <p>\n   * <b>Note:</b> for full performance, use the {@link RunAutomaton} class.\n   */\n  public static boolean run(LightAutomaton a, IntsRef s) {\n    assert a.isDeterministic();\n    int state = 0;\n    for (int i=0;i<s.length;i++) {\n      int nextState = a.step(state, s.ints[s.offset+i]);\n      if (nextState == -1) {\n        return false;\n      }\n      state = nextState;\n    }\n    return a.isAccept(state);\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given string (expressed as unicode codepoints) is accepted by the automaton.  The input must be deterministic.\n   * <p>\n   * Complexity: linear in the length of the string.\n   * <p>\n   * <b>Note:</b> for full performance, use the {@link RunAutomaton} class.\n   */\n  public static boolean run(LightAutomaton a, IntsRef s) {\n    // nocommit too slow?\n    assert isDeterministic(a);\n    int state = 0;\n    for (int i=0;i<s.length;i++) {\n      int nextState = a.step(state, s.ints[s.offset+i]);\n      if (nextState == -1) {\n        return false;\n      }\n      state = nextState;\n    }\n    return a.isAccept(state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#run(Automaton,IntsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#run(LightAutomaton,IntsRef).mjava","sourceNew":"  /**\n   * Returns true if the given string (expressed as unicode codepoints) is accepted by the automaton.  The input must be deterministic.\n   * <p>\n   * Complexity: linear in the length of the string.\n   * <p>\n   * <b>Note:</b> for full performance, use the {@link RunAutomaton} class.\n   */\n  public static boolean run(Automaton a, IntsRef s) {\n    assert a.isDeterministic();\n    int state = 0;\n    for (int i=0;i<s.length;i++) {\n      int nextState = a.step(state, s.ints[s.offset+i]);\n      if (nextState == -1) {\n        return false;\n      }\n      state = nextState;\n    }\n    return a.isAccept(state);\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given string (expressed as unicode codepoints) is accepted by the automaton.  The input must be deterministic.\n   * <p>\n   * Complexity: linear in the length of the string.\n   * <p>\n   * <b>Note:</b> for full performance, use the {@link RunAutomaton} class.\n   */\n  public static boolean run(LightAutomaton a, IntsRef s) {\n    assert a.isDeterministic();\n    int state = 0;\n    for (int i=0;i<s.length;i++) {\n      int nextState = a.step(state, s.ints[s.offset+i]);\n      if (nextState == -1) {\n        return false;\n      }\n      state = nextState;\n    }\n    return a.isAccept(state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a67285d1a68175d877eb9fd1624fccad3db028ff":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a67285d1a68175d877eb9fd1624fccad3db028ff":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}