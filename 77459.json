{"path":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","commits":[{"id":"77ace774184b7fdbf04c66d1e206b8ff368dfb6c","date":1475777393,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","pathOld":"/dev/null","sourceNew":"  private void testWhere() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      // Equals\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n\n      // Not Equals <>\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(7, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(2L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(3L, tuple.get(\"id\"));\n      tuple = tuples.get(2);\n      assertEquals(4L, tuple.get(\"id\"));\n      tuple = tuples.get(3);\n      assertEquals(5L, tuple.get(\"id\"));\n      tuple = tuples.get(4);\n      assertEquals(6L, tuple.get(\"id\"));\n      tuple = tuples.get(5);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(6);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // Not Equals !=\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(7, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(2L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(3L, tuple.get(\"id\"));\n      tuple = tuples.get(2);\n      assertEquals(4L, tuple.get(\"id\"));\n      tuple = tuples.get(3);\n      assertEquals(5L, tuple.get(\"id\"));\n      tuple = tuples.get(4);\n      assertEquals(6L, tuple.get(\"id\"));\n      tuple = tuples.get(5);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(6);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // Less than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n\n      // Less than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(2L, tuple.get(\"id\"));\n\n      // Greater than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // Greater than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(8L, tuple.get(\"id\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","pathOld":"/dev/null","sourceNew":"  private void testWhere() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      // Equals\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n\n      // Not Equals <>\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(7, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(2L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(3L, tuple.get(\"id\"));\n      tuple = tuples.get(2);\n      assertEquals(4L, tuple.get(\"id\"));\n      tuple = tuples.get(3);\n      assertEquals(5L, tuple.get(\"id\"));\n      tuple = tuples.get(4);\n      assertEquals(6L, tuple.get(\"id\"));\n      tuple = tuples.get(5);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(6);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // Not Equals !=\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(7, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(2L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(3L, tuple.get(\"id\"));\n      tuple = tuples.get(2);\n      assertEquals(4L, tuple.get(\"id\"));\n      tuple = tuples.get(3);\n      assertEquals(5L, tuple.get(\"id\"));\n      tuple = tuples.get(4);\n      assertEquals(6L, tuple.get(\"id\"));\n      tuple = tuples.get(5);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(6);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // Less than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n\n      // Less than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(2L, tuple.get(\"id\"));\n\n      // Greater than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // Greater than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(8L, tuple.get(\"id\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"612da0a0a2d5f4409da55729b9833e799f905ac5","date":1479142562,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","sourceNew":"  private void testWhere() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      // Equals\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n\n      // Not Equals <>\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(7, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(2L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(3L, tuple.get(\"id\"));\n      tuple = tuples.get(2);\n      assertEquals(4L, tuple.get(\"id\"));\n      tuple = tuples.get(3);\n      assertEquals(5L, tuple.get(\"id\"));\n      tuple = tuples.get(4);\n      assertEquals(6L, tuple.get(\"id\"));\n      tuple = tuples.get(5);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(6);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // TODO requires different Calcite SQL conformance level\n      // Not Equals !=\n//      sParams = mapParams(CommonParams.QT, \"/sql\",\n//          \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n//\n//      solrStream = new SolrStream(jetty.url, sParams);\n//      tuples = getTuples(solrStream);\n//\n//      assertEquals(7, tuples.size());\n//\n//      tuple = tuples.get(0);\n//      assertEquals(2L, tuple.get(\"id\"));\n//      tuple = tuples.get(1);\n//      assertEquals(3L, tuple.get(\"id\"));\n//      tuple = tuples.get(2);\n//      assertEquals(4L, tuple.get(\"id\"));\n//      tuple = tuples.get(3);\n//      assertEquals(5L, tuple.get(\"id\"));\n//      tuple = tuples.get(4);\n//      assertEquals(6L, tuple.get(\"id\"));\n//      tuple = tuples.get(5);\n//      assertEquals(7L, tuple.get(\"id\"));\n//      tuple = tuples.get(6);\n//      assertEquals(8L, tuple.get(\"id\"));\n\n      // Less than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n\n      // Less than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(2L, tuple.get(\"id\"));\n\n      // Greater than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // Greater than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(8L, tuple.get(\"id\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testWhere() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      // Equals\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n\n      // Not Equals <>\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(7, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(2L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(3L, tuple.get(\"id\"));\n      tuple = tuples.get(2);\n      assertEquals(4L, tuple.get(\"id\"));\n      tuple = tuples.get(3);\n      assertEquals(5L, tuple.get(\"id\"));\n      tuple = tuples.get(4);\n      assertEquals(6L, tuple.get(\"id\"));\n      tuple = tuples.get(5);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(6);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // Not Equals !=\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(7, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(2L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(3L, tuple.get(\"id\"));\n      tuple = tuples.get(2);\n      assertEquals(4L, tuple.get(\"id\"));\n      tuple = tuples.get(3);\n      assertEquals(5L, tuple.get(\"id\"));\n      tuple = tuples.get(4);\n      assertEquals(6L, tuple.get(\"id\"));\n      tuple = tuples.get(5);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(6);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // Less than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n\n      // Less than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(2L, tuple.get(\"id\"));\n\n      // Greater than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // Greater than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(8L, tuple.get(\"id\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":3,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","sourceNew":"  private void testWhere() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      // Equals\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n\n      // Not Equals <>\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(7, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(2L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(3L, tuple.get(\"id\"));\n      tuple = tuples.get(2);\n      assertEquals(4L, tuple.get(\"id\"));\n      tuple = tuples.get(3);\n      assertEquals(5L, tuple.get(\"id\"));\n      tuple = tuples.get(4);\n      assertEquals(6L, tuple.get(\"id\"));\n      tuple = tuples.get(5);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(6);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // TODO requires different Calcite SQL conformance level\n      // Not Equals !=\n//      sParams = mapParams(CommonParams.QT, \"/sql\",\n//          \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n//\n//      solrStream = new SolrStream(jetty.url, sParams);\n//      tuples = getTuples(solrStream);\n//\n//      assertEquals(7, tuples.size());\n//\n//      tuple = tuples.get(0);\n//      assertEquals(2L, tuple.get(\"id\"));\n//      tuple = tuples.get(1);\n//      assertEquals(3L, tuple.get(\"id\"));\n//      tuple = tuples.get(2);\n//      assertEquals(4L, tuple.get(\"id\"));\n//      tuple = tuples.get(3);\n//      assertEquals(5L, tuple.get(\"id\"));\n//      tuple = tuples.get(4);\n//      assertEquals(6L, tuple.get(\"id\"));\n//      tuple = tuples.get(5);\n//      assertEquals(7L, tuple.get(\"id\"));\n//      tuple = tuples.get(6);\n//      assertEquals(8L, tuple.get(\"id\"));\n\n      // Less than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n\n      // Less than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(2L, tuple.get(\"id\"));\n\n      // Greater than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // Greater than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(8L, tuple.get(\"id\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testWhere() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      // Equals\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n\n      // Not Equals <>\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(7, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(2L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(3L, tuple.get(\"id\"));\n      tuple = tuples.get(2);\n      assertEquals(4L, tuple.get(\"id\"));\n      tuple = tuples.get(3);\n      assertEquals(5L, tuple.get(\"id\"));\n      tuple = tuples.get(4);\n      assertEquals(6L, tuple.get(\"id\"));\n      tuple = tuples.get(5);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(6);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // Not Equals !=\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(7, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(2L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(3L, tuple.get(\"id\"));\n      tuple = tuples.get(2);\n      assertEquals(4L, tuple.get(\"id\"));\n      tuple = tuples.get(3);\n      assertEquals(5L, tuple.get(\"id\"));\n      tuple = tuples.get(4);\n      assertEquals(6L, tuple.get(\"id\"));\n      tuple = tuples.get(5);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(6);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // Less than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n\n      // Less than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(2L, tuple.get(\"id\"));\n\n      // Greater than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // Greater than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(8L, tuple.get(\"id\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","sourceNew":"  private void testWhere() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      // Equals\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assertEquals(\"1\", tuple.get(\"id\"));\n\n      // Not Equals <>\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(7, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(\"2\", tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(\"3\", tuple.get(\"id\"));\n      tuple = tuples.get(2);\n      assertEquals(\"4\", tuple.get(\"id\"));\n      tuple = tuples.get(3);\n      assertEquals(\"5\", tuple.get(\"id\"));\n      tuple = tuples.get(4);\n      assertEquals(\"6\", tuple.get(\"id\"));\n      tuple = tuples.get(5);\n      assertEquals(\"7\", tuple.get(\"id\"));\n      tuple = tuples.get(6);\n      assertEquals(\"8\", tuple.get(\"id\"));\n\n      // TODO requires different Calcite SQL conformance level\n      // Not Equals !=\n//      sParams = mapParams(CommonParams.QT, \"/sql\",\n//          \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n//\n//      solrStream = new SolrStream(jetty.url, sParams);\n//      tuples = getTuples(solrStream);\n//\n//      assertEquals(7, tuples.size());\n//\n//      tuple = tuples.get(0);\n//      assertEquals(2L, tuple.get(\"id\"));\n//      tuple = tuples.get(1);\n//      assertEquals(3L, tuple.get(\"id\"));\n//      tuple = tuples.get(2);\n//      assertEquals(4L, tuple.get(\"id\"));\n//      tuple = tuples.get(3);\n//      assertEquals(5L, tuple.get(\"id\"));\n//      tuple = tuples.get(4);\n//      assertEquals(6L, tuple.get(\"id\"));\n//      tuple = tuples.get(5);\n//      assertEquals(7L, tuple.get(\"id\"));\n//      tuple = tuples.get(6);\n//      assertEquals(8L, tuple.get(\"id\"));\n\n      // Less than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(\"1\", tuple.get(\"id\"));\n\n      // Less than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(\"1\", tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(\"2\", tuple.get(\"id\"));\n\n      // Greater than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(\"8\", tuple.get(\"id\"));\n\n      // Greater than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(\"7\", tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(\"8\", tuple.get(\"id\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testWhere() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      // Equals\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n\n      // Not Equals <>\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(7, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(2L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(3L, tuple.get(\"id\"));\n      tuple = tuples.get(2);\n      assertEquals(4L, tuple.get(\"id\"));\n      tuple = tuples.get(3);\n      assertEquals(5L, tuple.get(\"id\"));\n      tuple = tuples.get(4);\n      assertEquals(6L, tuple.get(\"id\"));\n      tuple = tuples.get(5);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(6);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // TODO requires different Calcite SQL conformance level\n      // Not Equals !=\n//      sParams = mapParams(CommonParams.QT, \"/sql\",\n//          \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n//\n//      solrStream = new SolrStream(jetty.url, sParams);\n//      tuples = getTuples(solrStream);\n//\n//      assertEquals(7, tuples.size());\n//\n//      tuple = tuples.get(0);\n//      assertEquals(2L, tuple.get(\"id\"));\n//      tuple = tuples.get(1);\n//      assertEquals(3L, tuple.get(\"id\"));\n//      tuple = tuples.get(2);\n//      assertEquals(4L, tuple.get(\"id\"));\n//      tuple = tuples.get(3);\n//      assertEquals(5L, tuple.get(\"id\"));\n//      tuple = tuples.get(4);\n//      assertEquals(6L, tuple.get(\"id\"));\n//      tuple = tuples.get(5);\n//      assertEquals(7L, tuple.get(\"id\"));\n//      tuple = tuples.get(6);\n//      assertEquals(8L, tuple.get(\"id\"));\n\n      // Less than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n\n      // Less than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(2L, tuple.get(\"id\"));\n\n      // Greater than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // Greater than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(8L, tuple.get(\"id\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","sourceNew":"  private void testWhere() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      // Equals\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assertEquals(\"1\", tuple.get(\"id\"));\n\n      // Not Equals <>\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(7, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(\"2\", tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(\"3\", tuple.get(\"id\"));\n      tuple = tuples.get(2);\n      assertEquals(\"4\", tuple.get(\"id\"));\n      tuple = tuples.get(3);\n      assertEquals(\"5\", tuple.get(\"id\"));\n      tuple = tuples.get(4);\n      assertEquals(\"6\", tuple.get(\"id\"));\n      tuple = tuples.get(5);\n      assertEquals(\"7\", tuple.get(\"id\"));\n      tuple = tuples.get(6);\n      assertEquals(\"8\", tuple.get(\"id\"));\n\n      // TODO requires different Calcite SQL conformance level\n      // Not Equals !=\n//      sParams = mapParams(CommonParams.QT, \"/sql\",\n//          \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n//\n//      solrStream = new SolrStream(jetty.url, sParams);\n//      tuples = getTuples(solrStream);\n//\n//      assertEquals(7, tuples.size());\n//\n//      tuple = tuples.get(0);\n//      assertEquals(2L, tuple.get(\"id\"));\n//      tuple = tuples.get(1);\n//      assertEquals(3L, tuple.get(\"id\"));\n//      tuple = tuples.get(2);\n//      assertEquals(4L, tuple.get(\"id\"));\n//      tuple = tuples.get(3);\n//      assertEquals(5L, tuple.get(\"id\"));\n//      tuple = tuples.get(4);\n//      assertEquals(6L, tuple.get(\"id\"));\n//      tuple = tuples.get(5);\n//      assertEquals(7L, tuple.get(\"id\"));\n//      tuple = tuples.get(6);\n//      assertEquals(8L, tuple.get(\"id\"));\n\n      // Less than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(\"1\", tuple.get(\"id\"));\n\n      // Less than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(\"1\", tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(\"2\", tuple.get(\"id\"));\n\n      // Greater than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(\"8\", tuple.get(\"id\"));\n\n      // Greater than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(\"7\", tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(\"8\", tuple.get(\"id\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testWhere() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      // Equals\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n\n      // Not Equals <>\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(7, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(2L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(3L, tuple.get(\"id\"));\n      tuple = tuples.get(2);\n      assertEquals(4L, tuple.get(\"id\"));\n      tuple = tuples.get(3);\n      assertEquals(5L, tuple.get(\"id\"));\n      tuple = tuples.get(4);\n      assertEquals(6L, tuple.get(\"id\"));\n      tuple = tuples.get(5);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(6);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // TODO requires different Calcite SQL conformance level\n      // Not Equals !=\n//      sParams = mapParams(CommonParams.QT, \"/sql\",\n//          \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n//\n//      solrStream = new SolrStream(jetty.url, sParams);\n//      tuples = getTuples(solrStream);\n//\n//      assertEquals(7, tuples.size());\n//\n//      tuple = tuples.get(0);\n//      assertEquals(2L, tuple.get(\"id\"));\n//      tuple = tuples.get(1);\n//      assertEquals(3L, tuple.get(\"id\"));\n//      tuple = tuples.get(2);\n//      assertEquals(4L, tuple.get(\"id\"));\n//      tuple = tuples.get(3);\n//      assertEquals(5L, tuple.get(\"id\"));\n//      tuple = tuples.get(4);\n//      assertEquals(6L, tuple.get(\"id\"));\n//      tuple = tuples.get(5);\n//      assertEquals(7L, tuple.get(\"id\"));\n//      tuple = tuples.get(6);\n//      assertEquals(8L, tuple.get(\"id\"));\n\n      // Less than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n\n      // Less than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(2L, tuple.get(\"id\"));\n\n      // Greater than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // Greater than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(8L, tuple.get(\"id\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","sourceNew":"  private void testWhere() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      // Equals\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assertEquals(\"1\", tuple.get(\"id\"));\n\n      // Not Equals <>\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(7, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(\"2\", tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(\"3\", tuple.get(\"id\"));\n      tuple = tuples.get(2);\n      assertEquals(\"4\", tuple.get(\"id\"));\n      tuple = tuples.get(3);\n      assertEquals(\"5\", tuple.get(\"id\"));\n      tuple = tuples.get(4);\n      assertEquals(\"6\", tuple.get(\"id\"));\n      tuple = tuples.get(5);\n      assertEquals(\"7\", tuple.get(\"id\"));\n      tuple = tuples.get(6);\n      assertEquals(\"8\", tuple.get(\"id\"));\n\n      // TODO requires different Calcite SQL conformance level\n      // Not Equals !=\n//      sParams = mapParams(CommonParams.QT, \"/sql\",\n//          \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n//\n//      solrStream = new SolrStream(jetty.url, sParams);\n//      tuples = getTuples(solrStream);\n//\n//      assertEquals(7, tuples.size());\n//\n//      tuple = tuples.get(0);\n//      assertEquals(2L, tuple.get(\"id\"));\n//      tuple = tuples.get(1);\n//      assertEquals(3L, tuple.get(\"id\"));\n//      tuple = tuples.get(2);\n//      assertEquals(4L, tuple.get(\"id\"));\n//      tuple = tuples.get(3);\n//      assertEquals(5L, tuple.get(\"id\"));\n//      tuple = tuples.get(4);\n//      assertEquals(6L, tuple.get(\"id\"));\n//      tuple = tuples.get(5);\n//      assertEquals(7L, tuple.get(\"id\"));\n//      tuple = tuples.get(6);\n//      assertEquals(8L, tuple.get(\"id\"));\n\n      // Less than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(\"1\", tuple.get(\"id\"));\n\n      // Less than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(\"1\", tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(\"2\", tuple.get(\"id\"));\n\n      // Greater than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(\"8\", tuple.get(\"id\"));\n\n      // Greater than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(\"7\", tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(\"8\", tuple.get(\"id\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testWhere() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      // Equals\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n\n      // Not Equals <>\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(7, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(2L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(3L, tuple.get(\"id\"));\n      tuple = tuples.get(2);\n      assertEquals(4L, tuple.get(\"id\"));\n      tuple = tuples.get(3);\n      assertEquals(5L, tuple.get(\"id\"));\n      tuple = tuples.get(4);\n      assertEquals(6L, tuple.get(\"id\"));\n      tuple = tuples.get(5);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(6);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // TODO requires different Calcite SQL conformance level\n      // Not Equals !=\n//      sParams = mapParams(CommonParams.QT, \"/sql\",\n//          \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n//\n//      solrStream = new SolrStream(jetty.url, sParams);\n//      tuples = getTuples(solrStream);\n//\n//      assertEquals(7, tuples.size());\n//\n//      tuple = tuples.get(0);\n//      assertEquals(2L, tuple.get(\"id\"));\n//      tuple = tuples.get(1);\n//      assertEquals(3L, tuple.get(\"id\"));\n//      tuple = tuples.get(2);\n//      assertEquals(4L, tuple.get(\"id\"));\n//      tuple = tuples.get(3);\n//      assertEquals(5L, tuple.get(\"id\"));\n//      tuple = tuples.get(4);\n//      assertEquals(6L, tuple.get(\"id\"));\n//      tuple = tuples.get(5);\n//      assertEquals(7L, tuple.get(\"id\"));\n//      tuple = tuples.get(6);\n//      assertEquals(8L, tuple.get(\"id\"));\n\n      // Less than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n\n      // Less than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(1L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(2L, tuple.get(\"id\"));\n\n      // Greater than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(8L, tuple.get(\"id\"));\n\n      // Greater than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(7L, tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(8L, tuple.get(\"id\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c58a62203315881cce5089ef67ffee6b8a988a75","date":1544601986,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","sourceNew":"  private void testWhere() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n    indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n    indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n    indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n    indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n    indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n    indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n    indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n    commit();\n\n    // Equals\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assertEquals(1, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Not Equals <>\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assertEquals(7, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"2\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"3\", tuple.get(\"id\"));\n    tuple = tuples.get(2);\n    assertEquals(\"4\", tuple.get(\"id\"));\n    tuple = tuples.get(3);\n    assertEquals(\"5\", tuple.get(\"id\"));\n    tuple = tuples.get(4);\n    assertEquals(\"6\", tuple.get(\"id\"));\n    tuple = tuples.get(5);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(6);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // TODO requires different Calcite SQL conformance level\n    // Not Equals !=\n    // sParams = mapParams(CommonParams.QT, \"/sql\",\n    // \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n    //\n    // solrStream = new SolrStream(jetty.url, sParams);\n    // tuples = getTuples(solrStream);\n    //\n    // assertEquals(7, tuples.size());\n    //\n    // tuple = tuples.get(0);\n    // assertEquals(2L, tuple.get(\"id\"));\n    // tuple = tuples.get(1);\n    // assertEquals(3L, tuple.get(\"id\"));\n    // tuple = tuples.get(2);\n    // assertEquals(4L, tuple.get(\"id\"));\n    // tuple = tuples.get(3);\n    // assertEquals(5L, tuple.get(\"id\"));\n    // tuple = tuples.get(4);\n    // assertEquals(6L, tuple.get(\"id\"));\n    // tuple = tuples.get(5);\n    // assertEquals(7L, tuple.get(\"id\"));\n    // tuple = tuples.get(6);\n    // assertEquals(8L, tuple.get(\"id\"));\n\n    // Less than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Less than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"2\", tuple.get(\"id\"));\n\n    // Greater than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // Greater than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n  }\n\n","sourceOld":"  private void testWhere() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n      commit();\n\n      // Equals\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assertEquals(\"1\", tuple.get(\"id\"));\n\n      // Not Equals <>\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(7, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(\"2\", tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(\"3\", tuple.get(\"id\"));\n      tuple = tuples.get(2);\n      assertEquals(\"4\", tuple.get(\"id\"));\n      tuple = tuples.get(3);\n      assertEquals(\"5\", tuple.get(\"id\"));\n      tuple = tuples.get(4);\n      assertEquals(\"6\", tuple.get(\"id\"));\n      tuple = tuples.get(5);\n      assertEquals(\"7\", tuple.get(\"id\"));\n      tuple = tuples.get(6);\n      assertEquals(\"8\", tuple.get(\"id\"));\n\n      // TODO requires different Calcite SQL conformance level\n      // Not Equals !=\n//      sParams = mapParams(CommonParams.QT, \"/sql\",\n//          \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n//\n//      solrStream = new SolrStream(jetty.url, sParams);\n//      tuples = getTuples(solrStream);\n//\n//      assertEquals(7, tuples.size());\n//\n//      tuple = tuples.get(0);\n//      assertEquals(2L, tuple.get(\"id\"));\n//      tuple = tuples.get(1);\n//      assertEquals(3L, tuple.get(\"id\"));\n//      tuple = tuples.get(2);\n//      assertEquals(4L, tuple.get(\"id\"));\n//      tuple = tuples.get(3);\n//      assertEquals(5L, tuple.get(\"id\"));\n//      tuple = tuples.get(4);\n//      assertEquals(6L, tuple.get(\"id\"));\n//      tuple = tuples.get(5);\n//      assertEquals(7L, tuple.get(\"id\"));\n//      tuple = tuples.get(6);\n//      assertEquals(8L, tuple.get(\"id\"));\n\n      // Less than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(\"1\", tuple.get(\"id\"));\n\n      // Less than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(\"1\", tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(\"2\", tuple.get(\"id\"));\n\n      // Greater than\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(1, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(\"8\", tuple.get(\"id\"));\n\n      // Greater than equal\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assertEquals(2, tuples.size());\n\n      tuple = tuples.get(0);\n      assertEquals(\"7\", tuple.get(\"id\"));\n      tuple = tuples.get(1);\n      assertEquals(\"8\", tuple.get(\"id\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"600937be95b5a041815220371fa7882e73031d56","date":1551734162,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","sourceNew":"  private void testWhere() throws Exception {\n\n    del(\"*:*\");\n\n    commit();\n\n    indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n    indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n    indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n    indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n    indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n    indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n    indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n    indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n    commit();\n\n    // Equals\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n    List<Tuple> tuples = getTuples(sParams);\n\n    assertEquals(1, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Not Equals <>\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n    tuples = getTuples(sParams);\n\n    assertEquals(7, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"2\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"3\", tuple.get(\"id\"));\n    tuple = tuples.get(2);\n    assertEquals(\"4\", tuple.get(\"id\"));\n    tuple = tuples.get(3);\n    assertEquals(\"5\", tuple.get(\"id\"));\n    tuple = tuples.get(4);\n    assertEquals(\"6\", tuple.get(\"id\"));\n    tuple = tuples.get(5);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(6);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // TODO requires different Calcite SQL conformance level\n    // Not Equals !=\n    // sParams = mapParams(CommonParams.QT, \"/sql\",\n    // \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n    //\n    // tuples = getTuples(sParams);\n    //\n    // assertEquals(7, tuples.size());\n    //\n    // tuple = tuples.get(0);\n    // assertEquals(2L, tuple.get(\"id\"));\n    // tuple = tuples.get(1);\n    // assertEquals(3L, tuple.get(\"id\"));\n    // tuple = tuples.get(2);\n    // assertEquals(4L, tuple.get(\"id\"));\n    // tuple = tuples.get(3);\n    // assertEquals(5L, tuple.get(\"id\"));\n    // tuple = tuples.get(4);\n    // assertEquals(6L, tuple.get(\"id\"));\n    // tuple = tuples.get(5);\n    // assertEquals(7L, tuple.get(\"id\"));\n    // tuple = tuples.get(6);\n    // assertEquals(8L, tuple.get(\"id\"));\n\n    // Less than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n    tuples = getTuples(sParams);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Less than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n    tuples = getTuples(sParams);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"2\", tuple.get(\"id\"));\n\n    // Greater than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n    tuples = getTuples(sParams);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // Greater than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n    tuples = getTuples(sParams);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n  }\n\n","sourceOld":"  private void testWhere() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n    indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n    indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n    indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n    indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n    indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n    indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n    indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n    commit();\n\n    // Equals\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assertEquals(1, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Not Equals <>\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assertEquals(7, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"2\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"3\", tuple.get(\"id\"));\n    tuple = tuples.get(2);\n    assertEquals(\"4\", tuple.get(\"id\"));\n    tuple = tuples.get(3);\n    assertEquals(\"5\", tuple.get(\"id\"));\n    tuple = tuples.get(4);\n    assertEquals(\"6\", tuple.get(\"id\"));\n    tuple = tuples.get(5);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(6);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // TODO requires different Calcite SQL conformance level\n    // Not Equals !=\n    // sParams = mapParams(CommonParams.QT, \"/sql\",\n    // \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n    //\n    // solrStream = new SolrStream(jetty.url, sParams);\n    // tuples = getTuples(solrStream);\n    //\n    // assertEquals(7, tuples.size());\n    //\n    // tuple = tuples.get(0);\n    // assertEquals(2L, tuple.get(\"id\"));\n    // tuple = tuples.get(1);\n    // assertEquals(3L, tuple.get(\"id\"));\n    // tuple = tuples.get(2);\n    // assertEquals(4L, tuple.get(\"id\"));\n    // tuple = tuples.get(3);\n    // assertEquals(5L, tuple.get(\"id\"));\n    // tuple = tuples.get(4);\n    // assertEquals(6L, tuple.get(\"id\"));\n    // tuple = tuples.get(5);\n    // assertEquals(7L, tuple.get(\"id\"));\n    // tuple = tuples.get(6);\n    // assertEquals(8L, tuple.get(\"id\"));\n\n    // Less than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Less than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"2\", tuple.get(\"id\"));\n\n    // Greater than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // Greater than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22191e72f6c40dec88c9b94f9bb55c7527772a47","date":1553715407,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testWhere().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","sourceNew":"  @Test\n  public void testWhere() throws Exception {\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    // Equals\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(1, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Not Equals <>\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n    tuples = getTuples(sParams,baseUrl);\n\n    assertEquals(7, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"2\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"3\", tuple.get(\"id\"));\n    tuple = tuples.get(2);\n    assertEquals(\"4\", tuple.get(\"id\"));\n    tuple = tuples.get(3);\n    assertEquals(\"5\", tuple.get(\"id\"));\n    tuple = tuples.get(4);\n    assertEquals(\"6\", tuple.get(\"id\"));\n    tuple = tuples.get(5);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(6);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // TODO requires different Calcite SQL conformance level\n    // Not Equals !=\n    // sParams = mapParams(CommonParams.QT, \"/sql\",\n    // \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n    //\n    // tuples = getTuples(sParams);\n    //\n    // assertEquals(7, tuples.size());\n    //\n    // tuple = tuples.get(0);\n    // assertEquals(2L, tuple.get(\"id\"));\n    // tuple = tuples.get(1);\n    // assertEquals(3L, tuple.get(\"id\"));\n    // tuple = tuples.get(2);\n    // assertEquals(4L, tuple.get(\"id\"));\n    // tuple = tuples.get(3);\n    // assertEquals(5L, tuple.get(\"id\"));\n    // tuple = tuples.get(4);\n    // assertEquals(6L, tuple.get(\"id\"));\n    // tuple = tuples.get(5);\n    // assertEquals(7L, tuple.get(\"id\"));\n    // tuple = tuples.get(6);\n    // assertEquals(8L, tuple.get(\"id\"));\n\n    // Less than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Less than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"2\", tuple.get(\"id\"));\n\n    // Greater than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // Greater than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n  }\n\n","sourceOld":"  private void testWhere() throws Exception {\n\n    del(\"*:*\");\n\n    commit();\n\n    indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n    indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n    indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n    indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n    indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n    indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n    indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n    indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n    commit();\n\n    // Equals\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n    List<Tuple> tuples = getTuples(sParams);\n\n    assertEquals(1, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Not Equals <>\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n    tuples = getTuples(sParams);\n\n    assertEquals(7, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"2\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"3\", tuple.get(\"id\"));\n    tuple = tuples.get(2);\n    assertEquals(\"4\", tuple.get(\"id\"));\n    tuple = tuples.get(3);\n    assertEquals(\"5\", tuple.get(\"id\"));\n    tuple = tuples.get(4);\n    assertEquals(\"6\", tuple.get(\"id\"));\n    tuple = tuples.get(5);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(6);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // TODO requires different Calcite SQL conformance level\n    // Not Equals !=\n    // sParams = mapParams(CommonParams.QT, \"/sql\",\n    // \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n    //\n    // tuples = getTuples(sParams);\n    //\n    // assertEquals(7, tuples.size());\n    //\n    // tuple = tuples.get(0);\n    // assertEquals(2L, tuple.get(\"id\"));\n    // tuple = tuples.get(1);\n    // assertEquals(3L, tuple.get(\"id\"));\n    // tuple = tuples.get(2);\n    // assertEquals(4L, tuple.get(\"id\"));\n    // tuple = tuples.get(3);\n    // assertEquals(5L, tuple.get(\"id\"));\n    // tuple = tuples.get(4);\n    // assertEquals(6L, tuple.get(\"id\"));\n    // tuple = tuples.get(5);\n    // assertEquals(7L, tuple.get(\"id\"));\n    // tuple = tuples.get(6);\n    // assertEquals(8L, tuple.get(\"id\"));\n\n    // Less than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n    tuples = getTuples(sParams);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Less than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n    tuples = getTuples(sParams);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"2\", tuple.get(\"id\"));\n\n    // Greater than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n    tuples = getTuples(sParams);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // Greater than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n    tuples = getTuples(sParams);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94e31112925a65b1d36f9064772080e25b5ef373","date":1553715407,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testWhere().mjava","sourceNew":"  @Test\n  public void testWhere() throws Exception {\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    // Equals\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(1, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Not Equals <>\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n    tuples = getTuples(sParams,baseUrl);\n\n    assertEquals(7, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"2\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"3\", tuple.get(\"id\"));\n    tuple = tuples.get(2);\n    assertEquals(\"4\", tuple.get(\"id\"));\n    tuple = tuples.get(3);\n    assertEquals(\"5\", tuple.get(\"id\"));\n    tuple = tuples.get(4);\n    assertEquals(\"6\", tuple.get(\"id\"));\n    tuple = tuples.get(5);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(6);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // TODO requires different Calcite SQL conformance level\n    // Not Equals !=\n    // sParams = mapParams(CommonParams.QT, \"/sql\",\n    // \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n    //\n    // tuples = getTuples(sParams);\n    //\n    // assertEquals(7, tuples.size());\n    //\n    // tuple = tuples.get(0);\n    // assertEquals(2L, tuple.get(\"id\"));\n    // tuple = tuples.get(1);\n    // assertEquals(3L, tuple.get(\"id\"));\n    // tuple = tuples.get(2);\n    // assertEquals(4L, tuple.get(\"id\"));\n    // tuple = tuples.get(3);\n    // assertEquals(5L, tuple.get(\"id\"));\n    // tuple = tuples.get(4);\n    // assertEquals(6L, tuple.get(\"id\"));\n    // tuple = tuples.get(5);\n    // assertEquals(7L, tuple.get(\"id\"));\n    // tuple = tuples.get(6);\n    // assertEquals(8L, tuple.get(\"id\"));\n\n    // Less than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Less than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"2\", tuple.get(\"id\"));\n\n    // Greater than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // Greater than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testWhere() throws Exception {\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    // Equals\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(1, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Not Equals <>\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n    tuples = getTuples(sParams,baseUrl);\n\n    assertEquals(7, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"2\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"3\", tuple.get(\"id\"));\n    tuple = tuples.get(2);\n    assertEquals(\"4\", tuple.get(\"id\"));\n    tuple = tuples.get(3);\n    assertEquals(\"5\", tuple.get(\"id\"));\n    tuple = tuples.get(4);\n    assertEquals(\"6\", tuple.get(\"id\"));\n    tuple = tuples.get(5);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(6);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // TODO requires different Calcite SQL conformance level\n    // Not Equals !=\n    // sParams = mapParams(CommonParams.QT, \"/sql\",\n    // \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n    //\n    // tuples = getTuples(sParams);\n    //\n    // assertEquals(7, tuples.size());\n    //\n    // tuple = tuples.get(0);\n    // assertEquals(2L, tuple.get(\"id\"));\n    // tuple = tuples.get(1);\n    // assertEquals(3L, tuple.get(\"id\"));\n    // tuple = tuples.get(2);\n    // assertEquals(4L, tuple.get(\"id\"));\n    // tuple = tuples.get(3);\n    // assertEquals(5L, tuple.get(\"id\"));\n    // tuple = tuples.get(4);\n    // assertEquals(6L, tuple.get(\"id\"));\n    // tuple = tuples.get(5);\n    // assertEquals(7L, tuple.get(\"id\"));\n    // tuple = tuples.get(6);\n    // assertEquals(8L, tuple.get(\"id\"));\n\n    // Less than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Less than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"2\", tuple.get(\"id\"));\n\n    // Greater than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // Greater than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["600937be95b5a041815220371fa7882e73031d56"],"612da0a0a2d5f4409da55729b9833e799f905ac5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"77ace774184b7fdbf04c66d1e206b8ff368dfb6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","77ace774184b7fdbf04c66d1e206b8ff368dfb6c"],"28288370235ed02234a64753cdbf0c6ec096304a":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","a71f63026529f3c1f03cfdd664910873ab2369ae"],"600937be95b5a041815220371fa7882e73031d56":["c58a62203315881cce5089ef67ffee6b8a988a75"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["77ace774184b7fdbf04c66d1e206b8ff368dfb6c","612da0a0a2d5f4409da55729b9833e799f905ac5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c58a62203315881cce5089ef67ffee6b8a988a75":["28288370235ed02234a64753cdbf0c6ec096304a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["94e31112925a65b1d36f9064772080e25b5ef373"],"94e31112925a65b1d36f9064772080e25b5ef373":["22191e72f6c40dec88c9b94f9bb55c7527772a47"]},"commit2Childs":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["94e31112925a65b1d36f9064772080e25b5ef373"],"612da0a0a2d5f4409da55729b9833e799f905ac5":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["612da0a0a2d5f4409da55729b9833e799f905ac5"],"77ace774184b7fdbf04c66d1e206b8ff368dfb6c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"28288370235ed02234a64753cdbf0c6ec096304a":["c58a62203315881cce5089ef67ffee6b8a988a75"],"600937be95b5a041815220371fa7882e73031d56":["22191e72f6c40dec88c9b94f9bb55c7527772a47"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77ace774184b7fdbf04c66d1e206b8ff368dfb6c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c58a62203315881cce5089ef67ffee6b8a988a75":["600937be95b5a041815220371fa7882e73031d56"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"94e31112925a65b1d36f9064772080e25b5ef373":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}