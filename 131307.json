{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#doInc(SolrInputDocument,IndexSchema,SolrInputField,Object).mjava","commits":[{"id":"3aa8a7a6dfbdba53bcf332c8a2154c3426a932d7","date":1397774798,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#doInc(SolrInputDocument,IndexSchema,SolrInputField,Object).mjava","pathOld":"/dev/null","sourceNew":"  private void doInc(SolrInputDocument oldDoc, IndexSchema schema, SolrInputField sif, Object fieldVal) {\n    SolrInputField numericField = oldDoc.get(sif.getName());\n    if (numericField == null) {\n      oldDoc.setField(sif.getName(),  fieldVal, sif.getBoost());\n    } else {\n      // TODO: fieldtype needs externalToObject?\n      String oldValS = numericField.getFirstValue().toString();\n      SchemaField sf = schema.getField(sif.getName());\n      BytesRef term = new BytesRef();\n      sf.getType().readableToIndexed(oldValS, term);\n      Object oldVal = sf.getType().toObject(sf, term);\n\n      String fieldValS = fieldVal.toString();\n      Number result;\n      if (oldVal instanceof Long) {\n        result = ((Long) oldVal).longValue() + Long.parseLong(fieldValS);\n      } else if (oldVal instanceof Float) {\n        result = ((Float) oldVal).floatValue() + Float.parseFloat(fieldValS);\n      } else if (oldVal instanceof Double) {\n        result = ((Double) oldVal).doubleValue() + Double.parseDouble(fieldValS);\n      } else {\n        // int, short, byte\n        result = ((Integer) oldVal).intValue() + Integer.parseInt(fieldValS);\n      }\n\n      oldDoc.setField(sif.getName(),  result, sif.getBoost());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","98d250aa216a7b207d8015ed03e2f115f6bcb596"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#doInc(SolrInputDocument,IndexSchema,SolrInputField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#doInc(SolrInputDocument,IndexSchema,SolrInputField,Object).mjava","sourceNew":"  private void doInc(SolrInputDocument oldDoc, IndexSchema schema, SolrInputField sif, Object fieldVal) {\n    SolrInputField numericField = oldDoc.get(sif.getName());\n    if (numericField == null) {\n      oldDoc.setField(sif.getName(),  fieldVal, sif.getBoost());\n    } else {\n      // TODO: fieldtype needs externalToObject?\n      String oldValS = numericField.getFirstValue().toString();\n      SchemaField sf = schema.getField(sif.getName());\n      BytesRefBuilder term = new BytesRefBuilder();\n      sf.getType().readableToIndexed(oldValS, term);\n      Object oldVal = sf.getType().toObject(sf, term.get());\n\n      String fieldValS = fieldVal.toString();\n      Number result;\n      if (oldVal instanceof Long) {\n        result = ((Long) oldVal).longValue() + Long.parseLong(fieldValS);\n      } else if (oldVal instanceof Float) {\n        result = ((Float) oldVal).floatValue() + Float.parseFloat(fieldValS);\n      } else if (oldVal instanceof Double) {\n        result = ((Double) oldVal).doubleValue() + Double.parseDouble(fieldValS);\n      } else {\n        // int, short, byte\n        result = ((Integer) oldVal).intValue() + Integer.parseInt(fieldValS);\n      }\n\n      oldDoc.setField(sif.getName(),  result, sif.getBoost());\n    }\n  }\n\n","sourceOld":"  private void doInc(SolrInputDocument oldDoc, IndexSchema schema, SolrInputField sif, Object fieldVal) {\n    SolrInputField numericField = oldDoc.get(sif.getName());\n    if (numericField == null) {\n      oldDoc.setField(sif.getName(),  fieldVal, sif.getBoost());\n    } else {\n      // TODO: fieldtype needs externalToObject?\n      String oldValS = numericField.getFirstValue().toString();\n      SchemaField sf = schema.getField(sif.getName());\n      BytesRef term = new BytesRef();\n      sf.getType().readableToIndexed(oldValS, term);\n      Object oldVal = sf.getType().toObject(sf, term);\n\n      String fieldValS = fieldVal.toString();\n      Number result;\n      if (oldVal instanceof Long) {\n        result = ((Long) oldVal).longValue() + Long.parseLong(fieldValS);\n      } else if (oldVal instanceof Float) {\n        result = ((Float) oldVal).floatValue() + Float.parseFloat(fieldValS);\n      } else if (oldVal instanceof Double) {\n        result = ((Double) oldVal).doubleValue() + Double.parseDouble(fieldValS);\n      } else {\n        // int, short, byte\n        result = ((Integer) oldVal).intValue() + Integer.parseInt(fieldValS);\n      }\n\n      oldDoc.setField(sif.getName(),  result, sif.getBoost());\n    }\n  }\n\n","bugFix":["3aa8a7a6dfbdba53bcf332c8a2154c3426a932d7"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2d3b450958a83a29a16e492fbff9d094a9a571b6","date":1421525067,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger#doInc(SolrInputDocument,SolrInputField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#doInc(SolrInputDocument,IndexSchema,SolrInputField,Object).mjava","sourceNew":"  protected void doInc(SolrInputDocument toDoc, SolrInputField sif, Object fieldVal) {\n    SolrInputField numericField = toDoc.get(sif.getName());\n    if (numericField == null) {\n      toDoc.setField(sif.getName(),  fieldVal, sif.getBoost());\n    } else {\n      // TODO: fieldtype needs externalToObject?\n      String oldValS = numericField.getFirstValue().toString();\n      SchemaField sf = schema.getField(sif.getName());\n      BytesRefBuilder term = new BytesRefBuilder();\n      sf.getType().readableToIndexed(oldValS, term);\n      Object oldVal = sf.getType().toObject(sf, term.get());\n\n      String fieldValS = fieldVal.toString();\n      Number result;\n      if (oldVal instanceof Long) {\n        result = ((Long) oldVal).longValue() + Long.parseLong(fieldValS);\n      } else if (oldVal instanceof Float) {\n        result = ((Float) oldVal).floatValue() + Float.parseFloat(fieldValS);\n      } else if (oldVal instanceof Double) {\n        result = ((Double) oldVal).doubleValue() + Double.parseDouble(fieldValS);\n      } else {\n        // int, short, byte\n        result = ((Integer) oldVal).intValue() + Integer.parseInt(fieldValS);\n      }\n\n      toDoc.setField(sif.getName(),  result, sif.getBoost());\n    }\n  }\n\n","sourceOld":"  private void doInc(SolrInputDocument oldDoc, IndexSchema schema, SolrInputField sif, Object fieldVal) {\n    SolrInputField numericField = oldDoc.get(sif.getName());\n    if (numericField == null) {\n      oldDoc.setField(sif.getName(),  fieldVal, sif.getBoost());\n    } else {\n      // TODO: fieldtype needs externalToObject?\n      String oldValS = numericField.getFirstValue().toString();\n      SchemaField sf = schema.getField(sif.getName());\n      BytesRefBuilder term = new BytesRefBuilder();\n      sf.getType().readableToIndexed(oldValS, term);\n      Object oldVal = sf.getType().toObject(sf, term.get());\n\n      String fieldValS = fieldVal.toString();\n      Number result;\n      if (oldVal instanceof Long) {\n        result = ((Long) oldVal).longValue() + Long.parseLong(fieldValS);\n      } else if (oldVal instanceof Float) {\n        result = ((Float) oldVal).floatValue() + Float.parseFloat(fieldValS);\n      } else if (oldVal instanceof Double) {\n        result = ((Double) oldVal).doubleValue() + Double.parseDouble(fieldValS);\n      } else {\n        // int, short, byte\n        result = ((Integer) oldVal).intValue() + Integer.parseInt(fieldValS);\n      }\n\n      oldDoc.setField(sif.getName(),  result, sif.getBoost());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["3aa8a7a6dfbdba53bcf332c8a2154c3426a932d7"],"2d3b450958a83a29a16e492fbff9d094a9a571b6":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d3b450958a83a29a16e492fbff9d094a9a571b6"],"3aa8a7a6dfbdba53bcf332c8a2154c3426a932d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3aa8a7a6dfbdba53bcf332c8a2154c3426a932d7"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["2d3b450958a83a29a16e492fbff9d094a9a571b6"],"2d3b450958a83a29a16e492fbff9d094a9a571b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3aa8a7a6dfbdba53bcf332c8a2154c3426a932d7":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}