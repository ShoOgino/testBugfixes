{"path":"solr/core/src/java/org/apache/solr/analytics/util/RangeEndpointCalculator#create(RangeFacetRequest).mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/util/RangeEndpointCalculator#create(RangeFacetRequest).mjava","pathOld":"/dev/null","sourceNew":"  public static RangeEndpointCalculator<? extends Comparable<?>> create(RangeFacetRequest request){\n    final SchemaField sf = request.getField();\n    final FieldType ft = sf.getType();\n    final RangeEndpointCalculator<?> calc;\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(request);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(request);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(request);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(request);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on tried field of unexpected type:\" + sf.getName());\n      }\n    } else if (ft instanceof DateField) {\n      calc = new DateRangeEndpointCalculator(request, null);\n    } else {\n      throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on field:\" + sf);\n    } \n    return calc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/util/RangeEndpointCalculator#create(RangeFacetRequest).mjava","pathOld":"/dev/null","sourceNew":"  public static RangeEndpointCalculator<? extends Comparable<?>> create(RangeFacetRequest request){\n    final SchemaField sf = request.getField();\n    final FieldType ft = sf.getType();\n    final RangeEndpointCalculator<?> calc;\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(request);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(request);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(request);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(request);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on tried field of unexpected type:\" + sf.getName());\n      }\n    } else if (ft instanceof DateField) {\n      calc = new DateRangeEndpointCalculator(request, null);\n    } else {\n      throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on field:\" + sf);\n    } \n    return calc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/util/RangeEndpointCalculator#create(RangeFacetRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/util/RangeEndpointCalculator#create(RangeFacetRequest).mjava","sourceNew":"  public static RangeEndpointCalculator<? extends Comparable<?>> create(RangeFacetRequest request){\n    final SchemaField sf = request.getField();\n    final FieldType ft = sf.getType();\n    final RangeEndpointCalculator<?> calc;\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(request);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(request);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(request);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(request);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on tried field of unexpected type:\" + sf.getName());\n      }\n    } else if (ft instanceof TrieDateField) {\n      calc = new DateRangeEndpointCalculator(request, null);\n    } else {\n      throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on field:\" + sf);\n    } \n    return calc;\n  }\n\n","sourceOld":"  public static RangeEndpointCalculator<? extends Comparable<?>> create(RangeFacetRequest request){\n    final SchemaField sf = request.getField();\n    final FieldType ft = sf.getType();\n    final RangeEndpointCalculator<?> calc;\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(request);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(request);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(request);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(request);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on tried field of unexpected type:\" + sf.getName());\n      }\n    } else if (ft instanceof DateField) {\n      calc = new DateRangeEndpointCalculator(request, null);\n    } else {\n      throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on field:\" + sf);\n    } \n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed2fa62657d92ccc3a506b15445420de3d094fcb","date":1404143214,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/util/RangeEndpointCalculator#create(RangeFacetRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/util/RangeEndpointCalculator#create(RangeFacetRequest).mjava","sourceNew":"  public static RangeEndpointCalculator<? extends Comparable<?>> create(RangeFacetRequest request){\n    final SchemaField sf = request.getField();\n    final FieldType ft = sf.getType();\n    final RangeEndpointCalculator<?> calc;\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(request);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(request);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(request);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(request);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(request, null);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on tried field of unexpected type:\" + sf.getName());\n      }\n    } else {\n      throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on field:\" + sf);\n    } \n    return calc;\n  }\n\n","sourceOld":"  public static RangeEndpointCalculator<? extends Comparable<?>> create(RangeFacetRequest request){\n    final SchemaField sf = request.getField();\n    final FieldType ft = sf.getType();\n    final RangeEndpointCalculator<?> calc;\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(request);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(request);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(request);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(request);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on tried field of unexpected type:\" + sf.getName());\n      }\n    } else if (ft instanceof TrieDateField) {\n      calc = new DateRangeEndpointCalculator(request, null);\n    } else {\n      throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on field:\" + sf);\n    } \n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/RangeEndpointCalculator#create(RangeFacetRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/util/RangeEndpointCalculator#create(RangeFacetRequest).mjava","sourceNew":"  public static RangeEndpointCalculator<? extends Comparable<?>> create(RangeFacetRequest request){\n    final SchemaField sf = request.getField();\n    final FieldType ft = sf.getType();\n    final RangeEndpointCalculator<?> calc;\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(request);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(request);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(request);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(request);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(request, null);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on tried field of unexpected type:\" + sf.getName());\n      }\n    } else {\n      throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on field:\" + sf);\n    } \n    return calc;\n  }\n\n","sourceOld":"  public static RangeEndpointCalculator<? extends Comparable<?>> create(RangeFacetRequest request){\n    final SchemaField sf = request.getField();\n    final FieldType ft = sf.getType();\n    final RangeEndpointCalculator<?> calc;\n    if (ft instanceof TrieField) {\n      final TrieField trie = (TrieField)ft;\n      switch (trie.getType()) {\n        case FLOAT:\n          calc = new FloatRangeEndpointCalculator(request);\n          break;\n        case DOUBLE:\n          calc = new DoubleRangeEndpointCalculator(request);\n          break;\n        case INTEGER:\n          calc = new IntegerRangeEndpointCalculator(request);\n          break;\n        case LONG:\n          calc = new LongRangeEndpointCalculator(request);\n          break;\n        case DATE:\n          calc = new DateRangeEndpointCalculator(request, null);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on tried field of unexpected type:\" + sf.getName());\n      }\n    } else {\n      throw new SolrException (SolrException.ErrorCode.BAD_REQUEST, \"Unable to range facet on field:\" + sf);\n    } \n    return calc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2106271e380c198349e0f6eac0395bb462913fab":["ff403346522eaa9de75403763e297e83a3ea585c"],"ed2fa62657d92ccc3a506b15445420de3d094fcb":["2106271e380c198349e0f6eac0395bb462913fab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["ed2fa62657d92ccc3a506b15445420de3d094fcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"2106271e380c198349e0f6eac0395bb462913fab":["ed2fa62657d92ccc3a506b15445420de3d094fcb"],"ed2fa62657d92ccc3a506b15445420de3d094fcb":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["2106271e380c198349e0f6eac0395bb462913fab","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}