{"path":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory,boolean).mjava","commits":[{"id":"41d1f005dec73d25cc13cc4521293ad84117d896","date":1082485675,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private RAMDirectory(Directory dir, boolean closeDir) throws IOException {\n    final String[] files = dir.list();\n    for (int i = 0; i < files.length; i++) {\n      // make place on ram disk\n      OutputStream os = createFile(files[i]);\n      // read current file\n      InputStream is = dir.openFile(files[i]);\n      // and copy to ram disk\n      int len = (int) is.length();\n      byte[] buf = new byte[len];\n      is.readBytes(buf, 0, len);\n      os.writeBytes(buf, len);\n      // graceful cleanup\n      is.close();\n      os.close();\n    }\n    if(closeDir)\n      dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77f2eb0d13b43db148a5e4f61c166fa3688a2df9","date":1096404326,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory,boolean).mjava","sourceNew":"  private RAMDirectory(Directory dir, boolean closeDir) throws IOException {\n    final String[] files = dir.list();\n    for (int i = 0; i < files.length; i++) {\n      // make place on ram disk\n      IndexOutput os = createOutput(files[i]);\n      // read current file\n      IndexInput is = dir.openInput(files[i]);\n      // and copy to ram disk\n      int len = (int) is.length();\n      byte[] buf = new byte[len];\n      is.readBytes(buf, 0, len);\n      os.writeBytes(buf, len);\n      // graceful cleanup\n      is.close();\n      os.close();\n    }\n    if(closeDir)\n      dir.close();\n  }\n\n","sourceOld":"  private RAMDirectory(Directory dir, boolean closeDir) throws IOException {\n    final String[] files = dir.list();\n    for (int i = 0; i < files.length; i++) {\n      // make place on ram disk\n      OutputStream os = createFile(files[i]);\n      // read current file\n      InputStream is = dir.openFile(files[i]);\n      // and copy to ram disk\n      int len = (int) is.length();\n      byte[] buf = new byte[len];\n      is.readBytes(buf, 0, len);\n      os.writeBytes(buf, len);\n      // graceful cleanup\n      is.close();\n      os.close();\n    }\n    if(closeDir)\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48e35f0f30d1cd4ef5998fff62b1b35a655c1fe2","date":1133545070,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory,boolean).mjava","sourceNew":"  private RAMDirectory(Directory dir, boolean closeDir) throws IOException {\n    final String[] files = dir.list();\n    byte[] buf = new byte[BufferedIndexOutput.BUFFER_SIZE];\n    for (int i = 0; i < files.length; i++) {\n      // make place on ram disk\n      IndexOutput os = createOutput(files[i]);\n      // read current file\n      IndexInput is = dir.openInput(files[i]);\n      // and copy to ram disk\n      int len = (int) is.length();\n      int readCount = 0;\n      while (readCount < len) {\n        int toRead = readCount + BufferedIndexOutput.BUFFER_SIZE > len ? len - readCount : BufferedIndexOutput.BUFFER_SIZE;\n        is.readBytes(buf, 0, toRead);\n        os.writeBytes(buf, toRead);\n        readCount += toRead;\n      }\n\n      // graceful cleanup\n      is.close();\n      os.close();\n    }\n    if(closeDir)\n      dir.close();\n  }\n\n","sourceOld":"  private RAMDirectory(Directory dir, boolean closeDir) throws IOException {\n    final String[] files = dir.list();\n    for (int i = 0; i < files.length; i++) {\n      // make place on ram disk\n      IndexOutput os = createOutput(files[i]);\n      // read current file\n      IndexInput is = dir.openInput(files[i]);\n      // and copy to ram disk\n      int len = (int) is.length();\n      byte[] buf = new byte[len];\n      is.readBytes(buf, 0, len);\n      os.writeBytes(buf, len);\n      // graceful cleanup\n      is.close();\n      os.close();\n    }\n    if(closeDir)\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b1c3d8dafbfc33595a54e2b90ef8aac48de447f","date":1148173302,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory,boolean).mjava","sourceNew":"  private RAMDirectory(Directory dir, boolean closeDir) throws IOException {\n    final String[] files = dir.list();\n    byte[] buf = new byte[BufferedIndexOutput.BUFFER_SIZE];\n    for (int i = 0; i < files.length; i++) {\n      // make place on ram disk\n      IndexOutput os = createOutput(files[i]);\n      // read current file\n      IndexInput is = dir.openInput(files[i]);\n      // and copy to ram disk\n      long len = is.length();\n      long readCount = 0;\n      while (readCount < len) {\n        int toRead = readCount + BufferedIndexOutput.BUFFER_SIZE > len ? (int)(len - readCount) : BufferedIndexOutput.BUFFER_SIZE;\n        is.readBytes(buf, 0, toRead);\n        os.writeBytes(buf, toRead);\n        readCount += toRead;\n      }\n\n      // graceful cleanup\n      is.close();\n      os.close();\n    }\n    if(closeDir)\n      dir.close();\n  }\n\n","sourceOld":"  private RAMDirectory(Directory dir, boolean closeDir) throws IOException {\n    final String[] files = dir.list();\n    byte[] buf = new byte[BufferedIndexOutput.BUFFER_SIZE];\n    for (int i = 0; i < files.length; i++) {\n      // make place on ram disk\n      IndexOutput os = createOutput(files[i]);\n      // read current file\n      IndexInput is = dir.openInput(files[i]);\n      // and copy to ram disk\n      int len = (int) is.length();\n      int readCount = 0;\n      while (readCount < len) {\n        int toRead = readCount + BufferedIndexOutput.BUFFER_SIZE > len ? len - readCount : BufferedIndexOutput.BUFFER_SIZE;\n        is.readBytes(buf, 0, toRead);\n        os.writeBytes(buf, toRead);\n        readCount += toRead;\n      }\n\n      // graceful cleanup\n      is.close();\n      os.close();\n    }\n    if(closeDir)\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c6bd70b660528bcf8dd3216ea1f7565ac220a20","date":1156813990,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory,boolean).mjava","sourceNew":"  private RAMDirectory(Directory dir, boolean closeDir) throws IOException {\n    this();\n    final String[] files = dir.list();\n    byte[] buf = new byte[BufferedIndexOutput.BUFFER_SIZE];\n    for (int i = 0; i < files.length; i++) {\n      // make place on ram disk\n      IndexOutput os = createOutput(files[i]);\n      // read current file\n      IndexInput is = dir.openInput(files[i]);\n      // and copy to ram disk\n      long len = is.length();\n      long readCount = 0;\n      while (readCount < len) {\n        int toRead = readCount + BufferedIndexOutput.BUFFER_SIZE > len ? (int)(len - readCount) : BufferedIndexOutput.BUFFER_SIZE;\n        is.readBytes(buf, 0, toRead);\n        os.writeBytes(buf, toRead);\n        readCount += toRead;\n      }\n\n      // graceful cleanup\n      is.close();\n      os.close();\n    }\n    if(closeDir)\n      dir.close();\n  }\n\n","sourceOld":"  private RAMDirectory(Directory dir, boolean closeDir) throws IOException {\n    final String[] files = dir.list();\n    byte[] buf = new byte[BufferedIndexOutput.BUFFER_SIZE];\n    for (int i = 0; i < files.length; i++) {\n      // make place on ram disk\n      IndexOutput os = createOutput(files[i]);\n      // read current file\n      IndexInput is = dir.openInput(files[i]);\n      // and copy to ram disk\n      long len = is.length();\n      long readCount = 0;\n      while (readCount < len) {\n        int toRead = readCount + BufferedIndexOutput.BUFFER_SIZE > len ? (int)(len - readCount) : BufferedIndexOutput.BUFFER_SIZE;\n        is.readBytes(buf, 0, toRead);\n        os.writeBytes(buf, toRead);\n        readCount += toRead;\n      }\n\n      // graceful cleanup\n      is.close();\n      os.close();\n    }\n    if(closeDir)\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab147aab4a4eee8b80a4bee48643bdf7b8b8ef3b","date":1169493716,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory,boolean).mjava","sourceNew":"  private RAMDirectory(Directory dir, boolean closeDir) throws IOException {\n    this();\n    Directory.copy(dir, this, closeDir);\n  }\n\n","sourceOld":"  private RAMDirectory(Directory dir, boolean closeDir) throws IOException {\n    this();\n    final String[] files = dir.list();\n    byte[] buf = new byte[BufferedIndexOutput.BUFFER_SIZE];\n    for (int i = 0; i < files.length; i++) {\n      // make place on ram disk\n      IndexOutput os = createOutput(files[i]);\n      // read current file\n      IndexInput is = dir.openInput(files[i]);\n      // and copy to ram disk\n      long len = is.length();\n      long readCount = 0;\n      while (readCount < len) {\n        int toRead = readCount + BufferedIndexOutput.BUFFER_SIZE > len ? (int)(len - readCount) : BufferedIndexOutput.BUFFER_SIZE;\n        is.readBytes(buf, 0, toRead);\n        os.writeBytes(buf, toRead);\n        readCount += toRead;\n      }\n\n      // graceful cleanup\n      is.close();\n      os.close();\n    }\n    if(closeDir)\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory,boolean).mjava","sourceNew":"  private RAMDirectory(Directory dir, boolean closeDir) throws IOException {\n    this();\n    Directory.copy(dir, this, closeDir);\n  }\n\n","sourceOld":"  private RAMDirectory(Directory dir, boolean closeDir) throws IOException {\n    this();\n    Directory.copy(dir, this, closeDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["8b1c3d8dafbfc33595a54e2b90ef8aac48de447f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b1c3d8dafbfc33595a54e2b90ef8aac48de447f":["48e35f0f30d1cd4ef5998fff62b1b35a655c1fe2"],"ab147aab4a4eee8b80a4bee48643bdf7b8b8ef3b":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"77f2eb0d13b43db148a5e4f61c166fa3688a2df9":["41d1f005dec73d25cc13cc4521293ad84117d896"],"48e35f0f30d1cd4ef5998fff62b1b35a655c1fe2":["77f2eb0d13b43db148a5e4f61c166fa3688a2df9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab147aab4a4eee8b80a4bee48643bdf7b8b8ef3b"],"41d1f005dec73d25cc13cc4521293ad84117d896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["ab147aab4a4eee8b80a4bee48643bdf7b8b8ef3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["41d1f005dec73d25cc13cc4521293ad84117d896"],"8b1c3d8dafbfc33595a54e2b90ef8aac48de447f":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"ab147aab4a4eee8b80a4bee48643bdf7b8b8ef3b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"77f2eb0d13b43db148a5e4f61c166fa3688a2df9":["48e35f0f30d1cd4ef5998fff62b1b35a655c1fe2"],"48e35f0f30d1cd4ef5998fff62b1b35a655c1fe2":["8b1c3d8dafbfc33595a54e2b90ef8aac48de447f"],"41d1f005dec73d25cc13cc4521293ad84117d896":["77f2eb0d13b43db148a5e4f61c166fa3688a2df9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}