{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#parseRangeFromString(String,String).mjava","commits":[{"id":"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45","date":1569046571,"type":0,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#parseRangeFromString(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses the given string and returns Range.\n   * This is adopted from {@link org.apache.solr.request.IntervalFacets}\n   *\n   * @param key The name of range which would be used as {@link Range}'s label\n   * @param rangeStr The string containing the Range\n   * @return {@link Range}\n   */\n  private Range parseRangeFromString(String key, String rangeStr) throws SyntaxError {\n    rangeStr = rangeStr.trim();\n    if (rangeStr.isEmpty()) {\n      throw new SyntaxError(\"empty facet range\");\n    }\n\n    boolean includeLower = true, includeUpper = true;\n    Comparable start = null, end = null;\n    if (rangeStr.charAt(0) == '(') {\n      includeLower = false;\n    } else if (rangeStr.charAt(0) != '[') {\n      throw new SyntaxError( \"Invalid start character \" + rangeStr.charAt(0) + \" in facet range \" + rangeStr);\n    }\n\n    final int lastNdx = rangeStr.length() - 1;\n    if (rangeStr.charAt(lastNdx) == ')') {\n      includeUpper = false;\n    } else if (rangeStr.charAt(lastNdx) != ']') {\n      throw new SyntaxError(\"Invalid end character \" + rangeStr.charAt(lastNdx) + \" in facet range \" + rangeStr);\n    }\n\n    StringBuilder startStr = new StringBuilder(lastNdx);\n    int i = unescape(rangeStr, 1, lastNdx, startStr);\n    if (i == lastNdx) {\n      if (rangeStr.charAt(lastNdx - 1) == ',') {\n        throw new SyntaxError(\"Empty range limit\");\n      }\n      throw new SyntaxError(\"Missing unescaped comma separating range ends in \" + rangeStr);\n    }\n    start = getComparableFromString(startStr.toString());\n\n    StringBuilder endStr = new StringBuilder(lastNdx);\n    i = unescape(rangeStr, i, lastNdx, endStr);\n    if (i != lastNdx) {\n      throw new SyntaxError(\"Extra unescaped comma at index \" + i + \" in range \" + rangeStr);\n    }\n    end = getComparableFromString(endStr.toString());\n\n    if (start != null && end != null && start.compareTo(end) > 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'start' is higher than 'end' in range for key: \" + rangeStr);\n    }\n\n    // not using custom key as it won't work with refine\n    // refine would need both low and high values\n    return new Range(rangeStr, start, end, includeLower, includeUpper);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor#parseRangeFromString(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#parseRangeFromString(String,String).mjava","sourceNew":"  /**\n   * Parses the given string and returns Range.\n   * This is adopted from {@link org.apache.solr.request.IntervalFacets}\n   *\n   * @param key The name of range which would be used as {@link Range}'s label\n   * @param rangeStr The string containing the Range\n   * @return {@link Range}\n   */\n  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  private Range parseRangeFromString(String key, String rangeStr) throws SyntaxError {\n    rangeStr = rangeStr.trim();\n    if (rangeStr.isEmpty()) {\n      throw new SyntaxError(\"empty facet range\");\n    }\n\n    boolean includeLower = true, includeUpper = true;\n    Comparable start = null, end = null;\n    if (rangeStr.charAt(0) == '(') {\n      includeLower = false;\n    } else if (rangeStr.charAt(0) != '[') {\n      throw new SyntaxError( \"Invalid start character \" + rangeStr.charAt(0) + \" in facet range \" + rangeStr);\n    }\n\n    final int lastNdx = rangeStr.length() - 1;\n    if (rangeStr.charAt(lastNdx) == ')') {\n      includeUpper = false;\n    } else if (rangeStr.charAt(lastNdx) != ']') {\n      throw new SyntaxError(\"Invalid end character \" + rangeStr.charAt(lastNdx) + \" in facet range \" + rangeStr);\n    }\n\n    StringBuilder startStr = new StringBuilder(lastNdx);\n    int i = unescape(rangeStr, 1, lastNdx, startStr);\n    if (i == lastNdx) {\n      if (rangeStr.charAt(lastNdx - 1) == ',') {\n        throw new SyntaxError(\"Empty range limit\");\n      }\n      throw new SyntaxError(\"Missing unescaped comma separating range ends in \" + rangeStr);\n    }\n    start = getComparableFromString(startStr.toString());\n\n    StringBuilder endStr = new StringBuilder(lastNdx);\n    i = unescape(rangeStr, i, lastNdx, endStr);\n    if (i != lastNdx) {\n      throw new SyntaxError(\"Extra unescaped comma at index \" + i + \" in range \" + rangeStr);\n    }\n    end = getComparableFromString(endStr.toString());\n\n    if (start != null && end != null && start.compareTo(end) > 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'start' is higher than 'end' in range for key: \" + rangeStr);\n    }\n\n    // not using custom key as it won't work with refine\n    // refine would need both low and high values\n    return new Range(rangeStr, start, end, includeLower, includeUpper);\n  }\n\n","sourceOld":"  /**\n   * Parses the given string and returns Range.\n   * This is adopted from {@link org.apache.solr.request.IntervalFacets}\n   *\n   * @param key The name of range which would be used as {@link Range}'s label\n   * @param rangeStr The string containing the Range\n   * @return {@link Range}\n   */\n  private Range parseRangeFromString(String key, String rangeStr) throws SyntaxError {\n    rangeStr = rangeStr.trim();\n    if (rangeStr.isEmpty()) {\n      throw new SyntaxError(\"empty facet range\");\n    }\n\n    boolean includeLower = true, includeUpper = true;\n    Comparable start = null, end = null;\n    if (rangeStr.charAt(0) == '(') {\n      includeLower = false;\n    } else if (rangeStr.charAt(0) != '[') {\n      throw new SyntaxError( \"Invalid start character \" + rangeStr.charAt(0) + \" in facet range \" + rangeStr);\n    }\n\n    final int lastNdx = rangeStr.length() - 1;\n    if (rangeStr.charAt(lastNdx) == ')') {\n      includeUpper = false;\n    } else if (rangeStr.charAt(lastNdx) != ']') {\n      throw new SyntaxError(\"Invalid end character \" + rangeStr.charAt(lastNdx) + \" in facet range \" + rangeStr);\n    }\n\n    StringBuilder startStr = new StringBuilder(lastNdx);\n    int i = unescape(rangeStr, 1, lastNdx, startStr);\n    if (i == lastNdx) {\n      if (rangeStr.charAt(lastNdx - 1) == ',') {\n        throw new SyntaxError(\"Empty range limit\");\n      }\n      throw new SyntaxError(\"Missing unescaped comma separating range ends in \" + rangeStr);\n    }\n    start = getComparableFromString(startStr.toString());\n\n    StringBuilder endStr = new StringBuilder(lastNdx);\n    i = unescape(rangeStr, i, lastNdx, endStr);\n    if (i != lastNdx) {\n      throw new SyntaxError(\"Extra unescaped comma at index \" + i + \" in range \" + rangeStr);\n    }\n    end = getComparableFromString(endStr.toString());\n\n    if (start != null && end != null && start.compareTo(end) > 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'start' is higher than 'end' in range for key: \" + rangeStr);\n    }\n\n    // not using custom key as it won't work with refine\n    // refine would need both low and high values\n    return new Range(rangeStr, start, end, includeLower, includeUpper);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}