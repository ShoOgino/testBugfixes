{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","sourceNew":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = _TestUtil.nextInt(random, 100, 300);\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              writer.close();\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (_TestUtil.anyFilesExceptWriteLock(dir)) {\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n            \n            // Make sure reader can open the index:\n            IndexReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? _TestUtil.nextInt(random, 400, 600) : _TestUtil.nextInt(random, 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = _TestUtil.nextInt(random, 100, 300);\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              writer.close();\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (_TestUtil.anyFilesExceptWriteLock(dir)) {\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n            \n            // Make sure reader can open the index:\n            IndexReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? _TestUtil.nextInt(random, 400, 600) : _TestUtil.nextInt(random, 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","sourceNew":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = _TestUtil.nextInt(random(), 100, 300);\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              writer.close();\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (_TestUtil.anyFilesExceptWriteLock(dir)) {\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n            \n            // Make sure reader can open the index:\n            IndexReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? _TestUtil.nextInt(random(), 400, 600) : _TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = _TestUtil.nextInt(random, 100, 300);\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              writer.close();\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (_TestUtil.anyFilesExceptWriteLock(dir)) {\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n            \n            // Make sure reader can open the index:\n            IndexReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? _TestUtil.nextInt(random, 400, 600) : _TestUtil.nextInt(random, 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","sourceNew":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = _TestUtil.nextInt(random(), 100, 300);\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              writer.close();\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (_TestUtil.anyFilesExceptWriteLock(dir)) {\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n            \n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? _TestUtil.nextInt(random(), 400, 600) : _TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = _TestUtil.nextInt(random(), 100, 300);\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              writer.close();\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (_TestUtil.anyFilesExceptWriteLock(dir)) {\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n            \n            // Make sure reader can open the index:\n            IndexReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? _TestUtil.nextInt(random(), 400, 600) : _TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","sourceNew":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              writer.close();\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (TestUtil.anyFilesExceptWriteLock(dir)) {\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n            \n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = _TestUtil.nextInt(random(), 100, 300);\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              writer.close();\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (_TestUtil.anyFilesExceptWriteLock(dir)) {\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n            \n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? _TestUtil.nextInt(random(), 400, 600) : _TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","sourceNew":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.shutdown();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              try {\n                writer.shutdown();\n              } catch (AlreadyClosedException ace) {\n                // OK\n              }\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (TestUtil.anyFilesExceptWriteLock(dir)) {\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n            \n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.shutdown();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              writer.close();\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (TestUtil.anyFilesExceptWriteLock(dir)) {\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n            \n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","sourceNew":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.shutdown();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              try {\n                writer.shutdown();\n              } catch (AlreadyClosedException ace) {\n                // OK\n              }\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (TestUtil.anyFilesExceptWriteLock(dir)) {\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n            \n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.shutdown();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.shutdown();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              try {\n                writer.shutdown();\n              } catch (AlreadyClosedException ace) {\n                // OK\n              }\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (TestUtil.anyFilesExceptWriteLock(dir)) {\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n            \n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.shutdown();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","sourceNew":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              try {\n                writer.close();\n              } catch (AlreadyClosedException ace) {\n                // OK\n              }\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (TestUtil.anyFilesExceptWriteLock(dir)) {\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n            \n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.shutdown();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              try {\n                writer.shutdown();\n              } catch (AlreadyClosedException ace) {\n                // OK\n              }\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (TestUtil.anyFilesExceptWriteLock(dir)) {\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n            \n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.shutdown();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","sourceNew":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setEnableVirusScanner(false); // currently uses the IW unreferenced files method, unaware of retries\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              try {\n                writer.close();\n              } catch (AlreadyClosedException ace) {\n                // OK\n              }\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (TestUtil.anyFilesExceptWriteLock(dir)) {\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n            \n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              try {\n                writer.close();\n              } catch (AlreadyClosedException ace) {\n                // OK\n              }\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (TestUtil.anyFilesExceptWriteLock(dir)) {\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n            \n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9299079153fd7895bf3cf6835cf7019af2ba89b3","date":1417813477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","sourceNew":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      boolean indexExists = false;\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setEnableVirusScanner(false); // currently uses the IW unreferenced files method, unaware of retries\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n          indexExists = true;\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              try {\n                writer.close();\n              } catch (AlreadyClosedException ace) {\n                // OK\n              }\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (indexExists) {\n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setEnableVirusScanner(false); // currently uses the IW unreferenced files method, unaware of retries\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              try {\n                writer.close();\n              } catch (AlreadyClosedException ace) {\n                // OK\n              }\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (TestUtil.anyFilesExceptWriteLock(dir)) {\n            assertNoUnreferencedFiles(dir, \"after disk full during addDocument\");\n            \n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","sourceNew":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      boolean indexExists = false;\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n          indexExists = true;\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              try {\n                writer.close();\n              } catch (AlreadyClosedException ace) {\n                // OK\n              }\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (indexExists) {\n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      boolean indexExists = false;\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setEnableVirusScanner(false); // currently uses the IW unreferenced files method, unaware of retries\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n          indexExists = true;\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              try {\n                writer.close();\n              } catch (AlreadyClosedException ace) {\n                // OK\n              }\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (indexExists) {\n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","sourceNew":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      boolean indexExists = false;\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n          indexExists = true;\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              try {\n                writer.close();\n              } catch (AlreadyClosedException ace) {\n                // OK\n              }\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (indexExists) {\n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      boolean indexExists = false;\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setEnableVirusScanner(false); // currently uses the IW unreferenced files method, unaware of retries\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n          indexExists = true;\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              try {\n                writer.close();\n              } catch (AlreadyClosedException ace) {\n                // OK\n              }\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (indexExists) {\n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","sourceNew":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      boolean indexExists = false;\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n          indexExists = true;\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              try {\n                writer.close();\n              } catch (AlreadyClosedException ace) {\n                // OK\n              }\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (indexExists) {\n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      boolean indexExists = false;\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setEnableVirusScanner(false); // currently uses the IW unreferenced files method, unaware of retries\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n          indexExists = true;\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              try {\n                writer.close();\n              } catch (AlreadyClosedException ace) {\n                // OK\n              }\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (indexExists) {\n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","sourceNew":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      boolean indexExists = false;\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n          indexExists = true;\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              try {\n                writer.close();\n              } catch (AlreadyClosedException ace) {\n                // OK\n              }\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (indexExists) {\n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      boolean indexExists = false;\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setEnableVirusScanner(false); // currently uses the IW unreferenced files method, unaware of retries\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n          indexExists = true;\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              try {\n                writer.close();\n              } catch (AlreadyClosedException ace) {\n                // OK\n              }\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (indexExists) {\n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testAddDocumentOnDiskFull().mjava","sourceNew":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      boolean indexExists = false;\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new ByteBuffersDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n          indexExists = true;\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              try {\n                writer.close();\n              } catch (AlreadyClosedException ace) {\n                // OK\n              }\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (indexExists) {\n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * Make sure IndexWriter cleans up on hitting a disk\n   * full exception in addDocument.\n   * TODO: how to do this on windows with FSDirectory?\n   */\n  public void testAddDocumentOnDiskFull() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n      boolean doAbort = pass == 1;\n      long diskFree = TestUtil.nextInt(random(), 100, 300);\n      boolean indexExists = false;\n      while(true) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle: diskFree=\" + diskFree);\n        }\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setMaxSizeInBytes(diskFree);\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        MergeScheduler ms = writer.getConfig().getMergeScheduler();\n        if (ms instanceof ConcurrentMergeScheduler) {\n          // This test intentionally produces exceptions\n          // in the threads that CMS launches; we don't\n          // want to pollute test output with these.\n          ((ConcurrentMergeScheduler) ms).setSuppressExceptions();\n        }\n\n        boolean hitError = false;\n        try {\n          for(int i=0;i<200;i++) {\n            addDoc(writer);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: done adding docs; now commit\");\n          }\n          writer.commit();\n          indexExists = true;\n        } catch (IOException e) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: exception on addDoc\");\n            e.printStackTrace(System.out);\n          }\n          hitError = true;\n        }\n\n        if (hitError) {\n          if (doAbort) {\n            if (VERBOSE) {\n              System.out.println(\"TEST: now rollback\");\n            }\n            writer.rollback();\n          } else {\n            try {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now close\");\n              }\n              writer.close();\n            } catch (IOException e) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: exception on close; retry w/ no disk space limit\");\n                e.printStackTrace(System.out);\n              }\n              dir.setMaxSizeInBytes(0);\n              try {\n                writer.close();\n              } catch (AlreadyClosedException ace) {\n                // OK\n              }\n            }\n          }\n\n          //_TestUtil.syncConcurrentMerges(ms);\n\n          if (indexExists) {\n            // Make sure reader can open the index:\n            DirectoryReader.open(dir).close();\n          }\n            \n          dir.close();\n          // Now try again w/ more space:\n\n          diskFree += TEST_NIGHTLY ? TestUtil.nextInt(random(), 400, 600) : TestUtil.nextInt(random(), 3000, 5000);\n        } else {\n          //_TestUtil.syncConcurrentMerges(writer);\n          dir.setMaxSizeInBytes(0);\n          writer.close();\n          dir.close();\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["9299079153fd7895bf3cf6835cf7019af2ba89b3","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["9299079153fd7895bf3cf6835cf7019af2ba89b3","b470f36a9372c97283360b1304eacbde22df6c0d"],"d77dafd89756a5161d244985903e3487ca109182":["5a207d19eac354d649c3f0e2cce070017c78125e"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b470f36a9372c97283360b1304eacbde22df6c0d":["9299079153fd7895bf3cf6835cf7019af2ba89b3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["d77dafd89756a5161d244985903e3487ca109182"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["6613659748fe4411a7dcf85266e55db1f95f7315"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}