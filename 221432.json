{"path":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#SolrSnapshotMetaDataManager(SolrCore,Directory,OpenMode).mjava","commits":[{"id":"91e2345fb81b6c1c7faefa550ee5eaafadc54486","date":1469730189,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#SolrSnapshotMetaDataManager(SolrCore,Directory,OpenMode).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A constructor.\n   *\n   * @param dir The directory where the snapshot meta-data is stored.\n   * @param mode CREATE If previous meta-data should be erased.\n   *             APPEND If previous meta-data should be read and updated.\n   *             CREATE_OR_APPEND Creates a new meta-data structure if one does not exist\n   *                              Updates the existing structure if one exists.\n   * @throws IOException in case of errors.\n   */\n  public SolrSnapshotMetaDataManager(SolrCore solrCore, Directory dir, OpenMode mode) throws IOException {\n    this.solrCore = solrCore;\n    this.dir = dir;\n\n    if (mode == OpenMode.CREATE) {\n      deleteSnapshotMetadataFiles();\n    }\n\n    loadFromSnapshotMetadataFile();\n\n    if (mode == OpenMode.APPEND && nextWriteGen == 0) {\n      throw new IllegalStateException(\"no snapshots stored in this directory\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#SolrSnapshotMetaDataManager(SolrCore,Directory,OpenMode).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A constructor.\n   *\n   * @param dir The directory where the snapshot meta-data is stored.\n   * @param mode CREATE If previous meta-data should be erased.\n   *             APPEND If previous meta-data should be read and updated.\n   *             CREATE_OR_APPEND Creates a new meta-data structure if one does not exist\n   *                              Updates the existing structure if one exists.\n   * @throws IOException in case of errors.\n   */\n  public SolrSnapshotMetaDataManager(SolrCore solrCore, Directory dir, OpenMode mode) throws IOException {\n    this.solrCore = solrCore;\n    this.dir = dir;\n\n    if (mode == OpenMode.CREATE) {\n      deleteSnapshotMetadataFiles();\n    }\n\n    loadFromSnapshotMetadataFile();\n\n    if (mode == OpenMode.APPEND && nextWriteGen == 0) {\n      throw new IllegalStateException(\"no snapshots stored in this directory\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#SolrSnapshotMetaDataManager(SolrCore,Directory,OpenMode).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A constructor.\n   *\n   * @param dir The directory where the snapshot meta-data is stored.\n   * @param mode CREATE If previous meta-data should be erased.\n   *             APPEND If previous meta-data should be read and updated.\n   *             CREATE_OR_APPEND Creates a new meta-data structure if one does not exist\n   *                              Updates the existing structure if one exists.\n   * @throws IOException in case of errors.\n   */\n  public SolrSnapshotMetaDataManager(SolrCore solrCore, Directory dir, OpenMode mode) throws IOException {\n    this.solrCore = solrCore;\n    this.dir = dir;\n\n    if (mode == OpenMode.CREATE) {\n      deleteSnapshotMetadataFiles();\n    }\n\n    loadFromSnapshotMetadataFile();\n\n    if (mode == OpenMode.APPEND && nextWriteGen == 0) {\n      throw new IllegalStateException(\"no snapshots stored in this directory\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}