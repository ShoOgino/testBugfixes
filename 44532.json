{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAllReplicasParticipating().mjava","commits":[{"id":"9f1bee4bba8988141f8357bda2ccd9405926c4e5","date":1449703835,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAllReplicasParticipating().mjava","pathOld":"/dev/null","sourceNew":"  // returns true if all replicas are found to be up, false if not\n  private boolean areAllReplicasParticipating() throws InterruptedException {\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    \n    if (slices != null) {\n      int found = 0;\n      try {\n        found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n      } catch (KeeperException e) {\n        if (e instanceof KeeperException.SessionExpiredException) {\n          // if the session has expired, then another election will be launched, so\n          // quit here\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n        }\n        SolrException.log(log, \"Error checking for the number of election participants\", e);\n      }\n      \n      if (found >= slices.getReplicasMap().size()) {\n        log.info(\"All replicas are ready to participate in election.\");\n        return true;\n      }\n      \n    } else {\n      log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n      \n      return false;\n    }\n    \n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5d615d62cd8aff3690943d765e46942551f98b6","date":1474881754,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAllReplicasParticipating().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAllReplicasParticipating().mjava","sourceNew":"  // returns true if all replicas are found to be up, false if not\n  private boolean areAllReplicasParticipating() throws InterruptedException {\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    \n    if (slices != null) {\n      int found = 0;\n      try {\n        found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n      } catch (KeeperException e) {\n        if (e instanceof KeeperException.SessionExpiredException) {\n          // if the session has expired, then another election will be launched, so\n          // quit here\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n        }\n        SolrException.log(log, \"Error checking for the number of election participants\", e);\n      }\n      \n      if (found >= slices.getReplicasMap().size()) {\n        log.debug(\"All replicas are ready to participate in election.\");\n        return true;\n      }\n      \n    } else {\n      log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n      \n      return false;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  // returns true if all replicas are found to be up, false if not\n  private boolean areAllReplicasParticipating() throws InterruptedException {\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    \n    if (slices != null) {\n      int found = 0;\n      try {\n        found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n      } catch (KeeperException e) {\n        if (e instanceof KeeperException.SessionExpiredException) {\n          // if the session has expired, then another election will be launched, so\n          // quit here\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n        }\n        SolrException.log(log, \"Error checking for the number of election participants\", e);\n      }\n      \n      if (found >= slices.getReplicasMap().size()) {\n        log.info(\"All replicas are ready to participate in election.\");\n        return true;\n      }\n      \n    } else {\n      log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n      \n      return false;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAllReplicasParticipating().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAllReplicasParticipating().mjava","sourceNew":"  // returns true if all replicas are found to be up, false if not\n  private boolean areAllReplicasParticipating() throws InterruptedException {\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    \n    if (slices != null) {\n      int found = 0;\n      try {\n        found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n      } catch (KeeperException e) {\n        if (e instanceof KeeperException.SessionExpiredException) {\n          // if the session has expired, then another election will be launched, so\n          // quit here\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n        }\n        SolrException.log(log, \"Error checking for the number of election participants\", e);\n      }\n      \n      if (found >= slices.getReplicasMap().size()) {\n        log.debug(\"All replicas are ready to participate in election.\");\n        return true;\n      }\n      \n    } else {\n      log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n      \n      return false;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  // returns true if all replicas are found to be up, false if not\n  private boolean areAllReplicasParticipating() throws InterruptedException {\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    \n    if (slices != null) {\n      int found = 0;\n      try {\n        found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n      } catch (KeeperException e) {\n        if (e instanceof KeeperException.SessionExpiredException) {\n          // if the session has expired, then another election will be launched, so\n          // quit here\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n        }\n        SolrException.log(log, \"Error checking for the number of election participants\", e);\n      }\n      \n      if (found >= slices.getReplicasMap().size()) {\n        log.info(\"All replicas are ready to participate in election.\");\n        return true;\n      }\n      \n    } else {\n      log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n      \n      return false;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAllReplicasParticipating().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAllReplicasParticipating().mjava","sourceNew":"  // returns true if all replicas are found to be up, false if not\n  private boolean areAllReplicasParticipating() throws InterruptedException {\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    \n    if (slices != null) {\n      int found = 0;\n      try {\n        found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n      } catch (KeeperException e) {\n        if (e instanceof KeeperException.SessionExpiredException) {\n          // if the session has expired, then another election will be launched, so\n          // quit here\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n        }\n        SolrException.log(log, \"Error checking for the number of election participants\", e);\n      }\n      \n      if (found >= slices.getReplicasMap().size()) {\n        log.debug(\"All replicas are ready to participate in election.\");\n        return true;\n      }\n      \n    } else {\n      log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n      \n      return false;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  // returns true if all replicas are found to be up, false if not\n  private boolean areAllReplicasParticipating() throws InterruptedException {\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    \n    if (slices != null) {\n      int found = 0;\n      try {\n        found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n      } catch (KeeperException e) {\n        if (e instanceof KeeperException.SessionExpiredException) {\n          // if the session has expired, then another election will be launched, so\n          // quit here\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n        }\n        SolrException.log(log, \"Error checking for the number of election participants\", e);\n      }\n      \n      if (found >= slices.getReplicasMap().size()) {\n        log.info(\"All replicas are ready to participate in election.\");\n        return true;\n      }\n      \n    } else {\n      log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n      \n      return false;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAllReplicasParticipating().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAllReplicasParticipating().mjava","sourceNew":"  // returns true if all replicas are found to be up, false if not\n  private boolean areAllReplicasParticipating() throws InterruptedException {\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    final DocCollection docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n    \n    if (docCollection != null && docCollection.getSlice(shardId) != null) {\n      final Slice slices = docCollection.getSlice(shardId);\n      int found = 0;\n      try {\n        found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n      } catch (KeeperException e) {\n        if (e instanceof KeeperException.SessionExpiredException) {\n          // if the session has expired, then another election will be launched, so\n          // quit here\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n        }\n        SolrException.log(log, \"Error checking for the number of election participants\", e);\n      }\n      \n      if (found >= slices.getReplicasMap().size()) {\n        log.debug(\"All replicas are ready to participate in election.\");\n        return true;\n      }\n      \n    } else {\n      log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n      \n      return false;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  // returns true if all replicas are found to be up, false if not\n  private boolean areAllReplicasParticipating() throws InterruptedException {\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    \n    if (slices != null) {\n      int found = 0;\n      try {\n        found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n      } catch (KeeperException e) {\n        if (e instanceof KeeperException.SessionExpiredException) {\n          // if the session has expired, then another election will be launched, so\n          // quit here\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n        }\n        SolrException.log(log, \"Error checking for the number of election participants\", e);\n      }\n      \n      if (found >= slices.getReplicasMap().size()) {\n        log.debug(\"All replicas are ready to participate in election.\");\n        return true;\n      }\n      \n    } else {\n      log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n      \n      return false;\n    }\n    \n    return false;\n  }\n\n","bugFix":["9f1bee4bba8988141f8357bda2ccd9405926c4e5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAllReplicasParticipating().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAllReplicasParticipating().mjava","sourceNew":"  // returns true if all replicas are found to be up, false if not\n  private boolean areAllReplicasParticipating() throws InterruptedException {\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    final DocCollection docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n    \n    if (docCollection != null && docCollection.getSlice(shardId) != null) {\n      final Slice slices = docCollection.getSlice(shardId);\n      int found = 0;\n      try {\n        found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n      } catch (KeeperException e) {\n        if (e instanceof KeeperException.SessionExpiredException) {\n          // if the session has expired, then another election will be launched, so\n          // quit here\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n        }\n        SolrException.log(log, \"Error checking for the number of election participants\", e);\n      }\n      \n      if (found >= slices.getReplicasMap().size()) {\n        log.debug(\"All replicas are ready to participate in election.\");\n        return true;\n      }\n      \n    } else {\n      log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n      \n      return false;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  // returns true if all replicas are found to be up, false if not\n  private boolean areAllReplicasParticipating() throws InterruptedException {\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    Slice slices = zkController.getClusterState().getSlice(collection, shardId);\n    \n    if (slices != null) {\n      int found = 0;\n      try {\n        found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n      } catch (KeeperException e) {\n        if (e instanceof KeeperException.SessionExpiredException) {\n          // if the session has expired, then another election will be launched, so\n          // quit here\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n        }\n        SolrException.log(log, \"Error checking for the number of election participants\", e);\n      }\n      \n      if (found >= slices.getReplicasMap().size()) {\n        log.debug(\"All replicas are ready to participate in election.\");\n        return true;\n      }\n      \n    } else {\n      log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n      \n      return false;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAllReplicasParticipating().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAllReplicasParticipating().mjava","sourceNew":"  // returns true if all replicas are found to be up, false if not\n  private boolean areAllReplicasParticipating() throws InterruptedException {\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    final DocCollection docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n    \n    if (docCollection != null && docCollection.getSlice(shardId) != null) {\n      final Slice slices = docCollection.getSlice(shardId);\n      int found = 0;\n      try {\n        found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n      } catch (KeeperException e) {\n        if (e instanceof KeeperException.SessionExpiredException) {\n          // if the session has expired, then another election will be launched, so\n          // quit here\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n        }\n        SolrException.log(log, \"Error checking for the number of election participants\", e);\n      }\n      \n      if (found >= slices.getReplicasMap().size()) {\n        log.debug(\"All replicas are ready to participate in election.\");\n        return true;\n      }\n    } else {\n      log.warn(\"Shard not found: {} for collection {}\", shardId, collection);\n      return false;\n    }\n    return false;\n  }\n\n","sourceOld":"  // returns true if all replicas are found to be up, false if not\n  private boolean areAllReplicasParticipating() throws InterruptedException {\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    final DocCollection docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n    \n    if (docCollection != null && docCollection.getSlice(shardId) != null) {\n      final Slice slices = docCollection.getSlice(shardId);\n      int found = 0;\n      try {\n        found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n      } catch (KeeperException e) {\n        if (e instanceof KeeperException.SessionExpiredException) {\n          // if the session has expired, then another election will be launched, so\n          // quit here\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n        }\n        SolrException.log(log, \"Error checking for the number of election participants\", e);\n      }\n      \n      if (found >= slices.getReplicasMap().size()) {\n        log.debug(\"All replicas are ready to participate in election.\");\n        return true;\n      }\n      \n    } else {\n      log.warn(\"Shard not found: \" + shardId + \" for collection \" + collection);\n      \n      return false;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext#areAllReplicasParticipating().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAllReplicasParticipating().mjava","sourceNew":"  // returns true if all replicas are found to be up, false if not\n  private boolean areAllReplicasParticipating() throws InterruptedException {\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    final DocCollection docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n\n    if (docCollection != null && docCollection.getSlice(shardId) != null) {\n      final Slice slices = docCollection.getSlice(shardId);\n      int found = 0;\n      try {\n        found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n      } catch (KeeperException e) {\n        if (e instanceof KeeperException.SessionExpiredException) {\n          // if the session has expired, then another election will be launched, so\n          // quit here\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n        }\n        SolrException.log(log, \"Error checking for the number of election participants\", e);\n      }\n\n      if (found >= slices.getReplicasMap().size()) {\n        log.debug(\"All replicas are ready to participate in election.\");\n        return true;\n      }\n    } else {\n      log.warn(\"Shard not found: {} for collection {}\", shardId, collection);\n      return false;\n    }\n    return false;\n  }\n\n","sourceOld":"  // returns true if all replicas are found to be up, false if not\n  private boolean areAllReplicasParticipating() throws InterruptedException {\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    final DocCollection docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n    \n    if (docCollection != null && docCollection.getSlice(shardId) != null) {\n      final Slice slices = docCollection.getSlice(shardId);\n      int found = 0;\n      try {\n        found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n      } catch (KeeperException e) {\n        if (e instanceof KeeperException.SessionExpiredException) {\n          // if the session has expired, then another election will be launched, so\n          // quit here\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n              \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n        }\n        SolrException.log(log, \"Error checking for the number of election participants\", e);\n      }\n      \n      if (found >= slices.getReplicasMap().size()) {\n        log.debug(\"All replicas are ready to participate in election.\");\n        return true;\n      }\n    } else {\n      log.warn(\"Shard not found: {} for collection {}\", shardId, collection);\n      return false;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5d615d62cd8aff3690943d765e46942551f98b6":["9f1bee4bba8988141f8357bda2ccd9405926c4e5"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","344b0840364d990b29b97467bfcc766ff8325d11"],"344b0840364d990b29b97467bfcc766ff8325d11":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9f1bee4bba8988141f8357bda2ccd9405926c4e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9f1bee4bba8988141f8357bda2ccd9405926c4e5","a5d615d62cd8aff3690943d765e46942551f98b6"],"ad4957cde742defe6db19689abdc267c5d948066":["344b0840364d990b29b97467bfcc766ff8325d11"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["ad4957cde742defe6db19689abdc267c5d948066"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9f1bee4bba8988141f8357bda2ccd9405926c4e5","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"a5d615d62cd8aff3690943d765e46942551f98b6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"9f1bee4bba8988141f8357bda2ccd9405926c4e5":["a5d615d62cd8aff3690943d765e46942551f98b6","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","ad4957cde742defe6db19689abdc267c5d948066"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","344b0840364d990b29b97467bfcc766ff8325d11","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9f1bee4bba8988141f8357bda2ccd9405926c4e5"],"ad4957cde742defe6db19689abdc267c5d948066":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}