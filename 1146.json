{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#assertMatchEquals(List[Completion],String...).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#assertMatchEquals(List[Completion],String...).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#assertMatchEquals(List[Completion],String...).mjava","sourceNew":"  private void assertMatchEquals(List<Completion> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++) {\n      result[i] = res.get(i).toString();\n    }\n\n    if (!Arrays.equals(stripScore(expected), stripScore(result))) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ENGLISH, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ENGLISH, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","sourceOld":"  private void assertMatchEquals(List<Completion> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++) {\n      result[i] = res.get(i).toString();\n    }\n\n    if (!Arrays.equals(stripScore(expected), stripScore(result))) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ENGLISH, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ENGLISH, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#assertMatchEquals(List[Completion],String...).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#assertMatchEquals(List[Completion],String...).mjava","sourceNew":"  private void assertMatchEquals(List<Completion> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++) {\n      result[i] = res.get(i).toString();\n    }\n\n    if (!Arrays.equals(stripScore(expected), stripScore(result))) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ROOT, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ROOT, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","sourceOld":"  private void assertMatchEquals(List<Completion> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++) {\n      result[i] = res.get(i).toString();\n    }\n\n    if (!Arrays.equals(stripScore(expected), stripScore(result))) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ENGLISH, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ENGLISH, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#assertMatchEquals(List[Completion],String...).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#assertMatchEquals(List[Completion],String...).mjava","sourceNew":"  private void assertMatchEquals(List<Completion> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++) {\n      result[i] = res.get(i).toString();\n    }\n\n    if (!Arrays.equals(stripScore(expected), stripScore(result))) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ROOT, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ROOT, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","sourceOld":"  private void assertMatchEquals(List<Completion> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++) {\n      result[i] = res.get(i).toString();\n    }\n\n    if (!Arrays.equals(stripScore(expected), stripScore(result))) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ENGLISH, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ENGLISH, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#assertMatchEquals(List[Completion],String...).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#assertMatchEquals(List[Completion],String...).mjava","sourceNew":"  private void assertMatchEquals(List<Completion> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++) {\n      result[i] = res.get(i).toString();\n    }\n\n    if (!Arrays.equals(stripScore(expected), stripScore(result))) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ROOT, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ROOT, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","sourceOld":"  private void assertMatchEquals(List<Completion> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++) {\n      result[i] = res.get(i).toString();\n    }\n\n    if (!Arrays.equals(stripScore(expected), stripScore(result))) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ENGLISH, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ENGLISH, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#assertMatchEquals(List[Completion],String...).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#assertMatchEquals(List[Completion],String...).mjava","sourceNew":"  private void assertMatchEquals(List<Completion> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++) {\n      result[i] = res.get(i).toString();\n    }\n\n    if (!Arrays.equals(stripScore(expected), stripScore(result))) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ROOT, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ROOT, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","sourceOld":"  private void assertMatchEquals(List<Completion> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++) {\n      result[i] = res.get(i).toString();\n    }\n\n    if (!Arrays.equals(stripScore(expected), stripScore(result))) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ENGLISH, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ENGLISH, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2acf500f78aa12b92e371fd89c719291986b6b90"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}