{"path":"lucene/src/java/org/apache/lucene/store/FSDirectory#setMaxMergeWriteMBPerSec(Double).mjava","commits":[{"id":"b14fe3e39e307a3142473ce571df73c1624ddfcb","date":1309114104,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/FSDirectory#setMaxMergeWriteMBPerSec(Double).mjava","pathOld":"/dev/null","sourceNew":"  /** Sets the maximum (approx) MB/sec allowed by all write\n   *  IO performed by merging.  Pass null to have no limit.\n   *\n   *  <p><b>NOTE</b>: if merges are already running there is\n   *  no guarantee this new rate will apply to them; it will\n   *  only apply for certain to new merges.\n   *\n   * @lucene.experimental */\n  public synchronized void setMaxMergeWriteMBPerSec(Double mbPerSec) {\n    maxMergeWriteMBPerSec = mbPerSec;\n    if (mbPerSec == null) {\n      if (mergeWriteRateLimiter != null) {\n        mergeWriteRateLimiter.setMaxRate(Double.MAX_VALUE);\n        mergeWriteRateLimiter = null;\n      }\n    } else if (mergeWriteRateLimiter != null) {\n      mergeWriteRateLimiter.setMaxRate(mbPerSec);\n    } else {\n      mergeWriteRateLimiter = new RateLimiter(mbPerSec);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/FSDirectory#setMaxMergeWriteMBPerSec(Double).mjava","pathOld":"/dev/null","sourceNew":"  /** Sets the maximum (approx) MB/sec allowed by all write\n   *  IO performed by merging.  Pass null to have no limit.\n   *\n   *  <p><b>NOTE</b>: if merges are already running there is\n   *  no guarantee this new rate will apply to them; it will\n   *  only apply for certain to new merges.\n   *\n   * @lucene.experimental */\n  public synchronized void setMaxMergeWriteMBPerSec(Double mbPerSec) {\n    maxMergeWriteMBPerSec = mbPerSec;\n    if (mbPerSec == null) {\n      if (mergeWriteRateLimiter != null) {\n        mergeWriteRateLimiter.setMaxRate(Double.MAX_VALUE);\n        mergeWriteRateLimiter = null;\n      }\n    } else if (mergeWriteRateLimiter != null) {\n      mergeWriteRateLimiter.setMaxRate(mbPerSec);\n    } else {\n      mergeWriteRateLimiter = new RateLimiter(mbPerSec);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/FSDirectory#setMaxMergeWriteMBPerSec(Double).mjava","pathOld":"/dev/null","sourceNew":"  /** Sets the maximum (approx) MB/sec allowed by all write\n   *  IO performed by merging.  Pass null to have no limit.\n   *\n   *  <p><b>NOTE</b>: if merges are already running there is\n   *  no guarantee this new rate will apply to them; it will\n   *  only apply for certain to new merges.\n   *\n   * @lucene.experimental */\n  public synchronized void setMaxMergeWriteMBPerSec(Double mbPerSec) {\n    maxMergeWriteMBPerSec = mbPerSec;\n    if (mbPerSec == null) {\n      if (mergeWriteRateLimiter != null) {\n        mergeWriteRateLimiter.setMaxRate(Double.MAX_VALUE);\n        mergeWriteRateLimiter = null;\n      }\n    } else if (mergeWriteRateLimiter != null) {\n      mergeWriteRateLimiter.setMaxRate(mbPerSec);\n    } else {\n      mergeWriteRateLimiter = new RateLimiter(mbPerSec);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa1383b0dca888793c3f9eda613430699a90aebf","date":1315600538,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/FSDirectory#setMaxMergeWriteMBPerSec(Double).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#setMaxMergeWriteMBPerSec(Double).mjava","sourceNew":"  /** Sets the maximum (approx) MB/sec allowed by all write\n   *  IO performed by merging.  Pass null to have no limit.\n   *\n   *  <p><b>NOTE</b>: if merges are already running there is\n   *  no guarantee this new rate will apply to them; it will\n   *  only apply for certain to new merges.\n   *\n   * @lucene.experimental */\n  public void setMaxMergeWriteMBPerSec(Double mbPerSec) {\n    RateLimiter limiter = mergeWriteRateLimiter;\n    if (mbPerSec == null) {\n      if (limiter != null) {\n        limiter.setMbPerSec(Double.MAX_VALUE);\n        mergeWriteRateLimiter = null;\n      }\n    } else if (limiter != null) {\n      limiter.setMbPerSec(mbPerSec);\n    } else {\n      mergeWriteRateLimiter = new RateLimiter(mbPerSec);\n    }\n  }\n\n","sourceOld":"  /** Sets the maximum (approx) MB/sec allowed by all write\n   *  IO performed by merging.  Pass null to have no limit.\n   *\n   *  <p><b>NOTE</b>: if merges are already running there is\n   *  no guarantee this new rate will apply to them; it will\n   *  only apply for certain to new merges.\n   *\n   * @lucene.experimental */\n  public synchronized void setMaxMergeWriteMBPerSec(Double mbPerSec) {\n    maxMergeWriteMBPerSec = mbPerSec;\n    if (mbPerSec == null) {\n      if (mergeWriteRateLimiter != null) {\n        mergeWriteRateLimiter.setMaxRate(Double.MAX_VALUE);\n        mergeWriteRateLimiter = null;\n      }\n    } else if (mergeWriteRateLimiter != null) {\n      mergeWriteRateLimiter.setMaxRate(mbPerSec);\n    } else {\n      mergeWriteRateLimiter = new RateLimiter(mbPerSec);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#setMaxMergeWriteMBPerSec(Double).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#setMaxMergeWriteMBPerSec(Double).mjava","sourceNew":"  /** Sets the maximum (approx) MB/sec allowed by all write\n   *  IO performed by merging.  Pass null to have no limit.\n   *\n   *  <p><b>NOTE</b>: if merges are already running there is\n   *  no guarantee this new rate will apply to them; it will\n   *  only apply for certain to new merges.\n   *\n   * @lucene.experimental */\n  public void setMaxMergeWriteMBPerSec(Double mbPerSec) {\n    RateLimiter limiter = mergeWriteRateLimiter;\n    if (mbPerSec == null) {\n      if (limiter != null) {\n        limiter.setMbPerSec(Double.MAX_VALUE);\n        mergeWriteRateLimiter = null;\n      }\n    } else if (limiter != null) {\n      limiter.setMbPerSec(mbPerSec);\n    } else {\n      mergeWriteRateLimiter = new RateLimiter(mbPerSec);\n    }\n  }\n\n","sourceOld":"  /** Sets the maximum (approx) MB/sec allowed by all write\n   *  IO performed by merging.  Pass null to have no limit.\n   *\n   *  <p><b>NOTE</b>: if merges are already running there is\n   *  no guarantee this new rate will apply to them; it will\n   *  only apply for certain to new merges.\n   *\n   * @lucene.experimental */\n  public void setMaxMergeWriteMBPerSec(Double mbPerSec) {\n    RateLimiter limiter = mergeWriteRateLimiter;\n    if (mbPerSec == null) {\n      if (limiter != null) {\n        limiter.setMbPerSec(Double.MAX_VALUE);\n        mergeWriteRateLimiter = null;\n      }\n    } else if (limiter != null) {\n      limiter.setMbPerSec(mbPerSec);\n    } else {\n      mergeWriteRateLimiter = new RateLimiter(mbPerSec);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa1383b0dca888793c3f9eda613430699a90aebf"],"fa1383b0dca888793c3f9eda613430699a90aebf":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b14fe3e39e307a3142473ce571df73c1624ddfcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b14fe3e39e307a3142473ce571df73c1624ddfcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fa1383b0dca888793c3f9eda613430699a90aebf":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b14fe3e39e307a3142473ce571df73c1624ddfcb","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"b14fe3e39e307a3142473ce571df73c1624ddfcb":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["fa1383b0dca888793c3f9eda613430699a90aebf","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}