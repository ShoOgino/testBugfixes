{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnRegressionEvaluator.KnnRegressionTuple#predict(double[]).mjava","commits":[{"id":"f7656aa7218845fc29808b9dfe775b9558ca4611","date":1533776721,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnRegressionEvaluator.KnnRegressionTuple#predict(double[]).mjava","pathOld":"/dev/null","sourceNew":"    public double predict(double[] values) {\n\n      Matrix knn = KnnEvaluator.search(scaledObservations, values, k, distanceMeasure);\n      List<Number> indexes = (List<Number>)knn.getAttribute(\"indexes\");\n\n      double sum = 0;\n\n      //Collect the outcomes for the nearest neighbors\n      for(Number n : indexes) {\n        sum += outcomes[n.intValue()];\n      }\n\n      //Return the average of the outcomes as the prediction.\n\n      return sum/((double)indexes.size());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a9a2a5c29b9076cadb74c558d61ea3e4942bed2","date":1534530377,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnRegressionEvaluator.KnnRegressionTuple#predict(double[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnRegressionEvaluator.KnnRegressionTuple#predict(double[]).mjava","sourceNew":"    public double predict(double[] values) {\n\n      Matrix obs = scaledObservations != null ? scaledObservations : observations;\n      Matrix knn = KnnEvaluator.search(obs, values, k, distanceMeasure);\n      List<Number> indexes = (List<Number>)knn.getAttribute(\"indexes\");\n\n      if(robust) {\n        //Get the median of the results.\n        double[] vals = new double[indexes.size()];\n        Percentile percentile = new Percentile();\n        int i=0;\n        for (Number n : indexes) {\n           vals[i++]=outcomes[n.intValue()];\n        }\n\n        //Return 50 percentile.\n        return percentile.evaluate(vals, 50);\n      } else {\n        //Get the average of the results\n        double sum = 0;\n\n        //Collect the outcomes for the nearest neighbors\n        for (Number n : indexes) {\n          sum += outcomes[n.intValue()];\n        }\n\n        //Return the average of the outcomes as the prediction.\n        return sum / ((double) indexes.size());\n      }\n    }\n\n","sourceOld":"    public double predict(double[] values) {\n\n      Matrix knn = KnnEvaluator.search(scaledObservations, values, k, distanceMeasure);\n      List<Number> indexes = (List<Number>)knn.getAttribute(\"indexes\");\n\n      double sum = 0;\n\n      //Collect the outcomes for the nearest neighbors\n      for(Number n : indexes) {\n        sum += outcomes[n.intValue()];\n      }\n\n      //Return the average of the outcomes as the prediction.\n\n      return sum/((double)indexes.size());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnRegressionEvaluator.KnnRegressionTuple#predict(double[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnRegressionEvaluator.KnnRegressionTuple#predict(double[]).mjava","sourceNew":"    public double predict(double[] values) {\n\n      Matrix obs = scaledObservations != null ? scaledObservations : observations;\n      Matrix knn = KnnEvaluator.search(obs, values, k, distanceMeasure);\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> indexes = (List<Number>)knn.getAttribute(\"indexes\");\n\n      if(robust) {\n        //Get the median of the results.\n        double[] vals = new double[indexes.size()];\n        Percentile percentile = new Percentile();\n        int i=0;\n        for (Number n : indexes) {\n           vals[i++]=outcomes[n.intValue()];\n        }\n\n        //Return 50 percentile.\n        return percentile.evaluate(vals, 50);\n      } else {\n        //Get the average of the results\n        double sum = 0;\n\n        //Collect the outcomes for the nearest neighbors\n        for (Number n : indexes) {\n          sum += outcomes[n.intValue()];\n        }\n\n        //Return the average of the outcomes as the prediction.\n        return sum / ((double) indexes.size());\n      }\n    }\n\n","sourceOld":"    public double predict(double[] values) {\n\n      Matrix obs = scaledObservations != null ? scaledObservations : observations;\n      Matrix knn = KnnEvaluator.search(obs, values, k, distanceMeasure);\n      List<Number> indexes = (List<Number>)knn.getAttribute(\"indexes\");\n\n      if(robust) {\n        //Get the median of the results.\n        double[] vals = new double[indexes.size()];\n        Percentile percentile = new Percentile();\n        int i=0;\n        for (Number n : indexes) {\n           vals[i++]=outcomes[n.intValue()];\n        }\n\n        //Return 50 percentile.\n        return percentile.evaluate(vals, 50);\n      } else {\n        //Get the average of the results\n        double sum = 0;\n\n        //Collect the outcomes for the nearest neighbors\n        for (Number n : indexes) {\n          sum += outcomes[n.intValue()];\n        }\n\n        //Return the average of the outcomes as the prediction.\n        return sum / ((double) indexes.size());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["5a9a2a5c29b9076cadb74c558d61ea3e4942bed2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a9a2a5c29b9076cadb74c558d61ea3e4942bed2":["f7656aa7218845fc29808b9dfe775b9558ca4611"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"f7656aa7218845fc29808b9dfe775b9558ca4611":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7656aa7218845fc29808b9dfe775b9558ca4611"],"5a9a2a5c29b9076cadb74c558d61ea3e4942bed2":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"f7656aa7218845fc29808b9dfe775b9558ca4611":["5a9a2a5c29b9076cadb74c558d61ea3e4942bed2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}