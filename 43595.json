{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParserErrorStrategy#recover(Parser,RecognitionException).mjava","commits":[{"id":"d23d4828afa583ebf35b4a541763af6206133458","date":1438931440,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParserErrorStrategy#recover(Parser,RecognitionException).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Ensures the ANTLR parser will throw an exception after the first error\n   *\n   * @param recognizer the parser being used\n   * @param re the original exception from the parser\n   */\n  @Override\n  public void recover(Parser recognizer, RecognitionException re) {\n    Token token = re.getOffendingToken();\n    String message;\n\n    if (token == null) {\n      message = \"error \" + getTokenErrorDisplay(token);\n    } else if (re instanceof InputMismatchException) {\n       message = \"unexpected token \" + getTokenErrorDisplay(token) +\n           \" on line (\" + token.getLine() + \") position (\" + token.getCharPositionInLine() + \")\" +\n           \" was expecting one of \" + re.getExpectedTokens().toString(recognizer.getVocabulary());\n    } else if (re instanceof NoViableAltException) {\n      if (token.getType() == JavascriptParser.EOF) {\n        message = \"unexpected end of expression\";\n      } else {\n        message = \"invalid sequence of tokens near \" + getTokenErrorDisplay(token) +\n            \" on line (\" + token.getLine() + \") position (\" + token.getCharPositionInLine() + \")\";\n      }\n    } else {\n      message = \" unexpected token near \" + getTokenErrorDisplay(token) +\n          \" on line (\" + token.getLine() + \") position (\" + token.getCharPositionInLine() + \")\";\n    }\n\n    ParseException parseException = new ParseException(message, token.getStartIndex());\n    parseException.initCause(re);\n    throw new RuntimeException(parseException);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d23d4828afa583ebf35b4a541763af6206133458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d23d4828afa583ebf35b4a541763af6206133458"]},"commit2Childs":{"d23d4828afa583ebf35b4a541763af6206133458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d23d4828afa583ebf35b4a541763af6206133458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}