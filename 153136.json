{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":null,"sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}