{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#refreshReader(DirectoryReader,TestReopen,int,boolean).mjava","commits":[{"id":"d40b62adb64d8f7b2f85ee849349cfb0bef03f45","date":1327855938,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#refreshReader(DirectoryReader,TestReopen,int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#refreshReader(IndexReader,TestReopen,int,boolean).mjava","sourceNew":"  ReaderCouple refreshReader(DirectoryReader reader, TestReopen test, int modify, boolean hasChanges) throws IOException {\n    synchronized (createReaderMutex) {\n      DirectoryReader r = null;\n      if (test != null) {\n        test.modifyIndex(modify);\n        r = test.openReader();\n      }\n      \n      DirectoryReader refreshed = null;\n      try {\n        refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed == null) {\n          refreshed = reader;\n        }\n      } finally {\n        if (refreshed == null && r != null) {\n          // Hit exception -- close opened reader\n          r.close();\n        }\n      }\n      \n      if (hasChanges) {\n        if (refreshed == reader) {\n          fail(\"No new DirectoryReader instance created during refresh.\");\n        }\n      } else {\n        if (refreshed != reader) {\n          fail(\"New DirectoryReader instance created during refresh even though index had no changes.\");\n        }\n      }\n      \n      return new ReaderCouple(r, refreshed);\n    }\n  }\n\n","sourceOld":"  ReaderCouple refreshReader(IndexReader reader, TestReopen test, int modify, boolean hasChanges) throws IOException {\n    synchronized (createReaderMutex) {\n      IndexReader r = null;\n      if (test != null) {\n        test.modifyIndex(modify);\n        r = test.openReader();\n      }\n      \n      IndexReader refreshed = null;\n      try {\n        refreshed = IndexReader.openIfChanged(reader);\n        if (refreshed == null) {\n          refreshed = reader;\n        }\n      } finally {\n        if (refreshed == null && r != null) {\n          // Hit exception -- close opened reader\n          r.close();\n        }\n      }\n      \n      if (hasChanges) {\n        if (refreshed == reader) {\n          fail(\"No new IndexReader instance created during refresh.\");\n        }\n      } else {\n        if (refreshed != reader) {\n          fail(\"New IndexReader instance created during refresh even though index had no changes.\");\n        }\n      }\n      \n      return new ReaderCouple(r, refreshed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#refreshReader(DirectoryReader,TestReopen,int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#refreshReader(IndexReader,TestReopen,int,boolean).mjava","sourceNew":"  ReaderCouple refreshReader(DirectoryReader reader, TestReopen test, int modify, boolean hasChanges) throws IOException {\n    synchronized (createReaderMutex) {\n      DirectoryReader r = null;\n      if (test != null) {\n        test.modifyIndex(modify);\n        r = test.openReader();\n      }\n      \n      DirectoryReader refreshed = null;\n      try {\n        refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed == null) {\n          refreshed = reader;\n        }\n      } finally {\n        if (refreshed == null && r != null) {\n          // Hit exception -- close opened reader\n          r.close();\n        }\n      }\n      \n      if (hasChanges) {\n        if (refreshed == reader) {\n          fail(\"No new DirectoryReader instance created during refresh.\");\n        }\n      } else {\n        if (refreshed != reader) {\n          fail(\"New DirectoryReader instance created during refresh even though index had no changes.\");\n        }\n      }\n      \n      return new ReaderCouple(r, refreshed);\n    }\n  }\n\n","sourceOld":"  ReaderCouple refreshReader(IndexReader reader, TestReopen test, int modify, boolean hasChanges) throws IOException {\n    synchronized (createReaderMutex) {\n      IndexReader r = null;\n      if (test != null) {\n        test.modifyIndex(modify);\n        r = test.openReader();\n      }\n      \n      IndexReader refreshed = null;\n      try {\n        refreshed = IndexReader.openIfChanged(reader);\n        if (refreshed == null) {\n          refreshed = reader;\n        }\n      } finally {\n        if (refreshed == null && r != null) {\n          // Hit exception -- close opened reader\n          r.close();\n        }\n      }\n      \n      if (hasChanges) {\n        if (refreshed == reader) {\n          fail(\"No new IndexReader instance created during refresh.\");\n        }\n      } else {\n        if (refreshed != reader) {\n          fail(\"New IndexReader instance created during refresh even though index had no changes.\");\n        }\n      }\n      \n      return new ReaderCouple(r, refreshed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#refreshReader(DirectoryReader,TestReopen,int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#refreshReader(DirectoryReader,TestReopen,int,boolean).mjava","sourceNew":"  ReaderCouple refreshReader(DirectoryReader reader, TestReopen test, int modify, boolean hasChanges) throws IOException {\n    synchronized (createReaderMutex) {\n      DirectoryReader r = null;\n      if (test != null) {\n        test.modifyIndex(modify);\n        r = test.openReader();\n      }\n      \n      DirectoryReader refreshed = null;\n      try {\n        refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed == null) {\n          refreshed = reader;\n        }\n      } finally {\n        if (refreshed == null && r != null) {\n          // Hit exception -- close opened reader\n          r.close();\n        }\n      }\n      \n      if (hasChanges) {\n        if (refreshed == reader) {\n          fail(\"No new DirectoryReader instance created during refresh.\");\n        }\n      } else {\n        if (refreshed != reader) {\n          fail(\"New DirectoryReader instance created during refresh even though index had no changes.\");\n        }\n      }\n      \n      return new ReaderCouple(r, refreshed);\n    }\n  }\n\n","sourceOld":"  ReaderCouple refreshReader(DirectoryReader reader, TestReopen test, int modify, boolean hasChanges) throws IOException {\n    synchronized (createReaderMutex) {\n      DirectoryReader r = null;\n      if (test != null) {\n        test.modifyIndex(modify);\n        r = test.openReader();\n      }\n      \n      DirectoryReader refreshed = null;\n      try {\n        refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed == null) {\n          refreshed = reader;\n        }\n      } finally {\n        if (refreshed == null && r != null) {\n          // Hit exception -- close opened reader\n          r.close();\n        }\n      }\n      \n      if (hasChanges) {\n        if (refreshed == reader) {\n          fail(\"No new DirectoryReader instance created during refresh.\");\n        }\n      } else {\n        if (refreshed != reader) {\n          fail(\"New DirectoryReader instance created during refresh even though index had no changes.\");\n        }\n      }\n      \n      return new ReaderCouple(r, refreshed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d40b62adb64d8f7b2f85ee849349cfb0bef03f45","5cab9a86bd67202d20b6adc463008c8e982b070a"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}