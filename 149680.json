{"path":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingLeafReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(int,SortingDocsAndPositionsEnum,DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingLeafReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(int,SortingDocsAndPositionsEnum,DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(int,SortingDocsAndPositionsEnum,DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","sourceNew":"    SortingDocsAndPositionsEnum(int maxDoc, SortingDocsAndPositionsEnum reuse, final DocsAndPositionsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    SortingDocsAndPositionsEnum(int maxDoc, SortingDocsAndPositionsEnum reuse, final DocsAndPositionsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(int,SortingDocsAndPositionsEnum,DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingLeafReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(int,SortingDocsAndPositionsEnum,DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","sourceNew":"    SortingDocsAndPositionsEnum(int maxDoc, SortingDocsAndPositionsEnum reuse, final DocsAndPositionsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    SortingDocsAndPositionsEnum(int maxDoc, SortingDocsAndPositionsEnum reuse, final DocsAndPositionsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}