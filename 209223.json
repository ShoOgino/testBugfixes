{"path":"src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","commits":[{"id":"674cb7971f8fa511a6c4f3968780fd6fa7f84cdc","date":1043088019,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public Query rewrite(IndexReader reader) throws IOException {\n    if (clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = (BooleanClause)clauses.elementAt(0);\n      if (!c.prohibited) {\t\t\t  // just return clause\n        Query clone = (Query)c.query.clone();     // have to clone to boost\n        clone.setBoost(getBoost() * clone.getBoost());\n        return clone;\n      }\n    }\n\n    BooleanQuery clone = (BooleanQuery)this.clone(); // recursively clone\n    boolean changed = false;\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      Query q = c.query.rewrite(reader);\n      if (q != c.query) {                         // rewrote\n        changed = true;                           // replace in clone\n        clone.clauses.setElementAt\n          (new BooleanClause(q, c.required, c.prohibited), i);\n      }\n    }\n    if (changed)\n      return clone;                               // clauses rewrote\n    else\n      return this;                                // no clauses rewrote\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3614816b27493d1b98e19c4e891b0301ad48e130"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4795bed31609723b0b9408337a91aad89d33ee5","date":1043089291,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","sourceNew":"  public Query rewrite(IndexReader reader) throws IOException {\n    if (clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = (BooleanClause)clauses.elementAt(0);\n      if (!c.prohibited) {\t\t\t  // just return clause\n        Query query = c.query;\n        if (getBoost() != 1.0f) {                 // have to clone to boost\n          query = (Query)query.clone();\n          query.setBoost(getBoost() * query.getBoost());\n        }\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      Query query = c.query.rewrite(reader);\n      if (query != c.query) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.setElementAt\n          (new BooleanClause(query, c.required, c.prohibited), i);\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","sourceOld":"  public Query rewrite(IndexReader reader) throws IOException {\n    if (clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = (BooleanClause)clauses.elementAt(0);\n      if (!c.prohibited) {\t\t\t  // just return clause\n        Query clone = (Query)c.query.clone();     // have to clone to boost\n        clone.setBoost(getBoost() * clone.getBoost());\n        return clone;\n      }\n    }\n\n    BooleanQuery clone = (BooleanQuery)this.clone(); // recursively clone\n    boolean changed = false;\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      Query q = c.query.rewrite(reader);\n      if (q != c.query) {                         // rewrote\n        changed = true;                           // replace in clone\n        clone.clauses.setElementAt\n          (new BooleanClause(q, c.required, c.prohibited), i);\n      }\n    }\n    if (changed)\n      return clone;                               // clauses rewrote\n    else\n      return this;                                // no clauses rewrote\n  }\n\n","bugFix":null,"bugIntro":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c964249f3bde77675cca03c33360c076896b9e90","date":1069719680,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","sourceNew":"  public Query rewrite(IndexReader reader) throws IOException {\n    if (clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = (BooleanClause)clauses.elementAt(0);\n      if (!c.prohibited) {\t\t\t  // just return clause\n        Query query = c.query.rewrite(reader);    // rewrite first\n        if (getBoost() != 1.0f) {                 // have to clone to boost\n          query = (Query)query.clone();\n          query.setBoost(getBoost() * query.getBoost());\n        }\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      Query query = c.query.rewrite(reader);\n      if (query != c.query) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.setElementAt\n          (new BooleanClause(query, c.required, c.prohibited), i);\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","sourceOld":"  public Query rewrite(IndexReader reader) throws IOException {\n    if (clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = (BooleanClause)clauses.elementAt(0);\n      if (!c.prohibited) {\t\t\t  // just return clause\n        Query query = c.query;\n        if (getBoost() != 1.0f) {                 // have to clone to boost\n          query = (Query)query.clone();\n          query.setBoost(getBoost() * query.getBoost());\n        }\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      Query query = c.query.rewrite(reader);\n      if (query != c.query) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.setElementAt\n          (new BooleanClause(query, c.required, c.prohibited), i);\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af67932471fb2829b21c48138608ea077cb6a835","date":1069794996,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","sourceNew":"  public Query rewrite(IndexReader reader) throws IOException {\n    if (clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = (BooleanClause)clauses.elementAt(0);\n      if (!c.prohibited) {\t\t\t  // just return clause\n\n        Query query = c.query.rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.query)                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      Query query = c.query.rewrite(reader);\n      if (query != c.query) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.setElementAt\n          (new BooleanClause(query, c.required, c.prohibited), i);\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","sourceOld":"  public Query rewrite(IndexReader reader) throws IOException {\n    if (clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = (BooleanClause)clauses.elementAt(0);\n      if (!c.prohibited) {\t\t\t  // just return clause\n        Query query = c.query.rewrite(reader);    // rewrite first\n        if (getBoost() != 1.0f) {                 // have to clone to boost\n          query = (Query)query.clone();\n          query.setBoost(getBoost() * query.getBoost());\n        }\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      Query query = c.query.rewrite(reader);\n      if (query != c.query) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.setElementAt\n          (new BooleanClause(query, c.required, c.prohibited), i);\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d1fc81afb0c32e0b7589e656cceb5cf177093fa","date":1093637352,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","sourceNew":"  public Query rewrite(IndexReader reader) throws IOException {\n    if (clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = (BooleanClause)clauses.elementAt(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery())                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.setElementAt\n          (new BooleanClause(query, c.getOccur()), i);\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","sourceOld":"  public Query rewrite(IndexReader reader) throws IOException {\n    if (clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = (BooleanClause)clauses.elementAt(0);\n      if (!c.prohibited) {\t\t\t  // just return clause\n\n        Query query = c.query.rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.query)                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      Query query = c.query.rewrite(reader);\n      if (query != c.query) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.setElementAt\n          (new BooleanClause(query, c.required, c.prohibited), i);\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"570e1572d75ec17bfc5c2e0e4e4dad03e3ce323e","date":1166323237,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","sourceNew":"  public Query rewrite(IndexReader reader) throws IOException {\n    if (clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = (BooleanClause)clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery())                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","sourceOld":"  public Query rewrite(IndexReader reader) throws IOException {\n    if (clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = (BooleanClause)clauses.elementAt(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery())                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.setElementAt\n          (new BooleanClause(query, c.getOccur()), i);\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3614816b27493d1b98e19c4e891b0301ad48e130","date":1202026876,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","sourceNew":"  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = (BooleanClause)clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery())                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","sourceOld":"  public Query rewrite(IndexReader reader) throws IOException {\n    if (clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = (BooleanClause)clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery())                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","bugFix":["674cb7971f8fa511a6c4f3968780fd6fa7f84cdc"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc","date":1255773182,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = (BooleanClause)clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery())                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","sourceOld":"  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = (BooleanClause)clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery())                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20645c714ca2a7b7707c2707d58ee9fa384c7362","date":1256074979,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery())                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = (BooleanClause)clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery())                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery())                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery())                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["3614816b27493d1b98e19c4e891b0301ad48e130"],"c964249f3bde77675cca03c33360c076896b9e90":["a4795bed31609723b0b9408337a91aad89d33ee5"],"3614816b27493d1b98e19c4e891b0301ad48e130":["570e1572d75ec17bfc5c2e0e4e4dad03e3ce323e"],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"0d1fc81afb0c32e0b7589e656cceb5cf177093fa":["af67932471fb2829b21c48138608ea077cb6a835"],"570e1572d75ec17bfc5c2e0e4e4dad03e3ce323e":["0d1fc81afb0c32e0b7589e656cceb5cf177093fa"],"a4795bed31609723b0b9408337a91aad89d33ee5":["674cb7971f8fa511a6c4f3968780fd6fa7f84cdc"],"af67932471fb2829b21c48138608ea077cb6a835":["c964249f3bde77675cca03c33360c076896b9e90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"674cb7971f8fa511a6c4f3968780fd6fa7f84cdc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["674cb7971f8fa511a6c4f3968780fd6fa7f84cdc"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"c964249f3bde77675cca03c33360c076896b9e90":["af67932471fb2829b21c48138608ea077cb6a835"],"3614816b27493d1b98e19c4e891b0301ad48e130":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0d1fc81afb0c32e0b7589e656cceb5cf177093fa":["570e1572d75ec17bfc5c2e0e4e4dad03e3ce323e"],"570e1572d75ec17bfc5c2e0e4e4dad03e3ce323e":["3614816b27493d1b98e19c4e891b0301ad48e130"],"a4795bed31609723b0b9408337a91aad89d33ee5":["c964249f3bde77675cca03c33360c076896b9e90"],"af67932471fb2829b21c48138608ea077cb6a835":["0d1fc81afb0c32e0b7589e656cceb5cf177093fa"],"674cb7971f8fa511a6c4f3968780fd6fa7f84cdc":["a4795bed31609723b0b9408337a91aad89d33ee5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}