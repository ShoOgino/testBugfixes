{"path":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractionDateUtil#parseDate(String,Collection[String]).mjava","commits":[{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractionDateUtil#parseDate(String,Collection[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String]).mjava","sourceNew":"  public static Date parseDate(String d, Collection<String> fmts) throws ParseException {\n    if (d.length() > 0 && d.charAt(d.length() - 1) == 'Z') {\n      try {\n        return new Date(ISO_8601_PARSER.parse(d, Instant::from).toEpochMilli());\n      } catch (Exception e) {\n        //ignore; perhaps we can parse with one of the formats below...\n      }\n    }\n    return parseDate(d, fmts, null);\n  }\n\n","sourceOld":"  public static Date parseDate(String d, Collection<String> fmts) throws ParseException {\n    // 2007-04-26T08:05:04Z\n    if (d.endsWith(\"Z\") && d.length() > 20) {\n      return getThreadLocalDateFormat().parse(d);\n    }\n    return parseDate(d, fmts, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba","date":1459362686,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String]).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractionDateUtil#parseDate(String,Collection[String]).mjava","sourceNew":"  public static Date parseDate(String d, Collection<String> fmts) throws ParseException {\n    // 2007-04-26T08:05:04Z\n    if (d.endsWith(\"Z\") && d.length() > 20) {\n      return getThreadLocalDateFormat().parse(d);\n    }\n    return parseDate(d, fmts, null);\n  }\n\n","sourceOld":"  public static Date parseDate(String d, Collection<String> fmts) throws ParseException {\n    if (d.length() > 0 && d.charAt(d.length() - 1) == 'Z') {\n      try {\n        return new Date(ISO_8601_PARSER.parse(d, Instant::from).toEpochMilli());\n      } catch (Exception e) {\n        //ignore; perhaps we can parse with one of the formats below...\n      }\n    }\n    return parseDate(d, fmts, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69","date":1459364429,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractionDateUtil#parseDate(String,Collection[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String]).mjava","sourceNew":"  public static Date parseDate(String d, Collection<String> fmts) throws ParseException {\n    if (d.length() > 0 && d.charAt(d.length() - 1) == 'Z') {\n      try {\n        return new Date(ISO_8601_PARSER.parse(d, Instant::from).toEpochMilli());\n      } catch (Exception e) {\n        //ignore; perhaps we can parse with one of the formats below...\n      }\n    }\n    return parseDate(d, fmts, null);\n  }\n\n","sourceOld":"  public static Date parseDate(String d, Collection<String> fmts) throws ParseException {\n    // 2007-04-26T08:05:04Z\n    if (d.endsWith(\"Z\") && d.length() > 20) {\n      return getThreadLocalDateFormat().parse(d);\n    }\n    return parseDate(d, fmts, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0982ea5c2b7f50890065ccf2b59068efc40eaafe","date":1538167811,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractionDateUtil#parseDate(String,Collection[String]).mjava","sourceNew":null,"sourceOld":"  public static Date parseDate(String d, Collection<String> fmts) throws ParseException {\n    if (d.length() > 0 && d.charAt(d.length() - 1) == 'Z') {\n      try {\n        return new Date(ISO_8601_PARSER.parse(d, Instant::from).toEpochMilli());\n      } catch (Exception e) {\n        //ignore; perhaps we can parse with one of the formats below...\n      }\n    }\n    return parseDate(d, fmts, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69":["7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0982ea5c2b7f50890065ccf2b59068efc40eaafe":["7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69"],"7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0982ea5c2b7f50890065ccf2b59068efc40eaafe"]},"commit2Childs":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69":["0982ea5c2b7f50890065ccf2b59068efc40eaafe"],"7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba":["7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69"],"0982ea5c2b7f50890065ccf2b59068efc40eaafe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}