{"path":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getCore().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","sourceNew":null,"sourceOld":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getCore().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/response/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","sourceNew":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getCore().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getCore().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getCore().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7018a7db55be9b8846650dfafa31a80f05867862","date":1309541464,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","sourceNew":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getCore().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      result.setErrorListener(xmllog);\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getCore().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","sourceNew":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getCore().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      result.setErrorListener(xmllog);\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getCore().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","sourceNew":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getCore().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      result.setErrorListener(xmllog);\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getCore().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","sourceNew":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getCore().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      result.setErrorListener(xmllog);\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getCore().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      result.setErrorListener(xmllog);\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","sourceNew":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getCore().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      result.setErrorListener(xmllog);\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getCore().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      result.setErrorListener(xmllog);\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/response/XSLTResponseWriter#getTransformer(SolrQueryRequest).mjava","sourceNew":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getCore().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      result.setErrorListener(xmllog);\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Get Transformer from request context, or from TransformerProvider.\n   *  This allows either getContentType(...) or write(...) to instantiate the Transformer,\n   *  depending on which one is called first, then the other one reuses the same Transformer\n   */\n  protected Transformer getTransformer(SolrQueryRequest request) throws IOException {\n    final String xslt = request.getParams().get(TRANSFORM_PARAM,null);\n    if(xslt==null) {\n      throw new IOException(\"'\" + TRANSFORM_PARAM + \"' request parameter is required to use the XSLTResponseWriter\");\n    }\n    // not the cleanest way to achieve this\n    SolrConfig solrConfig = request.getCore().getSolrConfig();\n    // no need to synchronize access to context, right? \n    // Nothing else happens with it at the same time\n    final Map<Object,Object> ctx = request.getContext();\n    Transformer result = (Transformer)ctx.get(CONTEXT_TRANSFORMER_KEY);\n    if(result==null) {\n      result = TransformerProvider.instance.getTransformer(solrConfig, xslt,xsltCacheLifetimeSeconds.intValue());\n      result.setErrorListener(xmllog);\n      ctx.put(CONTEXT_TRANSFORMER_KEY,result);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["7018a7db55be9b8846650dfafa31a80f05867862","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1da8d55113b689b06716246649de6f62430f15c0","7018a7db55be9b8846650dfafa31a80f05867862"],"7018a7db55be9b8846650dfafa31a80f05867862":["1da8d55113b689b06716246649de6f62430f15c0"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["1da8d55113b689b06716246649de6f62430f15c0","7018a7db55be9b8846650dfafa31a80f05867862"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7018a7db55be9b8846650dfafa31a80f05867862"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"7018a7db55be9b8846650dfafa31a80f05867862":["c26f00b574427b55127e869b935845554afde1fa","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a258fbb26824fd104ed795e5d9033d2d040049ee"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"1da8d55113b689b06716246649de6f62430f15c0":["d083e83f225b11e5fdd900e83d26ddb385b6955c","7018a7db55be9b8846650dfafa31a80f05867862","817d8435e9135b756f08ce6710ab0baac51bdf88"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}