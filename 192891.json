{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","sourceNew":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new MockAnalyzer(random()));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new MockAnalyzer(random()));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new MockAnalyzer(random()));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new MockAnalyzer(random()));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","sourceNew":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new MockAnalyzer(random()));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    // expected exception, array length differs\n    expectThrows(IllegalArgumentException.class, () -> {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      QueryParserUtil\n          .parse(queries, fields, flags2, new MockAnalyzer(random()));\n    });\n  }\n\n","sourceOld":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new MockAnalyzer(random()));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new MockAnalyzer(random()));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}