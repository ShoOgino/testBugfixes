{"path":"src/java/org/apache/solr/handler/component/QueryComponent#comparatorInt(IndexReader,String,Parser).mjava","commits":[{"id":"9c4ed8b555b728a98390ef8546612f6b94f9987f","date":1240848313,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#comparatorInt(IndexReader,String,Parser).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#comparatorInt(IndexReader,String).mjava","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to a field containing integers.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg integer values.\n   * @param parser used to parse term values, null for default.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorInt (final IndexReader reader, final String fieldname, Parser parser)\n  throws IOException {\n    final String field = fieldname.intern();\n    final int[] fieldOrder = parser == null ? FieldCache.DEFAULT.getInts (reader, field) : FieldCache.DEFAULT.getInts (reader, field, (IntParser) parser);\n    return new ScoreDocComparator() {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final int fi = fieldOrder[i.doc];\n        final int fj = fieldOrder[j.doc];\n        if (fi < fj) return -1;\n        if (fi > fj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return new Integer (fieldOrder[i.doc]);\n      }\n\n      public int sortType() {\n        return SortField.INT;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns a comparator for sorting hits according to a field containing integers.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg integer values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorInt (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    final int[] fieldOrder = FieldCache.DEFAULT.getInts (reader, field);\n    return new ScoreDocComparator() {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final int fi = fieldOrder[i.doc];\n        final int fj = fieldOrder[j.doc];\n        if (fi < fj) return -1;\n        if (fi > fj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return new Integer (fieldOrder[i.doc]);\n      }\n\n      public int sortType() {\n        return SortField.INT;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3da65606b2cf2b2357063f779126d1521733034","date":1249401214,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#comparatorInt(IndexReader,String,Parser).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a comparator for sorting hits according to a field containing integers.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg integer values.\n   * @param parser used to parse term values, null for default.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorInt (final IndexReader reader, final String fieldname, Parser parser)\n  throws IOException {\n    final String field = fieldname.intern();\n    final int[] fieldOrder = parser == null ? FieldCache.DEFAULT.getInts (reader, field) : FieldCache.DEFAULT.getInts (reader, field, (IntParser) parser);\n    return new ScoreDocComparator() {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final int fi = fieldOrder[i.doc];\n        final int fj = fieldOrder[j.doc];\n        if (fi < fj) return -1;\n        if (fi > fj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return new Integer (fieldOrder[i.doc]);\n      }\n\n      public int sortType() {\n        return SortField.INT;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9c4ed8b555b728a98390ef8546612f6b94f9987f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c3da65606b2cf2b2357063f779126d1521733034":["9c4ed8b555b728a98390ef8546612f6b94f9987f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9c4ed8b555b728a98390ef8546612f6b94f9987f":["c3da65606b2cf2b2357063f779126d1521733034"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9c4ed8b555b728a98390ef8546612f6b94f9987f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3da65606b2cf2b2357063f779126d1521733034":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3da65606b2cf2b2357063f779126d1521733034","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}