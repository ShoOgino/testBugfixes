{"path":"src/demo/org/apache/lucene/demo/html/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","commits":[{"id":"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef","date":1063245093,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/html/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","pathOld":"/dev/null","sourceNew":"   /**\n    * Returns a detailed message for the Error when it is thrown by the\n    * token manager to indicate a lexical error.\n    * Parameters : \n    *    EOFSeen     : indicates if EOF caused the lexicl error\n    *    curLexState : lexical state in which this error occured\n    *    errorLine   : line number when the error occured\n    *    errorColumn : column number when the error occured\n    *    errorAfter  : prefix that was seen before this error occured\n    *    curchar     : the offending character\n    * Note: You can customize the lexical error message by modifying this method.\n    */\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n      return(\"Lexical error at line \" +\n           errorLine + \", column \" +\n           errorColumn + \".  Encountered: \" +\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c80895407a253178cac9acedf29e0d70c1365b50","date":1255908073,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/html/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","pathOld":"src/demo/org/apache/lucene/demo/html/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","sourceNew":"   /**\n    * Returns a detailed message for the Error when it is thrown by the\n    * token manager to indicate a lexical error.\n    * Parameters :\n    *    EOFSeen     : indicates if EOF caused the lexical error\n    *    curLexState : lexical state in which this error occurred\n    *    errorLine   : line number when the error occurred\n    *    errorColumn : column number when the error occurred\n    *    errorAfter  : prefix that was seen before this error occurred\n    *    curchar     : the offending character\n    * Note: You can customize the lexical error message by modifying this method.\n    */\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n      return(\"Lexical error at line \" +\n           errorLine + \", column \" +\n           errorColumn + \".  Encountered: \" +\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n   }\n\n","sourceOld":"   /**\n    * Returns a detailed message for the Error when it is thrown by the\n    * token manager to indicate a lexical error.\n    * Parameters : \n    *    EOFSeen     : indicates if EOF caused the lexicl error\n    *    curLexState : lexical state in which this error occured\n    *    errorLine   : line number when the error occured\n    *    errorColumn : column number when the error occured\n    *    errorAfter  : prefix that was seen before this error occured\n    *    curchar     : the offending character\n    * Note: You can customize the lexical error message by modifying this method.\n    */\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n      return(\"Lexical error at line \" +\n           errorLine + \", column \" +\n           errorColumn + \".  Encountered: \" +\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/demo/org/apache/lucene/demo/html/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","pathOld":"src/demo/org/apache/lucene/demo/html/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","sourceNew":"   /**\n    * Returns a detailed message for the Error when it is thrown by the\n    * token manager to indicate a lexical error.\n    * Parameters :\n    *    EOFSeen     : indicates if EOF caused the lexical error\n    *    curLexState : lexical state in which this error occurred\n    *    errorLine   : line number when the error occurred\n    *    errorColumn : column number when the error occurred\n    *    errorAfter  : prefix that was seen before this error occurred\n    *    curchar     : the offending character\n    * Note: You can customize the lexical error message by modifying this method.\n    */\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n      return(\"Lexical error at line \" +\n           errorLine + \", column \" +\n           errorColumn + \".  Encountered: \" +\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n   }\n\n","sourceOld":"   /**\n    * Returns a detailed message for the Error when it is thrown by the\n    * token manager to indicate a lexical error.\n    * Parameters :\n    *    EOFSeen     : indicates if EOF caused the lexical error\n    *    curLexState : lexical state in which this error occurred\n    *    errorLine   : line number when the error occurred\n    *    errorColumn : column number when the error occurred\n    *    errorAfter  : prefix that was seen before this error occurred\n    *    curchar     : the offending character\n    * Note: You can customize the lexical error message by modifying this method.\n    */\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n      return(\"Lexical error at line \" +\n           errorLine + \", column \" +\n           errorColumn + \".  Encountered: \" +\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c80895407a253178cac9acedf29e0d70c1365b50":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c80895407a253178cac9acedf29e0d70c1365b50"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"c80895407a253178cac9acedf29e0d70c1365b50":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["c80895407a253178cac9acedf29e0d70c1365b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}