{"path":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#NRTCachingDirectory(Directory,double,double).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#NRTCachingDirectory(Directory,double,double).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/NRTCachingDirectory#NRTCachingDirectory(Directory,double,double).mjava","sourceNew":"  /**\n   *  We will cache a newly created output if 1) it's a\n   *  flush or a merge and the estimated size of the merged segment is <=\n   *  maxMergeSizeMB, and 2) the total cached bytes is <=\n   *  maxCachedMB */\n  public NRTCachingDirectory(Directory delegate, double maxMergeSizeMB, double maxCachedMB) {\n    this.delegate = delegate;\n    maxMergeSizeBytes = (long) (maxMergeSizeMB*1024*1024);\n    maxCachedBytes = (long) (maxCachedMB*1024*1024);\n  }\n\n","sourceOld":"  /**\n   *  We will cache a newly created output if 1) it's a\n   *  flush or a merge and the estimated size of the merged segment is <=\n   *  maxMergeSizeMB, and 2) the total cached bytes is <=\n   *  maxCachedMB */\n  public NRTCachingDirectory(Directory delegate, double maxMergeSizeMB, double maxCachedMB) {\n    this.delegate = delegate;\n    maxMergeSizeBytes = (long) (maxMergeSizeMB*1024*1024);\n    maxCachedBytes = (long) (maxCachedMB*1024*1024);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a04e4daf0316a981f526f447259cbdfb9ecba03","date":1404918762,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#NRTCachingDirectory(Directory,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#NRTCachingDirectory(Directory,double,double).mjava","sourceNew":"  /**\n   *  We will cache a newly created output if 1) it's a\n   *  flush or a merge and the estimated size of the merged segment is <=\n   *  maxMergeSizeMB, and 2) the total cached bytes is <=\n   *  maxCachedMB */\n  public NRTCachingDirectory(Directory delegate, double maxMergeSizeMB, double maxCachedMB) {\n    super(delegate);\n    maxMergeSizeBytes = (long) (maxMergeSizeMB*1024*1024);\n    maxCachedBytes = (long) (maxCachedMB*1024*1024);\n  }\n\n","sourceOld":"  /**\n   *  We will cache a newly created output if 1) it's a\n   *  flush or a merge and the estimated size of the merged segment is <=\n   *  maxMergeSizeMB, and 2) the total cached bytes is <=\n   *  maxCachedMB */\n  public NRTCachingDirectory(Directory delegate, double maxMergeSizeMB, double maxCachedMB) {\n    this.delegate = delegate;\n    maxMergeSizeBytes = (long) (maxMergeSizeMB*1024*1024);\n    maxCachedBytes = (long) (maxCachedMB*1024*1024);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#NRTCachingDirectory(Directory,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#NRTCachingDirectory(Directory,double,double).mjava","sourceNew":"  /**\n   *  We will cache a newly created output if 1) it's a\n   *  flush or a merge and the estimated size of the merged segment is \n   *  {@code <= maxMergeSizeMB}, and 2) the total cached bytes is \n   *  {@code <= maxCachedMB} */\n  public NRTCachingDirectory(Directory delegate, double maxMergeSizeMB, double maxCachedMB) {\n    super(delegate);\n    maxMergeSizeBytes = (long) (maxMergeSizeMB*1024*1024);\n    maxCachedBytes = (long) (maxCachedMB*1024*1024);\n  }\n\n","sourceOld":"  /**\n   *  We will cache a newly created output if 1) it's a\n   *  flush or a merge and the estimated size of the merged segment is <=\n   *  maxMergeSizeMB, and 2) the total cached bytes is <=\n   *  maxCachedMB */\n  public NRTCachingDirectory(Directory delegate, double maxMergeSizeMB, double maxCachedMB) {\n    super(delegate);\n    maxMergeSizeBytes = (long) (maxMergeSizeMB*1024*1024);\n    maxCachedBytes = (long) (maxCachedMB*1024*1024);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#NRTCachingDirectory(Directory,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#NRTCachingDirectory(Directory,double,double).mjava","sourceNew":"  /**\n   *  We will cache a newly created output if 1) it's a\n   *  flush or a merge and the estimated size of the merged segment is \n   *  {@code <= maxMergeSizeMB}, and 2) the total cached bytes is \n   *  {@code <= maxCachedMB} */\n  public NRTCachingDirectory(Directory delegate, double maxMergeSizeMB, double maxCachedMB) {\n    super(delegate);\n    maxMergeSizeBytes = (long) (maxMergeSizeMB * 1024 * 1024);\n    maxCachedBytes = (long) (maxCachedMB * 1024 * 1024);\n  }\n\n","sourceOld":"  /**\n   *  We will cache a newly created output if 1) it's a\n   *  flush or a merge and the estimated size of the merged segment is \n   *  {@code <= maxMergeSizeMB}, and 2) the total cached bytes is \n   *  {@code <= maxCachedMB} */\n  public NRTCachingDirectory(Directory delegate, double maxMergeSizeMB, double maxCachedMB) {\n    super(delegate);\n    maxMergeSizeBytes = (long) (maxMergeSizeMB*1024*1024);\n    maxCachedBytes = (long) (maxCachedMB*1024*1024);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["3a04e4daf0316a981f526f447259cbdfb9ecba03"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"3a04e4daf0316a981f526f447259cbdfb9ecba03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["d77dafd89756a5161d244985903e3487ca109182"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3a04e4daf0316a981f526f447259cbdfb9ecba03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a04e4daf0316a981f526f447259cbdfb9ecba03":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}