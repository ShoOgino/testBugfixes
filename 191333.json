{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","commits":[{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seek(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seek(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seek(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seek(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seek(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seek(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seek(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seek(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seek(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator(null);\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator(null);\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copyBytes(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator(null);\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator(null);\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copyBytes(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator(null);\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copyBytes(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e6e919043fa85ee891123768dd655a98edbbf63c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3cc749c053615f5871f3b95715fe292f34e70a53":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"2553b00f699380c64959ccb27991289aae87be2e":["79c2cb24929f2649a8875fb629086171f914d5ce","fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","fd9cc9d77712aba3662f24632df7539ab75e3667"],"e6e919043fa85ee891123768dd655a98edbbf63c":["3cc749c053615f5871f3b95715fe292f34e70a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","fd9cc9d77712aba3662f24632df7539ab75e3667","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"79c2cb24929f2649a8875fb629086171f914d5ce":["2553b00f699380c64959ccb27991289aae87be2e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["e6e919043fa85ee891123768dd655a98edbbf63c"],"2553b00f699380c64959ccb27991289aae87be2e":[],"fd9cc9d77712aba3662f24632df7539ab75e3667":["3cc749c053615f5871f3b95715fe292f34e70a53","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"e6e919043fa85ee891123768dd655a98edbbf63c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}