{"path":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,IndexReader.AtomicReaderContext).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,IndexReader.AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,IndexReader.AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader, field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=1; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != 0);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader, field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=1; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != 0);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,IndexReader.AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,IndexReader.AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader, field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=1; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != 0);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader, field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=1; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != 0);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,IndexReader.AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,IndexReader.AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader, field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=1; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != 0);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader, field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=1; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != 0);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32e7c2a80dad193a76a03ec46b878969d469ff6c","date":1323722006,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,IndexReader.AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,IndexReader.AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader, field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=1; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != 0);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader, field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=1; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != 0);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,IndexReader.AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,IndexReader.AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader, field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=1; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != 0);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader, field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=1; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != 0);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96d207426bd26fa5c1014e26d21d87603aea68b7","date":1327944562,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,IndexReader.AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=1; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != 0);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader, field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=1; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != 0);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,IndexReader.AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=1; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != 0);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader, field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=1; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != 0);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96d207426bd26fa5c1014e26d21d87603aea68b7":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["c26f00b574427b55127e869b935845554afde1fa"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d638301ad1cfcae567b681b893bc8781f0ee48a5","96d207426bd26fa5c1014e26d21d87603aea68b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["c26f00b574427b55127e869b935845554afde1fa","32e7c2a80dad193a76a03ec46b878969d469ff6c"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["32e7c2a80dad193a76a03ec46b878969d469ff6c","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["96d207426bd26fa5c1014e26d21d87603aea68b7","5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}