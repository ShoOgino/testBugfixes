{"path":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#collect(LeafCollector,int).mjava","commits":[{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#collect(LeafCollector,int).mjava","pathOld":"/dev/null","sourceNew":"    protected void collect(LeafCollector collector, int i) throws IOException {\n      final int[] docs = this.docs.get(i);\n      final float[] scores = this.scores.get(i);\n      assert docs.length == scores.length;\n      final CachedScorer scorer = new CachedScorer();\n      collector.setScorer(scorer);\n      for (int j = 0; j < docs.length; ++j) {\n        scorer.doc = docs[j];\n        scorer.score = scores[j];\n        collector.collect(scorer.doc);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#collect(LeafCollector,int).mjava","pathOld":"/dev/null","sourceNew":"    protected void collect(LeafCollector collector, int i) throws IOException {\n      final int[] docs = this.docs.get(i);\n      final float[] scores = this.scores.get(i);\n      assert docs.length == scores.length;\n      final CachedScorer scorer = new CachedScorer();\n      collector.setScorer(scorer);\n      for (int j = 0; j < docs.length; ++j) {\n        scorer.doc = docs[j];\n        scorer.score = scores[j];\n        collector.collect(scorer.doc);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e7cf486535cf187cb3745154ca5dd3de3bd2999","date":1449256632,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#collect(LeafCollector,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#collect(LeafCollector,int).mjava","sourceNew":"    @Override\n    protected void collect(LeafCollector collector, int i) throws IOException {\n      final int[] docs = this.docs.get(i);\n      final float[] scores = this.scores.get(i);\n      assert docs.length == scores.length;\n      final CachedScorer scorer = new CachedScorer();\n      collector.setScorer(scorer);\n      for (int j = 0; j < docs.length; ++j) {\n        scorer.doc = docs[j];\n        scorer.score = scores[j];\n        collector.collect(scorer.doc);\n      }\n    }\n\n","sourceOld":"    protected void collect(LeafCollector collector, int i) throws IOException {\n      final int[] docs = this.docs.get(i);\n      final float[] scores = this.scores.get(i);\n      assert docs.length == scores.length;\n      final CachedScorer scorer = new CachedScorer();\n      collector.setScorer(scorer);\n      for (int j = 0; j < docs.length; ++j) {\n        scorer.doc = docs[j];\n        scorer.score = scores[j];\n        collector.collect(scorer.doc);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#collect(LeafCollector,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#collect(LeafCollector,int).mjava","sourceNew":"    @Override\n    protected void collect(LeafCollector collector, int i) throws IOException {\n      final int[] docs = this.docs.get(i);\n      final float[] scores = this.scores.get(i);\n      assert docs.length == scores.length;\n      final CachedScorable scorer = new CachedScorable();\n      collector.setScorer(scorer);\n      for (int j = 0; j < docs.length; ++j) {\n        scorer.doc = docs[j];\n        scorer.score = scores[j];\n        collector.collect(scorer.doc);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void collect(LeafCollector collector, int i) throws IOException {\n      final int[] docs = this.docs.get(i);\n      final float[] scores = this.scores.get(i);\n      assert docs.length == scores.length;\n      final CachedScorer scorer = new CachedScorer();\n      collector.setScorer(scorer);\n      for (int j = 0; j < docs.length; ++j) {\n        scorer.doc = docs[j];\n        scorer.score = scores[j];\n        collector.collect(scorer.doc);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["7e7cf486535cf187cb3745154ca5dd3de3bd2999"],"ae73da626f97850c922c42736f808d0378e165f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7e7cf486535cf187cb3745154ca5dd3de3bd2999":["ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"]},"commit2Childs":{"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","7e7cf486535cf187cb3745154ca5dd3de3bd2999"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7e7cf486535cf187cb3745154ca5dd3de3bd2999":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}