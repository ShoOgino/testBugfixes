{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#flushTermsBlock(int,int).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#flushTermsBlock(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#flushTermsBlock(int,int).mjava","sourceNew":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n    //System.out.println(\"SEPW: flushTermsBlock: start=\" + start + \" count=\" + count + \" pendingTerms.size()=\" + pendingTerms.size() + \" termsOut.fp=\" + termsOut.getFilePointer());\n    assert indexBytesWriter.getFilePointer() == 0;\n    final int absStart = pendingTerms.size() - start;\n    final List<PendingTerm> slice = pendingTerms.subList(absStart, absStart+count);\n\n    long lastPayloadFP = 0;\n    long lastSkipFP = 0;\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    final PendingTerm firstTerm = slice.get(0);\n    final IntIndexOutput.Index docIndexFlush = firstTerm.docIndex;\n    final IntIndexOutput.Index freqIndexFlush = firstTerm.freqIndex;\n    final IntIndexOutput.Index posIndexFlush = firstTerm.posIndex;\n\n    for(int idx=0;idx<slice.size();idx++) {\n      final boolean isFirstTerm = idx == 0;\n      final PendingTerm t = slice.get(idx);\n      //System.out.println(\"  write idx=\" + idx + \" docIndex=\" + t.docIndex);\n      docIndexFlush.copyFrom(t.docIndex, false);\n      docIndexFlush.write(indexBytesWriter, isFirstTerm);\n      if (indexOptions != IndexOptions.DOCS_ONLY) {\n        freqIndexFlush.copyFrom(t.freqIndex, false);\n        freqIndexFlush.write(indexBytesWriter, isFirstTerm);\n        //System.out.println(\"    freqIndex=\" + t.freqIndex);\n        if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          posIndexFlush.copyFrom(t.posIndex, false);\n          posIndexFlush.write(indexBytesWriter, isFirstTerm);\n          //System.out.println(\"    posIndex=\" + t.posIndex);\n          if (storePayloads) {\n            //System.out.println(\"    payloadFP=\" + t.payloadFP);\n            if (isFirstTerm) {\n              indexBytesWriter.writeVLong(t.payloadFP);\n            } else {\n              indexBytesWriter.writeVLong(t.payloadFP - lastPayloadFP);\n            }\n            lastPayloadFP = t.payloadFP;\n          }\n        }\n      }\n\n      if (t.skipFP != -1) {\n        if (isFirstTerm) {\n          indexBytesWriter.writeVLong(t.skipFP);\n        } else {\n          indexBytesWriter.writeVLong(t.skipFP - lastSkipFP);\n        }\n        lastSkipFP = t.skipFP;\n        //System.out.println(\"    skipFP=\" + t.skipFP);\n      }\n    }\n\n    //System.out.println(\"  numBytes=\" + indexBytesWriter.getFilePointer());\n    termsOut.writeVLong((int) indexBytesWriter.getFilePointer());\n    indexBytesWriter.writeTo(termsOut);\n    indexBytesWriter.reset();\n    slice.clear();\n  }\n\n","sourceOld":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n    //System.out.println(\"SEPW: flushTermsBlock: start=\" + start + \" count=\" + count + \" pendingTerms.size()=\" + pendingTerms.size() + \" termsOut.fp=\" + termsOut.getFilePointer());\n    assert indexBytesWriter.getFilePointer() == 0;\n    final int absStart = pendingTerms.size() - start;\n    final List<PendingTerm> slice = pendingTerms.subList(absStart, absStart+count);\n\n    long lastPayloadFP = 0;\n    long lastSkipFP = 0;\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    final PendingTerm firstTerm = slice.get(0);\n    final IntIndexOutput.Index docIndexFlush = firstTerm.docIndex;\n    final IntIndexOutput.Index freqIndexFlush = firstTerm.freqIndex;\n    final IntIndexOutput.Index posIndexFlush = firstTerm.posIndex;\n\n    for(int idx=0;idx<slice.size();idx++) {\n      final boolean isFirstTerm = idx == 0;\n      final PendingTerm t = slice.get(idx);\n      //System.out.println(\"  write idx=\" + idx + \" docIndex=\" + t.docIndex);\n      docIndexFlush.copyFrom(t.docIndex, false);\n      docIndexFlush.write(indexBytesWriter, isFirstTerm);\n      if (indexOptions != IndexOptions.DOCS_ONLY) {\n        freqIndexFlush.copyFrom(t.freqIndex, false);\n        freqIndexFlush.write(indexBytesWriter, isFirstTerm);\n        //System.out.println(\"    freqIndex=\" + t.freqIndex);\n        if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          posIndexFlush.copyFrom(t.posIndex, false);\n          posIndexFlush.write(indexBytesWriter, isFirstTerm);\n          //System.out.println(\"    posIndex=\" + t.posIndex);\n          if (storePayloads) {\n            //System.out.println(\"    payloadFP=\" + t.payloadFP);\n            if (isFirstTerm) {\n              indexBytesWriter.writeVLong(t.payloadFP);\n            } else {\n              indexBytesWriter.writeVLong(t.payloadFP - lastPayloadFP);\n            }\n            lastPayloadFP = t.payloadFP;\n          }\n        }\n      }\n\n      if (t.skipFP != -1) {\n        if (isFirstTerm) {\n          indexBytesWriter.writeVLong(t.skipFP);\n        } else {\n          indexBytesWriter.writeVLong(t.skipFP - lastSkipFP);\n        }\n        lastSkipFP = t.skipFP;\n        //System.out.println(\"    skipFP=\" + t.skipFP);\n      }\n    }\n\n    //System.out.println(\"  numBytes=\" + indexBytesWriter.getFilePointer());\n    termsOut.writeVLong((int) indexBytesWriter.getFilePointer());\n    indexBytesWriter.writeTo(termsOut);\n    indexBytesWriter.reset();\n    slice.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd65164c607d597fe7bb977735aa1ddfff22ed36","date":1377140532,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#flushTermsBlock(int,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#flushTermsBlock(int,int).mjava","sourceNew":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n    //System.out.println(\"SEPW: flushTermsBlock: start=\" + start + \" count=\" + count + \" pendingTerms.size()=\" + pendingTerms.size() + \" termsOut.fp=\" + termsOut.getFilePointer());\n    assert indexBytesWriter.getFilePointer() == 0;\n    final int absStart = pendingTerms.size() - start;\n    final List<PendingTerm> slice = pendingTerms.subList(absStart, absStart+count);\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    long lastSkipFP = 0;\n    long lastPayloadFP = 0;\n\n    boolean isFirstTerm = true;\n\n    for(int idx=0;idx<slice.size();idx++) {\n      if (isFirstTerm) {\n        lastState = slice.get(idx);\n      }\n      final PendingTerm t = slice.get(idx);\n      //System.out.println(\" last(pure): doc=\"+lastState.docIndex +\" frq=\" + lastState.freqIndex+\" pos=\"+lastState.posIndex);\n      lastState.docIndex.copyFrom(t.docIndex, false);\n      lastState.docIndex.write(indexBytesWriter, isFirstTerm);\n      //System.out.print(\" doc=\" + lastState.docIndex + \" 1FP=\" + indexBytesWriter.getFilePointer());\n      if (indexOptions != IndexOptions.DOCS_ONLY) {\n        lastState.freqIndex.copyFrom(t.freqIndex, false);\n        lastState.freqIndex.write(indexBytesWriter, isFirstTerm);\n        //System.out.print(\" frq=\" + lastState.freqIndex + \" 2FP=\" + indexBytesWriter.getFilePointer());\n        if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          lastState.posIndex.copyFrom(t.posIndex, false);\n          lastState.posIndex.write(indexBytesWriter, isFirstTerm);\n          //System.out.print(\" pos=\" + lastState.posIndex + \" 3FP=\" + indexBytesWriter.getFilePointer());\n          if (storePayloads) {\n            if (isFirstTerm) {\n              //System.out.print(\" payFP=\" + (t.payloadFP));\n              indexBytesWriter.writeVLong(t.payloadFP);\n            } else {\n              //System.out.print(\" payFP=\" + (t.payloadFP - lastPayloadFP));\n              indexBytesWriter.writeVLong(t.payloadFP - lastPayloadFP);\n            }\n            lastPayloadFP = t.payloadFP;\n          }\n        }\n      }\n      if (t.skipFP != -1) {\n        if (isFirstTerm) {\n          //System.out.print(\" a.skipFP=\" + (t.skipFP));\n          indexBytesWriter.writeVLong(t.skipFP);\n        } else {\n          //System.out.print(\" b.skipFP=\" + (t.skipFP - lastSkipFP));\n          indexBytesWriter.writeVLong(t.skipFP - lastSkipFP);\n        }\n        lastSkipFP = t.skipFP;\n      }\n      //System.out.println();\n      //System.out.println(\" last(copy): doc=\"+lastState.docIndex +\" frq=\" + lastState.freqIndex+\" pos=\"+lastState.posIndex);\n      isFirstTerm = false;\n    }\n\n    termsOut.writeVLong((int) indexBytesWriter.getFilePointer());\n    indexBytesWriter.writeTo(termsOut);\n    indexBytesWriter.reset();\n    slice.clear();\n  }\n\n","sourceOld":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n    //System.out.println(\"SEPW: flushTermsBlock: start=\" + start + \" count=\" + count + \" pendingTerms.size()=\" + pendingTerms.size() + \" termsOut.fp=\" + termsOut.getFilePointer());\n    assert indexBytesWriter.getFilePointer() == 0;\n    final int absStart = pendingTerms.size() - start;\n    final List<PendingTerm> slice = pendingTerms.subList(absStart, absStart+count);\n\n    long lastPayloadFP = 0;\n    long lastSkipFP = 0;\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    final PendingTerm firstTerm = slice.get(0);\n    final IntIndexOutput.Index docIndexFlush = firstTerm.docIndex;\n    final IntIndexOutput.Index freqIndexFlush = firstTerm.freqIndex;\n    final IntIndexOutput.Index posIndexFlush = firstTerm.posIndex;\n\n    for(int idx=0;idx<slice.size();idx++) {\n      final boolean isFirstTerm = idx == 0;\n      final PendingTerm t = slice.get(idx);\n      //System.out.println(\"  write idx=\" + idx + \" docIndex=\" + t.docIndex);\n      docIndexFlush.copyFrom(t.docIndex, false);\n      docIndexFlush.write(indexBytesWriter, isFirstTerm);\n      if (indexOptions != IndexOptions.DOCS_ONLY) {\n        freqIndexFlush.copyFrom(t.freqIndex, false);\n        freqIndexFlush.write(indexBytesWriter, isFirstTerm);\n        //System.out.println(\"    freqIndex=\" + t.freqIndex);\n        if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          posIndexFlush.copyFrom(t.posIndex, false);\n          posIndexFlush.write(indexBytesWriter, isFirstTerm);\n          //System.out.println(\"    posIndex=\" + t.posIndex);\n          if (storePayloads) {\n            //System.out.println(\"    payloadFP=\" + t.payloadFP);\n            if (isFirstTerm) {\n              indexBytesWriter.writeVLong(t.payloadFP);\n            } else {\n              indexBytesWriter.writeVLong(t.payloadFP - lastPayloadFP);\n            }\n            lastPayloadFP = t.payloadFP;\n          }\n        }\n      }\n\n      if (t.skipFP != -1) {\n        if (isFirstTerm) {\n          indexBytesWriter.writeVLong(t.skipFP);\n        } else {\n          indexBytesWriter.writeVLong(t.skipFP - lastSkipFP);\n        }\n        lastSkipFP = t.skipFP;\n        //System.out.println(\"    skipFP=\" + t.skipFP);\n      }\n    }\n\n    //System.out.println(\"  numBytes=\" + indexBytesWriter.getFilePointer());\n    termsOut.writeVLong((int) indexBytesWriter.getFilePointer());\n    indexBytesWriter.writeTo(termsOut);\n    indexBytesWriter.reset();\n    slice.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#flushTermsBlock(int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n    //System.out.println(\"SEPW: flushTermsBlock: start=\" + start + \" count=\" + count + \" pendingTerms.size()=\" + pendingTerms.size() + \" termsOut.fp=\" + termsOut.getFilePointer());\n    assert indexBytesWriter.getFilePointer() == 0;\n    final int absStart = pendingTerms.size() - start;\n    final List<PendingTerm> slice = pendingTerms.subList(absStart, absStart+count);\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    long lastSkipFP = 0;\n    long lastPayloadFP = 0;\n\n    boolean isFirstTerm = true;\n\n    for(int idx=0;idx<slice.size();idx++) {\n      if (isFirstTerm) {\n        lastState = slice.get(idx);\n      }\n      final PendingTerm t = slice.get(idx);\n      //System.out.println(\" last(pure): doc=\"+lastState.docIndex +\" frq=\" + lastState.freqIndex+\" pos=\"+lastState.posIndex);\n      lastState.docIndex.copyFrom(t.docIndex, false);\n      lastState.docIndex.write(indexBytesWriter, isFirstTerm);\n      //System.out.print(\" doc=\" + lastState.docIndex + \" 1FP=\" + indexBytesWriter.getFilePointer());\n      if (indexOptions != IndexOptions.DOCS_ONLY) {\n        lastState.freqIndex.copyFrom(t.freqIndex, false);\n        lastState.freqIndex.write(indexBytesWriter, isFirstTerm);\n        //System.out.print(\" frq=\" + lastState.freqIndex + \" 2FP=\" + indexBytesWriter.getFilePointer());\n        if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          lastState.posIndex.copyFrom(t.posIndex, false);\n          lastState.posIndex.write(indexBytesWriter, isFirstTerm);\n          //System.out.print(\" pos=\" + lastState.posIndex + \" 3FP=\" + indexBytesWriter.getFilePointer());\n          if (storePayloads) {\n            if (isFirstTerm) {\n              //System.out.print(\" payFP=\" + (t.payloadFP));\n              indexBytesWriter.writeVLong(t.payloadFP);\n            } else {\n              //System.out.print(\" payFP=\" + (t.payloadFP - lastPayloadFP));\n              indexBytesWriter.writeVLong(t.payloadFP - lastPayloadFP);\n            }\n            lastPayloadFP = t.payloadFP;\n          }\n        }\n      }\n      if (t.skipFP != -1) {\n        if (isFirstTerm) {\n          //System.out.print(\" a.skipFP=\" + (t.skipFP));\n          indexBytesWriter.writeVLong(t.skipFP);\n        } else {\n          //System.out.print(\" b.skipFP=\" + (t.skipFP - lastSkipFP));\n          indexBytesWriter.writeVLong(t.skipFP - lastSkipFP);\n        }\n        lastSkipFP = t.skipFP;\n      }\n      //System.out.println();\n      //System.out.println(\" last(copy): doc=\"+lastState.docIndex +\" frq=\" + lastState.freqIndex+\" pos=\"+lastState.posIndex);\n      isFirstTerm = false;\n    }\n\n    termsOut.writeVLong((int) indexBytesWriter.getFilePointer());\n    indexBytesWriter.writeTo(termsOut);\n    indexBytesWriter.reset();\n    slice.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#flushTermsBlock(int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n    //System.out.println(\"SEPW: flushTermsBlock: start=\" + start + \" count=\" + count + \" pendingTerms.size()=\" + pendingTerms.size() + \" termsOut.fp=\" + termsOut.getFilePointer());\n    assert indexBytesWriter.getFilePointer() == 0;\n    final int absStart = pendingTerms.size() - start;\n    final List<PendingTerm> slice = pendingTerms.subList(absStart, absStart+count);\n\n    long lastPayloadFP = 0;\n    long lastSkipFP = 0;\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    final PendingTerm firstTerm = slice.get(0);\n    final IntIndexOutput.Index docIndexFlush = firstTerm.docIndex;\n    final IntIndexOutput.Index freqIndexFlush = firstTerm.freqIndex;\n    final IntIndexOutput.Index posIndexFlush = firstTerm.posIndex;\n\n    for(int idx=0;idx<slice.size();idx++) {\n      final boolean isFirstTerm = idx == 0;\n      final PendingTerm t = slice.get(idx);\n      //System.out.println(\"  write idx=\" + idx + \" docIndex=\" + t.docIndex);\n      docIndexFlush.copyFrom(t.docIndex, false);\n      docIndexFlush.write(indexBytesWriter, isFirstTerm);\n      if (indexOptions != IndexOptions.DOCS_ONLY) {\n        freqIndexFlush.copyFrom(t.freqIndex, false);\n        freqIndexFlush.write(indexBytesWriter, isFirstTerm);\n        //System.out.println(\"    freqIndex=\" + t.freqIndex);\n        if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          posIndexFlush.copyFrom(t.posIndex, false);\n          posIndexFlush.write(indexBytesWriter, isFirstTerm);\n          //System.out.println(\"    posIndex=\" + t.posIndex);\n          if (storePayloads) {\n            //System.out.println(\"    payloadFP=\" + t.payloadFP);\n            if (isFirstTerm) {\n              indexBytesWriter.writeVLong(t.payloadFP);\n            } else {\n              indexBytesWriter.writeVLong(t.payloadFP - lastPayloadFP);\n            }\n            lastPayloadFP = t.payloadFP;\n          }\n        }\n      }\n\n      if (t.skipFP != -1) {\n        if (isFirstTerm) {\n          indexBytesWriter.writeVLong(t.skipFP);\n        } else {\n          indexBytesWriter.writeVLong(t.skipFP - lastSkipFP);\n        }\n        lastSkipFP = t.skipFP;\n        //System.out.println(\"    skipFP=\" + t.skipFP);\n      }\n    }\n\n    //System.out.println(\"  numBytes=\" + indexBytesWriter.getFilePointer());\n    termsOut.writeVLong((int) indexBytesWriter.getFilePointer());\n    indexBytesWriter.writeTo(termsOut);\n    indexBytesWriter.reset();\n    slice.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["fd65164c607d597fe7bb977735aa1ddfff22ed36"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd65164c607d597fe7bb977735aa1ddfff22ed36":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f948dd442d23baa6cbb28daf77c8db78b351329"]},"commit2Childs":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["fd65164c607d597fe7bb977735aa1ddfff22ed36","2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"fd65164c607d597fe7bb977735aa1ddfff22ed36":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}