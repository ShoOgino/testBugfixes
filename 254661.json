{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#forEachReplica(Map[String,Map[String,List[ReplicaInfo]]],Consumer[ReplicaInfo]).mjava","commits":[{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#forEachReplica(Map[String,Map[String,List[ReplicaInfo]]],Consumer[ReplicaInfo]).mjava","pathOld":"/dev/null","sourceNew":"  public static void forEachReplica(Map<String, Map<String, List<ReplicaInfo>>> collectionVsShardVsReplicas, Consumer<ReplicaInfo> consumer) {\n    collectionVsShardVsReplicas.forEach((coll, shardVsReplicas) -> shardVsReplicas\n        .forEach((shard, replicaInfos) -> {\n          for (ReplicaInfo r : replicaInfos) consumer.accept(r);\n        }));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee5183ac042828ef74f90f0874eaba7daeb409bd","date":1536546264,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#forEachReplica(Map[String,Map[String,List[ReplicaInfo]]],Consumer[ReplicaInfo]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#forEachReplica(Map[String,Map[String,List[ReplicaInfo]]],Consumer[ReplicaInfo]).mjava","sourceNew":"  public static void forEachReplica(Map<String, Map<String, List<ReplicaInfo>>> collectionVsShardVsReplicas, Consumer<ReplicaInfo> consumer) {\n    collectionVsShardVsReplicas.forEach((coll, shardVsReplicas) -> shardVsReplicas\n        .forEach((shard, replicaInfos) -> {\n          for (int i = 0; i < replicaInfos.size(); i++) {\n            ReplicaInfo r = replicaInfos.get(i);\n            consumer.accept(r);\n          }\n        }));\n  }\n\n","sourceOld":"  public static void forEachReplica(Map<String, Map<String, List<ReplicaInfo>>> collectionVsShardVsReplicas, Consumer<ReplicaInfo> consumer) {\n    collectionVsShardVsReplicas.forEach((coll, shardVsReplicas) -> shardVsReplicas\n        .forEach((shard, replicaInfos) -> {\n          for (ReplicaInfo r : replicaInfos) consumer.accept(r);\n        }));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#forEachReplica(Map[String,Map[String,List[Replica]]],Consumer[Replica]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#forEachReplica(Map[String,Map[String,List[ReplicaInfo]]],Consumer[ReplicaInfo]).mjava","sourceNew":"  public static void forEachReplica(Map<String, Map<String, List<Replica>>> collectionVsShardVsReplicas, Consumer<Replica> consumer) {\n    collectionVsShardVsReplicas.forEach((coll, shardVsReplicas) -> shardVsReplicas\n        .forEach((shard, replicaInfos) -> {\n          for (int i = 0; i < replicaInfos.size(); i++) {\n            Replica r = replicaInfos.get(i);\n            consumer.accept(r);\n          }\n        }));\n  }\n\n","sourceOld":"  public static void forEachReplica(Map<String, Map<String, List<ReplicaInfo>>> collectionVsShardVsReplicas, Consumer<ReplicaInfo> consumer) {\n    collectionVsShardVsReplicas.forEach((coll, shardVsReplicas) -> shardVsReplicas\n        .forEach((shard, replicaInfos) -> {\n          for (int i = 0; i < replicaInfos.size(); i++) {\n            ReplicaInfo r = replicaInfos.get(i);\n            consumer.accept(r);\n          }\n        }));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}