{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#compareTermVectors(Terms,Terms,String).mjava","commits":[{"id":"761333d77c7f29123c00c93b107b743f32f012e6","date":1411986072,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#compareTermVectors(Terms,Terms,String).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#compareTermVectors(Terms,Terms,String).mjava","sourceNew":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator(null);\n    TermsEnum memTermEnum = memTerms.iterator(null);\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      DocsAndPositionsEnum docsPosEnum = termEnum.docsAndPositions(null, null, 0);\n      DocsAndPositionsEnum memDocsPosEnum = memTermEnum.docsAndPositions(null, null, 0);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(null));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","sourceOld":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator(null);\n    TermsEnum memTermEnum = memTerms.iterator(null);\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      DocsAndPositionsEnum docsPosEnum = termEnum.docsAndPositions(null, null, 0);\n      DocsAndPositionsEnum memDocsPosEnum = memTermEnum.docsAndPositions(null, null, 0);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(null));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#compareTermVectors(Terms,Terms,String).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#compareTermVectors(Terms,Terms,String).mjava","sourceNew":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator(null);\n    TermsEnum memTermEnum = memTerms.iterator(null);\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      DocsAndPositionsEnum docsPosEnum = termEnum.docsAndPositions(null, null, 0);\n      DocsAndPositionsEnum memDocsPosEnum = memTermEnum.docsAndPositions(null, null, 0);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(null));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","sourceOld":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator(null);\n    TermsEnum memTermEnum = memTerms.iterator(null);\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      DocsAndPositionsEnum docsPosEnum = termEnum.docsAndPositions(null, null, 0);\n      DocsAndPositionsEnum memDocsPosEnum = memTermEnum.docsAndPositions(null, null, 0);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(null));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb","date":1420550360,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#compareTermVectors(Terms,Terms,String).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#compareTermVectors(Terms,Terms,String).mjava","sourceNew":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator(null);\n    TermsEnum memTermEnum = memTerms.iterator(null);\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      DocsAndPositionsEnum docsPosEnum = termEnum.docsAndPositions(null, null, 0);\n      DocsAndPositionsEnum memDocsPosEnum = memTermEnum.docsAndPositions(null, null, 0);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(docsPosEnum.getPayload()));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","sourceOld":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator(null);\n    TermsEnum memTermEnum = memTerms.iterator(null);\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      DocsAndPositionsEnum docsPosEnum = termEnum.docsAndPositions(null, null, 0);\n      DocsAndPositionsEnum memDocsPosEnum = memTermEnum.docsAndPositions(null, null, 0);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(null));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#compareTermVectors(Terms,Terms,String).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#compareTermVectors(Terms,Terms,String).mjava","sourceNew":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator(null);\n    TermsEnum memTermEnum = memTerms.iterator(null);\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      PostingsEnum docsPosEnum = termEnum.postings(null, null, PostingsEnum.FLAG_POSITIONS);\n      PostingsEnum memDocsPosEnum = memTermEnum.postings(null, null, PostingsEnum.FLAG_POSITIONS);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(docsPosEnum.getPayload()));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","sourceOld":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator(null);\n    TermsEnum memTermEnum = memTerms.iterator(null);\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      DocsAndPositionsEnum docsPosEnum = termEnum.docsAndPositions(null, null, 0);\n      DocsAndPositionsEnum memDocsPosEnum = memTermEnum.docsAndPositions(null, null, 0);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(docsPosEnum.getPayload()));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#compareTermVectors(Terms,Terms,String).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#compareTermVectors(Terms,Terms,String).mjava","sourceNew":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator(null);\n    TermsEnum memTermEnum = memTerms.iterator(null);\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      PostingsEnum docsPosEnum = termEnum.postings(null, null, PostingsEnum.POSITIONS);\n      PostingsEnum memDocsPosEnum = memTermEnum.postings(null, null, PostingsEnum.POSITIONS);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(docsPosEnum.getPayload()));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","sourceOld":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator(null);\n    TermsEnum memTermEnum = memTerms.iterator(null);\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      PostingsEnum docsPosEnum = termEnum.postings(null, null, PostingsEnum.FLAG_POSITIONS);\n      PostingsEnum memDocsPosEnum = memTermEnum.postings(null, null, PostingsEnum.FLAG_POSITIONS);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(docsPosEnum.getPayload()));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#compareTermVectors(Terms,Terms,String).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#compareTermVectors(Terms,Terms,String).mjava","sourceNew":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator();\n    TermsEnum memTermEnum = memTerms.iterator();\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      PostingsEnum docsPosEnum = termEnum.postings(null, null, PostingsEnum.POSITIONS);\n      PostingsEnum memDocsPosEnum = memTermEnum.postings(null, null, PostingsEnum.POSITIONS);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(docsPosEnum.getPayload()));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","sourceOld":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator(null);\n    TermsEnum memTermEnum = memTerms.iterator(null);\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      PostingsEnum docsPosEnum = termEnum.postings(null, null, PostingsEnum.POSITIONS);\n      PostingsEnum memDocsPosEnum = memTermEnum.postings(null, null, PostingsEnum.POSITIONS);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(docsPosEnum.getPayload()));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#compareTermVectors(Terms,Terms,String).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#compareTermVectors(Terms,Terms,String).mjava","sourceNew":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator();\n    TermsEnum memTermEnum = memTerms.iterator();\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      PostingsEnum docsPosEnum = termEnum.postings(null, PostingsEnum.POSITIONS);\n      PostingsEnum memDocsPosEnum = memTermEnum.postings(null, PostingsEnum.POSITIONS);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(docsPosEnum.getPayload()));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","sourceOld":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator();\n    TermsEnum memTermEnum = memTerms.iterator();\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      PostingsEnum docsPosEnum = termEnum.postings(null, null, PostingsEnum.POSITIONS);\n      PostingsEnum memDocsPosEnum = memTermEnum.postings(null, null, PostingsEnum.POSITIONS);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(docsPosEnum.getPayload()));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#compareTermVectors(Terms,Terms,String).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#compareTermVectors(Terms,Terms,String).mjava","sourceNew":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator();\n    TermsEnum memTermEnum = memTerms.iterator();\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      PostingsEnum docsPosEnum = termEnum.postings(null, PostingsEnum.POSITIONS);\n      PostingsEnum memDocsPosEnum = memTermEnum.postings(null, PostingsEnum.POSITIONS);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(docsPosEnum.getPayload()));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","sourceOld":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator();\n    TermsEnum memTermEnum = memTerms.iterator();\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      PostingsEnum docsPosEnum = termEnum.postings(null, PostingsEnum.POSITIONS);\n      PostingsEnum memDocsPosEnum = memTermEnum.postings(null, PostingsEnum.POSITIONS);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(docsPosEnum.getPayload()));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb":["761333d77c7f29123c00c93b107b743f32f012e6"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","761333d77c7f29123c00c93b107b743f32f012e6"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb"],"761333d77c7f29123c00c93b107b743f32f012e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["d77dafd89756a5161d244985903e3487ca109182"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","761333d77c7f29123c00c93b107b743f32f012e6"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb":["51f5280f31484820499077f41fcdfe92d527d9dc"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"761333d77c7f29123c00c93b107b743f32f012e6":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}