{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkChrootPath(String,boolean).mjava","commits":[{"id":"d0e70591e1e23afedf79324b42591f71a3e711b5","date":1355181494,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkChrootPath(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Validates if the chroot exists in zk (or if it is successfully created). Optionally, if create is set to true this method will create the path\n   * in case it doesn't exist\n   * @return true if the path exists or is created\n   * false if the path doesn't exist and 'create' = false\n   */\n  public static boolean checkChrootPath(String zkHost, boolean create) throws KeeperException, InterruptedException {\n    if(!containsChroot(zkHost)) {\n      return true;\n    }\n    log.info(\"zkHost includes chroot\");\n    String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"), zkHost.length());\n    SolrZkClient tmpClient = new SolrZkClient(zkHost.substring(0, zkHost.indexOf(\"/\")), 60*1000);\n    boolean exists = tmpClient.exists(chrootPath, true);\n    if(!exists && create) {\n      tmpClient.makePath(chrootPath, false, true);\n      exists = true;\n    }\n    tmpClient.close();\n    return exists;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkChrootPath(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Validates if the chroot exists in zk (or if it is successfully created). Optionally, if create is set to true this method will create the path\n   * in case it doesn't exist\n   * @return true if the path exists or is created\n   * false if the path doesn't exist and 'create' = false\n   */\n  public static boolean checkChrootPath(String zkHost, boolean create) throws KeeperException, InterruptedException {\n    if(!containsChroot(zkHost)) {\n      return true;\n    }\n    log.info(\"zkHost includes chroot\");\n    String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"), zkHost.length());\n    SolrZkClient tmpClient = new SolrZkClient(zkHost.substring(0, zkHost.indexOf(\"/\")), 60*1000);\n    boolean exists = tmpClient.exists(chrootPath, true);\n    if(!exists && create) {\n      tmpClient.makePath(chrootPath, false, true);\n      exists = true;\n    }\n    tmpClient.close();\n    return exists;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"474a065e1bf22f3551c2fd2c9e18bde479e5c3c5","date":1361033993,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkChrootPath(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkChrootPath(String,boolean).mjava","sourceNew":"  /**\n   * Validates if the chroot exists in zk (or if it is successfully created).\n   * Optionally, if create is set to true this method will create the path in\n   * case it doesn't exist\n   * \n   * @return true if the path exists or is created false if the path doesn't\n   *         exist and 'create' = false\n   */\n  public static boolean checkChrootPath(String zkHost, boolean create)\n      throws KeeperException, InterruptedException {\n    if (!containsChroot(zkHost)) {\n      return true;\n    }\n    log.info(\"zkHost includes chroot\");\n    String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"), zkHost.length());\n    SolrZkClient tmpClient = new SolrZkClient(zkHost.substring(0,\n        zkHost.indexOf(\"/\")), 60 * 1000);\n    boolean exists = tmpClient.exists(chrootPath, true);\n    if (!exists && create) {\n      tmpClient.makePath(chrootPath, false, true);\n      exists = true;\n    }\n    tmpClient.close();\n    return exists;\n  }\n\n","sourceOld":"  /**\n   * Validates if the chroot exists in zk (or if it is successfully created). Optionally, if create is set to true this method will create the path\n   * in case it doesn't exist\n   * @return true if the path exists or is created\n   * false if the path doesn't exist and 'create' = false\n   */\n  public static boolean checkChrootPath(String zkHost, boolean create) throws KeeperException, InterruptedException {\n    if(!containsChroot(zkHost)) {\n      return true;\n    }\n    log.info(\"zkHost includes chroot\");\n    String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"), zkHost.length());\n    SolrZkClient tmpClient = new SolrZkClient(zkHost.substring(0, zkHost.indexOf(\"/\")), 60*1000);\n    boolean exists = tmpClient.exists(chrootPath, true);\n    if(!exists && create) {\n      tmpClient.makePath(chrootPath, false, true);\n      exists = true;\n    }\n    tmpClient.close();\n    return exists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkChrootPath(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkChrootPath(String,boolean).mjava","sourceNew":"  /**\n   * Validates if the chroot exists in zk (or if it is successfully created).\n   * Optionally, if create is set to true this method will create the path in\n   * case it doesn't exist\n   * \n   * @return true if the path exists or is created false if the path doesn't\n   *         exist and 'create' = false\n   */\n  public static boolean checkChrootPath(String zkHost, boolean create)\n      throws KeeperException, InterruptedException {\n    if (!containsChroot(zkHost)) {\n      return true;\n    }\n    log.info(\"zkHost includes chroot\");\n    String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"), zkHost.length());\n    SolrZkClient tmpClient = new SolrZkClient(zkHost.substring(0,\n        zkHost.indexOf(\"/\")), 60 * 1000);\n    boolean exists = tmpClient.exists(chrootPath, true);\n    if (!exists && create) {\n      tmpClient.makePath(chrootPath, false, true);\n      exists = true;\n    }\n    tmpClient.close();\n    return exists;\n  }\n\n","sourceOld":"  /**\n   * Validates if the chroot exists in zk (or if it is successfully created). Optionally, if create is set to true this method will create the path\n   * in case it doesn't exist\n   * @return true if the path exists or is created\n   * false if the path doesn't exist and 'create' = false\n   */\n  public static boolean checkChrootPath(String zkHost, boolean create) throws KeeperException, InterruptedException {\n    if(!containsChroot(zkHost)) {\n      return true;\n    }\n    log.info(\"zkHost includes chroot\");\n    String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"), zkHost.length());\n    SolrZkClient tmpClient = new SolrZkClient(zkHost.substring(0, zkHost.indexOf(\"/\")), 60*1000);\n    boolean exists = tmpClient.exists(chrootPath, true);\n    if(!exists && create) {\n      tmpClient.makePath(chrootPath, false, true);\n      exists = true;\n    }\n    tmpClient.close();\n    return exists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83f985d9828d30801541f1eed26aa3169646baf","date":1409315453,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkChrootPath(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkChrootPath(String,boolean).mjava","sourceNew":"  /**\n   * Validates if the chroot exists in zk (or if it is successfully created).\n   * Optionally, if create is set to true this method will create the path in\n   * case it doesn't exist\n   * \n   * @return true if the path exists or is created false if the path doesn't\n   *         exist and 'create' = false\n   */\n  public static boolean checkChrootPath(String zkHost, boolean create)\n      throws KeeperException, InterruptedException {\n    if (!SolrZkClient.containsChroot(zkHost)) {\n      return true;\n    }\n    log.info(\"zkHost includes chroot\");\n    String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"), zkHost.length());\n\n    SolrZkClient tmpClient = new SolrZkClient(zkHost.substring(0,\n        zkHost.indexOf(\"/\")), 60000, 30000, null, null, null);\n    boolean exists = tmpClient.exists(chrootPath, true);\n    if (!exists && create) {\n      tmpClient.makePath(chrootPath, false, true);\n      exists = true;\n    }\n    tmpClient.close();\n    return exists;\n  }\n\n","sourceOld":"  /**\n   * Validates if the chroot exists in zk (or if it is successfully created).\n   * Optionally, if create is set to true this method will create the path in\n   * case it doesn't exist\n   * \n   * @return true if the path exists or is created false if the path doesn't\n   *         exist and 'create' = false\n   */\n  public static boolean checkChrootPath(String zkHost, boolean create)\n      throws KeeperException, InterruptedException {\n    if (!containsChroot(zkHost)) {\n      return true;\n    }\n    log.info(\"zkHost includes chroot\");\n    String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"), zkHost.length());\n    SolrZkClient tmpClient = new SolrZkClient(zkHost.substring(0,\n        zkHost.indexOf(\"/\")), 60 * 1000);\n    boolean exists = tmpClient.exists(chrootPath, true);\n    if (!exists && create) {\n      tmpClient.makePath(chrootPath, false, true);\n      exists = true;\n    }\n    tmpClient.close();\n    return exists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkChrootPath(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkChrootPath(String,boolean).mjava","sourceNew":"  /**\n   * Validates if the chroot exists in zk (or if it is successfully created).\n   * Optionally, if create is set to true this method will create the path in\n   * case it doesn't exist\n   *\n   * @return true if the path exists or is created false if the path doesn't\n   * exist and 'create' = false\n   */\n  public static boolean checkChrootPath(String zkHost, boolean create)\n      throws KeeperException, InterruptedException {\n    if (!SolrZkClient.containsChroot(zkHost)) {\n      return true;\n    }\n    log.info(\"zkHost includes chroot\");\n    String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"), zkHost.length());\n\n    SolrZkClient tmpClient = new SolrZkClient(zkHost.substring(0,\n        zkHost.indexOf(\"/\")), 60000, 30000, null, null, null);\n    boolean exists = tmpClient.exists(chrootPath, true);\n    if (!exists && create) {\n      tmpClient.makePath(chrootPath, false, true);\n      exists = true;\n    }\n    tmpClient.close();\n    return exists;\n  }\n\n","sourceOld":"  /**\n   * Validates if the chroot exists in zk (or if it is successfully created).\n   * Optionally, if create is set to true this method will create the path in\n   * case it doesn't exist\n   * \n   * @return true if the path exists or is created false if the path doesn't\n   *         exist and 'create' = false\n   */\n  public static boolean checkChrootPath(String zkHost, boolean create)\n      throws KeeperException, InterruptedException {\n    if (!SolrZkClient.containsChroot(zkHost)) {\n      return true;\n    }\n    log.info(\"zkHost includes chroot\");\n    String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"), zkHost.length());\n\n    SolrZkClient tmpClient = new SolrZkClient(zkHost.substring(0,\n        zkHost.indexOf(\"/\")), 60000, 30000, null, null, null);\n    boolean exists = tmpClient.exists(chrootPath, true);\n    if (!exists && create) {\n      tmpClient.makePath(chrootPath, false, true);\n      exists = true;\n    }\n    tmpClient.close();\n    return exists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkChrootPath(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkChrootPath(String,boolean).mjava","sourceNew":"  /**\n   * Validates if the chroot exists in zk (or if it is successfully created).\n   * Optionally, if create is set to true this method will create the path in\n   * case it doesn't exist\n   *\n   * @return true if the path exists or is created false if the path doesn't\n   * exist and 'create' = false\n   */\n  public static boolean checkChrootPath(String zkHost, boolean create)\n      throws KeeperException, InterruptedException {\n    if (!SolrZkClient.containsChroot(zkHost)) {\n      return true;\n    }\n    log.info(\"zkHost includes chroot\");\n    String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"), zkHost.length());\n\n    SolrZkClient tmpClient = new SolrZkClient(zkHost.substring(0,\n        zkHost.indexOf(\"/\")), 60000, 30000, null, null, null);\n    boolean exists = tmpClient.exists(chrootPath, true);\n    if (!exists && create) {\n      tmpClient.makePath(chrootPath, false, true);\n      exists = true;\n    }\n    tmpClient.close();\n    return exists;\n  }\n\n","sourceOld":"  /**\n   * Validates if the chroot exists in zk (or if it is successfully created).\n   * Optionally, if create is set to true this method will create the path in\n   * case it doesn't exist\n   * \n   * @return true if the path exists or is created false if the path doesn't\n   *         exist and 'create' = false\n   */\n  public static boolean checkChrootPath(String zkHost, boolean create)\n      throws KeeperException, InterruptedException {\n    if (!SolrZkClient.containsChroot(zkHost)) {\n      return true;\n    }\n    log.info(\"zkHost includes chroot\");\n    String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"), zkHost.length());\n\n    SolrZkClient tmpClient = new SolrZkClient(zkHost.substring(0,\n        zkHost.indexOf(\"/\")), 60000, 30000, null, null, null);\n    boolean exists = tmpClient.exists(chrootPath, true);\n    if (!exists && create) {\n      tmpClient.makePath(chrootPath, false, true);\n      exists = true;\n    }\n    tmpClient.close();\n    return exists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkChrootPath(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkChrootPath(String,boolean).mjava","sourceNew":"  /**\n   * Validates if the chroot exists in zk (or if it is successfully created).\n   * Optionally, if create is set to true this method will create the path in\n   * case it doesn't exist\n   *\n   * @return true if the path exists or is created false if the path doesn't\n   * exist and 'create' = false\n   */\n  public static boolean checkChrootPath(String zkHost, boolean create)\n      throws KeeperException, InterruptedException {\n    if (!SolrZkClient.containsChroot(zkHost)) {\n      return true;\n    }\n    log.trace(\"zkHost includes chroot\");\n    String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"), zkHost.length());\n\n    SolrZkClient tmpClient = new SolrZkClient(zkHost.substring(0,\n        zkHost.indexOf(\"/\")), 60000, 30000, null, null, null);\n    boolean exists = tmpClient.exists(chrootPath, true);\n    if (!exists && create) {\n      tmpClient.makePath(chrootPath, false, true);\n      exists = true;\n    }\n    tmpClient.close();\n    return exists;\n  }\n\n","sourceOld":"  /**\n   * Validates if the chroot exists in zk (or if it is successfully created).\n   * Optionally, if create is set to true this method will create the path in\n   * case it doesn't exist\n   *\n   * @return true if the path exists or is created false if the path doesn't\n   * exist and 'create' = false\n   */\n  public static boolean checkChrootPath(String zkHost, boolean create)\n      throws KeeperException, InterruptedException {\n    if (!SolrZkClient.containsChroot(zkHost)) {\n      return true;\n    }\n    log.info(\"zkHost includes chroot\");\n    String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"), zkHost.length());\n\n    SolrZkClient tmpClient = new SolrZkClient(zkHost.substring(0,\n        zkHost.indexOf(\"/\")), 60000, 30000, null, null, null);\n    boolean exists = tmpClient.exists(chrootPath, true);\n    if (!exists && create) {\n      tmpClient.makePath(chrootPath, false, true);\n      exists = true;\n    }\n    tmpClient.close();\n    return exists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkChrootPath(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkChrootPath(String,boolean).mjava","sourceNew":"  /**\n   * Validates if the chroot exists in zk (or if it is successfully created).\n   * Optionally, if create is set to true this method will create the path in\n   * case it doesn't exist\n   *\n   * @return true if the path exists or is created false if the path doesn't\n   * exist and 'create' = false\n   */\n  public static boolean checkChrootPath(String zkHost, boolean create)\n      throws KeeperException, InterruptedException {\n    if (!SolrZkClient.containsChroot(zkHost)) {\n      return true;\n    }\n    log.trace(\"zkHost includes chroot\");\n    String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"), zkHost.length());\n\n    SolrZkClient tmpClient = new SolrZkClient(zkHost.substring(0,\n        zkHost.indexOf(\"/\")), 60000, 30000, null, null, null);\n    boolean exists = tmpClient.exists(chrootPath, true);\n    if (!exists && create) {\n      tmpClient.makePath(chrootPath, false, true);\n      exists = true;\n    }\n    tmpClient.close();\n    return exists;\n  }\n\n","sourceOld":"  /**\n   * Validates if the chroot exists in zk (or if it is successfully created).\n   * Optionally, if create is set to true this method will create the path in\n   * case it doesn't exist\n   *\n   * @return true if the path exists or is created false if the path doesn't\n   * exist and 'create' = false\n   */\n  public static boolean checkChrootPath(String zkHost, boolean create)\n      throws KeeperException, InterruptedException {\n    if (!SolrZkClient.containsChroot(zkHost)) {\n      return true;\n    }\n    log.info(\"zkHost includes chroot\");\n    String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"), zkHost.length());\n\n    SolrZkClient tmpClient = new SolrZkClient(zkHost.substring(0,\n        zkHost.indexOf(\"/\")), 60000, 30000, null, null, null);\n    boolean exists = tmpClient.exists(chrootPath, true);\n    if (!exists && create) {\n      tmpClient.makePath(chrootPath, false, true);\n      exists = true;\n    }\n    tmpClient.close();\n    return exists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkChrootPath(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkChrootPath(String,boolean).mjava","sourceNew":"  /**\n   * Validates if the chroot exists in zk (or if it is successfully created).\n   * Optionally, if create is set to true this method will create the path in\n   * case it doesn't exist\n   *\n   * @return true if the path exists or is created false if the path doesn't\n   * exist and 'create' = false\n   */\n  public static boolean checkChrootPath(String zkHost, boolean create)\n      throws KeeperException, InterruptedException {\n    if (!SolrZkClient.containsChroot(zkHost)) {\n      return true;\n    }\n    log.trace(\"zkHost includes chroot\");\n    String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"), zkHost.length());\n\n    SolrZkClient tmpClient = new SolrZkClient(zkHost.substring(0,\n        zkHost.indexOf(\"/\")), 60000, 30000, null, null, null);\n    boolean exists = tmpClient.exists(chrootPath, true);\n    if (!exists && create) {\n      tmpClient.makePath(chrootPath, false, true);\n      exists = true;\n    }\n    tmpClient.close();\n    return exists;\n  }\n\n","sourceOld":"  /**\n   * Validates if the chroot exists in zk (or if it is successfully created).\n   * Optionally, if create is set to true this method will create the path in\n   * case it doesn't exist\n   *\n   * @return true if the path exists or is created false if the path doesn't\n   * exist and 'create' = false\n   */\n  public static boolean checkChrootPath(String zkHost, boolean create)\n      throws KeeperException, InterruptedException {\n    if (!SolrZkClient.containsChroot(zkHost)) {\n      return true;\n    }\n    log.info(\"zkHost includes chroot\");\n    String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"), zkHost.length());\n\n    SolrZkClient tmpClient = new SolrZkClient(zkHost.substring(0,\n        zkHost.indexOf(\"/\")), 60000, 30000, null, null, null);\n    boolean exists = tmpClient.exists(chrootPath, true);\n    if (!exists && create) {\n      tmpClient.makePath(chrootPath, false, true);\n      exists = true;\n    }\n    tmpClient.close();\n    return exists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d0e70591e1e23afedf79324b42591f71a3e711b5"],"962cd4f5e313777f35da8f521265323e84184929":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c83f985d9828d30801541f1eed26aa3169646baf","fbcfc050b9f253136eaa5950b57248b2109eac11"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["d0e70591e1e23afedf79324b42591f71a3e711b5","474a065e1bf22f3551c2fd2c9e18bde479e5c3c5"],"474a065e1bf22f3551c2fd2c9e18bde479e5c3c5":["d0e70591e1e23afedf79324b42591f71a3e711b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["fbcfc050b9f253136eaa5950b57248b2109eac11","962cd4f5e313777f35da8f521265323e84184929"],"d0e70591e1e23afedf79324b42591f71a3e711b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c83f985d9828d30801541f1eed26aa3169646baf":["474a065e1bf22f3551c2fd2c9e18bde479e5c3c5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["fbcfc050b9f253136eaa5950b57248b2109eac11","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["c83f985d9828d30801541f1eed26aa3169646baf"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"474a065e1bf22f3551c2fd2c9e18bde479e5c3c5":["95303ff3749680c743b9425f9cf99e6e4065e8a8","c83f985d9828d30801541f1eed26aa3169646baf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d0e70591e1e23afedf79324b42591f71a3e711b5"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0e70591e1e23afedf79324b42591f71a3e711b5":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","95303ff3749680c743b9425f9cf99e6e4065e8a8","474a065e1bf22f3551c2fd2c9e18bde479e5c3c5"],"c83f985d9828d30801541f1eed26aa3169646baf":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbcfc050b9f253136eaa5950b57248b2109eac11"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"fbcfc050b9f253136eaa5950b57248b2109eac11":["962cd4f5e313777f35da8f521265323e84184929","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","95303ff3749680c743b9425f9cf99e6e4065e8a8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}