{"path":"lucene/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","commits":[{"id":"0d2655e586e23a63fbfddf4f6858e5d2b920d672","date":1322177075,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","pathOld":"/dev/null","sourceNew":"  public void testFieldValueFilter() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int docs = atLeast(10);\n    int[] docStates = buildIndex(writer, docs);\n    int numDocsWithValue = 0;\n    for (int i = 0; i < docStates.length; i++) {\n      if (docStates[i] == 1) {\n        numDocsWithValue++;\n      }\n    }\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(new Term(\"all\", \"test\")),\n        new FieldValueFilter(\"some\"), docs);\n    assertEquals(search.totalHits, numDocsWithValue);\n    \n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    for (ScoreDoc scoreDoc : scoreDocs) {\n      assertEquals(\"value\", reader.document(scoreDoc.doc).get(\"some\"));\n    }\n    \n    reader.close();\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5864882f6163c513e490c855adeb66eff0a9988e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","sourceNew":"  public void testFieldValueFilter() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int docs = atLeast(10);\n    int[] docStates = buildIndex(writer, docs);\n    int numDocsWithValue = 0;\n    for (int i = 0; i < docStates.length; i++) {\n      if (docStates[i] == 1) {\n        numDocsWithValue++;\n      }\n    }\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(new Term(\"all\", \"test\")),\n        new FieldValueFilter(\"some\"), docs);\n    assertEquals(search.totalHits, numDocsWithValue);\n    \n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    for (ScoreDoc scoreDoc : scoreDocs) {\n      assertEquals(\"value\", reader.document(scoreDoc.doc).get(\"some\"));\n    }\n    \n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFieldValueFilter() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int docs = atLeast(10);\n    int[] docStates = buildIndex(writer, docs);\n    int numDocsWithValue = 0;\n    for (int i = 0; i < docStates.length; i++) {\n      if (docStates[i] == 1) {\n        numDocsWithValue++;\n      }\n    }\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(new Term(\"all\", \"test\")),\n        new FieldValueFilter(\"some\"), docs);\n    assertEquals(search.totalHits, numDocsWithValue);\n    \n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    for (ScoreDoc scoreDoc : scoreDocs) {\n      assertEquals(\"value\", reader.document(scoreDoc.doc).get(\"some\"));\n    }\n    \n    reader.close();\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","sourceNew":"  public void testFieldValueFilter() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int docs = atLeast(10);\n    int[] docStates = buildIndex(writer, docs);\n    int numDocsWithValue = 0;\n    for (int i = 0; i < docStates.length; i++) {\n      if (docStates[i] == 1) {\n        numDocsWithValue++;\n      }\n    }\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(new Term(\"all\", \"test\")),\n        new FieldValueFilter(\"some\"), docs);\n    assertEquals(search.totalHits, numDocsWithValue);\n    \n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    for (ScoreDoc scoreDoc : scoreDocs) {\n      assertEquals(\"value\", reader.document(scoreDoc.doc).get(\"some\"));\n    }\n    \n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFieldValueFilter() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int docs = atLeast(10);\n    int[] docStates = buildIndex(writer, docs);\n    int numDocsWithValue = 0;\n    for (int i = 0; i < docStates.length; i++) {\n      if (docStates[i] == 1) {\n        numDocsWithValue++;\n      }\n    }\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(new Term(\"all\", \"test\")),\n        new FieldValueFilter(\"some\"), docs);\n    assertEquals(search.totalHits, numDocsWithValue);\n    \n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    for (ScoreDoc scoreDoc : scoreDocs) {\n      assertEquals(\"value\", reader.document(scoreDoc.doc).get(\"some\"));\n    }\n    \n    reader.close();\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","sourceNew":"  public void testFieldValueFilter() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int docs = atLeast(10);\n    int[] docStates = buildIndex(writer, docs);\n    int numDocsWithValue = 0;\n    for (int i = 0; i < docStates.length; i++) {\n      if (docStates[i] == 1) {\n        numDocsWithValue++;\n      }\n    }\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(new Term(\"all\", \"test\")),\n        new FieldValueFilter(\"some\"), docs);\n    assertEquals(search.totalHits, numDocsWithValue);\n    \n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    for (ScoreDoc scoreDoc : scoreDocs) {\n      assertEquals(\"value\", reader.document(scoreDoc.doc).get(\"some\"));\n    }\n    \n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFieldValueFilter() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int docs = atLeast(10);\n    int[] docStates = buildIndex(writer, docs);\n    int numDocsWithValue = 0;\n    for (int i = 0; i < docStates.length; i++) {\n      if (docStates[i] == 1) {\n        numDocsWithValue++;\n      }\n    }\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(new Term(\"all\", \"test\")),\n        new FieldValueFilter(\"some\"), docs);\n    assertEquals(search.totalHits, numDocsWithValue);\n    \n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    for (ScoreDoc scoreDoc : scoreDocs) {\n      assertEquals(\"value\", reader.document(scoreDoc.doc).get(\"some\"));\n    }\n    \n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0e7c2454a6a8237bfd0e953f5b940838408c9055":["0d2655e586e23a63fbfddf4f6858e5d2b920d672"],"0d2655e586e23a63fbfddf4f6858e5d2b920d672":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["0d2655e586e23a63fbfddf4f6858e5d2b920d672","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"0d2655e586e23a63fbfddf4f6858e5d2b920d672":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d2655e586e23a63fbfddf4f6858e5d2b920d672"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}