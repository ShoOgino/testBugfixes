{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLongTailTest#checkRefinementAndOverrequesting().mjava","commits":[{"id":"5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba","date":1513104620,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLongTailTest#checkRefinementAndOverrequesting().mjava","pathOld":"/dev/null","sourceNew":"  private void checkRefinementAndOverrequesting() throws Exception {\n    // if we disable overrequesting, we don't find the long tail\n    List<PivotField> pivots = null;\n    PivotField pivot = null;\n    pivots = queryServer( params( \"q\", \"*:*\",\n                                  \"shards\", getShardsString(),\n                                  FacetParams.FACET_OVERREQUEST_COUNT, \"0\",\n                                  FacetParams.FACET_OVERREQUEST_RATIO, \"0\",\n                                  \"facet\", \"true\",\n                                  \"facet.limit\", \"6\",\n                                  \"facet.pivot\", \"{!stats=sxy}foo_s,bar_s\",\n                                  \"stats\", \"true\",\n                                  \"stats.field\", \"{!tag=sxy}\" + STAT_FIELD)\n                          ).getFacetPivot().get(\"foo_s,bar_s\");\n    assertEquals(6, pivots.size());\n    for (int i = 0; i < 5; i++) {\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n      assertEquals(pivot.toString(), 300, pivot.getCount());\n    }\n    { // even w/o the long tail, we should have still asked shard2 to refine bbb0\n      pivot = pivots.get(5);\n      assertTrue(pivot.toString(), pivot.getValue().equals(\"bbb0\"));\n      assertEquals(pivot.toString(), 101, pivot.getCount());\n      // basic check of refined stats\n      FieldStatsInfo bbb0Stats = pivot.getFieldStatsInfo().get(STAT_FIELD);\n      assertEquals(STAT_FIELD, bbb0Stats.getName());\n      assertEquals(-2.0, bbb0Stats.getMin());\n      assertEquals(1.0, bbb0Stats.getMax());\n      assertEquals(101, (long) bbb0Stats.getCount());\n      assertEquals(0, (long) bbb0Stats.getMissing());\n      assertEquals(48.0, bbb0Stats.getSum());\n      assertEquals(0.475247524752475, (double) bbb0Stats.getMean(), 0.1E-7);\n      assertEquals(54.0, bbb0Stats.getSumOfSquares(), 0.1E-7);\n      assertEquals(0.55846323792, bbb0Stats.getStddev(), 0.1E-7);\n    }\n\n\n    // with default overrequesting, we should find the correct top 6 including \n    // long tail and top sub-pivots\n    // (even if we disable overrequesting on the sub-pivot)\n    for (ModifiableSolrParams q : new ModifiableSolrParams[] { \n        params(),\n        params(\"f.bar_s.facet.overrequest.ratio\",\"0\",\n               \"f.bar_s.facet.overrequest.count\",\"0\")      }) {\n      \n      q.add( params( \"q\", \"*:*\",\n                     \"shards\", getShardsString(),\n                     \"facet\", \"true\",\n                     \"facet.limit\", \"6\",\n                     \"facet.pivot\", \"foo_s,bar_s\" ));\n      pivots = queryServer( q ).getFacetPivot().get(\"foo_s,bar_s\");\n        \n      assertEquals(6, pivots.size());\n      for (int i = 0; i < 5; i++) {\n        pivot = pivots.get(i);\n        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n        assertEquals(pivot.toString(), 300, pivot.getCount());\n      }\n      pivot = pivots.get(5);\n      assertEquals(pivot.toString(), \"tail\", pivot.getValue());\n      assertEquals(pivot.toString(), 135, pivot.getCount());\n      // check the sub pivots\n      pivots = pivot.getPivot();\n      assertEquals(6, pivots.size());\n      pivot = pivots.get(0);\n      assertEquals(pivot.toString(), \"tailB\", pivot.getValue());\n      assertEquals(pivot.toString(), 17, pivot.getCount());\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        pivot = pivots.get(i);\n        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ccc\"));\n        assertEquals(pivot.toString(), 14, pivot.getCount());\n      }\n    }\n\n    // if we lower the facet.limit on the sub-pivot, overrequesting should still ensure \n    // that we get the correct top5 including \"tailB\"\n\n    pivots = queryServer( params( \"q\", \"*:*\",\n                                  \"shards\", getShardsString(),\n                                  \"facet\", \"true\",\n                                  \"facet.limit\", \"6\",\n                                  \"f.bar_s.facet.limit\", \"5\",\n                                  \"facet.pivot\", \"foo_s,bar_s\" )\n                          ).getFacetPivot().get(\"foo_s,bar_s\");\n    assertEquals(6, pivots.size());\n    for (int i = 0; i < 5; i++) {\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n      assertEquals(pivot.toString(), 300, pivot.getCount());\n    }\n    pivot = pivots.get(5);\n    assertEquals(pivot.toString(), \"tail\", pivot.getValue());\n    assertEquals(pivot.toString(), 135, pivot.getCount());\n    // check the sub pivots\n    pivots = pivot.getPivot();\n    assertEquals(5, pivots.size());\n    pivot = pivots.get(0);\n    assertEquals(pivot.toString(), \"tailB\", pivot.getValue());\n    assertEquals(pivot.toString(), 17, pivot.getCount());\n    for (int i = 1; i < 5; i++) { // ccc(0-3)\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ccc\"));\n      assertEquals(pivot.toString(), 14, pivot.getCount());\n    }\n\n    // however with a lower limit and overrequesting disabled, \n    // we're going to miss out on tailB\n\n    pivots = queryServer( params( \"q\", \"*:*\",\n                                  \"shards\", getShardsString(),\n                                  \"facet\", \"true\",\n                                  \"facet.limit\", \"6\",\n                                  \"f.bar_s.facet.overrequest.ratio\", \"0\",\n                                  \"f.bar_s.facet.overrequest.count\", \"0\",\n                                  \"f.bar_s.facet.limit\", \"5\",\n                                  \"facet.pivot\", \"foo_s,bar_s\" )\n                          ).getFacetPivot().get(\"foo_s,bar_s\");\n    assertEquals(6, pivots.size());\n    for (int i = 0; i < 5; i++) {\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n      assertEquals(pivot.toString(), 300, pivot.getCount());\n    }\n    pivot = pivots.get(5);\n    assertEquals(pivot.toString(), \"tail\", pivot.getValue());\n    assertEquals(pivot.toString(), 135, pivot.getCount());\n    // check the sub pivots\n    pivots = pivot.getPivot();\n    assertEquals(5, pivots.size());\n    for (int i = 0; i < 5; i++) { // ccc(0-4)\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ccc\"));\n      assertEquals(pivot.toString(), 14, pivot.getCount());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"927e6deec13723e5fd6fb8f1e0457e8597dae15e","date":1513167013,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLongTailTest#checkRefinementAndOverrequesting().mjava","pathOld":"/dev/null","sourceNew":"  private void checkRefinementAndOverrequesting() throws Exception {\n    // if we disable overrequesting, we don't find the long tail\n    List<PivotField> pivots = null;\n    PivotField pivot = null;\n    pivots = queryServer( params( \"q\", \"*:*\",\n                                  \"shards\", getShardsString(),\n                                  FacetParams.FACET_OVERREQUEST_COUNT, \"0\",\n                                  FacetParams.FACET_OVERREQUEST_RATIO, \"0\",\n                                  \"facet\", \"true\",\n                                  \"facet.limit\", \"6\",\n                                  \"facet.pivot\", \"{!stats=sxy}foo_s,bar_s\",\n                                  \"stats\", \"true\",\n                                  \"stats.field\", \"{!tag=sxy}\" + STAT_FIELD)\n                          ).getFacetPivot().get(\"foo_s,bar_s\");\n    assertEquals(6, pivots.size());\n    for (int i = 0; i < 5; i++) {\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n      assertEquals(pivot.toString(), 300, pivot.getCount());\n    }\n    { // even w/o the long tail, we should have still asked shard2 to refine bbb0\n      pivot = pivots.get(5);\n      assertTrue(pivot.toString(), pivot.getValue().equals(\"bbb0\"));\n      assertEquals(pivot.toString(), 101, pivot.getCount());\n      // basic check of refined stats\n      FieldStatsInfo bbb0Stats = pivot.getFieldStatsInfo().get(STAT_FIELD);\n      assertEquals(STAT_FIELD, bbb0Stats.getName());\n      assertEquals(-2.0, bbb0Stats.getMin());\n      assertEquals(1.0, bbb0Stats.getMax());\n      assertEquals(101, (long) bbb0Stats.getCount());\n      assertEquals(0, (long) bbb0Stats.getMissing());\n      assertEquals(48.0, bbb0Stats.getSum());\n      assertEquals(0.475247524752475, (double) bbb0Stats.getMean(), 0.1E-7);\n      assertEquals(54.0, bbb0Stats.getSumOfSquares(), 0.1E-7);\n      assertEquals(0.55846323792, bbb0Stats.getStddev(), 0.1E-7);\n    }\n\n\n    // with default overrequesting, we should find the correct top 6 including \n    // long tail and top sub-pivots\n    // (even if we disable overrequesting on the sub-pivot)\n    for (ModifiableSolrParams q : new ModifiableSolrParams[] { \n        params(),\n        params(\"f.bar_s.facet.overrequest.ratio\",\"0\",\n               \"f.bar_s.facet.overrequest.count\",\"0\")      }) {\n      \n      q.add( params( \"q\", \"*:*\",\n                     \"shards\", getShardsString(),\n                     \"facet\", \"true\",\n                     \"facet.limit\", \"6\",\n                     \"facet.pivot\", \"foo_s,bar_s\" ));\n      pivots = queryServer( q ).getFacetPivot().get(\"foo_s,bar_s\");\n        \n      assertEquals(6, pivots.size());\n      for (int i = 0; i < 5; i++) {\n        pivot = pivots.get(i);\n        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n        assertEquals(pivot.toString(), 300, pivot.getCount());\n      }\n      pivot = pivots.get(5);\n      assertEquals(pivot.toString(), \"tail\", pivot.getValue());\n      assertEquals(pivot.toString(), 135, pivot.getCount());\n      // check the sub pivots\n      pivots = pivot.getPivot();\n      assertEquals(6, pivots.size());\n      pivot = pivots.get(0);\n      assertEquals(pivot.toString(), \"tailB\", pivot.getValue());\n      assertEquals(pivot.toString(), 17, pivot.getCount());\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        pivot = pivots.get(i);\n        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ccc\"));\n        assertEquals(pivot.toString(), 14, pivot.getCount());\n      }\n    }\n\n    // if we lower the facet.limit on the sub-pivot, overrequesting should still ensure \n    // that we get the correct top5 including \"tailB\"\n\n    pivots = queryServer( params( \"q\", \"*:*\",\n                                  \"shards\", getShardsString(),\n                                  \"facet\", \"true\",\n                                  \"facet.limit\", \"6\",\n                                  \"f.bar_s.facet.limit\", \"5\",\n                                  \"facet.pivot\", \"foo_s,bar_s\" )\n                          ).getFacetPivot().get(\"foo_s,bar_s\");\n    assertEquals(6, pivots.size());\n    for (int i = 0; i < 5; i++) {\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n      assertEquals(pivot.toString(), 300, pivot.getCount());\n    }\n    pivot = pivots.get(5);\n    assertEquals(pivot.toString(), \"tail\", pivot.getValue());\n    assertEquals(pivot.toString(), 135, pivot.getCount());\n    // check the sub pivots\n    pivots = pivot.getPivot();\n    assertEquals(5, pivots.size());\n    pivot = pivots.get(0);\n    assertEquals(pivot.toString(), \"tailB\", pivot.getValue());\n    assertEquals(pivot.toString(), 17, pivot.getCount());\n    for (int i = 1; i < 5; i++) { // ccc(0-3)\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ccc\"));\n      assertEquals(pivot.toString(), 14, pivot.getCount());\n    }\n\n    // however with a lower limit and overrequesting disabled, \n    // we're going to miss out on tailB\n\n    pivots = queryServer( params( \"q\", \"*:*\",\n                                  \"shards\", getShardsString(),\n                                  \"facet\", \"true\",\n                                  \"facet.limit\", \"6\",\n                                  \"f.bar_s.facet.overrequest.ratio\", \"0\",\n                                  \"f.bar_s.facet.overrequest.count\", \"0\",\n                                  \"f.bar_s.facet.limit\", \"5\",\n                                  \"facet.pivot\", \"foo_s,bar_s\" )\n                          ).getFacetPivot().get(\"foo_s,bar_s\");\n    assertEquals(6, pivots.size());\n    for (int i = 0; i < 5; i++) {\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n      assertEquals(pivot.toString(), 300, pivot.getCount());\n    }\n    pivot = pivots.get(5);\n    assertEquals(pivot.toString(), \"tail\", pivot.getValue());\n    assertEquals(pivot.toString(), 135, pivot.getCount());\n    // check the sub pivots\n    pivots = pivot.getPivot();\n    assertEquals(5, pivots.size());\n    for (int i = 0; i < 5; i++) { // ccc(0-4)\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ccc\"));\n      assertEquals(pivot.toString(), 14, pivot.getCount());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"927e6deec13723e5fd6fb8f1e0457e8597dae15e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["927e6deec13723e5fd6fb8f1e0457e8597dae15e"]},"commit2Childs":{"5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba":["927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba","927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"927e6deec13723e5fd6fb8f1e0457e8597dae15e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}