{"path":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","commits":[{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,a_i,a_l\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,a_i,a_l\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9f54c4bd7e9b6532e1e90cc7fad89988aed5f122"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,a_i,a_l\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,a_i,a_l\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35e1793e69ad47a4d64a281c2a531c6e092d82cd","date":1463508654,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","sourceNew":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","sourceOld":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,a_i,a_l\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,a_i,a_l\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c9819d04ff44d2877a5a19257cd662751284a5f","date":1463541580,"type":3,"author":"David Smiley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","sourceNew":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","sourceOld":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,a_i,a_l\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,a_i,a_l\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","sourceNew":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","sourceOld":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,a_i,a_l\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,a_i,a_l\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","sourceNew":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","sourceOld":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,a_i,a_l\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,a_i,a_l\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","sourceNew":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","sourceOld":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","sourceNew":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","sourceOld":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","sourceNew":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","sourceOld":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//int[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","sourceNew":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","sourceOld":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","sourceNew":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","sourceOld":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","sourceNew":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","sourceOld":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f54c4bd7e9b6532e1e90cc7fad89988aed5f122","date":1533418356,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","sourceNew":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for (int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","sourceOld":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for(int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","bugFix":["91814ce09be68efd0626969632e79ae47d8876d4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dd6cf7e1b30a14801c9e290183b875c6801bbe9","date":1591734817,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","sourceNew":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for (int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","sourceOld":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for (int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = h.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartition().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for (int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","sourceOld":"  @Test\n  public void testHashPartition() throws Exception {\n\n\n    Random random = random();\n    HashSet<String> set = new HashSet();\n\n    for (int i=0; i<50; i++) {\n      int v = random.nextInt(1000000);\n      String val = Integer.toString(v);\n      if(!set.contains(val)){\n        set.add(val);\n        String[] doc = {\"id\", val, \"a_s\", val, \"a_i\", val, \"a_l\", val};\n        assertU(adoc(doc));\n        if(i % 10 == 0)\n        assertU(commit());\n\n      }\n    }\n    assertU(commit());\n\n\n    //Test with 3 worker and String hash ID.\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set1 = new HashSet();\n    String response = h.query(req(params));\n\n    Iterator<String> it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=2 workers=3 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    HashSet set3 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set3.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set3.size() > 0);\n    assert(set1.size()+set2.size()+set3.size()==set.size());\n    assertNoOverLap(set1, set2);\n    assertNoOverLap(set1, set3);\n    assertNoOverLap(set2, set3);\n\n\n    //Test with 2 workers and int partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n\n\n    //Test with 2 workers and compound partition Key\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s,       a_i,      a_l\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set1 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set1.add(s);\n      }\n    }\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=1 workers=2 cost=\"+getCost(random)+\"}\");\n    params.add(\"partitionKeys\", \"a_s, a_i, a_l\");\n    params.add(\"rows\",\"50\");\n    params.add(\"wt\", \"xml\");\n    set2 = new HashSet();\n    response = h.query(req(params));\n\n    it = set.iterator();\n\n    while(it.hasNext()) {\n      String s = it.next();\n      String results = BaseTestHarness.validateXPath(response, \"*[count(//str[@name='id'][.='\"+s+\"'])=1]\");\n      if(results == null) {\n        set2.add(s);\n      }\n    }\n\n    assert(set1.size() > 0);\n    assert(set2.size() > 0);\n    assert(set1.size()+set2.size()==set.size());\n    assertNoOverLap(set1, set2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9c9819d04ff44d2877a5a19257cd662751284a5f":["91814ce09be68efd0626969632e79ae47d8876d4","35e1793e69ad47a4d64a281c2a531c6e092d82cd"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","ac1e7fa558287a811ea07634d815ee7b1c541284"],"91814ce09be68efd0626969632e79ae47d8876d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9f54c4bd7e9b6532e1e90cc7fad89988aed5f122":["a52341299179de5479672f7cf518bf4b173f34b3"],"28288370235ed02234a64753cdbf0c6ec096304a":["d470c8182e92b264680e34081b75e70a9f2b3c89","a71f63026529f3c1f03cfdd664910873ab2369ae"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["91814ce09be68efd0626969632e79ae47d8876d4","d470c8182e92b264680e34081b75e70a9f2b3c89"],"e98520789adb1d5ad05afb4956eca0944a929688":["9dd6cf7e1b30a14801c9e290183b875c6801bbe9"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["91814ce09be68efd0626969632e79ae47d8876d4","35e1793e69ad47a4d64a281c2a531c6e092d82cd"],"9dd6cf7e1b30a14801c9e290183b875c6801bbe9":["9f54c4bd7e9b6532e1e90cc7fad89988aed5f122"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91814ce09be68efd0626969632e79ae47d8876d4"],"a52341299179de5479672f7cf518bf4b173f34b3":["28288370235ed02234a64753cdbf0c6ec096304a","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"35e1793e69ad47a4d64a281c2a531c6e092d82cd":["91814ce09be68efd0626969632e79ae47d8876d4"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["d470c8182e92b264680e34081b75e70a9f2b3c89","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"9c9819d04ff44d2877a5a19257cd662751284a5f":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"91814ce09be68efd0626969632e79ae47d8876d4":["9c9819d04ff44d2877a5a19257cd662751284a5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","35e1793e69ad47a4d64a281c2a531c6e092d82cd"],"9f54c4bd7e9b6532e1e90cc7fad89988aed5f122":["9dd6cf7e1b30a14801c9e290183b875c6801bbe9"],"28288370235ed02234a64753cdbf0c6ec096304a":["a52341299179de5479672f7cf518bf4b173f34b3","ac1e7fa558287a811ea07634d815ee7b1c541284"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9dd6cf7e1b30a14801c9e290183b875c6801bbe9":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a52341299179de5479672f7cf518bf4b173f34b3":["9f54c4bd7e9b6532e1e90cc7fad89988aed5f122"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91814ce09be68efd0626969632e79ae47d8876d4","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"35e1793e69ad47a4d64a281c2a531c6e092d82cd":["9c9819d04ff44d2877a5a19257cd662751284a5f","d470c8182e92b264680e34081b75e70a9f2b3c89"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9c9819d04ff44d2877a5a19257cd662751284a5f","936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}