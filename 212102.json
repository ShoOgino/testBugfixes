{"path":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addNumericUpdate(NumericDocValuesUpdate,int).mjava","commits":[{"id":"06805da26538ed636bd89b10c2699cc3834032ae","date":1395132972,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addNumericUpdate(NumericDocValuesUpdate,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addNumericUpdate(NumericUpdate,int).mjava","sourceNew":"  public void addNumericUpdate(NumericDocValuesUpdate update, int docIDUpto) {\n    LinkedHashMap<Term,NumericDocValuesUpdate> fieldUpdates = numericUpdates.get(update.field);\n    if (fieldUpdates == null) {\n      fieldUpdates = new LinkedHashMap<>();\n      numericUpdates.put(update.field, fieldUpdates);\n      bytesUsed.addAndGet(BYTES_PER_NUMERIC_FIELD_ENTRY);\n    }\n    final NumericDocValuesUpdate current = fieldUpdates.get(update.term);\n    if (current != null && docIDUpto < current.docIDUpto) {\n      // Only record the new number if it's greater than or equal to the current\n      // one. This is important because if multiple threads are replacing the\n      // same doc at nearly the same time, it's possible that one thread that\n      // got a higher docID is scheduled before the other threads.\n      return;\n    }\n\n    update.docIDUpto = docIDUpto;\n    // since it's a LinkedHashMap, we must first remove the Term entry so that\n    // it's added last (we're interested in insertion-order).\n    if (current != null) {\n      fieldUpdates.remove(update.term);\n    }\n    fieldUpdates.put(update.term, update);\n    numNumericUpdates.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_NUMERIC_UPDATE_ENTRY + update.sizeInBytes());\n    }\n  }\n\n","sourceOld":"  public void addNumericUpdate(NumericUpdate update, int docIDUpto) {\n    LinkedHashMap<Term,NumericUpdate> fieldUpdates = numericUpdates.get(update.field);\n    if (fieldUpdates == null) {\n      fieldUpdates = new LinkedHashMap<>();\n      numericUpdates.put(update.field, fieldUpdates);\n      bytesUsed.addAndGet(BYTES_PER_NUMERIC_FIELD_ENTRY);\n    }\n    final NumericUpdate current = fieldUpdates.get(update.term);\n    if (current != null && docIDUpto < current.docIDUpto) {\n      // Only record the new number if it's greater than or equal to the current\n      // one. This is important because if multiple threads are replacing the\n      // same doc at nearly the same time, it's possible that one thread that\n      // got a higher docID is scheduled before the other threads.\n      return;\n    }\n\n    update.docIDUpto = docIDUpto;\n    // since it's a LinkedHashMap, we must first remove the Term entry so that\n    // it's added last (we're interested in insertion-order).\n    if (current != null) {\n      fieldUpdates.remove(update.term);\n    }\n    fieldUpdates.put(update.term, update);\n    numNumericUpdates.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_NUMERIC_UPDATE_ENTRY + update.sizeInBytes());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e129bd6cb34a236558a49edf108a49d5c15e0e1","date":1525081316,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addNumericUpdate(NumericDocValuesUpdate,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addNumericUpdate(NumericDocValuesUpdate,int).mjava","sourceNew":"  void addNumericUpdate(NumericDocValuesUpdate update, int docIDUpto) {\n    if (addDocValuesUpdate(numericUpdates, update, docIDUpto, update::prepareForApply, BYTES_PER_NUMERIC_UPDATE_ENTRY,\n        BYTES_PER_NUMERIC_FIELD_ENTRY)) {\n      numNumericUpdates.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  public void addNumericUpdate(NumericDocValuesUpdate update, int docIDUpto) {\n    LinkedHashMap<Term,NumericDocValuesUpdate> fieldUpdates = numericUpdates.get(update.field);\n    if (fieldUpdates == null) {\n      fieldUpdates = new LinkedHashMap<>();\n      numericUpdates.put(update.field, fieldUpdates);\n      bytesUsed.addAndGet(BYTES_PER_NUMERIC_FIELD_ENTRY);\n    }\n    final NumericDocValuesUpdate current = fieldUpdates.get(update.term);\n    if (current != null && docIDUpto < current.docIDUpto) {\n      // Only record the new number if it's greater than or equal to the current\n      // one. This is important because if multiple threads are replacing the\n      // same doc at nearly the same time, it's possible that one thread that\n      // got a higher docID is scheduled before the other threads.\n      return;\n    }\n\n    update.docIDUpto = docIDUpto;\n    // since it's a LinkedHashMap, we must first remove the Term entry so that\n    // it's added last (we're interested in insertion-order).\n    if (current != null) {\n      fieldUpdates.remove(update.term);\n    }\n    fieldUpdates.put(update.term, update);\n    numNumericUpdates.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_NUMERIC_UPDATE_ENTRY + update.sizeInBytes());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f42883db49d143abc1a0f176ba47e3388dafb608","date":1525083166,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addNumericUpdate(NumericDocValuesUpdate,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addNumericUpdate(NumericDocValuesUpdate,int).mjava","sourceNew":"  void addNumericUpdate(NumericDocValuesUpdate update, int docIDUpto) {\n    if (addDocValuesUpdate(numericUpdates, update, docIDUpto, update::prepareForApply, BYTES_PER_NUMERIC_UPDATE_ENTRY,\n        BYTES_PER_NUMERIC_FIELD_ENTRY)) {\n      numNumericUpdates.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  public void addNumericUpdate(NumericDocValuesUpdate update, int docIDUpto) {\n    LinkedHashMap<Term,NumericDocValuesUpdate> fieldUpdates = numericUpdates.get(update.field);\n    if (fieldUpdates == null) {\n      fieldUpdates = new LinkedHashMap<>();\n      numericUpdates.put(update.field, fieldUpdates);\n      bytesUsed.addAndGet(BYTES_PER_NUMERIC_FIELD_ENTRY);\n    }\n    final NumericDocValuesUpdate current = fieldUpdates.get(update.term);\n    if (current != null && docIDUpto < current.docIDUpto) {\n      // Only record the new number if it's greater than or equal to the current\n      // one. This is important because if multiple threads are replacing the\n      // same doc at nearly the same time, it's possible that one thread that\n      // got a higher docID is scheduled before the other threads.\n      return;\n    }\n\n    update.docIDUpto = docIDUpto;\n    // since it's a LinkedHashMap, we must first remove the Term entry so that\n    // it's added last (we're interested in insertion-order).\n    if (current != null) {\n      fieldUpdates.remove(update.term);\n    }\n    fieldUpdates.put(update.term, update);\n    numNumericUpdates.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_NUMERIC_UPDATE_ENTRY + update.sizeInBytes());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28211671436f185419b3f7e53ccfc3911441ab65","date":1544026960,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addNumericUpdate(NumericDocValuesUpdate,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addNumericUpdate(NumericDocValuesUpdate,int).mjava","sourceNew":"  void addNumericUpdate(NumericDocValuesUpdate update, int docIDUpto) {\n    FieldUpdatesBuffer buffer = fieldUpdates.computeIfAbsent(update.field, k -> new FieldUpdatesBuffer(fieldUpdatesBytesUsed, update, docIDUpto));\n    if (update.hasValue) {\n      buffer.addUpdate(update.term, update.getValue(), docIDUpto);\n    } else {\n      buffer.addNoValue(update.term, docIDUpto);\n    }\n    numFieldUpdates.incrementAndGet();\n  }\n\n","sourceOld":"  void addNumericUpdate(NumericDocValuesUpdate update, int docIDUpto) {\n    if (addDocValuesUpdate(numericUpdates, update, docIDUpto, update::prepareForApply, BYTES_PER_NUMERIC_UPDATE_ENTRY,\n        BYTES_PER_NUMERIC_FIELD_ENTRY)) {\n      numNumericUpdates.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"28211671436f185419b3f7e53ccfc3911441ab65":["f42883db49d143abc1a0f176ba47e3388dafb608"],"7e129bd6cb34a236558a49edf108a49d5c15e0e1":["06805da26538ed636bd89b10c2699cc3834032ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06805da26538ed636bd89b10c2699cc3834032ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f42883db49d143abc1a0f176ba47e3388dafb608":["06805da26538ed636bd89b10c2699cc3834032ae","7e129bd6cb34a236558a49edf108a49d5c15e0e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28211671436f185419b3f7e53ccfc3911441ab65"]},"commit2Childs":{"28211671436f185419b3f7e53ccfc3911441ab65":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7e129bd6cb34a236558a49edf108a49d5c15e0e1":["f42883db49d143abc1a0f176ba47e3388dafb608"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06805da26538ed636bd89b10c2699cc3834032ae"],"f42883db49d143abc1a0f176ba47e3388dafb608":["28211671436f185419b3f7e53ccfc3911441ab65"],"06805da26538ed636bd89b10c2699cc3834032ae":["7e129bd6cb34a236558a49edf108a49d5c15e0e1","f42883db49d143abc1a0f176ba47e3388dafb608"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}