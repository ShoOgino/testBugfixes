{"path":"lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader#DirectPackedReader(int,int,IndexInput).mjava","commits":[{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader#DirectPackedReader(int,int,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/DirectReader#DirectReader(int,int,IndexInput).mjava","sourceNew":"  public DirectPackedReader(int bitsPerValue, int valueCount, IndexInput in)\n    throws IOException {\n    super(valueCount, bitsPerValue);\n    this.in = in;\n\n    long v = 1;\n    masks = new long[bitsPerValue];\n    for (int i = 0; i < bitsPerValue; i++) {\n      v *= 2;\n      masks[i] = v - 1;\n    }\n\n    startPointer = in.getFilePointer();\n  }\n\n","sourceOld":"  public DirectReader(int bitsPerValue, int valueCount, IndexInput in)\n    throws IOException {\n    this.valueCount = valueCount;\n    this.bitsPerValue = bitsPerValue;\n    this.in = in;\n\n    long v = 1;\n    masks = new long[bitsPerValue];\n    for (int i = 0; i < bitsPerValue; i++) {\n      v *= 2;\n      masks[i] = v - 1;\n    }\n\n    startPointer = in.getFilePointer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader#DirectPackedReader(int,int,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader#DirectPackedReader(int,int,IndexInput).mjava","sourceNew":"  public DirectPackedReader(int bitsPerValue, int valueCount, IndexInput in) {\n    super(valueCount, bitsPerValue);\n    this.in = in;\n\n    long v = 1;\n    masks = new long[bitsPerValue];\n    for (int i = 0; i < bitsPerValue; i++) {\n      v *= 2;\n      masks[i] = v - 1;\n    }\n\n    startPointer = in.getFilePointer();\n  }\n\n","sourceOld":"  public DirectPackedReader(int bitsPerValue, int valueCount, IndexInput in)\n    throws IOException {\n    super(valueCount, bitsPerValue);\n    this.in = in;\n\n    long v = 1;\n    masks = new long[bitsPerValue];\n    for (int i = 0; i < bitsPerValue; i++) {\n      v *= 2;\n      masks[i] = v - 1;\n    }\n\n    startPointer = in.getFilePointer();\n  }\n\n","bugFix":["142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb","4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader#DirectPackedReader(int,int,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader#DirectPackedReader(int,int,IndexInput).mjava","sourceNew":"  public DirectPackedReader(int bitsPerValue, int valueCount, IndexInput in) {\n    super(valueCount, bitsPerValue);\n    this.in = in;\n\n    long v = 1;\n    masks = new long[bitsPerValue];\n    for (int i = 0; i < bitsPerValue; i++) {\n      v *= 2;\n      masks[i] = v - 1;\n    }\n\n    startPointer = in.getFilePointer();\n  }\n\n","sourceOld":"  public DirectPackedReader(int bitsPerValue, int valueCount, IndexInput in)\n    throws IOException {\n    super(valueCount, bitsPerValue);\n    this.in = in;\n\n    long v = 1;\n    masks = new long[bitsPerValue];\n    for (int i = 0; i < bitsPerValue; i++) {\n      v *= 2;\n      masks[i] = v - 1;\n    }\n\n    startPointer = in.getFilePointer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43e029cf8b4d2eeda17d9b345d30b2479ddc8d93","date":1355779287,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader#DirectPackedReader(int,int,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader#DirectPackedReader(int,int,IndexInput).mjava","sourceNew":"  public DirectPackedReader(int bitsPerValue, int valueCount, IndexInput in) {\n    super(valueCount, bitsPerValue);\n    this.in = in;\n\n    startPointer = in.getFilePointer();\n  }\n\n","sourceOld":"  public DirectPackedReader(int bitsPerValue, int valueCount, IndexInput in) {\n    super(valueCount, bitsPerValue);\n    this.in = in;\n\n    long v = 1;\n    masks = new long[bitsPerValue];\n    for (int i = 0; i < bitsPerValue; i++) {\n      v *= 2;\n      masks[i] = v - 1;\n    }\n\n    startPointer = in.getFilePointer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader#DirectPackedReader(int,int,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader#DirectPackedReader(int,int,IndexInput).mjava","sourceNew":"  public DirectPackedReader(int bitsPerValue, int valueCount, IndexInput in) {\n    super(valueCount, bitsPerValue);\n    this.in = in;\n\n    startPointer = in.getFilePointer();\n  }\n\n","sourceOld":"  public DirectPackedReader(int bitsPerValue, int valueCount, IndexInput in) {\n    super(valueCount, bitsPerValue);\n    this.in = in;\n\n    long v = 1;\n    masks = new long[bitsPerValue];\n    for (int i = 0; i < bitsPerValue; i++) {\n      v *= 2;\n      masks[i] = v - 1;\n    }\n\n    startPointer = in.getFilePointer();\n  }\n\n","bugFix":["142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29518c5f1eb317a58cfb96446be6720fc6387dd4","date":1381888454,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader#DirectPackedReader(int,int,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader#DirectPackedReader(int,int,IndexInput).mjava","sourceNew":"  public DirectPackedReader(int bitsPerValue, int valueCount, IndexInput in) {\n    super(valueCount, bitsPerValue);\n    this.in = in;\n\n    startPointer = in.getFilePointer();\n    if (bitsPerValue == 64) {\n      valueMask = -1L;\n    } else {\n      valueMask = (1L << bitsPerValue) - 1;\n    }\n  }\n\n","sourceOld":"  public DirectPackedReader(int bitsPerValue, int valueCount, IndexInput in) {\n    super(valueCount, bitsPerValue);\n    this.in = in;\n\n    startPointer = in.getFilePointer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3","date":1401710950,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader#DirectPackedReader(int,int,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader#DirectPackedReader(int,int,IndexInput).mjava","sourceNew":"  DirectPackedReader(int bitsPerValue, int valueCount, IndexInput in) {\n    super(valueCount, bitsPerValue);\n    this.in = in;\n\n    startPointer = in.getFilePointer();\n    if (bitsPerValue == 64) {\n      valueMask = -1L;\n    } else {\n      valueMask = (1L << bitsPerValue) - 1;\n    }\n  }\n\n","sourceOld":"  public DirectPackedReader(int bitsPerValue, int valueCount, IndexInput in) {\n    super(valueCount, bitsPerValue);\n    this.in = in;\n\n    startPointer = in.getFilePointer();\n    if (bitsPerValue == 64) {\n      valueMask = -1L;\n    } else {\n      valueMask = (1L << bitsPerValue) - 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"053891414e8cd30f3b9300a8f4b685d9fd345359","date":1401970642,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader#DirectPackedReader(int,int,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/DirectPackedReader#DirectPackedReader(int,int,IndexInput).mjava","sourceNew":"  DirectPackedReader(int bitsPerValue, int valueCount, IndexInput in) {\n    super(valueCount);\n    this.in = in;\n    this.bitsPerValue = bitsPerValue;\n\n    startPointer = in.getFilePointer();\n    if (bitsPerValue == 64) {\n      valueMask = -1L;\n    } else {\n      valueMask = (1L << bitsPerValue) - 1;\n    }\n  }\n\n","sourceOld":"  DirectPackedReader(int bitsPerValue, int valueCount, IndexInput in) {\n    super(valueCount, bitsPerValue);\n    this.in = in;\n\n    startPointer = in.getFilePointer();\n    if (bitsPerValue == 64) {\n      valueMask = -1L;\n    } else {\n      valueMask = (1L << bitsPerValue) - 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","43e029cf8b4d2eeda17d9b345d30b2479ddc8d93"],"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3":["29518c5f1eb317a58cfb96446be6720fc6387dd4"],"29518c5f1eb317a58cfb96446be6720fc6387dd4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4a470c93b2b0f8f51241f52705fc110a01f27ad2","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"053891414e8cd30f3b9300a8f4b685d9fd345359":["d36ccb9a1c11aeb91962e89bda4a2e643c8629b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["053891414e8cd30f3b9300a8f4b685d9fd345359"],"43e029cf8b4d2eeda17d9b345d30b2479ddc8d93":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["29518c5f1eb317a58cfb96446be6720fc6387dd4"],"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3":["053891414e8cd30f3b9300a8f4b685d9fd345359"],"29518c5f1eb317a58cfb96446be6720fc6387dd4":["d36ccb9a1c11aeb91962e89bda4a2e643c8629b3"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d4d69c535930b5cce125cff868d40f6373dc27d4","fe33227f6805edab2036cbb80645cc4e2d1fa424","43e029cf8b4d2eeda17d9b345d30b2479ddc8d93"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"053891414e8cd30f3b9300a8f4b685d9fd345359":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43e029cf8b4d2eeda17d9b345d30b2479ddc8d93":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}