{"path":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","commits":[{"id":"696c7f6195b9683173ed379ce507833cf983ae95","date":1168362837,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","pathOld":"/dev/null","sourceNew":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexReader.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexReader.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d72db039743bd6a2da9be6306f57c71654ca1bf6","date":1173217255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","sourceNew":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexReader.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexReader.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexReader.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexReader.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n    }\n\n","bugFix":["696c7f6195b9683173ed379ce507833cf983ae95"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","sourceNew":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexReader.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexReader.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexReader.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexReader.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","sourceNew":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, false);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexReader.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir, false);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexReader.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexReader.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexReader.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","sourceNew":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, false);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexReader.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir, false);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexReader.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexReader.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexReader.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8","date":1254593002,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","sourceNew":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, false);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir, false);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, false);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexReader.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir, false);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexReader.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","sourceNew":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, false);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir, false);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, false);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir, false);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","sourceNew":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, false);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir, false);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, false);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir, false);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","sourceNew":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, false);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir, false);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, false);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir, false);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","sourceNew":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, false);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir, false);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, false);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir, false);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","sourceNew":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, false);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir, false);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, false);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir, false);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testExceptionReleaseWriteLockJIRA768().mjava","sourceNew":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, false);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir, false);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testExceptionReleaseWriteLockJIRA768() throws IOException {\n\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      addDoc(writer, \"aaa\");\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, false);\n      try {\n        reader.deleteDocument(1);\n        fail(\"did not hit exception when deleting an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n\n      reader = IndexReader.open(dir, false);\n      try {\n        reader.setNorm(1, \"content\", (float) 2.0);\n        fail(\"did not hit exception when calling setNorm on an invalid doc number\");\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // expected\n      }\n      reader.close();\n      if (IndexWriter.isLocked(dir)) {\n        fail(\"write lock is still held after close\");\n      }\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["0018e7a0579df5d3de71d0bd878322a7abef04d9","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["696c7f6195b9683173ed379ce507833cf983ae95"],"696c7f6195b9683173ed379ce507833cf983ae95":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["696c7f6195b9683173ed379ce507833cf983ae95"],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"696c7f6195b9683173ed379ce507833cf983ae95":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}