{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#writePropFile(CoreDescriptor,CoreContainer).mjava","commits":[{"id":"3a540622c5e216f2d96b1199c35603eaff1020e9","date":1370871574,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#writePropFile(CoreDescriptor,CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  private void writePropFile(CoreDescriptor cd, CoreContainer cc) {\n    File propFile = new File(cd.getInstanceDir(), \"core.properties\");\n    if (!propFile.exists()) {\n      propFile.getParentFile().mkdirs();\n      Properties props = new Properties();\n      props.put(\"name\", cd.getName());\n      if (cc.isZooKeeperAware()) {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        if (collection != null) {\n          props.put(\"collection\", collection);\n        }\n        String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n        if (coreNodeName != null) {\n          props.put(\"coreNodeName\", coreNodeName);\n        }\n        String roles = cd.getCloudDescriptor().getRoles();\n        if (roles != null) {\n          props.put(\"roles\", roles);\n        }\n        String shardId = cd.getCloudDescriptor().getShardId();\n        if (shardId != null) {\n          props.put(\"shard\", shardId);\n        }\n      }\n      OutputStream out = null;\n      try {\n        out = new FileOutputStream(propFile);\n        props.store(out, \"\");\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n      } finally {\n        if (out != null) {\n          IOUtils.closeQuietly(out);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90164923c8d1612badfdbea3fadc987a4e5bc7e6","date":1373121947,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#writePropFile(CoreDescriptor,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#writePropFile(CoreDescriptor,CoreContainer).mjava","sourceNew":"  private void writePropFile(CoreDescriptor cd, CoreContainer cc) {\n    File propFile = new File(cd.getInstanceDir(), \"core.properties\");\n    if (!propFile.exists()) {\n      propFile.getParentFile().mkdirs();\n      Properties props = new Properties();\n      props.put(\"name\", cd.getName());\n\n      // This must be being created since there's no file here already. So write out all of the params we were\n      // created with. This _may_ overwrite the name above, but that's OK.\n      Collection<String> stds = new HashSet(Arrays.asList(CoreDescriptor.standardPropNames));\n      for (String prop : cd.getCreatedProperties().stringPropertyNames()) {\n        // Only preserve things that are legal, and let's just keep instDir right out of the persisted file even\n        // though it's part of the create properties on the URL.\n        if (! CoreDescriptor.CORE_INSTDIR.equals(prop) && stds.contains(prop)) {\n          props.put(prop, cd.getCreatedProperties().getProperty(prop));\n        }\n      }\n\n      if (cc.isZooKeeperAware()) {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        if (collection != null) {\n          props.put(\"collection\", collection);\n        }\n        String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n        if (coreNodeName != null) {\n          props.put(\"coreNodeName\", coreNodeName);\n        }\n        String roles = cd.getCloudDescriptor().getRoles();\n        if (roles != null) {\n          props.put(\"roles\", roles);\n        }\n        String shardId = cd.getCloudDescriptor().getShardId();\n        if (shardId != null) {\n          props.put(\"shard\", shardId);\n        }\n      }\n      OutputStream out = null;\n      try {\n        out = new FileOutputStream(propFile);\n        props.store(out, \"\");\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n      } finally {\n        if (out != null) {\n          IOUtils.closeQuietly(out);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void writePropFile(CoreDescriptor cd, CoreContainer cc) {\n    File propFile = new File(cd.getInstanceDir(), \"core.properties\");\n    if (!propFile.exists()) {\n      propFile.getParentFile().mkdirs();\n      Properties props = new Properties();\n      props.put(\"name\", cd.getName());\n      if (cc.isZooKeeperAware()) {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        if (collection != null) {\n          props.put(\"collection\", collection);\n        }\n        String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n        if (coreNodeName != null) {\n          props.put(\"coreNodeName\", coreNodeName);\n        }\n        String roles = cd.getCloudDescriptor().getRoles();\n        if (roles != null) {\n          props.put(\"roles\", roles);\n        }\n        String shardId = cd.getCloudDescriptor().getShardId();\n        if (shardId != null) {\n          props.put(\"shard\", shardId);\n        }\n      }\n      OutputStream out = null;\n      try {\n        out = new FileOutputStream(propFile);\n        props.store(out, \"\");\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n      } finally {\n        if (out != null) {\n          IOUtils.closeQuietly(out);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#writePropFile(CoreDescriptor,CoreContainer).mjava","sourceNew":null,"sourceOld":"  private void writePropFile(CoreDescriptor cd, CoreContainer cc) {\n    File propFile = new File(cd.getInstanceDir(), \"core.properties\");\n    if (!propFile.exists()) {\n      propFile.getParentFile().mkdirs();\n      Properties props = new Properties();\n      props.put(\"name\", cd.getName());\n\n      // This must be being created since there's no file here already. So write out all of the params we were\n      // created with. This _may_ overwrite the name above, but that's OK.\n      Collection<String> stds = new HashSet(Arrays.asList(CoreDescriptor.standardPropNames));\n      for (String prop : cd.getCreatedProperties().stringPropertyNames()) {\n        // Only preserve things that are legal, and let's just keep instDir right out of the persisted file even\n        // though it's part of the create properties on the URL.\n        if (! CoreDescriptor.CORE_INSTDIR.equals(prop) && stds.contains(prop)) {\n          props.put(prop, cd.getCreatedProperties().getProperty(prop));\n        }\n      }\n\n      if (cc.isZooKeeperAware()) {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        if (collection != null) {\n          props.put(\"collection\", collection);\n        }\n        String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n        if (coreNodeName != null) {\n          props.put(\"coreNodeName\", coreNodeName);\n        }\n        String roles = cd.getCloudDescriptor().getRoles();\n        if (roles != null) {\n          props.put(\"roles\", roles);\n        }\n        String shardId = cd.getCloudDescriptor().getShardId();\n        if (shardId != null) {\n          props.put(\"shard\", shardId);\n        }\n      }\n      OutputStream out = null;\n      try {\n        out = new FileOutputStream(propFile);\n        props.store(out, \"\");\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n      } finally {\n        if (out != null) {\n          IOUtils.closeQuietly(out);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#writePropFile(CoreDescriptor,CoreContainer).mjava","sourceNew":null,"sourceOld":"  private void writePropFile(CoreDescriptor cd, CoreContainer cc) {\n    File propFile = new File(cd.getInstanceDir(), \"core.properties\");\n    if (!propFile.exists()) {\n      propFile.getParentFile().mkdirs();\n      Properties props = new Properties();\n      props.put(\"name\", cd.getName());\n      if (cc.isZooKeeperAware()) {\n        String collection = cd.getCloudDescriptor().getCollectionName();\n        if (collection != null) {\n          props.put(\"collection\", collection);\n        }\n        String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n        if (coreNodeName != null) {\n          props.put(\"coreNodeName\", coreNodeName);\n        }\n        String roles = cd.getCloudDescriptor().getRoles();\n        if (roles != null) {\n          props.put(\"roles\", roles);\n        }\n        String shardId = cd.getCloudDescriptor().getShardId();\n        if (shardId != null) {\n          props.put(\"shard\", shardId);\n        }\n      }\n      OutputStream out = null;\n      try {\n        out = new FileOutputStream(propFile);\n        props.store(out, \"\");\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n      } finally {\n        if (out != null) {\n          IOUtils.closeQuietly(out);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a540622c5e216f2d96b1199c35603eaff1020e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3a540622c5e216f2d96b1199c35603eaff1020e9","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["90164923c8d1612badfdbea3fadc987a4e5bc7e6"],"90164923c8d1612badfdbea3fadc987a4e5bc7e6":["3a540622c5e216f2d96b1199c35603eaff1020e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"]},"commit2Childs":{"3a540622c5e216f2d96b1199c35603eaff1020e9":["37a0f60745e53927c4c876cfe5b5a58170f0646c","90164923c8d1612badfdbea3fadc987a4e5bc7e6"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a540622c5e216f2d96b1199c35603eaff1020e9"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90164923c8d1612badfdbea3fadc987a4e5bc7e6":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}