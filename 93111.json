{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#ShingleAnalyzerWrapper(Analyzer,int,int,String,boolean,boolean).mjava","commits":[{"id":"871f13bf1a6255d5315451355f9fd2ebdd84e740","date":1316056877,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#ShingleAnalyzerWrapper(Analyzer,int,int,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new ShingleAnalyzerWrapper\n   *\n   * @param defaultAnalyzer Analyzer whose TokenStream is to be filtered\n   * @param minShingleSize Min shingle (token ngram) size\n   * @param maxShingleSize Max shingle size\n   * @param tokenSeparator Used to separate input stream tokens in output shingles\n   * @param outputUnigrams Whether or not the filter shall pass the original\n   *        tokens to the output stream\n   * @param outputUnigramsIfNoShingles Overrides the behavior of outputUnigrams==false for those\n   *        times when no shingles are available (because there are fewer than\n   *        minShingleSize tokens in the input stream)?\n   *        Note that if outputUnigrams==true, then unigrams are always output,\n   *        regardless of whether any shingles are available.\n   */\n  public ShingleAnalyzerWrapper(\n      Analyzer defaultAnalyzer,\n      int minShingleSize,\n      int maxShingleSize,\n      String tokenSeparator,\n      boolean outputUnigrams,\n      boolean outputUnigramsIfNoShingles) {\n    this.defaultAnalyzer = defaultAnalyzer;\n\n    if (maxShingleSize < 2) {\n      throw new IllegalArgumentException(\"Max shingle size must be >= 2\");\n    }\n    this.maxShingleSize = maxShingleSize;\n\n    if (minShingleSize < 2) {\n      throw new IllegalArgumentException(\"Min shingle size must be >= 2\");\n    }\n    if (minShingleSize > maxShingleSize) {\n      throw new IllegalArgumentException\n        (\"Min shingle size must be <= max shingle size\");\n    }\n    this.minShingleSize = minShingleSize;\n\n    this.tokenSeparator = (tokenSeparator == null ? \"\" : tokenSeparator);\n    this.outputUnigrams = outputUnigrams;\n    this.outputUnigramsIfNoShingles = outputUnigramsIfNoShingles;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#ShingleAnalyzerWrapper(Analyzer,int,int,String,boolean,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#ShingleAnalyzerWrapper(Analyzer,int,int,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new ShingleAnalyzerWrapper\n   *\n   * @param defaultAnalyzer Analyzer whose TokenStream is to be filtered\n   * @param minShingleSize Min shingle (token ngram) size\n   * @param maxShingleSize Max shingle size\n   * @param tokenSeparator Used to separate input stream tokens in output shingles\n   * @param outputUnigrams Whether or not the filter shall pass the original\n   *        tokens to the output stream\n   * @param outputUnigramsIfNoShingles Overrides the behavior of outputUnigrams==false for those\n   *        times when no shingles are available (because there are fewer than\n   *        minShingleSize tokens in the input stream)?\n   *        Note that if outputUnigrams==true, then unigrams are always output,\n   *        regardless of whether any shingles are available.\n   */\n  public ShingleAnalyzerWrapper(\n      Analyzer defaultAnalyzer,\n      int minShingleSize,\n      int maxShingleSize,\n      String tokenSeparator,\n      boolean outputUnigrams,\n      boolean outputUnigramsIfNoShingles) {\n    this.defaultAnalyzer = defaultAnalyzer;\n\n    if (maxShingleSize < 2) {\n      throw new IllegalArgumentException(\"Max shingle size must be >= 2\");\n    }\n    this.maxShingleSize = maxShingleSize;\n\n    if (minShingleSize < 2) {\n      throw new IllegalArgumentException(\"Min shingle size must be >= 2\");\n    }\n    if (minShingleSize > maxShingleSize) {\n      throw new IllegalArgumentException\n        (\"Min shingle size must be <= max shingle size\");\n    }\n    this.minShingleSize = minShingleSize;\n\n    this.tokenSeparator = (tokenSeparator == null ? \"\" : tokenSeparator);\n    this.outputUnigrams = outputUnigrams;\n    this.outputUnigramsIfNoShingles = outputUnigramsIfNoShingles;\n  }\n\n","sourceOld":"  /**\n   * Creates a new ShingleAnalyzerWrapper\n   *\n   * @param defaultAnalyzer Analyzer whose TokenStream is to be filtered\n   * @param minShingleSize Min shingle (token ngram) size\n   * @param maxShingleSize Max shingle size\n   * @param tokenSeparator Used to separate input stream tokens in output shingles\n   * @param outputUnigrams Whether or not the filter shall pass the original\n   *        tokens to the output stream\n   * @param outputUnigramsIfNoShingles Overrides the behavior of outputUnigrams==false for those\n   *        times when no shingles are available (because there are fewer than\n   *        minShingleSize tokens in the input stream)?\n   *        Note that if outputUnigrams==true, then unigrams are always output,\n   *        regardless of whether any shingles are available.\n   */\n  public ShingleAnalyzerWrapper(\n      Analyzer defaultAnalyzer,\n      int minShingleSize,\n      int maxShingleSize,\n      String tokenSeparator,\n      boolean outputUnigrams,\n      boolean outputUnigramsIfNoShingles) {\n    this.defaultAnalyzer = defaultAnalyzer;\n\n    if (maxShingleSize < 2) {\n      throw new IllegalArgumentException(\"Max shingle size must be >= 2\");\n    }\n    this.maxShingleSize = maxShingleSize;\n\n    if (minShingleSize < 2) {\n      throw new IllegalArgumentException(\"Min shingle size must be >= 2\");\n    }\n    if (minShingleSize > maxShingleSize) {\n      throw new IllegalArgumentException\n        (\"Min shingle size must be <= max shingle size\");\n    }\n    this.minShingleSize = minShingleSize;\n\n    this.tokenSeparator = (tokenSeparator == null ? \"\" : tokenSeparator);\n    this.outputUnigrams = outputUnigrams;\n    this.outputUnigramsIfNoShingles = outputUnigramsIfNoShingles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["871f13bf1a6255d5315451355f9fd2ebdd84e740"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"871f13bf1a6255d5315451355f9fd2ebdd84e740":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["871f13bf1a6255d5315451355f9fd2ebdd84e740"],"871f13bf1a6255d5315451355f9fd2ebdd84e740":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}