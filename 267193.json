{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","sourceNew":"    public Iterator<Column.Row[]> permutationIterator() {\n\n      return new Iterator<Column.Row[]>() {\n\n        private int[] columnRowCounters = new int[columns.size()];\n\n        public void remove() {\n          throw new IllegalStateException(\"not implemented\");\n        }\n\n        public boolean hasNext() {\n          int s = columnRowCounters.length;\n          int n = columns.size();\n          return s != 0 && n >= s && columnRowCounters[s - 1] < (columns.get(s - 1)).getRows().size();\n        }\n\n        public Column.Row[] next() {\n          if (!hasNext()) {\n            throw new NoSuchElementException(\"no more elements\");\n          }\n\n          Column.Row[] rows = new Column.Row[columnRowCounters.length];\n\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            rows[i] = columns.get(i).rows.get(columnRowCounters[i]);\n          }\n          incrementColumnRowCounters();\n\n          return rows;\n        }\n\n        private void incrementColumnRowCounters() {\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            columnRowCounters[i]++;\n            if (columnRowCounters[i] == columns.get(i).rows.size() &&\n                i < columnRowCounters.length - 1) {\n              columnRowCounters[i] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      };\n    }\n\n","sourceOld":"    public Iterator<Column.Row[]> permutationIterator() {\n\n      return new Iterator<Column.Row[]>() {\n\n        private int[] columnRowCounters = new int[columns.size()];\n\n        public void remove() {\n          throw new IllegalStateException(\"not implemented\");\n        }\n\n        public boolean hasNext() {\n          int s = columnRowCounters.length;\n          int n = columns.size();\n          return s != 0 && n >= s && columnRowCounters[s - 1] < (columns.get(s - 1)).getRows().size();\n        }\n\n        public Column.Row[] next() {\n          if (!hasNext()) {\n            throw new NoSuchElementException(\"no more elements\");\n          }\n\n          Column.Row[] rows = new Column.Row[columnRowCounters.length];\n\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            rows[i] = columns.get(i).rows.get(columnRowCounters[i]);\n          }\n          incrementColumnRowCounters();\n\n          return rows;\n        }\n\n        private void incrementColumnRowCounters() {\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            columnRowCounters[i]++;\n            if (columnRowCounters[i] == columns.get(i).rows.size() &&\n                i < columnRowCounters.length - 1) {\n              columnRowCounters[i] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aacf7f8a9f6ea920c7ca39f86371d4e25397121b","date":1297761846,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","sourceNew":null,"sourceOld":"    public Iterator<Column.Row[]> permutationIterator() {\n\n      return new Iterator<Column.Row[]>() {\n\n        private int[] columnRowCounters = new int[columns.size()];\n\n        public void remove() {\n          throw new IllegalStateException(\"not implemented\");\n        }\n\n        public boolean hasNext() {\n          int s = columnRowCounters.length;\n          int n = columns.size();\n          return s != 0 && n >= s && columnRowCounters[s - 1] < (columns.get(s - 1)).getRows().size();\n        }\n\n        public Column.Row[] next() {\n          if (!hasNext()) {\n            throw new NoSuchElementException(\"no more elements\");\n          }\n\n          Column.Row[] rows = new Column.Row[columnRowCounters.length];\n\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            rows[i] = columns.get(i).rows.get(columnRowCounters[i]);\n          }\n          incrementColumnRowCounters();\n\n          return rows;\n        }\n\n        private void incrementColumnRowCounters() {\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            columnRowCounters[i]++;\n            if (columnRowCounters[i] == columns.get(i).rows.size() &&\n                i < columnRowCounters.length - 1) {\n              columnRowCounters[i] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","sourceNew":null,"sourceOld":"    public Iterator<Column.Row[]> permutationIterator() {\n\n      return new Iterator<Column.Row[]>() {\n\n        private int[] columnRowCounters = new int[columns.size()];\n\n        public void remove() {\n          throw new IllegalStateException(\"not implemented\");\n        }\n\n        public boolean hasNext() {\n          int s = columnRowCounters.length;\n          int n = columns.size();\n          return s != 0 && n >= s && columnRowCounters[s - 1] < (columns.get(s - 1)).getRows().size();\n        }\n\n        public Column.Row[] next() {\n          if (!hasNext()) {\n            throw new NoSuchElementException(\"no more elements\");\n          }\n\n          Column.Row[] rows = new Column.Row[columnRowCounters.length];\n\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            rows[i] = columns.get(i).rows.get(columnRowCounters[i]);\n          }\n          incrementColumnRowCounters();\n\n          return rows;\n        }\n\n        private void incrementColumnRowCounters() {\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            columnRowCounters[i]++;\n            if (columnRowCounters[i] == columns.get(i).rows.size() &&\n                i < columnRowCounters.length - 1) {\n              columnRowCounters[i] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter.Matrix#permutationIterator().mjava","sourceNew":null,"sourceOld":"    public Iterator<Column.Row[]> permutationIterator() {\n\n      return new Iterator<Column.Row[]>() {\n\n        private int[] columnRowCounters = new int[columns.size()];\n\n        public void remove() {\n          throw new IllegalStateException(\"not implemented\");\n        }\n\n        public boolean hasNext() {\n          int s = columnRowCounters.length;\n          int n = columns.size();\n          return s != 0 && n >= s && columnRowCounters[s - 1] < (columns.get(s - 1)).getRows().size();\n        }\n\n        public Column.Row[] next() {\n          if (!hasNext()) {\n            throw new NoSuchElementException(\"no more elements\");\n          }\n\n          Column.Row[] rows = new Column.Row[columnRowCounters.length];\n\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            rows[i] = columns.get(i).rows.get(columnRowCounters[i]);\n          }\n          incrementColumnRowCounters();\n\n          return rows;\n        }\n\n        private void incrementColumnRowCounters() {\n          for (int i = 0; i < columnRowCounters.length; i++) {\n            columnRowCounters[i]++;\n            if (columnRowCounters[i] == columns.get(i).rows.size() &&\n                i < columnRowCounters.length - 1) {\n              columnRowCounters[i] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["0f080986da691a3bba7b757f43ab72cdc82b57ce","aacf7f8a9f6ea920c7ca39f86371d4e25397121b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aacf7f8a9f6ea920c7ca39f86371d4e25397121b":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["0f080986da691a3bba7b757f43ab72cdc82b57ce","aacf7f8a9f6ea920c7ca39f86371d4e25397121b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aacf7f8a9f6ea920c7ca39f86371d4e25397121b"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["f1bdbf92da222965b46c0a942c3857ba56e5c638","aacf7f8a9f6ea920c7ca39f86371d4e25397121b","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"aacf7f8a9f6ea920c7ca39f86371d4e25397121b":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}