{"path":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#fill(int,int,long).mjava","commits":[{"id":"747628bb19a950ac2141b16756bdce9a47e94cc2","date":1338661284,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#fill(int,int,long).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void fill(int fromIndex, int toIndex, long val) {\n    assert fromIndex >= 0;\n    assert fromIndex <= toIndex;\n    assert (val & readMask) == val;\n\n    if (toIndex - fromIndex <= valuesPerBlock << 1) {\n      // there needs to be at least one full block to set for the block\n      // approach to be worth trying\n      super.fill(fromIndex, toIndex, val);\n      return;\n    }\n\n    // set values naively until the next block start\n    int fromOffsetInBlock = offsetInBlock(fromIndex);\n    if (fromOffsetInBlock != 0) {\n      for (int i = fromOffsetInBlock; i < valuesPerBlock; ++i) {\n        set(fromIndex++, val);\n      }\n      assert offsetInBlock(fromIndex) == 0;\n    }\n\n    // bulk set of the inner blocks\n    final int fromBlock = blockOffset(fromIndex);\n    final int toBlock = blockOffset(toIndex);\n    assert fromBlock * valuesPerBlock == fromIndex;\n\n    long blockValue = 0L;\n    for (int i = 0; i < valuesPerBlock; ++i) {\n      blockValue = blockValue | (val << shifts[i]);\n    }\n    Arrays.fill(blocks, fromBlock, toBlock, blockValue);\n\n    // fill the gap\n    for (int i = valuesPerBlock * toBlock; i < toIndex; ++i) {\n      set(i, val);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbf2299b235bb1f008e10b7e3c449b4c70e4a34c","date":1341308106,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#fill(int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#fill(int,int,long).mjava","sourceNew":"  @Override\n  public void fill(int fromIndex, int toIndex, long val) {\n    assert fromIndex >= 0;\n    assert fromIndex <= toIndex;\n    assert PackedInts.bitsRequired(val) <= bitsPerValue;\n\n    final int valuesPerBlock = 64 / bitsPerValue;\n    if (toIndex - fromIndex <= valuesPerBlock << 1) {\n      // there needs to be at least one full block to set for the block\n      // approach to be worth trying\n      super.fill(fromIndex, toIndex, val);\n      return;\n    }\n\n    // set values naively until the next block start\n    int fromOffsetInBlock = fromIndex % valuesPerBlock;\n    if (fromOffsetInBlock != 0) {\n      for (int i = fromOffsetInBlock; i < valuesPerBlock; ++i) {\n        set(fromIndex++, val);\n      }\n      assert fromIndex % valuesPerBlock == 0;\n    }\n\n    // bulk set of the inner blocks\n    final int fromBlock = fromIndex / valuesPerBlock;\n    final int toBlock = toIndex / valuesPerBlock;\n    assert fromBlock * valuesPerBlock == fromIndex;\n\n    long blockValue = 0L;\n    for (int i = 0; i < valuesPerBlock; ++i) {\n      blockValue = blockValue | (val << (i * bitsPerValue));\n    }\n    Arrays.fill(blocks, fromBlock, toBlock, blockValue);\n\n    // fill the gap\n    for (int i = valuesPerBlock * toBlock; i < toIndex; ++i) {\n      set(i, val);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void fill(int fromIndex, int toIndex, long val) {\n    assert fromIndex >= 0;\n    assert fromIndex <= toIndex;\n    assert (val & readMask) == val;\n\n    if (toIndex - fromIndex <= valuesPerBlock << 1) {\n      // there needs to be at least one full block to set for the block\n      // approach to be worth trying\n      super.fill(fromIndex, toIndex, val);\n      return;\n    }\n\n    // set values naively until the next block start\n    int fromOffsetInBlock = offsetInBlock(fromIndex);\n    if (fromOffsetInBlock != 0) {\n      for (int i = fromOffsetInBlock; i < valuesPerBlock; ++i) {\n        set(fromIndex++, val);\n      }\n      assert offsetInBlock(fromIndex) == 0;\n    }\n\n    // bulk set of the inner blocks\n    final int fromBlock = blockOffset(fromIndex);\n    final int toBlock = blockOffset(toIndex);\n    assert fromBlock * valuesPerBlock == fromIndex;\n\n    long blockValue = 0L;\n    for (int i = 0; i < valuesPerBlock; ++i) {\n      blockValue = blockValue | (val << shifts[i]);\n    }\n    Arrays.fill(blocks, fromBlock, toBlock, blockValue);\n\n    // fill the gap\n    for (int i = valuesPerBlock * toBlock; i < toIndex; ++i) {\n      set(i, val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#fill(int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#fill(int,int,long).mjava","sourceNew":"  @Override\n  public void fill(int fromIndex, int toIndex, long val) {\n    assert fromIndex >= 0;\n    assert fromIndex <= toIndex;\n    assert PackedInts.bitsRequired(val) <= bitsPerValue;\n\n    final int valuesPerBlock = 64 / bitsPerValue;\n    if (toIndex - fromIndex <= valuesPerBlock << 1) {\n      // there needs to be at least one full block to set for the block\n      // approach to be worth trying\n      super.fill(fromIndex, toIndex, val);\n      return;\n    }\n\n    // set values naively until the next block start\n    int fromOffsetInBlock = fromIndex % valuesPerBlock;\n    if (fromOffsetInBlock != 0) {\n      for (int i = fromOffsetInBlock; i < valuesPerBlock; ++i) {\n        set(fromIndex++, val);\n      }\n      assert fromIndex % valuesPerBlock == 0;\n    }\n\n    // bulk set of the inner blocks\n    final int fromBlock = fromIndex / valuesPerBlock;\n    final int toBlock = toIndex / valuesPerBlock;\n    assert fromBlock * valuesPerBlock == fromIndex;\n\n    long blockValue = 0L;\n    for (int i = 0; i < valuesPerBlock; ++i) {\n      blockValue = blockValue | (val << (i * bitsPerValue));\n    }\n    Arrays.fill(blocks, fromBlock, toBlock, blockValue);\n\n    // fill the gap\n    for (int i = valuesPerBlock * toBlock; i < toIndex; ++i) {\n      set(i, val);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void fill(int fromIndex, int toIndex, long val) {\n    assert fromIndex >= 0;\n    assert fromIndex <= toIndex;\n    assert (val & readMask) == val;\n\n    if (toIndex - fromIndex <= valuesPerBlock << 1) {\n      // there needs to be at least one full block to set for the block\n      // approach to be worth trying\n      super.fill(fromIndex, toIndex, val);\n      return;\n    }\n\n    // set values naively until the next block start\n    int fromOffsetInBlock = offsetInBlock(fromIndex);\n    if (fromOffsetInBlock != 0) {\n      for (int i = fromOffsetInBlock; i < valuesPerBlock; ++i) {\n        set(fromIndex++, val);\n      }\n      assert offsetInBlock(fromIndex) == 0;\n    }\n\n    // bulk set of the inner blocks\n    final int fromBlock = blockOffset(fromIndex);\n    final int toBlock = blockOffset(toIndex);\n    assert fromBlock * valuesPerBlock == fromIndex;\n\n    long blockValue = 0L;\n    for (int i = 0; i < valuesPerBlock; ++i) {\n      blockValue = blockValue | (val << shifts[i]);\n    }\n    Arrays.fill(blocks, fromBlock, toBlock, blockValue);\n\n    // fill the gap\n    for (int i = valuesPerBlock * toBlock; i < toIndex; ++i) {\n      set(i, val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff0cb4eabd8bb5c27d3a284e18c812a89958a66","date":1402928522,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#fill(int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#fill(int,int,long).mjava","sourceNew":"  @Override\n  public void fill(int fromIndex, int toIndex, long val) {\n    assert fromIndex >= 0;\n    assert fromIndex <= toIndex;\n    assert PackedInts.unsignedBitsRequired(val) <= bitsPerValue;\n\n    final int valuesPerBlock = 64 / bitsPerValue;\n    if (toIndex - fromIndex <= valuesPerBlock << 1) {\n      // there needs to be at least one full block to set for the block\n      // approach to be worth trying\n      super.fill(fromIndex, toIndex, val);\n      return;\n    }\n\n    // set values naively until the next block start\n    int fromOffsetInBlock = fromIndex % valuesPerBlock;\n    if (fromOffsetInBlock != 0) {\n      for (int i = fromOffsetInBlock; i < valuesPerBlock; ++i) {\n        set(fromIndex++, val);\n      }\n      assert fromIndex % valuesPerBlock == 0;\n    }\n\n    // bulk set of the inner blocks\n    final int fromBlock = fromIndex / valuesPerBlock;\n    final int toBlock = toIndex / valuesPerBlock;\n    assert fromBlock * valuesPerBlock == fromIndex;\n\n    long blockValue = 0L;\n    for (int i = 0; i < valuesPerBlock; ++i) {\n      blockValue = blockValue | (val << (i * bitsPerValue));\n    }\n    Arrays.fill(blocks, fromBlock, toBlock, blockValue);\n\n    // fill the gap\n    for (int i = valuesPerBlock * toBlock; i < toIndex; ++i) {\n      set(i, val);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void fill(int fromIndex, int toIndex, long val) {\n    assert fromIndex >= 0;\n    assert fromIndex <= toIndex;\n    assert PackedInts.bitsRequired(val) <= bitsPerValue;\n\n    final int valuesPerBlock = 64 / bitsPerValue;\n    if (toIndex - fromIndex <= valuesPerBlock << 1) {\n      // there needs to be at least one full block to set for the block\n      // approach to be worth trying\n      super.fill(fromIndex, toIndex, val);\n      return;\n    }\n\n    // set values naively until the next block start\n    int fromOffsetInBlock = fromIndex % valuesPerBlock;\n    if (fromOffsetInBlock != 0) {\n      for (int i = fromOffsetInBlock; i < valuesPerBlock; ++i) {\n        set(fromIndex++, val);\n      }\n      assert fromIndex % valuesPerBlock == 0;\n    }\n\n    // bulk set of the inner blocks\n    final int fromBlock = fromIndex / valuesPerBlock;\n    final int toBlock = toIndex / valuesPerBlock;\n    assert fromBlock * valuesPerBlock == fromIndex;\n\n    long blockValue = 0L;\n    for (int i = 0; i < valuesPerBlock; ++i) {\n      blockValue = blockValue | (val << (i * bitsPerValue));\n    }\n    Arrays.fill(blocks, fromBlock, toBlock, blockValue);\n\n    // fill the gap\n    for (int i = valuesPerBlock * toBlock; i < toIndex; ++i) {\n      set(i, val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#fill(int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlock#fill(int,int,long).mjava","sourceNew":"  @Override\n  public void fill(int fromIndex, int toIndex, long val) {\n    assert fromIndex >= 0;\n    assert fromIndex <= toIndex;\n    assert PackedInts.unsignedBitsRequired(val) <= bitsPerValue;\n\n    final int valuesPerBlock = 64 / bitsPerValue;\n    if (toIndex - fromIndex <= valuesPerBlock << 1) {\n      // there needs to be at least one full block to set for the block\n      // approach to be worth trying\n      super.fill(fromIndex, toIndex, val);\n      return;\n    }\n\n    // set values naively until the next block start\n    int fromOffsetInBlock = fromIndex % valuesPerBlock;\n    if (fromOffsetInBlock != 0) {\n      for (int i = fromOffsetInBlock; i < valuesPerBlock; ++i) {\n        set(fromIndex++, val);\n      }\n      assert fromIndex % valuesPerBlock == 0;\n    }\n\n    // bulk set of the inner blocks\n    final int fromBlock = fromIndex / valuesPerBlock;\n    final int toBlock = toIndex / valuesPerBlock;\n    assert fromBlock * valuesPerBlock == fromIndex;\n\n    long blockValue = 0L;\n    for (int i = 0; i < valuesPerBlock; ++i) {\n      blockValue = blockValue | (val << (i * bitsPerValue));\n    }\n    Arrays.fill(blocks, fromBlock, toBlock, blockValue);\n\n    // fill the gap\n    for (int i = valuesPerBlock * toBlock; i < toIndex; ++i) {\n      set(i, val);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void fill(int fromIndex, int toIndex, long val) {\n    assert fromIndex >= 0;\n    assert fromIndex <= toIndex;\n    assert PackedInts.bitsRequired(val) <= bitsPerValue;\n\n    final int valuesPerBlock = 64 / bitsPerValue;\n    if (toIndex - fromIndex <= valuesPerBlock << 1) {\n      // there needs to be at least one full block to set for the block\n      // approach to be worth trying\n      super.fill(fromIndex, toIndex, val);\n      return;\n    }\n\n    // set values naively until the next block start\n    int fromOffsetInBlock = fromIndex % valuesPerBlock;\n    if (fromOffsetInBlock != 0) {\n      for (int i = fromOffsetInBlock; i < valuesPerBlock; ++i) {\n        set(fromIndex++, val);\n      }\n      assert fromIndex % valuesPerBlock == 0;\n    }\n\n    // bulk set of the inner blocks\n    final int fromBlock = fromIndex / valuesPerBlock;\n    final int toBlock = toIndex / valuesPerBlock;\n    assert fromBlock * valuesPerBlock == fromIndex;\n\n    long blockValue = 0L;\n    for (int i = 0; i < valuesPerBlock; ++i) {\n      blockValue = blockValue | (val << (i * bitsPerValue));\n    }\n    Arrays.fill(blocks, fromBlock, toBlock, blockValue);\n\n    // fill the gap\n    for (int i = valuesPerBlock * toBlock; i < toIndex; ++i) {\n      set(i, val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["fbf2299b235bb1f008e10b7e3c449b4c70e4a34c"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["747628bb19a950ac2141b16756bdce9a47e94cc2","fbf2299b235bb1f008e10b7e3c449b4c70e4a34c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbf2299b235bb1f008e10b7e3c449b4c70e4a34c":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["fbf2299b235bb1f008e10b7e3c449b4c70e4a34c","dff0cb4eabd8bb5c27d3a284e18c812a89958a66"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66"]},"commit2Childs":{"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"fbf2299b235bb1f008e10b7e3c449b4c70e4a34c":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66","fe33227f6805edab2036cbb80645cc4e2d1fa424","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"747628bb19a950ac2141b16756bdce9a47e94cc2":["fe33227f6805edab2036cbb80645cc4e2d1fa424","fbf2299b235bb1f008e10b7e3c449b4c70e4a34c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}