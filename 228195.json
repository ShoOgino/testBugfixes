{"path":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#MockFSDirectory(File,Random).mjava","commits":[{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#MockFSDirectory(File,Random).mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#MockFSDirectory(File).mjava","sourceNew":"      public MockFSDirectory(File path, Random rand) throws IOException {\n        this.rand = rand;\n        lockFactory = new NoLockFactory();\n        dir = FSDirectory.getDirectory(path);\n      }\n\n","sourceOld":"      public MockFSDirectory(File path) throws IOException {\n        lockFactory = new NoLockFactory();\n        dir = FSDirectory.getDirectory(path);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","date":1243677645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#MockFSDirectory(File,Random).mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#MockFSDirectory(File,Random).mjava","sourceNew":"      public MockFSDirectory(File path, Random rand) throws IOException {\n        this.rand = rand;\n        lockFactory = new NoLockFactory();\n        dir = FSDirectory.open(path);\n      }\n\n","sourceOld":"      public MockFSDirectory(File path, Random rand) throws IOException {\n        this.rand = rand;\n        lockFactory = new NoLockFactory();\n        dir = FSDirectory.getDirectory(path);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416d032f85b7ea8efc272f86ba46bc460589aff7","date":1243881250,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#MockFSDirectory(File,Random).mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#MockFSDirectory(File,Random).mjava","sourceNew":"      public MockFSDirectory(File path, Random rand) throws IOException {\n        this.rand = rand;\n        lockFactory = new NoLockFactory();\n        dir = new SimpleFSDirectory(path, null);\n      }\n\n","sourceOld":"      public MockFSDirectory(File path, Random rand) throws IOException {\n        this.rand = rand;\n        lockFactory = new NoLockFactory();\n        dir = FSDirectory.open(path);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#MockFSDirectory(File,Random).mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#MockFSDirectory(File,Random).mjava","sourceNew":"      public MockFSDirectory(File path, Random rand) throws IOException {\n        this.rand = rand;\n        lockFactory = NoLockFactory.getNoLockFactory();\n        dir = new SimpleFSDirectory(path, null);\n      }\n\n","sourceOld":"      public MockFSDirectory(File path, Random rand) throws IOException {\n        this.rand = rand;\n        lockFactory = new NoLockFactory();\n        dir = new SimpleFSDirectory(path, null);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#MockFSDirectory(File,Random).mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#MockFSDirectory(File,Random).mjava","sourceNew":"      public MockFSDirectory(File path, Random rand) throws IOException {\n        this.rand = rand;\n        lockFactory = new NoLockFactory();\n        dir = new SimpleFSDirectory(path, null);\n      }\n\n","sourceOld":"      public MockFSDirectory(File path, Random rand) throws IOException {\n        this.rand = rand;\n        lockFactory = NoLockFactory.getNoLockFactory();\n        dir = new SimpleFSDirectory(path, null);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#MockFSDirectory(File,Random).mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#MockFSDirectory(File,Random).mjava","sourceNew":"      public MockFSDirectory(File path, Random rand) throws IOException {\n        this.rand = rand;\n        lockFactory = NoLockFactory.getNoLockFactory();\n        dir = new SimpleFSDirectory(path, null);\n      }\n\n","sourceOld":"      public MockFSDirectory(File path, Random rand) throws IOException {\n        this.rand = rand;\n        lockFactory = new NoLockFactory();\n        dir = new SimpleFSDirectory(path, null);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#MockFSDirectory(File,Random).mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#MockFSDirectory(File,Random).mjava","sourceNew":"      public MockFSDirectory(File path, Random rand) throws IOException {\n        this.rand = rand;\n        lockFactory = NoLockFactory.getNoLockFactory();\n        dir = new SimpleFSDirectory(path, null);\n      }\n\n","sourceOld":"      public MockFSDirectory(File path, Random rand) throws IOException {\n        this.rand = rand;\n        lockFactory = NoLockFactory.getNoLockFactory();\n        dir = new SimpleFSDirectory(path, null);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"cb1066f2afe9450585d0d10063ea4450085236f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["cb1066f2afe9450585d0d10063ea4450085236f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["416d032f85b7ea8efc272f86ba46bc460589aff7"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"416d032f85b7ea8efc272f86ba46bc460589aff7":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cb1066f2afe9450585d0d10063ea4450085236f1":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb1066f2afe9450585d0d10063ea4450085236f1"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["416d032f85b7ea8efc272f86ba46bc460589aff7"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"416d032f85b7ea8efc272f86ba46bc460589aff7":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}