{"path":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testAccountable().mjava","commits":[{"id":"a71ca10e7131e1f01868c80d228f26a855e79dd0","date":1562166223,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testAccountable().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAccountable() throws Exception {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache lfuCache = new LFUCache();\n    lfuCache.initializeMetrics(metricManager, registry, \"foo\", scope + \".lfuCache\");\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      NoOpRegenerator regenerator = new NoOpRegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n\n      long initialBytes = lfuCache.ramBytesUsed();\n      WildcardQuery q = new WildcardQuery(new Term(\"foo\", \"bar\"));\n      DocSet docSet = new BitDocSet();\n\n      // 1 insert\n      lfuCache.put(q, docSet);\n      long updatedBytes = lfuCache.ramBytesUsed();\n      assertTrue(updatedBytes > initialBytes);\n      long estimated = initialBytes + q.ramBytesUsed() + docSet.ramBytesUsed() + ConcurrentLFUCache.CacheEntry.BASE_RAM_BYTES_USED\n          + RamUsageEstimator.HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assertEquals(estimated, updatedBytes);\n\n      TermQuery tq = new TermQuery(new Term(\"foo\", \"bar\"));\n      lfuCache.put(tq, docSet);\n      estimated += RamUsageEstimator.sizeOfObject(tq, RamUsageEstimator.QUERY_DEFAULT_RAM_BYTES_USED) +\n          docSet.ramBytesUsed() + ConcurrentLFUCache.CacheEntry.BASE_RAM_BYTES_USED +\n          RamUsageEstimator.HASHTABLE_RAM_BYTES_PER_ENTRY;\n      updatedBytes = lfuCache.ramBytesUsed();\n      assertEquals(estimated, updatedBytes);\n      lfuCache.clear();\n      long clearedBytes = lfuCache.ramBytesUsed();\n      assertEquals(initialBytes, clearedBytes);\n    } finally {\n      lfuCache.close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testAccountable().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testAccountable().mjava","sourceNew":"  @Test\n  public void testAccountable() throws Exception {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache lfuCache = new LFUCache();\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    lfuCache.initializeMetrics(solrMetricsContext, scope + \".lfuCache\");\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      NoOpRegenerator regenerator = new NoOpRegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n\n      long initialBytes = lfuCache.ramBytesUsed();\n      WildcardQuery q = new WildcardQuery(new Term(\"foo\", \"bar\"));\n      DocSet docSet = new BitDocSet();\n\n      // 1 insert\n      lfuCache.put(q, docSet);\n      long updatedBytes = lfuCache.ramBytesUsed();\n      assertTrue(updatedBytes > initialBytes);\n      long estimated = initialBytes + q.ramBytesUsed() + docSet.ramBytesUsed() + ConcurrentLFUCache.CacheEntry.BASE_RAM_BYTES_USED\n          + RamUsageEstimator.HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assertEquals(estimated, updatedBytes);\n\n      TermQuery tq = new TermQuery(new Term(\"foo\", \"bar\"));\n      lfuCache.put(tq, docSet);\n      estimated += RamUsageEstimator.sizeOfObject(tq, RamUsageEstimator.QUERY_DEFAULT_RAM_BYTES_USED) +\n          docSet.ramBytesUsed() + ConcurrentLFUCache.CacheEntry.BASE_RAM_BYTES_USED +\n          RamUsageEstimator.HASHTABLE_RAM_BYTES_PER_ENTRY;\n      updatedBytes = lfuCache.ramBytesUsed();\n      assertEquals(estimated, updatedBytes);\n      lfuCache.clear();\n      long clearedBytes = lfuCache.ramBytesUsed();\n      assertEquals(initialBytes, clearedBytes);\n    } finally {\n      lfuCache.close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testAccountable() throws Exception {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache lfuCache = new LFUCache();\n    lfuCache.initializeMetrics(metricManager, registry, \"foo\", scope + \".lfuCache\");\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      NoOpRegenerator regenerator = new NoOpRegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n\n      long initialBytes = lfuCache.ramBytesUsed();\n      WildcardQuery q = new WildcardQuery(new Term(\"foo\", \"bar\"));\n      DocSet docSet = new BitDocSet();\n\n      // 1 insert\n      lfuCache.put(q, docSet);\n      long updatedBytes = lfuCache.ramBytesUsed();\n      assertTrue(updatedBytes > initialBytes);\n      long estimated = initialBytes + q.ramBytesUsed() + docSet.ramBytesUsed() + ConcurrentLFUCache.CacheEntry.BASE_RAM_BYTES_USED\n          + RamUsageEstimator.HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assertEquals(estimated, updatedBytes);\n\n      TermQuery tq = new TermQuery(new Term(\"foo\", \"bar\"));\n      lfuCache.put(tq, docSet);\n      estimated += RamUsageEstimator.sizeOfObject(tq, RamUsageEstimator.QUERY_DEFAULT_RAM_BYTES_USED) +\n          docSet.ramBytesUsed() + ConcurrentLFUCache.CacheEntry.BASE_RAM_BYTES_USED +\n          RamUsageEstimator.HASHTABLE_RAM_BYTES_PER_ENTRY;\n      updatedBytes = lfuCache.ramBytesUsed();\n      assertEquals(estimated, updatedBytes);\n      lfuCache.clear();\n      long clearedBytes = lfuCache.ramBytesUsed();\n      assertEquals(initialBytes, clearedBytes);\n    } finally {\n      lfuCache.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testAccountable().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testAccountable() throws Exception {\n    SolrMetricManager metricManager = new SolrMetricManager();\n    Random r = random();\n    String registry = TestUtil.randomSimpleString(r, 2, 10);\n    String scope = TestUtil.randomSimpleString(r, 2, 10);\n    LFUCache lfuCache = new LFUCache();\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    lfuCache.initializeMetrics(solrMetricsContext, scope + \".lfuCache\");\n    try {\n      Map params = new HashMap();\n      params.put(\"size\", \"100\");\n      params.put(\"initialSize\", \"10\");\n      params.put(\"autowarmCount\", \"25\");\n      NoOpRegenerator regenerator = new NoOpRegenerator();\n      Object initObj = lfuCache.init(params, null, regenerator);\n      lfuCache.setState(SolrCache.State.LIVE);\n\n      long initialBytes = lfuCache.ramBytesUsed();\n      WildcardQuery q = new WildcardQuery(new Term(\"foo\", \"bar\"));\n      DocSet docSet = new BitDocSet();\n\n      // 1 insert\n      lfuCache.put(q, docSet);\n      long updatedBytes = lfuCache.ramBytesUsed();\n      assertTrue(updatedBytes > initialBytes);\n      long estimated = initialBytes + q.ramBytesUsed() + docSet.ramBytesUsed() + ConcurrentLFUCache.CacheEntry.BASE_RAM_BYTES_USED\n          + RamUsageEstimator.HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assertEquals(estimated, updatedBytes);\n\n      TermQuery tq = new TermQuery(new Term(\"foo\", \"bar\"));\n      lfuCache.put(tq, docSet);\n      estimated += RamUsageEstimator.sizeOfObject(tq, RamUsageEstimator.QUERY_DEFAULT_RAM_BYTES_USED) +\n          docSet.ramBytesUsed() + ConcurrentLFUCache.CacheEntry.BASE_RAM_BYTES_USED +\n          RamUsageEstimator.HASHTABLE_RAM_BYTES_PER_ENTRY;\n      updatedBytes = lfuCache.ramBytesUsed();\n      assertEquals(estimated, updatedBytes);\n      lfuCache.clear();\n      long clearedBytes = lfuCache.ramBytesUsed();\n      assertEquals(initialBytes, clearedBytes);\n    } finally {\n      lfuCache.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["a71ca10e7131e1f01868c80d228f26a855e79dd0"],"4d7d3943904804560937e6239effeebda0f920e4":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"a71ca10e7131e1f01868c80d228f26a855e79dd0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"]},"commit2Childs":{"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["4d7d3943904804560937e6239effeebda0f920e4"],"a71ca10e7131e1f01868c80d228f26a855e79dd0":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a71ca10e7131e1f01868c80d228f26a855e79dd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}