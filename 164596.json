{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testWithExceptions().mjava","commits":[{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testWithExceptions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          if (ise.getMessage().contains(\"this writer hit an unrecoverable error\")) {\n            Throwable cause = ise.getCause();\n            if (cause != null && cause.getMessage().contains(\"a random IOException\")) {\n              done = true;\n            } else {\n              throw ise;\n            }\n          } else {\n            throw ise;\n          }\n        } catch (AssertionError ae) {\n          if (ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          String message = ioe.getMessage();\n          if (message.contains(\"a random IOException\") || message.contains(\"background merge hit exception\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          if (ise.getMessage().contains(\"this writer hit an unrecoverable error\")) {\n            Throwable cause = ise.getCause();\n            if (cause != null && cause.getMessage().contains(\"a random IOException\")) {\n              done = true;\n            } else {\n              throw ise;\n            }\n          } else {\n            throw ise;\n          }\n        } catch (AssertionError ae) {\n          if (ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          String message = ioe.getMessage();\n          if (message.contains(\"a random IOException\") || message.contains(\"background merge hit exception\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416f9e28900210be57b69bc12e2954fb98ed7ebe","date":1458479803,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testWithExceptions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          if (ise.getMessage().contains(\"this writer hit an unrecoverable error\")) {\n            Throwable cause = ise.getCause();\n            if (cause != null && cause.getMessage().contains(\"a random IOException\")) {\n              done = true;\n            } else {\n              throw ise;\n            }\n          } else {\n            throw ise;\n          }\n        } catch (AssertionError ae) {\n          if (ae.getMessage() != null && ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          String message = ioe.getMessage();\n          if (message.contains(\"a random IOException\") || message.contains(\"background merge hit exception\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          if (ise.getMessage().contains(\"this writer hit an unrecoverable error\")) {\n            Throwable cause = ise.getCause();\n            if (cause != null && cause.getMessage().contains(\"a random IOException\")) {\n              done = true;\n            } else {\n              throw ise;\n            }\n          } else {\n            throw ise;\n          }\n        } catch (AssertionError ae) {\n          if (ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          String message = ioe.getMessage();\n          if (message.contains(\"a random IOException\") || message.contains(\"background merge hit exception\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bfbfdd333876955c4fb69964ef7ac158b1a761a8","date":1486839309,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testWithExceptions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          if (ise.getMessage().contains(\"this writer hit an unrecoverable error\")) {\n            Throwable cause = ise.getCause();\n            if (cause != null && cause.getMessage().contains(\"a random IOException\")) {\n              done = true;\n            } else {\n              throw ise;\n            }\n          } else {\n            throw ise;\n          }\n        } catch (AssertionError ae) {\n          if (ae.getMessage() != null && ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          Throwable ex = ioe;\n          while (ex != null) {\n            String message = ex.getMessage();\n            if (message != null && (message.contains(\"a random IOException\") || message.contains(\"background merge hit exception\"))) {\n              done = true;\n              break;\n            }\n            ex = ex.getCause();            \n          }\n          if (done == false) {\n            throw ioe;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          if (ise.getMessage().contains(\"this writer hit an unrecoverable error\")) {\n            Throwable cause = ise.getCause();\n            if (cause != null && cause.getMessage().contains(\"a random IOException\")) {\n              done = true;\n            } else {\n              throw ise;\n            }\n          } else {\n            throw ise;\n          }\n        } catch (AssertionError ae) {\n          if (ae.getMessage() != null && ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          String message = ioe.getMessage();\n          if (message.contains(\"a random IOException\") || message.contains(\"background merge hit exception\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06a59fc75945814eefaa8855f7ebd0d81851b5e6","date":1486999796,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testWithExceptions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          done = handlePossiblyFakeException(ise);\n        } catch (AssertionError ae) {\n          if (ae.getMessage() != null && ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          done = handlePossiblyFakeException(ioe);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          if (ise.getMessage().contains(\"this writer hit an unrecoverable error\")) {\n            Throwable cause = ise.getCause();\n            if (cause != null && cause.getMessage().contains(\"a random IOException\")) {\n              done = true;\n            } else {\n              throw ise;\n            }\n          } else {\n            throw ise;\n          }\n        } catch (AssertionError ae) {\n          if (ae.getMessage() != null && ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          Throwable ex = ioe;\n          while (ex != null) {\n            String message = ex.getMessage();\n            if (message != null && (message.contains(\"a random IOException\") || message.contains(\"background merge hit exception\"))) {\n              done = true;\n              break;\n            }\n            ex = ex.getCause();            \n          }\n          if (done == false) {\n            throw ioe;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testWithExceptions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          done = handlePossiblyFakeException(ise);\n        } catch (AssertionError ae) {\n          if (ae.getMessage() != null && ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          done = handlePossiblyFakeException(ioe);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          if (ise.getMessage().contains(\"this writer hit an unrecoverable error\")) {\n            Throwable cause = ise.getCause();\n            if (cause != null && cause.getMessage().contains(\"a random IOException\")) {\n              done = true;\n            } else {\n              throw ise;\n            }\n          } else {\n            throw ise;\n          }\n        } catch (AssertionError ae) {\n          if (ae.getMessage() != null && ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          Throwable ex = ioe;\n          while (ex != null) {\n            String message = ex.getMessage();\n            if (message != null && (message.contains(\"a random IOException\") || message.contains(\"background merge hit exception\"))) {\n              done = true;\n              break;\n            }\n            ex = ex.getCause();            \n          }\n          if (done == false) {\n            throw ioe;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testWithExceptions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          if (ise.getMessage().contains(\"this writer hit an unrecoverable error\")) {\n            Throwable cause = ise.getCause();\n            if (cause != null && cause.getMessage().contains(\"a random IOException\")) {\n              done = true;\n            } else {\n              throw ise;\n            }\n          } else {\n            throw ise;\n          }\n        } catch (AssertionError ae) {\n          if (ae.getMessage() != null && ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          Throwable ex = ioe;\n          while (ex != null) {\n            String message = ex.getMessage();\n            if (message != null && (message.contains(\"a random IOException\") || message.contains(\"background merge hit exception\"))) {\n              done = true;\n              break;\n            }\n            ex = ex.getCause();            \n          }\n          if (done == false) {\n            throw ioe;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          done = handlePossiblyFakeException(ise);\n        } catch (AssertionError ae) {\n          if (ae.getMessage() != null && ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          done = handlePossiblyFakeException(ioe);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testWithExceptions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          done = handlePossiblyFakeException(ise);\n        } catch (AssertionError ae) {\n          if (ae.getMessage() != null && ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          done = handlePossiblyFakeException(ioe);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          if (ise.getMessage().contains(\"this writer hit an unrecoverable error\")) {\n            Throwable cause = ise.getCause();\n            if (cause != null && cause.getMessage().contains(\"a random IOException\")) {\n              done = true;\n            } else {\n              throw ise;\n            }\n          } else {\n            throw ise;\n          }\n        } catch (AssertionError ae) {\n          if (ae.getMessage() != null && ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          Throwable ex = ioe;\n          while (ex != null) {\n            String message = ex.getMessage();\n            if (message != null && (message.contains(\"a random IOException\") || message.contains(\"background merge hit exception\"))) {\n              done = true;\n              break;\n            }\n            ex = ex.getCause();            \n          }\n          if (done == false) {\n            throw ioe;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testWithExceptions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(1000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          done = handlePossiblyFakeException(ise);\n        } catch (AssertionError ae) {\n          if (ae.getMessage() != null && ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          done = handlePossiblyFakeException(ioe);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          done = handlePossiblyFakeException(ise);\n        } catch (AssertionError ae) {\n          if (ae.getMessage() != null && ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          done = handlePossiblyFakeException(ioe);\n        }\n      }\n    }\n  }\n\n","bugFix":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testWithExceptions().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(1000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n    int numIndexDims = TestUtil.nextInt(random(), 1, Math.min(numDims, PointValues.MAX_INDEX_DIMENSIONS));\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numIndexDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          done = handlePossiblyFakeException(ise);\n        } catch (AssertionError ae) {\n          if (ae.getMessage() != null && ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          done = handlePossiblyFakeException(ioe);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(1000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          done = handlePossiblyFakeException(ise);\n        } catch (AssertionError ae) {\n          if (ae.getMessage() != null && ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          done = handlePossiblyFakeException(ioe);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"022a4de90e0479b604264ca9c2e134c996454ab3":["bfbfdd333876955c4fb69964ef7ac158b1a761a8","06a59fc75945814eefaa8855f7ebd0d81851b5e6"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["71da933d30aea361ccc224d6544c451cbf49916d"],"bfbfdd333876955c4fb69964ef7ac158b1a761a8":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"06a59fc75945814eefaa8855f7ebd0d81851b5e6":["bfbfdd333876955c4fb69964ef7ac158b1a761a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"71da933d30aea361ccc224d6544c451cbf49916d":["897b06b1364bd1f658a8be7591e43f0851458e7f"]},"commit2Childs":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["71da933d30aea361ccc224d6544c451cbf49916d"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bfbfdd333876955c4fb69964ef7ac158b1a761a8":["022a4de90e0479b604264ca9c2e134c996454ab3","06a59fc75945814eefaa8855f7ebd0d81851b5e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["bfbfdd333876955c4fb69964ef7ac158b1a761a8"],"06a59fc75945814eefaa8855f7ebd0d81851b5e6":["022a4de90e0479b604264ca9c2e134c996454ab3"],"71da933d30aea361ccc224d6544c451cbf49916d":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}