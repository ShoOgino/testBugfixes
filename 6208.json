{"path":"lucene/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","commits":[{"id":"2ade882efb2f2235dafb176284c1e35dbdb1c126","date":1274043418,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","pathOld":"/dev/null","sourceNew":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complement(\n              Automaton.union(\n                  Arrays.asList(BasicAutomata.makeString(\"foo\"), BasicAutomata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(MockTokenizer.SIMPLE, true, keepWords, true);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","sourceNew":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complement(\n              Automaton.union(\n                  Arrays.asList(BasicAutomata.makeString(\"foo\"), BasicAutomata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, keepWords, true);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complement(\n              Automaton.union(\n                  Arrays.asList(BasicAutomata.makeString(\"foo\"), BasicAutomata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(MockTokenizer.SIMPLE, true, keepWords, true);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","sourceNew":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complement(\n              Automaton.union(\n                  Arrays.asList(BasicAutomata.makeString(\"foo\"), BasicAutomata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, keepWords, true);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complement(\n              Automaton.union(\n                  Arrays.asList(BasicAutomata.makeString(\"foo\"), BasicAutomata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(MockTokenizer.SIMPLE, true, keepWords, true);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","sourceNew":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complement(\n              Automaton.union(\n                  Arrays.asList(BasicAutomata.makeString(\"foo\"), BasicAutomata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, keepWords, true);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complement(\n              Automaton.union(\n                  Arrays.asList(BasicAutomata.makeString(\"foo\"), BasicAutomata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(MockTokenizer.SIMPLE, true, keepWords, true);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","sourceNew":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complement(\n              Automaton.union(\n                  Arrays.asList(BasicAutomata.makeString(\"foo\"), BasicAutomata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, keepWords, true);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complement(\n              Automaton.union(\n                  Arrays.asList(BasicAutomata.makeString(\"foo\"), BasicAutomata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(MockTokenizer.SIMPLE, true, keepWords, true);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","sourceNew":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complement(\n              Automaton.union(\n                  Arrays.asList(BasicAutomata.makeString(\"foo\"), BasicAutomata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, keepWords, true);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complement(\n              Automaton.union(\n                  Arrays.asList(BasicAutomata.makeString(\"foo\"), BasicAutomata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, keepWords, true);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["2ade882efb2f2235dafb176284c1e35dbdb1c126"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2ade882efb2f2235dafb176284c1e35dbdb1c126","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2ade882efb2f2235dafb176284c1e35dbdb1c126","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["2ade882efb2f2235dafb176284c1e35dbdb1c126","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"2ade882efb2f2235dafb176284c1e35dbdb1c126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ade882efb2f2235dafb176284c1e35dbdb1c126"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"2ade882efb2f2235dafb176284c1e35dbdb1c126":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}