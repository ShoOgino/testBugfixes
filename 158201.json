{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#waitForServer(int,LBHttpSolrServer,int,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#waitForServer(int,LBHttpSolrServer,int,String).mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#waitForServer(int,LBHttpSolrServer,int,String).mjava","sourceNew":"  // wait maximum ms for serverName to come back up\n  private void waitForServer(int maximum, LBHttpSolrServer server, int nServers, String serverName) throws Exception {\n    long endTime = System.currentTimeMillis() + maximum;\n    while (System.currentTimeMillis() < endTime) {\n      QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n      String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n      if (name.equals(serverName))\n        return;\n    }\n  }\n\n","sourceOld":"  // wait maximum ms for serverName to come back up\n  private void waitForServer(int maximum, LBHttpSolrServer server, int nServers, String serverName) throws Exception {\n    long endTime = System.currentTimeMillis() + maximum;\n    while (System.currentTimeMillis() < endTime) {\n      QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n      String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n      if (name.equals(serverName))\n        return;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#waitForServer(int,LBHttpSolrServer,int,String).mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#waitForServer(int,LBHttpSolrServer,int,String).mjava","sourceNew":"  // wait maximum ms for serverName to come back up\n  private void waitForServer(int maximum, LBHttpSolrServer server, int nServers, String serverName) throws Exception {\n    long endTime = System.currentTimeMillis() + maximum;\n    while (System.currentTimeMillis() < endTime) {\n      QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n      String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n      if (name.equals(serverName))\n        return;\n    }\n  }\n\n","sourceOld":"  // wait maximum ms for serverName to come back up\n  private void waitForServer(int maximum, LBHttpSolrServer server, int nServers, String serverName) throws Exception {\n    long endTime = System.currentTimeMillis() + maximum;\n    while (System.currentTimeMillis() < endTime) {\n      QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n      String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n      if (name.equals(serverName))\n        return;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#waitForServer(int,LBHttpSolrServer,int,String).mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#waitForServer(int,LBHttpSolrServer,int,String).mjava","sourceNew":"  // wait maximum ms for serverName to come back up\n  private void waitForServer(int maximum, LBHttpSolrServer server, int nServers, String serverName) throws Exception {\n    long endTime = System.currentTimeMillis() + maximum;\n    while (System.currentTimeMillis() < endTime) {\n      QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n      String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n      if (name.equals(serverName))\n        return;\n    }\n  }\n\n","sourceOld":"  // wait maximum ms for serverName to come back up\n  private void waitForServer(int maximum, LBHttpSolrServer server, int nServers, String serverName) throws Exception {\n    long endTime = System.currentTimeMillis() + maximum;\n    while (System.currentTimeMillis() < endTime) {\n      QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n      String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n      if (name.equals(serverName))\n        return;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a2e0bb7ab64673c7d3205582ad5e848527d56e","date":1355381545,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#waitForServer(int,LBHttpSolrServer,int,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#waitForServer(int,LBHttpSolrServer,int,String).mjava","sourceNew":"  // wait maximum ms for serverName to come back up\n  private void waitForServer(int maximum, LBHttpSolrServer server, int nServers, String serverName) throws Exception {\n    long endTime = System.currentTimeMillis() + maximum;\n    while (System.currentTimeMillis() < endTime) {\n      QueryResponse resp;\n      try {\n        resp = server.query(new SolrQuery(\"*:*\"));\n      } catch (Exception e) {\n        log.warn(\"\", e);\n        continue;\n      }\n      String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n      if (name.equals(serverName))\n        return;\n    }\n  }\n\n","sourceOld":"  // wait maximum ms for serverName to come back up\n  private void waitForServer(int maximum, LBHttpSolrServer server, int nServers, String serverName) throws Exception {\n    long endTime = System.currentTimeMillis() + maximum;\n    while (System.currentTimeMillis() < endTime) {\n      QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n      String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n      if (name.equals(serverName))\n        return;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#waitForServer(int,LBHttpSolrServer,int,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#waitForServer(int,LBHttpSolrServer,int,String).mjava","sourceNew":"  // wait maximum ms for serverName to come back up\n  private void waitForServer(int maximum, LBHttpSolrServer server, int nServers, String serverName) throws Exception {\n    long endTime = System.currentTimeMillis() + maximum;\n    while (System.currentTimeMillis() < endTime) {\n      QueryResponse resp;\n      try {\n        resp = server.query(new SolrQuery(\"*:*\"));\n      } catch (Exception e) {\n        log.warn(\"\", e);\n        continue;\n      }\n      String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n      if (name.equals(serverName))\n        return;\n    }\n  }\n\n","sourceOld":"  // wait maximum ms for serverName to come back up\n  private void waitForServer(int maximum, LBHttpSolrServer server, int nServers, String serverName) throws Exception {\n    long endTime = System.currentTimeMillis() + maximum;\n    while (System.currentTimeMillis() < endTime) {\n      QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n      String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n      if (name.equals(serverName))\n        return;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#waitForServer(int,LBHttpSolrClient,int,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#waitForServer(int,LBHttpSolrServer,int,String).mjava","sourceNew":"  // wait maximum ms for serverName to come back up\n  private void waitForServer(int maximum, LBHttpSolrClient client, int nServers, String serverName) throws Exception {\n    long endTime = System.currentTimeMillis() + maximum;\n    while (System.currentTimeMillis() < endTime) {\n      QueryResponse resp;\n      try {\n        resp = client.query(new SolrQuery(\"*:*\"));\n      } catch (Exception e) {\n        log.warn(\"\", e);\n        continue;\n      }\n      String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n      if (name.equals(serverName))\n        return;\n    }\n  }\n\n","sourceOld":"  // wait maximum ms for serverName to come back up\n  private void waitForServer(int maximum, LBHttpSolrServer server, int nServers, String serverName) throws Exception {\n    long endTime = System.currentTimeMillis() + maximum;\n    while (System.currentTimeMillis() < endTime) {\n      QueryResponse resp;\n      try {\n        resp = server.query(new SolrQuery(\"*:*\"));\n      } catch (Exception e) {\n        log.warn(\"\", e);\n        continue;\n      }\n      String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n      if (name.equals(serverName))\n        return;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","d6a2e0bb7ab64673c7d3205582ad5e848527d56e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d6a2e0bb7ab64673c7d3205582ad5e848527d56e":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["d6a2e0bb7ab64673c7d3205582ad5e848527d56e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d6a2e0bb7ab64673c7d3205582ad5e848527d56e"],"d6a2e0bb7ab64673c7d3205582ad5e848527d56e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}