{"path":"src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","commits":[{"id":"6589002090bd74db749eef5befe2f447c0e3dd49","date":1184345280,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","pathOld":"/dev/null","sourceNew":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = SolrCore.getSolrCore();\n\n    // make sure it loaded the factories\n    ChainedUpdateProcessorFactory chained = \n      (ChainedUpdateProcessorFactory)core.getUpdateProcessorFactory( \"standard\" );\n    \n    // Make sure it got 3 items and configured the Log factory ok\n    assertEquals( 3, chained.factory.length );\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)chained.factory[0];\n    assertEquals( 100, log.maxNumToLog );\n    \n    \n    CustomUpdateRequestProcessorFactory custom = \n      (CustomUpdateRequestProcessorFactory)core.getUpdateProcessorFactory( null );\n\n    assertEquals( custom, core.getUpdateProcessorFactory( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessorFactory( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", custom.args.toString() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","pathOld":"src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","sourceNew":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    ChainedUpdateProcessorFactory chained = \n      (ChainedUpdateProcessorFactory)core.getUpdateProcessorFactory( \"standard\" );\n    \n    // Make sure it got 3 items and configured the Log factory ok\n    assertEquals( 3, chained.factory.length );\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)chained.factory[0];\n    assertEquals( 100, log.maxNumToLog );\n    \n    \n    CustomUpdateRequestProcessorFactory custom = \n      (CustomUpdateRequestProcessorFactory)core.getUpdateProcessorFactory( null );\n\n    assertEquals( custom, core.getUpdateProcessorFactory( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessorFactory( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", custom.args.toString() );\n  }\n\n","sourceOld":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = SolrCore.getSolrCore();\n\n    // make sure it loaded the factories\n    ChainedUpdateProcessorFactory chained = \n      (ChainedUpdateProcessorFactory)core.getUpdateProcessorFactory( \"standard\" );\n    \n    // Make sure it got 3 items and configured the Log factory ok\n    assertEquals( 3, chained.factory.length );\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)chained.factory[0];\n    assertEquals( 100, log.maxNumToLog );\n    \n    \n    CustomUpdateRequestProcessorFactory custom = \n      (CustomUpdateRequestProcessorFactory)core.getUpdateProcessorFactory( null );\n\n    assertEquals( custom, core.getUpdateProcessorFactory( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessorFactory( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", custom.args.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d656bfb8102419b4568f368a9606efc4f059912e","date":1217031644,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","pathOld":"src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","sourceNew":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items and configured the Log chain ok\n    assertEquals( 3, chained.chain.length );\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)chained.chain[0];\n    assertEquals( 100, log.maxNumToLog );\n    \n    \n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.chain[0];\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", link.args.toString() );\n  }\n\n","sourceOld":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    ChainedUpdateProcessorFactory chained = \n      (ChainedUpdateProcessorFactory)core.getUpdateProcessorFactory( \"standard\" );\n    \n    // Make sure it got 3 items and configured the Log factory ok\n    assertEquals( 3, chained.factory.length );\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)chained.factory[0];\n    assertEquals( 100, log.maxNumToLog );\n    \n    \n    CustomUpdateRequestProcessorFactory custom = \n      (CustomUpdateRequestProcessorFactory)core.getUpdateProcessorFactory( null );\n\n    assertEquals( custom, core.getUpdateProcessorFactory( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessorFactory( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", custom.args.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a7153c5cd4b2cd8054f8e46101442030d8a3c37","date":1253512682,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","pathOld":"src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","sourceNew":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items and configured the Log chain ok\n    assertEquals( 3, chained.getFactories().length );\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)chained.getFactories()[0];\n    assertEquals( 100, log.maxNumToLog );\n    \n    \n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.getFactories()[0];\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", link.args.toString() );\n  }\n\n","sourceOld":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items and configured the Log chain ok\n    assertEquals( 3, chained.chain.length );\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)chained.chain[0];\n    assertEquals( 100, log.maxNumToLog );\n    \n    \n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.chain[0];\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", link.args.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","pathOld":"src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","sourceNew":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items and configured the Log chain ok\n    assertEquals( 3, chained.getFactories().length );\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)chained.getFactories()[0];\n    assertEquals( 100, log.maxNumToLog );\n    \n    \n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.getFactories()[0];\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", link.args.toString() );\n  }\n\n","sourceOld":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items and configured the Log chain ok\n    assertEquals( 3, chained.getFactories().length );\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)chained.getFactories()[0];\n    assertEquals( 100, log.maxNumToLog );\n    \n    \n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.getFactories()[0];\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", link.args.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["6589002090bd74db749eef5befe2f447c0e3dd49"],"6a7153c5cd4b2cd8054f8e46101442030d8a3c37":["d656bfb8102419b4568f368a9606efc4f059912e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"6589002090bd74db749eef5befe2f447c0e3dd49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d656bfb8102419b4568f368a9606efc4f059912e":["6d6338c87060be5f66757a94945975f3bbd377a9"],"ad94625fb8d088209f46650c8097196fec67f00c":["6a7153c5cd4b2cd8054f8e46101442030d8a3c37"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["d656bfb8102419b4568f368a9606efc4f059912e"],"6a7153c5cd4b2cd8054f8e46101442030d8a3c37":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6589002090bd74db749eef5befe2f447c0e3dd49"],"6589002090bd74db749eef5befe2f447c0e3dd49":["6d6338c87060be5f66757a94945975f3bbd377a9"],"d656bfb8102419b4568f368a9606efc4f059912e":["6a7153c5cd4b2cd8054f8e46101442030d8a3c37"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}