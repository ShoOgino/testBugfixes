{"path":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#saveState().mjava","commits":[{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#saveState().mjava","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterFilter#saveState().mjava","sourceNew":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAtttribute.termLength());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAtttribute.termLength()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAtttribute.termLength(), RamUsageEstimator.NUM_BYTES_CHAR)];\n    }\n\n    System.arraycopy(termAtttribute.termBuffer(), 0, savedBuffer, 0, termAtttribute.termLength());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","sourceOld":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAtttribute.termLength());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAtttribute.termLength()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAtttribute.termLength(), RamUsageEstimator.NUM_BYTES_CHAR)];\n    }\n\n    System.arraycopy(termAtttribute.termBuffer(), 0, savedBuffer, 0, termAtttribute.termLength());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#saveState().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAtttribute.termLength());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAtttribute.termLength()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAtttribute.termLength(), RamUsageEstimator.NUM_BYTES_CHAR)];\n    }\n\n    System.arraycopy(termAtttribute.termBuffer(), 0, savedBuffer, 0, termAtttribute.termLength());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff46adc3717c29b5e2c0cb21b7ee087c26931595","date":1269729642,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#saveState().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#saveState().mjava","sourceNew":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAttribute.termLength());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAttribute.termLength()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAttribute.termLength(), RamUsageEstimator.NUM_BYTES_CHAR)];\n    }\n\n    System.arraycopy(termAttribute.termBuffer(), 0, savedBuffer, 0, termAttribute.termLength());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","sourceOld":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAtttribute.termLength());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAtttribute.termLength()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAtttribute.termLength(), RamUsageEstimator.NUM_BYTES_CHAR)];\n    }\n\n    System.arraycopy(termAtttribute.termBuffer(), 0, savedBuffer, 0, termAtttribute.termLength());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d085fb336a7208eea2214e5ffcc803960819b60b","date":1270981894,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#saveState().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#saveState().mjava","sourceNew":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAttribute.length());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAttribute.length()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAttribute.length(), RamUsageEstimator.NUM_BYTES_CHAR)];\n    }\n\n    System.arraycopy(termAttribute.buffer(), 0, savedBuffer, 0, termAttribute.length());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","sourceOld":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAttribute.termLength());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAttribute.termLength()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAttribute.termLength(), RamUsageEstimator.NUM_BYTES_CHAR)];\n    }\n\n    System.arraycopy(termAttribute.termBuffer(), 0, savedBuffer, 0, termAttribute.termLength());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8598a11db0eb9efa116ba7656c437f5bed7de0f7","date":1272964265,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#saveState().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#saveState().mjava","sourceNew":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAttribute.length());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAttribute.length()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAttribute.length(), RamUsageEstimator.NUM_BYTES_CHAR)];\n    }\n\n    System.arraycopy(termAttribute.buffer(), 0, savedBuffer, 0, termAttribute.length());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","sourceOld":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAttribute.length());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAttribute.length()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAttribute.length(), RamUsageEstimator.NUM_BYTES_CHAR)];\n    }\n\n    System.arraycopy(termAttribute.buffer(), 0, savedBuffer, 0, termAttribute.length());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad94625fb8d088209f46650c8097196fec67f00c"],"ff46adc3717c29b5e2c0cb21b7ee087c26931595":["1da8d55113b689b06716246649de6f62430f15c0"],"8598a11db0eb9efa116ba7656c437f5bed7de0f7":["d085fb336a7208eea2214e5ffcc803960819b60b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d085fb336a7208eea2214e5ffcc803960819b60b":["ff46adc3717c29b5e2c0cb21b7ee087c26931595"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8598a11db0eb9efa116ba7656c437f5bed7de0f7"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["ff46adc3717c29b5e2c0cb21b7ee087c26931595"],"ff46adc3717c29b5e2c0cb21b7ee087c26931595":["d085fb336a7208eea2214e5ffcc803960819b60b"],"8598a11db0eb9efa116ba7656c437f5bed7de0f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"d085fb336a7208eea2214e5ffcc803960819b60b":["8598a11db0eb9efa116ba7656c437f5bed7de0f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}