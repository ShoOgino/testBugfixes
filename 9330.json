{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#doRehash(LongCounts).mjava","commits":[{"id":"602cca3f75af03832471d8324bbc5b977a02969c","date":1472676981,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#doRehash(LongCounts).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric#doRehash(LongCounts).mjava","sourceNew":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","sourceOld":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#doRehash(LongCounts).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric#doRehash(LongCounts).mjava","sourceNew":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","sourceOld":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#doRehash(LongCounts).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric#doRehash(LongCounts).mjava","sourceNew":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","sourceOld":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#doRehash(LongCounts).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorNumeric#doRehash(LongCounts).mjava","sourceNew":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","sourceOld":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c841e27891873cab110ebeb89f124a8ec470176","date":1586527220,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#doRehash(LongCounts).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#doRehash(LongCounts).mjava","sourceNew":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final long[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return (int) mapping[oldSlot];\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","sourceOld":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","bugFix":["dd0759e8803a09424422a329163d5900f6b10c42"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c841e27891873cab110ebeb89f124a8ec470176":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"602cca3f75af03832471d8324bbc5b977a02969c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","602cca3f75af03832471d8324bbc5b977a02969c"],"bc8f206328a706450934717bec7ccc22ad166fc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","602cca3f75af03832471d8324bbc5b977a02969c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c841e27891873cab110ebeb89f124a8ec470176"]},"commit2Childs":{"1c841e27891873cab110ebeb89f124a8ec470176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"602cca3f75af03832471d8324bbc5b977a02969c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["1c841e27891873cab110ebeb89f124a8ec470176","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["602cca3f75af03832471d8324bbc5b977a02969c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}