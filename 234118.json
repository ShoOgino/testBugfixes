{"path":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#getJarsInDirectory(String,boolean).mjava","commits":[{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#getJarsInDirectory(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns all jars that are in the directory. It is useful in expanding a\n   * wildcard path to return all jars from the directory to use in a classpath.\n   *\n   * @param path the path to the directory. The path may include the wildcard.\n   * @return the list of jars as URLs, or an empty list if there are no jars, or\n   * the directory does not exist\n   */\n  public static List<Path> getJarsInDirectory(String path, boolean useLocal) {\n    List<Path> paths = new ArrayList<>();\n    try {\n      // add the wildcard if it is not provided\n      if (!path.endsWith(\"*\")) {\n        path += File.separator + \"*\";\n      }\n      Path globPath = new Path(path).suffix(\"{.jar,.JAR}\");\n      FileContext context = useLocal ?\n          FileContext.getLocalFSFileContext() :\n          FileContext.getFileContext(globPath.toUri());\n      FileStatus[] files = context.util().globStatus(globPath);\n      if (files != null) {\n        for (FileStatus file: files) {\n          paths.add(file.getPath());\n        }\n      }\n    } catch (IOException ignore) {} // return the empty list\n    return paths;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#getJarsInDirectory(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns all jars that are in the directory. It is useful in expanding a\n   * wildcard path to return all jars from the directory to use in a classpath.\n   *\n   * @param path the path to the directory. The path may include the wildcard.\n   * @return the list of jars as URLs, or an empty list if there are no jars, or\n   * the directory does not exist\n   */\n  public static List<Path> getJarsInDirectory(String path, boolean useLocal) {\n    List<Path> paths = new ArrayList<>();\n    try {\n      // add the wildcard if it is not provided\n      if (!path.endsWith(\"*\")) {\n        path += File.separator + \"*\";\n      }\n      Path globPath = new Path(path).suffix(\"{.jar,.JAR}\");\n      FileContext context = useLocal ?\n          FileContext.getLocalFSFileContext() :\n          FileContext.getFileContext(globPath.toUri());\n      FileStatus[] files = context.util().globStatus(globPath);\n      if (files != null) {\n        for (FileStatus file: files) {\n          paths.add(file.getPath());\n        }\n      }\n    } catch (IOException ignore) {} // return the empty list\n    return paths;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bdf107cf16be0f22504ae184fed81596665a244"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}