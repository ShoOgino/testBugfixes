{"path":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","commits":[{"id":"a5684446f7742dfb07c42296decc5e4d6515a0fe","date":1292978807,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    sreq.params.remove(COMPONENT_NAME);\n    if( ( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0 ){\n      String fl = sreq.params.get(CommonParams.FL,\"*\");\n      // if fl=* then we don't need check\n      if( fl.indexOf( '*' ) >= 0 ) return;\n      Set<String> fields = getSearchClusteringEngine(rb).getFieldsToLoad(rb.req);\n      if( fields == null || fields.size() == 0 ) return;\n      StringBuilder sb = new StringBuilder();\n      String[] flparams = fl.split( \"[,\\\\s]+\" );\n      Set<String> flParamSet = new HashSet<String>(flparams.length);\n      for( String flparam : flparams ){\n        // no need trim() because of split() by \\s+\n        flParamSet.add(flparam);\n      }\n      for( String aFieldToLoad : fields ){\n        if( !flParamSet.contains( aFieldToLoad ) ){\n          sb.append( ',' ).append( aFieldToLoad );\n        }\n      }\n      if( sb.length() > 0 ){\n        sreq.params.set( CommonParams.FL, fl + sb.toString() );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc5ecd93bcd50b2199757091d526fc1bcbce0db1","date":1293154244,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    sreq.params.remove(COMPONENT_NAME);\n    if( ( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0 ){\n      String fl = sreq.params.get(CommonParams.FL,\"*\");\n      // if fl=* then we don't need check\n      if( fl.indexOf( '*' ) >= 0 ) return;\n      Set<String> fields = getSearchClusteringEngine(rb).getFieldsToLoad(rb.req);\n      if( fields == null || fields.size() == 0 ) return;\n      StringBuilder sb = new StringBuilder();\n      String[] flparams = fl.split( \"[,\\\\s]+\" );\n      Set<String> flParamSet = new HashSet<String>(flparams.length);\n      for( String flparam : flparams ){\n        // no need trim() because of split() by \\s+\n        flParamSet.add(flparam);\n      }\n      for( String aFieldToLoad : fields ){\n        if( !flParamSet.contains( aFieldToLoad ) ){\n          sb.append( ',' ).append( aFieldToLoad );\n        }\n      }\n      if( sb.length() > 0 ){\n        sreq.params.set( CommonParams.FL, fl + sb.toString() );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    sreq.params.remove(COMPONENT_NAME);\n    if( ( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0 ){\n      String fl = sreq.params.get(CommonParams.FL,\"*\");\n      // if fl=* then we don't need check\n      if( fl.indexOf( '*' ) >= 0 ) return;\n      Set<String> fields = getSearchClusteringEngine(rb).getFieldsToLoad(rb.req);\n      if( fields == null || fields.size() == 0 ) return;\n      StringBuilder sb = new StringBuilder();\n      String[] flparams = fl.split( \"[,\\\\s]+\" );\n      Set<String> flParamSet = new HashSet<String>(flparams.length);\n      for( String flparam : flparams ){\n        // no need trim() because of split() by \\s+\n        flParamSet.add(flparam);\n      }\n      for( String aFieldToLoad : fields ){\n        if( !flParamSet.contains( aFieldToLoad ) ){\n          sb.append( ',' ).append( aFieldToLoad );\n        }\n      }\n      if( sb.length() > 0 ){\n        sreq.params.set( CommonParams.FL, fl + sb.toString() );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    sreq.params.remove(COMPONENT_NAME);\n    if( ( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0 ){\n      String fl = sreq.params.get(CommonParams.FL,\"*\");\n      // if fl=* then we don't need check\n      if( fl.indexOf( '*' ) >= 0 ) return;\n      Set<String> fields = getSearchClusteringEngine(rb).getFieldsToLoad(rb.req);\n      if( fields == null || fields.size() == 0 ) return;\n      StringBuilder sb = new StringBuilder();\n      String[] flparams = fl.split( \"[,\\\\s]+\" );\n      Set<String> flParamSet = new HashSet<String>(flparams.length);\n      for( String flparam : flparams ){\n        // no need trim() because of split() by \\s+\n        flParamSet.add(flparam);\n      }\n      for( String aFieldToLoad : fields ){\n        if( !flParamSet.contains( aFieldToLoad ) ){\n          sb.append( ',' ).append( aFieldToLoad );\n        }\n      }\n      if( sb.length() > 0 ){\n        sreq.params.set( CommonParams.FL, fl + sb.toString() );\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    sreq.params.remove(COMPONENT_NAME);\n    if( ( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0 ){\n      String fl = sreq.params.get(CommonParams.FL,\"*\");\n      // if fl=* then we don't need check\n      if( fl.indexOf( '*' ) >= 0 ) return;\n      Set<String> fields = getSearchClusteringEngine(rb).getFieldsToLoad(rb.req);\n      if( fields == null || fields.size() == 0 ) return;\n      StringBuilder sb = new StringBuilder();\n      String[] flparams = fl.split( \"[,\\\\s]+\" );\n      Set<String> flParamSet = new HashSet<String>(flparams.length);\n      for( String flparam : flparams ){\n        // no need trim() because of split() by \\s+\n        flParamSet.add(flparam);\n      }\n      for( String aFieldToLoad : fields ){\n        if( !flParamSet.contains( aFieldToLoad ) ){\n          sb.append( ',' ).append( aFieldToLoad );\n        }\n      }\n      if( sb.length() > 0 ){\n        sreq.params.set( CommonParams.FL, fl + sb.toString() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    sreq.params.remove(COMPONENT_NAME);\n    if( ( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0 ){\n      String fl = sreq.params.get(CommonParams.FL,\"*\");\n      // if fl=* then we don't need check\n      if( fl.indexOf( '*' ) >= 0 ) return;\n      Set<String> fields = getSearchClusteringEngine(rb).getFieldsToLoad(rb.req);\n      if( fields == null || fields.size() == 0 ) return;\n      StringBuilder sb = new StringBuilder();\n      String[] flparams = fl.split( \"[,\\\\s]+\" );\n      Set<String> flParamSet = new HashSet<String>(flparams.length);\n      for( String flparam : flparams ){\n        // no need trim() because of split() by \\s+\n        flParamSet.add(flparam);\n      }\n      for( String aFieldToLoad : fields ){\n        if( !flParamSet.contains( aFieldToLoad ) ){\n          sb.append( ',' ).append( aFieldToLoad );\n        }\n      }\n      if( sb.length() > 0 ){\n        sreq.params.set( CommonParams.FL, fl + sb.toString() );\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    sreq.params.remove(COMPONENT_NAME);\n    if( ( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0 ){\n      String fl = sreq.params.get(CommonParams.FL,\"*\");\n      // if fl=* then we don't need check\n      if( fl.indexOf( '*' ) >= 0 ) return;\n      Set<String> fields = getSearchClusteringEngine(rb).getFieldsToLoad(rb.req);\n      if( fields == null || fields.size() == 0 ) return;\n      StringBuilder sb = new StringBuilder();\n      String[] flparams = fl.split( \"[,\\\\s]+\" );\n      Set<String> flParamSet = new HashSet<String>(flparams.length);\n      for( String flparam : flparams ){\n        // no need trim() because of split() by \\s+\n        flParamSet.add(flparam);\n      }\n      for( String aFieldToLoad : fields ){\n        if( !flParamSet.contains( aFieldToLoad ) ){\n          sb.append( ',' ).append( aFieldToLoad );\n        }\n      }\n      if( sb.length() > 0 ){\n        sreq.params.set( CommonParams.FL, fl + sb.toString() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5684446f7742dfb07c42296decc5e4d6515a0fe"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5684446f7742dfb07c42296decc5e4d6515a0fe"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a5684446f7742dfb07c42296decc5e4d6515a0fe","a5684446f7742dfb07c42296decc5e4d6515a0fe"],"c26f00b574427b55127e869b935845554afde1fa":["a5684446f7742dfb07c42296decc5e4d6515a0fe","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5684446f7742dfb07c42296decc5e4d6515a0fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1","a5684446f7742dfb07c42296decc5e4d6515a0fe"],"a5684446f7742dfb07c42296decc5e4d6515a0fe":["70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}