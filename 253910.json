{"path":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"/dev/null","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      for (int i = 0; i < 500; i++)\n        assertSame(randomRegex());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      for (int i = 0; i < 1000; i++)\n        assertSame(AutomatonTestUtil.randomRegexp(random).toString());\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      for (int i = 0; i < 500; i++)\n        assertSame(randomRegex());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      for (int i = 0; i < 1000*_TestUtil.getRandomMultiplier(); i++)\n        assertSame(AutomatonTestUtil.randomRegexp(random).toString());\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      for (int i = 0; i < 1000; i++)\n        assertSame(AutomatonTestUtil.randomRegexp(random).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a09096fda3618d6f041c36896a70ce7f8715b09c","date":1279899153,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n\n    for (int i = 0; i < 1000*_TestUtil.getRandomMultiplier(); i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random).toString();\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      for (int i = 0; i < 1000*_TestUtil.getRandomMultiplier(); i++)\n        assertSame(AutomatonTestUtil.randomRegexp(random).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n\n    for (int i = 0; i < 1000*_TestUtil.getRandomMultiplier(); i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random).toString();\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      for (int i = 0; i < 1000*_TestUtil.getRandomMultiplier(); i++)\n        assertSame(AutomatonTestUtil.randomRegexp(random).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random).toString();\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n\n    for (int i = 0; i < 1000*_TestUtil.getRandomMultiplier(); i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random).toString();\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random).toString();\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      for (int i = 0; i < 1000*_TestUtil.getRandomMultiplier(); i++)\n        assertSame(AutomatonTestUtil.randomRegexp(random).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"150488c1317972164a9a824be05b1ba2ba0fc68c","date":1284316090,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    String codec = CodecProvider.getDefaultCodec();\n    int num = codec.equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random).toString();\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random).toString();\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41916511eb7a0aa94cb9b000074ea466e14296b7","date":1288064272,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    String codec = CodecProvider.getDefaultCodec();\n    int num = codec.equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    String codec = CodecProvider.getDefaultCodec();\n    int num = codec.equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random).toString();\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    String codec = CodecProvider.getDefaultCodec();\n    int num = codec.equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    String codec = CodecProvider.getDefaultCodec();\n    int num = codec.equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random).toString();\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13452165d8bf3d45a72f572aaed3c679735d3af2","date":1290101307,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = getRandomFieldCodec(\"field\").equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    String codec = CodecProvider.getDefaultCodec();\n    int num = codec.equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bce89597a7c3a4535b5b7f8100c2078e520f6e57","date":1290106041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    String codec = CodecProvider.getDefaultCodec();\n    int num = codec.equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = getRandomFieldCodec(\"field\").equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeebcf026b55d8ce3ac8165210782b26cc4efe30","date":1290108396,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    String codec = CodecProvider.getDefaultCodec();\n    int num = codec.equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    String codec = CodecProvider.getDefaultCodec();\n    int num = codec.equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random).toString();\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":["c5145e7af5e55022ec6ba083c0aef480e49e0d3b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp=\" + reg);\n      }\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5145e7af5e55022ec6ba083c0aef480e49e0d3b","date":1319475599,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = CodecProvider.getDefault().getFieldCodec(fieldName).equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp=\" + reg);\n      }\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp=\" + reg);\n      }\n      assertSame(reg);\n    }\n  }\n\n","bugFix":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = Codec.getDefault().getName().equals(\"Lucene3x\") ? 100 * RANDOM_MULTIPLIER : atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp=\" + reg);\n      }\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = CodecProvider.getDefault().getFieldCodec(fieldName).equals(\"PreFlex\") ? 100 * RANDOM_MULTIPLIER : atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp=\" + reg);\n      }\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = Codec.getDefault().getName().equals(\"Lucene3x\") ? 100 * RANDOM_MULTIPLIER : atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp=\" + reg);\n      }\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = Codec.getDefault().getName().equals(\"Lucene3x\") ? 100 * RANDOM_MULTIPLIER : atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp=\" + reg);\n      }\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["eeebcf026b55d8ce3ac8165210782b26cc4efe30","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["2aafd88401639311b0404e67c94e829e123a0e45","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["2aafd88401639311b0404e67c94e829e123a0e45","a09096fda3618d6f041c36896a70ce7f8715b09c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["150488c1317972164a9a824be05b1ba2ba0fc68c","41916511eb7a0aa94cb9b000074ea466e14296b7"],"2aafd88401639311b0404e67c94e829e123a0e45":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"a09096fda3618d6f041c36896a70ce7f8715b09c":["2aafd88401639311b0404e67c94e829e123a0e45"],"7b91922b55d15444d554721b352861d028eb8278":["c5145e7af5e55022ec6ba083c0aef480e49e0d3b"],"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["13452165d8bf3d45a72f572aaed3c679735d3af2"],"41916511eb7a0aa94cb9b000074ea466e14296b7":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["41916511eb7a0aa94cb9b000074ea466e14296b7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["3bb13258feba31ab676502787ab2e1779f129b7a","f83af14a2a8131b14d7aee6274c740334e0363d3"],"eeebcf026b55d8ce3ac8165210782b26cc4efe30":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"3bb13258feba31ab676502787ab2e1779f129b7a":["b12d3e81e0f95a4527b5703953c503f71120ffcc","eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c5145e7af5e55022ec6ba083c0aef480e49e0d3b":["60ba444201d2570214b6fcf1d15600dc1a01f548"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["3242a09f703274d3b9283f2064a1a33064b53a1b","150488c1317972164a9a824be05b1ba2ba0fc68c"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","60ba444201d2570214b6fcf1d15600dc1a01f548","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["2aafd88401639311b0404e67c94e829e123a0e45"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["3bb13258feba31ab676502787ab2e1779f129b7a"],"2aafd88401639311b0404e67c94e829e123a0e45":["3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a","a09096fda3618d6f041c36896a70ce7f8715b09c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"a09096fda3618d6f041c36896a70ce7f8715b09c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["c5145e7af5e55022ec6ba083c0aef480e49e0d3b"],"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"41916511eb7a0aa94cb9b000074ea466e14296b7":["b12d3e81e0f95a4527b5703953c503f71120ffcc","13452165d8bf3d45a72f572aaed3c679735d3af2"],"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"eeebcf026b55d8ce3ac8165210782b26cc4efe30":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","f83af14a2a8131b14d7aee6274c740334e0363d3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["b12d3e81e0f95a4527b5703953c503f71120ffcc","41916511eb7a0aa94cb9b000074ea466e14296b7"],"3bb13258feba31ab676502787ab2e1779f129b7a":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"c5145e7af5e55022ec6ba083c0aef480e49e0d3b":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}