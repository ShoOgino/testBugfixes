{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","sourceNew":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = atLeast(100);\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator(null);\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || !fieldTerms.get(spot).field().equals(field)) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seekCeil(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (!term.field().equals(field)) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = atLeast(100);\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator(null);\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || !fieldTerms.get(spot).field().equals(field)) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seekCeil(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (!term.field().equals(field)) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","sourceNew":null,"sourceOld":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = atLeast(100);\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator(null);\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || !fieldTerms.get(spot).field().equals(field)) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seekCeil(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (!term.field().equals(field)) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}