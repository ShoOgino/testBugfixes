{"path":"src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","commits":[{"id":"125b5699f11b58d9be0820c6ce8b1648812902e8","date":1190273227,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doCommit().mjava","sourceNew":"  protected void commitChanges() throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      deletedDocs.write(directory(), si.getDelFileName());\n    }\n    if (undeleteAll && si.hasDeletions()) {\n      si.clearDelGen();\n    }\n    if (normsDirty) {               // re-write norms\n      si.setNumFields(fieldInfos.size());\n      Enumeration values = norms.elements();\n      while (values.hasMoreElements()) {\n        Norm norm = (Norm) values.nextElement();\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    undeleteAll = false;\n  }\n\n","sourceOld":"  protected void doCommit() throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      deletedDocs.write(directory(), si.getDelFileName());\n    }\n    if (undeleteAll && si.hasDeletions()) {\n      si.clearDelGen();\n    }\n    if (normsDirty) {               // re-write norms\n      si.setNumFields(fieldInfos.size());\n      Enumeration values = norms.elements();\n      while (values.hasMoreElements()) {\n        Norm norm = (Norm) values.nextElement();\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    undeleteAll = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8","date":1195335263,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","sourceNew":"  protected void commitChanges() throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      deletedDocs.write(directory(), si.getDelFileName());\n    }\n    if (undeleteAll && si.hasDeletions()) {\n      si.clearDelGen();\n    }\n    if (normsDirty) {               // re-write norms\n      si.setNumFields(fieldInfos.size());\n      Iterator it = norms.values().iterator();\n      while (it.hasNext()) {\n        Norm norm = (Norm) it.next();\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    undeleteAll = false;\n  }\n\n","sourceOld":"  protected void commitChanges() throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      deletedDocs.write(directory(), si.getDelFileName());\n    }\n    if (undeleteAll && si.hasDeletions()) {\n      si.clearDelGen();\n    }\n    if (normsDirty) {               // re-write norms\n      si.setNumFields(fieldInfos.size());\n      Enumeration values = norms.elements();\n      while (values.hasMoreElements()) {\n        Norm norm = (Norm) values.nextElement();\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    undeleteAll = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34e2c71b6406443562df54db233fde0728502f64","date":1209294850,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","sourceNew":"  protected void commitChanges() throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      deletedDocs.write(directory(), si.getDelFileName());\n      \n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n    }\n    if (undeleteAll && si.hasDeletions()) {\n      si.clearDelGen();\n      si.setDelCount(0);\n    }\n    if (normsDirty) {               // re-write norms\n      si.setNumFields(fieldInfos.size());\n      Iterator it = norms.values().iterator();\n      while (it.hasNext()) {\n        Norm norm = (Norm) it.next();\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    undeleteAll = false;\n  }\n\n","sourceOld":"  protected void commitChanges() throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      deletedDocs.write(directory(), si.getDelFileName());\n    }\n    if (undeleteAll && si.hasDeletions()) {\n      si.clearDelGen();\n    }\n    if (normsDirty) {               // re-write norms\n      si.setNumFields(fieldInfos.size());\n      Iterator it = norms.values().iterator();\n      while (it.hasNext()) {\n        Norm norm = (Norm) it.next();\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    undeleteAll = false;\n  }\n\n","bugFix":null,"bugIntro":["15633975e2cb95a0c6eee9a600583708438ebd76"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8cef1030afc7cb5074ef85f97e2bd260d0b9bb23","date":1228257215,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","sourceNew":"  protected void commitChanges() throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      deletedDocs.write(directory(), si.getDelFileName());\n      \n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n    }\n    if (undeleteAll && si.hasDeletions()) {\n      si.clearDelGen();\n      si.setDelCount(0);\n    }\n    if (normsDirty) {               // re-write norms\n      si.setNumFields(fieldInfos.size());\n      Iterator it = norms.values().iterator();\n      while (it.hasNext()) {\n        Norm norm = (Norm) it.next();\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    undeleteAll = false;\n  }\n\n","sourceOld":"  protected void commitChanges() throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      deletedDocs.write(directory(), si.getDelFileName());\n      \n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n    }\n    if (undeleteAll && si.hasDeletions()) {\n      si.clearDelGen();\n      si.setDelCount(0);\n    }\n    if (normsDirty) {               // re-write norms\n      si.setNumFields(fieldInfos.size());\n      Iterator it = norms.values().iterator();\n      while (it.hasNext()) {\n        Norm norm = (Norm) it.next();\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    undeleteAll = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","sourceNew":"  protected void commitChanges() throws IOException {\n\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      deletedDocs.write(directory(), si.getDelFileName());\n      \n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n    }\n    if (undeleteAll && si.hasDeletions()) {\n      si.clearDelGen();\n      si.setDelCount(0);\n    }\n    if (normsDirty) {               // re-write norms\n      si.setNumFields(fieldInfos.size());\n      Iterator it = norms.values().iterator();\n      while (it.hasNext()) {\n        Norm norm = (Norm) it.next();\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    undeleteAll = false;\n  }\n\n","sourceOld":"  protected void commitChanges() throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      deletedDocs.write(directory(), si.getDelFileName());\n      \n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n    }\n    if (undeleteAll && si.hasDeletions()) {\n      si.clearDelGen();\n      si.setDelCount(0);\n    }\n    if (normsDirty) {               // re-write norms\n      si.setNumFields(fieldInfos.size());\n      Iterator it = norms.values().iterator();\n      while (it.hasNext()) {\n        Norm norm = (Norm) it.next();\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    undeleteAll = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5fe49edd7581c377876998430f9547519f41a60a","date":1242906321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","sourceNew":"  protected void commitChanges() throws IOException {\n\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      deletedDocs.write(directory(), si.getDelFileName());\n      \n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    }\n    if (undeleteAll && si.hasDeletions()) {\n      si.clearDelGen();\n      si.setDelCount(0);\n    }\n    if (normsDirty) {               // re-write norms\n      si.setNumFields(fieldInfos.size());\n      Iterator it = norms.values().iterator();\n      while (it.hasNext()) {\n        Norm norm = (Norm) it.next();\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    undeleteAll = false;\n  }\n\n","sourceOld":"  protected void commitChanges() throws IOException {\n\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      deletedDocs.write(directory(), si.getDelFileName());\n      \n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n    }\n    if (undeleteAll && si.hasDeletions()) {\n      si.clearDelGen();\n      si.setDelCount(0);\n    }\n    if (normsDirty) {               // re-write norms\n      si.setNumFields(fieldInfos.size());\n      Iterator it = norms.values().iterator();\n      while (it.hasNext()) {\n        Norm norm = (Norm) it.next();\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    undeleteAll = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15633975e2cb95a0c6eee9a600583708438ebd76","date":1243022273,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","sourceNew":"  protected void commitChanges() throws IOException {\n\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      deletedDocs.write(directory(), si.getDelFileName());\n      \n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.setNumFields(fieldInfos.size());\n      Iterator it = norms.values().iterator();\n      while (it.hasNext()) {\n        Norm norm = (Norm) it.next();\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n  }\n\n","sourceOld":"  protected void commitChanges() throws IOException {\n\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      deletedDocs.write(directory(), si.getDelFileName());\n      \n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    }\n    if (undeleteAll && si.hasDeletions()) {\n      si.clearDelGen();\n      si.setDelCount(0);\n    }\n    if (normsDirty) {               // re-write norms\n      si.setNumFields(fieldInfos.size());\n      Iterator it = norms.values().iterator();\n      while (it.hasNext()) {\n        Norm norm = (Norm) it.next();\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    undeleteAll = false;\n  }\n\n","bugFix":["284c1d3c8b19931bf6f312fae7470487f5d9e580","f653aecb322b74d99e6ecdb93765e453a3d7aa71","34e2c71b6406443562df54db233fde0728502f64"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","sourceNew":null,"sourceOld":"  protected void commitChanges() throws IOException {\n\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      deletedDocs.write(directory(), si.getDelFileName());\n      \n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.setNumFields(fieldInfos.size());\n      Iterator it = norms.values().iterator();\n      while (it.hasNext()) {\n        Norm norm = (Norm) it.next();\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["8cef1030afc7cb5074ef85f97e2bd260d0b9bb23"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["15633975e2cb95a0c6eee9a600583708438ebd76"],"125b5699f11b58d9be0820c6ce8b1648812902e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15633975e2cb95a0c6eee9a600583708438ebd76":["5fe49edd7581c377876998430f9547519f41a60a"],"34e2c71b6406443562df54db233fde0728502f64":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8cef1030afc7cb5074ef85f97e2bd260d0b9bb23":["34e2c71b6406443562df54db233fde0728502f64"],"5fe49edd7581c377876998430f9547519f41a60a":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["5fe49edd7581c377876998430f9547519f41a60a"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"125b5699f11b58d9be0820c6ce8b1648812902e8":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"15633975e2cb95a0c6eee9a600583708438ebd76":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"34e2c71b6406443562df54db233fde0728502f64":["8cef1030afc7cb5074ef85f97e2bd260d0b9bb23"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"8cef1030afc7cb5074ef85f97e2bd260d0b9bb23":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"5fe49edd7581c377876998430f9547519f41a60a":["15633975e2cb95a0c6eee9a600583708438ebd76"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["34e2c71b6406443562df54db233fde0728502f64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}