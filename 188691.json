{"path":"lucene/src/java/org/apache/lucene/util/PerReaderTermState#build(ReaderContext,Term,boolean).mjava","commits":[{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PerReaderTermState#build(ReaderContext,Term,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a {@link PerReaderTermState} from a top-level {@link ReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link PerReaderTermState}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static PerReaderTermState build(ReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final PerReaderTermState perReaderTermState = new PerReaderTermState(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (int i = 0; i < leaves.length; i++) {\n      final Fields fields = leaves[i].reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.getThreadTermsEnum(); // thread-private don't share!\n          if (SeekStatus.FOUND == termsEnum.seek(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/PerReaderTermState#build(ReaderContext,Term,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a {@link PerReaderTermState} from a top-level {@link ReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link PerReaderTermState}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static PerReaderTermState build(ReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final PerReaderTermState perReaderTermState = new PerReaderTermState(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (int i = 0; i < leaves.length; i++) {\n      final Fields fields = leaves[i].reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.getThreadTermsEnum(); // thread-private don't share!\n          if (SeekStatus.FOUND == termsEnum.seek(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/PerReaderTermState#build(ReaderContext,Term,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a {@link PerReaderTermState} from a top-level {@link ReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link PerReaderTermState}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static PerReaderTermState build(ReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final PerReaderTermState perReaderTermState = new PerReaderTermState(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (int i = 0; i < leaves.length; i++) {\n      final Fields fields = leaves[i].reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.getThreadTermsEnum(); // thread-private don't share!\n          if (SeekStatus.FOUND == termsEnum.seek(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PerReaderTermState#build(ReaderContext,Term,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PerReaderTermState#build(ReaderContext,Term,boolean).mjava","sourceNew":"  /**\n   * Creates a {@link PerReaderTermState} from a top-level {@link ReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link PerReaderTermState}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static PerReaderTermState build(ReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final PerReaderTermState perReaderTermState = new PerReaderTermState(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (int i = 0; i < leaves.length; i++) {\n      final Fields fields = leaves[i].reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.getThreadTermsEnum(); // thread-private don't share!\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link PerReaderTermState} from a top-level {@link ReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link PerReaderTermState}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static PerReaderTermState build(ReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final PerReaderTermState perReaderTermState = new PerReaderTermState(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (int i = 0; i < leaves.length; i++) {\n      final Fields fields = leaves[i].reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.getThreadTermsEnum(); // thread-private don't share!\n          if (SeekStatus.FOUND == termsEnum.seek(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/PerReaderTermState#build(ReaderContext,Term,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PerReaderTermState#build(ReaderContext,Term,boolean).mjava","sourceNew":"  /**\n   * Creates a {@link PerReaderTermState} from a top-level {@link ReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link PerReaderTermState}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static PerReaderTermState build(ReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final PerReaderTermState perReaderTermState = new PerReaderTermState(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (int i = 0; i < leaves.length; i++) {\n      final Fields fields = leaves[i].reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.getThreadTermsEnum(); // thread-private don't share!\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link PerReaderTermState} from a top-level {@link ReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link PerReaderTermState}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static PerReaderTermState build(ReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final PerReaderTermState perReaderTermState = new PerReaderTermState(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (int i = 0; i < leaves.length; i++) {\n      final Fields fields = leaves[i].reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.getThreadTermsEnum(); // thread-private don't share!\n          if (SeekStatus.FOUND == termsEnum.seek(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/PerReaderTermState#build(ReaderContext,Term,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PerReaderTermState#build(ReaderContext,Term,boolean).mjava","sourceNew":"  /**\n   * Creates a {@link PerReaderTermState} from a top-level {@link ReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link PerReaderTermState}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static PerReaderTermState build(ReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final PerReaderTermState perReaderTermState = new PerReaderTermState(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (int i = 0; i < leaves.length; i++) {\n      final Fields fields = leaves[i].reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.getThreadTermsEnum(); // thread-private don't share!\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link PerReaderTermState} from a top-level {@link ReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link PerReaderTermState}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static PerReaderTermState build(ReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final PerReaderTermState perReaderTermState = new PerReaderTermState(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (int i = 0; i < leaves.length; i++) {\n      final Fields fields = leaves[i].reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.getThreadTermsEnum(); // thread-private don't share!\n          if (SeekStatus.FOUND == termsEnum.seek(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/TermContext#build(ReaderContext,Term,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PerReaderTermState#build(ReaderContext,Term,boolean).mjava","sourceNew":"  /**\n   * Creates a {@link TermContext} from a top-level {@link ReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(ReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (int i = 0; i < leaves.length; i++) {\n      final Fields fields = leaves[i].reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.getThreadTermsEnum(); // thread-private don't share!\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link PerReaderTermState} from a top-level {@link ReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link PerReaderTermState}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static PerReaderTermState build(ReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final PerReaderTermState perReaderTermState = new PerReaderTermState(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (int i = 0; i < leaves.length; i++) {\n      final Fields fields = leaves[i].reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.getThreadTermsEnum(); // thread-private don't share!\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/TermContext#build(ReaderContext,Term,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PerReaderTermState#build(ReaderContext,Term,boolean).mjava","sourceNew":"  /**\n   * Creates a {@link TermContext} from a top-level {@link ReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(ReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (int i = 0; i < leaves.length; i++) {\n      final Fields fields = leaves[i].reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.getThreadTermsEnum(); // thread-private don't share!\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link PerReaderTermState} from a top-level {@link ReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link PerReaderTermState}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static PerReaderTermState build(ReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final PerReaderTermState perReaderTermState = new PerReaderTermState(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (int i = 0; i < leaves.length; i++) {\n      final Fields fields = leaves[i].reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.getThreadTermsEnum(); // thread-private don't share!\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/TermContext#build(ReaderContext,Term,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PerReaderTermState#build(ReaderContext,Term,boolean).mjava","sourceNew":"  /**\n   * Creates a {@link TermContext} from a top-level {@link ReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(ReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (int i = 0; i < leaves.length; i++) {\n      final Fields fields = leaves[i].reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.getThreadTermsEnum(); // thread-private don't share!\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link PerReaderTermState} from a top-level {@link ReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link PerReaderTermState}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static PerReaderTermState build(ReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final PerReaderTermState perReaderTermState = new PerReaderTermState(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    for (int i = 0; i < leaves.length; i++) {\n      final Fields fields = leaves[i].reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.getThreadTermsEnum(); // thread-private don't share!\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["d083e83f225b11e5fdd900e83d26ddb385b6955c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["2553b00f699380c64959ccb27991289aae87be2e","0f3cee3d20b0c786e6fca20539454262e29edcab"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["fa1a999d6674423e5c4ac858b410283f6fe03f20","fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["fa1a999d6674423e5c4ac858b410283f6fe03f20","fd9cc9d77712aba3662f24632df7539ab75e3667"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f3cee3d20b0c786e6fca20539454262e29edcab"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","fa1a999d6674423e5c4ac858b410283f6fe03f20","868da859b43505d9d2a023bfeae6dd0c795f5295"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["29ef99d61cda9641b6250bf9567329a6e65f901d","2553b00f699380c64959ccb27991289aae87be2e","fd9cc9d77712aba3662f24632df7539ab75e3667","d083e83f225b11e5fdd900e83d26ddb385b6955c","868da859b43505d9d2a023bfeae6dd0c795f5295"],"2553b00f699380c64959ccb27991289aae87be2e":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["0f3cee3d20b0c786e6fca20539454262e29edcab","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1291e4568eb7d9463d751627596ef14baf4c1603"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}