{"path":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    IndexWriterConfig iwc = solrConfig.defaultIndexConfig.toIndexWriterConfig(h.getCore().getSchema());\n    MergePolicy mp = iwc.getMergePolicy();\n    assertTrue(mp instanceof TieredMergePolicy);\n    TieredMergePolicy tieredMP = (TieredMergePolicy) mp;\n\n    // mp-specific setter\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    \n    // make sure we apply compoundFile and mergeFactor\n    assertEquals(false, tieredMP.getUseCompoundFile());\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // make sure we overrode segmentsPerTier (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    IndexWriterConfig iwc = solrConfig.defaultIndexConfig.toIndexWriterConfig(h.getCore().getSchema());\n    MergePolicy mp = iwc.getMergePolicy();\n    assertTrue(mp instanceof TieredMergePolicy);\n    TieredMergePolicy tieredMP = (TieredMergePolicy) mp;\n\n    // mp-specific setter\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    \n    // make sure we apply compoundFile and mergeFactor\n    assertEquals(false, tieredMP.getUseCompoundFile());\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // make sure we overrode segmentsPerTier (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    IndexWriterConfig iwc = solrConfig.defaultIndexConfig.toIndexWriterConfig(h.getCore().getSchema());\n    MergePolicy mp = iwc.getMergePolicy();\n    assertTrue(mp instanceof TieredMergePolicy);\n    TieredMergePolicy tieredMP = (TieredMergePolicy) mp;\n\n    // mp-specific setter\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    \n    // make sure we apply compoundFile and mergeFactor\n    assertEquals(false, tieredMP.getUseCompoundFile());\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // make sure we overrode segmentsPerTier (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    IndexWriterConfig iwc = solrConfig.defaultIndexConfig.toIndexWriterConfig(h.getCore().getSchema());\n    MergePolicy mp = iwc.getMergePolicy();\n    assertTrue(mp instanceof TieredMergePolicy);\n    TieredMergePolicy tieredMP = (TieredMergePolicy) mp;\n\n    // mp-specific setter\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    \n    // make sure we apply compoundFile and mergeFactor\n    assertEquals(false, tieredMP.getUseCompoundFile());\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // make sure we overrode segmentsPerTier (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    IndexWriterConfig iwc = solrConfig.defaultIndexConfig.toIndexWriterConfig(h.getCore().getSchema());\n    MergePolicy mp = iwc.getMergePolicy();\n    assertTrue(mp instanceof TieredMergePolicy);\n    TieredMergePolicy tieredMP = (TieredMergePolicy) mp;\n\n    // mp-specific setter\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    \n    // make sure we apply compoundFile and mergeFactor\n    assertEquals(false, tieredMP.getUseCompoundFile());\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // make sure we overrode segmentsPerTier (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    IndexWriterConfig iwc = solrConfig.defaultIndexConfig.toIndexWriterConfig(h.getCore().getSchema());\n    MergePolicy mp = iwc.getMergePolicy();\n    assertTrue(mp instanceof TieredMergePolicy);\n    TieredMergePolicy tieredMP = (TieredMergePolicy) mp;\n\n    // mp-specific setter\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    \n    // make sure we apply compoundFile and mergeFactor\n    assertEquals(false, tieredMP.getUseCompoundFile());\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // make sure we overrode segmentsPerTier (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"259900d39d8aa0d3db2a89b9f1e0c428fba270b7","date":1332768481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    IndexWriterConfig iwc = solrConfig.defaultIndexConfig.toIndexWriterConfig(h.getCore().getSchema());\n    MergePolicy mp = iwc.getMergePolicy();\n    assertTrue(mp instanceof TieredMergePolicy);\n    TieredMergePolicy tieredMP = (TieredMergePolicy) mp;\n\n    // mp-specific setter\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    \n    // make sure we apply compoundFile and mergeFactor\n    assertEquals(false, tieredMP.getUseCompoundFile());\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // make sure we overrode segmentsPerTier (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    // make sure we overrode noCFSRatio (useless because we disabled useCompoundFile,\n    // but just to make sure it works)\n    assertEquals(1.0D, tieredMP.getNoCFSRatio(), 0.001);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    IndexWriterConfig iwc = solrConfig.defaultIndexConfig.toIndexWriterConfig(h.getCore().getSchema());\n    MergePolicy mp = iwc.getMergePolicy();\n    assertTrue(mp instanceof TieredMergePolicy);\n    TieredMergePolicy tieredMP = (TieredMergePolicy) mp;\n\n    // mp-specific setter\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    \n    // make sure we apply compoundFile and mergeFactor\n    assertEquals(false, tieredMP.getUseCompoundFile());\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // make sure we overrode segmentsPerTier (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n  }\n\n","bugFix":null,"bugIntro":["6d0fc107895562138b4cc92eccac979d28579b98"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a5469a71486c4c1e313c7fcb08188d7111195c2","date":1333407337,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getSchema());\n    MergePolicy mp = iwc.getMergePolicy();\n    assertTrue(mp instanceof TieredMergePolicy);\n    TieredMergePolicy tieredMP = (TieredMergePolicy) mp;\n\n    // mp-specific setter\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    \n    // make sure we apply compoundFile and mergeFactor\n    assertEquals(false, tieredMP.getUseCompoundFile());\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // make sure we overrode segmentsPerTier (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    // make sure we overrode noCFSRatio (useless because we disabled useCompoundFile,\n    // but just to make sure it works)\n    assertEquals(1.0D, tieredMP.getNoCFSRatio(), 0.001);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    IndexWriterConfig iwc = solrConfig.defaultIndexConfig.toIndexWriterConfig(h.getCore().getSchema());\n    MergePolicy mp = iwc.getMergePolicy();\n    assertTrue(mp instanceof TieredMergePolicy);\n    TieredMergePolicy tieredMP = (TieredMergePolicy) mp;\n\n    // mp-specific setter\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    \n    // make sure we apply compoundFile and mergeFactor\n    assertEquals(false, tieredMP.getUseCompoundFile());\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // make sure we overrode segmentsPerTier (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    // make sure we overrode noCFSRatio (useless because we disabled useCompoundFile,\n    // but just to make sure it works)\n    assertEquals(1.0D, tieredMP.getNoCFSRatio(), 0.001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    MergePolicy mp = iwc.getMergePolicy();\n    assertTrue(mp instanceof TieredMergePolicy);\n    TieredMergePolicy tieredMP = (TieredMergePolicy) mp;\n\n    // mp-specific setter\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    \n    // make sure we apply compoundFile and mergeFactor\n    assertEquals(false, tieredMP.getUseCompoundFile());\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // make sure we overrode segmentsPerTier (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    // make sure we overrode noCFSRatio (useless because we disabled useCompoundFile,\n    // but just to make sure it works)\n    assertEquals(1.0D, tieredMP.getNoCFSRatio(), 0.001);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getSchema());\n    MergePolicy mp = iwc.getMergePolicy();\n    assertTrue(mp instanceof TieredMergePolicy);\n    TieredMergePolicy tieredMP = (TieredMergePolicy) mp;\n\n    // mp-specific setter\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    \n    // make sure we apply compoundFile and mergeFactor\n    assertEquals(false, tieredMP.getUseCompoundFile());\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // make sure we overrode segmentsPerTier (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    // make sure we overrode noCFSRatio (useless because we disabled useCompoundFile,\n    // but just to make sure it works)\n    assertEquals(1.0D, tieredMP.getNoCFSRatio(), 0.001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    MergePolicy mp = iwc.getMergePolicy();\n    assertTrue(mp instanceof TieredMergePolicy);\n    TieredMergePolicy tieredMP = (TieredMergePolicy) mp;\n\n    // mp-specific setter\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    \n    // make sure we apply compoundFile and mergeFactor\n    assertEquals(0.0, tieredMP.getNoCFSRatio(), 0.0);\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // make sure we overrode segmentsPerTier (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    // make sure we overrode noCFSRatio (useless because we disabled useCompoundFile,\n    // but just to make sure it works)\n    assertEquals(1.0D, tieredMP.getNoCFSRatio(), 0.001);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    MergePolicy mp = iwc.getMergePolicy();\n    assertTrue(mp instanceof TieredMergePolicy);\n    TieredMergePolicy tieredMP = (TieredMergePolicy) mp;\n\n    // mp-specific setter\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    \n    // make sure we apply compoundFile and mergeFactor\n    assertEquals(false, tieredMP.getUseCompoundFile());\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // make sure we overrode segmentsPerTier (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    // make sure we overrode noCFSRatio (useless because we disabled useCompoundFile,\n    // but just to make sure it works)\n    assertEquals(1.0D, tieredMP.getNoCFSRatio(), 0.001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"218396e11e6777c32163232011305df7f7bceb1f","date":1371144233,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    MergePolicy mp = iwc.getMergePolicy();\n    assertTrue(mp instanceof TieredMergePolicy);\n    TieredMergePolicy tieredMP = (TieredMergePolicy) mp;\n\n    // mp-specific setter\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    \n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // make sure we overrode segmentsPerTier (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    // make sure we overrode noCFSRatio (useless because we disabled useCompoundFile,\n    // but just to make sure it works)\n    assertEquals(1.0D, tieredMP.getNoCFSRatio(), 0.001);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    MergePolicy mp = iwc.getMergePolicy();\n    assertTrue(mp instanceof TieredMergePolicy);\n    TieredMergePolicy tieredMP = (TieredMergePolicy) mp;\n\n    // mp-specific setter\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    \n    // make sure we apply compoundFile and mergeFactor\n    assertEquals(0.0, tieredMP.getNoCFSRatio(), 0.0);\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // make sure we overrode segmentsPerTier (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    // make sure we overrode noCFSRatio (useless because we disabled useCompoundFile,\n    // but just to make sure it works)\n    assertEquals(1.0D, tieredMP.getNoCFSRatio(), 0.001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d0fc107895562138b4cc92eccac979d28579b98","date":1371594707,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    initCore(\"solrconfig-mergepolicy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.6D, tieredMP.getNoCFSRatio(), 0.001);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    MergePolicy mp = iwc.getMergePolicy();\n    assertTrue(mp instanceof TieredMergePolicy);\n    TieredMergePolicy tieredMP = (TieredMergePolicy) mp;\n\n    // mp-specific setter\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    \n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // make sure we overrode segmentsPerTier (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    // make sure we overrode noCFSRatio (useless because we disabled useCompoundFile,\n    // but just to make sure it works)\n    assertEquals(1.0D, tieredMP.getNoCFSRatio(), 0.001);\n  }\n\n","bugFix":["a3800dc8cdd8c46b4863712aacac0db52566f146","259900d39d8aa0d3db2a89b9f1e0c428fba270b7"],"bugIntro":["0e10d5539266ae943f9fa6befa6ac3481a2419c8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e10d5539266ae943f9fa6befa6ac3481a2419c8","date":1371692194,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    initCore(\"solrconfig-mergepolicy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    assertEquals(true, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threashold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), true);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), true);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    initCore(\"solrconfig-mergepolicy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.6D, tieredMP.getNoCFSRatio(), 0.001);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n  }\n\n","bugFix":["6d0fc107895562138b4cc92eccac979d28579b98"],"bugIntro":["fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f33ef255480d446ae7aa03506be85d0356a9850f","date":1371880818,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-mergepolicy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threashold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    initCore(\"solrconfig-mergepolicy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    assertEquals(true, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threashold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), true);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), true);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-mergepolicy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threashold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    MergePolicy mp = iwc.getMergePolicy();\n    assertTrue(mp instanceof TieredMergePolicy);\n    TieredMergePolicy tieredMP = (TieredMergePolicy) mp;\n\n    // mp-specific setter\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    \n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // make sure we overrode segmentsPerTier (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    // make sure we overrode noCFSRatio (useless because we disabled useCompoundFile,\n    // but just to make sure it works)\n    assertEquals(1.0D, tieredMP.getNoCFSRatio(), 0.001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb79e9d21cd02f5118615fa9df1ac079d1327196","date":1377721131,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-tieredmergepolicy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threashold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-mergepolicy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threashold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-tieredmergepolicy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threashold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-mergepolicy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threashold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0","date":1422781929,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-tieredmergepolicy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threashold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-tieredmergepolicy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threashold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d15c2cc183ad95a1919e61319a2b813f1c324ede","date":1455021384,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(random().nextBoolean() ? \"solrconfig-tieredmergepolicy.xml\" : \"solrconfig-tieredmergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threashold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-tieredmergepolicy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threashold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz KrasiÅski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(random().nextBoolean() ? \"solrconfig-tieredmergepolicy.xml\" : \"solrconfig-tieredmergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threshold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(random().nextBoolean() ? \"solrconfig-tieredmergepolicy.xml\" : \"solrconfig-tieredmergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threashold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(random().nextBoolean() ? \"solrconfig-tieredmergepolicy.xml\" : \"solrconfig-tieredmergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threshold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(random().nextBoolean() ? \"solrconfig-tieredmergepolicy.xml\" : \"solrconfig-tieredmergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threashold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(random().nextBoolean() ? \"solrconfig-tieredmergepolicy.xml\" : \"solrconfig-tieredmergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threshold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(random().nextBoolean() ? \"solrconfig-tieredmergepolicy.xml\" : \"solrconfig-tieredmergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threashold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d848516a5d0b23d183a2ceb4f4fb8634205956","date":1496408348,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-tieredmergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threshold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(random().nextBoolean() ? \"solrconfig-tieredmergepolicy.xml\" : \"solrconfig-tieredmergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threshold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-tieredmergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threshold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(random().nextBoolean() ? \"solrconfig-tieredmergepolicy.xml\" : \"solrconfig-tieredmergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threshold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-tieredmergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threshold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(random().nextBoolean() ? \"solrconfig-tieredmergepolicy.xml\" : \"solrconfig-tieredmergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threshold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2","date":1529965060,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-tieredmergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threshold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize(\"maxSegments\", \"1\"));\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-tieredmergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threshold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","bugFix":["0e10d5539266ae943f9fa6befa6ac3481a2419c8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-tieredmergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threshold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize(\"maxSegments\", \"1\"));\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-tieredmergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threshold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testTieredMergePolicyConfig().mjava","sourceNew":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-tieredmergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threshold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize(\"maxSegments\", \"1\"));\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","sourceOld":"  public void testTieredMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-tieredmergepolicyfactory.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    // set by legacy <mergeFactor> setting\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    \n    // mp-specific setters\n    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());\n    assertEquals(0.1D, tieredMP.getNoCFSRatio(), 0.0D);\n    // make sure we overrode segmentsPerTier \n    // (split from maxMergeAtOnce out of mergeFactor)\n    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);\n    \n    assertCommitSomeNewDocs();\n    // even though we have a single segment (which is 100% of the size of \n    // the index which is higher then our 0.6D threshold) the\n    // compound ratio doesn't matter because the segment was never merged\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertCommitSomeNewDocs();\n    assertNumSegments(h.getCore(), 2);\n    assertCompoundSegments(h.getCore(), expectCFS);\n\n    assertU(optimize());\n    assertNumSegments(h.getCore(), 1);\n    // we've now forced a merge, and the MP ratio should be in play\n    assertCompoundSegments(h.getCore(), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d15c2cc183ad95a1919e61319a2b813f1c324ede":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["218396e11e6777c32163232011305df7f7bceb1f","f33ef255480d446ae7aa03506be85d0356a9850f"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["bb79e9d21cd02f5118615fa9df1ac079d1327196"],"08970e5b8411182a29412c177eff67ec1110095b":["4a5469a71486c4c1e313c7fcb08188d7111195c2"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["d15c2cc183ad95a1919e61319a2b813f1c324ede","0158ced21948b6626f733c1c42c1e18d94449789"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["d470c8182e92b264680e34081b75e70a9f2b3c89","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["28288370235ed02234a64753cdbf0c6ec096304a","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"],"259900d39d8aa0d3db2a89b9f1e0c428fba270b7":["c26f00b574427b55127e869b935845554afde1fa"],"f33ef255480d446ae7aa03506be85d0356a9850f":["0e10d5539266ae943f9fa6befa6ac3481a2419c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e10d5539266ae943f9fa6befa6ac3481a2419c8":["6d0fc107895562138b4cc92eccac979d28579b98"],"bb79e9d21cd02f5118615fa9df1ac079d1327196":["f33ef255480d446ae7aa03506be85d0356a9850f"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["28288370235ed02234a64753cdbf0c6ec096304a","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"],"6d0fc107895562138b4cc92eccac979d28579b98":["218396e11e6777c32163232011305df7f7bceb1f"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["37a0f60745e53927c4c876cfe5b5a58170f0646c","bb79e9d21cd02f5118615fa9df1ac079d1327196"],"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["d470c8182e92b264680e34081b75e70a9f2b3c89","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d15c2cc183ad95a1919e61319a2b813f1c324ede","d470c8182e92b264680e34081b75e70a9f2b3c89"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["08970e5b8411182a29412c177eff67ec1110095b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4a5469a71486c4c1e313c7fcb08188d7111195c2":["259900d39d8aa0d3db2a89b9f1e0c428fba270b7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"],"218396e11e6777c32163232011305df7f7bceb1f":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"0158ced21948b6626f733c1c42c1e18d94449789":["d15c2cc183ad95a1919e61319a2b813f1c324ede"]},"commit2Childs":{"d15c2cc183ad95a1919e61319a2b813f1c324ede":["d470c8182e92b264680e34081b75e70a9f2b3c89","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0158ced21948b6626f733c1c42c1e18d94449789"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"c26f00b574427b55127e869b935845554afde1fa":["259900d39d8aa0d3db2a89b9f1e0c428fba270b7"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["d15c2cc183ad95a1919e61319a2b813f1c324ede"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["70d848516a5d0b23d183a2ceb4f4fb8634205956","e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"08970e5b8411182a29412c177eff67ec1110095b":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"259900d39d8aa0d3db2a89b9f1e0c428fba270b7":["4a5469a71486c4c1e313c7fcb08188d7111195c2"],"f33ef255480d446ae7aa03506be85d0356a9850f":["37a0f60745e53927c4c876cfe5b5a58170f0646c","bb79e9d21cd02f5118615fa9df1ac079d1327196"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"0e10d5539266ae943f9fa6befa6ac3481a2419c8":["f33ef255480d446ae7aa03506be85d0356a9850f"],"bb79e9d21cd02f5118615fa9df1ac079d1327196":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"6d0fc107895562138b4cc92eccac979d28579b98":["0e10d5539266ae943f9fa6befa6ac3481a2419c8"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"28288370235ed02234a64753cdbf0c6ec096304a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"],"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["218396e11e6777c32163232011305df7f7bceb1f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"4a5469a71486c4c1e313c7fcb08188d7111195c2":["08970e5b8411182a29412c177eff67ec1110095b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"218396e11e6777c32163232011305df7f7bceb1f":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6d0fc107895562138b4cc92eccac979d28579b98"],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}