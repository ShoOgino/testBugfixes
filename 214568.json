{"path":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#ensureSource(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#ensureSource(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#ensureSource(int).mjava","sourceNew":"    private final int ensureSource(int docID) {\n      if (docID >= start && docID < start+numDocs) {\n        return docID - start;\n      } else {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < slices.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert slices[idx] != null;\n        try {\n          if (direct) {\n            current = slices[idx].docValues.getDirectSource();\n          } else {\n            current = slices[idx].docValues.getSource();\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = slices[idx].start;\n        numDocs = slices[idx].length;\n        return docID - start;\n      }\n    }\n\n","sourceOld":"    private final int ensureSource(int docID) {\n      if (docID >= start && docID < start+numDocs) {\n        return docID - start;\n      } else {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < slices.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert slices[idx] != null;\n        try {\n          if (direct) {\n            current = slices[idx].docValues.getDirectSource();\n          } else {\n            current = slices[idx].docValues.getSource();\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = slices[idx].start;\n        numDocs = slices[idx].length;\n        return docID - start;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#ensureSource(int).mjava","sourceNew":null,"sourceOld":"    private final int ensureSource(int docID) {\n      if (docID >= start && docID < start+numDocs) {\n        return docID - start;\n      } else {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < slices.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert slices[idx] != null;\n        try {\n          if (direct) {\n            current = slices[idx].docValues.getDirectSource();\n          } else {\n            current = slices[idx].docValues.getSource();\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = slices[idx].start;\n        numDocs = slices[idx].length;\n        return docID - start;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#ensureSource(int).mjava","sourceNew":null,"sourceOld":"    private final int ensureSource(int docID) {\n      if (docID >= start && docID < start+numDocs) {\n        return docID - start;\n      } else {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < slices.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert slices[idx] != null;\n        try {\n          if (direct) {\n            current = slices[idx].docValues.getDirectSource();\n          } else {\n            current = slices[idx].docValues.getSource();\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = slices[idx].start;\n        numDocs = slices[idx].length;\n        return docID - start;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0837ab0472feecb3a54260729d845f839e1cbd72"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}