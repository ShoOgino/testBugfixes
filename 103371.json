{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#addProx(int,DataInput,DataInput).mjava","commits":[{"id":"eda61b1e90b490cc5837200e04c02639a0d272c7","date":1358795519,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets)\n      throws IOException {\n    assert (curField.hasPositions) == (positions != null);\n    assert (curField.hasOffsets) == (offsets != null);\n\n    if (curField.hasPositions) {\n      final int posStart = curField.posStart + curField.totalPositions;\n      if (posStart + numProx > positionsBuf.length) {\n        positionsBuf = ArrayUtil.grow(positionsBuf, posStart + numProx);\n      }\n      int position = 0;\n      if (curField.hasPayloads) {\n        final int payStart = curField.payStart + curField.totalPositions;\n        if (payStart + numProx > payloadLengthsBuf.length) {\n          payloadLengthsBuf = ArrayUtil.grow(payloadLengthsBuf, payStart + numProx);\n        }\n        for (int i = 0; i < numProx; ++i) {\n          final int code = positions.readVInt();\n          if ((code & 1) != 0) {\n            // This position has a payload\n            final int payloadLength = positions.readVInt();\n            payloadLengthsBuf[payStart + i] = payloadLength;\n            payloadBytes.copyBytes(positions, payloadLength);\n          } else {\n            payloadLengthsBuf[payStart + i] = 0;\n          }\n          position += code >>> 1;\n          positionsBuf[posStart + i] = position;\n        }\n      } else {\n        for (int i = 0; i < numProx; ++i) {\n          position += (positions.readVInt() >>> 1);\n          positionsBuf[posStart + i] = position;\n        }\n      }\n    }\n\n    if (curField.hasOffsets) {\n      final int offStart = curField.offStart + curField.totalPositions;\n      if (offStart + numProx > startOffsetsBuf.length) {\n        final int newLength = ArrayUtil.oversize(offStart + numProx, 4);\n        startOffsetsBuf = Arrays.copyOf(startOffsetsBuf, newLength);\n        lengthsBuf = Arrays.copyOf(lengthsBuf, newLength);\n      }\n      int lastOffset = 0, startOffset, endOffset;\n      for (int i = 0; i < numProx; ++i) {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n        startOffsetsBuf[offStart + i] = startOffset;\n        lengthsBuf[offStart + i] = endOffset - startOffset;\n      }\n    }\n\n    curField.totalPositions += numProx;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets)\n      throws IOException {\n    assert (curField.hasPositions) == (positions != null);\n    assert (curField.hasOffsets) == (offsets != null);\n\n    if (curField.hasPositions) {\n      final int posStart = curField.posStart + curField.totalPositions;\n      if (posStart + numProx > positionsBuf.length) {\n        positionsBuf = ArrayUtil.grow(positionsBuf, posStart + numProx);\n      }\n      int position = 0;\n      if (curField.hasPayloads) {\n        final int payStart = curField.payStart + curField.totalPositions;\n        if (payStart + numProx > payloadLengthsBuf.length) {\n          payloadLengthsBuf = ArrayUtil.grow(payloadLengthsBuf, payStart + numProx);\n        }\n        for (int i = 0; i < numProx; ++i) {\n          final int code = positions.readVInt();\n          if ((code & 1) != 0) {\n            // This position has a payload\n            final int payloadLength = positions.readVInt();\n            payloadLengthsBuf[payStart + i] = payloadLength;\n            payloadBytes.copyBytes(positions, payloadLength);\n          } else {\n            payloadLengthsBuf[payStart + i] = 0;\n          }\n          position += code >>> 1;\n          positionsBuf[posStart + i] = position;\n        }\n      } else {\n        for (int i = 0; i < numProx; ++i) {\n          position += (positions.readVInt() >>> 1);\n          positionsBuf[posStart + i] = position;\n        }\n      }\n    }\n\n    if (curField.hasOffsets) {\n      final int offStart = curField.offStart + curField.totalPositions;\n      if (offStart + numProx > startOffsetsBuf.length) {\n        final int newLength = ArrayUtil.oversize(offStart + numProx, 4);\n        startOffsetsBuf = Arrays.copyOf(startOffsetsBuf, newLength);\n        lengthsBuf = Arrays.copyOf(lengthsBuf, newLength);\n      }\n      int lastOffset = 0, startOffset, endOffset;\n      for (int i = 0; i < numProx; ++i) {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n        startOffsetsBuf[offStart + i] = startOffset;\n        lengthsBuf[offStart + i] = endOffset - startOffset;\n      }\n    }\n\n    curField.totalPositions += numProx;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets)\n      throws IOException {\n    assert (curField.hasPositions) == (positions != null);\n    assert (curField.hasOffsets) == (offsets != null);\n\n    if (curField.hasPositions) {\n      final int posStart = curField.posStart + curField.totalPositions;\n      if (posStart + numProx > positionsBuf.length) {\n        positionsBuf = ArrayUtil.grow(positionsBuf, posStart + numProx);\n      }\n      int position = 0;\n      if (curField.hasPayloads) {\n        final int payStart = curField.payStart + curField.totalPositions;\n        if (payStart + numProx > payloadLengthsBuf.length) {\n          payloadLengthsBuf = ArrayUtil.grow(payloadLengthsBuf, payStart + numProx);\n        }\n        for (int i = 0; i < numProx; ++i) {\n          final int code = positions.readVInt();\n          if ((code & 1) != 0) {\n            // This position has a payload\n            final int payloadLength = positions.readVInt();\n            payloadLengthsBuf[payStart + i] = payloadLength;\n            payloadBytes.copyBytes(positions, payloadLength);\n          } else {\n            payloadLengthsBuf[payStart + i] = 0;\n          }\n          position += code >>> 1;\n          positionsBuf[posStart + i] = position;\n        }\n      } else {\n        for (int i = 0; i < numProx; ++i) {\n          position += (positions.readVInt() >>> 1);\n          positionsBuf[posStart + i] = position;\n        }\n      }\n    }\n\n    if (curField.hasOffsets) {\n      final int offStart = curField.offStart + curField.totalPositions;\n      if (offStart + numProx > startOffsetsBuf.length) {\n        final int newLength = ArrayUtil.oversize(offStart + numProx, 4);\n        startOffsetsBuf = ArrayUtil.growExact(startOffsetsBuf, newLength);\n        lengthsBuf = ArrayUtil.growExact(lengthsBuf, newLength);\n      }\n      int lastOffset = 0, startOffset, endOffset;\n      for (int i = 0; i < numProx; ++i) {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n        startOffsetsBuf[offStart + i] = startOffset;\n        lengthsBuf[offStart + i] = endOffset - startOffset;\n      }\n    }\n\n    curField.totalPositions += numProx;\n  }\n\n","sourceOld":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets)\n      throws IOException {\n    assert (curField.hasPositions) == (positions != null);\n    assert (curField.hasOffsets) == (offsets != null);\n\n    if (curField.hasPositions) {\n      final int posStart = curField.posStart + curField.totalPositions;\n      if (posStart + numProx > positionsBuf.length) {\n        positionsBuf = ArrayUtil.grow(positionsBuf, posStart + numProx);\n      }\n      int position = 0;\n      if (curField.hasPayloads) {\n        final int payStart = curField.payStart + curField.totalPositions;\n        if (payStart + numProx > payloadLengthsBuf.length) {\n          payloadLengthsBuf = ArrayUtil.grow(payloadLengthsBuf, payStart + numProx);\n        }\n        for (int i = 0; i < numProx; ++i) {\n          final int code = positions.readVInt();\n          if ((code & 1) != 0) {\n            // This position has a payload\n            final int payloadLength = positions.readVInt();\n            payloadLengthsBuf[payStart + i] = payloadLength;\n            payloadBytes.copyBytes(positions, payloadLength);\n          } else {\n            payloadLengthsBuf[payStart + i] = 0;\n          }\n          position += code >>> 1;\n          positionsBuf[posStart + i] = position;\n        }\n      } else {\n        for (int i = 0; i < numProx; ++i) {\n          position += (positions.readVInt() >>> 1);\n          positionsBuf[posStart + i] = position;\n        }\n      }\n    }\n\n    if (curField.hasOffsets) {\n      final int offStart = curField.offStart + curField.totalPositions;\n      if (offStart + numProx > startOffsetsBuf.length) {\n        final int newLength = ArrayUtil.oversize(offStart + numProx, 4);\n        startOffsetsBuf = Arrays.copyOf(startOffsetsBuf, newLength);\n        lengthsBuf = Arrays.copyOf(lengthsBuf, newLength);\n      }\n      int lastOffset = 0, startOffset, endOffset;\n      for (int i = 0; i < numProx; ++i) {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n        startOffsetsBuf[offStart + i] = startOffset;\n        lengthsBuf[offStart + i] = endOffset - startOffset;\n      }\n    }\n\n    curField.totalPositions += numProx;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets)\n      throws IOException {\n    assert (curField.hasPositions) == (positions != null);\n    assert (curField.hasOffsets) == (offsets != null);\n\n    if (curField.hasPositions) {\n      final int posStart = curField.posStart + curField.totalPositions;\n      if (posStart + numProx > positionsBuf.length) {\n        positionsBuf = ArrayUtil.grow(positionsBuf, posStart + numProx);\n      }\n      int position = 0;\n      if (curField.hasPayloads) {\n        final int payStart = curField.payStart + curField.totalPositions;\n        if (payStart + numProx > payloadLengthsBuf.length) {\n          payloadLengthsBuf = ArrayUtil.grow(payloadLengthsBuf, payStart + numProx);\n        }\n        for (int i = 0; i < numProx; ++i) {\n          final int code = positions.readVInt();\n          if ((code & 1) != 0) {\n            // This position has a payload\n            final int payloadLength = positions.readVInt();\n            payloadLengthsBuf[payStart + i] = payloadLength;\n            payloadBytes.copyBytes(positions, payloadLength);\n          } else {\n            payloadLengthsBuf[payStart + i] = 0;\n          }\n          position += code >>> 1;\n          positionsBuf[posStart + i] = position;\n        }\n      } else {\n        for (int i = 0; i < numProx; ++i) {\n          position += (positions.readVInt() >>> 1);\n          positionsBuf[posStart + i] = position;\n        }\n      }\n    }\n\n    if (curField.hasOffsets) {\n      final int offStart = curField.offStart + curField.totalPositions;\n      if (offStart + numProx > startOffsetsBuf.length) {\n        final int newLength = ArrayUtil.oversize(offStart + numProx, 4);\n        startOffsetsBuf = ArrayUtil.growExact(startOffsetsBuf, newLength);\n        lengthsBuf = ArrayUtil.growExact(lengthsBuf, newLength);\n      }\n      int lastOffset = 0, startOffset, endOffset;\n      for (int i = 0; i < numProx; ++i) {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n        startOffsetsBuf[offStart + i] = startOffset;\n        lengthsBuf[offStart + i] = endOffset - startOffset;\n      }\n    }\n\n    curField.totalPositions += numProx;\n  }\n\n","sourceOld":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets)\n      throws IOException {\n    assert (curField.hasPositions) == (positions != null);\n    assert (curField.hasOffsets) == (offsets != null);\n\n    if (curField.hasPositions) {\n      final int posStart = curField.posStart + curField.totalPositions;\n      if (posStart + numProx > positionsBuf.length) {\n        positionsBuf = ArrayUtil.grow(positionsBuf, posStart + numProx);\n      }\n      int position = 0;\n      if (curField.hasPayloads) {\n        final int payStart = curField.payStart + curField.totalPositions;\n        if (payStart + numProx > payloadLengthsBuf.length) {\n          payloadLengthsBuf = ArrayUtil.grow(payloadLengthsBuf, payStart + numProx);\n        }\n        for (int i = 0; i < numProx; ++i) {\n          final int code = positions.readVInt();\n          if ((code & 1) != 0) {\n            // This position has a payload\n            final int payloadLength = positions.readVInt();\n            payloadLengthsBuf[payStart + i] = payloadLength;\n            payloadBytes.copyBytes(positions, payloadLength);\n          } else {\n            payloadLengthsBuf[payStart + i] = 0;\n          }\n          position += code >>> 1;\n          positionsBuf[posStart + i] = position;\n        }\n      } else {\n        for (int i = 0; i < numProx; ++i) {\n          position += (positions.readVInt() >>> 1);\n          positionsBuf[posStart + i] = position;\n        }\n      }\n    }\n\n    if (curField.hasOffsets) {\n      final int offStart = curField.offStart + curField.totalPositions;\n      if (offStart + numProx > startOffsetsBuf.length) {\n        final int newLength = ArrayUtil.oversize(offStart + numProx, 4);\n        startOffsetsBuf = Arrays.copyOf(startOffsetsBuf, newLength);\n        lengthsBuf = Arrays.copyOf(lengthsBuf, newLength);\n      }\n      int lastOffset = 0, startOffset, endOffset;\n      for (int i = 0; i < numProx; ++i) {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n        startOffsetsBuf[offStart + i] = startOffset;\n        lengthsBuf[offStart + i] = endOffset - startOffset;\n      }\n    }\n\n    curField.totalPositions += numProx;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets)\n      throws IOException {\n    assert (curField.hasPositions) == (positions != null);\n    assert (curField.hasOffsets) == (offsets != null);\n\n    if (curField.hasPositions) {\n      final int posStart = curField.posStart + curField.totalPositions;\n      if (posStart + numProx > positionsBuf.length) {\n        positionsBuf = ArrayUtil.grow(positionsBuf, posStart + numProx);\n      }\n      int position = 0;\n      if (curField.hasPayloads) {\n        final int payStart = curField.payStart + curField.totalPositions;\n        if (payStart + numProx > payloadLengthsBuf.length) {\n          payloadLengthsBuf = ArrayUtil.grow(payloadLengthsBuf, payStart + numProx);\n        }\n        for (int i = 0; i < numProx; ++i) {\n          final int code = positions.readVInt();\n          if ((code & 1) != 0) {\n            // This position has a payload\n            final int payloadLength = positions.readVInt();\n            payloadLengthsBuf[payStart + i] = payloadLength;\n            payloadBytes.copyBytes(positions, payloadLength);\n          } else {\n            payloadLengthsBuf[payStart + i] = 0;\n          }\n          position += code >>> 1;\n          positionsBuf[posStart + i] = position;\n        }\n      } else {\n        for (int i = 0; i < numProx; ++i) {\n          position += (positions.readVInt() >>> 1);\n          positionsBuf[posStart + i] = position;\n        }\n      }\n    }\n\n    if (curField.hasOffsets) {\n      final int offStart = curField.offStart + curField.totalPositions;\n      if (offStart + numProx > startOffsetsBuf.length) {\n        final int newLength = ArrayUtil.oversize(offStart + numProx, 4);\n        startOffsetsBuf = ArrayUtil.growExact(startOffsetsBuf, newLength);\n        lengthsBuf = ArrayUtil.growExact(lengthsBuf, newLength);\n      }\n      int lastOffset = 0, startOffset, endOffset;\n      for (int i = 0; i < numProx; ++i) {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n        startOffsetsBuf[offStart + i] = startOffset;\n        lengthsBuf[offStart + i] = endOffset - startOffset;\n      }\n    }\n\n    curField.totalPositions += numProx;\n  }\n\n","sourceOld":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets)\n      throws IOException {\n    assert (curField.hasPositions) == (positions != null);\n    assert (curField.hasOffsets) == (offsets != null);\n\n    if (curField.hasPositions) {\n      final int posStart = curField.posStart + curField.totalPositions;\n      if (posStart + numProx > positionsBuf.length) {\n        positionsBuf = ArrayUtil.grow(positionsBuf, posStart + numProx);\n      }\n      int position = 0;\n      if (curField.hasPayloads) {\n        final int payStart = curField.payStart + curField.totalPositions;\n        if (payStart + numProx > payloadLengthsBuf.length) {\n          payloadLengthsBuf = ArrayUtil.grow(payloadLengthsBuf, payStart + numProx);\n        }\n        for (int i = 0; i < numProx; ++i) {\n          final int code = positions.readVInt();\n          if ((code & 1) != 0) {\n            // This position has a payload\n            final int payloadLength = positions.readVInt();\n            payloadLengthsBuf[payStart + i] = payloadLength;\n            payloadBytes.copyBytes(positions, payloadLength);\n          } else {\n            payloadLengthsBuf[payStart + i] = 0;\n          }\n          position += code >>> 1;\n          positionsBuf[posStart + i] = position;\n        }\n      } else {\n        for (int i = 0; i < numProx; ++i) {\n          position += (positions.readVInt() >>> 1);\n          positionsBuf[posStart + i] = position;\n        }\n      }\n    }\n\n    if (curField.hasOffsets) {\n      final int offStart = curField.offStart + curField.totalPositions;\n      if (offStart + numProx > startOffsetsBuf.length) {\n        final int newLength = ArrayUtil.oversize(offStart + numProx, 4);\n        startOffsetsBuf = Arrays.copyOf(startOffsetsBuf, newLength);\n        lengthsBuf = Arrays.copyOf(lengthsBuf, newLength);\n      }\n      int lastOffset = 0, startOffset, endOffset;\n      for (int i = 0; i < numProx; ++i) {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n        startOffsetsBuf[offStart + i] = startOffset;\n        lengthsBuf[offStart + i] = endOffset - startOffset;\n      }\n    }\n\n    curField.totalPositions += numProx;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eda61b1e90b490cc5837200e04c02639a0d272c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["eda61b1e90b490cc5837200e04c02639a0d272c7","9798d0818e7a880546802b509792d3f3d57babd2"],"07155cdd910937cdf6877e48884d5782845c8b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eda61b1e90b490cc5837200e04c02639a0d272c7"],"9798d0818e7a880546802b509792d3f3d57babd2":["eda61b1e90b490cc5837200e04c02639a0d272c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["eda61b1e90b490cc5837200e04c02639a0d272c7","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"eda61b1e90b490cc5837200e04c02639a0d272c7":["b70042a8a492f7054d480ccdd2be9796510d4327","07155cdd910937cdf6877e48884d5782845c8b8b","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eda61b1e90b490cc5837200e04c02639a0d272c7","07155cdd910937cdf6877e48884d5782845c8b8b"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}