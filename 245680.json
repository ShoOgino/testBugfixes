{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testEqualityOnDuplicateFilterClauses().mjava","commits":[{"id":"4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969","date":1444679002,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testEqualityOnDuplicateFilterClauses().mjava","pathOld":"/dev/null","sourceNew":"  public void testEqualityOnDuplicateFilterClauses() {\n    BooleanQuery bq1 = new BooleanQuery.Builder()\n      .setDisableCoord(random().nextBoolean())\n      .setMinimumNumberShouldMatch(random().nextInt(2))\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n      .build();\n    BooleanQuery bq2 = new BooleanQuery.Builder()\n      .setDisableCoord(bq1.isCoordDisabled())\n      .setMinimumNumberShouldMatch(bq1.getMinimumNumberShouldMatch())\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n      .build();\n    QueryUtils.checkEqual(bq1, bq2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testEqualityOnDuplicateFilterClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testEqualityOnDuplicateFilterClauses().mjava","sourceNew":"  public void testEqualityOnDuplicateFilterClauses() {\n    BooleanQuery bq1 = new BooleanQuery.Builder()\n      .setMinimumNumberShouldMatch(random().nextInt(2))\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n      .build();\n    BooleanQuery bq2 = new BooleanQuery.Builder()\n      .setMinimumNumberShouldMatch(bq1.getMinimumNumberShouldMatch())\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n      .build();\n    QueryUtils.checkEqual(bq1, bq2);\n  }\n\n","sourceOld":"  public void testEqualityOnDuplicateFilterClauses() {\n    BooleanQuery bq1 = new BooleanQuery.Builder()\n      .setDisableCoord(random().nextBoolean())\n      .setMinimumNumberShouldMatch(random().nextInt(2))\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n      .build();\n    BooleanQuery bq2 = new BooleanQuery.Builder()\n      .setDisableCoord(bq1.isCoordDisabled())\n      .setMinimumNumberShouldMatch(bq1.getMinimumNumberShouldMatch())\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n      .build();\n    QueryUtils.checkEqual(bq1, bq2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testEqualityOnDuplicateFilterClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testEqualityOnDuplicateFilterClauses().mjava","sourceNew":"  public void testEqualityOnDuplicateFilterClauses() {\n    BooleanQuery bq1 = new BooleanQuery.Builder()\n      .setMinimumNumberShouldMatch(random().nextInt(2))\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n      .build();\n    BooleanQuery bq2 = new BooleanQuery.Builder()\n      .setMinimumNumberShouldMatch(bq1.getMinimumNumberShouldMatch())\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n      .build();\n    QueryUtils.checkEqual(bq1, bq2);\n  }\n\n","sourceOld":"  public void testEqualityOnDuplicateFilterClauses() {\n    BooleanQuery bq1 = new BooleanQuery.Builder()\n      .setDisableCoord(random().nextBoolean())\n      .setMinimumNumberShouldMatch(random().nextInt(2))\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n      .build();\n    BooleanQuery bq2 = new BooleanQuery.Builder()\n      .setDisableCoord(bq1.isCoordDisabled())\n      .setMinimumNumberShouldMatch(bq1.getMinimumNumberShouldMatch())\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n      .build();\n    QueryUtils.checkEqual(bq1, bq2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969"],"4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}