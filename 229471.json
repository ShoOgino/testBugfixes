{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#isInsidePolygon(GeoPoint,List[GeoPoint]).mjava","commits":[{"id":"40aa98241c87d86a0077beb8023713d93a0becfe","date":1459784560,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#isInsidePolygon(GeoPoint,List[GeoPoint]).mjava","pathOld":"/dev/null","sourceNew":"  /** For a specified point and a list of poly points, determine based on point order whether the\n   * point should be considered in or out of the polygon.\n   * @param point is the point to check.\n   * @param polyPoints is the list of points comprising the polygon.\n   * @return null if the point is illegal, otherwise false if the point is inside and true if the point is outside\n   * of the polygon.\n   */\n  protected static Boolean isInsidePolygon(final GeoPoint point, final List<GeoPoint> polyPoints) {\n    // First, compute sine and cosine of pole point latitude and longitude\n    final double norm = 1.0 / point.magnitude();\n    final double xyDenom = Math.sqrt(point.x * point.x + point.y * point.y);\n    final double sinLatitude = point.z * norm;\n    final double cosLatitude = xyDenom * norm;\n    final double sinLongitude;\n    final double cosLongitude;\n    if (Math.abs(xyDenom) < Vector.MINIMUM_RESOLUTION) {\n      sinLongitude = 0.0;\n      cosLongitude = 1.0;\n    } else {\n      final double xyNorm = 1.0 / xyDenom;\n      sinLongitude = point.y * xyNorm;\n      cosLongitude = point.x * xyNorm;\n    }\n    \n    // Now, compute the incremental arc distance around the points of the polygon\n    double arcDistance = 0.0;\n    Double prevAngle = null;\n    for (final GeoPoint polyPoint : polyPoints) {\n      final Double angle = computeAngle(polyPoint, sinLatitude, cosLatitude, sinLongitude, cosLongitude);\n      if (angle == null) {\n        return null;\n      }\n      //System.out.println(\"Computed angle: \"+angle);\n      if (prevAngle != null) {\n        // Figure out delta between prevAngle and current angle, and add it to arcDistance\n        double angleDelta = angle - prevAngle;\n        if (angleDelta < -Math.PI) {\n          angleDelta += Math.PI * 2.0;\n        }\n        if (angleDelta > Math.PI) {\n          angleDelta -= Math.PI * 2.0;\n        }\n        if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n          return null;\n        }\n        //System.out.println(\" angle delta = \"+angleDelta);\n        arcDistance += angleDelta;\n      }\n      prevAngle = angle;\n    }\n    if (prevAngle != null) {\n      final Double lastAngle = computeAngle(polyPoints.get(0), sinLatitude, cosLatitude, sinLongitude, cosLongitude);\n      if (lastAngle == null) {\n        return null;\n      }\n      //System.out.println(\"Computed last angle: \"+lastAngle);\n      // Figure out delta and add it\n      double angleDelta = lastAngle - prevAngle;\n      if (angleDelta < -Math.PI) {\n        angleDelta += Math.PI * 2.0;\n      }\n      if (angleDelta > Math.PI) {\n        angleDelta -= Math.PI * 2.0;\n      }\n      if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n        return null;\n      }\n      //System.out.println(\" angle delta = \"+angleDelta);\n      arcDistance += angleDelta;\n    }\n    // Clockwise == inside == negative\n    //System.out.println(\"Arcdistance = \"+arcDistance);\n    if (Math.abs(arcDistance) < Vector.MINIMUM_RESOLUTION) {\n      // No idea what direction, so try another pole.\n      return null;\n    }\n    return arcDistance > 0.0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d7b7a8973b4a2628b97962e152e513b0d3af02c8","098b5036c89446805f69a16e53f6d22f10ae5766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#isInsidePolygon(GeoPoint,List[GeoPoint]).mjava","pathOld":"/dev/null","sourceNew":"  /** For a specified point and a list of poly points, determine based on point order whether the\n   * point should be considered in or out of the polygon.\n   * @param point is the point to check.\n   * @param polyPoints is the list of points comprising the polygon.\n   * @return null if the point is illegal, otherwise false if the point is inside and true if the point is outside\n   * of the polygon.\n   */\n  protected static Boolean isInsidePolygon(final GeoPoint point, final List<GeoPoint> polyPoints) {\n    // First, compute sine and cosine of pole point latitude and longitude\n    final double norm = 1.0 / point.magnitude();\n    final double xyDenom = Math.sqrt(point.x * point.x + point.y * point.y);\n    final double sinLatitude = point.z * norm;\n    final double cosLatitude = xyDenom * norm;\n    final double sinLongitude;\n    final double cosLongitude;\n    if (Math.abs(xyDenom) < Vector.MINIMUM_RESOLUTION) {\n      sinLongitude = 0.0;\n      cosLongitude = 1.0;\n    } else {\n      final double xyNorm = 1.0 / xyDenom;\n      sinLongitude = point.y * xyNorm;\n      cosLongitude = point.x * xyNorm;\n    }\n    \n    // Now, compute the incremental arc distance around the points of the polygon\n    double arcDistance = 0.0;\n    Double prevAngle = null;\n    for (final GeoPoint polyPoint : polyPoints) {\n      final Double angle = computeAngle(polyPoint, sinLatitude, cosLatitude, sinLongitude, cosLongitude);\n      if (angle == null) {\n        return null;\n      }\n      //System.out.println(\"Computed angle: \"+angle);\n      if (prevAngle != null) {\n        // Figure out delta between prevAngle and current angle, and add it to arcDistance\n        double angleDelta = angle - prevAngle;\n        if (angleDelta < -Math.PI) {\n          angleDelta += Math.PI * 2.0;\n        }\n        if (angleDelta > Math.PI) {\n          angleDelta -= Math.PI * 2.0;\n        }\n        if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n          return null;\n        }\n        //System.out.println(\" angle delta = \"+angleDelta);\n        arcDistance += angleDelta;\n      }\n      prevAngle = angle;\n    }\n    if (prevAngle != null) {\n      final Double lastAngle = computeAngle(polyPoints.get(0), sinLatitude, cosLatitude, sinLongitude, cosLongitude);\n      if (lastAngle == null) {\n        return null;\n      }\n      //System.out.println(\"Computed last angle: \"+lastAngle);\n      // Figure out delta and add it\n      double angleDelta = lastAngle - prevAngle;\n      if (angleDelta < -Math.PI) {\n        angleDelta += Math.PI * 2.0;\n      }\n      if (angleDelta > Math.PI) {\n        angleDelta -= Math.PI * 2.0;\n      }\n      if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n        return null;\n      }\n      //System.out.println(\" angle delta = \"+angleDelta);\n      arcDistance += angleDelta;\n    }\n    // Clockwise == inside == negative\n    //System.out.println(\"Arcdistance = \"+arcDistance);\n    if (Math.abs(arcDistance) < Vector.MINIMUM_RESOLUTION) {\n      // No idea what direction, so try another pole.\n      return null;\n    }\n    return arcDistance > 0.0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5864f13b0b1ae08430bed46d2fcbc5f5c7005195","date":1460068279,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#isInsidePolygon(GeoPoint,List[GeoPoint]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#isInsidePolygon(GeoPoint,List[GeoPoint]).mjava","sourceNew":"  /** For a specified point and a list of poly points, determine based on point order whether the\n   * point should be considered in or out of the polygon.\n   * @param point is the point to check.\n   * @param polyPoints is the list of points comprising the polygon.\n   * @return null if the point is illegal, otherwise false if the point is inside and true if the point is outside\n   * of the polygon.\n   */\n  private static Boolean isInsidePolygon(final GeoPoint point, final List<GeoPoint> polyPoints) {\n    // First, compute sine and cosine of pole point latitude and longitude\n    final double norm = 1.0 / point.magnitude();\n    final double xyDenom = Math.sqrt(point.x * point.x + point.y * point.y);\n    final double sinLatitude = point.z * norm;\n    final double cosLatitude = xyDenom * norm;\n    final double sinLongitude;\n    final double cosLongitude;\n    if (Math.abs(xyDenom) < Vector.MINIMUM_RESOLUTION) {\n      sinLongitude = 0.0;\n      cosLongitude = 1.0;\n    } else {\n      final double xyNorm = 1.0 / xyDenom;\n      sinLongitude = point.y * xyNorm;\n      cosLongitude = point.x * xyNorm;\n    }\n    \n    // Now, compute the incremental arc distance around the points of the polygon\n    double arcDistance = 0.0;\n    Double prevAngle = null;\n    for (final GeoPoint polyPoint : polyPoints) {\n      final Double angle = computeAngle(polyPoint, sinLatitude, cosLatitude, sinLongitude, cosLongitude);\n      if (angle == null) {\n        return null;\n      }\n      //System.out.println(\"Computed angle: \"+angle);\n      if (prevAngle != null) {\n        // Figure out delta between prevAngle and current angle, and add it to arcDistance\n        double angleDelta = angle - prevAngle;\n        if (angleDelta < -Math.PI) {\n          angleDelta += Math.PI * 2.0;\n        }\n        if (angleDelta > Math.PI) {\n          angleDelta -= Math.PI * 2.0;\n        }\n        if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n          return null;\n        }\n        //System.out.println(\" angle delta = \"+angleDelta);\n        arcDistance += angleDelta;\n      }\n      prevAngle = angle;\n    }\n    if (prevAngle != null) {\n      final Double lastAngle = computeAngle(polyPoints.get(0), sinLatitude, cosLatitude, sinLongitude, cosLongitude);\n      if (lastAngle == null) {\n        return null;\n      }\n      //System.out.println(\"Computed last angle: \"+lastAngle);\n      // Figure out delta and add it\n      double angleDelta = lastAngle - prevAngle;\n      if (angleDelta < -Math.PI) {\n        angleDelta += Math.PI * 2.0;\n      }\n      if (angleDelta > Math.PI) {\n        angleDelta -= Math.PI * 2.0;\n      }\n      if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n        return null;\n      }\n      //System.out.println(\" angle delta = \"+angleDelta);\n      arcDistance += angleDelta;\n    }\n    // Clockwise == inside == negative\n    //System.out.println(\"Arcdistance = \"+arcDistance);\n    if (Math.abs(arcDistance) < Vector.MINIMUM_RESOLUTION) {\n      // No idea what direction, so try another pole.\n      return null;\n    }\n    return arcDistance > 0.0;\n  }\n\n","sourceOld":"  /** For a specified point and a list of poly points, determine based on point order whether the\n   * point should be considered in or out of the polygon.\n   * @param point is the point to check.\n   * @param polyPoints is the list of points comprising the polygon.\n   * @return null if the point is illegal, otherwise false if the point is inside and true if the point is outside\n   * of the polygon.\n   */\n  protected static Boolean isInsidePolygon(final GeoPoint point, final List<GeoPoint> polyPoints) {\n    // First, compute sine and cosine of pole point latitude and longitude\n    final double norm = 1.0 / point.magnitude();\n    final double xyDenom = Math.sqrt(point.x * point.x + point.y * point.y);\n    final double sinLatitude = point.z * norm;\n    final double cosLatitude = xyDenom * norm;\n    final double sinLongitude;\n    final double cosLongitude;\n    if (Math.abs(xyDenom) < Vector.MINIMUM_RESOLUTION) {\n      sinLongitude = 0.0;\n      cosLongitude = 1.0;\n    } else {\n      final double xyNorm = 1.0 / xyDenom;\n      sinLongitude = point.y * xyNorm;\n      cosLongitude = point.x * xyNorm;\n    }\n    \n    // Now, compute the incremental arc distance around the points of the polygon\n    double arcDistance = 0.0;\n    Double prevAngle = null;\n    for (final GeoPoint polyPoint : polyPoints) {\n      final Double angle = computeAngle(polyPoint, sinLatitude, cosLatitude, sinLongitude, cosLongitude);\n      if (angle == null) {\n        return null;\n      }\n      //System.out.println(\"Computed angle: \"+angle);\n      if (prevAngle != null) {\n        // Figure out delta between prevAngle and current angle, and add it to arcDistance\n        double angleDelta = angle - prevAngle;\n        if (angleDelta < -Math.PI) {\n          angleDelta += Math.PI * 2.0;\n        }\n        if (angleDelta > Math.PI) {\n          angleDelta -= Math.PI * 2.0;\n        }\n        if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n          return null;\n        }\n        //System.out.println(\" angle delta = \"+angleDelta);\n        arcDistance += angleDelta;\n      }\n      prevAngle = angle;\n    }\n    if (prevAngle != null) {\n      final Double lastAngle = computeAngle(polyPoints.get(0), sinLatitude, cosLatitude, sinLongitude, cosLongitude);\n      if (lastAngle == null) {\n        return null;\n      }\n      //System.out.println(\"Computed last angle: \"+lastAngle);\n      // Figure out delta and add it\n      double angleDelta = lastAngle - prevAngle;\n      if (angleDelta < -Math.PI) {\n        angleDelta += Math.PI * 2.0;\n      }\n      if (angleDelta > Math.PI) {\n        angleDelta -= Math.PI * 2.0;\n      }\n      if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n        return null;\n      }\n      //System.out.println(\" angle delta = \"+angleDelta);\n      arcDistance += angleDelta;\n    }\n    // Clockwise == inside == negative\n    //System.out.println(\"Arcdistance = \"+arcDistance);\n    if (Math.abs(arcDistance) < Vector.MINIMUM_RESOLUTION) {\n      // No idea what direction, so try another pole.\n      return null;\n    }\n    return arcDistance > 0.0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7b7a8973b4a2628b97962e152e513b0d3af02c8","date":1460145192,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#isInsidePolygon(GeoPoint,List[GeoPoint]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#isInsidePolygon(GeoPoint,List[GeoPoint]).mjava","sourceNew":"  /** For a specified point and a list of poly points, determine based on point order whether the\n   * point should be considered in or out of the polygon.\n   * @param point is the point to check.\n   * @param polyPoints is the list of points comprising the polygon.\n   * @return null if the point is illegal, otherwise false if the point is inside and true if the point is outside\n   * of the polygon.\n   */\n  private static Boolean isInsidePolygon(final GeoPoint point, final List<GeoPoint> polyPoints) {\n    // First, compute sine and cosine of pole point latitude and longitude\n    final double latitude = point.getLatitude();\n    final double longitude = point.getLongitude();\n    final double sinLatitude = Math.sin(latitude);\n    final double cosLatitude = Math.cos(latitude);\n    final double sinLongitude = Math.sin(longitude);\n    final double cosLongitude = Math.cos(longitude);\n    \n    // Now, compute the incremental arc distance around the points of the polygon\n    double arcDistance = 0.0;\n    Double prevAngle = null;\n    //System.out.println(\"Computing angles:\");\n    for (final GeoPoint polyPoint : polyPoints) {\n      final Double angle = computeAngle(polyPoint, sinLatitude, cosLatitude, sinLongitude, cosLongitude);\n      if (angle == null) {\n        return null;\n      }\n      //System.out.println(\"Computed angle: \"+angle);\n      if (prevAngle != null) {\n        // Figure out delta between prevAngle and current angle, and add it to arcDistance\n        double angleDelta = angle - prevAngle;\n        if (angleDelta < -Math.PI) {\n          angleDelta += Math.PI * 2.0;\n        }\n        if (angleDelta > Math.PI) {\n          angleDelta -= Math.PI * 2.0;\n        }\n        if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n          return null;\n        }\n        //System.out.println(\" angle delta = \"+angleDelta);\n        arcDistance += angleDelta;\n        //System.out.println(\" For point \"+polyPoint+\" angle is \"+angle+\"; delta is \"+angleDelta+\"; arcDistance is \"+arcDistance);\n      }\n      prevAngle = angle;\n    }\n    if (prevAngle != null) {\n      final Double lastAngle = computeAngle(polyPoints.get(0), sinLatitude, cosLatitude, sinLongitude, cosLongitude);\n      if (lastAngle == null) {\n        return null;\n      }\n      //System.out.println(\"Computed last angle: \"+lastAngle);\n      // Figure out delta and add it\n      double angleDelta = lastAngle - prevAngle;\n      if (angleDelta < -Math.PI) {\n        angleDelta += Math.PI * 2.0;\n      }\n      if (angleDelta > Math.PI) {\n        angleDelta -= Math.PI * 2.0;\n      }\n      if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n        return null;\n      }\n      //System.out.println(\" angle delta = \"+angleDelta);\n      arcDistance += angleDelta;\n      //System.out.println(\" For point \"+polyPoints.get(0)+\" angle is \"+lastAngle+\"; delta is \"+angleDelta+\"; arcDistance is \"+arcDistance);\n    }\n\n    // Clockwise == inside == negative\n    //System.out.println(\"Arcdistance = \"+arcDistance);\n    if (Math.abs(arcDistance) < Vector.MINIMUM_RESOLUTION) {\n      // No idea what direction, so try another pole.\n      return null;\n    }\n    return arcDistance > 0.0;\n  }\n\n","sourceOld":"  /** For a specified point and a list of poly points, determine based on point order whether the\n   * point should be considered in or out of the polygon.\n   * @param point is the point to check.\n   * @param polyPoints is the list of points comprising the polygon.\n   * @return null if the point is illegal, otherwise false if the point is inside and true if the point is outside\n   * of the polygon.\n   */\n  private static Boolean isInsidePolygon(final GeoPoint point, final List<GeoPoint> polyPoints) {\n    // First, compute sine and cosine of pole point latitude and longitude\n    final double norm = 1.0 / point.magnitude();\n    final double xyDenom = Math.sqrt(point.x * point.x + point.y * point.y);\n    final double sinLatitude = point.z * norm;\n    final double cosLatitude = xyDenom * norm;\n    final double sinLongitude;\n    final double cosLongitude;\n    if (Math.abs(xyDenom) < Vector.MINIMUM_RESOLUTION) {\n      sinLongitude = 0.0;\n      cosLongitude = 1.0;\n    } else {\n      final double xyNorm = 1.0 / xyDenom;\n      sinLongitude = point.y * xyNorm;\n      cosLongitude = point.x * xyNorm;\n    }\n    \n    // Now, compute the incremental arc distance around the points of the polygon\n    double arcDistance = 0.0;\n    Double prevAngle = null;\n    for (final GeoPoint polyPoint : polyPoints) {\n      final Double angle = computeAngle(polyPoint, sinLatitude, cosLatitude, sinLongitude, cosLongitude);\n      if (angle == null) {\n        return null;\n      }\n      //System.out.println(\"Computed angle: \"+angle);\n      if (prevAngle != null) {\n        // Figure out delta between prevAngle and current angle, and add it to arcDistance\n        double angleDelta = angle - prevAngle;\n        if (angleDelta < -Math.PI) {\n          angleDelta += Math.PI * 2.0;\n        }\n        if (angleDelta > Math.PI) {\n          angleDelta -= Math.PI * 2.0;\n        }\n        if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n          return null;\n        }\n        //System.out.println(\" angle delta = \"+angleDelta);\n        arcDistance += angleDelta;\n      }\n      prevAngle = angle;\n    }\n    if (prevAngle != null) {\n      final Double lastAngle = computeAngle(polyPoints.get(0), sinLatitude, cosLatitude, sinLongitude, cosLongitude);\n      if (lastAngle == null) {\n        return null;\n      }\n      //System.out.println(\"Computed last angle: \"+lastAngle);\n      // Figure out delta and add it\n      double angleDelta = lastAngle - prevAngle;\n      if (angleDelta < -Math.PI) {\n        angleDelta += Math.PI * 2.0;\n      }\n      if (angleDelta > Math.PI) {\n        angleDelta -= Math.PI * 2.0;\n      }\n      if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n        return null;\n      }\n      //System.out.println(\" angle delta = \"+angleDelta);\n      arcDistance += angleDelta;\n    }\n    // Clockwise == inside == negative\n    //System.out.println(\"Arcdistance = \"+arcDistance);\n    if (Math.abs(arcDistance) < Vector.MINIMUM_RESOLUTION) {\n      // No idea what direction, so try another pole.\n      return null;\n    }\n    return arcDistance > 0.0;\n  }\n\n","bugFix":["40aa98241c87d86a0077beb8023713d93a0becfe"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"098b5036c89446805f69a16e53f6d22f10ae5766","date":1482885715,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#isInsidePolygon(GeoPoint,List[GeoPoint]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#isInsidePolygon(GeoPoint,List[GeoPoint]).mjava","sourceNew":"  /** For a specified point and a list of poly points, determine based on point order whether the\n   * point should be considered in or out of the polygon.\n   * @param point is the point to check.\n   * @param polyPoints is the list of points comprising the polygon.\n   * @return null if the point is illegal, otherwise false if the point is inside and true if the point is outside\n   * of the polygon.\n   */\n  private static Boolean isInsidePolygon(final GeoPoint point, final List<GeoPoint> polyPoints) {\n    // First, compute sine and cosine of pole point latitude and longitude\n    final double latitude = point.getLatitude();\n    final double longitude = point.getLongitude();\n    final double sinLatitude = Math.sin(latitude);\n    final double cosLatitude = Math.cos(latitude);\n    final double sinLongitude = Math.sin(longitude);\n    final double cosLongitude = Math.cos(longitude);\n    \n    // Now, compute the incremental arc distance around the points of the polygon\n    double arcDistance = 0.0;\n    Double prevAngle = null;\n    //System.out.println(\"Computing angles:\");\n    for (final GeoPoint polyPoint : polyPoints) {\n      final Double angle = computeAngle(polyPoint, sinLatitude, cosLatitude, sinLongitude, cosLongitude);\n      if (angle == null) {\n        return null;\n      }\n      //System.out.println(\"Computed angle: \"+angle);\n      if (prevAngle != null) {\n        // Figure out delta between prevAngle and current angle, and add it to arcDistance\n        double angleDelta = angle - prevAngle;\n        if (angleDelta < -Math.PI) {\n          angleDelta += Math.PI * 2.0;\n        }\n        if (angleDelta > Math.PI) {\n          angleDelta -= Math.PI * 2.0;\n        }\n        if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n          return null;\n        }\n        //System.out.println(\" angle delta = \"+angleDelta);\n        arcDistance += angleDelta;\n        //System.out.println(\" For point \"+polyPoint+\" angle is \"+angle+\"; delta is \"+angleDelta+\"; arcDistance is \"+arcDistance);\n      }\n      prevAngle = angle;\n    }\n    if (prevAngle != null) {\n      final Double lastAngle = computeAngle(polyPoints.get(0), sinLatitude, cosLatitude, sinLongitude, cosLongitude);\n      if (lastAngle == null) {\n        return null;\n      }\n      //System.out.println(\"Computed last angle: \"+lastAngle);\n      // Figure out delta and add it\n      double angleDelta = lastAngle - prevAngle;\n      if (angleDelta < -Math.PI) {\n        angleDelta += Math.PI * 2.0;\n      }\n      if (angleDelta > Math.PI) {\n        angleDelta -= Math.PI * 2.0;\n      }\n      if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return null;\n      }\n      //System.out.println(\" angle delta = \"+angleDelta);\n      arcDistance += angleDelta;\n      //System.out.println(\" For point \"+polyPoints.get(0)+\" angle is \"+lastAngle+\"; delta is \"+angleDelta+\"; arcDistance is \"+arcDistance);\n    }\n\n    // Clockwise == inside == negative\n    //System.out.println(\"Arcdistance = \"+arcDistance);\n    if (Math.abs(arcDistance) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      // No idea what direction, so try another pole.\n      return null;\n    }\n    return arcDistance > 0.0;\n  }\n\n","sourceOld":"  /** For a specified point and a list of poly points, determine based on point order whether the\n   * point should be considered in or out of the polygon.\n   * @param point is the point to check.\n   * @param polyPoints is the list of points comprising the polygon.\n   * @return null if the point is illegal, otherwise false if the point is inside and true if the point is outside\n   * of the polygon.\n   */\n  private static Boolean isInsidePolygon(final GeoPoint point, final List<GeoPoint> polyPoints) {\n    // First, compute sine and cosine of pole point latitude and longitude\n    final double latitude = point.getLatitude();\n    final double longitude = point.getLongitude();\n    final double sinLatitude = Math.sin(latitude);\n    final double cosLatitude = Math.cos(latitude);\n    final double sinLongitude = Math.sin(longitude);\n    final double cosLongitude = Math.cos(longitude);\n    \n    // Now, compute the incremental arc distance around the points of the polygon\n    double arcDistance = 0.0;\n    Double prevAngle = null;\n    //System.out.println(\"Computing angles:\");\n    for (final GeoPoint polyPoint : polyPoints) {\n      final Double angle = computeAngle(polyPoint, sinLatitude, cosLatitude, sinLongitude, cosLongitude);\n      if (angle == null) {\n        return null;\n      }\n      //System.out.println(\"Computed angle: \"+angle);\n      if (prevAngle != null) {\n        // Figure out delta between prevAngle and current angle, and add it to arcDistance\n        double angleDelta = angle - prevAngle;\n        if (angleDelta < -Math.PI) {\n          angleDelta += Math.PI * 2.0;\n        }\n        if (angleDelta > Math.PI) {\n          angleDelta -= Math.PI * 2.0;\n        }\n        if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n          return null;\n        }\n        //System.out.println(\" angle delta = \"+angleDelta);\n        arcDistance += angleDelta;\n        //System.out.println(\" For point \"+polyPoint+\" angle is \"+angle+\"; delta is \"+angleDelta+\"; arcDistance is \"+arcDistance);\n      }\n      prevAngle = angle;\n    }\n    if (prevAngle != null) {\n      final Double lastAngle = computeAngle(polyPoints.get(0), sinLatitude, cosLatitude, sinLongitude, cosLongitude);\n      if (lastAngle == null) {\n        return null;\n      }\n      //System.out.println(\"Computed last angle: \"+lastAngle);\n      // Figure out delta and add it\n      double angleDelta = lastAngle - prevAngle;\n      if (angleDelta < -Math.PI) {\n        angleDelta += Math.PI * 2.0;\n      }\n      if (angleDelta > Math.PI) {\n        angleDelta -= Math.PI * 2.0;\n      }\n      if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n        return null;\n      }\n      //System.out.println(\" angle delta = \"+angleDelta);\n      arcDistance += angleDelta;\n      //System.out.println(\" For point \"+polyPoints.get(0)+\" angle is \"+lastAngle+\"; delta is \"+angleDelta+\"; arcDistance is \"+arcDistance);\n    }\n\n    // Clockwise == inside == negative\n    //System.out.println(\"Arcdistance = \"+arcDistance);\n    if (Math.abs(arcDistance) < Vector.MINIMUM_RESOLUTION) {\n      // No idea what direction, so try another pole.\n      return null;\n    }\n    return arcDistance > 0.0;\n  }\n\n","bugFix":["40aa98241c87d86a0077beb8023713d93a0becfe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#isInsidePolygon(GeoPoint,List[GeoPoint]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#isInsidePolygon(GeoPoint,List[GeoPoint]).mjava","sourceNew":"  /** For a specified point and a list of poly points, determine based on point order whether the\n   * point should be considered in or out of the polygon.\n   * @param point is the point to check.\n   * @param polyPoints is the list of points comprising the polygon.\n   * @return null if the point is illegal, otherwise false if the point is inside and true if the point is outside\n   * of the polygon.\n   */\n  private static Boolean isInsidePolygon(final GeoPoint point, final List<GeoPoint> polyPoints) {\n    // First, compute sine and cosine of pole point latitude and longitude\n    final double latitude = point.getLatitude();\n    final double longitude = point.getLongitude();\n    final double sinLatitude = Math.sin(latitude);\n    final double cosLatitude = Math.cos(latitude);\n    final double sinLongitude = Math.sin(longitude);\n    final double cosLongitude = Math.cos(longitude);\n    \n    // Now, compute the incremental arc distance around the points of the polygon\n    double arcDistance = 0.0;\n    Double prevAngle = null;\n    //System.out.println(\"Computing angles:\");\n    for (final GeoPoint polyPoint : polyPoints) {\n      final Double angle = computeAngle(polyPoint, sinLatitude, cosLatitude, sinLongitude, cosLongitude);\n      if (angle == null) {\n        return null;\n      }\n      //System.out.println(\"Computed angle: \"+angle);\n      if (prevAngle != null) {\n        // Figure out delta between prevAngle and current angle, and add it to arcDistance\n        double angleDelta = angle - prevAngle;\n        if (angleDelta < -Math.PI) {\n          angleDelta += Math.PI * 2.0;\n        }\n        if (angleDelta > Math.PI) {\n          angleDelta -= Math.PI * 2.0;\n        }\n        if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n          return null;\n        }\n        //System.out.println(\" angle delta = \"+angleDelta);\n        arcDistance += angleDelta;\n        //System.out.println(\" For point \"+polyPoint+\" angle is \"+angle+\"; delta is \"+angleDelta+\"; arcDistance is \"+arcDistance);\n      }\n      prevAngle = angle;\n    }\n    if (prevAngle != null) {\n      final Double lastAngle = computeAngle(polyPoints.get(0), sinLatitude, cosLatitude, sinLongitude, cosLongitude);\n      if (lastAngle == null) {\n        return null;\n      }\n      //System.out.println(\"Computed last angle: \"+lastAngle);\n      // Figure out delta and add it\n      double angleDelta = lastAngle - prevAngle;\n      if (angleDelta < -Math.PI) {\n        angleDelta += Math.PI * 2.0;\n      }\n      if (angleDelta > Math.PI) {\n        angleDelta -= Math.PI * 2.0;\n      }\n      if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return null;\n      }\n      //System.out.println(\" angle delta = \"+angleDelta);\n      arcDistance += angleDelta;\n      //System.out.println(\" For point \"+polyPoints.get(0)+\" angle is \"+lastAngle+\"; delta is \"+angleDelta+\"; arcDistance is \"+arcDistance);\n    }\n\n    // Clockwise == inside == negative\n    //System.out.println(\"Arcdistance = \"+arcDistance);\n    if (Math.abs(arcDistance) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      // No idea what direction, so try another pole.\n      return null;\n    }\n    return arcDistance > 0.0;\n  }\n\n","sourceOld":"  /** For a specified point and a list of poly points, determine based on point order whether the\n   * point should be considered in or out of the polygon.\n   * @param point is the point to check.\n   * @param polyPoints is the list of points comprising the polygon.\n   * @return null if the point is illegal, otherwise false if the point is inside and true if the point is outside\n   * of the polygon.\n   */\n  private static Boolean isInsidePolygon(final GeoPoint point, final List<GeoPoint> polyPoints) {\n    // First, compute sine and cosine of pole point latitude and longitude\n    final double latitude = point.getLatitude();\n    final double longitude = point.getLongitude();\n    final double sinLatitude = Math.sin(latitude);\n    final double cosLatitude = Math.cos(latitude);\n    final double sinLongitude = Math.sin(longitude);\n    final double cosLongitude = Math.cos(longitude);\n    \n    // Now, compute the incremental arc distance around the points of the polygon\n    double arcDistance = 0.0;\n    Double prevAngle = null;\n    //System.out.println(\"Computing angles:\");\n    for (final GeoPoint polyPoint : polyPoints) {\n      final Double angle = computeAngle(polyPoint, sinLatitude, cosLatitude, sinLongitude, cosLongitude);\n      if (angle == null) {\n        return null;\n      }\n      //System.out.println(\"Computed angle: \"+angle);\n      if (prevAngle != null) {\n        // Figure out delta between prevAngle and current angle, and add it to arcDistance\n        double angleDelta = angle - prevAngle;\n        if (angleDelta < -Math.PI) {\n          angleDelta += Math.PI * 2.0;\n        }\n        if (angleDelta > Math.PI) {\n          angleDelta -= Math.PI * 2.0;\n        }\n        if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n          return null;\n        }\n        //System.out.println(\" angle delta = \"+angleDelta);\n        arcDistance += angleDelta;\n        //System.out.println(\" For point \"+polyPoint+\" angle is \"+angle+\"; delta is \"+angleDelta+\"; arcDistance is \"+arcDistance);\n      }\n      prevAngle = angle;\n    }\n    if (prevAngle != null) {\n      final Double lastAngle = computeAngle(polyPoints.get(0), sinLatitude, cosLatitude, sinLongitude, cosLongitude);\n      if (lastAngle == null) {\n        return null;\n      }\n      //System.out.println(\"Computed last angle: \"+lastAngle);\n      // Figure out delta and add it\n      double angleDelta = lastAngle - prevAngle;\n      if (angleDelta < -Math.PI) {\n        angleDelta += Math.PI * 2.0;\n      }\n      if (angleDelta > Math.PI) {\n        angleDelta -= Math.PI * 2.0;\n      }\n      if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n        return null;\n      }\n      //System.out.println(\" angle delta = \"+angleDelta);\n      arcDistance += angleDelta;\n      //System.out.println(\" For point \"+polyPoints.get(0)+\" angle is \"+lastAngle+\"; delta is \"+angleDelta+\"; arcDistance is \"+arcDistance);\n    }\n\n    // Clockwise == inside == negative\n    //System.out.println(\"Arcdistance = \"+arcDistance);\n    if (Math.abs(arcDistance) < Vector.MINIMUM_RESOLUTION) {\n      // No idea what direction, so try another pole.\n      return null;\n    }\n    return arcDistance > 0.0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5864f13b0b1ae08430bed46d2fcbc5f5c7005195":["40aa98241c87d86a0077beb8023713d93a0becfe"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","40aa98241c87d86a0077beb8023713d93a0becfe"],"d7b7a8973b4a2628b97962e152e513b0d3af02c8":["5864f13b0b1ae08430bed46d2fcbc5f5c7005195"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"098b5036c89446805f69a16e53f6d22f10ae5766":["d7b7a8973b4a2628b97962e152e513b0d3af02c8"],"40aa98241c87d86a0077beb8023713d93a0becfe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["098b5036c89446805f69a16e53f6d22f10ae5766"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["d7b7a8973b4a2628b97962e152e513b0d3af02c8","098b5036c89446805f69a16e53f6d22f10ae5766"]},"commit2Childs":{"5864f13b0b1ae08430bed46d2fcbc5f5c7005195":["d7b7a8973b4a2628b97962e152e513b0d3af02c8"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"d7b7a8973b4a2628b97962e152e513b0d3af02c8":["098b5036c89446805f69a16e53f6d22f10ae5766","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09af2c9610ce53a4b25fd99344299b40318a4a1a","40aa98241c87d86a0077beb8023713d93a0becfe"],"098b5036c89446805f69a16e53f6d22f10ae5766":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"40aa98241c87d86a0077beb8023713d93a0becfe":["5864f13b0b1ae08430bed46d2fcbc5f5c7005195","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}