{"path":"lucene/core/src/test/org/apache/lucene/index/Test2BDocValues#testNumerics().mjava","commits":[{"id":"94654d096bbdfae1ffdc35a51fa505a53750938d","date":1359468043,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BDocValues#testNumerics().mjava","pathOld":"/dev/null","sourceNew":"  // indexes Integer.MAX_VALUE docs with an increasing dv field\n  public void testNumerics() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BNumerics\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    Document doc = new Document();\n    NumericDocValuesField dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(dvField);\n    \n    for (int i = 0; i < Integer.MAX_VALUE; i++) {\n      dvField.setLongValue(i);\n      w.addDocument(doc);\n      if (i % 100000 == 0) {\n        System.out.println(\"indexed: \" + i);\n        System.out.flush();\n      }\n    }\n    \n    w.forceMerge(1);\n    w.close();\n    \n    System.out.println(\"verifying...\");\n    System.out.flush();\n    \n    DirectoryReader r = DirectoryReader.open(dir);\n    long expectedValue = 0;\n    for (AtomicReaderContext context : r.leaves()) {\n      AtomicReader reader = context.reader();\n      NumericDocValues dv = reader.getNumericDocValues(\"dv\");\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        assertEquals(expectedValue, dv.get(i));\n        expectedValue++;\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["656cfb06eff2244ff5a25ffb3ed3a79942ece85c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60fc78d9a827f6a8c5102f6509dd224f19ca23b4","date":1359479140,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BNumericDocValues#testNumerics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BDocValues#testNumerics().mjava","sourceNew":"  // indexes Integer.MAX_VALUE docs with an increasing dv field\n  public void testNumerics() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BNumerics\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    Document doc = new Document();\n    NumericDocValuesField dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(dvField);\n    \n    for (int i = 0; i < Integer.MAX_VALUE; i++) {\n      dvField.setLongValue(i);\n      w.addDocument(doc);\n      if (i % 100000 == 0) {\n        System.out.println(\"indexed: \" + i);\n        System.out.flush();\n      }\n    }\n    \n    w.forceMerge(1);\n    w.close();\n    \n    System.out.println(\"verifying...\");\n    System.out.flush();\n    \n    DirectoryReader r = DirectoryReader.open(dir);\n    long expectedValue = 0;\n    for (AtomicReaderContext context : r.leaves()) {\n      AtomicReader reader = context.reader();\n      NumericDocValues dv = reader.getNumericDocValues(\"dv\");\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        assertEquals(expectedValue, dv.get(i));\n        expectedValue++;\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // indexes Integer.MAX_VALUE docs with an increasing dv field\n  public void testNumerics() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BNumerics\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    Document doc = new Document();\n    NumericDocValuesField dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(dvField);\n    \n    for (int i = 0; i < Integer.MAX_VALUE; i++) {\n      dvField.setLongValue(i);\n      w.addDocument(doc);\n      if (i % 100000 == 0) {\n        System.out.println(\"indexed: \" + i);\n        System.out.flush();\n      }\n    }\n    \n    w.forceMerge(1);\n    w.close();\n    \n    System.out.println(\"verifying...\");\n    System.out.flush();\n    \n    DirectoryReader r = DirectoryReader.open(dir);\n    long expectedValue = 0;\n    for (AtomicReaderContext context : r.leaves()) {\n      AtomicReader reader = context.reader();\n      NumericDocValues dv = reader.getNumericDocValues(\"dv\");\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        assertEquals(expectedValue, dv.get(i));\n        expectedValue++;\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"94654d096bbdfae1ffdc35a51fa505a53750938d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60fc78d9a827f6a8c5102f6509dd224f19ca23b4":["94654d096bbdfae1ffdc35a51fa505a53750938d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"94654d096bbdfae1ffdc35a51fa505a53750938d":["60fc78d9a827f6a8c5102f6509dd224f19ca23b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["94654d096bbdfae1ffdc35a51fa505a53750938d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"60fc78d9a827f6a8c5102f6509dd224f19ca23b4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["60fc78d9a827f6a8c5102f6509dd224f19ca23b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}