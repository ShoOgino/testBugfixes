{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#getPayload().mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#getPayload().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#getPayload().mjava","sourceNew":"    /** Returns the payload at this position, or null if no\n     *  payload was indexed. */\n    @Override\n    public BytesRef getPayload() throws IOException {\n      assert lazyProxPointer == -1;\n      assert posPendingCount < freq;\n      if (!payloadPending) {\n        throw new IOException(\"Either no payload exists at this term position or an attempt was made to load it more than once.\");\n      }\n      if (payloadLength > payload.bytes.length) {\n        payload.grow(payloadLength);\n      }\n\n      proxIn.readBytes(payload.bytes, 0, payloadLength);\n      payload.length = payloadLength;\n      payloadPending = false;\n\n      return payload;\n    }\n\n","sourceOld":"    /** Returns the payload at this position, or null if no\n     *  payload was indexed. */\n    @Override\n    public BytesRef getPayload() throws IOException {\n      assert lazyProxPointer == -1;\n      assert posPendingCount < freq;\n      if (!payloadPending) {\n        throw new IOException(\"Either no payload exists at this term position or an attempt was made to load it more than once.\");\n      }\n      if (payloadLength > payload.bytes.length) {\n        payload.grow(payloadLength);\n      }\n\n      proxIn.readBytes(payload.bytes, 0, payloadLength);\n      payload.length = payloadLength;\n      payloadPending = false;\n\n      return payload;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#getPayload().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#getPayload().mjava","sourceNew":"    /** Returns the payload at this position, or null if no\n     *  payload was indexed. */\n    @Override\n    public BytesRef getPayload() throws IOException {\n      assert lazyProxPointer == -1;\n      assert posPendingCount < freq;\n      if (!payloadPending) {\n        throw new IOException(\"Either no payload exists at this term position or an attempt was made to load it more than once.\");\n      }\n      if (payloadLength > payload.bytes.length) {\n        payload.grow(payloadLength);\n      }\n\n      proxIn.readBytes(payload.bytes, 0, payloadLength);\n      payload.length = payloadLength;\n      payloadPending = false;\n\n      return payload;\n    }\n\n","sourceOld":"    /** Returns the payload at this position, or null if no\n     *  payload was indexed. */\n    @Override\n    public BytesRef getPayload() throws IOException {\n      assert lazyProxPointer == -1;\n      assert posPendingCount < freq;\n      if (!payloadPending) {\n        throw new IOException(\"Either no payload exists at this term position or an attempt was made to load it more than once.\");\n      }\n      if (payloadLength > payload.bytes.length) {\n        payload.grow(payloadLength);\n      }\n\n      proxIn.readBytes(payload.bytes, 0, payloadLength);\n      payload.length = payloadLength;\n      payloadPending = false;\n\n      return payload;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}