{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#Preference(Map[String,Object],int).mjava","commits":[{"id":"954590f07cfbe2c3ccb86e29d0742c43740ca509","date":1500371516,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#Preference(Map[String,Object],int).mjava","pathOld":"/dev/null","sourceNew":"  public Preference(Map<String, Object> m, int idx) {\n    this.idx = idx;\n    this.original = Utils.getDeepCopy(m,3);\n    sort = Policy.Sort.get(m);\n    name = Policy.SortParam.get(m.get(sort.name()).toString());\n    Object p = m.getOrDefault(\"precision\", 0);\n    precision = p instanceof Number ? ((Number) p).intValue() : Integer.parseInt(p.toString());\n    if (precision < 0) {\n      throw new RuntimeException(\"precision must be a positive value \");\n    }\n    if(precision< name.min || precision> name.max){\n      throw new RuntimeException(StrUtils.formatString(\"invalid precision value {0} , must lie between {1} and {2}\",\n          precision, name.min, name.max ) );\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#Preference(Map[String,Object],int).mjava","pathOld":"/dev/null","sourceNew":"  public Preference(Map<String, Object> m, int idx) {\n    this.idx = idx;\n    this.original = Utils.getDeepCopy(m,3);\n    sort = Policy.Sort.get(m);\n    name = Policy.SortParam.get(m.get(sort.name()).toString());\n    Object p = m.getOrDefault(\"precision\", 0);\n    precision = p instanceof Number ? ((Number) p).intValue() : Integer.parseInt(p.toString());\n    if (precision < 0) {\n      throw new RuntimeException(\"precision must be a positive value \");\n    }\n    if(precision< name.min || precision> name.max){\n      throw new RuntimeException(StrUtils.formatString(\"invalid precision value {0} , must lie between {1} and {2}\",\n          precision, name.min, name.max ) );\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#Preference(Map[String,Object],int).mjava","pathOld":"/dev/null","sourceNew":"  public Preference(Map<String, Object> m, int idx) {\n    this.idx = idx;\n    this.original = Utils.getDeepCopy(m,3);\n    sort = Policy.Sort.get(m);\n    name = Policy.SortParam.get(m.get(sort.name()).toString());\n    Object p = m.getOrDefault(\"precision\", 0);\n    precision = p instanceof Number ? ((Number) p).intValue() : Integer.parseInt(p.toString());\n    if (precision < 0) {\n      throw new RuntimeException(\"precision must be a positive value \");\n    }\n    if(precision< name.min || precision> name.max){\n      throw new RuntimeException(StrUtils.formatString(\"invalid precision value {0} , must lie between {1} and {2}\",\n          precision, name.min, name.max ) );\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#Preference(Map[String,Object],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#Preference(Map[String,Object],int).mjava","sourceNew":"  public Preference(Map<String, Object> m, int idx) {\n    this.idx = idx;\n    this.original = Utils.getDeepCopy(m, 3);\n    sort = Policy.Sort.get(m);\n    name = Policy.SortParam.get(m.get(sort.name()).toString());\n    Object p = m.getOrDefault(\"precision\", 0);\n    precision = p instanceof Number ? ((Number) p).intValue() : Integer.parseInt(p.toString());\n    if (precision < 0) {\n      throw new RuntimeException(\"precision must be a positive value \");\n    }\n    if (precision < name.min || precision > name.max) {\n      throw new RuntimeException(StrUtils.formatString(\"invalid precision value {0} , must lie between {1} and {2}\",\n          precision, name.min, name.max));\n    }\n\n  }\n\n","sourceOld":"  public Preference(Map<String, Object> m, int idx) {\n    this.idx = idx;\n    this.original = Utils.getDeepCopy(m,3);\n    sort = Policy.Sort.get(m);\n    name = Policy.SortParam.get(m.get(sort.name()).toString());\n    Object p = m.getOrDefault(\"precision\", 0);\n    precision = p instanceof Number ? ((Number) p).intValue() : Integer.parseInt(p.toString());\n    if (precision < 0) {\n      throw new RuntimeException(\"precision must be a positive value \");\n    }\n    if(precision< name.min || precision> name.max){\n      throw new RuntimeException(StrUtils.formatString(\"invalid precision value {0} , must lie between {1} and {2}\",\n          precision, name.min, name.max ) );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#Preference(Map[String,Object],int).mjava","sourceNew":null,"sourceOld":"  public Preference(Map<String, Object> m, int idx) {\n    this.idx = idx;\n    this.original = Utils.getDeepCopy(m, 3);\n    sort = Policy.Sort.get(m);\n    name = Policy.SortParam.get(m.get(sort.name()).toString());\n    Object p = m.getOrDefault(\"precision\", 0);\n    precision = p instanceof Number ? ((Number) p).intValue() : Integer.parseInt(p.toString());\n    if (precision < 0) {\n      throw new RuntimeException(\"precision must be a positive value \");\n    }\n    if (precision < name.min || precision > name.max) {\n      throw new RuntimeException(StrUtils.formatString(\"invalid precision value {0} , must lie between {1} and {2}\",\n          precision, name.min, name.max));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","954590f07cfbe2c3ccb86e29d0742c43740ca509"],"3f504512a03d978990cbff30db0522b354e846db":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"954590f07cfbe2c3ccb86e29d0742c43740ca509":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"954590f07cfbe2c3ccb86e29d0742c43740ca509":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","954590f07cfbe2c3ccb86e29d0742c43740ca509","560c18d71dad43d675158783c3840f8c80d6d39c"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["3f504512a03d978990cbff30db0522b354e846db"],"560c18d71dad43d675158783c3840f8c80d6d39c":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}