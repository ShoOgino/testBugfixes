{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,int,IOContext).mjava","commits":[{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,int,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,int,IOContext).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfoPerCommit si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.info.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.docCount - si.getDelCount();\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfo si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.docCount - si.getDelCount();\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"203d7d3cb7712e10ef33009a63247ae40c302d7a","date":1337798111,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,int,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,int,IOContext).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfoPerCommit si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.info.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfoPerCommit si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.info.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.docCount - si.getDelCount();\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,int,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,int,IOContext).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfoPerCommit si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.info.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfo si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.docCount - si.getDelCount();\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3b4a63b6b0155323dde6b827e0dc22a43580753","date":1346168671,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,int,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,int,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentInfoPerCommit si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.info.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfoPerCommit si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.info.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,int,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,int,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentInfoPerCommit si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.info.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public SegmentReader(SegmentInfoPerCommit si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.info.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,int,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentInfoPerCommit si, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.info.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentInfoPerCommit si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.info.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,int,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentInfoPerCommit si, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.info.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentInfoPerCommit si, int termInfosIndexDivisor, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context, termInfosIndexDivisor);\n    boolean success = false;\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = si.info.getCodec().liveDocsFormat().readLiveDocs(directory(), si, new IOContext(IOContext.READ, true));\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        core.decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","203d7d3cb7712e10ef33009a63247ae40c302d7a"],"a45bec74b98f6fc05f52770cfb425739e6563960":["a3b4a63b6b0155323dde6b827e0dc22a43580753"],"a3b4a63b6b0155323dde6b827e0dc22a43580753":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a3b4a63b6b0155323dde6b827e0dc22a43580753"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","a3b4a63b6b0155323dde6b827e0dc22a43580753"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a45bec74b98f6fc05f52770cfb425739e6563960"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a3b4a63b6b0155323dde6b827e0dc22a43580753","05a14b2611ead08655a2b2bdc61632eb31316e57"],"a45bec74b98f6fc05f52770cfb425739e6563960":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3b4a63b6b0155323dde6b827e0dc22a43580753":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","05a14b2611ead08655a2b2bdc61632eb31316e57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["203d7d3cb7712e10ef33009a63247ae40c302d7a"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}