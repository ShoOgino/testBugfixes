{"path":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","sourceNew":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","sourceNew":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","sourceNew":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","sourceNew":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","sourceNew":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","sourceNew":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","sourceNew":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","sourceNew":"  public void testFilteredQuery() throws Exception {\n    // force the filter to be executed as bits\n    tFilteredQuery(true);\n    // force the filter to be executed as iterator\n    tFilteredQuery(false);\n  }\n\n","sourceOld":"  public void testFilteredQuery()\n  throws Exception {\n    Query filteredquery = new FilteredQuery (query, filter);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"one\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"x\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQuery (new TermQuery (new Term (\"field\", \"y\")), filter);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testFilteredQuery().mjava","sourceNew":"  public void testFilteredQuery() throws Exception {\n    // force the filter to be executed as bits\n    tFilteredQuery(true);\n    // force the filter to be executed as iterator\n    tFilteredQuery(false);\n  }\n\n","sourceOld":"  public void testFilteredQuery() throws Exception {\n    // force the filter to be executed as bits\n    tFilteredQuery(true);\n    // force the filter to be executed as iterator\n    tFilteredQuery(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["090a0320e4de4a3674376aef96b9701f47564f86"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6620df8541b174097b1133a4fc370adb2e570524"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["53a31399f2471493d67b19a95c028a74e0113b6a","090a0320e4de4a3674376aef96b9701f47564f86"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["53a31399f2471493d67b19a95c028a74e0113b6a","090a0320e4de4a3674376aef96b9701f47564f86"],"090a0320e4de4a3674376aef96b9701f47564f86":["53a31399f2471493d67b19a95c028a74e0113b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","090a0320e4de4a3674376aef96b9701f47564f86"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2553b00f699380c64959ccb27991289aae87be2e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"090a0320e4de4a3674376aef96b9701f47564f86":["6620df8541b174097b1133a4fc370adb2e570524","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}