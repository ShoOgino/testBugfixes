{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#next().mjava","commits":[{"id":"7e77114d152c4db8d7ea816c5fedd7085bff1ef9","date":1149528541,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#next().mjava","pathOld":"/dev/null","sourceNew":"  public Token next() throws IOException {\r\n    if (thaiToken != null) {\r\n      String text = thaiToken.termText();\r\n      int start = breaker.current();\r\n      int end = breaker.next();\r\n      if (end != BreakIterator.DONE) {\r\n        return new Token(text.substring(start, end), \r\n            thaiToken.startOffset()+start, thaiToken.startOffset()+end, thaiToken.type());\r\n      }\r\n      thaiToken = null;\r\n    }\r\n    Token tk = input.next();\r\n    if (tk == null) {\r\n      return null;\r\n    }\r\n    String text = tk.termText();\r\n    if (UnicodeBlock.of(text.charAt(0)) != UnicodeBlock.THAI) {\r\n      return new Token(text.toLowerCase(), tk.startOffset(), tk.endOffset(), tk.type());\r\n    }\r\n    thaiToken = tk;\r\n    breaker.setText(text);\r\n    int end = breaker.next();\r\n    if (end != BreakIterator.DONE) {\r\n      return new Token(text.substring(0, end), \r\n          thaiToken.startOffset(), thaiToken.startOffset()+end, thaiToken.type());\r\n    }\r\n    return null;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#next(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#next().mjava","sourceNew":"  public Token next(final Token reusableToken) throws IOException {\r\n    assert reusableToken != null;\r\n    if (thaiToken != null) {\r\n      int start = breaker.current();\r\n      int end = breaker.next();\r\n      if (end != BreakIterator.DONE) {\r\n        reusableToken.reinit(thaiToken, thaiToken.termBuffer(), start, end - start);\r\n        reusableToken.setStartOffset(thaiToken.startOffset()+start);\r\n        reusableToken.setEndOffset(thaiToken.endOffset()+end);\r\n        return reusableToken;\r\n      }\r\n      thaiToken = null;\r\n    }\r\n\r\n    Token nextToken = input.next(reusableToken);\r\n    if (nextToken == null || nextToken.termLength() == 0) {\r\n      return null;\r\n    }\r\n\r\n    String text = nextToken.term();\r\n    if (UnicodeBlock.of(text.charAt(0)) != UnicodeBlock.THAI) {\r\n      nextToken.setTermBuffer(text.toLowerCase());\r\n      return nextToken;\r\n    }\r\n\r\n    thaiToken = (Token) nextToken.clone();\r\n    breaker.setText(text);\r\n    int end = breaker.next();\r\n    if (end != BreakIterator.DONE) {\r\n      nextToken.setTermBuffer(text, 0, end);\r\n      nextToken.setEndOffset(nextToken.startOffset() + end);\r\n      return nextToken;\r\n    }\r\n    return null;\r\n  }\r\n\n","sourceOld":"  public Token next() throws IOException {\r\n    if (thaiToken != null) {\r\n      String text = thaiToken.termText();\r\n      int start = breaker.current();\r\n      int end = breaker.next();\r\n      if (end != BreakIterator.DONE) {\r\n        return new Token(text.substring(start, end), \r\n            thaiToken.startOffset()+start, thaiToken.startOffset()+end, thaiToken.type());\r\n      }\r\n      thaiToken = null;\r\n    }\r\n    Token tk = input.next();\r\n    if (tk == null) {\r\n      return null;\r\n    }\r\n    String text = tk.termText();\r\n    if (UnicodeBlock.of(text.charAt(0)) != UnicodeBlock.THAI) {\r\n      return new Token(text.toLowerCase(), tk.startOffset(), tk.endOffset(), tk.type());\r\n    }\r\n    thaiToken = tk;\r\n    breaker.setText(text);\r\n    int end = breaker.next();\r\n    if (end != BreakIterator.DONE) {\r\n      return new Token(text.substring(0, end), \r\n          thaiToken.startOffset(), thaiToken.startOffset()+end, thaiToken.type());\r\n    }\r\n    return null;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["7e77114d152c4db8d7ea816c5fedd7085bff1ef9"],"7e77114d152c4db8d7ea816c5fedd7085bff1ef9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e2cb543b41c145f33390f460ee743d6693c9c6c"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7e77114d152c4db8d7ea816c5fedd7085bff1ef9":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e77114d152c4db8d7ea816c5fedd7085bff1ef9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}