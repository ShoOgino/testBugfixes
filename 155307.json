{"path":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","commits":[{"id":"1bea3922196318026c4274f2013416acb60c691e","date":1336496433,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","pathOld":"/dev/null","sourceNew":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10)), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n    try {\n      // Currently, there is an implicit _version_=1 for updates (doc must exist).  This is subject to change!\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c9578f99a6012b38cadca42a29f0bc79cdd5f3c6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02f65b52d33e2ddff7660dd6c22e86d8d296760e","date":1337022150,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","sourceNew":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10)), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n    try {\n      // Currently, there is an implicit _version_=1 for updates (doc must exist).  This is subject to change!\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n  }\n\n","sourceOld":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10)), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n    try {\n      // Currently, there is an implicit _version_=1 for updates (doc must exist).  This is subject to change!\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5e5dbf4268db532969cc84ef336b9988afce9843","date":1342199436,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","sourceNew":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10)), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n\n    try {\n      // test that updating a non-existing doc fails if we set _version_=1\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n  }\n\n","sourceOld":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10)), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n    try {\n      // Currently, there is an implicit _version_=1 for updates (doc must exist).  This is subject to change!\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","sourceNew":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10)), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n\n    try {\n      // test that updating a non-existing doc fails if we set _version_=1\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n  }\n\n","sourceOld":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10)), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n    try {\n      // Currently, there is an implicit _version_=1 for updates (doc must exist).  This is subject to change!\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","sourceNew":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10)), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n\n    try {\n      // test that updating a non-existing doc fails if we set _version_=1\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n  }\n\n","sourceOld":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10)), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n    try {\n      // Currently, there is an implicit _version_=1 for updates (doc must exist).  This is subject to change!\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9578f99a6012b38cadca42a29f0bc79cdd5f3c6","date":1345436530,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","sourceNew":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5, \"copyfield_source\",\"a\"), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10), \"copyfield_source\",map(\"add\",\"b\")), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5], 'copyfield_source':['a','b']}}\"     // real-time get should not return stored copyfield targets\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    // Do a search to get all stored fields back and make sure that the stored copyfield target only\n    // has one copy of the source.  This may not be supported forever!\n    assertU(commit(\"softCommit\",\"true\"));\n    assertJQ(req(\"q\",\"*:*\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"/response/docs/[0]=={'id':'1', 'val_i':100, 'val_is':[10,5,-1], 'copyfield_source':['a','b'], 'copyfield_dest_ss':['a','b']}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n\n    try {\n      // test that updating a non-existing doc fails if we set _version_=1\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n  }\n\n","sourceOld":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10)), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n\n    try {\n      // test that updating a non-existing doc fails if we set _version_=1\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n  }\n\n","bugFix":["1bea3922196318026c4274f2013416acb60c691e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67588aedbc6edbcce873bd0c3c7b4199fbf0987c","date":1345506207,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","sourceNew":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5, \"copyfield_source\",\"a\"), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10), \"copyfield_source\",map(\"add\",\"b\")), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5], 'copyfield_source':['a','b']}}\"     // real-time get should not return stored copyfield targets\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    // Do a search to get all stored fields back and make sure that the stored copyfield target only\n    // has one copy of the source.  This may not be supported forever!\n    assertU(commit(\"softCommit\",\"true\"));\n    assertJQ(req(\"q\",\"*:*\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"/response/docs/[0]=={'id':'1', 'val_i':100, 'val_is':[10,5,-1], 'copyfield_source':['a','b'], 'copyfield_dest_ss':['a','b']}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n\n    try {\n      // test that updating a non-existing doc fails if we set _version_=1\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n  }\n\n","sourceOld":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10)), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n\n    try {\n      // test that updating a non-existing doc fails if we set _version_=1\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","sourceNew":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5, \"copyfield_source\",\"a\"), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10), \"copyfield_source\",map(\"add\",\"b\")), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5], 'copyfield_source':['a','b']}}\"     // real-time get should not return stored copyfield targets\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    // Do a search to get all stored fields back and make sure that the stored copyfield target only\n    // has one copy of the source.  This may not be supported forever!\n    assertU(commit(\"softCommit\",\"true\"));\n    assertJQ(req(\"q\",\"*:*\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"/response/docs/[0]=={'id':'1', 'val_i':100, 'val_is':[10,5,-1], 'copyfield_source':['a','b'], 'copyfield_dest_ss':['a','b']}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n\n    try {\n      // test that updating a non-existing doc fails if we set _version_=1\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n  }\n\n","sourceOld":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10)), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n\n    try {\n      // test that updating a non-existing doc fails if we set _version_=1\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ab0c7114238ae604663efca0f46e65fff2a6c28","date":1351315793,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","sourceNew":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5, \"copyfield_source\",\"a\"), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10), \"copyfield_source\",map(\"add\",\"b\")), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5], 'copyfield_source':['a','b']}}\"     // real-time get should not return stored copyfield targets\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    // Do a search to get all stored fields back and make sure that the stored copyfield target only\n    // has one copy of the source.  This may not be supported forever!\n    assertU(commit(\"softCommit\",\"true\"));\n    assertJQ(req(\"q\",\"*:*\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"/response/docs/[0]=={'id':'1', 'val_i':100, 'val_is':[10,5,-1], 'copyfield_source':['a','b'], 'copyfield_dest_ss':['a','b']}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n\n    try {\n      // test that updating a non-existing doc fails if we set _version_=1\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n\n    // remove some fields\n    version = addAndGetVersion(sdoc(\n        \"id\", \"1\",\n        \"val_is\", map(\"set\",null),\n        \"val2_f\", map(\"set\",null)\n    ),\n        null);\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n    // test that updating a unique id results in failure.\n    try {\n      ignoreException(\"Invalid update of id field\");\n      version = addAndGetVersion(sdoc(\n          \"id\", map(\"set\",\"1\"),\n          \"val_is\", map(\"inc\",\"2000000000\")\n      ),\n          null);\n\n      fail();\n    } catch (SolrException se) {\n      resetExceptionIgnores();\n      assertEquals(400, se.code());\n      assertTrue(se.getMessage().indexOf(\"Invalid update of id field\") >= 0);\n    }\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n   // nothing should have changed - check with a normal query that we didn't create a duplicate\n    assertU(commit(\"softCommit\",\"false\"));\n    assertJQ(req(\"q\",\"id:1\", \"fl\",\"id\")\n        ,\"/response/numFound==1\"\n    );\n\n  }\n\n","sourceOld":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5, \"copyfield_source\",\"a\"), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10), \"copyfield_source\",map(\"add\",\"b\")), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5], 'copyfield_source':['a','b']}}\"     // real-time get should not return stored copyfield targets\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    // Do a search to get all stored fields back and make sure that the stored copyfield target only\n    // has one copy of the source.  This may not be supported forever!\n    assertU(commit(\"softCommit\",\"true\"));\n    assertJQ(req(\"q\",\"*:*\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"/response/docs/[0]=={'id':'1', 'val_i':100, 'val_is':[10,5,-1], 'copyfield_source':['a','b'], 'copyfield_dest_ss':['a','b']}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n\n    try {\n      // test that updating a non-existing doc fails if we set _version_=1\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","sourceNew":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5, \"copyfield_source\",\"a\"), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10), \"copyfield_source\",map(\"add\",\"b\")), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5], 'copyfield_source':['a','b']}}\"     // real-time get should not return stored copyfield targets\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    // Do a search to get all stored fields back and make sure that the stored copyfield target only\n    // has one copy of the source.  This may not be supported forever!\n    assertU(commit(\"softCommit\",\"true\"));\n    assertJQ(req(\"q\",\"*:*\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"/response/docs/[0]=={'id':'1', 'val_i':100, 'val_is':[10,5,-1], 'copyfield_source':['a','b'], 'copyfield_dest_ss':['a','b']}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n\n    try {\n      // test that updating a non-existing doc fails if we set _version_=1\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n\n    // remove some fields\n    version = addAndGetVersion(sdoc(\n        \"id\", \"1\",\n        \"val_is\", map(\"set\",null),\n        \"val2_f\", map(\"set\",null)\n    ),\n        null);\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n    // test that updating a unique id results in failure.\n    try {\n      ignoreException(\"Invalid update of id field\");\n      version = addAndGetVersion(sdoc(\n          \"id\", map(\"set\",\"1\"),\n          \"val_is\", map(\"inc\",\"2000000000\")\n      ),\n          null);\n\n      fail();\n    } catch (SolrException se) {\n      resetExceptionIgnores();\n      assertEquals(400, se.code());\n      assertTrue(se.getMessage().indexOf(\"Invalid update of id field\") >= 0);\n    }\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n   // nothing should have changed - check with a normal query that we didn't create a duplicate\n    assertU(commit(\"softCommit\",\"false\"));\n    assertJQ(req(\"q\",\"id:1\", \"fl\",\"id\")\n        ,\"/response/numFound==1\"\n    );\n\n  }\n\n","sourceOld":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5, \"copyfield_source\",\"a\"), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10), \"copyfield_source\",map(\"add\",\"b\")), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5], 'copyfield_source':['a','b']}}\"     // real-time get should not return stored copyfield targets\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    // Do a search to get all stored fields back and make sure that the stored copyfield target only\n    // has one copy of the source.  This may not be supported forever!\n    assertU(commit(\"softCommit\",\"true\"));\n    assertJQ(req(\"q\",\"*:*\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"/response/docs/[0]=={'id':'1', 'val_i':100, 'val_is':[10,5,-1], 'copyfield_source':['a','b'], 'copyfield_dest_ss':['a','b']}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n\n    try {\n      // test that updating a non-existing doc fails if we set _version_=1\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","sourceNew":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5, \"copyfield_source\",\"a\"), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10), \"copyfield_source\",map(\"add\",\"b\")), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5], 'copyfield_source':['a','b']}}\"     // real-time get should not return stored copyfield targets\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    // Do a search to get all stored fields back and make sure that the stored copyfield target only\n    // has one copy of the source.  This may not be supported forever!\n    assertU(commit(\"softCommit\",\"true\"));\n    assertJQ(req(\"q\",\"*:*\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"/response/docs/[0]=={'id':'1', 'val_i':100, 'val_is':[10,5,-1], 'copyfield_source':['a','b'], 'copyfield_dest_ss':['a','b']}\"\n    );\n\n\n    long version2;\n    SolrException se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null));\n    assertEquals(409, se.code());\n\n    // try bad version added as a request param\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\")));\n    assertEquals(409, se.code());\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n    // test that updating a non-existing doc fails if we set _version_=1\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null));\n    assertEquals(409, se.code());\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n\n    // remove some fields\n    version = addAndGetVersion(sdoc(\n        \"id\", \"1\",\n        \"val_is\", map(\"set\",null),\n        \"val2_f\", map(\"set\",null)\n    ),\n        null);\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n    // test that updating a unique id results in failure.\n    ignoreException(\"Invalid update of id field\");\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(\n            sdoc(\"id\", map(\"set\",\"1\"), \"val_is\", map(\"inc\",\"2000000000\")), null)\n    );\n    resetExceptionIgnores();\n    assertEquals(400, se.code());\n    assertTrue(se.getMessage().contains(\"Invalid update of id field\"));\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n   // nothing should have changed - check with a normal query that we didn't create a duplicate\n    assertU(commit(\"softCommit\",\"false\"));\n    assertJQ(req(\"q\",\"id:1\", \"fl\",\"id\")\n        ,\"/response/numFound==1\"\n    );\n\n  }\n\n","sourceOld":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5, \"copyfield_source\",\"a\"), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10), \"copyfield_source\",map(\"add\",\"b\")), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5], 'copyfield_source':['a','b']}}\"     // real-time get should not return stored copyfield targets\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    // Do a search to get all stored fields back and make sure that the stored copyfield target only\n    // has one copy of the source.  This may not be supported forever!\n    assertU(commit(\"softCommit\",\"true\"));\n    assertJQ(req(\"q\",\"*:*\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"/response/docs/[0]=={'id':'1', 'val_i':100, 'val_is':[10,5,-1], 'copyfield_source':['a','b'], 'copyfield_dest_ss':['a','b']}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n\n    try {\n      // test that updating a non-existing doc fails if we set _version_=1\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n\n    // remove some fields\n    version = addAndGetVersion(sdoc(\n        \"id\", \"1\",\n        \"val_is\", map(\"set\",null),\n        \"val2_f\", map(\"set\",null)\n    ),\n        null);\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n    // test that updating a unique id results in failure.\n    try {\n      ignoreException(\"Invalid update of id field\");\n      version = addAndGetVersion(sdoc(\n          \"id\", map(\"set\",\"1\"),\n          \"val_is\", map(\"inc\",\"2000000000\")\n      ),\n          null);\n\n      fail();\n    } catch (SolrException se) {\n      resetExceptionIgnores();\n      assertEquals(400, se.code());\n      assertTrue(se.getMessage().indexOf(\"Invalid update of id field\") >= 0);\n    }\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n   // nothing should have changed - check with a normal query that we didn't create a duplicate\n    assertU(commit(\"softCommit\",\"false\"));\n    assertJQ(req(\"q\",\"id:1\", \"fl\",\"id\")\n        ,\"/response/numFound==1\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":["689f9afcb5195815904e30fd753e3db8f5fcbf29"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","sourceNew":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5, \"copyfield_source\",\"a\"), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10), \"copyfield_source\",map(\"add\",\"b\")), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5], 'copyfield_source':['a','b']}}\"     // real-time get should not return stored copyfield targets\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    // Do a search to get all stored fields back and make sure that the stored copyfield target only\n    // has one copy of the source.  This may not be supported forever!\n    assertU(commit(\"softCommit\",\"true\"));\n    assertJQ(req(\"q\",\"*:*\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"/response/docs/[0]=={'id':'1', 'val_i':100, 'val_is':[10,5,-1], 'copyfield_source':['a','b'], 'copyfield_dest_ss':['a','b']}\"\n    );\n\n\n    long version2;\n    SolrException se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null));\n    assertEquals(409, se.code());\n\n    // try bad version added as a request param\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\")));\n    assertEquals(409, se.code());\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n    // test that updating a non-existing doc fails if we set _version_=1\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null));\n    assertEquals(409, se.code());\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n\n    // remove some fields\n    version = addAndGetVersion(sdoc(\n        \"id\", \"1\",\n        \"val_is\", map(\"set\",null),\n        \"val2_f\", map(\"set\",null)\n    ),\n        null);\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n    // test that updating a unique id results in failure.\n    ignoreException(\"Invalid update of id field\");\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(\n            sdoc(\"id\", map(\"set\",\"1\"), \"val_is\", map(\"inc\",\"2000000000\")), null)\n    );\n    resetExceptionIgnores();\n    assertEquals(400, se.code());\n    assertTrue(se.getMessage().contains(\"Invalid update of id field\"));\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n   // nothing should have changed - check with a normal query that we didn't create a duplicate\n    assertU(commit(\"softCommit\",\"false\"));\n    assertJQ(req(\"q\",\"id:1\", \"fl\",\"id\")\n        ,\"/response/numFound==1\"\n    );\n\n  }\n\n","sourceOld":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5, \"copyfield_source\",\"a\"), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10), \"copyfield_source\",map(\"add\",\"b\")), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5], 'copyfield_source':['a','b']}}\"     // real-time get should not return stored copyfield targets\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    // Do a search to get all stored fields back and make sure that the stored copyfield target only\n    // has one copy of the source.  This may not be supported forever!\n    assertU(commit(\"softCommit\",\"true\"));\n    assertJQ(req(\"q\",\"*:*\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"/response/docs/[0]=={'id':'1', 'val_i':100, 'val_is':[10,5,-1], 'copyfield_source':['a','b'], 'copyfield_dest_ss':['a','b']}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n\n    try {\n      // test that updating a non-existing doc fails if we set _version_=1\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n\n    // remove some fields\n    version = addAndGetVersion(sdoc(\n        \"id\", \"1\",\n        \"val_is\", map(\"set\",null),\n        \"val2_f\", map(\"set\",null)\n    ),\n        null);\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n    // test that updating a unique id results in failure.\n    try {\n      ignoreException(\"Invalid update of id field\");\n      version = addAndGetVersion(sdoc(\n          \"id\", map(\"set\",\"1\"),\n          \"val_is\", map(\"inc\",\"2000000000\")\n      ),\n          null);\n\n      fail();\n    } catch (SolrException se) {\n      resetExceptionIgnores();\n      assertEquals(400, se.code());\n      assertTrue(se.getMessage().indexOf(\"Invalid update of id field\") >= 0);\n    }\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n   // nothing should have changed - check with a normal query that we didn't create a duplicate\n    assertU(commit(\"softCommit\",\"false\"));\n    assertJQ(req(\"q\",\"id:1\", \"fl\",\"id\")\n        ,\"/response/numFound==1\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","sourceNew":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5, \"copyfield_source\",\"a\"), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10), \"copyfield_source\",map(\"add\",\"b\")), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5], 'copyfield_source':['a','b']}}\"     // real-time get should not return stored copyfield targets\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    // Do a search to get all stored fields back and make sure that the stored copyfield target only\n    // has one copy of the source.  This may not be supported forever!\n    assertU(commit(\"softCommit\",\"true\"));\n    assertJQ(req(\"q\",\"*:*\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"/response/docs/[0]=={'id':'1', 'val_i':100, 'val_is':[10,5,-1], 'copyfield_source':['a','b'], 'copyfield_dest_ss':['a','b']}\"\n    );\n\n\n    long version2;\n    SolrException se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null));\n    assertEquals(409, se.code());\n\n    // try bad version added as a request param\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\")));\n    assertEquals(409, se.code());\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n    // test that updating a non-existing doc fails if we set _version_=1\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null));\n    assertEquals(409, se.code());\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n\n    // remove some fields\n    version = addAndGetVersion(sdoc(\n        \"id\", \"1\",\n        \"val_is\", map(\"set\",null),\n        \"val2_f\", map(\"set\",null)\n    ),\n        null);\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n    // test that updating a unique id results in failure.\n    ignoreException(\"Invalid update of id field\");\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(\n            sdoc(\"id\", map(\"set\",\"1\"), \"val_is\", map(\"inc\",\"2000000000\")), null)\n    );\n    resetExceptionIgnores();\n    assertEquals(400, se.code());\n    assertTrue(se.getMessage().contains(\"Invalid update of id field\"));\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n   // nothing should have changed - check with a normal query that we didn't create a duplicate\n    assertU(commit(\"softCommit\",\"false\"));\n    assertJQ(req(\"q\",\"id:1\", \"fl\",\"id\")\n        ,\"/response/numFound==1\"\n    );\n\n  }\n\n","sourceOld":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5, \"copyfield_source\",\"a\"), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10), \"copyfield_source\",map(\"add\",\"b\")), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5], 'copyfield_source':['a','b']}}\"     // real-time get should not return stored copyfield targets\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    // Do a search to get all stored fields back and make sure that the stored copyfield target only\n    // has one copy of the source.  This may not be supported forever!\n    assertU(commit(\"softCommit\",\"true\"));\n    assertJQ(req(\"q\",\"*:*\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"/response/docs/[0]=={'id':'1', 'val_i':100, 'val_is':[10,5,-1], 'copyfield_source':['a','b'], 'copyfield_dest_ss':['a','b']}\"\n    );\n\n\n    long version2;\n    try {\n      // try bad version added as a field in the doc\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    try {\n      // try bad version added as a request param\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\"));\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n\n    try {\n      // test that updating a non-existing doc fails if we set _version_=1\n      version2 = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null);\n      fail();\n    } catch (SolrException se) {\n      assertEquals(409, se.code());\n    }\n\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n\n    // remove some fields\n    version = addAndGetVersion(sdoc(\n        \"id\", \"1\",\n        \"val_is\", map(\"set\",null),\n        \"val2_f\", map(\"set\",null)\n    ),\n        null);\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n    // test that updating a unique id results in failure.\n    try {\n      ignoreException(\"Invalid update of id field\");\n      version = addAndGetVersion(sdoc(\n          \"id\", map(\"set\",\"1\"),\n          \"val_is\", map(\"inc\",\"2000000000\")\n      ),\n          null);\n\n      fail();\n    } catch (SolrException se) {\n      resetExceptionIgnores();\n      assertEquals(400, se.code());\n      assertTrue(se.getMessage().indexOf(\"Invalid update of id field\") >= 0);\n    }\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n   // nothing should have changed - check with a normal query that we didn't create a duplicate\n    assertU(commit(\"softCommit\",\"false\"));\n    assertJQ(req(\"q\",\"id:1\", \"fl\",\"id\")\n        ,\"/response/numFound==1\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"689f9afcb5195815904e30fd753e3db8f5fcbf29","date":1582804294,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","sourceNew":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5, \"copyfield_source\",\"a\"), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10), \"copyfield_source\",map(\"add\",\"b\")), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5], 'copyfield_source':['a','b']}}\"     // real-time get should not return stored copyfield targets\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    // Do a search to get all stored fields back and make sure that the stored copyfield target only\n    // has one copy of the source.  This may not be supported forever!\n    assertU(commit(\"softCommit\",\"true\"));\n    assertJQ(req(\"q\",\"*:*\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"/response/docs/[0]=={'id':'1', 'val_i':100, 'val_is':[10,5,-1], 'copyfield_source':['a','b'], 'copyfield_dest_ss':['a','b']}\"\n    );\n\n\n    long version2;\n    SolrException se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null));\n    assertEquals(409, se.code());\n\n    // try bad version added as a request param\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\")));\n    assertEquals(409, se.code());\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n    // test that updating a non-existing doc fails if we set _version_=1\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null));\n    assertEquals(409, se.code());\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n\n    // remove some fields\n    version = addAndGetVersion(sdoc(\n        \"id\", \"1\",\n        \"val_is\", map(\"set\",null),\n        \"val2_f\", map(\"set\",null)\n    ),\n        null);\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n    // test that updating a unique id results in failure.\n    ignoreException(\"Invalid update of id field\");\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(\n            sdoc(\"id\", map(\"set\",\"1\"), \"val_is\", map(\"inc\",\"2000000000\")), null)\n    );\n    resetExceptionIgnores();\n    assertEquals(400, se.code());\n    assertTrue(se.getMessage().contains(\"Updating unique key, version or route field is not allowed\"));\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n   // nothing should have changed - check with a normal query that we didn't create a duplicate\n    assertU(commit(\"softCommit\",\"false\"));\n    assertJQ(req(\"q\",\"id:1\", \"fl\",\"id\")\n        ,\"/response/numFound==1\"\n    );\n\n  }\n\n","sourceOld":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5, \"copyfield_source\",\"a\"), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10), \"copyfield_source\",map(\"add\",\"b\")), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5], 'copyfield_source':['a','b']}}\"     // real-time get should not return stored copyfield targets\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    // Do a search to get all stored fields back and make sure that the stored copyfield target only\n    // has one copy of the source.  This may not be supported forever!\n    assertU(commit(\"softCommit\",\"true\"));\n    assertJQ(req(\"q\",\"*:*\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"/response/docs/[0]=={'id':'1', 'val_i':100, 'val_is':[10,5,-1], 'copyfield_source':['a','b'], 'copyfield_dest_ss':['a','b']}\"\n    );\n\n\n    long version2;\n    SolrException se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null));\n    assertEquals(409, se.code());\n\n    // try bad version added as a request param\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\")));\n    assertEquals(409, se.code());\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n    // test that updating a non-existing doc fails if we set _version_=1\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null));\n    assertEquals(409, se.code());\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n\n    // remove some fields\n    version = addAndGetVersion(sdoc(\n        \"id\", \"1\",\n        \"val_is\", map(\"set\",null),\n        \"val2_f\", map(\"set\",null)\n    ),\n        null);\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n    // test that updating a unique id results in failure.\n    ignoreException(\"Invalid update of id field\");\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(\n            sdoc(\"id\", map(\"set\",\"1\"), \"val_is\", map(\"inc\",\"2000000000\")), null)\n    );\n    resetExceptionIgnores();\n    assertEquals(400, se.code());\n    assertTrue(se.getMessage().contains(\"Invalid update of id field\"));\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n   // nothing should have changed - check with a normal query that we didn't create a duplicate\n    assertU(commit(\"softCommit\",\"false\"));\n    assertJQ(req(\"q\",\"id:1\", \"fl\",\"id\")\n        ,\"/response/numFound==1\"\n    );\n\n  }\n\n","bugFix":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestUpdate#doUpdateTest(Callable).mjava","sourceNew":"  public void doUpdateTest(@SuppressWarnings({\"rawtypes\"})Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5, \"copyfield_source\",\"a\"), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10), \"copyfield_source\",map(\"add\",\"b\")), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5], 'copyfield_source':['a','b']}}\"     // real-time get should not return stored copyfield targets\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    // Do a search to get all stored fields back and make sure that the stored copyfield target only\n    // has one copy of the source.  This may not be supported forever!\n    assertU(commit(\"softCommit\",\"true\"));\n    assertJQ(req(\"q\",\"*:*\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"/response/docs/[0]=={'id':'1', 'val_i':100, 'val_is':[10,5,-1], 'copyfield_source':['a','b'], 'copyfield_dest_ss':['a','b']}\"\n    );\n\n\n    long version2;\n    SolrException se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null));\n    assertEquals(409, se.code());\n\n    // try bad version added as a request param\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\")));\n    assertEquals(409, se.code());\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n    // test that updating a non-existing doc fails if we set _version_=1\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null));\n    assertEquals(409, se.code());\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n\n    // remove some fields\n    version = addAndGetVersion(sdoc(\n        \"id\", \"1\",\n        \"val_is\", map(\"set\",null),\n        \"val2_f\", map(\"set\",null)\n    ),\n        null);\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n    // test that updating a unique id results in failure.\n    ignoreException(\"Invalid update of id field\");\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(\n            sdoc(\"id\", map(\"set\",\"1\"), \"val_is\", map(\"inc\",\"2000000000\")), null)\n    );\n    resetExceptionIgnores();\n    assertEquals(400, se.code());\n    assertTrue(se.getMessage().contains(\"Updating unique key, version or route field is not allowed\"));\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n   // nothing should have changed - check with a normal query that we didn't create a duplicate\n    assertU(commit(\"softCommit\",\"false\"));\n    assertJQ(req(\"q\",\"id:1\", \"fl\",\"id\")\n        ,\"/response/numFound==1\"\n    );\n\n  }\n\n","sourceOld":"  public void doUpdateTest(Callable afterUpdate) throws Exception {\n    clearIndex();\n    afterUpdate.call();\n\n    long version;\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5, \"copyfield_source\",\"a\"), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",10), \"copyfield_source\",map(\"add\",\"b\")), null);\n    afterUpdate.call();\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",5)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5], 'copyfield_source':['a','b']}}\"     // real-time get should not return stored copyfield targets\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-1), \"val_i\",map(\"set\",100)), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}\"\n    );\n\n\n    // Do a search to get all stored fields back and make sure that the stored copyfield target only\n    // has one copy of the source.  This may not be supported forever!\n    assertU(commit(\"softCommit\",\"true\"));\n    assertJQ(req(\"q\",\"*:*\", \"fl\",\"id,*_i,*_is,copyfield_*\")\n        ,\"/response/docs/[0]=={'id':'1', 'val_i':100, 'val_is':[10,5,-1], 'copyfield_source':['a','b'], 'copyfield_dest_ss':['a','b']}\"\n    );\n\n\n    long version2;\n    SolrException se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",2), null));\n    assertEquals(409, se.code());\n\n    // try bad version added as a request param\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100)), params(\"_version_\",\"2\")));\n    assertEquals(409, se.code());\n\n    // try good version added as a field in the doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-100), \"_version_\",version), null);\n    afterUpdate.call();\n\n    // try good version added as a request parameter\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-200)), params(\"_version_\",Long.toString(version)));\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}\"\n    );\n\n    // extra field should just be treated as a \"set\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-300), \"val_i\",2), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}\"\n    );\n\n    // a null value should be treated as \"remove\"\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-400), \"val_i\",null), null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,*_i,*_is\")\n        ,\"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}\"\n    );\n\n\n    version = deleteAndGetVersion(\"1\", null);\n    afterUpdate.call();\n\n    // test that updating a non-existing doc fails if we set _version_=1\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(sdoc(\"id\",\"1\", \"val_is\",map(\"add\",-101), \"_version_\",\"1\"), null));\n    assertEquals(409, se.code());\n\n    // test that by default we can update a non-existing doc\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",102, \"val_is\",map(\"add\",-102)), null);\n    afterUpdate.call();\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':102, 'val_is':[-102]}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\", \"val_i\",5), null);\n    afterUpdate.call();\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",1),\n        \"val2_i\",map(\"inc\",\"1\"),\n        \"val2_f\",map(\"inc\",1),\n        \"val2_d\",map(\"inc\",\"1.0\"),\n        \"val2_l\",map(\"inc\",1)\n        ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1], 'val2_i':1, 'val2_f':1.0, 'val2_d':1.0, 'val2_l':1}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"-5\"),\n        \"val2_i\",map(\"inc\",-5),\n        \"val2_f\",map(\"inc\",\"-5.0\"),\n        \"val2_d\",map(\"inc\",-5),\n        \"val2_l\",map(\"inc\",\"-5\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[-4], 'val2_i':-4, 'val2_f':-4.0, 'val2_d':-4.0, 'val2_l':-4}}\"\n    );\n\n    version = addAndGetVersion(sdoc(\"id\",\"1\",\n        \"val_is\",map(\"inc\",\"2000000000\"),\n        \"val2_i\",map(\"inc\",-2000000000),\n        \"val2_f\",map(\"inc\",\"1e+20\"),\n        \"val2_d\",map(\"inc\",-1.2345678901e+100),\n        \"val2_l\",map(\"inc\",\"5000000000\")\n    ),\n        null);\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val_is':[1999999996], 'val2_i':-2000000004, 'val2_f':1.0E20, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n\n    // remove some fields\n    version = addAndGetVersion(sdoc(\n        \"id\", \"1\",\n        \"val_is\", map(\"set\",null),\n        \"val2_f\", map(\"set\",null)\n    ),\n        null);\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n    // test that updating a unique id results in failure.\n    ignoreException(\"Invalid update of id field\");\n    se = expectThrows(SolrException.class,\n        () -> addAndGetVersion(\n            sdoc(\"id\", map(\"set\",\"1\"), \"val_is\", map(\"inc\",\"2000000000\")), null)\n    );\n    resetExceptionIgnores();\n    assertEquals(400, se.code());\n    assertTrue(se.getMessage().contains(\"Updating unique key, version or route field is not allowed\"));\n\n    afterUpdate.call();\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id,val*\")\n        ,\"=={'doc':{'id':'1', 'val_i':5, 'val2_i':-2000000004, 'val2_d':-1.2345678901e+100, 'val2_l':4999999996}}\"\n    );\n\n   // nothing should have changed - check with a normal query that we didn't create a duplicate\n    assertU(commit(\"softCommit\",\"false\"));\n    assertJQ(req(\"q\",\"id:1\", \"fl\",\"id\")\n        ,\"/response/numFound==1\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["aba371508186796cc6151d8223a5b4e16d02e26e","c9578f99a6012b38cadca42a29f0bc79cdd5f3c6"],"1bea3922196318026c4274f2013416acb60c691e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9578f99a6012b38cadca42a29f0bc79cdd5f3c6":["5e5dbf4268db532969cc84ef336b9988afce9843"],"f8061ddd97f3352007d927dae445884a6f3d857b":["4ab0c7114238ae604663efca0f46e65fff2a6c28","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"e98520789adb1d5ad05afb4956eca0944a929688":["689f9afcb5195815904e30fd753e3db8f5fcbf29"],"689f9afcb5195815904e30fd753e3db8f5fcbf29":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"4ab0c7114238ae604663efca0f46e65fff2a6c28":["c9578f99a6012b38cadca42a29f0bc79cdd5f3c6"],"aba371508186796cc6151d8223a5b4e16d02e26e":["02f65b52d33e2ddff7660dd6c22e86d8d296760e","5e5dbf4268db532969cc84ef336b9988afce9843"],"5e5dbf4268db532969cc84ef336b9988afce9843":["02f65b52d33e2ddff7660dd6c22e86d8d296760e"],"02f65b52d33e2ddff7660dd6c22e86d8d296760e":["1bea3922196318026c4274f2013416acb60c691e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["02f65b52d33e2ddff7660dd6c22e86d8d296760e","5e5dbf4268db532969cc84ef336b9988afce9843"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["4ab0c7114238ae604663efca0f46e65fff2a6c28"],"f2126b84bd093fa3d921582a109a0ee578c28126":["c9578f99a6012b38cadca42a29f0bc79cdd5f3c6","4ab0c7114238ae604663efca0f46e65fff2a6c28"],"67588aedbc6edbcce873bd0c3c7b4199fbf0987c":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c9578f99a6012b38cadca42a29f0bc79cdd5f3c6"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["4ab0c7114238ae604663efca0f46e65fff2a6c28","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"1bea3922196318026c4274f2013416acb60c691e":["02f65b52d33e2ddff7660dd6c22e86d8d296760e"],"c9578f99a6012b38cadca42a29f0bc79cdd5f3c6":["001b25b42373b22a52f399dbf072f1224632e8e6","4ab0c7114238ae604663efca0f46e65fff2a6c28","f2126b84bd093fa3d921582a109a0ee578c28126","67588aedbc6edbcce873bd0c3c7b4199fbf0987c"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"689f9afcb5195815904e30fd753e3db8f5fcbf29":["e98520789adb1d5ad05afb4956eca0944a929688"],"4ab0c7114238ae604663efca0f46e65fff2a6c28":["f8061ddd97f3352007d927dae445884a6f3d857b","d1a307447328c95a00248512b40d7a5ff12ecd6a","f2126b84bd093fa3d921582a109a0ee578c28126","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"aba371508186796cc6151d8223a5b4e16d02e26e":["001b25b42373b22a52f399dbf072f1224632e8e6"],"5e5dbf4268db532969cc84ef336b9988afce9843":["c9578f99a6012b38cadca42a29f0bc79cdd5f3c6","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"02f65b52d33e2ddff7660dd6c22e86d8d296760e":["aba371508186796cc6151d8223a5b4e16d02e26e","5e5dbf4268db532969cc84ef336b9988afce9843","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["67588aedbc6edbcce873bd0c3c7b4199fbf0987c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bea3922196318026c4274f2013416acb60c691e"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["f8061ddd97f3352007d927dae445884a6f3d857b","689f9afcb5195815904e30fd753e3db8f5fcbf29","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"67588aedbc6edbcce873bd0c3c7b4199fbf0987c":[],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","f8061ddd97f3352007d927dae445884a6f3d857b","f2126b84bd093fa3d921582a109a0ee578c28126","67588aedbc6edbcce873bd0c3c7b4199fbf0987c","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}