{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","sourceNew":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>. For each document, the document number, the frequency of\n   * the term in that document is also provided, for use in\n   * search scoring.  If term is null, then all non-deleted\n   * docs are returned with freq=1.\n   * Thus, this method implements the mapping:\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n   * </ul>\n   * <p>The enumeration is ordered by document number.  Each document number\n   * is greater than all that precede it in the enumeration.\n   * @throws IOException if there is a low-level IO error\n   */\n  public TermDocs termDocs(Term term) throws IOException {\n    ensureOpen();\n    TermDocs termDocs = termDocs();\n    termDocs.seek(term);\n    return termDocs;\n  }\n\n","sourceOld":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>. For each document, the document number, the frequency of\n   * the term in that document is also provided, for use in\n   * search scoring.  If term is null, then all non-deleted\n   * docs are returned with freq=1.\n   * Thus, this method implements the mapping:\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n   * </ul>\n   * <p>The enumeration is ordered by document number.  Each document number\n   * is greater than all that precede it in the enumeration.\n   * @throws IOException if there is a low-level IO error\n   */\n  public TermDocs termDocs(Term term) throws IOException {\n    ensureOpen();\n    TermDocs termDocs = termDocs();\n    termDocs.seek(term);\n    return termDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","sourceNew":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>. For each document, the document number, the frequency of\n   * the term in that document is also provided, for use in\n   * search scoring.  If term is null, then all non-deleted\n   * docs are returned with freq=1.\n   * Thus, this method implements the mapping:\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n   * </ul>\n   * <p>The enumeration is ordered by document number.  Each document number\n   * is greater than all that precede it in the enumeration.\n   * @deprecated Use the new flex API ({@link #termDocsEnum}) instead.\n   * @throws IOException if there is a low-level IO error\n   */\n  @Deprecated\n  public TermDocs termDocs(Term term) throws IOException {\n    ensureOpen();\n    TermDocs termDocs = termDocs();\n    termDocs.seek(term);\n    return termDocs;\n  }\n\n","sourceOld":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>. For each document, the document number, the frequency of\n   * the term in that document is also provided, for use in\n   * search scoring.  If term is null, then all non-deleted\n   * docs are returned with freq=1.\n   * Thus, this method implements the mapping:\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n   * </ul>\n   * <p>The enumeration is ordered by document number.  Each document number\n   * is greater than all that precede it in the enumeration.\n   * @throws IOException if there is a low-level IO error\n   */\n  public TermDocs termDocs(Term term) throws IOException {\n    ensureOpen();\n    TermDocs termDocs = termDocs();\n    termDocs.seek(term);\n    return termDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","sourceNew":null,"sourceOld":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>. For each document, the document number, the frequency of\n   * the term in that document is also provided, for use in\n   * search scoring.  If term is null, then all non-deleted\n   * docs are returned with freq=1.\n   * Thus, this method implements the mapping:\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n   * </ul>\n   * <p>The enumeration is ordered by document number.  Each document number\n   * is greater than all that precede it in the enumeration.\n   * @deprecated Use the new flex API ({@link #termDocsEnum}) instead.\n   * @throws IOException if there is a low-level IO error\n   */\n  @Deprecated\n  public TermDocs termDocs(Term term) throws IOException {\n    ensureOpen();\n    TermDocs termDocs = termDocs();\n    termDocs.seek(term);\n    return termDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocs(Term).mjava","sourceNew":null,"sourceOld":"  /** Returns an enumeration of all the documents which contain\n   * <code>term</code>. For each document, the document number, the frequency of\n   * the term in that document is also provided, for use in\n   * search scoring.  If term is null, then all non-deleted\n   * docs are returned with freq=1.\n   * Thus, this method implements the mapping:\n   * <p><ul>\n   * Term &nbsp;&nbsp; =&gt; &nbsp;&nbsp; &lt;docNum, freq&gt;<sup>*</sup>\n   * </ul>\n   * <p>The enumeration is ordered by document number.  Each document number\n   * is greater than all that precede it in the enumeration.\n   * @deprecated Use the new flex API ({@link #termDocsEnum}) instead.\n   * @throws IOException if there is a low-level IO error\n   */\n  @Deprecated\n  public TermDocs termDocs(Term term) throws IOException {\n    ensureOpen();\n    TermDocs termDocs = termDocs();\n    termDocs.seek(term);\n    return termDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","28427ef110c4c5bf5b4057731b83110bd1e13724"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}