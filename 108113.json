{"path":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/StoredFieldsShardRequestFactory#constructRequest(ResponseBuilder).mjava","commits":[{"id":"ccc08aa684aee4964baee0644a6ba047bfd70829","date":1316263707,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/StoredFieldsShardRequestFactory#constructRequest(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    HashMap<String, Set<ShardDoc>> shardMap = new HashMap<String,Set<ShardDoc>>();\n    for (TopGroups<BytesRef> topGroups : rb.mergedTopGroups.values()) {\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        mapShardToDocs(shardMap, group.scoreDocs);\n      }\n    }\n\n    for (QueryCommandResult queryCommandResult : rb.mergedQueryCommandResults.values()) {\n      mapShardToDocs(shardMap, queryCommandResult.getTopDocs().scoreDocs);\n    }\n\n    ShardRequest[] shardRequests = new ShardRequest[shardMap.size()];\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n    int i = 0;\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.add( rb.req.getParams());\n      sreq.params.remove(GroupParams.GROUP);\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        // currently, \"score\" is synonymous with \"*,score\" so\n        // don't add \"id\" if the fl is empty or \"score\" or it would change the meaning.\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }\n\n      List<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n      shardRequests[i++] = sreq;\n    }\n\n    return shardRequests;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/StoredFieldsShardRequestFactory#constructRequest(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/StoredFieldsShardRequestFactory#constructRequest(ResponseBuilder).mjava","sourceNew":"  @Override\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    HashMap<String, Set<ShardDoc>> shardMap = new HashMap<>();\n    for (TopGroups<BytesRef> topGroups : rb.mergedTopGroups.values()) {\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        mapShardToDocs(shardMap, group.scoreDocs);\n      }\n    }\n\n    for (QueryCommandResult queryCommandResult : rb.mergedQueryCommandResults.values()) {\n      mapShardToDocs(shardMap, queryCommandResult.getTopDocs().scoreDocs);\n    }\n\n    ShardRequest[] shardRequests = new ShardRequest[shardMap.size()];\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n    int i = 0;\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.add( rb.req.getParams());\n      sreq.params.remove(GroupParams.GROUP);\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        // currently, \"score\" is synonymous with \"*,score\" so\n        // don't add \"id\" if the fl is empty or \"score\" or it would change the meaning.\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }\n\n      List<String> ids = new ArrayList<>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n      shardRequests[i++] = sreq;\n    }\n\n    return shardRequests;\n  }\n\n","sourceOld":"  @Override\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    HashMap<String, Set<ShardDoc>> shardMap = new HashMap<String,Set<ShardDoc>>();\n    for (TopGroups<BytesRef> topGroups : rb.mergedTopGroups.values()) {\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        mapShardToDocs(shardMap, group.scoreDocs);\n      }\n    }\n\n    for (QueryCommandResult queryCommandResult : rb.mergedQueryCommandResults.values()) {\n      mapShardToDocs(shardMap, queryCommandResult.getTopDocs().scoreDocs);\n    }\n\n    ShardRequest[] shardRequests = new ShardRequest[shardMap.size()];\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n    int i = 0;\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.add( rb.req.getParams());\n      sreq.params.remove(GroupParams.GROUP);\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        // currently, \"score\" is synonymous with \"*,score\" so\n        // don't add \"id\" if the fl is empty or \"score\" or it would change the meaning.\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }\n\n      List<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n      shardRequests[i++] = sreq;\n    }\n\n    return shardRequests;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6069837581413356deecd17ffb9cd92ff3bc7b44","date":1567533718,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/StoredFieldsShardRequestFactory#constructRequest(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/StoredFieldsShardRequestFactory#constructRequest(ResponseBuilder).mjava","sourceNew":"  @Override\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    HashMap<String, Set<ShardDoc>> shardMap = new HashMap<>();\n    for (TopGroups<BytesRef> topGroups : rb.mergedTopGroups.values()) {\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        mapShardToDocs(shardMap, group.scoreDocs);\n      }\n    }\n\n    for (QueryCommandResult queryCommandResult : rb.mergedQueryCommandResults.values()) {\n      mapShardToDocs(shardMap, queryCommandResult.getTopDocs().scoreDocs);\n    }\n\n    ShardRequest[] shardRequests = new ShardRequest[shardMap.size()];\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n    int i = 0;\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.add( rb.req.getParams());\n      sreq.params.remove(GroupParams.GROUP);\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n      \n      // we need to ensure the uniqueField is included for collating docs with their return fields\n      if (! rb.rsp.getReturnFields().wantsField(uniqueField.getName())) {\n        // the user didn't ask for it, so we have to...\n        sreq.params.add(CommonParams.FL, uniqueField.getName());\n      }\n\n      List<String> ids = new ArrayList<>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n      shardRequests[i++] = sreq;\n    }\n\n    return shardRequests;\n  }\n\n","sourceOld":"  @Override\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    HashMap<String, Set<ShardDoc>> shardMap = new HashMap<>();\n    for (TopGroups<BytesRef> topGroups : rb.mergedTopGroups.values()) {\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        mapShardToDocs(shardMap, group.scoreDocs);\n      }\n    }\n\n    for (QueryCommandResult queryCommandResult : rb.mergedQueryCommandResults.values()) {\n      mapShardToDocs(shardMap, queryCommandResult.getTopDocs().scoreDocs);\n    }\n\n    ShardRequest[] shardRequests = new ShardRequest[shardMap.size()];\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n    int i = 0;\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.add( rb.req.getParams());\n      sreq.params.remove(GroupParams.GROUP);\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        // currently, \"score\" is synonymous with \"*,score\" so\n        // don't add \"id\" if the fl is empty or \"score\" or it would change the meaning.\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }\n\n      List<String> ids = new ArrayList<>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n      shardRequests[i++] = sreq;\n    }\n\n    return shardRequests;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"6069837581413356deecd17ffb9cd92ff3bc7b44":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6069837581413356deecd17ffb9cd92ff3bc7b44"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6069837581413356deecd17ffb9cd92ff3bc7b44"],"6069837581413356deecd17ffb9cd92ff3bc7b44":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}