{"path":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTypeTest#testFunctionUsage().mjava","commits":[{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTypeTest#testFunctionUsage().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testFunctionUsage().mjava","sourceNew":"  public void testFunctionUsage() throws Exception {\n    assumeTrue(\"This test is only applicable to the XML file based exchange rate provider\",\n        expectedProviderClass.equals(FileExchangeRateProvider.class));\n\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, fieldName, (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, fieldName, i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default currency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", fieldName,\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", fieldName,\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+fieldName, \n                \"q\", \"{!frange u=500}\"+fieldName)\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+fieldName, \n                \"q\", \"{!frange l=500 u=1000}\"+fieldName)\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", fieldName,\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", fieldName,\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+fieldName, \n                \"f\", fieldName,\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+fieldName, \n                \"f\", fieldName,\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", fieldName,\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", fieldName,\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+fieldName, \n                \"f\", fieldName,\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+fieldName, \n                \"f\", fieldName,\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n  }\n\n","sourceOld":"  public void testFunctionUsage() throws Exception {\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, field(), (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default currency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange u=500}\"+field())\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange l=500 u=1000}\"+field())\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTypeTest#testFunctionUsage().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testFunctionUsage().mjava","sourceNew":"  public void testFunctionUsage() throws Exception {\n    assumeTrue(\"This test is only applicable to the XML file based exchange rate provider\",\n        expectedProviderClass.equals(FileExchangeRateProvider.class));\n\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, fieldName, (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, fieldName, i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default currency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", fieldName,\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", fieldName,\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+fieldName, \n                \"q\", \"{!frange u=500}\"+fieldName)\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+fieldName, \n                \"q\", \"{!frange l=500 u=1000}\"+fieldName)\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", fieldName,\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", fieldName,\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+fieldName, \n                \"f\", fieldName,\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+fieldName, \n                \"f\", fieldName,\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", fieldName,\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", fieldName,\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+fieldName, \n                \"f\", fieldName,\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+fieldName, \n                \"f\", fieldName,\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n  }\n\n","sourceOld":"  public void testFunctionUsage() throws Exception {\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, field(), (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default currency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange u=500}\"+field())\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange l=500 u=1000}\"+field())\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTypeTest#testFunctionUsage().mjava","pathOld":"/dev/null","sourceNew":"  public void testFunctionUsage() throws Exception {\n    assumeTrue(\"This test is only applicable to the XML file based exchange rate provider\",\n        expectedProviderClass.equals(FileExchangeRateProvider.class));\n\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, fieldName, (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, fieldName, i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default currency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", fieldName,\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", fieldName,\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+fieldName, \n                \"q\", \"{!frange u=500}\"+fieldName)\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+fieldName, \n                \"q\", \"{!frange l=500 u=1000}\"+fieldName)\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", fieldName,\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", fieldName,\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+fieldName, \n                \"f\", fieldName,\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+fieldName, \n                \"f\", fieldName,\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", fieldName,\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", fieldName,\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+fieldName, \n                \"f\", fieldName,\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+fieldName, \n                \"f\", fieldName,\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f107636c2cc82350a2607d774c092da5b73152e5"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f107636c2cc82350a2607d774c092da5b73152e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"f107636c2cc82350a2607d774c092da5b73152e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","f107636c2cc82350a2607d774c092da5b73152e5"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}