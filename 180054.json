{"path":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBooleanSimilarity#testSameNormsAsBM25().mjava","commits":[{"id":"2247f9b905bc1344a659f142ce3ea23f96c9e827","date":1478786509,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBooleanSimilarity#testSameNormsAsBM25().mjava","pathOld":"/dev/null","sourceNew":"  public void testSameNormsAsBM25() {\n    BooleanSimilarity sim1 = new BooleanSimilarity();\n    BM25Similarity sim2 = new BM25Similarity();\n    sim2.setDiscountOverlaps(true);\n    for (int iter = 0; iter < 100; ++iter) {\n      final int length = TestUtil.nextInt(random(), 1, 100);\n      final int position = random().nextInt(length);\n      final int numOverlaps = random().nextInt(50);\n      final float boost = random().nextFloat() * 10;\n      FieldInvertState state = new FieldInvertState(\"foo\", position, length, numOverlaps, 100, boost);\n      assertEquals(\n          sim2.computeNorm(state),\n          sim1.computeNorm(state),\n          0f);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBooleanSimilarity#testSameNormsAsBM25().mjava","pathOld":"/dev/null","sourceNew":"  public void testSameNormsAsBM25() {\n    BooleanSimilarity sim1 = new BooleanSimilarity();\n    BM25Similarity sim2 = new BM25Similarity();\n    sim2.setDiscountOverlaps(true);\n    for (int iter = 0; iter < 100; ++iter) {\n      final int length = TestUtil.nextInt(random(), 1, 100);\n      final int position = random().nextInt(length);\n      final int numOverlaps = random().nextInt(50);\n      final float boost = random().nextFloat() * 10;\n      FieldInvertState state = new FieldInvertState(\"foo\", position, length, numOverlaps, 100, boost);\n      assertEquals(\n          sim2.computeNorm(state),\n          sim1.computeNorm(state),\n          0f);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBooleanSimilarity#testSameNormsAsBM25().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBooleanSimilarity#testSameNormsAsBM25().mjava","sourceNew":"  public void testSameNormsAsBM25() {\n    BooleanSimilarity sim1 = new BooleanSimilarity();\n    BM25Similarity sim2 = new BM25Similarity();\n    sim2.setDiscountOverlaps(true);\n    for (int iter = 0; iter < 100; ++iter) {\n      final int length = TestUtil.nextInt(random(), 1, 100);\n      final int position = random().nextInt(length);\n      final int numOverlaps = random().nextInt(50);\n      FieldInvertState state = new FieldInvertState(\"foo\", position, length, numOverlaps, 100);\n      assertEquals(\n          sim2.computeNorm(state),\n          sim1.computeNorm(state),\n          0f);\n    }\n  }\n\n","sourceOld":"  public void testSameNormsAsBM25() {\n    BooleanSimilarity sim1 = new BooleanSimilarity();\n    BM25Similarity sim2 = new BM25Similarity();\n    sim2.setDiscountOverlaps(true);\n    for (int iter = 0; iter < 100; ++iter) {\n      final int length = TestUtil.nextInt(random(), 1, 100);\n      final int position = random().nextInt(length);\n      final int numOverlaps = random().nextInt(50);\n      final float boost = random().nextFloat() * 10;\n      FieldInvertState state = new FieldInvertState(\"foo\", position, length, numOverlaps, 100, boost);\n      assertEquals(\n          sim2.computeNorm(state),\n          sim1.computeNorm(state),\n          0f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBooleanSimilarity#testSameNormsAsBM25().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBooleanSimilarity#testSameNormsAsBM25().mjava","sourceNew":"  public void testSameNormsAsBM25() {\n    BooleanSimilarity sim1 = new BooleanSimilarity();\n    BM25Similarity sim2 = new BM25Similarity();\n    sim2.setDiscountOverlaps(true);\n    for (int iter = 0; iter < 100; ++iter) {\n      final int length = TestUtil.nextInt(random(), 1, 100);\n      final int position = random().nextInt(length);\n      final int numOverlaps = random().nextInt(length);\n      FieldInvertState state = new FieldInvertState(Version.LATEST.major, \"foo\", position, length, numOverlaps, 100);\n      assertEquals(\n          sim2.computeNorm(state),\n          sim1.computeNorm(state),\n          0f);\n    }\n  }\n\n","sourceOld":"  public void testSameNormsAsBM25() {\n    BooleanSimilarity sim1 = new BooleanSimilarity();\n    BM25Similarity sim2 = new BM25Similarity();\n    sim2.setDiscountOverlaps(true);\n    for (int iter = 0; iter < 100; ++iter) {\n      final int length = TestUtil.nextInt(random(), 1, 100);\n      final int position = random().nextInt(length);\n      final int numOverlaps = random().nextInt(50);\n      FieldInvertState state = new FieldInvertState(\"foo\", position, length, numOverlaps, 100);\n      assertEquals(\n          sim2.computeNorm(state),\n          sim1.computeNorm(state),\n          0f);\n    }\n  }\n\n","bugFix":null,"bugIntro":["5a4bb2b5569a925d9d26743041864893512a7958"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBooleanSimilarity#testSameNormsAsBM25().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBooleanSimilarity#testSameNormsAsBM25().mjava","sourceNew":"  public void testSameNormsAsBM25() {\n    BooleanSimilarity sim1 = new BooleanSimilarity();\n    BM25Similarity sim2 = new BM25Similarity();\n    sim2.setDiscountOverlaps(true);\n    for (int iter = 0; iter < 100; ++iter) {\n      final int length = TestUtil.nextInt(random(), 1, 100);\n      final int position = random().nextInt(length);\n      final int numOverlaps = random().nextInt(length);\n      FieldInvertState state = new FieldInvertState(Version.LATEST.major, \"foo\", position, length, numOverlaps, 100);\n      assertEquals(\n          sim2.computeNorm(state),\n          sim1.computeNorm(state),\n          0f);\n    }\n  }\n\n","sourceOld":"  public void testSameNormsAsBM25() {\n    BooleanSimilarity sim1 = new BooleanSimilarity();\n    BM25Similarity sim2 = new BM25Similarity();\n    sim2.setDiscountOverlaps(true);\n    for (int iter = 0; iter < 100; ++iter) {\n      final int length = TestUtil.nextInt(random(), 1, 100);\n      final int position = random().nextInt(length);\n      final int numOverlaps = random().nextInt(50);\n      FieldInvertState state = new FieldInvertState(\"foo\", position, length, numOverlaps, 100);\n      assertEquals(\n          sim2.computeNorm(state),\n          sim1.computeNorm(state),\n          0f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a4bb2b5569a925d9d26743041864893512a7958","date":1519489313,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBooleanSimilarity#testSameNormsAsBM25().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestBooleanSimilarity#testSameNormsAsBM25().mjava","sourceNew":"  public void testSameNormsAsBM25() {\n    BooleanSimilarity sim1 = new BooleanSimilarity();\n    BM25Similarity sim2 = new BM25Similarity();\n    sim2.setDiscountOverlaps(true);\n    for (int iter = 0; iter < 100; ++iter) {\n      final int length = TestUtil.nextInt(random(), 1, 100);\n      final int position = random().nextInt(length);\n      final int numOverlaps = random().nextInt(length);\n      final int maxTermFrequency = 1;\n      final int uniqueTermCount = 1;\n      FieldInvertState state = new FieldInvertState(Version.LATEST.major, \"foo\", IndexOptions.DOCS_AND_FREQS, position, length, numOverlaps, 100, maxTermFrequency, uniqueTermCount);\n      assertEquals(\n          sim2.computeNorm(state),\n          sim1.computeNorm(state),\n          0f);\n    }\n  }\n\n","sourceOld":"  public void testSameNormsAsBM25() {\n    BooleanSimilarity sim1 = new BooleanSimilarity();\n    BM25Similarity sim2 = new BM25Similarity();\n    sim2.setDiscountOverlaps(true);\n    for (int iter = 0; iter < 100; ++iter) {\n      final int length = TestUtil.nextInt(random(), 1, 100);\n      final int position = random().nextInt(length);\n      final int numOverlaps = random().nextInt(length);\n      FieldInvertState state = new FieldInvertState(Version.LATEST.major, \"foo\", position, length, numOverlaps, 100);\n      assertEquals(\n          sim2.computeNorm(state),\n          sim1.computeNorm(state),\n          0f);\n    }\n  }\n\n","bugFix":["615370d2b876c3435773b5174df2e2242ad7981a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["acd9883560fd89e6448b2b447302fe543040cd4f","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["acd9883560fd89e6448b2b447302fe543040cd4f"],"5a4bb2b5569a925d9d26743041864893512a7958":["615370d2b876c3435773b5174df2e2242ad7981a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2247f9b905bc1344a659f142ce3ea23f96c9e827"],"2247f9b905bc1344a659f142ce3ea23f96c9e827":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acd9883560fd89e6448b2b447302fe543040cd4f":["2247f9b905bc1344a659f142ce3ea23f96c9e827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a4bb2b5569a925d9d26743041864893512a7958"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","5a4bb2b5569a925d9d26743041864893512a7958"],"5a4bb2b5569a925d9d26743041864893512a7958":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["199dfa410f1fdbfd3294106b04096cce5ed34b21","2247f9b905bc1344a659f142ce3ea23f96c9e827"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"2247f9b905bc1344a659f142ce3ea23f96c9e827":["199dfa410f1fdbfd3294106b04096cce5ed34b21","acd9883560fd89e6448b2b447302fe543040cd4f"],"acd9883560fd89e6448b2b447302fe543040cd4f":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}