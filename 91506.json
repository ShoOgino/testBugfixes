{"path":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#listSortedOutputShardDirs(Path,FileSystem).mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#listSortedOutputShardDirs(Path,FileSystem).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#listSortedOutputShardDirs(Path,FileSystem).mjava","sourceNew":"  private FileStatus[] listSortedOutputShardDirs(Path outputReduceDir, FileSystem fs) throws FileNotFoundException,\n      IOException {\n    \n    final String dirPrefix = SolrOutputFormat.getOutputName(job);\n    FileStatus[] dirs = fs.listStatus(outputReduceDir, new PathFilter() {      \n      @Override\n      public boolean accept(Path path) {\n        return path.getName().startsWith(dirPrefix);\n      }\n    });\n    for (FileStatus dir : dirs) {\n      if (!dir.isDirectory()) {\n        throw new IllegalStateException(\"Not a directory: \" + dir.getPath());\n      }\n    }\n    Arrays.sort(dirs); // FIXME: handle more than 99999 shards (need numeric sort rather than lexicographical sort)\n    return dirs;\n  }\n\n","sourceOld":"  private FileStatus[] listSortedOutputShardDirs(Path outputReduceDir, FileSystem fs) throws FileNotFoundException,\n      IOException {\n    \n    final String dirPrefix = SolrOutputFormat.getOutputName(job);\n    FileStatus[] dirs = fs.listStatus(outputReduceDir, new PathFilter() {      \n      @Override\n      public boolean accept(Path path) {\n        return path.getName().startsWith(dirPrefix);\n      }\n    });\n    for (FileStatus dir : dirs) {\n      if (!dir.isDirectory()) {\n        throw new IllegalStateException(\"Not a directory: \" + dir.getPath());\n      }\n    }\n    Arrays.sort(dirs); // FIXME: handle more than 99999 shards (need numeric sort rather than lexicographical sort)\n    return dirs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42d384b06aa87eae925b668b65f3246154f0b0fa","date":1386181725,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#listSortedOutputShardDirs(Path,FileSystem).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#listSortedOutputShardDirs(Path,FileSystem).mjava","sourceNew":"  private FileStatus[] listSortedOutputShardDirs(Path outputReduceDir, FileSystem fs) throws FileNotFoundException,\n      IOException {\n    \n    final String dirPrefix = SolrOutputFormat.getOutputName(job);\n    FileStatus[] dirs = fs.listStatus(outputReduceDir, new PathFilter() {      \n      @Override\n      public boolean accept(Path path) {\n        return path.getName().startsWith(dirPrefix);\n      }\n    });\n    for (FileStatus dir : dirs) {\n      if (!dir.isDirectory()) {\n        throw new IllegalStateException(\"Not a directory: \" + dir.getPath());\n      }\n    }\n    \n    // use alphanumeric sort (rather than lexicographical sort) to properly handle more than 99999 shards\n    Arrays.sort(dirs, new Comparator<FileStatus>() {\n      @Override\n      public int compare(FileStatus f1, FileStatus f2) {\n        return new AlphaNumericComparator().compare(f1.getPath().getName(), f2.getPath().getName());\n      }\n    });\n\n    return dirs;\n  }\n\n","sourceOld":"  private FileStatus[] listSortedOutputShardDirs(Path outputReduceDir, FileSystem fs) throws FileNotFoundException,\n      IOException {\n    \n    final String dirPrefix = SolrOutputFormat.getOutputName(job);\n    FileStatus[] dirs = fs.listStatus(outputReduceDir, new PathFilter() {      \n      @Override\n      public boolean accept(Path path) {\n        return path.getName().startsWith(dirPrefix);\n      }\n    });\n    for (FileStatus dir : dirs) {\n      if (!dir.isDirectory()) {\n        throw new IllegalStateException(\"Not a directory: \" + dir.getPath());\n      }\n    }\n    Arrays.sort(dirs); // FIXME: handle more than 99999 shards (need numeric sort rather than lexicographical sort)\n    return dirs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#listSortedOutputShardDirs(Path,FileSystem).mjava","pathOld":"/dev/null","sourceNew":"  private FileStatus[] listSortedOutputShardDirs(Path outputReduceDir, FileSystem fs) throws FileNotFoundException,\n      IOException {\n    \n    final String dirPrefix = SolrOutputFormat.getOutputName(job);\n    FileStatus[] dirs = fs.listStatus(outputReduceDir, new PathFilter() {      \n      @Override\n      public boolean accept(Path path) {\n        return path.getName().startsWith(dirPrefix);\n      }\n    });\n    for (FileStatus dir : dirs) {\n      if (!dir.isDirectory()) {\n        throw new IllegalStateException(\"Not a directory: \" + dir.getPath());\n      }\n    }\n    \n    // use alphanumeric sort (rather than lexicographical sort) to properly handle more than 99999 shards\n    Arrays.sort(dirs, new Comparator<FileStatus>() {\n      @Override\n      public int compare(FileStatus f1, FileStatus f2) {\n        return new AlphaNumericComparator().compare(f1.getPath().getName(), f2.getPath().getName());\n      }\n    });\n\n    return dirs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043df2e9a841864922c32756a44c939ed768cb89","date":1459876536,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#listSortedOutputShardDirs(Path,FileSystem).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#listSortedOutputShardDirs(Path,FileSystem).mjava","sourceNew":"  private FileStatus[] listSortedOutputShardDirs(Path outputReduceDir, FileSystem fs) throws FileNotFoundException,\n      IOException {\n    \n    final String dirPrefix = SolrOutputFormat.getOutputName(job);\n    FileStatus[] dirs = fs.listStatus(outputReduceDir, new PathFilter() {      \n      @Override\n      public boolean accept(Path path) {\n        return path.getName().startsWith(dirPrefix);\n      }\n    });\n    for (FileStatus dir : dirs) {\n      if (!dir.isDirectory()) {\n        throw new IllegalStateException(\"Not a directory: \" + dir.getPath());\n      }\n    }\n    \n    // use alphanumeric sort (rather than lexicographical sort) to properly handle more than 99999 shards\n    Arrays.sort(dirs, (f1, f2) -> new AlphaNumericComparator().compare(f1.getPath().getName(), f2.getPath().getName()));\n\n    return dirs;\n  }\n\n","sourceOld":"  private FileStatus[] listSortedOutputShardDirs(Path outputReduceDir, FileSystem fs) throws FileNotFoundException,\n      IOException {\n    \n    final String dirPrefix = SolrOutputFormat.getOutputName(job);\n    FileStatus[] dirs = fs.listStatus(outputReduceDir, new PathFilter() {      \n      @Override\n      public boolean accept(Path path) {\n        return path.getName().startsWith(dirPrefix);\n      }\n    });\n    for (FileStatus dir : dirs) {\n      if (!dir.isDirectory()) {\n        throw new IllegalStateException(\"Not a directory: \" + dir.getPath());\n      }\n    }\n    \n    // use alphanumeric sort (rather than lexicographical sort) to properly handle more than 99999 shards\n    Arrays.sort(dirs, new Comparator<FileStatus>() {\n      @Override\n      public int compare(FileStatus f1, FileStatus f2) {\n        return new AlphaNumericComparator().compare(f1.getPath().getName(), f2.getPath().getName());\n      }\n    });\n\n    return dirs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#listSortedOutputShardDirs(Path,FileSystem).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#listSortedOutputShardDirs(Path,FileSystem).mjava","sourceNew":"  private FileStatus[] listSortedOutputShardDirs(Path outputReduceDir, FileSystem fs) throws FileNotFoundException,\n      IOException {\n    \n    final String dirPrefix = SolrOutputFormat.getOutputName(job);\n    FileStatus[] dirs = fs.listStatus(outputReduceDir, new PathFilter() {      \n      @Override\n      public boolean accept(Path path) {\n        return path.getName().startsWith(dirPrefix);\n      }\n    });\n    for (FileStatus dir : dirs) {\n      if (!dir.isDirectory()) {\n        throw new IllegalStateException(\"Not a directory: \" + dir.getPath());\n      }\n    }\n    \n    // use alphanumeric sort (rather than lexicographical sort) to properly handle more than 99999 shards\n    Arrays.sort(dirs, (f1, f2) -> new AlphaNumericComparator().compare(f1.getPath().getName(), f2.getPath().getName()));\n\n    return dirs;\n  }\n\n","sourceOld":"  private FileStatus[] listSortedOutputShardDirs(Path outputReduceDir, FileSystem fs) throws FileNotFoundException,\n      IOException {\n    \n    final String dirPrefix = SolrOutputFormat.getOutputName(job);\n    FileStatus[] dirs = fs.listStatus(outputReduceDir, new PathFilter() {      \n      @Override\n      public boolean accept(Path path) {\n        return path.getName().startsWith(dirPrefix);\n      }\n    });\n    for (FileStatus dir : dirs) {\n      if (!dir.isDirectory()) {\n        throw new IllegalStateException(\"Not a directory: \" + dir.getPath());\n      }\n    }\n    \n    // use alphanumeric sort (rather than lexicographical sort) to properly handle more than 99999 shards\n    Arrays.sort(dirs, new Comparator<FileStatus>() {\n      @Override\n      public int compare(FileStatus f1, FileStatus f2) {\n        return new AlphaNumericComparator().compare(f1.getPath().getName(), f2.getPath().getName());\n      }\n    });\n\n    return dirs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#listSortedOutputShardDirs(Path,FileSystem).mjava","sourceNew":null,"sourceOld":"  private FileStatus[] listSortedOutputShardDirs(Path outputReduceDir, FileSystem fs) throws FileNotFoundException,\n      IOException {\n    \n    final String dirPrefix = SolrOutputFormat.getOutputName(job);\n    FileStatus[] dirs = fs.listStatus(outputReduceDir, new PathFilter() {      \n      @Override\n      public boolean accept(Path path) {\n        return path.getName().startsWith(dirPrefix);\n      }\n    });\n    for (FileStatus dir : dirs) {\n      if (!dir.isDirectory()) {\n        throw new IllegalStateException(\"Not a directory: \" + dir.getPath());\n      }\n    }\n    \n    // use alphanumeric sort (rather than lexicographical sort) to properly handle more than 99999 shards\n    Arrays.sort(dirs, (f1, f2) -> new AlphaNumericComparator().compare(f1.getPath().getName(), f2.getPath().getName()));\n\n    return dirs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#listSortedOutputShardDirs(Path,FileSystem).mjava","sourceNew":null,"sourceOld":"  private FileStatus[] listSortedOutputShardDirs(Path outputReduceDir, FileSystem fs) throws FileNotFoundException,\n      IOException {\n    \n    final String dirPrefix = SolrOutputFormat.getOutputName(job);\n    FileStatus[] dirs = fs.listStatus(outputReduceDir, new PathFilter() {      \n      @Override\n      public boolean accept(Path path) {\n        return path.getName().startsWith(dirPrefix);\n      }\n    });\n    for (FileStatus dir : dirs) {\n      if (!dir.isDirectory()) {\n        throw new IllegalStateException(\"Not a directory: \" + dir.getPath());\n      }\n    }\n    \n    // use alphanumeric sort (rather than lexicographical sort) to properly handle more than 99999 shards\n    Arrays.sort(dirs, (f1, f2) -> new AlphaNumericComparator().compare(f1.getPath().getName(), f2.getPath().getName()));\n\n    return dirs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"043df2e9a841864922c32756a44c939ed768cb89":["42d384b06aa87eae925b668b65f3246154f0b0fa"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["b6284684320a9808c41a5e43de958b2da22f89bd"],"b6284684320a9808c41a5e43de958b2da22f89bd":["42d384b06aa87eae925b668b65f3246154f0b0fa","043df2e9a841864922c32756a44c939ed768cb89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42d384b06aa87eae925b668b65f3246154f0b0fa"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["b6284684320a9808c41a5e43de958b2da22f89bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"],"42d384b06aa87eae925b668b65f3246154f0b0fa":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["42d384b06aa87eae925b668b65f3246154f0b0fa"],"043df2e9a841864922c32756a44c939ed768cb89":["b6284684320a9808c41a5e43de958b2da22f89bd"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b6284684320a9808c41a5e43de958b2da22f89bd":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"42d384b06aa87eae925b668b65f3246154f0b0fa":["043df2e9a841864922c32756a44c939ed768cb89","b6284684320a9808c41a5e43de958b2da22f89bd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}