{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#[R]_computeCacheIfAbsent(String,String,String,Object,Function[Object,R]).mjava","commits":[{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#[R]_computeCacheIfAbsent(String,String,String,Object,Function[Object,R]).mjava","pathOld":"/dev/null","sourceNew":"  public <R> R computeCacheIfAbsent(String coll, String shard, String cacheName, Object key, Function<Object, R> supplier) {\n    Map collMap = (Map) this.perCollCache.get(coll);\n    if (collMap == null) this.perCollCache.put(coll, collMap = new HashMap());\n    Map shardMap = (Map) collMap.get(shard);\n    if (shardMap == null) collMap.put(shard, shardMap = new HashMap());\n    Map cacheNameMap = (Map) shardMap.get(cacheName);\n    if (cacheNameMap == null) shardMap.put(cacheName, cacheNameMap = new HashMap());\n    R result = (R) cacheNameMap.get(key);\n    if (result == null) {\n      CacheEntry.miss(cacheName);\n      cacheNameMap.put(key, result = supplier.apply(key));\n      return result;\n    } else {\n      CacheEntry.hit(cacheName);\n      return result;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#[R]_computeCacheIfAbsent(String,String,String,Object,Function[Object,R]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#[R]_computeCacheIfAbsent(String,String,String,Object,Function[Object,R]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public <R> R computeCacheIfAbsent(String coll, String shard, String cacheName, Object key, Function<Object, R> supplier) {\n    Map collMap = (Map) this.perCollCache.get(coll);\n    if (collMap == null) this.perCollCache.put(coll, collMap = new HashMap());\n    Map shardMap = (Map) collMap.get(shard);\n    if (shardMap == null) collMap.put(shard, shardMap = new HashMap());\n    Map cacheNameMap = (Map) shardMap.get(cacheName);\n    if (cacheNameMap == null) shardMap.put(cacheName, cacheNameMap = new HashMap());\n    R result = (R) cacheNameMap.get(key);\n    if (result == null) {\n      CacheEntry.miss(cacheName);\n      cacheNameMap.put(key, result = supplier.apply(key));\n      return result;\n    } else {\n      CacheEntry.hit(cacheName);\n      return result;\n    }\n  }\n\n","sourceOld":"  public <R> R computeCacheIfAbsent(String coll, String shard, String cacheName, Object key, Function<Object, R> supplier) {\n    Map collMap = (Map) this.perCollCache.get(coll);\n    if (collMap == null) this.perCollCache.put(coll, collMap = new HashMap());\n    Map shardMap = (Map) collMap.get(shard);\n    if (shardMap == null) collMap.put(shard, shardMap = new HashMap());\n    Map cacheNameMap = (Map) shardMap.get(cacheName);\n    if (cacheNameMap == null) shardMap.put(cacheName, cacheNameMap = new HashMap());\n    R result = (R) cacheNameMap.get(key);\n    if (result == null) {\n      CacheEntry.miss(cacheName);\n      cacheNameMap.put(key, result = supplier.apply(key));\n      return result;\n    } else {\n      CacheEntry.hit(cacheName);\n      return result;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#[R]_computeCacheIfAbsent(String,String,String,Object,Function[Object,R]).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public <R> R computeCacheIfAbsent(String coll, String shard, String cacheName, Object key, Function<Object, R> supplier) {\n    Map collMap = (Map) this.perCollCache.get(coll);\n    if (collMap == null) this.perCollCache.put(coll, collMap = new HashMap());\n    Map shardMap = (Map) collMap.get(shard);\n    if (shardMap == null) collMap.put(shard, shardMap = new HashMap());\n    Map cacheNameMap = (Map) shardMap.get(cacheName);\n    if (cacheNameMap == null) shardMap.put(cacheName, cacheNameMap = new HashMap());\n    R result = (R) cacheNameMap.get(key);\n    if (result == null) {\n      CacheEntry.miss(cacheName);\n      cacheNameMap.put(key, result = supplier.apply(key));\n      return result;\n    } else {\n      CacheEntry.hit(cacheName);\n      return result;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["527adea7ce767368d7317339023e18e39702132e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"527adea7ce767368d7317339023e18e39702132e":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["527adea7ce767368d7317339023e18e39702132e"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"527adea7ce767368d7317339023e18e39702132e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}