{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#correctOffset(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#correctOffset(int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockCharFilter#correctOffset(int).mjava","sourceNew":"  @Override\n  public int correctOffset(int currentOff) {\n    SortedMap<Integer,Integer> subMap = corrections.subMap(0, currentOff+1);\n    int ret = subMap.isEmpty() ? currentOff : currentOff + subMap.get(subMap.lastKey());\n    assert ret >= 0 : \"currentOff=\" + currentOff + \",diff=\" + (ret-currentOff);\n    return ret;\n  }\n\n","sourceOld":"  @Override\n  public int correctOffset(int currentOff) {\n    SortedMap<Integer,Integer> subMap = corrections.subMap(0, currentOff+1);\n    int ret = subMap.isEmpty() ? currentOff : currentOff + subMap.get(subMap.lastKey());\n    assert ret >= 0 : \"currentOff=\" + currentOff + \",diff=\" + (ret-currentOff);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aacb5fe7681a2df3c798f84c79a481407db87a6f","date":1333822076,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#correctOffset(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#correctOffset(int).mjava","sourceNew":"  @Override\n  public int correctOffset(int currentOff) {\n    SortedMap<Integer,Integer> subMap = corrections.subMap(0, currentOff+1);\n    int ret = subMap.isEmpty() ? currentOff : currentOff + subMap.get(subMap.lastKey());\n    assert ret >= 0 : \"currentOff=\" + currentOff + \",diff=\" + (ret-currentOff);\n    return in.correctOffset(ret); // chain the call\n  }\n\n","sourceOld":"  @Override\n  public int correctOffset(int currentOff) {\n    SortedMap<Integer,Integer> subMap = corrections.subMap(0, currentOff+1);\n    int ret = subMap.isEmpty() ? currentOff : currentOff + subMap.get(subMap.lastKey());\n    assert ret >= 0 : \"currentOff=\" + currentOff + \",diff=\" + (ret-currentOff);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc706b1e03a539d44d99998108feb684bb44cbb2","date":1342522408,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#correct(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#correctOffset(int).mjava","sourceNew":"  @Override\n  public int correct(int currentOff) {\n    SortedMap<Integer,Integer> subMap = corrections.subMap(0, currentOff+1);\n    int ret = subMap.isEmpty() ? currentOff : currentOff + subMap.get(subMap.lastKey());\n    assert ret >= 0 : \"currentOff=\" + currentOff + \",diff=\" + (ret-currentOff);\n    return ret;\n  }\n\n","sourceOld":"  @Override\n  public int correctOffset(int currentOff) {\n    SortedMap<Integer,Integer> subMap = corrections.subMap(0, currentOff+1);\n    int ret = subMap.isEmpty() ? currentOff : currentOff + subMap.get(subMap.lastKey());\n    assert ret >= 0 : \"currentOff=\" + currentOff + \",diff=\" + (ret-currentOff);\n    return in.correctOffset(ret); // chain the call\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#correctOffset(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int correctOffset(int currentOff) {\n    SortedMap<Integer,Integer> subMap = corrections.subMap(0, currentOff+1);\n    int ret = subMap.isEmpty() ? currentOff : currentOff + subMap.get(subMap.lastKey());\n    assert ret >= 0 : \"currentOff=\" + currentOff + \",diff=\" + (ret-currentOff);\n    return in.correctOffset(ret); // chain the call\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#correctOffset(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int correctOffset(int currentOff) {\n    SortedMap<Integer,Integer> subMap = corrections.subMap(0, currentOff+1);\n    int ret = subMap.isEmpty() ? currentOff : currentOff + subMap.get(subMap.lastKey());\n    assert ret >= 0 : \"currentOff=\" + currentOff + \",diff=\" + (ret-currentOff);\n    return in.correctOffset(ret); // chain the call\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["aacb5fe7681a2df3c798f84c79a481407db87a6f","fc706b1e03a539d44d99998108feb684bb44cbb2"],"fc706b1e03a539d44d99998108feb684bb44cbb2":["aacb5fe7681a2df3c798f84c79a481407db87a6f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["aacb5fe7681a2df3c798f84c79a481407db87a6f","fc706b1e03a539d44d99998108feb684bb44cbb2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aacb5fe7681a2df3c798f84c79a481407db87a6f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc706b1e03a539d44d99998108feb684bb44cbb2"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fc706b1e03a539d44d99998108feb684bb44cbb2":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["aacb5fe7681a2df3c798f84c79a481407db87a6f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"aacb5fe7681a2df3c798f84c79a481407db87a6f":["aba371508186796cc6151d8223a5b4e16d02e26e","fc706b1e03a539d44d99998108feb684bb44cbb2","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}