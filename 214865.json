{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClientTest#testConcurrentUpdate().mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClientTest#testConcurrentUpdate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    ConcurrentUpdateSolrClientTest.TestServlet.clear();\n\n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n\n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);\n    final StringBuilder errors = new StringBuilder();\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient.Builder(serverUrl, http2Client, successCounter, errorCounter, errors)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount)\n             .build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      // ensure it doesn't block where there's nothing to do yet\n      concurrentClient.blockUntilFinished();\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      int numDocs = 100;\n      int numRunnables = 5;\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new ConcurrentUpdateSolrClientTest.SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n\n      // ensure all docs are sent\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      // wait until all requests are processed by CUSS\n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n\n      assertEquals(\"post\", ConcurrentUpdateSolrClientTest.TestServlet.lastMethod);\n\n      // expect all requests to be successful\n      int expectedSuccesses = ConcurrentUpdateSolrClientTest.TestServlet.numReqsRcvd.get();\n      assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n\n      assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n          \", due to: \"+errors.toString(), errorCounter.get() == 0);\n      assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(),\n          successCounter.get() == expectedSuccesses);\n\n      int expectedDocs = numDocs * numRunnables;\n      assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+ ConcurrentUpdateSolrClientTest.TestServlet.numDocsRcvd.get(),\n          ConcurrentUpdateSolrClientTest.TestServlet.numDocsRcvd.get() == expectedDocs);\n    }\n\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClientTest#testConcurrentUpdate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClientTest#testConcurrentUpdate().mjava","sourceNew":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    ConcurrentUpdateSolrClientTest.TestServlet.clear();\n\n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n\n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);\n    final StringBuilder errors = new StringBuilder();\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient.Builder(serverUrl, http2Client, successCounter, errorCounter, errors)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount)\n             .build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      // ensure it doesn't block where there's nothing to do yet\n      concurrentClient.blockUntilFinished();\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrNamedThreadFactory(\"testCUSS\"));\n\n      int numDocs = 100;\n      int numRunnables = 5;\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new ConcurrentUpdateSolrClientTest.SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n\n      // ensure all docs are sent\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      // wait until all requests are processed by CUSS\n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n\n      assertEquals(\"post\", ConcurrentUpdateSolrClientTest.TestServlet.lastMethod);\n\n      // expect all requests to be successful\n      int expectedSuccesses = ConcurrentUpdateSolrClientTest.TestServlet.numReqsRcvd.get();\n      assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n\n      assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n          \", due to: \"+errors.toString(), errorCounter.get() == 0);\n      assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(),\n          successCounter.get() == expectedSuccesses);\n\n      int expectedDocs = numDocs * numRunnables;\n      assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+ ConcurrentUpdateSolrClientTest.TestServlet.numDocsRcvd.get(),\n          ConcurrentUpdateSolrClientTest.TestServlet.numDocsRcvd.get() == expectedDocs);\n    }\n\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    ConcurrentUpdateSolrClientTest.TestServlet.clear();\n\n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n\n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);\n    final StringBuilder errors = new StringBuilder();\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient.Builder(serverUrl, http2Client, successCounter, errorCounter, errors)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount)\n             .build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      // ensure it doesn't block where there's nothing to do yet\n      concurrentClient.blockUntilFinished();\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      int numDocs = 100;\n      int numRunnables = 5;\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new ConcurrentUpdateSolrClientTest.SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n\n      // ensure all docs are sent\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      // wait until all requests are processed by CUSS\n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n\n      assertEquals(\"post\", ConcurrentUpdateSolrClientTest.TestServlet.lastMethod);\n\n      // expect all requests to be successful\n      int expectedSuccesses = ConcurrentUpdateSolrClientTest.TestServlet.numReqsRcvd.get();\n      assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n\n      assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n          \", due to: \"+errors.toString(), errorCounter.get() == 0);\n      assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(),\n          successCounter.get() == expectedSuccesses);\n\n      int expectedDocs = numDocs * numRunnables;\n      assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+ ConcurrentUpdateSolrClientTest.TestServlet.numDocsRcvd.get(),\n          ConcurrentUpdateSolrClientTest.TestServlet.numDocsRcvd.get() == expectedDocs);\n    }\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}