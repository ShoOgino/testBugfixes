{"path":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","commits":[{"id":"902ba79f4590a41c663c447756d2e5041cbbdda9","date":1217956662,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuffer sb = new StringBuffer(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.TOKENIZED);\n      noTf.setOmitTf(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.TOKENIZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);  \n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc, score);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuffer sb = new StringBuffer(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTf(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);  \n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc, score);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuffer sb = new StringBuffer(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.TOKENIZED);\n      noTf.setOmitTf(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.TOKENIZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);  \n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc, score);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"066b6ff5a08e35c3b6880e7c3ddda79526acdab1","date":1237569961,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuffer sb = new StringBuffer(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);  \n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc, score);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuffer sb = new StringBuffer(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTf(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);  \n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc, score);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuffer sb = new StringBuffer(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuffer sb = new StringBuffer(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);  \n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc, score);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      public final void collect(int doc, float score) {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc, score);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuffer sb = new StringBuffer(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuffer sb = new StringBuffer(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuffer sb = new StringBuffer(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"0a046c0c310bc77931fc8441bd920053b607dd14":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["0a046c0c310bc77931fc8441bd920053b607dd14"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}