{"path":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docs(Bits,DocsEnum,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docs(Bits,DocsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docs(Bits,DocsEnum,boolean).mjava","sourceNew":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n      decodeMetaData();\n      FSTDocsEnum docsEnum;\n\n      if (needsFreqs && field.indexOptions == IndexOptions.DOCS_ONLY) {\n        return null;\n      } else if (reuse == null || !(reuse instanceof FSTDocsEnum)) {\n        docsEnum = new FSTDocsEnum(field.indexOptions, field.storePayloads);\n      } else {\n        docsEnum = (FSTDocsEnum) reuse;        \n        if (!docsEnum.canReuse(field.indexOptions, field.storePayloads)) {\n          docsEnum = new FSTDocsEnum(field.indexOptions, field.storePayloads);\n        }\n      }\n      return docsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n      decodeMetaData();\n      FSTDocsEnum docsEnum;\n\n      if (needsFreqs && field.indexOptions == IndexOptions.DOCS_ONLY) {\n        return null;\n      } else if (reuse == null || !(reuse instanceof FSTDocsEnum)) {\n        docsEnum = new FSTDocsEnum(field.indexOptions, field.storePayloads);\n      } else {\n        docsEnum = (FSTDocsEnum) reuse;        \n        if (!docsEnum.canReuse(field.indexOptions, field.storePayloads)) {\n          docsEnum = new FSTDocsEnum(field.indexOptions, field.storePayloads);\n        }\n      }\n      return docsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docs(Bits,DocsEnum,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docs(Bits,DocsEnum,boolean).mjava","sourceNew":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n      decodeMetaData();\n      FSTDocsEnum docsEnum;\n\n      if (needsFreqs && field.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n        return null;\n      } else if (reuse == null || !(reuse instanceof FSTDocsEnum)) {\n        docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n      } else {\n        docsEnum = (FSTDocsEnum) reuse;        \n        if (!docsEnum.canReuse(field.getIndexOptions(), field.hasPayloads())) {\n          docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n        }\n      }\n      return docsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n      decodeMetaData();\n      FSTDocsEnum docsEnum;\n\n      if (needsFreqs && field.indexOptions == IndexOptions.DOCS_ONLY) {\n        return null;\n      } else if (reuse == null || !(reuse instanceof FSTDocsEnum)) {\n        docsEnum = new FSTDocsEnum(field.indexOptions, field.storePayloads);\n      } else {\n        docsEnum = (FSTDocsEnum) reuse;        \n        if (!docsEnum.canReuse(field.indexOptions, field.storePayloads)) {\n          docsEnum = new FSTDocsEnum(field.indexOptions, field.storePayloads);\n        }\n      }\n      return docsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docs(Bits,DocsEnum,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docs(Bits,DocsEnum,boolean).mjava","sourceNew":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n      decodeMetaData();\n      FSTDocsEnum docsEnum;\n\n      if (needsFreqs && field.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n        return null;\n      } else if (reuse == null || !(reuse instanceof FSTDocsEnum)) {\n        docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n      } else {\n        docsEnum = (FSTDocsEnum) reuse;        \n        if (!docsEnum.canReuse(field.getIndexOptions(), field.hasPayloads())) {\n          docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n        }\n      }\n      return docsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n      decodeMetaData();\n      FSTDocsEnum docsEnum;\n\n      if (needsFreqs && field.indexOptions == IndexOptions.DOCS_ONLY) {\n        return null;\n      } else if (reuse == null || !(reuse instanceof FSTDocsEnum)) {\n        docsEnum = new FSTDocsEnum(field.indexOptions, field.storePayloads);\n      } else {\n        docsEnum = (FSTDocsEnum) reuse;        \n        if (!docsEnum.canReuse(field.indexOptions, field.storePayloads)) {\n          docsEnum = new FSTDocsEnum(field.indexOptions, field.storePayloads);\n        }\n      }\n      return docsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docs(Bits,DocsEnum,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docs(Bits,DocsEnum,boolean).mjava","sourceNew":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) {\n      decodeMetaData();\n      FSTDocsEnum docsEnum;\n\n      if (needsFreqs && field.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n        return null;\n      } else if (reuse == null || !(reuse instanceof FSTDocsEnum)) {\n        docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n      } else {\n        docsEnum = (FSTDocsEnum) reuse;        \n        if (!docsEnum.canReuse(field.getIndexOptions(), field.hasPayloads())) {\n          docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n        }\n      }\n      return docsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n      decodeMetaData();\n      FSTDocsEnum docsEnum;\n\n      if (needsFreqs && field.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n        return null;\n      } else if (reuse == null || !(reuse instanceof FSTDocsEnum)) {\n        docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n      } else {\n        docsEnum = (FSTDocsEnum) reuse;        \n        if (!docsEnum.canReuse(field.getIndexOptions(), field.hasPayloads())) {\n          docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n        }\n      }\n      return docsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docs(Bits,DocsEnum,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docs(Bits,DocsEnum,boolean).mjava","sourceNew":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) {\n      decodeMetaData();\n      FSTDocsEnum docsEnum;\n\n      if (needsFreqs && field.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n        return null;\n      } else if (reuse == null || !(reuse instanceof FSTDocsEnum)) {\n        docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n      } else {\n        docsEnum = (FSTDocsEnum) reuse;        \n        if (!docsEnum.canReuse(field.getIndexOptions(), field.hasPayloads())) {\n          docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n        }\n      }\n      return docsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n      decodeMetaData();\n      FSTDocsEnum docsEnum;\n\n      if (needsFreqs && field.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n        return null;\n      } else if (reuse == null || !(reuse instanceof FSTDocsEnum)) {\n        docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n      } else {\n        docsEnum = (FSTDocsEnum) reuse;        \n        if (!docsEnum.canReuse(field.getIndexOptions(), field.hasPayloads())) {\n          docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n        }\n      }\n      return docsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docs(Bits,DocsEnum,boolean).mjava","sourceNew":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) {\n      decodeMetaData();\n      FSTDocsEnum docsEnum;\n\n      if (reuse == null || !(reuse instanceof FSTDocsEnum)) {\n        docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n      } else {\n        docsEnum = (FSTDocsEnum) reuse;        \n        if (!docsEnum.canReuse(field.getIndexOptions(), field.hasPayloads())) {\n          docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n        }\n      }\n      return docsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) {\n      decodeMetaData();\n      FSTDocsEnum docsEnum;\n\n      if (needsFreqs && field.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n        return null;\n      } else if (reuse == null || !(reuse instanceof FSTDocsEnum)) {\n        docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n      } else {\n        docsEnum = (FSTDocsEnum) reuse;        \n        if (!docsEnum.canReuse(field.getIndexOptions(), field.hasPayloads())) {\n          docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n        }\n      }\n      return docsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docs(Bits,DocsEnum,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) {\n      decodeMetaData();\n      FSTDocsEnum docsEnum;\n\n      if (needsFreqs && field.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n        return null;\n      } else if (reuse == null || !(reuse instanceof FSTDocsEnum)) {\n        docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n      } else {\n        docsEnum = (FSTDocsEnum) reuse;        \n        if (!docsEnum.canReuse(field.getIndexOptions(), field.hasPayloads())) {\n          docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n        }\n      }\n      return docsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docs(Bits,DocsEnum,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) {\n      decodeMetaData();\n      FSTDocsEnum docsEnum;\n\n      if (needsFreqs && field.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n        return null;\n      } else if (reuse == null || !(reuse instanceof FSTDocsEnum)) {\n        docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n      } else {\n        docsEnum = (FSTDocsEnum) reuse;        \n        if (!docsEnum.canReuse(field.getIndexOptions(), field.hasPayloads())) {\n          docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n        }\n      }\n      return docsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","02331260bb246364779cb6f04919ca47900d01bb"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02331260bb246364779cb6f04919ca47900d01bb"],"02331260bb246364779cb6f04919ca47900d01bb":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"02331260bb246364779cb6f04919ca47900d01bb":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}