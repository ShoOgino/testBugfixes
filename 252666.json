{"path":"solr/core/src/test/org/apache/solr/request/macro/TestMacroExpander#testOnMissingParams().mjava","commits":[{"id":"e54328e840e7c382f0493f8aea3eea51d03b8225","date":1471858567,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/macro/TestMacroExpander#testOnMissingParams().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOnMissingParams() {\n    final Map<String,String[]> testParams = new HashMap<String,String[]>();\n    final MacroExpander meSkipOnMissingParams = new MacroExpander(testParams);\n    final MacroExpander meFailOnMissingParams = new MacroExpander(testParams, true);\n\n    final String low = \"50\";\n    final String high = \"100\";\n    testParams.put(\"low\", new String[]{ low });\n    testParams.put(\"high\", new String[]{ high });\n\n    final String testQuery = \"q=popularity:[ ${low} TO ${high} ]\";\n\n    //when params all present the expansion results match\n    final String expandedQuery = \"q=popularity:[ \"+low+\" TO \"+high+\" ]\";\n    assertEquals(expandedQuery, meSkipOnMissingParams.expand(testQuery));\n    assertEquals(expandedQuery, meFailOnMissingParams.expand(testQuery));\n\n    //when param(s) missing and have no default the expansion results differ\n    final String expandedLow;\n    final String expandedHigh;\n    if (random().nextBoolean()) { // keep low\n      expandedLow = low;\n    } else {\n      expandedLow = \"\";\n      testParams.remove(\"low\");\n    }\n    if (random().nextBoolean()) { // keep high\n      expandedHigh = high;\n    } else {\n      expandedHigh = \"\";\n      testParams.remove(\"high\");\n    }\n    assertEquals(\"q=popularity:[ \"+expandedLow+\" TO \"+expandedHigh+\" ]\",\n        meSkipOnMissingParams.expand(testQuery));\n    if (testParams.size() < 2) { // at least one of the two parameters missing\n      assertEquals(null, meFailOnMissingParams.expand(testQuery));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c82557b0a8c9d4012f208e5de912ae7500ea351","date":1471888093,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/macro/TestMacroExpander#testOnMissingParams().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOnMissingParams() {\n    final Map<String,String[]> testParams = new HashMap<String,String[]>();\n    final MacroExpander meSkipOnMissingParams = new MacroExpander(testParams);\n    final MacroExpander meFailOnMissingParams = new MacroExpander(testParams, true);\n\n    final String low = \"50\";\n    final String high = \"100\";\n    testParams.put(\"low\", new String[]{ low });\n    testParams.put(\"high\", new String[]{ high });\n\n    final String testQuery = \"q=popularity:[ ${low} TO ${high} ]\";\n\n    //when params all present the expansion results match\n    final String expandedQuery = \"q=popularity:[ \"+low+\" TO \"+high+\" ]\";\n    assertEquals(expandedQuery, meSkipOnMissingParams.expand(testQuery));\n    assertEquals(expandedQuery, meFailOnMissingParams.expand(testQuery));\n\n    //when param(s) missing and have no default the expansion results differ\n    final String expandedLow;\n    final String expandedHigh;\n    if (random().nextBoolean()) { // keep low\n      expandedLow = low;\n    } else {\n      expandedLow = \"\";\n      testParams.remove(\"low\");\n    }\n    if (random().nextBoolean()) { // keep high\n      expandedHigh = high;\n    } else {\n      expandedHigh = \"\";\n      testParams.remove(\"high\");\n    }\n    assertEquals(\"q=popularity:[ \"+expandedLow+\" TO \"+expandedHigh+\" ]\",\n        meSkipOnMissingParams.expand(testQuery));\n    if (testParams.size() < 2) { // at least one of the two parameters missing\n      assertEquals(null, meFailOnMissingParams.expand(testQuery));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/macro/TestMacroExpander#testOnMissingParams().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOnMissingParams() {\n    final Map<String,String[]> testParams = new HashMap<String,String[]>();\n    final MacroExpander meSkipOnMissingParams = new MacroExpander(testParams);\n    final MacroExpander meFailOnMissingParams = new MacroExpander(testParams, true);\n\n    final String low = \"50\";\n    final String high = \"100\";\n    testParams.put(\"low\", new String[]{ low });\n    testParams.put(\"high\", new String[]{ high });\n\n    final String testQuery = \"q=popularity:[ ${low} TO ${high} ]\";\n\n    //when params all present the expansion results match\n    final String expandedQuery = \"q=popularity:[ \"+low+\" TO \"+high+\" ]\";\n    assertEquals(expandedQuery, meSkipOnMissingParams.expand(testQuery));\n    assertEquals(expandedQuery, meFailOnMissingParams.expand(testQuery));\n\n    //when param(s) missing and have no default the expansion results differ\n    final String expandedLow;\n    final String expandedHigh;\n    if (random().nextBoolean()) { // keep low\n      expandedLow = low;\n    } else {\n      expandedLow = \"\";\n      testParams.remove(\"low\");\n    }\n    if (random().nextBoolean()) { // keep high\n      expandedHigh = high;\n    } else {\n      expandedHigh = \"\";\n      testParams.remove(\"high\");\n    }\n    assertEquals(\"q=popularity:[ \"+expandedLow+\" TO \"+expandedHigh+\" ]\",\n        meSkipOnMissingParams.expand(testQuery));\n    if (testParams.size() < 2) { // at least one of the two parameters missing\n      assertEquals(null, meFailOnMissingParams.expand(testQuery));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/macro/TestMacroExpander#testOnMissingParams().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOnMissingParams() {\n    final Map<String,String[]> testParams = new HashMap<String,String[]>();\n    final MacroExpander meSkipOnMissingParams = new MacroExpander(testParams);\n    final MacroExpander meFailOnMissingParams = new MacroExpander(testParams, true);\n\n    final String low = \"50\";\n    final String high = \"100\";\n    testParams.put(\"low\", new String[]{ low });\n    testParams.put(\"high\", new String[]{ high });\n\n    final String testQuery = \"q=popularity:[ ${low} TO ${high} ]\";\n\n    //when params all present the expansion results match\n    final String expandedQuery = \"q=popularity:[ \"+low+\" TO \"+high+\" ]\";\n    assertEquals(expandedQuery, meSkipOnMissingParams.expand(testQuery));\n    assertEquals(expandedQuery, meFailOnMissingParams.expand(testQuery));\n\n    //when param(s) missing and have no default the expansion results differ\n    final String expandedLow;\n    final String expandedHigh;\n    if (random().nextBoolean()) { // keep low\n      expandedLow = low;\n    } else {\n      expandedLow = \"\";\n      testParams.remove(\"low\");\n    }\n    if (random().nextBoolean()) { // keep high\n      expandedHigh = high;\n    } else {\n      expandedHigh = \"\";\n      testParams.remove(\"high\");\n    }\n    assertEquals(\"q=popularity:[ \"+expandedLow+\" TO \"+expandedHigh+\" ]\",\n        meSkipOnMissingParams.expand(testQuery));\n    if (testParams.size() < 2) { // at least one of the two parameters missing\n      assertEquals(null, meFailOnMissingParams.expand(testQuery));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c82557b0a8c9d4012f208e5de912ae7500ea351":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e54328e840e7c382f0493f8aea3eea51d03b8225"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0c82557b0a8c9d4012f208e5de912ae7500ea351"],"e54328e840e7c382f0493f8aea3eea51d03b8225":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"]},"commit2Childs":{"0c82557b0a8c9d4012f208e5de912ae7500ea351":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0c82557b0a8c9d4012f208e5de912ae7500ea351","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","e54328e840e7c382f0493f8aea3eea51d03b8225","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e54328e840e7c382f0493f8aea3eea51d03b8225":["0c82557b0a8c9d4012f208e5de912ae7500ea351"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}