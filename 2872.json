{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#explain(LeafReaderContext,Weight).mjava","commits":[{"id":"e5c16d494b4cccbc6f3aa00f05421575bdb11da7","date":1464182657,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#explain(LeafReaderContext,Weight).mjava","pathOld":"/dev/null","sourceNew":"    public Explanation explain(LeafReaderContext context, Weight childWeight) throws IOException {\n      int start = context.docBase + prevParentDoc + 1; // +1 b/c prevParentDoc is previous parent doc\n      int end = context.docBase + parentDoc - 1; // -1 b/c parentDoc is parent doc\n\n      Explanation bestChild = null;\n      int matches = 0;\n      for (int childDoc = start; childDoc <= end; childDoc++) {\n        Explanation child = childWeight.explain(context, childDoc - context.docBase);\n        if (child.isMatch()) {\n          matches++;\n          if (bestChild == null || child.getValue() > bestChild.getValue()) {\n            bestChild = child;\n          }\n        }\n      }\n\n      return Explanation.match(score(), String.format(Locale.ROOT,\n          \"Score based on %d child docs in range from %d to %d, best match:\", matches, start, end), bestChild\n      );\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#explain(LeafReaderContext,Weight).mjava","pathOld":"/dev/null","sourceNew":"    public Explanation explain(LeafReaderContext context, Weight childWeight) throws IOException {\n      int start = context.docBase + prevParentDoc + 1; // +1 b/c prevParentDoc is previous parent doc\n      int end = context.docBase + parentDoc - 1; // -1 b/c parentDoc is parent doc\n\n      Explanation bestChild = null;\n      int matches = 0;\n      for (int childDoc = start; childDoc <= end; childDoc++) {\n        Explanation child = childWeight.explain(context, childDoc - context.docBase);\n        if (child.isMatch()) {\n          matches++;\n          if (bestChild == null || child.getValue() > bestChild.getValue()) {\n            bestChild = child;\n          }\n        }\n      }\n\n      return Explanation.match(score(), String.format(Locale.ROOT,\n          \"Score based on %d child docs in range from %d to %d, best match:\", matches, start, end), bestChild\n      );\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#explain(LeafReaderContext,Weight).mjava","pathOld":"/dev/null","sourceNew":"    public Explanation explain(LeafReaderContext context, Weight childWeight) throws IOException {\n      int start = context.docBase + prevParentDoc + 1; // +1 b/c prevParentDoc is previous parent doc\n      int end = context.docBase + parentDoc - 1; // -1 b/c parentDoc is parent doc\n\n      Explanation bestChild = null;\n      int matches = 0;\n      for (int childDoc = start; childDoc <= end; childDoc++) {\n        Explanation child = childWeight.explain(context, childDoc - context.docBase);\n        if (child.isMatch()) {\n          matches++;\n          if (bestChild == null || child.getValue() > bestChild.getValue()) {\n            bestChild = child;\n          }\n        }\n      }\n\n      return Explanation.match(score(), String.format(Locale.ROOT,\n          \"Score based on %d child docs in range from %d to %d, best match:\", matches, start, end), bestChild\n      );\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#explain(LeafReaderContext,Weight).mjava","pathOld":"/dev/null","sourceNew":"    public Explanation explain(LeafReaderContext context, Weight childWeight) throws IOException {\n      int start = context.docBase + prevParentDoc + 1; // +1 b/c prevParentDoc is previous parent doc\n      int end = context.docBase + parentDoc - 1; // -1 b/c parentDoc is parent doc\n\n      Explanation bestChild = null;\n      int matches = 0;\n      for (int childDoc = start; childDoc <= end; childDoc++) {\n        Explanation child = childWeight.explain(context, childDoc - context.docBase);\n        if (child.isMatch()) {\n          matches++;\n          if (bestChild == null || child.getValue() > bestChild.getValue()) {\n            bestChild = child;\n          }\n        }\n      }\n\n      return Explanation.match(score(), String.format(Locale.ROOT,\n          \"Score based on %d child docs in range from %d to %d, best match:\", matches, start, end), bestChild\n      );\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c","date":1485769582,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#explain(LeafReaderContext,Weight).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#explain(LeafReaderContext,Weight).mjava","sourceNew":"    public Explanation explain(LeafReaderContext context, Weight childWeight) throws IOException {\n      int prevParentDoc = parentBits.prevSetBit(parentApproximation.docID() - 1);\n      int start = context.docBase + prevParentDoc + 1; // +1 b/c prevParentDoc is previous parent doc\n      int end = context.docBase + parentApproximation.docID() - 1; // -1 b/c parentDoc is parent doc\n\n      Explanation bestChild = null;\n      int matches = 0;\n      for (int childDoc = start; childDoc <= end; childDoc++) {\n        Explanation child = childWeight.explain(context, childDoc - context.docBase);\n        if (child.isMatch()) {\n          matches++;\n          if (bestChild == null || child.getValue() > bestChild.getValue()) {\n            bestChild = child;\n          }\n        }\n      }\n\n      assert freq() == matches;\n      return Explanation.match(score(), String.format(Locale.ROOT,\n          \"Score based on %d child docs in range from %d to %d, best match:\", matches, start, end), bestChild\n      );\n    }\n\n","sourceOld":"    public Explanation explain(LeafReaderContext context, Weight childWeight) throws IOException {\n      int start = context.docBase + prevParentDoc + 1; // +1 b/c prevParentDoc is previous parent doc\n      int end = context.docBase + parentDoc - 1; // -1 b/c parentDoc is parent doc\n\n      Explanation bestChild = null;\n      int matches = 0;\n      for (int childDoc = start; childDoc <= end; childDoc++) {\n        Explanation child = childWeight.explain(context, childDoc - context.docBase);\n        if (child.isMatch()) {\n          matches++;\n          if (bestChild == null || child.getValue() > bestChild.getValue()) {\n            bestChild = child;\n          }\n        }\n      }\n\n      return Explanation.match(score(), String.format(Locale.ROOT,\n          \"Score based on %d child docs in range from %d to %d, best match:\", matches, start, end), bestChild\n      );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#explain(LeafReaderContext,Weight).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#explain(LeafReaderContext,Weight).mjava","sourceNew":"    public Explanation explain(LeafReaderContext context, Weight childWeight) throws IOException {\n      int prevParentDoc = parentBits.prevSetBit(parentApproximation.docID() - 1);\n      int start = context.docBase + prevParentDoc + 1; // +1 b/c prevParentDoc is previous parent doc\n      int end = context.docBase + parentApproximation.docID() - 1; // -1 b/c parentDoc is parent doc\n\n      Explanation bestChild = null;\n      int matches = 0;\n      for (int childDoc = start; childDoc <= end; childDoc++) {\n        Explanation child = childWeight.explain(context, childDoc - context.docBase);\n        if (child.isMatch()) {\n          matches++;\n          if (bestChild == null || child.getValue() > bestChild.getValue()) {\n            bestChild = child;\n          }\n        }\n      }\n\n      assert freq() == matches;\n      return Explanation.match(score(), String.format(Locale.ROOT,\n          \"Score based on %d child docs in range from %d to %d, best match:\", matches, start, end), bestChild\n      );\n    }\n\n","sourceOld":"    public Explanation explain(LeafReaderContext context, Weight childWeight) throws IOException {\n      int start = context.docBase + prevParentDoc + 1; // +1 b/c prevParentDoc is previous parent doc\n      int end = context.docBase + parentDoc - 1; // -1 b/c parentDoc is parent doc\n\n      Explanation bestChild = null;\n      int matches = 0;\n      for (int childDoc = start; childDoc <= end; childDoc++) {\n        Explanation child = childWeight.explain(context, childDoc - context.docBase);\n        if (child.isMatch()) {\n          matches++;\n          if (bestChild == null || child.getValue() > bestChild.getValue()) {\n            bestChild = child;\n          }\n        }\n      }\n\n      return Explanation.match(score(), String.format(Locale.ROOT,\n          \"Score based on %d child docs in range from %d to %d, best match:\", matches, start, end), bestChild\n      );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc14da055888b63b4f8c922d0e1579f3cb315ad7","date":1510744456,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#explain(LeafReaderContext,Weight).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#explain(LeafReaderContext,Weight).mjava","sourceNew":"    public Explanation explain(LeafReaderContext context, Weight childWeight) throws IOException {\n      int prevParentDoc = parentBits.prevSetBit(parentApproximation.docID() - 1);\n      int start = context.docBase + prevParentDoc + 1; // +1 b/c prevParentDoc is previous parent doc\n      int end = context.docBase + parentApproximation.docID() - 1; // -1 b/c parentDoc is parent doc\n\n      Explanation bestChild = null;\n      int matches = 0;\n      for (int childDoc = start; childDoc <= end; childDoc++) {\n        Explanation child = childWeight.explain(context, childDoc - context.docBase);\n        if (child.isMatch()) {\n          matches++;\n          if (bestChild == null || child.getValue() > bestChild.getValue()) {\n            bestChild = child;\n          }\n        }\n      }\n\n      return Explanation.match(score(), String.format(Locale.ROOT,\n          \"Score based on %d child docs in range from %d to %d, best match:\", matches, start, end), bestChild\n      );\n    }\n\n","sourceOld":"    public Explanation explain(LeafReaderContext context, Weight childWeight) throws IOException {\n      int prevParentDoc = parentBits.prevSetBit(parentApproximation.docID() - 1);\n      int start = context.docBase + prevParentDoc + 1; // +1 b/c prevParentDoc is previous parent doc\n      int end = context.docBase + parentApproximation.docID() - 1; // -1 b/c parentDoc is parent doc\n\n      Explanation bestChild = null;\n      int matches = 0;\n      for (int childDoc = start; childDoc <= end; childDoc++) {\n        Explanation child = childWeight.explain(context, childDoc - context.docBase);\n        if (child.isMatch()) {\n          matches++;\n          if (bestChild == null || child.getValue() > bestChild.getValue()) {\n            bestChild = child;\n          }\n        }\n      }\n\n      assert freq() == matches;\n      return Explanation.match(score(), String.format(Locale.ROOT,\n          \"Score based on %d child docs in range from %d to %d, best match:\", matches, start, end), bestChild\n      );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#explain(LeafReaderContext,Weight).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#explain(LeafReaderContext,Weight).mjava","sourceNew":"    public Explanation explain(LeafReaderContext context, Weight childWeight) throws IOException {\n      int prevParentDoc = parentBits.prevSetBit(parentApproximation.docID() - 1);\n      int start = context.docBase + prevParentDoc + 1; // +1 b/c prevParentDoc is previous parent doc\n      int end = context.docBase + parentApproximation.docID() - 1; // -1 b/c parentDoc is parent doc\n\n      Explanation bestChild = null;\n      int matches = 0;\n      for (int childDoc = start; childDoc <= end; childDoc++) {\n        Explanation child = childWeight.explain(context, childDoc - context.docBase);\n        if (child.isMatch()) {\n          matches++;\n          if (bestChild == null || child.getValue().floatValue() > bestChild.getValue().floatValue()) {\n            bestChild = child;\n          }\n        }\n      }\n\n      return Explanation.match(score(), String.format(Locale.ROOT,\n          \"Score based on %d child docs in range from %d to %d, best match:\", matches, start, end), bestChild\n      );\n    }\n\n","sourceOld":"    public Explanation explain(LeafReaderContext context, Weight childWeight) throws IOException {\n      int prevParentDoc = parentBits.prevSetBit(parentApproximation.docID() - 1);\n      int start = context.docBase + prevParentDoc + 1; // +1 b/c prevParentDoc is previous parent doc\n      int end = context.docBase + parentApproximation.docID() - 1; // -1 b/c parentDoc is parent doc\n\n      Explanation bestChild = null;\n      int matches = 0;\n      for (int childDoc = start; childDoc <= end; childDoc++) {\n        Explanation child = childWeight.explain(context, childDoc - context.docBase);\n        if (child.isMatch()) {\n          matches++;\n          if (bestChild == null || child.getValue() > bestChild.getValue()) {\n            bestChild = child;\n          }\n        }\n      }\n\n      return Explanation.match(score(), String.format(Locale.ROOT,\n          \"Score based on %d child docs in range from %d to %d, best match:\", matches, start, end), bestChild\n      );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e5c16d494b4cccbc6f3aa00f05421575bdb11da7"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c"],"ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"e5c16d494b4cccbc6f3aa00f05421575bdb11da7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"]},"commit2Childs":{"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","e5c16d494b4cccbc6f3aa00f05421575bdb11da7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c":["dc14da055888b63b4f8c922d0e1579f3cb315ad7","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"e5c16d494b4cccbc6f3aa00f05421575bdb11da7":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","83870855d82aba6819217abeff5a40779dbb28b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}