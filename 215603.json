{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean,boolean).mjava","commits":[{"id":"5455c7b3fed6c1671990a44c19071cb0488c2c25","date":1413557414,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration, boolean joinAtHead)\n      throws InterruptedException, KeeperException, IOException {\n    // look for old context - if we find it, cancel it\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    \n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n    \n    ElectionContext prevContext = electionContexts.get(contextKey);\n    \n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n \n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false, joinAtHead);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    // look for old context - if we find it, cancel it\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    \n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n    \n    ElectionContext prevContext = electionContexts.get(contextKey);\n    \n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n \n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration, boolean joinAtHead)\n      throws InterruptedException, KeeperException, IOException {\n    // look for old context - if we find it, cancel it\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    \n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n    \n    ElectionContext prevContext = electionContexts.get(contextKey);\n    \n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n \n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false, joinAtHead);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    // look for old context - if we find it, cancel it\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    \n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n    \n    ElectionContext prevContext = electionContexts.get(contextKey);\n    \n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n \n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6b620c271c84c0f14919eec7b90083b292ee51","date":1419461736,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean,boolean).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration, boolean joinAtHead)\n      throws InterruptedException, KeeperException, IOException {\n    // look for old context - if we find it, cancel it\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    \n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n    \n    ElectionContext prevContext = electionContexts.get(contextKey);\n    \n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n \n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n\n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false, joinAtHead);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration, boolean joinAtHead)\n      throws InterruptedException, KeeperException, IOException {\n    // look for old context - if we find it, cancel it\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    \n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n    \n    ElectionContext prevContext = electionContexts.get(contextKey);\n    \n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n \n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false, joinAtHead);\n  }\n\n","bugFix":null,"bugIntro":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean,boolean).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration, boolean joinAtHead)\n      throws InterruptedException, KeeperException, IOException {\n    // look for old context - if we find it, cancel it\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n\n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n\n    ElectionContext prevContext = electionContexts.get(contextKey);\n\n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n\n    String shardId = cd.getCloudDescriptor().getShardId();\n\n    Map<String, Object> props = new HashMap<>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n\n\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n\n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false, joinAtHead);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration, boolean joinAtHead)\n      throws InterruptedException, KeeperException, IOException {\n    // look for old context - if we find it, cancel it\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    \n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n    \n    ElectionContext prevContext = electionContexts.get(contextKey);\n    \n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n \n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n\n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false, joinAtHead);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean,boolean).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration, boolean joinAtHead)\n      throws InterruptedException, KeeperException, IOException {\n    // look for old context - if we find it, cancel it\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n\n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n\n    ElectionContext prevContext = electionContexts.get(contextKey);\n\n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n\n    String shardId = cd.getCloudDescriptor().getShardId();\n\n    Map<String, Object> props = new HashMap<>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n\n\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n\n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false, joinAtHead);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration, boolean joinAtHead)\n      throws InterruptedException, KeeperException, IOException {\n    // look for old context - if we find it, cancel it\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    \n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n    \n    ElectionContext prevContext = electionContexts.get(contextKey);\n    \n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n \n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n\n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false, joinAtHead);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064","date":1441124018,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean,boolean).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration, boolean joinAtHead)\n      throws InterruptedException, KeeperException, IOException {\n    // look for old context - if we find it, cancel it\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n\n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n\n    ElectionContext prevContext = electionContexts.get(contextKey);\n\n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n\n    String shardId = cd.getCloudDescriptor().getShardId();\n\n    Map<String, Object> props = new HashMap<>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    props.put(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n\n\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n    LeaderElector leaderElector = new LeaderElector(zkClient, contextKey, electionContexts);\n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false, joinAtHead);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration, boolean joinAtHead)\n      throws InterruptedException, KeeperException, IOException {\n    // look for old context - if we find it, cancel it\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n\n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n\n    ElectionContext prevContext = electionContexts.get(contextKey);\n\n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n\n    String shardId = cd.getCloudDescriptor().getShardId();\n\n    Map<String, Object> props = new HashMap<>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n\n\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n\n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false, joinAtHead);\n  }\n\n","bugFix":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["4e6b620c271c84c0f14919eec7b90083b292ee51","fbcfc050b9f253136eaa5950b57248b2109eac11"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["5455c7b3fed6c1671990a44c19071cb0488c2c25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["4e6b620c271c84c0f14919eec7b90083b292ee51"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","4e6b620c271c84c0f14919eec7b90083b292ee51"],"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbcfc050b9f253136eaa5950b57248b2109eac11"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}