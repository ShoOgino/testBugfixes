{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollectionInOneInstance(SolrClient,String,ThreadPoolExecutor,String,int,int).mjava","commits":[{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollectionInOneInstance(SolrClient,String,ThreadPoolExecutor,String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","sourceNew":"  /**\n   * Create a collection in single node\n   */\n  protected void createCollectionInOneInstance(final SolrClient client, String nodeName,\n                                               ThreadPoolExecutor executor, final String collection,\n                                               final int numShards, int numReplicas) {\n    assertNotNull(nodeName);\n    try {\n      assertEquals(0, CollectionAdminRequest.createCollection(collection, \"conf1\", numShards, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n    for (int i = 0; i < numReplicas; i++) {\n      final int freezeI = i;\n      executor.execute(() -> {\n        try {\n          assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard\"+((freezeI%numShards)+1))\n              .setCoreName(collection + freezeI)\n              .setNode(nodeName).process(client).isSuccess());\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n      });\n    }\n  }\n\n","sourceOld":"  protected void createCores(final HttpSolrClient client,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    try {\n      assertEquals(0, CollectionAdminRequest.createCollection(collection, \"conf1\", numShards, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n    String nodeName = null;\n    for (JettySolrRunner jetty : jettys) {\n      if (client.getBaseURL().contains(\":\"+jetty.getLocalPort())) {\n        nodeName = jetty.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(nodeName);\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      final String freezeNodename = nodeName;\n      executor.execute(() -> {\n        try {\n          assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard\"+((freezeI%numShards)+1))\n              .setCoreName(collection + freezeI)\n              .setNode(freezeNodename).process(client).isSuccess());\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollectionInOneInstance(SolrClient,String,ThreadPoolExecutor,String,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a collection in single node\n   */\n  protected void createCollectionInOneInstance(final SolrClient client, String nodeName,\n                                               ThreadPoolExecutor executor, final String collection,\n                                               final int numShards, int numReplicas) {\n    assertNotNull(nodeName);\n    try {\n      assertEquals(0, CollectionAdminRequest.createCollection(collection, \"conf1\", numShards, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n    for (int i = 0; i < numReplicas; i++) {\n      final int freezeI = i;\n      executor.execute(() -> {\n        try {\n          assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard\"+((freezeI%numShards)+1))\n              .setCoreName(collection + freezeI)\n              .setNode(nodeName).process(client).isSuccess());\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n      });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollectionInOneInstance(SolrClient,String,ThreadPoolExecutor,String,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a collection in single node\n   */\n  protected void createCollectionInOneInstance(final SolrClient client, String nodeName,\n                                               ThreadPoolExecutor executor, final String collection,\n                                               final int numShards, int numReplicas) {\n    assertNotNull(nodeName);\n    try {\n      assertEquals(0, CollectionAdminRequest.createCollection(collection, \"conf1\", numShards, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n    } catch (SolrServerException | IOException e) {\n      throw new RuntimeException(e);\n    }\n    for (int i = 0; i < numReplicas; i++) {\n      final int freezeI = i;\n      executor.execute(() -> {\n        try {\n          assertTrue(CollectionAdminRequest.addReplicaToShard(collection, \"shard\"+((freezeI%numShards)+1))\n              .setCoreName(collection + freezeI)\n              .setNode(nodeName).process(client).isSuccess());\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n      });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}