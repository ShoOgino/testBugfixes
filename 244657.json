{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","commits":[{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testErrorPropagation() throws Exception {\n\n    //Test error propagation\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include atleast one aggregate function\"));\n        }\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore(\"Fix error checking\")\n  @Test\n  public void testErrorPropagation() throws Exception {\n\n    //Test error propagation\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include at least one aggregate function\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testErrorPropagation() throws Exception {\n\n    //Test error propagation\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include atleast one aggregate function\"));\n        }\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456b9f37ef1e5cc180f49b88b21723eb32c846fa","date":1462543026,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","sourceNew":"  @Test\n  public void testErrorPropagation() throws Exception {\n    //Test error propagation\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include atleast one aggregate function\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testErrorPropagation() throws Exception {\n\n    //Test error propagation\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include atleast one aggregate function\"));\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testErrorPropagation() throws Exception {\n    //Test error propagation\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include atleast one aggregate function\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ed48f5b71f8e351d6f0c865d8fc52b9d231960f","date":1463024946,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","sourceNew":"  @Test\n  public void testErrorPropagation() throws Exception {\n    //Test error propagation\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include at least one aggregate function\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testErrorPropagation() throws Exception {\n    //Test error propagation\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include atleast one aggregate function\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","sourceNew":"  @Test\n  public void testErrorPropagation() throws Exception {\n    //Test error propagation\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include at least one aggregate function\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testErrorPropagation() throws Exception {\n    //Test error propagation\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include atleast one aggregate function\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","sourceNew":"  @Ignore(\"Fix error checking\")\n  @Test\n  public void testErrorPropagation() throws Exception {\n    //Test error propagation\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include at least one aggregate function\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Ignore(\"Fix error checking\")\n  @Test\n  public void testErrorPropagation() throws Exception {\n\n    //Test error propagation\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include at least one aggregate function\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","sourceNew":"  @Test\n  public void testErrorPropagation() throws Exception {\n    //Test error propagation\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=\" + COLLECTIONORALIAS, props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from \" + COLLECTIONORALIAS + \" group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include at least one aggregate function\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testErrorPropagation() throws Exception {\n    //Test error propagation\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include at least one aggregate function\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","sourceNew":"  @Ignore(\"Fix error checking\")\n  @Test\n  public void testErrorPropagation() throws Exception {\n    //Test error propagation\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=\" + COLLECTIONORALIAS, props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from \" + COLLECTIONORALIAS + \" group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include at least one aggregate function\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Ignore(\"Fix error checking\")\n  @Test\n  public void testErrorPropagation() throws Exception {\n    //Test error propagation\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include at least one aggregate function\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":3,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","sourceNew":"  @Ignore(\"Fix error checking\")\n  @Test\n  public void testErrorPropagation() throws Exception {\n    //Test error propagation\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=\" + COLLECTIONORALIAS, props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from \" + COLLECTIONORALIAS + \" group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include at least one aggregate function\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testErrorPropagation() throws Exception {\n    //Test error propagation\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=\" + COLLECTIONORALIAS, props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from \" + COLLECTIONORALIAS + \" group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include at least one aggregate function\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testErrorPropagation().mjava","sourceNew":"  @Ignore(\"Fix error checking\")\n  @Test\n  @SuppressWarnings({\"try\"})\n  public void testErrorPropagation() throws Exception {\n    //Test error propagation\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=\" + COLLECTIONORALIAS, props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from \" + COLLECTIONORALIAS + \" group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include at least one aggregate function\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Ignore(\"Fix error checking\")\n  @Test\n  public void testErrorPropagation() throws Exception {\n    //Test error propagation\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=\" + COLLECTIONORALIAS, props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from \" + COLLECTIONORALIAS + \" group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include at least one aggregate function\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b940572a59da1b42b6c20ab5278155b12816807a"],"b940572a59da1b42b6c20ab5278155b12816807a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["456b9f37ef1e5cc180f49b88b21723eb32c846fa","5ed48f5b71f8e351d6f0c865d8fc52b9d231960f"],"456b9f37ef1e5cc180f49b88b21723eb32c846fa":["73450c0955930295d34703e7ddbfc6973b7a121a"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b940572a59da1b42b6c20ab5278155b12816807a"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["8c969f15cd04d31e520319c619a445ae21f02d72","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","456b9f37ef1e5cc180f49b88b21723eb32c846fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"8c969f15cd04d31e520319c619a445ae21f02d72":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5ed48f5b71f8e351d6f0c865d8fc52b9d231960f":["456b9f37ef1e5cc180f49b88b21723eb32c846fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"73450c0955930295d34703e7ddbfc6973b7a121a":["456b9f37ef1e5cc180f49b88b21723eb32c846fa"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"456b9f37ef1e5cc180f49b88b21723eb32c846fa":["d470c8182e92b264680e34081b75e70a9f2b3c89","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","5ed48f5b71f8e351d6f0c865d8fc52b9d231960f"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["9ba1b632c041956c93c41aa1143d16a567014891"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"5ed48f5b71f8e351d6f0c865d8fc52b9d231960f":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"8c969f15cd04d31e520319c619a445ae21f02d72":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}