{"path":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#modifyNormsForF1(IndexReader).mjava","commits":[{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#modifyNormsForF1(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private void modifyNormsForF1(IndexReader ir) throws IOException {\n    int n = ir.maxDoc();\n    // System.out.println(\"modifyNormsForF1 maxDoc: \"+n);\n    for (int i = 0; i < n; i += 3) { // modify for every third doc\n      int k = (i * 3) % modifiedNorms.size();\n      float origNorm = ((Float) modifiedNorms.get(i)).floatValue();\n      float newNorm = ((Float) modifiedNorms.get(k)).floatValue();\n      // System.out.println(\"Modifying: for \"+i+\" from \"+origNorm+\" to\n      // \"+newNorm);\n      // System.out.println(\" and: for \"+k+\" from \"+newNorm+\" to \"+origNorm);\n      modifiedNorms.set(i, new Float(newNorm));\n      modifiedNorms.set(k, new Float(origNorm));\n      ir.setNorm(i, \"f\" + 1, newNorm);\n      ir.setNorm(k, \"f\" + 1, origNorm);\n      // System.out.println(\"setNorm i: \"+i);\n      // break;\n    }\n    // ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#modifyNormsForF1(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#modifyNormsForF1(IndexReader).mjava","sourceNew":"  private void modifyNormsForF1(IndexReader ir) throws IOException {\n    int n = ir.maxDoc();\n    // System.out.println(\"modifyNormsForF1 maxDoc: \"+n);\n    for (int i = 0; i < n; i += 3) { // modify for every third doc\n      int k = (i * 3) % modifiedNorms.size();\n      float origNorm = ((Float) modifiedNorms.get(i)).floatValue();\n      float newNorm = ((Float) modifiedNorms.get(k)).floatValue();\n      // System.out.println(\"Modifying: for \"+i+\" from \"+origNorm+\" to\n      // \"+newNorm);\n      // System.out.println(\" and: for \"+k+\" from \"+newNorm+\" to \"+origNorm);\n      modifiedNorms.set(i, Float.valueOf(newNorm));\n      modifiedNorms.set(k, Float.valueOf(origNorm));\n      ir.setNorm(i, \"f\" + 1, newNorm);\n      ir.setNorm(k, \"f\" + 1, origNorm);\n      // System.out.println(\"setNorm i: \"+i);\n      // break;\n    }\n    // ir.close();\n  }\n\n","sourceOld":"  private void modifyNormsForF1(IndexReader ir) throws IOException {\n    int n = ir.maxDoc();\n    // System.out.println(\"modifyNormsForF1 maxDoc: \"+n);\n    for (int i = 0; i < n; i += 3) { // modify for every third doc\n      int k = (i * 3) % modifiedNorms.size();\n      float origNorm = ((Float) modifiedNorms.get(i)).floatValue();\n      float newNorm = ((Float) modifiedNorms.get(k)).floatValue();\n      // System.out.println(\"Modifying: for \"+i+\" from \"+origNorm+\" to\n      // \"+newNorm);\n      // System.out.println(\" and: for \"+k+\" from \"+newNorm+\" to \"+origNorm);\n      modifiedNorms.set(i, new Float(newNorm));\n      modifiedNorms.set(k, new Float(origNorm));\n      ir.setNorm(i, \"f\" + 1, newNorm);\n      ir.setNorm(k, \"f\" + 1, origNorm);\n      // System.out.println(\"setNorm i: \"+i);\n      // break;\n    }\n    // ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7848880b3c06f09f0f3ac50d0854b16efb0b815e","date":1260006234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#modifyNormsForF1(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#modifyNormsForF1(IndexReader).mjava","sourceNew":"  private void modifyNormsForF1(IndexReader ir) throws IOException {\n    int n = ir.maxDoc();\n    // System.out.println(\"modifyNormsForF1 maxDoc: \"+n);\n    for (int i = 0; i < n; i += 3) { // modify for every third doc\n      int k = (i * 3) % modifiedNorms.size();\n      float origNorm =  modifiedNorms.get(i).floatValue();\n      float newNorm =  modifiedNorms.get(k).floatValue();\n      // System.out.println(\"Modifying: for \"+i+\" from \"+origNorm+\" to\n      // \"+newNorm);\n      // System.out.println(\" and: for \"+k+\" from \"+newNorm+\" to \"+origNorm);\n      modifiedNorms.set(i, Float.valueOf(newNorm));\n      modifiedNorms.set(k, Float.valueOf(origNorm));\n      ir.setNorm(i, \"f\" + 1, newNorm);\n      ir.setNorm(k, \"f\" + 1, origNorm);\n      // System.out.println(\"setNorm i: \"+i);\n      // break;\n    }\n    // ir.close();\n  }\n\n","sourceOld":"  private void modifyNormsForF1(IndexReader ir) throws IOException {\n    int n = ir.maxDoc();\n    // System.out.println(\"modifyNormsForF1 maxDoc: \"+n);\n    for (int i = 0; i < n; i += 3) { // modify for every third doc\n      int k = (i * 3) % modifiedNorms.size();\n      float origNorm = ((Float) modifiedNorms.get(i)).floatValue();\n      float newNorm = ((Float) modifiedNorms.get(k)).floatValue();\n      // System.out.println(\"Modifying: for \"+i+\" from \"+origNorm+\" to\n      // \"+newNorm);\n      // System.out.println(\" and: for \"+k+\" from \"+newNorm+\" to \"+origNorm);\n      modifiedNorms.set(i, Float.valueOf(newNorm));\n      modifiedNorms.set(k, Float.valueOf(origNorm));\n      ir.setNorm(i, \"f\" + 1, newNorm);\n      ir.setNorm(k, \"f\" + 1, origNorm);\n      // System.out.println(\"setNorm i: \"+i);\n      // break;\n    }\n    // ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#modifyNormsForF1(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#modifyNormsForF1(IndexReader).mjava","sourceNew":"  private void modifyNormsForF1(IndexReader ir) throws IOException {\n    int n = ir.maxDoc();\n    // System.out.println(\"modifyNormsForF1 maxDoc: \"+n);\n    for (int i = 0; i < n; i += 3) { // modify for every third doc\n      int k = (i * 3) % modifiedNorms.size();\n      float origNorm =  modifiedNorms.get(i).floatValue();\n      float newNorm =  modifiedNorms.get(k).floatValue();\n      // System.out.println(\"Modifying: for \"+i+\" from \"+origNorm+\" to\n      // \"+newNorm);\n      // System.out.println(\" and: for \"+k+\" from \"+newNorm+\" to \"+origNorm);\n      modifiedNorms.set(i, Float.valueOf(newNorm));\n      modifiedNorms.set(k, Float.valueOf(origNorm));\n      ir.setNorm(i, \"f\" + 1, newNorm);\n      ir.setNorm(k, \"f\" + 1, origNorm);\n      // System.out.println(\"setNorm i: \"+i);\n      // break;\n    }\n    // ir.close();\n  }\n\n","sourceOld":"  private void modifyNormsForF1(IndexReader ir) throws IOException {\n    int n = ir.maxDoc();\n    // System.out.println(\"modifyNormsForF1 maxDoc: \"+n);\n    for (int i = 0; i < n; i += 3) { // modify for every third doc\n      int k = (i * 3) % modifiedNorms.size();\n      float origNorm =  modifiedNorms.get(i).floatValue();\n      float newNorm =  modifiedNorms.get(k).floatValue();\n      // System.out.println(\"Modifying: for \"+i+\" from \"+origNorm+\" to\n      // \"+newNorm);\n      // System.out.println(\" and: for \"+k+\" from \"+newNorm+\" to \"+origNorm);\n      modifiedNorms.set(i, Float.valueOf(newNorm));\n      modifiedNorms.set(k, Float.valueOf(origNorm));\n      ir.setNorm(i, \"f\" + 1, newNorm);\n      ir.setNorm(k, \"f\" + 1, origNorm);\n      // System.out.println(\"setNorm i: \"+i);\n      // break;\n    }\n    // ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6bcde5e3f23911110baa101ed062b544162825b5":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["6bcde5e3f23911110baa101ed062b544162825b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["6bcde5e3f23911110baa101ed062b544162825b5"],"6bcde5e3f23911110baa101ed062b544162825b5":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}