{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (hasMoreTokensInClone) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        clonedToken.copyTo(this);\n        termAtt.copyBuffer(clonedTermAtt.buffer(), start, end - start);\n        offsetAtt.setOffset(clonedOffsetAtt.startOffset() + start, clonedOffsetAtt.startOffset() + end);\n        if (handlePosIncr) posAtt.setPositionIncrement(1);\n        return true;\n      }\n      hasMoreTokensInClone = false;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (termAtt.length() == 0 || UnicodeBlock.of(termAtt.charAt(0)) != UnicodeBlock.THAI) {\n      return true;\n    }\n    \n    hasMoreTokensInClone = true;\n\n    // we lazy init the cloned token, as in ctor not all attributes may be added\n    if (clonedToken == null) {\n      clonedToken = cloneAttributes();\n      clonedTermAtt = clonedToken.getAttribute(CharTermAttribute.class);\n      clonedOffsetAtt = clonedToken.getAttribute(OffsetAttribute.class);\n    } else {\n      this.copyTo(clonedToken);\n    }\n    \n    // reinit CharacterIterator\n    charIterator.array = clonedTermAtt.buffer();\n    charIterator.offset = 0;\n    charIterator.count = clonedTermAtt.length();\n    breaker.setText(charIterator);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setLength(end);\n      offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.startOffset() + end);\n      // position increment keeps as it is for first token\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (hasMoreTokensInClone) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        clonedToken.copyTo(this);\n        termAtt.copyBuffer(clonedTermAtt.buffer(), start, end - start);\n        offsetAtt.setOffset(clonedOffsetAtt.startOffset() + start, clonedOffsetAtt.startOffset() + end);\n        if (handlePosIncr) posAtt.setPositionIncrement(1);\n        return true;\n      }\n      hasMoreTokensInClone = false;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (termAtt.length() == 0 || UnicodeBlock.of(termAtt.charAt(0)) != UnicodeBlock.THAI) {\n      return true;\n    }\n    \n    hasMoreTokensInClone = true;\n\n    // we lazy init the cloned token, as in ctor not all attributes may be added\n    if (clonedToken == null) {\n      clonedToken = cloneAttributes();\n      clonedTermAtt = clonedToken.getAttribute(CharTermAttribute.class);\n      clonedOffsetAtt = clonedToken.getAttribute(OffsetAttribute.class);\n    } else {\n      this.copyTo(clonedToken);\n    }\n    \n    // reinit CharacterIterator\n    charIterator.array = clonedTermAtt.buffer();\n    charIterator.offset = 0;\n    charIterator.count = clonedTermAtt.length();\n    breaker.setText(charIterator);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setLength(end);\n      offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.startOffset() + end);\n      // position increment keeps as it is for first token\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3873cfa0d4054c121a5f727f84dba2cffd567167","date":1319381725,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (hasMoreTokensInClone) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        clonedToken.copyTo(this);\n        termAtt.copyBuffer(clonedTermAtt.buffer(), start, end - start);\n        offsetAtt.setOffset(clonedOffsetAtt.startOffset() + start, clonedOffsetAtt.startOffset() + end);\n        if (handlePosIncr) posAtt.setPositionIncrement(1);\n        return true;\n      }\n      hasMoreTokensInClone = false;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (termAtt.length() == 0 || UnicodeBlock.of(termAtt.charAt(0)) != UnicodeBlock.THAI) {\n      return true;\n    }\n    \n    hasMoreTokensInClone = true;\n\n    // we lazy init the cloned token, as in ctor not all attributes may be added\n    if (clonedToken == null) {\n      clonedToken = cloneAttributes();\n      clonedTermAtt = clonedToken.getAttribute(CharTermAttribute.class);\n      clonedOffsetAtt = clonedToken.getAttribute(OffsetAttribute.class);\n    } else {\n      this.copyTo(clonedToken);\n    }\n    \n    // reinit CharacterIterator\n    charIterator.setText(clonedTermAtt.buffer(), 0, clonedTermAtt.length());\n    breaker.setText(charIterator);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setLength(end);\n      offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.startOffset() + end);\n      // position increment keeps as it is for first token\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (hasMoreTokensInClone) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        clonedToken.copyTo(this);\n        termAtt.copyBuffer(clonedTermAtt.buffer(), start, end - start);\n        offsetAtt.setOffset(clonedOffsetAtt.startOffset() + start, clonedOffsetAtt.startOffset() + end);\n        if (handlePosIncr) posAtt.setPositionIncrement(1);\n        return true;\n      }\n      hasMoreTokensInClone = false;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (termAtt.length() == 0 || UnicodeBlock.of(termAtt.charAt(0)) != UnicodeBlock.THAI) {\n      return true;\n    }\n    \n    hasMoreTokensInClone = true;\n\n    // we lazy init the cloned token, as in ctor not all attributes may be added\n    if (clonedToken == null) {\n      clonedToken = cloneAttributes();\n      clonedTermAtt = clonedToken.getAttribute(CharTermAttribute.class);\n      clonedOffsetAtt = clonedToken.getAttribute(OffsetAttribute.class);\n    } else {\n      this.copyTo(clonedToken);\n    }\n    \n    // reinit CharacterIterator\n    charIterator.array = clonedTermAtt.buffer();\n    charIterator.offset = 0;\n    charIterator.count = clonedTermAtt.length();\n    breaker.setText(charIterator);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setLength(end);\n      offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.startOffset() + end);\n      // position increment keeps as it is for first token\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":["e04cd57d69cd012c394228709e3ebd001ed9cde5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e477c2108982ba9974f73aa8800270c75cb4971","date":1327277332,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (hasMoreTokensInClone) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        clonedToken.copyTo(this);\n        termAtt.copyBuffer(clonedTermAtt.buffer(), start, end - start);\n        if (hasIllegalOffsets) {\n          offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.endOffset());\n        } else {\n          offsetAtt.setOffset(clonedOffsetAtt.startOffset() + start, clonedOffsetAtt.startOffset() + end);\n        }\n        if (handlePosIncr) posAtt.setPositionIncrement(1);\n        return true;\n      }\n      hasMoreTokensInClone = false;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (termAtt.length() == 0 || UnicodeBlock.of(termAtt.charAt(0)) != UnicodeBlock.THAI) {\n      return true;\n    }\n    \n    hasMoreTokensInClone = true;\n    \n    // if length by start + end offsets doesn't match the term text then assume\n    // this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = offsetAtt.endOffset() - offsetAtt.startOffset() != termAtt.length();\n\n    // we lazy init the cloned token, as in ctor not all attributes may be added\n    if (clonedToken == null) {\n      clonedToken = cloneAttributes();\n      clonedTermAtt = clonedToken.getAttribute(CharTermAttribute.class);\n      clonedOffsetAtt = clonedToken.getAttribute(OffsetAttribute.class);\n    } else {\n      this.copyTo(clonedToken);\n    }\n    \n    // reinit CharacterIterator\n    charIterator.setText(clonedTermAtt.buffer(), 0, clonedTermAtt.length());\n    breaker.setText(charIterator);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setLength(end);\n      if (hasIllegalOffsets) {\n        offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.endOffset());\n      } else {\n        offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.startOffset() + end);\n      }\n      // position increment keeps as it is for first token\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (hasMoreTokensInClone) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        clonedToken.copyTo(this);\n        termAtt.copyBuffer(clonedTermAtt.buffer(), start, end - start);\n        offsetAtt.setOffset(clonedOffsetAtt.startOffset() + start, clonedOffsetAtt.startOffset() + end);\n        if (handlePosIncr) posAtt.setPositionIncrement(1);\n        return true;\n      }\n      hasMoreTokensInClone = false;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (termAtt.length() == 0 || UnicodeBlock.of(termAtt.charAt(0)) != UnicodeBlock.THAI) {\n      return true;\n    }\n    \n    hasMoreTokensInClone = true;\n\n    // we lazy init the cloned token, as in ctor not all attributes may be added\n    if (clonedToken == null) {\n      clonedToken = cloneAttributes();\n      clonedTermAtt = clonedToken.getAttribute(CharTermAttribute.class);\n      clonedOffsetAtt = clonedToken.getAttribute(OffsetAttribute.class);\n    } else {\n      this.copyTo(clonedToken);\n    }\n    \n    // reinit CharacterIterator\n    charIterator.setText(clonedTermAtt.buffer(), 0, clonedTermAtt.length());\n    breaker.setText(charIterator);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setLength(end);\n      offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.startOffset() + end);\n      // position increment keeps as it is for first token\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a89676536a5d3e2e875a9eed6b3f22a63cca643","date":1327356915,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (hasMoreTokensInClone) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        clonedToken.copyTo(this);\n        termAtt.copyBuffer(clonedTermAtt.buffer(), start, end - start);\n        if (hasIllegalOffsets) {\n          offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.endOffset());\n        } else {\n          offsetAtt.setOffset(clonedOffsetAtt.startOffset() + start, clonedOffsetAtt.startOffset() + end);\n        }\n        if (handlePosIncr) posAtt.setPositionIncrement(1);\n        return true;\n      }\n      hasMoreTokensInClone = false;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (termAtt.length() == 0 || UnicodeBlock.of(termAtt.charAt(0)) != UnicodeBlock.THAI) {\n      return true;\n    }\n    \n    hasMoreTokensInClone = true;\n    \n    // if length by start + end offsets doesn't match the term text then assume\n    // this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = offsetAtt.endOffset() - offsetAtt.startOffset() != termAtt.length();\n\n    // we lazy init the cloned token, as in ctor not all attributes may be added\n    if (clonedToken == null) {\n      clonedToken = cloneAttributes();\n      clonedTermAtt = clonedToken.getAttribute(CharTermAttribute.class);\n      clonedOffsetAtt = clonedToken.getAttribute(OffsetAttribute.class);\n    } else {\n      this.copyTo(clonedToken);\n    }\n    \n    // reinit CharacterIterator\n    charIterator.setText(clonedTermAtt.buffer(), 0, clonedTermAtt.length());\n    breaker.setText(charIterator);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setLength(end);\n      if (hasIllegalOffsets) {\n        offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.endOffset());\n      } else {\n        offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.startOffset() + end);\n      }\n      // position increment keeps as it is for first token\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (hasMoreTokensInClone) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        clonedToken.copyTo(this);\n        termAtt.copyBuffer(clonedTermAtt.buffer(), start, end - start);\n        offsetAtt.setOffset(clonedOffsetAtt.startOffset() + start, clonedOffsetAtt.startOffset() + end);\n        if (handlePosIncr) posAtt.setPositionIncrement(1);\n        return true;\n      }\n      hasMoreTokensInClone = false;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (termAtt.length() == 0 || UnicodeBlock.of(termAtt.charAt(0)) != UnicodeBlock.THAI) {\n      return true;\n    }\n    \n    hasMoreTokensInClone = true;\n\n    // we lazy init the cloned token, as in ctor not all attributes may be added\n    if (clonedToken == null) {\n      clonedToken = cloneAttributes();\n      clonedTermAtt = clonedToken.getAttribute(CharTermAttribute.class);\n      clonedOffsetAtt = clonedToken.getAttribute(OffsetAttribute.class);\n    } else {\n      this.copyTo(clonedToken);\n    }\n    \n    // reinit CharacterIterator\n    charIterator.setText(clonedTermAtt.buffer(), 0, clonedTermAtt.length());\n    breaker.setText(charIterator);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setLength(end);\n      offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.startOffset() + end);\n      // position increment keeps as it is for first token\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (hasMoreTokensInClone) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        clonedToken.copyTo(this);\n        termAtt.copyBuffer(clonedTermAtt.buffer(), start, end - start);\n        if (hasIllegalOffsets) {\n          offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.endOffset());\n        } else {\n          offsetAtt.setOffset(clonedOffsetAtt.startOffset() + start, clonedOffsetAtt.startOffset() + end);\n        }\n        if (handlePosIncr) posAtt.setPositionIncrement(1);\n        return true;\n      }\n      hasMoreTokensInClone = false;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (termAtt.length() == 0 || UnicodeBlock.of(termAtt.charAt(0)) != UnicodeBlock.THAI) {\n      return true;\n    }\n    \n    hasMoreTokensInClone = true;\n    \n    // if length by start + end offsets doesn't match the term text then assume\n    // this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = offsetAtt.endOffset() - offsetAtt.startOffset() != termAtt.length();\n\n    // we lazy init the cloned token, as in ctor not all attributes may be added\n    if (clonedToken == null) {\n      clonedToken = cloneAttributes();\n      clonedTermAtt = clonedToken.getAttribute(CharTermAttribute.class);\n      clonedOffsetAtt = clonedToken.getAttribute(OffsetAttribute.class);\n    } else {\n      this.copyTo(clonedToken);\n    }\n    \n    // reinit CharacterIterator\n    charIterator.setText(clonedTermAtt.buffer(), 0, clonedTermAtt.length());\n    breaker.setText(charIterator);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setLength(end);\n      if (hasIllegalOffsets) {\n        offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.endOffset());\n      } else {\n        offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.startOffset() + end);\n      }\n      // position increment keeps as it is for first token\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (hasMoreTokensInClone) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        clonedToken.copyTo(this);\n        termAtt.copyBuffer(clonedTermAtt.buffer(), start, end - start);\n        offsetAtt.setOffset(clonedOffsetAtt.startOffset() + start, clonedOffsetAtt.startOffset() + end);\n        if (handlePosIncr) posAtt.setPositionIncrement(1);\n        return true;\n      }\n      hasMoreTokensInClone = false;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (termAtt.length() == 0 || UnicodeBlock.of(termAtt.charAt(0)) != UnicodeBlock.THAI) {\n      return true;\n    }\n    \n    hasMoreTokensInClone = true;\n\n    // we lazy init the cloned token, as in ctor not all attributes may be added\n    if (clonedToken == null) {\n      clonedToken = cloneAttributes();\n      clonedTermAtt = clonedToken.getAttribute(CharTermAttribute.class);\n      clonedOffsetAtt = clonedToken.getAttribute(OffsetAttribute.class);\n    } else {\n      this.copyTo(clonedToken);\n    }\n    \n    // reinit CharacterIterator\n    charIterator.setText(clonedTermAtt.buffer(), 0, clonedTermAtt.length());\n    breaker.setText(charIterator);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setLength(end);\n      offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.startOffset() + end);\n      // position increment keeps as it is for first token\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (hasMoreTokensInClone) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        clonedToken.copyTo(this);\n        termAtt.copyBuffer(clonedTermAtt.buffer(), start, end - start);\n        if (hasIllegalOffsets) {\n          offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.endOffset());\n        } else {\n          offsetAtt.setOffset(clonedOffsetAtt.startOffset() + start, clonedOffsetAtt.startOffset() + end);\n        }\n        if (handlePosIncr) posAtt.setPositionIncrement(1);\n        return true;\n      }\n      hasMoreTokensInClone = false;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (termAtt.length() == 0 || UnicodeBlock.of(termAtt.charAt(0)) != UnicodeBlock.THAI) {\n      return true;\n    }\n    \n    hasMoreTokensInClone = true;\n    \n    // if length by start + end offsets doesn't match the term text then assume\n    // this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = offsetAtt.endOffset() - offsetAtt.startOffset() != termAtt.length();\n\n    // we lazy init the cloned token, as in ctor not all attributes may be added\n    if (clonedToken == null) {\n      clonedToken = cloneAttributes();\n      clonedTermAtt = clonedToken.getAttribute(CharTermAttribute.class);\n      clonedOffsetAtt = clonedToken.getAttribute(OffsetAttribute.class);\n    } else {\n      this.copyTo(clonedToken);\n    }\n    \n    // reinit CharacterIterator\n    charIterator.setText(clonedTermAtt.buffer(), 0, clonedTermAtt.length());\n    breaker.setText(charIterator);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setLength(end);\n      if (hasIllegalOffsets) {\n        offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.endOffset());\n      } else {\n        offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.startOffset() + end);\n      }\n      // position increment keeps as it is for first token\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (hasMoreTokensInClone) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        clonedToken.copyTo(this);\n        termAtt.copyBuffer(clonedTermAtt.buffer(), start, end - start);\n        if (hasIllegalOffsets) {\n          offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.endOffset());\n        } else {\n          offsetAtt.setOffset(clonedOffsetAtt.startOffset() + start, clonedOffsetAtt.startOffset() + end);\n        }\n        if (handlePosIncr) posAtt.setPositionIncrement(1);\n        return true;\n      }\n      hasMoreTokensInClone = false;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (termAtt.length() == 0 || UnicodeBlock.of(termAtt.charAt(0)) != UnicodeBlock.THAI) {\n      return true;\n    }\n    \n    hasMoreTokensInClone = true;\n    \n    // if length by start + end offsets doesn't match the term text then assume\n    // this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = offsetAtt.endOffset() - offsetAtt.startOffset() != termAtt.length();\n\n    // we lazy init the cloned token, as in ctor not all attributes may be added\n    if (clonedToken == null) {\n      clonedToken = cloneAttributes();\n      clonedTermAtt = clonedToken.getAttribute(CharTermAttribute.class);\n      clonedOffsetAtt = clonedToken.getAttribute(OffsetAttribute.class);\n    } else {\n      this.copyTo(clonedToken);\n    }\n    \n    // reinit CharacterIterator\n    charIterator.setText(clonedTermAtt.buffer(), 0, clonedTermAtt.length());\n    breaker.setText(charIterator);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setLength(end);\n      if (hasIllegalOffsets) {\n        offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.endOffset());\n      } else {\n        offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.startOffset() + end);\n      }\n      // position increment keeps as it is for first token\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3873cfa0d4054c121a5f727f84dba2cffd567167":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"5a89676536a5d3e2e875a9eed6b3f22a63cca643":["3873cfa0d4054c121a5f727f84dba2cffd567167","7e477c2108982ba9974f73aa8800270c75cb4971"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7e477c2108982ba9974f73aa8800270c75cb4971"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["3873cfa0d4054c121a5f727f84dba2cffd567167","7e477c2108982ba9974f73aa8800270c75cb4971"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7e477c2108982ba9974f73aa8800270c75cb4971":["3873cfa0d4054c121a5f727f84dba2cffd567167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"3873cfa0d4054c121a5f727f84dba2cffd567167":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","7e477c2108982ba9974f73aa8800270c75cb4971"],"5a89676536a5d3e2e875a9eed6b3f22a63cca643":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["3873cfa0d4054c121a5f727f84dba2cffd567167"],"7e477c2108982ba9974f73aa8800270c75cb4971":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","b89678825b68eccaf09e6ab71675fc0b0af1e099","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}