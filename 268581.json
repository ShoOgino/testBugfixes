{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,String,CompressionMode,int).mjava","commits":[{"id":"25308800fd7565ab31e6353077a56bba68fb0668","date":1355337658,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,String,CompressionMode,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkHeader(org.apache.lucene.store.DataInput, String, int, int) codec header checks}.\n   * <p>\n   * <code>segmentSuffix</code> is the segment suffix. This suffix is added to \n   * the result file name only if it's not the empty string.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields. In that case, both performance and compression ratio should be\n   * better than with {@link Lucene40StoredFieldsFormat} with compressed\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, String segmentSuffix, \n                                       CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,String,CompressionMode,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkHeader(org.apache.lucene.store.DataInput, String, int, int) codec header checks}.\n   * <p>\n   * <code>segmentSuffix</code> is the segment suffix. This suffix is added to \n   * the result file name only if it's not the empty string.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields. In that case, both performance and compression ratio should be\n   * better than with {@link Lucene40StoredFieldsFormat} with compressed\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, String segmentSuffix, \n                                       CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,String,CompressionMode,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,String,CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkHeader(org.apache.lucene.store.DataInput, String, int, int) codec header checks}.\n   * <p>\n   * <code>segmentSuffix</code> is the segment suffix. This suffix is added to \n   * the result file name only if it's not the empty string.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, String segmentSuffix, \n                                       CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    \n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkHeader(org.apache.lucene.store.DataInput, String, int, int) codec header checks}.\n   * <p>\n   * <code>segmentSuffix</code> is the segment suffix. This suffix is added to \n   * the result file name only if it's not the empty string.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields. In that case, both performance and compression ratio should be\n   * better than with {@link Lucene40StoredFieldsFormat} with compressed\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, String segmentSuffix, \n                                       CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,String,CompressionMode,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,String,CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkHeader(org.apache.lucene.store.DataInput, String, int, int) codec header checks}.\n   * <p>\n   * <code>segmentSuffix</code> is the segment suffix. This suffix is added to \n   * the result file name only if it's not the empty string.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, String segmentSuffix, \n                                       CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    \n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkHeader(org.apache.lucene.store.DataInput, String, int, int) codec header checks}.\n   * <p>\n   * <code>segmentSuffix</code> is the segment suffix. This suffix is added to \n   * the result file name only if it's not the empty string.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields. In that case, both performance and compression ratio should be\n   * better than with {@link Lucene40StoredFieldsFormat} with compressed\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, String segmentSuffix, \n                                       CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    \n  }\n\n","bugFix":["25308800fd7565ab31e6353077a56bba68fb0668"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"389e8bca54f58e35576077f3ff46f123b3660018","date":1411859915,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,String,CompressionMode,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,String,CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkSegmentHeader(org.apache.lucene.store.DataInput, String, int, int, byte[]) codec header checks}.\n   * <p>\n   * <code>segmentSuffix</code> is the segment suffix. This suffix is added to \n   * the result file name only if it's not the empty string.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, String segmentSuffix, \n                                       CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    \n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkHeader(org.apache.lucene.store.DataInput, String, int, int) codec header checks}.\n   * <p>\n   * <code>segmentSuffix</code> is the segment suffix. This suffix is added to \n   * the result file name only if it's not the empty string.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, String segmentSuffix, \n                                       CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78b813d9350cc28625598f6dbbb49b586a40618","date":1412073147,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,String,CompressionMode,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,String,CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkSegmentHeader codec header checks}.\n   * <p>\n   * <code>segmentSuffix</code> is the segment suffix. This suffix is added to \n   * the result file name only if it's not the empty string.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, String segmentSuffix, \n                                       CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    \n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkSegmentHeader(org.apache.lucene.store.DataInput, String, int, int, byte[]) codec header checks}.\n   * <p>\n   * <code>segmentSuffix</code> is the segment suffix. This suffix is added to \n   * the result file name only if it's not the empty string.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, String segmentSuffix, \n                                       CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,String,CompressionMode,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,String,CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkSegmentHeader codec header checks}.\n   * <p>\n   * <code>segmentSuffix</code> is the segment suffix. This suffix is added to \n   * the result file name only if it's not the empty string.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, String segmentSuffix, \n                                       CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    \n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkHeader(org.apache.lucene.store.DataInput, String, int, int) codec header checks}.\n   * <p>\n   * <code>segmentSuffix</code> is the segment suffix. This suffix is added to \n   * the result file name only if it's not the empty string.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, String segmentSuffix, \n                                       CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,String,CompressionMode,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,String,CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkIndexHeader codec header checks}.\n   * <p>\n   * <code>segmentSuffix</code> is the segment suffix. This suffix is added to \n   * the result file name only if it's not the empty string.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, String segmentSuffix, \n                                       CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    \n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkSegmentHeader codec header checks}.\n   * <p>\n   * <code>segmentSuffix</code> is the segment suffix. This suffix is added to \n   * the result file name only if it's not the empty string.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, String segmentSuffix, \n                                       CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,String,CompressionMode,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,String,CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkIndexHeader codec header checks}.\n   * <p>\n   * <code>segmentSuffix</code> is the segment suffix. This suffix is added to \n   * the result file name only if it's not the empty string.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, String segmentSuffix, \n                                       CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    \n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkSegmentHeader codec header checks}.\n   * <p>\n   * <code>segmentSuffix</code> is the segment suffix. This suffix is added to \n   * the result file name only if it's not the empty string.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, String segmentSuffix, \n                                       CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"699a2199028b8eadcc558eebcf669e5fc708524a","date":1417544403,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,String,CompressionMode,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,String,CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkIndexHeader codec header checks}.\n   * <p>\n   * <code>segmentSuffix</code> is the segment suffix. This suffix is added to \n   * the result file name only if it's not the empty string.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields.\n   * <code>maxDocsPerChunk</code> is an upperbound on how many docs may be stored\n   * in a single chunk. This is to bound the cpu costs for highly compressible data.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @param maxDocsPerChunk the maximum number of documents in a single chunk\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, String segmentSuffix, \n                                       CompressionMode compressionMode, int chunkSize, int maxDocsPerChunk) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    if (maxDocsPerChunk < 1) {\n      throw new IllegalArgumentException(\"maxDocsPerChunk must be >= 1\");\n    }\n    this.maxDocsPerChunk = maxDocsPerChunk;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkIndexHeader codec header checks}.\n   * <p>\n   * <code>segmentSuffix</code> is the segment suffix. This suffix is added to \n   * the result file name only if it's not the empty string.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, String segmentSuffix, \n                                       CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a78b813d9350cc28625598f6dbbb49b586a40618":["389e8bca54f58e35576077f3ff46f123b3660018"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","25308800fd7565ab31e6353077a56bba68fb0668"],"25308800fd7565ab31e6353077a56bba68fb0668":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","a78b813d9350cc28625598f6dbbb49b586a40618"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["25308800fd7565ab31e6353077a56bba68fb0668"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["a78b813d9350cc28625598f6dbbb49b586a40618"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"699a2199028b8eadcc558eebcf669e5fc708524a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"389e8bca54f58e35576077f3ff46f123b3660018":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["699a2199028b8eadcc558eebcf669e5fc708524a"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["25308800fd7565ab31e6353077a56bba68fb0668","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a78b813d9350cc28625598f6dbbb49b586a40618":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"25308800fd7565ab31e6353077a56bba68fb0668":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","25308800fd7565ab31e6353077a56bba68fb0668"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["699a2199028b8eadcc558eebcf669e5fc708524a"],"389e8bca54f58e35576077f3ff46f123b3660018":["a78b813d9350cc28625598f6dbbb49b586a40618"],"699a2199028b8eadcc558eebcf669e5fc708524a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["9bb9a29a5e71a90295f175df8919802993142c9a","389e8bca54f58e35576077f3ff46f123b3660018"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}