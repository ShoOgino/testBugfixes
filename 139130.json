{"path":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#fetchInstalledPackageInstances().mjava","commits":[{"id":"120bc33d5cbe83eca2e5fce597baf4fef208d579","date":1573735895,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#fetchInstalledPackageInstances().mjava","pathOld":"/dev/null","sourceNew":"  public List<SolrPackageInstance> fetchInstalledPackageInstances() throws SolrException {\n    log.info(\"Getting packages from packages.json...\");\n    List<SolrPackageInstance> ret = new ArrayList<SolrPackageInstance>();\n    packages = new HashMap<String, List<SolrPackageInstance>>();\n    try {\n      Map packagesZnodeMap = null;\n\n      if (zkClient.exists(\"/packages.json\", true) == true) {\n        packagesZnodeMap = (Map)getMapper().readValue(\n            new String(zkClient.getData(\"/packages.json\", null, null, true), \"UTF-8\"), Map.class).get(\"packages\");\n        for (Object packageName: packagesZnodeMap.keySet()) {\n          List pkg = (List)packagesZnodeMap.get(packageName);\n          for (Map pkgVersion: (List<Map>)pkg) {\n            Manifest manifest = PackageUtils.fetchManifest(solrClient, solrBaseUrl, pkgVersion.get(\"manifest\").toString(), pkgVersion.get(\"manifestSHA512\").toString());\n            List<Plugin> solrplugins = manifest.plugins;\n            SolrPackageInstance pkgInstance = new SolrPackageInstance(packageName.toString(), null, \n                pkgVersion.get(\"version\").toString(), manifest, solrplugins, manifest.parameterDefaults);\n            List<SolrPackageInstance> list = packages.containsKey(packageName)? packages.get(packageName): new ArrayList<SolrPackageInstance>();\n            list.add(pkgInstance);\n            packages.put(packageName.toString(), list);\n            ret.add(pkgInstance);\n          }\n        }\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    log.info(\"Got packages: \"+ret);\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62d55718cd611235e975fa73a6bdf263fbd58859","date":1576386842,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#fetchInstalledPackageInstances().mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#fetchInstalledPackageInstances().mjava","sourceNew":"  public List<SolrPackageInstance> fetchInstalledPackageInstances() throws SolrException {\n    log.info(\"Getting packages from packages.json...\");\n    List<SolrPackageInstance> ret = new ArrayList<SolrPackageInstance>();\n    packages = new HashMap<String, List<SolrPackageInstance>>();\n    try {\n      Map packagesZnodeMap = null;\n\n      if (zkClient.exists(ZkStateReader.SOLR_PKGS_PATH, true) == true) {\n        packagesZnodeMap = (Map)getMapper().readValue(\n            new String(zkClient.getData(ZkStateReader.SOLR_PKGS_PATH, null, null, true), \"UTF-8\"), Map.class).get(\"packages\");\n        for (Object packageName: packagesZnodeMap.keySet()) {\n          List pkg = (List)packagesZnodeMap.get(packageName);\n          for (Map pkgVersion: (List<Map>)pkg) {\n            Manifest manifest = PackageUtils.fetchManifest(solrClient, solrBaseUrl, pkgVersion.get(\"manifest\").toString(), pkgVersion.get(\"manifestSHA512\").toString());\n            List<Plugin> solrplugins = manifest.plugins;\n            SolrPackageInstance pkgInstance = new SolrPackageInstance(packageName.toString(), null, \n                pkgVersion.get(\"version\").toString(), manifest, solrplugins, manifest.parameterDefaults);\n            List<SolrPackageInstance> list = packages.containsKey(packageName)? packages.get(packageName): new ArrayList<SolrPackageInstance>();\n            list.add(pkgInstance);\n            packages.put(packageName.toString(), list);\n            ret.add(pkgInstance);\n          }\n        }\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    log.info(\"Got packages: \"+ret);\n    return ret;\n  }\n\n","sourceOld":"  public List<SolrPackageInstance> fetchInstalledPackageInstances() throws SolrException {\n    log.info(\"Getting packages from packages.json...\");\n    List<SolrPackageInstance> ret = new ArrayList<SolrPackageInstance>();\n    packages = new HashMap<String, List<SolrPackageInstance>>();\n    try {\n      Map packagesZnodeMap = null;\n\n      if (zkClient.exists(\"/packages.json\", true) == true) {\n        packagesZnodeMap = (Map)getMapper().readValue(\n            new String(zkClient.getData(\"/packages.json\", null, null, true), \"UTF-8\"), Map.class).get(\"packages\");\n        for (Object packageName: packagesZnodeMap.keySet()) {\n          List pkg = (List)packagesZnodeMap.get(packageName);\n          for (Map pkgVersion: (List<Map>)pkg) {\n            Manifest manifest = PackageUtils.fetchManifest(solrClient, solrBaseUrl, pkgVersion.get(\"manifest\").toString(), pkgVersion.get(\"manifestSHA512\").toString());\n            List<Plugin> solrplugins = manifest.plugins;\n            SolrPackageInstance pkgInstance = new SolrPackageInstance(packageName.toString(), null, \n                pkgVersion.get(\"version\").toString(), manifest, solrplugins, manifest.parameterDefaults);\n            List<SolrPackageInstance> list = packages.containsKey(packageName)? packages.get(packageName): new ArrayList<SolrPackageInstance>();\n            list.add(pkgInstance);\n            packages.put(packageName.toString(), list);\n            ret.add(pkgInstance);\n          }\n        }\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    log.info(\"Got packages: \"+ret);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06595b0c22c7d3075c4104d3820cccf95d9d8a43","date":1576491645,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#fetchInstalledPackageInstances().mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#fetchInstalledPackageInstances().mjava","sourceNew":"  public List<SolrPackageInstance> fetchInstalledPackageInstances() throws SolrException {\n    log.info(\"Getting packages from packages.json...\");\n    List<SolrPackageInstance> ret = new ArrayList<SolrPackageInstance>();\n    packages = new HashMap<String, List<SolrPackageInstance>>();\n    try {\n      Map packagesZnodeMap = null;\n\n      if (zkClient.exists(ZkStateReader.SOLR_PKGS_PATH, true) == true) {\n        packagesZnodeMap = (Map)getMapper().readValue(\n            new String(zkClient.getData(ZkStateReader.SOLR_PKGS_PATH, null, null, true), \"UTF-8\"), Map.class).get(\"packages\");\n        for (Object packageName: packagesZnodeMap.keySet()) {\n          List pkg = (List)packagesZnodeMap.get(packageName);\n          for (Map pkgVersion: (List<Map>)pkg) {\n            Manifest manifest = PackageUtils.fetchManifest(solrClient, solrBaseUrl, pkgVersion.get(\"manifest\").toString(), pkgVersion.get(\"manifestSHA512\").toString());\n            List<Plugin> solrplugins = manifest.plugins;\n            SolrPackageInstance pkgInstance = new SolrPackageInstance(packageName.toString(), null, \n                pkgVersion.get(\"version\").toString(), manifest, solrplugins, manifest.parameterDefaults);\n            List<SolrPackageInstance> list = packages.containsKey(packageName)? packages.get(packageName): new ArrayList<SolrPackageInstance>();\n            list.add(pkgInstance);\n            packages.put(packageName.toString(), list);\n            ret.add(pkgInstance);\n          }\n        }\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    log.info(\"Got packages: \"+ret);\n    return ret;\n  }\n\n","sourceOld":"  public List<SolrPackageInstance> fetchInstalledPackageInstances() throws SolrException {\n    log.info(\"Getting packages from packages.json...\");\n    List<SolrPackageInstance> ret = new ArrayList<SolrPackageInstance>();\n    packages = new HashMap<String, List<SolrPackageInstance>>();\n    try {\n      Map packagesZnodeMap = null;\n\n      if (zkClient.exists(\"/packages.json\", true) == true) {\n        packagesZnodeMap = (Map)getMapper().readValue(\n            new String(zkClient.getData(\"/packages.json\", null, null, true), \"UTF-8\"), Map.class).get(\"packages\");\n        for (Object packageName: packagesZnodeMap.keySet()) {\n          List pkg = (List)packagesZnodeMap.get(packageName);\n          for (Map pkgVersion: (List<Map>)pkg) {\n            Manifest manifest = PackageUtils.fetchManifest(solrClient, solrBaseUrl, pkgVersion.get(\"manifest\").toString(), pkgVersion.get(\"manifestSHA512\").toString());\n            List<Plugin> solrplugins = manifest.plugins;\n            SolrPackageInstance pkgInstance = new SolrPackageInstance(packageName.toString(), null, \n                pkgVersion.get(\"version\").toString(), manifest, solrplugins, manifest.parameterDefaults);\n            List<SolrPackageInstance> list = packages.containsKey(packageName)? packages.get(packageName): new ArrayList<SolrPackageInstance>();\n            list.add(pkgInstance);\n            packages.put(packageName.toString(), list);\n            ret.add(pkgInstance);\n          }\n        }\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    log.info(\"Got packages: \"+ret);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#fetchInstalledPackageInstances().mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#fetchInstalledPackageInstances().mjava","sourceNew":"  public List<SolrPackageInstance> fetchInstalledPackageInstances() throws SolrException {\n    log.info(\"Getting packages from packages.json...\");\n    List<SolrPackageInstance> ret = new ArrayList<SolrPackageInstance>();\n    packages = new HashMap<String, List<SolrPackageInstance>>();\n    try {\n      Map packagesZnodeMap = null;\n\n      if (zkClient.exists(ZkStateReader.SOLR_PKGS_PATH, true) == true) {\n        packagesZnodeMap = (Map)getMapper().readValue(\n            new String(zkClient.getData(ZkStateReader.SOLR_PKGS_PATH, null, null, true), \"UTF-8\"), Map.class).get(\"packages\");\n        for (Object packageName: packagesZnodeMap.keySet()) {\n          List pkg = (List)packagesZnodeMap.get(packageName);\n          for (Map pkgVersion: (List<Map>)pkg) {\n            Manifest manifest = PackageUtils.fetchManifest(solrClient, solrBaseUrl, pkgVersion.get(\"manifest\").toString(), pkgVersion.get(\"manifestSHA512\").toString());\n            List<Plugin> solrplugins = manifest.plugins;\n            SolrPackageInstance pkgInstance = new SolrPackageInstance(packageName.toString(), null, \n                pkgVersion.get(\"version\").toString(), manifest, solrplugins, manifest.parameterDefaults);\n            List<SolrPackageInstance> list = packages.containsKey(packageName)? packages.get(packageName): new ArrayList<SolrPackageInstance>();\n            list.add(pkgInstance);\n            packages.put(packageName.toString(), list);\n            ret.add(pkgInstance);\n          }\n        }\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    log.info(\"Got packages: {}\", ret);\n    return ret;\n  }\n\n","sourceOld":"  public List<SolrPackageInstance> fetchInstalledPackageInstances() throws SolrException {\n    log.info(\"Getting packages from packages.json...\");\n    List<SolrPackageInstance> ret = new ArrayList<SolrPackageInstance>();\n    packages = new HashMap<String, List<SolrPackageInstance>>();\n    try {\n      Map packagesZnodeMap = null;\n\n      if (zkClient.exists(ZkStateReader.SOLR_PKGS_PATH, true) == true) {\n        packagesZnodeMap = (Map)getMapper().readValue(\n            new String(zkClient.getData(ZkStateReader.SOLR_PKGS_PATH, null, null, true), \"UTF-8\"), Map.class).get(\"packages\");\n        for (Object packageName: packagesZnodeMap.keySet()) {\n          List pkg = (List)packagesZnodeMap.get(packageName);\n          for (Map pkgVersion: (List<Map>)pkg) {\n            Manifest manifest = PackageUtils.fetchManifest(solrClient, solrBaseUrl, pkgVersion.get(\"manifest\").toString(), pkgVersion.get(\"manifestSHA512\").toString());\n            List<Plugin> solrplugins = manifest.plugins;\n            SolrPackageInstance pkgInstance = new SolrPackageInstance(packageName.toString(), null, \n                pkgVersion.get(\"version\").toString(), manifest, solrplugins, manifest.parameterDefaults);\n            List<SolrPackageInstance> list = packages.containsKey(packageName)? packages.get(packageName): new ArrayList<SolrPackageInstance>();\n            list.add(pkgInstance);\n            packages.put(packageName.toString(), list);\n            ret.add(pkgInstance);\n          }\n        }\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    log.info(\"Got packages: \"+ret);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#fetchInstalledPackageInstances().mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#fetchInstalledPackageInstances().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public List<SolrPackageInstance> fetchInstalledPackageInstances() throws SolrException {\n    log.info(\"Getting packages from packages.json...\");\n    List<SolrPackageInstance> ret = new ArrayList<SolrPackageInstance>();\n    packages = new HashMap<String, List<SolrPackageInstance>>();\n    try {\n      Map packagesZnodeMap = null;\n\n      if (zkClient.exists(ZkStateReader.SOLR_PKGS_PATH, true) == true) {\n        packagesZnodeMap = (Map)getMapper().readValue(\n            new String(zkClient.getData(ZkStateReader.SOLR_PKGS_PATH, null, null, true), \"UTF-8\"), Map.class).get(\"packages\");\n        for (Object packageName: packagesZnodeMap.keySet()) {\n          List pkg = (List)packagesZnodeMap.get(packageName);\n          for (Map pkgVersion: (List<Map>)pkg) {\n            Manifest manifest = PackageUtils.fetchManifest(solrClient, solrBaseUrl, pkgVersion.get(\"manifest\").toString(), pkgVersion.get(\"manifestSHA512\").toString());\n            List<Plugin> solrplugins = manifest.plugins;\n            SolrPackageInstance pkgInstance = new SolrPackageInstance(packageName.toString(), null, \n                pkgVersion.get(\"version\").toString(), manifest, solrplugins, manifest.parameterDefaults);\n            List<SolrPackageInstance> list = packages.containsKey(packageName)? packages.get(packageName): new ArrayList<SolrPackageInstance>();\n            list.add(pkgInstance);\n            packages.put(packageName.toString(), list);\n            ret.add(pkgInstance);\n          }\n        }\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    log.info(\"Got packages: {}\", ret);\n    return ret;\n  }\n\n","sourceOld":"  public List<SolrPackageInstance> fetchInstalledPackageInstances() throws SolrException {\n    log.info(\"Getting packages from packages.json...\");\n    List<SolrPackageInstance> ret = new ArrayList<SolrPackageInstance>();\n    packages = new HashMap<String, List<SolrPackageInstance>>();\n    try {\n      Map packagesZnodeMap = null;\n\n      if (zkClient.exists(ZkStateReader.SOLR_PKGS_PATH, true) == true) {\n        packagesZnodeMap = (Map)getMapper().readValue(\n            new String(zkClient.getData(ZkStateReader.SOLR_PKGS_PATH, null, null, true), \"UTF-8\"), Map.class).get(\"packages\");\n        for (Object packageName: packagesZnodeMap.keySet()) {\n          List pkg = (List)packagesZnodeMap.get(packageName);\n          for (Map pkgVersion: (List<Map>)pkg) {\n            Manifest manifest = PackageUtils.fetchManifest(solrClient, solrBaseUrl, pkgVersion.get(\"manifest\").toString(), pkgVersion.get(\"manifestSHA512\").toString());\n            List<Plugin> solrplugins = manifest.plugins;\n            SolrPackageInstance pkgInstance = new SolrPackageInstance(packageName.toString(), null, \n                pkgVersion.get(\"version\").toString(), manifest, solrplugins, manifest.parameterDefaults);\n            List<SolrPackageInstance> list = packages.containsKey(packageName)? packages.get(packageName): new ArrayList<SolrPackageInstance>();\n            list.add(pkgInstance);\n            packages.put(packageName.toString(), list);\n            ret.add(pkgInstance);\n          }\n        }\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    log.info(\"Got packages: {}\", ret);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30544190fa1b1f7b98cd8e9b84dd86060d89bdcd","date":1596533005,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#fetchInstalledPackageInstances().mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#fetchInstalledPackageInstances().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public List<SolrPackageInstance> fetchInstalledPackageInstances() throws SolrException {\n    log.info(\"Getting packages from packages.json...\");\n    List<SolrPackageInstance> ret = new ArrayList<SolrPackageInstance>();\n    packages = new HashMap<String, List<SolrPackageInstance>>();\n    try {\n      Map packagesZnodeMap = null;\n\n      if (zkClient.exists(ZkStateReader.SOLR_PKGS_PATH, true) == true) {\n        packagesZnodeMap = (Map)getMapper().readValue(\n            new String(zkClient.getData(ZkStateReader.SOLR_PKGS_PATH, null, null, true), \"UTF-8\"), Map.class).get(\"packages\");\n        for (Object packageName: packagesZnodeMap.keySet()) {\n          List pkg = (List)packagesZnodeMap.get(packageName);\n          for (Map pkgVersion: (List<Map>)pkg) {\n            Manifest manifest = PackageUtils.fetchManifest(solrClient, solrBaseUrl, pkgVersion.get(\"manifest\").toString(), pkgVersion.get(\"manifestSHA512\").toString());\n            List<Plugin> solrPlugins = manifest.plugins;\n            SolrPackageInstance pkgInstance = new SolrPackageInstance(packageName.toString(), null,\n                    pkgVersion.get(\"version\").toString(), manifest, solrPlugins, manifest.parameterDefaults);\n            if (pkgVersion.containsKey(\"files\")) {\n              pkgInstance.files = (List) pkgVersion.get(\"files\");\n            }\n            List<SolrPackageInstance> list = packages.containsKey(packageName) ? packages.get(packageName) : new ArrayList<SolrPackageInstance>();\n            list.add(pkgInstance);\n            packages.put(packageName.toString(), list);\n            ret.add(pkgInstance);\n          }\n        }\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    log.info(\"Got packages: {}\", ret);\n    return ret;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public List<SolrPackageInstance> fetchInstalledPackageInstances() throws SolrException {\n    log.info(\"Getting packages from packages.json...\");\n    List<SolrPackageInstance> ret = new ArrayList<SolrPackageInstance>();\n    packages = new HashMap<String, List<SolrPackageInstance>>();\n    try {\n      Map packagesZnodeMap = null;\n\n      if (zkClient.exists(ZkStateReader.SOLR_PKGS_PATH, true) == true) {\n        packagesZnodeMap = (Map)getMapper().readValue(\n            new String(zkClient.getData(ZkStateReader.SOLR_PKGS_PATH, null, null, true), \"UTF-8\"), Map.class).get(\"packages\");\n        for (Object packageName: packagesZnodeMap.keySet()) {\n          List pkg = (List)packagesZnodeMap.get(packageName);\n          for (Map pkgVersion: (List<Map>)pkg) {\n            Manifest manifest = PackageUtils.fetchManifest(solrClient, solrBaseUrl, pkgVersion.get(\"manifest\").toString(), pkgVersion.get(\"manifestSHA512\").toString());\n            List<Plugin> solrplugins = manifest.plugins;\n            SolrPackageInstance pkgInstance = new SolrPackageInstance(packageName.toString(), null, \n                pkgVersion.get(\"version\").toString(), manifest, solrplugins, manifest.parameterDefaults);\n            List<SolrPackageInstance> list = packages.containsKey(packageName)? packages.get(packageName): new ArrayList<SolrPackageInstance>();\n            list.add(pkgInstance);\n            packages.put(packageName.toString(), list);\n            ret.add(pkgInstance);\n          }\n        }\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    log.info(\"Got packages: {}\", ret);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30544190fa1b1f7b98cd8e9b84dd86060d89bdcd":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["62d55718cd611235e975fa73a6bdf263fbd58859"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":["120bc33d5cbe83eca2e5fce597baf4fef208d579","62d55718cd611235e975fa73a6bdf263fbd58859"],"62d55718cd611235e975fa73a6bdf263fbd58859":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30544190fa1b1f7b98cd8e9b84dd86060d89bdcd"]},"commit2Childs":{"30544190fa1b1f7b98cd8e9b84dd86060d89bdcd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":[],"62d55718cd611235e975fa73a6bdf263fbd58859":["54faedfb0e03479a38f5ee82f2dfaeea536e9404","06595b0c22c7d3075c4104d3820cccf95d9d8a43"],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","62d55718cd611235e975fa73a6bdf263fbd58859"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["30544190fa1b1f7b98cd8e9b84dd86060d89bdcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}