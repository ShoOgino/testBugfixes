{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer#createComponents(String,Reader).mjava","commits":[{"id":"ddc5fbfd4c64963aba52713a4496522540294d69","date":1262508497,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer#createComponents(String,Reader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates {@link TokenStreamComponents} used to tokenize all the text in the provided {@link Reader}.\n   *\n   * @return {@link TokenStreamComponents} built from an {@link ArabicLetterTokenizer} filtered with\n   * \t\t\t{@link LowerCaseFilter}, {@link StopFilter}, {@link ArabicNormalizationFilter}\n   *            and {@link ArabicStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    // the order here is important: the stopword list is not normalized!\n    result = new StopFilter( matchVersion, result, stopwords);\n    result = new ArabicNormalizationFilter(result);\n    return new TokenStreamComponents(source, new ArabicStemFilter(result));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9fc748b8fc4097ccc222bdf2948cc2d20770c54","date":1264591145,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer#createComponents(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates {@link TokenStreamComponents} used to tokenize all the text in the provided {@link Reader}.\n   *\n   * @return {@link TokenStreamComponents} built from an {@link ArabicLetterTokenizer} filtered with\n   * \t\t\t{@link LowerCaseFilter}, {@link StopFilter}, {@link ArabicNormalizationFilter},\n   *      {@link KeywordMarkerTokenFilter} if a stem exclusion set is provided\n   *            and {@link ArabicStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    // the order here is important: the stopword list is not normalized!\n    result = new StopFilter( matchVersion, result, stopwords);\n    // TODO maybe we should make ArabicNormalization filter also KeywordAttribute aware?!\n    result = new ArabicNormalizationFilter(result);\n    if(!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerTokenFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new ArabicStemFilter(result));\n  }\n\n","sourceOld":"  /**\n   * Creates {@link TokenStreamComponents} used to tokenize all the text in the provided {@link Reader}.\n   *\n   * @return {@link TokenStreamComponents} built from an {@link ArabicLetterTokenizer} filtered with\n   * \t\t\t{@link LowerCaseFilter}, {@link StopFilter}, {@link ArabicNormalizationFilter}\n   *            and {@link ArabicStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    // the order here is important: the stopword list is not normalized!\n    result = new StopFilter( matchVersion, result, stopwords);\n    result = new ArabicNormalizationFilter(result);\n    return new TokenStreamComponents(source, new ArabicStemFilter(result));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85722042902595d9b0fbf38b7b57b139bdc12e4b","date":1264953677,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer#createComponents(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates {@link TokenStreamComponents} used to tokenize all the text in the provided {@link Reader}.\n   *\n   * @return {@link TokenStreamComponents} built from an {@link ArabicLetterTokenizer} filtered with\n   * \t\t\t{@link LowerCaseFilter}, {@link StopFilter}, {@link ArabicNormalizationFilter},\n   *      {@link KeywordMarkerTokenFilter} if a stem exclusion set is provided\n   *            and {@link ArabicStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(matchVersion, reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    // the order here is important: the stopword list is not normalized!\n    result = new StopFilter( matchVersion, result, stopwords);\n    // TODO maybe we should make ArabicNormalization filter also KeywordAttribute aware?!\n    result = new ArabicNormalizationFilter(result);\n    if(!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerTokenFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new ArabicStemFilter(result));\n  }\n\n","sourceOld":"  /**\n   * Creates {@link TokenStreamComponents} used to tokenize all the text in the provided {@link Reader}.\n   *\n   * @return {@link TokenStreamComponents} built from an {@link ArabicLetterTokenizer} filtered with\n   * \t\t\t{@link LowerCaseFilter}, {@link StopFilter}, {@link ArabicNormalizationFilter},\n   *      {@link KeywordMarkerTokenFilter} if a stem exclusion set is provided\n   *            and {@link ArabicStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    // the order here is important: the stopword list is not normalized!\n    result = new StopFilter( matchVersion, result, stopwords);\n    // TODO maybe we should make ArabicNormalization filter also KeywordAttribute aware?!\n    result = new ArabicNormalizationFilter(result);\n    if(!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerTokenFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new ArabicStemFilter(result));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer#createComponents(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from an {@link ArabicLetterTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link ArabicNormalizationFilter}, {@link KeywordMarkerTokenFilter}\n   *         if a stem exclusion set is provided and {@link ArabicStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(matchVersion, reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    // the order here is important: the stopword list is not normalized!\n    result = new StopFilter( matchVersion, result, stopwords);\n    // TODO maybe we should make ArabicNormalization filter also KeywordAttribute aware?!\n    result = new ArabicNormalizationFilter(result);\n    if(!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerTokenFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new ArabicStemFilter(result));\n  }\n\n","sourceOld":"  /**\n   * Creates {@link TokenStreamComponents} used to tokenize all the text in the provided {@link Reader}.\n   *\n   * @return {@link TokenStreamComponents} built from an {@link ArabicLetterTokenizer} filtered with\n   * \t\t\t{@link LowerCaseFilter}, {@link StopFilter}, {@link ArabicNormalizationFilter},\n   *      {@link KeywordMarkerTokenFilter} if a stem exclusion set is provided\n   *            and {@link ArabicStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(matchVersion, reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    // the order here is important: the stopword list is not normalized!\n    result = new StopFilter( matchVersion, result, stopwords);\n    // TODO maybe we should make ArabicNormalization filter also KeywordAttribute aware?!\n    result = new ArabicNormalizationFilter(result);\n    if(!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerTokenFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new ArabicStemFilter(result));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer#createComponents(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from an {@link ArabicLetterTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link ArabicNormalizationFilter}, {@link KeywordMarkerTokenFilter}\n   *         if a stem exclusion set is provided and {@link ArabicStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(matchVersion, reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    // the order here is important: the stopword list is not normalized!\n    result = new StopFilter( matchVersion, result, stopwords);\n    // TODO maybe we should make ArabicNormalization filter also KeywordAttribute aware?!\n    result = new ArabicNormalizationFilter(result);\n    if(!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerTokenFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new ArabicStemFilter(result));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from an {@link ArabicLetterTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link ArabicNormalizationFilter}, {@link KeywordMarkerTokenFilter}\n   *         if a stem exclusion set is provided and {@link ArabicStemFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(matchVersion, reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    // the order here is important: the stopword list is not normalized!\n    result = new StopFilter( matchVersion, result, stopwords);\n    // TODO maybe we should make ArabicNormalization filter also KeywordAttribute aware?!\n    result = new ArabicNormalizationFilter(result);\n    if(!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerTokenFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new ArabicStemFilter(result));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b9fc748b8fc4097ccc222bdf2948cc2d20770c54":["ddc5fbfd4c64963aba52713a4496522540294d69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ddc5fbfd4c64963aba52713a4496522540294d69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["b9fc748b8fc4097ccc222bdf2948cc2d20770c54"]},"commit2Childs":{"b9fc748b8fc4097ccc222bdf2948cc2d20770c54":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ddc5fbfd4c64963aba52713a4496522540294d69"],"ddc5fbfd4c64963aba52713a4496522540294d69":["b9fc748b8fc4097ccc222bdf2948cc2d20770c54"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}