{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerUtils#checkProperty(Map[String,Object],Map[String,String],String,boolean,Class...).mjava","commits":[{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerUtils#checkProperty(Map[String,Object],Map[String,String],String,boolean,Class...).mjava","pathOld":"/dev/null","sourceNew":"  public static void checkProperty(Map<String, Object> properties, Map<String, String> results, String name, boolean required, Class... acceptClasses) {\n    Object value = properties.get(name);\n    if (value == null) {\n      if (required) {\n        results.put(name, \"missing required value\");\n      } else {\n        return;\n      }\n    }\n    if (acceptClasses == null || acceptClasses.length == 0) {\n      return;\n    }\n    boolean accepted = false;\n    for (Class clz : acceptClasses) {\n      if (clz.isAssignableFrom(value.getClass())) {\n        accepted = true;\n        break;\n      }\n    }\n    if (!accepted) {\n      results.put(name, \"value is not an expected type\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerUtils#checkProperty(Map[String,Object],Map[String,String],String,boolean,Class...).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerUtils#checkProperty(Map[String,Object],Map[String,String],String,boolean,Class...).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static void checkProperty(Map<String, Object> properties, Map<String, String> results, String name, boolean required, Class... acceptClasses) {\n    Object value = properties.get(name);\n    if (value == null) {\n      if (required) {\n        results.put(name, \"missing required value\");\n      } else {\n        return;\n      }\n    }\n    if (acceptClasses == null || acceptClasses.length == 0) {\n      return;\n    }\n    boolean accepted = false;\n    for (Class clz : acceptClasses) {\n      if (clz.isAssignableFrom(value.getClass())) {\n        accepted = true;\n        break;\n      }\n    }\n    if (!accepted) {\n      results.put(name, \"value is not an expected type\");\n    }\n  }\n\n","sourceOld":"  public static void checkProperty(Map<String, Object> properties, Map<String, String> results, String name, boolean required, Class... acceptClasses) {\n    Object value = properties.get(name);\n    if (value == null) {\n      if (required) {\n        results.put(name, \"missing required value\");\n      } else {\n        return;\n      }\n    }\n    if (acceptClasses == null || acceptClasses.length == 0) {\n      return;\n    }\n    boolean accepted = false;\n    for (Class clz : acceptClasses) {\n      if (clz.isAssignableFrom(value.getClass())) {\n        accepted = true;\n        break;\n      }\n    }\n    if (!accepted) {\n      results.put(name, \"value is not an expected type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerUtils#checkProperty(Map[String,Object],Map[String,String],String,boolean,Class...).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static void checkProperty(Map<String, Object> properties, Map<String, String> results, String name, boolean required, Class... acceptClasses) {\n    Object value = properties.get(name);\n    if (value == null) {\n      if (required) {\n        results.put(name, \"missing required value\");\n      } else {\n        return;\n      }\n    }\n    if (acceptClasses == null || acceptClasses.length == 0) {\n      return;\n    }\n    boolean accepted = false;\n    for (Class clz : acceptClasses) {\n      if (clz.isAssignableFrom(value.getClass())) {\n        accepted = true;\n        break;\n      }\n    }\n    if (!accepted) {\n      results.put(name, \"value is not an expected type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}