{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getLabel(int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getLabel(int).mjava","pathOld":"/dev/null","sourceNew":"  private String getLabel(int catID) throws CorruptIndexException, IOException {\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(getCategoryCache) {\n      String res = getCategoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      ret = indexReader.document(catID, Consts.fullPathSelector)\n      .get(Consts.FULL);\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (getCategoryCache) {\n      getCategoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getLabel(int).mjava","pathOld":"/dev/null","sourceNew":"  private String getLabel(int catID) throws CorruptIndexException, IOException {\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(getCategoryCache) {\n      String res = getCategoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      ret = indexReader.document(catID, Consts.fullPathSelector)\n      .get(Consts.FULL);\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (getCategoryCache) {\n      getCategoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getLabel(int).mjava","pathOld":"/dev/null","sourceNew":"  private String getLabel(int catID) throws CorruptIndexException, IOException {\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(getCategoryCache) {\n      String res = getCategoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      ret = indexReader.document(catID, Consts.fullPathSelector)\n      .get(Consts.FULL);\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (getCategoryCache) {\n      getCategoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getLabel(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getLabel(int).mjava","sourceNew":"  private String getLabel(int catID) throws CorruptIndexException, IOException {\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(getCategoryCache) {\n      String res = getCategoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      final LoadFullPathOnly loader = new LoadFullPathOnly();\n      indexReader.document(catID, loader);\n      ret = loader.getFullPath();\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (getCategoryCache) {\n      getCategoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  private String getLabel(int catID) throws CorruptIndexException, IOException {\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(getCategoryCache) {\n      String res = getCategoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      ret = indexReader.document(catID, Consts.fullPathSelector)\n      .get(Consts.FULL);\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (getCategoryCache) {\n      getCategoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7fea68ff83c1db2f720597dfcea5bee943a35f35","date":1317817445,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getLabel(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getLabel(int).mjava","sourceNew":"  private String getLabel(int catID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(getCategoryCache) {\n      String res = getCategoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      final LoadFullPathOnly loader = new LoadFullPathOnly();\n      indexReader.document(catID, loader);\n      ret = loader.getFullPath();\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (getCategoryCache) {\n      getCategoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  private String getLabel(int catID) throws CorruptIndexException, IOException {\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(getCategoryCache) {\n      String res = getCategoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      final LoadFullPathOnly loader = new LoadFullPathOnly();\n      indexReader.document(catID, loader);\n      ret = loader.getFullPath();\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (getCategoryCache) {\n      getCategoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24315bf90acffc79fa6d5fb325f6c1cf9fc9642b","date":1317820981,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getLabel(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getLabel(int).mjava","sourceNew":"  private String getLabel(int catID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(categoryCache) {\n      String res = categoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      final LoadFullPathOnly loader = new LoadFullPathOnly();\n      indexReader.document(catID, loader);\n      ret = loader.getFullPath();\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  private String getLabel(int catID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(getCategoryCache) {\n      String res = getCategoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      final LoadFullPathOnly loader = new LoadFullPathOnly();\n      indexReader.document(catID, loader);\n      ret = loader.getFullPath();\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (getCategoryCache) {\n      getCategoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getLabel(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getLabel(int).mjava","sourceNew":"  private String getLabel(int catID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(categoryCache) {\n      String res = categoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      final LoadFullPathOnly loader = new LoadFullPathOnly();\n      indexReader.document(catID, loader);\n      ret = loader.getFullPath();\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  private String getLabel(int catID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(categoryCache) {\n      String res = categoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      final LoadFullPathOnly loader = new LoadFullPathOnly();\n      indexReader.document(catID, loader);\n      ret = loader.getFullPath();\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["24315bf90acffc79fa6d5fb325f6c1cf9fc9642b"],"7fea68ff83c1db2f720597dfcea5bee943a35f35":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"24315bf90acffc79fa6d5fb325f6c1cf9fc9642b":["7fea68ff83c1db2f720597dfcea5bee943a35f35"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"]},"commit2Childs":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7fea68ff83c1db2f720597dfcea5bee943a35f35":["24315bf90acffc79fa6d5fb325f6c1cf9fc9642b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7fea68ff83c1db2f720597dfcea5bee943a35f35"],"24315bf90acffc79fa6d5fb325f6c1cf9fc9642b":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["1509f151d7692d84fae414b2b799ac06ba60fcb4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}