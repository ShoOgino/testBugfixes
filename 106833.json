{"path":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery,SpanCollector).mjava","commits":[{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery,SpanCollector).mjava","pathOld":"/dev/null","sourceNew":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery, SpanCollector collector) throws IOException {\n    LeafReader lr = SlowCompositeReaderWrapper.wrap(reader); // slow, but ok for testing\n    LeafReaderContext lrContext = lr.getContext();\n    SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(lr); // get the term contexts so getSpans can be called directly\n    HashSet<Term> termSet = new HashSet<>();\n    rewrittenQuery.extractTerms(termSet);\n    Map<Term,TermContext> termContexts = new HashMap<>();\n    for (Term term: termSet) {\n      TermContext termContext = TermContext.build(lrContext, term);\n      termContexts.put(term, termContext);\n    }\n    Spans actSpans = spanQuery.getSpans(lrContext, new Bits.MatchAllBits(lr.numDocs()), termContexts, collector);\n    return actSpans;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c257cd8ddb1ed5632a36c7488614a2ee21705d24","date":1432128550,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery,SpanCollector).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery,SpanCollector).mjava","sourceNew":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery, SpanCollector collector) throws IOException {\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n    LeafReader lr = SlowCompositeReaderWrapper.wrap(reader); // slow, but ok for testing\n    LeafReaderContext lrContext = lr.getContext();\n\n    SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(spanQuery, false);\n\n    return w.getSpans(lrContext, new Bits.MatchAllBits(lr.numDocs()), collector);\n  }\n\n","sourceOld":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery, SpanCollector collector) throws IOException {\n    LeafReader lr = SlowCompositeReaderWrapper.wrap(reader); // slow, but ok for testing\n    LeafReaderContext lrContext = lr.getContext();\n    SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(lr); // get the term contexts so getSpans can be called directly\n    HashSet<Term> termSet = new HashSet<>();\n    rewrittenQuery.extractTerms(termSet);\n    Map<Term,TermContext> termContexts = new HashMap<>();\n    for (Term term: termSet) {\n      TermContext termContext = TermContext.build(lrContext, term);\n      termContexts.put(term, termContext);\n    }\n    Spans actSpans = spanQuery.getSpans(lrContext, new Bits.MatchAllBits(lr.numDocs()), termContexts, collector);\n    return actSpans;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcf643b4ac35b1ca315f5970eaa5c6066243565","date":1432135643,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery,SpanCollector).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery,SpanCollector).mjava","sourceNew":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery, SpanCollector collector) throws IOException {\n\n    LeafReader lr = SlowCompositeReaderWrapper.wrap(reader); // slow, but ok for testing\n    LeafReaderContext lrContext = lr.getContext();\n    IndexSearcher searcher = new IndexSearcher(lr);\n    searcher.setQueryCache(null);\n\n    SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(spanQuery, false);\n\n    return w.getSpans(lrContext, new Bits.MatchAllBits(lr.numDocs()), collector);\n  }\n\n","sourceOld":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery, SpanCollector collector) throws IOException {\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n    LeafReader lr = SlowCompositeReaderWrapper.wrap(reader); // slow, but ok for testing\n    LeafReaderContext lrContext = lr.getContext();\n\n    SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(spanQuery, false);\n\n    return w.getSpans(lrContext, new Bits.MatchAllBits(lr.numDocs()), collector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery,SpanWeight.Postings).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReader,SpanQuery,SpanCollector).mjava","sourceNew":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery, SpanWeight.Postings requiredPostings) throws IOException {\n\n    LeafReader lr = SlowCompositeReaderWrapper.wrap(reader); // slow, but ok for testing\n    LeafReaderContext lrContext = lr.getContext();\n    IndexSearcher searcher = new IndexSearcher(lr);\n    searcher.setQueryCache(null);\n\n    SpanWeight w = spanQuery.createWeight(searcher, false);\n\n    return w.getSpans(lrContext, new Bits.MatchAllBits(lr.numDocs()), requiredPostings);\n  }\n\n","sourceOld":"  public static Spans wrap(IndexReader reader, SpanQuery spanQuery, SpanCollector collector) throws IOException {\n\n    LeafReader lr = SlowCompositeReaderWrapper.wrap(reader); // slow, but ok for testing\n    LeafReaderContext lrContext = lr.getContext();\n    IndexSearcher searcher = new IndexSearcher(lr);\n    searcher.setQueryCache(null);\n\n    SpanWeight w = (SpanWeight) searcher.createNormalizedWeight(spanQuery, false);\n\n    return w.getSpans(lrContext, new Bits.MatchAllBits(lr.numDocs()), collector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29aea3139c4326c0501d75d51059855463220279":["fbcf643b4ac35b1ca315f5970eaa5c6066243565"],"fbcf643b4ac35b1ca315f5970eaa5c6066243565":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["29aea3139c4326c0501d75d51059855463220279"]},"commit2Childs":{"29aea3139c4326c0501d75d51059855463220279":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fbcf643b4ac35b1ca315f5970eaa5c6066243565":["29aea3139c4326c0501d75d51059855463220279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["fbcf643b4ac35b1ca315f5970eaa5c6066243565"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}