{"path":"modules/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMABaseAnalyzerTest#baseUIMAAnalyzerIntegrationTest().mjava","commits":[{"id":"2ac3b0ef79dfcf20e23ceb1d0e4165591014307f","date":1329257614,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"modules/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMABaseAnalyzerTest#baseUIMAAnalyzerIntegrationTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void baseUIMAAnalyzerIntegrationTest() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, analyzer));\n    // add the first doc\n    Document doc = new Document();\n    String dummyTitle = \"this is a dummy title \";\n    doc.add(new Field(\"title\", dummyTitle, TextField.TYPE_STORED));\n    String dummyContent = \"there is some content written here\";\n    doc.add(new Field(\"contents\", dummyContent, TextField.TYPE_STORED));\n    writer.addDocument(doc, analyzer);\n    writer.commit();\n\n    // try the search over the first doc\n    DirectoryReader directoryReader = DirectoryReader.open(dir);\n    IndexSearcher indexSearcher = new IndexSearcher(directoryReader);\n    TopDocs result = indexSearcher.search(new MatchAllDocsQuery(), 10);\n    assertTrue(result.totalHits > 0);\n    Document d = indexSearcher.doc(result.scoreDocs[0].doc);\n    assertNotNull(d);\n    assertNotNull(d.getField(\"title\"));\n    assertEquals(dummyTitle, d.getField(\"title\").stringValue());\n    assertNotNull(d.getField(\"contents\"));\n    assertEquals(dummyContent, d.getField(\"contents\").stringValue());\n\n    // add a second doc\n    doc = new Document();\n    String dogmasTitle = \"dogmas\";\n    doc.add(new Field(\"title\", dogmasTitle, TextField.TYPE_STORED));\n    String dogmasContents = \"white men can't jump\";\n    doc.add(new Field(\"contents\", dogmasContents, TextField.TYPE_STORED));\n    writer.addDocument(doc, analyzer);\n    writer.commit();\n\n    directoryReader.close();\n    directoryReader = DirectoryReader.open(dir);\n    indexSearcher = new IndexSearcher(directoryReader);\n    result = indexSearcher.search(new MatchAllDocsQuery(), 10);\n    Document d1 = indexSearcher.doc(result.scoreDocs[1].doc);\n    assertNotNull(d1);\n    assertNotNull(d1.getField(\"title\"));\n    assertEquals(dogmasTitle, d1.getField(\"title\").stringValue());\n    assertNotNull(d1.getField(\"contents\"));\n    assertEquals(dogmasContents, d1.getField(\"contents\").stringValue());\n\n    // do a matchalldocs query to retrieve both docs\n    indexSearcher = new IndexSearcher(directoryReader);\n    result = indexSearcher.search(new MatchAllDocsQuery(), 10);\n    assertEquals(2, result.totalHits);\n    writer.close();\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMABaseAnalyzerTest#baseUIMAAnalyzerIntegrationTest().mjava","pathOld":"modules/analysis/uima/src/test/org/apache/lucene/analysis/uima/UIMABaseAnalyzerTest#baseUIMAAnalyzerIntegrationTest().mjava","sourceNew":"  @Test\n  public void baseUIMAAnalyzerIntegrationTest() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, analyzer));\n    // add the first doc\n    Document doc = new Document();\n    String dummyTitle = \"this is a dummy title \";\n    doc.add(new Field(\"title\", dummyTitle, TextField.TYPE_STORED));\n    String dummyContent = \"there is some content written here\";\n    doc.add(new Field(\"contents\", dummyContent, TextField.TYPE_STORED));\n    writer.addDocument(doc, analyzer);\n    writer.commit();\n\n    // try the search over the first doc\n    DirectoryReader directoryReader = DirectoryReader.open(dir);\n    IndexSearcher indexSearcher = new IndexSearcher(directoryReader);\n    TopDocs result = indexSearcher.search(new MatchAllDocsQuery(), 10);\n    assertTrue(result.totalHits > 0);\n    Document d = indexSearcher.doc(result.scoreDocs[0].doc);\n    assertNotNull(d);\n    assertNotNull(d.getField(\"title\"));\n    assertEquals(dummyTitle, d.getField(\"title\").stringValue());\n    assertNotNull(d.getField(\"contents\"));\n    assertEquals(dummyContent, d.getField(\"contents\").stringValue());\n\n    // add a second doc\n    doc = new Document();\n    String dogmasTitle = \"dogmas\";\n    doc.add(new Field(\"title\", dogmasTitle, TextField.TYPE_STORED));\n    String dogmasContents = \"white men can't jump\";\n    doc.add(new Field(\"contents\", dogmasContents, TextField.TYPE_STORED));\n    writer.addDocument(doc, analyzer);\n    writer.commit();\n\n    directoryReader.close();\n    directoryReader = DirectoryReader.open(dir);\n    indexSearcher = new IndexSearcher(directoryReader);\n    result = indexSearcher.search(new MatchAllDocsQuery(), 10);\n    Document d1 = indexSearcher.doc(result.scoreDocs[1].doc);\n    assertNotNull(d1);\n    assertNotNull(d1.getField(\"title\"));\n    assertEquals(dogmasTitle, d1.getField(\"title\").stringValue());\n    assertNotNull(d1.getField(\"contents\"));\n    assertEquals(dogmasContents, d1.getField(\"contents\").stringValue());\n\n    // do a matchalldocs query to retrieve both docs\n    indexSearcher = new IndexSearcher(directoryReader);\n    result = indexSearcher.search(new MatchAllDocsQuery(), 10);\n    assertEquals(2, result.totalHits);\n    writer.close();\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void baseUIMAAnalyzerIntegrationTest() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, analyzer));\n    // add the first doc\n    Document doc = new Document();\n    String dummyTitle = \"this is a dummy title \";\n    doc.add(new Field(\"title\", dummyTitle, TextField.TYPE_STORED));\n    String dummyContent = \"there is some content written here\";\n    doc.add(new Field(\"contents\", dummyContent, TextField.TYPE_STORED));\n    writer.addDocument(doc, analyzer);\n    writer.commit();\n\n    // try the search over the first doc\n    DirectoryReader directoryReader = DirectoryReader.open(dir);\n    IndexSearcher indexSearcher = new IndexSearcher(directoryReader);\n    TopDocs result = indexSearcher.search(new MatchAllDocsQuery(), 10);\n    assertTrue(result.totalHits > 0);\n    Document d = indexSearcher.doc(result.scoreDocs[0].doc);\n    assertNotNull(d);\n    assertNotNull(d.getField(\"title\"));\n    assertEquals(dummyTitle, d.getField(\"title\").stringValue());\n    assertNotNull(d.getField(\"contents\"));\n    assertEquals(dummyContent, d.getField(\"contents\").stringValue());\n\n    // add a second doc\n    doc = new Document();\n    String dogmasTitle = \"dogmas\";\n    doc.add(new Field(\"title\", dogmasTitle, TextField.TYPE_STORED));\n    String dogmasContents = \"white men can't jump\";\n    doc.add(new Field(\"contents\", dogmasContents, TextField.TYPE_STORED));\n    writer.addDocument(doc, analyzer);\n    writer.commit();\n\n    directoryReader.close();\n    directoryReader = DirectoryReader.open(dir);\n    indexSearcher = new IndexSearcher(directoryReader);\n    result = indexSearcher.search(new MatchAllDocsQuery(), 10);\n    Document d1 = indexSearcher.doc(result.scoreDocs[1].doc);\n    assertNotNull(d1);\n    assertNotNull(d1.getField(\"title\"));\n    assertEquals(dogmasTitle, d1.getField(\"title\").stringValue());\n    assertNotNull(d1.getField(\"contents\"));\n    assertEquals(dogmasContents, d1.getField(\"contents\").stringValue());\n\n    // do a matchalldocs query to retrieve both docs\n    indexSearcher = new IndexSearcher(directoryReader);\n    result = indexSearcher.search(new MatchAllDocsQuery(), 10);\n    assertEquals(2, result.totalHits);\n    writer.close();\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2ac3b0ef79dfcf20e23ceb1d0e4165591014307f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2ac3b0ef79dfcf20e23ceb1d0e4165591014307f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"2ac3b0ef79dfcf20e23ceb1d0e4165591014307f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ac3b0ef79dfcf20e23ceb1d0e4165591014307f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}