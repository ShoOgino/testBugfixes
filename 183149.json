{"path":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","commits":[{"id":"0ef4d3aeb733ae886f562af3b735f50503926a12","date":1438854939,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","pathOld":"/dev/null","sourceNew":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    TermQuery foo = new TermQuery(new Term(\"text\", \"foo\"));\n    TermQuery bar = new TermQuery(new Term(\"text\", \"bar\"));\n    bar.setBoost(2);\n    TermQuery baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz.setBoost(3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        for (boolean doMaxScore : new boolean[] {false, true}) {\n          final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, doMaxScore);\n          final Collector assertingCollector = new Collector() {\n            @Override\n            public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n              final LeafCollector in = topCollector.getLeafCollector(context);\n              return new FilterLeafCollector(in) {\n                @Override\n                public void setScorer(final Scorer scorer) throws IOException {\n                  Scorer s = new Scorer(null) {\n\n                    int lastComputedDoc = -1;\n                    \n                    @Override\n                    public float score() throws IOException {\n                      if (lastComputedDoc == docID()) {\n                        throw new AssertionError(\"Score computed twice on \" + docID());\n                      }\n                      lastComputedDoc = docID();\n                      return scorer.score();\n                    }\n\n                    @Override\n                    public int freq() throws IOException {\n                      return scorer.freq();\n                    }\n\n                    @Override\n                    public int docID() {\n                      return scorer.docID();\n                    }\n\n                    @Override\n                    public int nextDoc() throws IOException {\n                      return scorer.nextDoc();\n                    }\n\n                    @Override\n                    public int advance(int target) throws IOException {\n                      return scorer.advance(target);\n                    }\n\n                    @Override\n                    public long cost() {\n                      return scorer.cost();\n                    }\n                    \n                  };\n                  super.setScorer(s);\n                }\n              };\n            }\n            @Override\n            public boolean needsScores() {\n              return topCollector.needsScores();\n            }\n          };\n          searcher.search(query, assertingCollector);\n        }\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","sourceNew":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        for (boolean doMaxScore : new boolean[] {false, true}) {\n          final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, doMaxScore);\n          final Collector assertingCollector = new Collector() {\n            @Override\n            public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n              final LeafCollector in = topCollector.getLeafCollector(context);\n              return new FilterLeafCollector(in) {\n                @Override\n                public void setScorer(final Scorer scorer) throws IOException {\n                  Scorer s = new Scorer(null) {\n\n                    int lastComputedDoc = -1;\n                    \n                    @Override\n                    public float score() throws IOException {\n                      if (lastComputedDoc == docID()) {\n                        throw new AssertionError(\"Score computed twice on \" + docID());\n                      }\n                      lastComputedDoc = docID();\n                      return scorer.score();\n                    }\n\n                    @Override\n                    public int freq() throws IOException {\n                      return scorer.freq();\n                    }\n\n                    @Override\n                    public int docID() {\n                      return scorer.docID();\n                    }\n\n                    @Override\n                    public int nextDoc() throws IOException {\n                      return scorer.nextDoc();\n                    }\n\n                    @Override\n                    public int advance(int target) throws IOException {\n                      return scorer.advance(target);\n                    }\n\n                    @Override\n                    public long cost() {\n                      return scorer.cost();\n                    }\n                    \n                  };\n                  super.setScorer(s);\n                }\n              };\n            }\n            @Override\n            public boolean needsScores() {\n              return topCollector.needsScores();\n            }\n          };\n          searcher.search(query, assertingCollector);\n        }\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    TermQuery foo = new TermQuery(new Term(\"text\", \"foo\"));\n    TermQuery bar = new TermQuery(new Term(\"text\", \"bar\"));\n    bar.setBoost(2);\n    TermQuery baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz.setBoost(3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        for (boolean doMaxScore : new boolean[] {false, true}) {\n          final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, doMaxScore);\n          final Collector assertingCollector = new Collector() {\n            @Override\n            public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n              final LeafCollector in = topCollector.getLeafCollector(context);\n              return new FilterLeafCollector(in) {\n                @Override\n                public void setScorer(final Scorer scorer) throws IOException {\n                  Scorer s = new Scorer(null) {\n\n                    int lastComputedDoc = -1;\n                    \n                    @Override\n                    public float score() throws IOException {\n                      if (lastComputedDoc == docID()) {\n                        throw new AssertionError(\"Score computed twice on \" + docID());\n                      }\n                      lastComputedDoc = docID();\n                      return scorer.score();\n                    }\n\n                    @Override\n                    public int freq() throws IOException {\n                      return scorer.freq();\n                    }\n\n                    @Override\n                    public int docID() {\n                      return scorer.docID();\n                    }\n\n                    @Override\n                    public int nextDoc() throws IOException {\n                      return scorer.nextDoc();\n                    }\n\n                    @Override\n                    public int advance(int target) throws IOException {\n                      return scorer.advance(target);\n                    }\n\n                    @Override\n                    public long cost() {\n                      return scorer.cost();\n                    }\n                    \n                  };\n                  super.setScorer(s);\n                }\n              };\n            }\n            @Override\n            public boolean needsScores() {\n              return topCollector.needsScores();\n            }\n          };\n          searcher.search(query, assertingCollector);\n        }\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","sourceNew":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        for (boolean doMaxScore : new boolean[] {false, true}) {\n          final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, doMaxScore);\n          final Collector assertingCollector = new Collector() {\n            @Override\n            public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n              final LeafCollector in = topCollector.getLeafCollector(context);\n              return new FilterLeafCollector(in) {\n                @Override\n                public void setScorer(final Scorer scorer) throws IOException {\n                  Scorer s = new Scorer(null) {\n\n                    int lastComputedDoc = -1;\n                    \n                    @Override\n                    public float score() throws IOException {\n                      if (lastComputedDoc == docID()) {\n                        throw new AssertionError(\"Score computed twice on \" + docID());\n                      }\n                      lastComputedDoc = docID();\n                      return scorer.score();\n                    }\n\n                    @Override\n                    public int freq() throws IOException {\n                      return scorer.freq();\n                    }\n\n                    @Override\n                    public int docID() {\n                      return scorer.docID();\n                    }\n\n                    @Override\n                    public DocIdSetIterator iterator() {\n                      return scorer.iterator();\n                    }\n                    \n                  };\n                  super.setScorer(s);\n                }\n              };\n            }\n            @Override\n            public boolean needsScores() {\n              return topCollector.needsScores();\n            }\n          };\n          searcher.search(query, assertingCollector);\n        }\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        for (boolean doMaxScore : new boolean[] {false, true}) {\n          final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, doMaxScore);\n          final Collector assertingCollector = new Collector() {\n            @Override\n            public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n              final LeafCollector in = topCollector.getLeafCollector(context);\n              return new FilterLeafCollector(in) {\n                @Override\n                public void setScorer(final Scorer scorer) throws IOException {\n                  Scorer s = new Scorer(null) {\n\n                    int lastComputedDoc = -1;\n                    \n                    @Override\n                    public float score() throws IOException {\n                      if (lastComputedDoc == docID()) {\n                        throw new AssertionError(\"Score computed twice on \" + docID());\n                      }\n                      lastComputedDoc = docID();\n                      return scorer.score();\n                    }\n\n                    @Override\n                    public int freq() throws IOException {\n                      return scorer.freq();\n                    }\n\n                    @Override\n                    public int docID() {\n                      return scorer.docID();\n                    }\n\n                    @Override\n                    public int nextDoc() throws IOException {\n                      return scorer.nextDoc();\n                    }\n\n                    @Override\n                    public int advance(int target) throws IOException {\n                      return scorer.advance(target);\n                    }\n\n                    @Override\n                    public long cost() {\n                      return scorer.cost();\n                    }\n                    \n                  };\n                  super.setScorer(s);\n                }\n              };\n            }\n            @Override\n            public boolean needsScores() {\n              return topCollector.needsScores();\n            }\n          };\n          searcher.search(query, assertingCollector);\n        }\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc14da055888b63b4f8c922d0e1579f3cb315ad7","date":1510744456,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","sourceNew":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        for (boolean doMaxScore : new boolean[] {false, true}) {\n          final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, doMaxScore);\n          final Collector assertingCollector = new Collector() {\n            @Override\n            public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n              final LeafCollector in = topCollector.getLeafCollector(context);\n              return new FilterLeafCollector(in) {\n                @Override\n                public void setScorer(final Scorer scorer) throws IOException {\n                  Scorer s = new Scorer(null) {\n\n                    int lastComputedDoc = -1;\n                    \n                    @Override\n                    public float score() throws IOException {\n                      if (lastComputedDoc == docID()) {\n                        throw new AssertionError(\"Score computed twice on \" + docID());\n                      }\n                      lastComputedDoc = docID();\n                      return scorer.score();\n                    }\n\n                    @Override\n                    public int docID() {\n                      return scorer.docID();\n                    }\n\n                    @Override\n                    public DocIdSetIterator iterator() {\n                      return scorer.iterator();\n                    }\n                    \n                  };\n                  super.setScorer(s);\n                }\n              };\n            }\n            @Override\n            public boolean needsScores() {\n              return topCollector.needsScores();\n            }\n          };\n          searcher.search(query, assertingCollector);\n        }\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        for (boolean doMaxScore : new boolean[] {false, true}) {\n          final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, doMaxScore);\n          final Collector assertingCollector = new Collector() {\n            @Override\n            public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n              final LeafCollector in = topCollector.getLeafCollector(context);\n              return new FilterLeafCollector(in) {\n                @Override\n                public void setScorer(final Scorer scorer) throws IOException {\n                  Scorer s = new Scorer(null) {\n\n                    int lastComputedDoc = -1;\n                    \n                    @Override\n                    public float score() throws IOException {\n                      if (lastComputedDoc == docID()) {\n                        throw new AssertionError(\"Score computed twice on \" + docID());\n                      }\n                      lastComputedDoc = docID();\n                      return scorer.score();\n                    }\n\n                    @Override\n                    public int freq() throws IOException {\n                      return scorer.freq();\n                    }\n\n                    @Override\n                    public int docID() {\n                      return scorer.docID();\n                    }\n\n                    @Override\n                    public DocIdSetIterator iterator() {\n                      return scorer.iterator();\n                    }\n                    \n                  };\n                  super.setScorer(s);\n                }\n              };\n            }\n            @Override\n            public boolean needsScores() {\n              return topCollector.needsScores();\n            }\n          };\n          searcher.search(query, assertingCollector);\n        }\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"404d1ab7f6f396235047017c88d545fec15dafb7","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","sourceNew":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        for (boolean doMaxScore : new boolean[] {false, true}) {\n          final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, doMaxScore, true);\n          final Collector assertingCollector = new Collector() {\n            @Override\n            public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n              final LeafCollector in = topCollector.getLeafCollector(context);\n              return new FilterLeafCollector(in) {\n                @Override\n                public void setScorer(final Scorer scorer) throws IOException {\n                  Scorer s = new Scorer(null) {\n\n                    int lastComputedDoc = -1;\n                    \n                    @Override\n                    public float score() throws IOException {\n                      if (lastComputedDoc == docID()) {\n                        throw new AssertionError(\"Score computed twice on \" + docID());\n                      }\n                      lastComputedDoc = docID();\n                      return scorer.score();\n                    }\n\n                    @Override\n                    public int docID() {\n                      return scorer.docID();\n                    }\n\n                    @Override\n                    public DocIdSetIterator iterator() {\n                      return scorer.iterator();\n                    }\n                    \n                  };\n                  super.setScorer(s);\n                }\n              };\n            }\n            @Override\n            public boolean needsScores() {\n              return topCollector.needsScores();\n            }\n          };\n          searcher.search(query, assertingCollector);\n        }\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        for (boolean doMaxScore : new boolean[] {false, true}) {\n          final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, doMaxScore);\n          final Collector assertingCollector = new Collector() {\n            @Override\n            public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n              final LeafCollector in = topCollector.getLeafCollector(context);\n              return new FilterLeafCollector(in) {\n                @Override\n                public void setScorer(final Scorer scorer) throws IOException {\n                  Scorer s = new Scorer(null) {\n\n                    int lastComputedDoc = -1;\n                    \n                    @Override\n                    public float score() throws IOException {\n                      if (lastComputedDoc == docID()) {\n                        throw new AssertionError(\"Score computed twice on \" + docID());\n                      }\n                      lastComputedDoc = docID();\n                      return scorer.score();\n                    }\n\n                    @Override\n                    public int docID() {\n                      return scorer.docID();\n                    }\n\n                    @Override\n                    public DocIdSetIterator iterator() {\n                      return scorer.iterator();\n                    }\n                    \n                  };\n                  super.setScorer(s);\n                }\n              };\n            }\n            @Override\n            public boolean needsScores() {\n              return topCollector.needsScores();\n            }\n          };\n          searcher.search(query, assertingCollector);\n        }\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","sourceNew":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        for (boolean doMaxScore : new boolean[] {false, true}) {\n          final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, doMaxScore, true);\n          final Collector assertingCollector = new Collector() {\n            @Override\n            public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n              final LeafCollector in = topCollector.getLeafCollector(context);\n              return new FilterLeafCollector(in) {\n                @Override\n                public void setScorer(final Scorer scorer) throws IOException {\n                  Scorer s = new Scorer(null) {\n\n                    int lastComputedDoc = -1;\n                    \n                    @Override\n                    public float score() throws IOException {\n                      if (lastComputedDoc == docID()) {\n                        throw new AssertionError(\"Score computed twice on \" + docID());\n                      }\n                      lastComputedDoc = docID();\n                      return scorer.score();\n                    }\n\n                    @Override\n                    public int docID() {\n                      return scorer.docID();\n                    }\n\n                    @Override\n                    public DocIdSetIterator iterator() {\n                      return scorer.iterator();\n                    }\n                    \n                  };\n                  super.setScorer(s);\n                }\n              };\n            }\n            @Override\n            public boolean needsScores() {\n              return topCollector.needsScores();\n            }\n          };\n          searcher.search(query, assertingCollector);\n        }\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        for (boolean doMaxScore : new boolean[] {false, true}) {\n          final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, doMaxScore);\n          final Collector assertingCollector = new Collector() {\n            @Override\n            public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n              final LeafCollector in = topCollector.getLeafCollector(context);\n              return new FilterLeafCollector(in) {\n                @Override\n                public void setScorer(final Scorer scorer) throws IOException {\n                  Scorer s = new Scorer(null) {\n\n                    int lastComputedDoc = -1;\n                    \n                    @Override\n                    public float score() throws IOException {\n                      if (lastComputedDoc == docID()) {\n                        throw new AssertionError(\"Score computed twice on \" + docID());\n                      }\n                      lastComputedDoc = docID();\n                      return scorer.score();\n                    }\n\n                    @Override\n                    public int docID() {\n                      return scorer.docID();\n                    }\n\n                    @Override\n                    public DocIdSetIterator iterator() {\n                      return scorer.iterator();\n                    }\n                    \n                  };\n                  super.setScorer(s);\n                }\n              };\n            }\n            @Override\n            public boolean needsScores() {\n              return topCollector.needsScores();\n            }\n          };\n          searcher.search(query, assertingCollector);\n        }\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","sourceNew":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        for (boolean doMaxScore : new boolean[] {false, true}) {\n          final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, doMaxScore, true);\n          final Collector assertingCollector = new Collector() {\n            @Override\n            public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n              final LeafCollector in = topCollector.getLeafCollector(context);\n              return new FilterLeafCollector(in) {\n                @Override\n                public void setScorer(final Scorer scorer) throws IOException {\n                  Scorer s = new Scorer(null) {\n\n                    int lastComputedDoc = -1;\n                    \n                    @Override\n                    public float score() throws IOException {\n                      if (lastComputedDoc == docID()) {\n                        throw new AssertionError(\"Score computed twice on \" + docID());\n                      }\n                      lastComputedDoc = docID();\n                      return scorer.score();\n                    }\n\n                    @Override\n                    public float maxScore() {\n                      return scorer.maxScore();\n                    }\n\n                    @Override\n                    public int docID() {\n                      return scorer.docID();\n                    }\n\n                    @Override\n                    public DocIdSetIterator iterator() {\n                      return scorer.iterator();\n                    }\n                    \n                  };\n                  super.setScorer(s);\n                }\n              };\n            }\n            @Override\n            public ScoreMode scoreMode() {\n              return topCollector.scoreMode();\n            }\n          };\n          searcher.search(query, assertingCollector);\n        }\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        for (boolean doMaxScore : new boolean[] {false, true}) {\n          final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, doMaxScore, true);\n          final Collector assertingCollector = new Collector() {\n            @Override\n            public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n              final LeafCollector in = topCollector.getLeafCollector(context);\n              return new FilterLeafCollector(in) {\n                @Override\n                public void setScorer(final Scorer scorer) throws IOException {\n                  Scorer s = new Scorer(null) {\n\n                    int lastComputedDoc = -1;\n                    \n                    @Override\n                    public float score() throws IOException {\n                      if (lastComputedDoc == docID()) {\n                        throw new AssertionError(\"Score computed twice on \" + docID());\n                      }\n                      lastComputedDoc = docID();\n                      return scorer.score();\n                    }\n\n                    @Override\n                    public int docID() {\n                      return scorer.docID();\n                    }\n\n                    @Override\n                    public DocIdSetIterator iterator() {\n                      return scorer.iterator();\n                    }\n                    \n                  };\n                  super.setScorer(s);\n                }\n              };\n            }\n            @Override\n            public boolean needsScores() {\n              return topCollector.needsScores();\n            }\n          };\n          searcher.search(query, assertingCollector);\n        }\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","sourceNew":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        for (boolean doMaxScore : new boolean[] {false, true}) {\n          final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, doMaxScore, true);\n          final Collector assertingCollector = new Collector() {\n            @Override\n            public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n              final LeafCollector in = topCollector.getLeafCollector(context);\n              return new FilterLeafCollector(in) {\n                @Override\n                public void setScorer(final Scorer scorer) throws IOException {\n                  Scorer s = new Scorer(null) {\n\n                    int lastComputedDoc = -1;\n                    \n                    @Override\n                    public float score() throws IOException {\n                      if (lastComputedDoc == docID()) {\n                        throw new AssertionError(\"Score computed twice on \" + docID());\n                      }\n                      lastComputedDoc = docID();\n                      return scorer.score();\n                    }\n\n                    @Override\n                    public float maxScore() {\n                      return scorer.maxScore();\n                    }\n\n                    @Override\n                    public int docID() {\n                      return scorer.docID();\n                    }\n\n                    @Override\n                    public DocIdSetIterator iterator() {\n                      return scorer.iterator();\n                    }\n                    \n                  };\n                  super.setScorer(s);\n                }\n              };\n            }\n            @Override\n            public ScoreMode scoreMode() {\n              return topCollector.scoreMode();\n            }\n          };\n          searcher.search(query, assertingCollector);\n        }\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        for (boolean doMaxScore : new boolean[] {false, true}) {\n          final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, doMaxScore, true);\n          final Collector assertingCollector = new Collector() {\n            @Override\n            public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n              final LeafCollector in = topCollector.getLeafCollector(context);\n              return new FilterLeafCollector(in) {\n                @Override\n                public void setScorer(final Scorer scorer) throws IOException {\n                  Scorer s = new Scorer(null) {\n\n                    int lastComputedDoc = -1;\n                    \n                    @Override\n                    public float score() throws IOException {\n                      if (lastComputedDoc == docID()) {\n                        throw new AssertionError(\"Score computed twice on \" + docID());\n                      }\n                      lastComputedDoc = docID();\n                      return scorer.score();\n                    }\n\n                    @Override\n                    public int docID() {\n                      return scorer.docID();\n                    }\n\n                    @Override\n                    public DocIdSetIterator iterator() {\n                      return scorer.iterator();\n                    }\n                    \n                  };\n                  super.setScorer(s);\n                }\n              };\n            }\n            @Override\n            public boolean needsScores() {\n              return topCollector.needsScores();\n            }\n          };\n          searcher.search(query, assertingCollector);\n        }\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","sourceNew":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        for (boolean doMaxScore : new boolean[] {false, true}) {\n          final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, doMaxScore, true);\n          final Collector assertingCollector = new Collector() {\n            @Override\n            public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n              final LeafCollector in = topCollector.getLeafCollector(context);\n              return new FilterLeafCollector(in) {\n                @Override\n                public void setScorer(final Scorer scorer) throws IOException {\n                  Scorer s = new Scorer(null) {\n\n                    int lastComputedDoc = -1;\n                    \n                    @Override\n                    public float score() throws IOException {\n                      if (lastComputedDoc == docID()) {\n                        throw new AssertionError(\"Score computed twice on \" + docID());\n                      }\n                      lastComputedDoc = docID();\n                      return scorer.score();\n                    }\n\n                    @Override\n                    public float getMaxScore(int upTo) throws IOException {\n                      return scorer.getMaxScore(upTo);\n                    }\n\n                    @Override\n                    public int docID() {\n                      return scorer.docID();\n                    }\n\n                    @Override\n                    public DocIdSetIterator iterator() {\n                      return scorer.iterator();\n                    }\n                    \n                  };\n                  super.setScorer(s);\n                }\n              };\n            }\n            @Override\n            public ScoreMode scoreMode() {\n              return topCollector.scoreMode();\n            }\n          };\n          searcher.search(query, assertingCollector);\n        }\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        for (boolean doMaxScore : new boolean[] {false, true}) {\n          final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, doMaxScore, true);\n          final Collector assertingCollector = new Collector() {\n            @Override\n            public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n              final LeafCollector in = topCollector.getLeafCollector(context);\n              return new FilterLeafCollector(in) {\n                @Override\n                public void setScorer(final Scorer scorer) throws IOException {\n                  Scorer s = new Scorer(null) {\n\n                    int lastComputedDoc = -1;\n                    \n                    @Override\n                    public float score() throws IOException {\n                      if (lastComputedDoc == docID()) {\n                        throw new AssertionError(\"Score computed twice on \" + docID());\n                      }\n                      lastComputedDoc = docID();\n                      return scorer.score();\n                    }\n\n                    @Override\n                    public float maxScore() {\n                      return scorer.maxScore();\n                    }\n\n                    @Override\n                    public int docID() {\n                      return scorer.docID();\n                    }\n\n                    @Override\n                    public DocIdSetIterator iterator() {\n                      return scorer.iterator();\n                    }\n                    \n                  };\n                  super.setScorer(s);\n                }\n              };\n            }\n            @Override\n            public ScoreMode scoreMode() {\n              return topCollector.scoreMode();\n            }\n          };\n          searcher.search(query, assertingCollector);\n        }\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","sourceNew":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, true);\n        final Collector assertingCollector = new Collector() {\n          @Override\n          public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n            final LeafCollector in = topCollector.getLeafCollector(context);\n            return new FilterLeafCollector(in) {\n              @Override\n              public void setScorer(final Scorer scorer) throws IOException {\n                Scorer s = new Scorer(null) {\n\n                  int lastComputedDoc = -1;\n\n                  @Override\n                  public float score() throws IOException {\n                    if (lastComputedDoc == docID()) {\n                      throw new AssertionError(\"Score computed twice on \" + docID());\n                    }\n                    lastComputedDoc = docID();\n                    return scorer.score();\n                  }\n\n                  @Override\n                  public float getMaxScore(int upTo) throws IOException {\n                    return scorer.getMaxScore(upTo);\n                  }\n\n                  @Override\n                  public int docID() {\n                    return scorer.docID();\n                  }\n\n                  @Override\n                  public DocIdSetIterator iterator() {\n                    return scorer.iterator();\n                  }\n\n                };\n                super.setScorer(s);\n              }\n            };\n          }\n          @Override\n          public ScoreMode scoreMode() {\n            return topCollector.scoreMode();\n          }\n        };\n        searcher.search(query, assertingCollector);\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        for (boolean doMaxScore : new boolean[] {false, true}) {\n          final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, doMaxScore, true);\n          final Collector assertingCollector = new Collector() {\n            @Override\n            public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n              final LeafCollector in = topCollector.getLeafCollector(context);\n              return new FilterLeafCollector(in) {\n                @Override\n                public void setScorer(final Scorer scorer) throws IOException {\n                  Scorer s = new Scorer(null) {\n\n                    int lastComputedDoc = -1;\n                    \n                    @Override\n                    public float score() throws IOException {\n                      if (lastComputedDoc == docID()) {\n                        throw new AssertionError(\"Score computed twice on \" + docID());\n                      }\n                      lastComputedDoc = docID();\n                      return scorer.score();\n                    }\n\n                    @Override\n                    public float getMaxScore(int upTo) throws IOException {\n                      return scorer.getMaxScore(upTo);\n                    }\n\n                    @Override\n                    public int docID() {\n                      return scorer.docID();\n                    }\n\n                    @Override\n                    public DocIdSetIterator iterator() {\n                      return scorer.iterator();\n                    }\n                    \n                  };\n                  super.setScorer(s);\n                }\n              };\n            }\n            @Override\n            public ScoreMode scoreMode() {\n              return topCollector.scoreMode();\n            }\n          };\n          searcher.search(query, assertingCollector);\n        }\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","sourceNew":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, true);\n        final Collector assertingCollector = new Collector() {\n          @Override\n          public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n            final LeafCollector in = topCollector.getLeafCollector(context);\n            return new FilterLeafCollector(in) {\n              @Override\n              public void setScorer(final Scorer scorer) throws IOException {\n                Scorer s = new Scorer(null) {\n\n                  int lastComputedDoc = -1;\n\n                  @Override\n                  public float score() throws IOException {\n                    if (lastComputedDoc == docID()) {\n                      throw new AssertionError(\"Score computed twice on \" + docID());\n                    }\n                    lastComputedDoc = docID();\n                    return scorer.score();\n                  }\n\n                  @Override\n                  public float getMaxScore(int upTo) throws IOException {\n                    return scorer.getMaxScore(upTo);\n                  }\n\n                  @Override\n                  public int docID() {\n                    return scorer.docID();\n                  }\n\n                  @Override\n                  public DocIdSetIterator iterator() {\n                    return scorer.iterator();\n                  }\n\n                };\n                super.setScorer(s);\n              }\n            };\n          }\n          @Override\n          public ScoreMode scoreMode() {\n            return topCollector.scoreMode();\n          }\n        };\n        searcher.search(query, assertingCollector);\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        for (boolean doMaxScore : new boolean[] {false, true}) {\n          final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, doMaxScore, true);\n          final Collector assertingCollector = new Collector() {\n            @Override\n            public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n              final LeafCollector in = topCollector.getLeafCollector(context);\n              return new FilterLeafCollector(in) {\n                @Override\n                public void setScorer(final Scorer scorer) throws IOException {\n                  Scorer s = new Scorer(null) {\n\n                    int lastComputedDoc = -1;\n                    \n                    @Override\n                    public float score() throws IOException {\n                      if (lastComputedDoc == docID()) {\n                        throw new AssertionError(\"Score computed twice on \" + docID());\n                      }\n                      lastComputedDoc = docID();\n                      return scorer.score();\n                    }\n\n                    @Override\n                    public float getMaxScore(int upTo) throws IOException {\n                      return scorer.getMaxScore(upTo);\n                    }\n\n                    @Override\n                    public int docID() {\n                      return scorer.docID();\n                    }\n\n                    @Override\n                    public DocIdSetIterator iterator() {\n                      return scorer.iterator();\n                    }\n                    \n                  };\n                  super.setScorer(s);\n                }\n              };\n            }\n            @Override\n            public ScoreMode scoreMode() {\n              return topCollector.scoreMode();\n            }\n          };\n          searcher.search(query, assertingCollector);\n        }\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","sourceNew":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), doDocScores, true);\n        final Collector assertingCollector = new Collector() {\n          @Override\n          public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n            final LeafCollector in = topCollector.getLeafCollector(context);\n            return new FilterLeafCollector(in) {\n              @Override\n              public void setScorer(final Scorer scorer) throws IOException {\n                Scorer s = new Scorer(null) {\n\n                  int lastComputedDoc = -1;\n\n                  @Override\n                  public float score() throws IOException {\n                    if (lastComputedDoc == docID()) {\n                      throw new AssertionError(\"Score computed twice on \" + docID());\n                    }\n                    lastComputedDoc = docID();\n                    return scorer.score();\n                  }\n\n                  @Override\n                  public float getMaxScore(int upTo) throws IOException {\n                    return scorer.getMaxScore(upTo);\n                  }\n\n                  @Override\n                  public int docID() {\n                    return scorer.docID();\n                  }\n\n                  @Override\n                  public DocIdSetIterator iterator() {\n                    return scorer.iterator();\n                  }\n\n                };\n                super.setScorer(s);\n              }\n            };\n          }\n          @Override\n          public ScoreMode scoreMode() {\n            return topCollector.scoreMode();\n          }\n        };\n        searcher.search(query, assertingCollector);\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true, doDocScores, true);\n        final Collector assertingCollector = new Collector() {\n          @Override\n          public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n            final LeafCollector in = topCollector.getLeafCollector(context);\n            return new FilterLeafCollector(in) {\n              @Override\n              public void setScorer(final Scorer scorer) throws IOException {\n                Scorer s = new Scorer(null) {\n\n                  int lastComputedDoc = -1;\n\n                  @Override\n                  public float score() throws IOException {\n                    if (lastComputedDoc == docID()) {\n                      throw new AssertionError(\"Score computed twice on \" + docID());\n                    }\n                    lastComputedDoc = docID();\n                    return scorer.score();\n                  }\n\n                  @Override\n                  public float getMaxScore(int upTo) throws IOException {\n                    return scorer.getMaxScore(upTo);\n                  }\n\n                  @Override\n                  public int docID() {\n                    return scorer.docID();\n                  }\n\n                  @Override\n                  public DocIdSetIterator iterator() {\n                    return scorer.iterator();\n                  }\n\n                };\n                super.setScorer(s);\n              }\n            };\n          }\n          @Override\n          public ScoreMode scoreMode() {\n            return topCollector.scoreMode();\n          }\n        };\n        searcher.search(query, assertingCollector);\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","sourceNew":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true);\n      final Collector assertingCollector = new Collector() {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          final LeafCollector in = topCollector.getLeafCollector(context);\n          return new FilterLeafCollector(in) {\n            @Override\n            public void setScorer(final Scorer scorer) throws IOException {\n              Scorer s = new Scorer(null) {\n\n                int lastComputedDoc = -1;\n\n                @Override\n                public float score() throws IOException {\n                  if (lastComputedDoc == docID()) {\n                    throw new AssertionError(\"Score computed twice on \" + docID());\n                  }\n                  lastComputedDoc = docID();\n                  return scorer.score();\n                }\n\n                @Override\n                public float getMaxScore(int upTo) throws IOException {\n                  return scorer.getMaxScore(upTo);\n                }\n\n                @Override\n                public int docID() {\n                  return scorer.docID();\n                }\n\n                @Override\n                public DocIdSetIterator iterator() {\n                  return scorer.iterator();\n                }\n\n              };\n              super.setScorer(s);\n            }\n          };\n        }\n        @Override\n        public ScoreMode scoreMode() {\n          return topCollector.scoreMode();\n        }\n      };\n      searcher.search(query, assertingCollector);\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      for (boolean doDocScores : new boolean[] {false, true}) {\n        final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), doDocScores, true);\n        final Collector assertingCollector = new Collector() {\n          @Override\n          public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n            final LeafCollector in = topCollector.getLeafCollector(context);\n            return new FilterLeafCollector(in) {\n              @Override\n              public void setScorer(final Scorer scorer) throws IOException {\n                Scorer s = new Scorer(null) {\n\n                  int lastComputedDoc = -1;\n\n                  @Override\n                  public float score() throws IOException {\n                    if (lastComputedDoc == docID()) {\n                      throw new AssertionError(\"Score computed twice on \" + docID());\n                    }\n                    lastComputedDoc = docID();\n                    return scorer.score();\n                  }\n\n                  @Override\n                  public float getMaxScore(int upTo) throws IOException {\n                    return scorer.getMaxScore(upTo);\n                  }\n\n                  @Override\n                  public int docID() {\n                    return scorer.docID();\n                  }\n\n                  @Override\n                  public DocIdSetIterator iterator() {\n                    return scorer.iterator();\n                  }\n\n                };\n                super.setScorer(s);\n              }\n            };\n          }\n          @Override\n          public ScoreMode scoreMode() {\n            return topCollector.scoreMode();\n          }\n        };\n        searcher.search(query, assertingCollector);\n      }\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","sourceNew":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), Integer.MAX_VALUE);\n      final Collector assertingCollector = new Collector() {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          final LeafCollector in = topCollector.getLeafCollector(context);\n          return new FilterLeafCollector(in) {\n            @Override\n            public void setScorer(final Scorer scorer) throws IOException {\n              Scorer s = new Scorer(null) {\n\n                int lastComputedDoc = -1;\n\n                @Override\n                public float score() throws IOException {\n                  if (lastComputedDoc == docID()) {\n                    throw new AssertionError(\"Score computed twice on \" + docID());\n                  }\n                  lastComputedDoc = docID();\n                  return scorer.score();\n                }\n\n                @Override\n                public float getMaxScore(int upTo) throws IOException {\n                  return scorer.getMaxScore(upTo);\n                }\n\n                @Override\n                public int docID() {\n                  return scorer.docID();\n                }\n\n                @Override\n                public DocIdSetIterator iterator() {\n                  return scorer.iterator();\n                }\n\n              };\n              super.setScorer(s);\n            }\n          };\n        }\n        @Override\n        public ScoreMode scoreMode() {\n          return topCollector.scoreMode();\n        }\n      };\n      searcher.search(query, assertingCollector);\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), true);\n      final Collector assertingCollector = new Collector() {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          final LeafCollector in = topCollector.getLeafCollector(context);\n          return new FilterLeafCollector(in) {\n            @Override\n            public void setScorer(final Scorer scorer) throws IOException {\n              Scorer s = new Scorer(null) {\n\n                int lastComputedDoc = -1;\n\n                @Override\n                public float score() throws IOException {\n                  if (lastComputedDoc == docID()) {\n                    throw new AssertionError(\"Score computed twice on \" + docID());\n                  }\n                  lastComputedDoc = docID();\n                  return scorer.score();\n                }\n\n                @Override\n                public float getMaxScore(int upTo) throws IOException {\n                  return scorer.getMaxScore(upTo);\n                }\n\n                @Override\n                public int docID() {\n                  return scorer.docID();\n                }\n\n                @Override\n                public DocIdSetIterator iterator() {\n                  return scorer.iterator();\n                }\n\n              };\n              super.setScorer(s);\n            }\n          };\n        }\n        @Override\n        public ScoreMode scoreMode() {\n          return topCollector.scoreMode();\n        }\n      };\n      searcher.search(query, assertingCollector);\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","sourceNew":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), Integer.MAX_VALUE);\n      final Collector assertingCollector = new Collector() {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          final LeafCollector in = topCollector.getLeafCollector(context);\n          return new FilterLeafCollector(in) {\n            @Override\n            public void setScorer(final Scorable scorer) throws IOException {\n              Scorable s = new FilterScorable(scorer) {\n\n                int lastComputedDoc = -1;\n\n                @Override\n                public float score() throws IOException {\n                  if (lastComputedDoc == docID()) {\n                    throw new AssertionError(\"Score computed twice on \" + docID());\n                  }\n                  lastComputedDoc = docID();\n                  return scorer.score();\n                }\n\n              };\n              super.setScorer(s);\n            }\n          };\n        }\n        @Override\n        public ScoreMode scoreMode() {\n          return topCollector.scoreMode();\n        }\n      };\n      searcher.search(query, assertingCollector);\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), Integer.MAX_VALUE);\n      final Collector assertingCollector = new Collector() {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          final LeafCollector in = topCollector.getLeafCollector(context);\n          return new FilterLeafCollector(in) {\n            @Override\n            public void setScorer(final Scorer scorer) throws IOException {\n              Scorer s = new Scorer(null) {\n\n                int lastComputedDoc = -1;\n\n                @Override\n                public float score() throws IOException {\n                  if (lastComputedDoc == docID()) {\n                    throw new AssertionError(\"Score computed twice on \" + docID());\n                  }\n                  lastComputedDoc = docID();\n                  return scorer.score();\n                }\n\n                @Override\n                public float getMaxScore(int upTo) throws IOException {\n                  return scorer.getMaxScore(upTo);\n                }\n\n                @Override\n                public int docID() {\n                  return scorer.docID();\n                }\n\n                @Override\n                public DocIdSetIterator iterator() {\n                  return scorer.iterator();\n                }\n\n              };\n              super.setScorer(s);\n            }\n          };\n        }\n        @Override\n        public ScoreMode scoreMode() {\n          return topCollector.scoreMode();\n        }\n      };\n      searcher.search(query, assertingCollector);\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5003664d14ef48a0557ce1d8a684b15d62efe912","date":1539883534,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testComputeScoresOnlyOnce().mjava","sourceNew":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), Integer.MAX_VALUE);\n      final Collector assertingCollector = new Collector() {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          final LeafCollector in = topCollector.getLeafCollector(context);\n          return new FilterLeafCollector(in) {\n            @Override\n            public void setScorer(final Scorable scorer) throws IOException {\n              Scorable s = new FilterScorable(scorer) {\n\n                int lastComputedDoc = -1;\n\n                @Override\n                public float score() throws IOException {\n                  if (lastComputedDoc == docID()) {\n                    throw new AssertionError(\"Score computed twice on \" + docID());\n                  }\n                  lastComputedDoc = docID();\n                  return scorer.score();\n                }\n\n              };\n              super.setScorer(s);\n            }\n          };\n        }\n        @Override\n        public ScoreMode scoreMode() {\n          return topCollector.scoreMode();\n        }\n      };\n      searcher.search(query, assertingCollector);\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testComputeScoresOnlyOnce() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    StringField text = new StringField(\"text\", \"foo\", Store.NO);\n    doc.add(text);\n    NumericDocValuesField relevance = new NumericDocValuesField(\"relevance\", 1);\n    doc.add(relevance);\n    w.addDocument(doc);\n    text.setStringValue(\"bar\");\n    w.addDocument(doc);\n    text.setStringValue(\"baz\");\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    Query foo = new TermQuery(new Term(\"text\", \"foo\"));\n    Query bar = new TermQuery(new Term(\"text\", \"bar\"));\n    foo = new BoostQuery(foo, 2);\n    Query baz = new TermQuery(new Term(\"text\", \"baz\"));\n    baz = new BoostQuery(baz, 3);\n    Query query = new BooleanQuery.Builder()\n        .add(foo, Occur.SHOULD)\n        .add(bar, Occur.SHOULD)\n        .add(baz, Occur.SHOULD)\n        .build();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    for (Sort sort : new Sort[] {new Sort(SortField.FIELD_SCORE), new Sort(new SortField(\"f\", SortField.Type.SCORE))}) {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, TestUtil.nextInt(random(), 1, 2), Integer.MAX_VALUE);\n      final Collector assertingCollector = new Collector() {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          final LeafCollector in = topCollector.getLeafCollector(context);\n          return new FilterLeafCollector(in) {\n            @Override\n            public void setScorer(final Scorable scorer) throws IOException {\n              Scorable s = new FilterScorable(scorer) {\n\n                int lastComputedDoc = -1;\n\n                @Override\n                public float score() throws IOException {\n                  if (lastComputedDoc == docID()) {\n                    throw new AssertionError(\"Score computed twice on \" + docID());\n                  }\n                  lastComputedDoc = docID();\n                  return scorer.score();\n                }\n\n              };\n              super.setScorer(s);\n            }\n          };\n        }\n        @Override\n        public ScoreMode scoreMode() {\n          return topCollector.scoreMode();\n        }\n      };\n      searcher.search(query, assertingCollector);\n    }\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"404d1ab7f6f396235047017c88d545fec15dafb7":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"04c370507e5521b2eb998530736f1c19b851ed5a":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["0ef4d3aeb733ae886f562af3b735f50503926a12"],"5003664d14ef48a0557ce1d8a684b15d62efe912":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"523cc6563c99a55527ef7993efc5413c6648852d":["417142ff08fda9cf0b72d5133e63097a166c6458"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["04c370507e5521b2eb998530736f1c19b851ed5a"],"417142ff08fda9cf0b72d5133e63097a166c6458":["1aad05eeff7818b0833c02ac6b743aa72054963b","9fc47cb7b4346802411bb432f501ed0673d7119e"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["dc14da055888b63b4f8c922d0e1579f3cb315ad7","404d1ab7f6f396235047017c88d545fec15dafb7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["523cc6563c99a55527ef7993efc5413c6648852d","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"0ef4d3aeb733ae886f562af3b735f50503926a12":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["523cc6563c99a55527ef7993efc5413c6648852d"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5003664d14ef48a0557ce1d8a684b15d62efe912"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["1d3f7ab1a502671bbdb03bcced21e764d2483221"]},"commit2Childs":{"404d1ab7f6f396235047017c88d545fec15dafb7":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"04c370507e5521b2eb998530736f1c19b851ed5a":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"5003664d14ef48a0557ce1d8a684b15d62efe912":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"523cc6563c99a55527ef7993efc5413c6648852d":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"417142ff08fda9cf0b72d5133e63097a166c6458":["523cc6563c99a55527ef7993efc5413c6648852d"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["404d1ab7f6f396235047017c88d545fec15dafb7","1aad05eeff7818b0833c02ac6b743aa72054963b"],"0ef4d3aeb733ae886f562af3b735f50503926a12":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["5003664d14ef48a0557ce1d8a684b15d62efe912"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ef4d3aeb733ae886f562af3b735f50503926a12"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["04c370507e5521b2eb998530736f1c19b851ed5a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}