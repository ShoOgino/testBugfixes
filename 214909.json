{"path":"solr/core/src/test/org/apache/solr/util/TestSystemIdResolver#testResolving().mjava","commits":[{"id":"e6a2315ba749856e5787b2ad962fa124bc3ed121","date":1334194349,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSystemIdResolver#testResolving().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestSystemIdResolver#testResolving().mjava","sourceNew":"  public void testResolving() throws Exception {\n    final String testHome = SolrTestCaseJ4.getFile(\"solr/conf\").getParent();\n    final ResourceLoader loader = new SolrResourceLoader(testHome, this.getClass().getClassLoader());\n    final SystemIdResolver resolver = new SystemIdResolver(loader);\n    final String fileUri = new File(testHome+\"/crazy-path-to-config.xml\").toURI().toASCIIString();\n    \n    assertEquals(\"solrres:/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"test.xml\"));\n    assertEquals(\"solrres://@/usr/local/etc/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"/usr/local/etc/test.xml\"));\n    assertEquals(\"solrres://@/test.xml\", SystemIdResolver.createSystemIdFromResourceName(File.separatorChar+\"test.xml\"));\n    \n    // check relative URI resolving\n    assertEquals(\"solrres:/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"test.xml\").toASCIIString());\n    assertEquals(\"solrres://@/etc/test.xml\",\n      resolver.resolveRelativeURI(\"solrres://@/usr/local/etc/base.xml\", \"../../../etc/test.xml\").toASCIIString());\n    // special case: if relative URI starts with \"/\" convert to an absolute solrres://@/-URI\n    assertEquals(\"solrres://@/a/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"/a/test.xml\").toASCIIString());\n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, it should be preserved\n    assertEquals(fileUri, resolver.resolveRelativeURI(\"solrres:/base.xml\", fileUri).toASCIIString());\n    assertEquals(\"solrres:/base.xml\", resolver.resolveRelativeURI(fileUri, \"solrres:/base.xml\").toASCIIString());\n    \n    // do some real resolves to InputStreams with real existing files\n    assertEntityResolving(resolver, \"solrres:/schema.xml\", \"solrres:/solrconfig.xml\", \"schema.xml\");\n    assertEntityResolving(resolver, \"solrres:/org/apache/solr/util/TestSystemIdResolver.class\",\n      \"solrres:/org/apache/solr/util/RTimer.class\", \"TestSystemIdResolver.class\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/conf/schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/conf/solrconfig.xml\"), \"schema.xml\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-config.xml\"), \"crazy-path-to-schema.xml\");\n    \n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, the resolver should return null (default fallback)\n    assertNull(resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", fileUri));\n  }\n\n","sourceOld":"  public void testResolving() throws Exception {\n    final String testHome = SolrTestCaseJ4.getFile(\"solrj/solr/conf\").getParent();\n    final ResourceLoader loader = new SolrResourceLoader(testHome, this.getClass().getClassLoader());\n    final SystemIdResolver resolver = new SystemIdResolver(loader);\n    final String fileUri = new File(testHome+\"/crazy-path-to-config.xml\").toURI().toASCIIString();\n    \n    assertEquals(\"solrres:/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"test.xml\"));\n    assertEquals(\"solrres://@/usr/local/etc/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"/usr/local/etc/test.xml\"));\n    assertEquals(\"solrres://@/test.xml\", SystemIdResolver.createSystemIdFromResourceName(File.separatorChar+\"test.xml\"));\n    \n    // check relative URI resolving\n    assertEquals(\"solrres:/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"test.xml\").toASCIIString());\n    assertEquals(\"solrres://@/etc/test.xml\",\n      resolver.resolveRelativeURI(\"solrres://@/usr/local/etc/base.xml\", \"../../../etc/test.xml\").toASCIIString());\n    // special case: if relative URI starts with \"/\" convert to an absolute solrres://@/-URI\n    assertEquals(\"solrres://@/a/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"/a/test.xml\").toASCIIString());\n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, it should be preserved\n    assertEquals(fileUri, resolver.resolveRelativeURI(\"solrres:/base.xml\", fileUri).toASCIIString());\n    assertEquals(\"solrres:/base.xml\", resolver.resolveRelativeURI(fileUri, \"solrres:/base.xml\").toASCIIString());\n    \n    // do some real resolves to I nputStreams with real existing files\n    assertEntityResolving(resolver, \"solrres:/schema.xml\", \"solrres:/solrconfig.xml\", \"schema.xml\");\n    assertEntityResolving(resolver, \"solrres:/org/apache/solr/common/util/TestSystemIdResolver.class\",\n      \"solrres:/org/apache/solr/common/ResourceLoader.class\", \"util/TestSystemIdResolver.class\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/conf/schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/conf/solrconfig.xml\"), \"schema.xml\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-config.xml\"), \"crazy-path-to-schema.xml\");\n    \n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, the resolver should return null (default fallback)\n    assertNull(resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", fileUri));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21591922fb4db3e2a6ffb2cb342b3d61c053a973","date":1340761680,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSystemIdResolver#testResolving().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSystemIdResolver#testResolving().mjava","sourceNew":"  public void testResolving() throws Exception {\n    final String testHome = SolrTestCaseJ4.getFile(\"solr/collection1\").getParent();\n    final ResourceLoader loader = new SolrResourceLoader(testHome + \"/collection1\", this.getClass().getClassLoader());\n    final SystemIdResolver resolver = new SystemIdResolver(loader);\n    final String fileUri = new File(testHome+\"/crazy-path-to-config.xml\").toURI().toASCIIString();\n    \n    assertEquals(\"solrres:/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"test.xml\"));\n    assertEquals(\"solrres://@/usr/local/etc/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"/usr/local/etc/test.xml\"));\n    assertEquals(\"solrres://@/test.xml\", SystemIdResolver.createSystemIdFromResourceName(File.separatorChar+\"test.xml\"));\n    \n    // check relative URI resolving\n    assertEquals(\"solrres:/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"test.xml\").toASCIIString());\n    assertEquals(\"solrres://@/etc/test.xml\",\n      resolver.resolveRelativeURI(\"solrres://@/usr/local/etc/base.xml\", \"../../../etc/test.xml\").toASCIIString());\n    // special case: if relative URI starts with \"/\" convert to an absolute solrres://@/-URI\n    assertEquals(\"solrres://@/a/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"/a/test.xml\").toASCIIString());\n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, it should be preserved\n    assertEquals(fileUri, resolver.resolveRelativeURI(\"solrres:/base.xml\", fileUri).toASCIIString());\n    assertEquals(\"solrres:/base.xml\", resolver.resolveRelativeURI(fileUri, \"solrres:/base.xml\").toASCIIString());\n    \n    // do some real resolves to InputStreams with real existing files\n    assertEntityResolving(resolver, \"solrres:/schema.xml\", \"solrres:/solrconfig.xml\", \"schema.xml\");\n    assertEntityResolving(resolver, \"solrres:/org/apache/solr/util/TestSystemIdResolver.class\",\n      \"solrres:/org/apache/solr/util/RTimer.class\", \"TestSystemIdResolver.class\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/solrconfig.xml\"), \"schema.xml\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-config.xml\"), \"crazy-path-to-schema.xml\");\n    \n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, the resolver should return null (default fallback)\n    assertNull(resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", fileUri));\n  }\n\n","sourceOld":"  public void testResolving() throws Exception {\n    final String testHome = SolrTestCaseJ4.getFile(\"solr/conf\").getParent();\n    final ResourceLoader loader = new SolrResourceLoader(testHome, this.getClass().getClassLoader());\n    final SystemIdResolver resolver = new SystemIdResolver(loader);\n    final String fileUri = new File(testHome+\"/crazy-path-to-config.xml\").toURI().toASCIIString();\n    \n    assertEquals(\"solrres:/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"test.xml\"));\n    assertEquals(\"solrres://@/usr/local/etc/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"/usr/local/etc/test.xml\"));\n    assertEquals(\"solrres://@/test.xml\", SystemIdResolver.createSystemIdFromResourceName(File.separatorChar+\"test.xml\"));\n    \n    // check relative URI resolving\n    assertEquals(\"solrres:/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"test.xml\").toASCIIString());\n    assertEquals(\"solrres://@/etc/test.xml\",\n      resolver.resolveRelativeURI(\"solrres://@/usr/local/etc/base.xml\", \"../../../etc/test.xml\").toASCIIString());\n    // special case: if relative URI starts with \"/\" convert to an absolute solrres://@/-URI\n    assertEquals(\"solrres://@/a/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"/a/test.xml\").toASCIIString());\n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, it should be preserved\n    assertEquals(fileUri, resolver.resolveRelativeURI(\"solrres:/base.xml\", fileUri).toASCIIString());\n    assertEquals(\"solrres:/base.xml\", resolver.resolveRelativeURI(fileUri, \"solrres:/base.xml\").toASCIIString());\n    \n    // do some real resolves to InputStreams with real existing files\n    assertEntityResolving(resolver, \"solrres:/schema.xml\", \"solrres:/solrconfig.xml\", \"schema.xml\");\n    assertEntityResolving(resolver, \"solrres:/org/apache/solr/util/TestSystemIdResolver.class\",\n      \"solrres:/org/apache/solr/util/RTimer.class\", \"TestSystemIdResolver.class\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/conf/schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/conf/solrconfig.xml\"), \"schema.xml\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-config.xml\"), \"crazy-path-to-schema.xml\");\n    \n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, the resolver should return null (default fallback)\n    assertNull(resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", fileUri));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSystemIdResolver#testResolving().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSystemIdResolver#testResolving().mjava","sourceNew":"  public void testResolving() throws Exception {\n    final String testHome = SolrTestCaseJ4.getFile(\"solr/collection1\").getParent();\n    final ResourceLoader loader = new SolrResourceLoader(testHome + \"/collection1\", this.getClass().getClassLoader());\n    final SystemIdResolver resolver = new SystemIdResolver(loader);\n    final String fileUri = new File(testHome+\"/crazy-path-to-config.xml\").toURI().toASCIIString();\n    \n    assertEquals(\"solrres:/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"test.xml\"));\n    assertEquals(\"solrres://@/usr/local/etc/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"/usr/local/etc/test.xml\"));\n    assertEquals(\"solrres://@/test.xml\", SystemIdResolver.createSystemIdFromResourceName(File.separatorChar+\"test.xml\"));\n    \n    // check relative URI resolving\n    assertEquals(\"solrres:/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"test.xml\").toASCIIString());\n    assertEquals(\"solrres://@/etc/test.xml\",\n      resolver.resolveRelativeURI(\"solrres://@/usr/local/etc/base.xml\", \"../../../etc/test.xml\").toASCIIString());\n    // special case: if relative URI starts with \"/\" convert to an absolute solrres://@/-URI\n    assertEquals(\"solrres://@/a/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"/a/test.xml\").toASCIIString());\n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, it should be preserved\n    assertEquals(fileUri, resolver.resolveRelativeURI(\"solrres:/base.xml\", fileUri).toASCIIString());\n    assertEquals(\"solrres:/base.xml\", resolver.resolveRelativeURI(fileUri, \"solrres:/base.xml\").toASCIIString());\n    \n    // do some real resolves to InputStreams with real existing files\n    assertEntityResolving(resolver, \"solrres:/schema.xml\", \"solrres:/solrconfig.xml\", \"schema.xml\");\n    assertEntityResolving(resolver, \"solrres:/org/apache/solr/util/TestSystemIdResolver.class\",\n      \"solrres:/org/apache/solr/util/RTimer.class\", \"TestSystemIdResolver.class\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/solrconfig.xml\"), \"schema.xml\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-config.xml\"), \"crazy-path-to-schema.xml\");\n    \n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, the resolver should return null (default fallback)\n    assertNull(resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", fileUri));\n  }\n\n","sourceOld":"  public void testResolving() throws Exception {\n    final String testHome = SolrTestCaseJ4.getFile(\"solr/conf\").getParent();\n    final ResourceLoader loader = new SolrResourceLoader(testHome, this.getClass().getClassLoader());\n    final SystemIdResolver resolver = new SystemIdResolver(loader);\n    final String fileUri = new File(testHome+\"/crazy-path-to-config.xml\").toURI().toASCIIString();\n    \n    assertEquals(\"solrres:/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"test.xml\"));\n    assertEquals(\"solrres://@/usr/local/etc/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"/usr/local/etc/test.xml\"));\n    assertEquals(\"solrres://@/test.xml\", SystemIdResolver.createSystemIdFromResourceName(File.separatorChar+\"test.xml\"));\n    \n    // check relative URI resolving\n    assertEquals(\"solrres:/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"test.xml\").toASCIIString());\n    assertEquals(\"solrres://@/etc/test.xml\",\n      resolver.resolveRelativeURI(\"solrres://@/usr/local/etc/base.xml\", \"../../../etc/test.xml\").toASCIIString());\n    // special case: if relative URI starts with \"/\" convert to an absolute solrres://@/-URI\n    assertEquals(\"solrres://@/a/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"/a/test.xml\").toASCIIString());\n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, it should be preserved\n    assertEquals(fileUri, resolver.resolveRelativeURI(\"solrres:/base.xml\", fileUri).toASCIIString());\n    assertEquals(\"solrres:/base.xml\", resolver.resolveRelativeURI(fileUri, \"solrres:/base.xml\").toASCIIString());\n    \n    // do some real resolves to InputStreams with real existing files\n    assertEntityResolving(resolver, \"solrres:/schema.xml\", \"solrres:/solrconfig.xml\", \"schema.xml\");\n    assertEntityResolving(resolver, \"solrres:/org/apache/solr/util/TestSystemIdResolver.class\",\n      \"solrres:/org/apache/solr/util/RTimer.class\", \"TestSystemIdResolver.class\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/conf/schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/conf/solrconfig.xml\"), \"schema.xml\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-config.xml\"), \"crazy-path-to-schema.xml\");\n    \n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, the resolver should return null (default fallback)\n    assertNull(resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", fileUri));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSystemIdResolver#testResolving().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSystemIdResolver#testResolving().mjava","sourceNew":"  public void testResolving() throws Exception {\n    final Path testHome = SolrTestCaseJ4.getFile(\"solr/collection1\").getParentFile().toPath();\n    final ResourceLoader loader = new SolrResourceLoader(testHome.resolve(\"collection1\"), this.getClass().getClassLoader());\n    final SystemIdResolver resolver = new SystemIdResolver(loader);\n    final String fileUri = new File(testHome+\"/crazy-path-to-config.xml\").toURI().toASCIIString();\n    \n    assertEquals(\"solrres:/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"test.xml\"));\n    assertEquals(\"solrres://@/usr/local/etc/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"/usr/local/etc/test.xml\"));\n    assertEquals(\"solrres://@/test.xml\", SystemIdResolver.createSystemIdFromResourceName(File.separatorChar+\"test.xml\"));\n    \n    // check relative URI resolving\n    assertEquals(\"solrres:/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"test.xml\").toASCIIString());\n    assertEquals(\"solrres://@/etc/test.xml\",\n      resolver.resolveRelativeURI(\"solrres://@/usr/local/etc/base.xml\", \"../../../etc/test.xml\").toASCIIString());\n    // special case: if relative URI starts with \"/\" convert to an absolute solrres://@/-URI\n    assertEquals(\"solrres://@/a/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"/a/test.xml\").toASCIIString());\n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, it should be preserved\n    assertEquals(fileUri, resolver.resolveRelativeURI(\"solrres:/base.xml\", fileUri).toASCIIString());\n    assertEquals(\"solrres:/base.xml\", resolver.resolveRelativeURI(fileUri, \"solrres:/base.xml\").toASCIIString());\n    \n    // do some real resolves to InputStreams with real existing files\n    assertEntityResolving(resolver, \"solrres:/schema.xml\", \"solrres:/solrconfig.xml\", \"schema.xml\");\n    assertEntityResolving(resolver, \"solrres:/org/apache/solr/util/TestSystemIdResolver.class\",\n      \"solrres:/org/apache/solr/util/RTimer.class\", \"TestSystemIdResolver.class\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/solrconfig.xml\"), \"schema.xml\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-config.xml\"), \"crazy-path-to-schema.xml\");\n    \n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, the resolver should return null (default fallback)\n    assertNull(resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", fileUri));\n  }\n\n","sourceOld":"  public void testResolving() throws Exception {\n    final String testHome = SolrTestCaseJ4.getFile(\"solr/collection1\").getParent();\n    final ResourceLoader loader = new SolrResourceLoader(testHome + \"/collection1\", this.getClass().getClassLoader());\n    final SystemIdResolver resolver = new SystemIdResolver(loader);\n    final String fileUri = new File(testHome+\"/crazy-path-to-config.xml\").toURI().toASCIIString();\n    \n    assertEquals(\"solrres:/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"test.xml\"));\n    assertEquals(\"solrres://@/usr/local/etc/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"/usr/local/etc/test.xml\"));\n    assertEquals(\"solrres://@/test.xml\", SystemIdResolver.createSystemIdFromResourceName(File.separatorChar+\"test.xml\"));\n    \n    // check relative URI resolving\n    assertEquals(\"solrres:/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"test.xml\").toASCIIString());\n    assertEquals(\"solrres://@/etc/test.xml\",\n      resolver.resolveRelativeURI(\"solrres://@/usr/local/etc/base.xml\", \"../../../etc/test.xml\").toASCIIString());\n    // special case: if relative URI starts with \"/\" convert to an absolute solrres://@/-URI\n    assertEquals(\"solrres://@/a/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"/a/test.xml\").toASCIIString());\n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, it should be preserved\n    assertEquals(fileUri, resolver.resolveRelativeURI(\"solrres:/base.xml\", fileUri).toASCIIString());\n    assertEquals(\"solrres:/base.xml\", resolver.resolveRelativeURI(fileUri, \"solrres:/base.xml\").toASCIIString());\n    \n    // do some real resolves to InputStreams with real existing files\n    assertEntityResolving(resolver, \"solrres:/schema.xml\", \"solrres:/solrconfig.xml\", \"schema.xml\");\n    assertEntityResolving(resolver, \"solrres:/org/apache/solr/util/TestSystemIdResolver.class\",\n      \"solrres:/org/apache/solr/util/RTimer.class\", \"TestSystemIdResolver.class\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/solrconfig.xml\"), \"schema.xml\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-config.xml\"), \"crazy-path-to-schema.xml\");\n    \n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, the resolver should return null (default fallback)\n    assertNull(resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", fileUri));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e06677b4aab487aad861dc2ffa1077e535698e5","date":1525609294,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSystemIdResolver#testResolving().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSystemIdResolver#testResolving().mjava","sourceNew":"  public void testResolving() throws Exception {\n    final Path testHome = SolrTestCaseJ4.getFile(\"solr/collection1\").getParentFile().toPath();\n    final ResourceLoader loader = new SolrResourceLoader(testHome.resolve(\"collection1\"), this.getClass().getClassLoader());\n    final SystemIdResolver resolver = new SystemIdResolver(loader);\n    final String fileUri = new File(testHome+\"/crazy-path-to-config.xml\").toURI().toASCIIString();\n    \n    assertEquals(\"solrres:/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"test.xml\"));\n    assertEquals(\"solrres://@/usr/local/etc/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"/usr/local/etc/test.xml\"));\n    assertEquals(\"solrres://@/test.xml\", SystemIdResolver.createSystemIdFromResourceName(File.separatorChar+\"test.xml\"));\n    \n    // check relative URI resolving\n    assertEquals(\"solrres:/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"test.xml\").toASCIIString());\n    assertEquals(\"solrres://@/etc/test.xml\",\n      resolver.resolveRelativeURI(\"solrres://@/usr/local/etc/base.xml\", \"../../../etc/test.xml\").toASCIIString());\n    // special case: if relative URI starts with \"/\" convert to an absolute solrres://@/-URI\n    assertEquals(\"solrres://@/a/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"/a/test.xml\").toASCIIString());\n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, it should be preserved\n    assertEquals(fileUri, resolver.resolveRelativeURI(\"solrres:/base.xml\", fileUri).toASCIIString());\n    assertEquals(\"solrres:/base.xml\", resolver.resolveRelativeURI(fileUri, \"solrres:/base.xml\").toASCIIString());\n    \n    // do some real resolves to InputStreams with real existing files\n    assertEntityResolving(resolver, \"solrres:/schema.xml\", \"solrres:/solrconfig.xml\", \"schema.xml\");\n    assertEntityResolving(resolver, \"solrres:/org/apache/solr/util/TestSystemIdResolver.class\",\n      \"solrres:/org/apache/solr/util/RTimer.class\", \"TestSystemIdResolver.class\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/solrconfig.xml\"), \"schema.xml\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-config.xml\"), \"crazy-path-to-schema.xml\");\n    \n    // if somebody uses an absolute uri (e.g., file://) we should fail resolving:\n    IOException ioe = expectThrows(IOException.class, () -> {\n      resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", fileUri);\n    });\n    assertTrue(ioe.getMessage().startsWith(\"Cannot resolve absolute\"));\n    \n    ioe = expectThrows(IOException.class, () -> {\n      resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", \"http://lucene.apache.org/test.xml\");\n    });\n    assertTrue(ioe.getMessage().startsWith(\"Cannot resolve absolute\"));\n    \n    // check that we can't escape with absolute file paths:\n    ioe = expectThrows(IOException.class, () -> {\n      resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", \"/etc/passwd\");\n    });\n    assertTrue(ioe.getMessage().startsWith(\"Can't find resource '/etc/passwd' in classpath or\"));\n  }\n\n","sourceOld":"  public void testResolving() throws Exception {\n    final Path testHome = SolrTestCaseJ4.getFile(\"solr/collection1\").getParentFile().toPath();\n    final ResourceLoader loader = new SolrResourceLoader(testHome.resolve(\"collection1\"), this.getClass().getClassLoader());\n    final SystemIdResolver resolver = new SystemIdResolver(loader);\n    final String fileUri = new File(testHome+\"/crazy-path-to-config.xml\").toURI().toASCIIString();\n    \n    assertEquals(\"solrres:/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"test.xml\"));\n    assertEquals(\"solrres://@/usr/local/etc/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"/usr/local/etc/test.xml\"));\n    assertEquals(\"solrres://@/test.xml\", SystemIdResolver.createSystemIdFromResourceName(File.separatorChar+\"test.xml\"));\n    \n    // check relative URI resolving\n    assertEquals(\"solrres:/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"test.xml\").toASCIIString());\n    assertEquals(\"solrres://@/etc/test.xml\",\n      resolver.resolveRelativeURI(\"solrres://@/usr/local/etc/base.xml\", \"../../../etc/test.xml\").toASCIIString());\n    // special case: if relative URI starts with \"/\" convert to an absolute solrres://@/-URI\n    assertEquals(\"solrres://@/a/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"/a/test.xml\").toASCIIString());\n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, it should be preserved\n    assertEquals(fileUri, resolver.resolveRelativeURI(\"solrres:/base.xml\", fileUri).toASCIIString());\n    assertEquals(\"solrres:/base.xml\", resolver.resolveRelativeURI(fileUri, \"solrres:/base.xml\").toASCIIString());\n    \n    // do some real resolves to InputStreams with real existing files\n    assertEntityResolving(resolver, \"solrres:/schema.xml\", \"solrres:/solrconfig.xml\", \"schema.xml\");\n    assertEntityResolving(resolver, \"solrres:/org/apache/solr/util/TestSystemIdResolver.class\",\n      \"solrres:/org/apache/solr/util/RTimer.class\", \"TestSystemIdResolver.class\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/solrconfig.xml\"), \"schema.xml\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-config.xml\"), \"crazy-path-to-schema.xml\");\n    \n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, the resolver should return null (default fallback)\n    assertNull(resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", fileUri));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd99eb6fefdb646f15855602f34a46893574efb7","date":1525614787,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSystemIdResolver#testResolving().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSystemIdResolver#testResolving().mjava","sourceNew":"  public void testResolving() throws Exception {\n    final Path testHome = SolrTestCaseJ4.getFile(\"solr/collection1\").getParentFile().toPath();\n    final ResourceLoader loader = new SolrResourceLoader(testHome.resolve(\"collection1\"), this.getClass().getClassLoader());\n    final SystemIdResolver resolver = new SystemIdResolver(loader);\n    final String fileUri = new File(testHome+\"/crazy-path-to-config.xml\").toURI().toASCIIString();\n    \n    assertEquals(\"solrres:/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"test.xml\"));\n    assertEquals(\"solrres://@/usr/local/etc/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"/usr/local/etc/test.xml\"));\n    assertEquals(\"solrres://@/test.xml\", SystemIdResolver.createSystemIdFromResourceName(File.separatorChar+\"test.xml\"));\n    \n    // check relative URI resolving\n    assertEquals(\"solrres:/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"test.xml\").toASCIIString());\n    assertEquals(\"solrres://@/etc/test.xml\",\n      resolver.resolveRelativeURI(\"solrres://@/usr/local/etc/base.xml\", \"../../../etc/test.xml\").toASCIIString());\n    // special case: if relative URI starts with \"/\" convert to an absolute solrres://@/-URI\n    assertEquals(\"solrres://@/a/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"/a/test.xml\").toASCIIString());\n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, it should be preserved\n    assertEquals(fileUri, resolver.resolveRelativeURI(\"solrres:/base.xml\", fileUri).toASCIIString());\n    assertEquals(\"solrres:/base.xml\", resolver.resolveRelativeURI(fileUri, \"solrres:/base.xml\").toASCIIString());\n    \n    // do some real resolves to InputStreams with real existing files\n    assertEntityResolving(resolver, \"solrres:/schema.xml\", \"solrres:/solrconfig.xml\", \"schema.xml\");\n    assertEntityResolving(resolver, \"solrres:/org/apache/solr/util/TestSystemIdResolver.class\",\n      \"solrres:/org/apache/solr/util/RTimer.class\", \"TestSystemIdResolver.class\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/solrconfig.xml\"), \"schema.xml\");\n    \n    // if somebody uses an absolute uri (e.g., file://) we should fail resolving:\n    IOException ioe = expectThrows(IOException.class, () -> {\n      resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", fileUri);\n    });\n    assertTrue(ioe.getMessage().startsWith(\"Cannot resolve absolute\"));\n    \n    ioe = expectThrows(IOException.class, () -> {\n      resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", \"http://lucene.apache.org/test.xml\");\n    });\n    assertTrue(ioe.getMessage().startsWith(\"Cannot resolve absolute\"));\n    \n    // check that we can't escape with absolute file paths:\n    for (String path : Arrays.asList(\"/etc/passwd\", \"/windows/notepad.exe\")) {\n      ioe = expectThrows(IOException.class, () -> {\n        resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", path);\n      });\n      assertTrue(ioe.getMessage().startsWith(\"Can't find resource\")\n          || ioe.getMessage().contains(\"is outside resource loader dir\"));\n    }\n  }\n\n","sourceOld":"  public void testResolving() throws Exception {\n    final Path testHome = SolrTestCaseJ4.getFile(\"solr/collection1\").getParentFile().toPath();\n    final ResourceLoader loader = new SolrResourceLoader(testHome.resolve(\"collection1\"), this.getClass().getClassLoader());\n    final SystemIdResolver resolver = new SystemIdResolver(loader);\n    final String fileUri = new File(testHome+\"/crazy-path-to-config.xml\").toURI().toASCIIString();\n    \n    assertEquals(\"solrres:/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"test.xml\"));\n    assertEquals(\"solrres://@/usr/local/etc/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"/usr/local/etc/test.xml\"));\n    assertEquals(\"solrres://@/test.xml\", SystemIdResolver.createSystemIdFromResourceName(File.separatorChar+\"test.xml\"));\n    \n    // check relative URI resolving\n    assertEquals(\"solrres:/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"test.xml\").toASCIIString());\n    assertEquals(\"solrres://@/etc/test.xml\",\n      resolver.resolveRelativeURI(\"solrres://@/usr/local/etc/base.xml\", \"../../../etc/test.xml\").toASCIIString());\n    // special case: if relative URI starts with \"/\" convert to an absolute solrres://@/-URI\n    assertEquals(\"solrres://@/a/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"/a/test.xml\").toASCIIString());\n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, it should be preserved\n    assertEquals(fileUri, resolver.resolveRelativeURI(\"solrres:/base.xml\", fileUri).toASCIIString());\n    assertEquals(\"solrres:/base.xml\", resolver.resolveRelativeURI(fileUri, \"solrres:/base.xml\").toASCIIString());\n    \n    // do some real resolves to InputStreams with real existing files\n    assertEntityResolving(resolver, \"solrres:/schema.xml\", \"solrres:/solrconfig.xml\", \"schema.xml\");\n    assertEntityResolving(resolver, \"solrres:/org/apache/solr/util/TestSystemIdResolver.class\",\n      \"solrres:/org/apache/solr/util/RTimer.class\", \"TestSystemIdResolver.class\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/solrconfig.xml\"), \"schema.xml\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/crazy-path-to-config.xml\"), \"crazy-path-to-schema.xml\");\n    \n    // if somebody uses an absolute uri (e.g., file://) we should fail resolving:\n    IOException ioe = expectThrows(IOException.class, () -> {\n      resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", fileUri);\n    });\n    assertTrue(ioe.getMessage().startsWith(\"Cannot resolve absolute\"));\n    \n    ioe = expectThrows(IOException.class, () -> {\n      resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", \"http://lucene.apache.org/test.xml\");\n    });\n    assertTrue(ioe.getMessage().startsWith(\"Cannot resolve absolute\"));\n    \n    // check that we can't escape with absolute file paths:\n    ioe = expectThrows(IOException.class, () -> {\n      resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", \"/etc/passwd\");\n    });\n    assertTrue(ioe.getMessage().startsWith(\"Can't find resource '/etc/passwd' in classpath or\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5bcf88d0563d08e5b68c127842dd8e7d7e81338","date":1575519379,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSystemIdResolver#testResolving().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSystemIdResolver#testResolving().mjava","sourceNew":"  public void testResolving() throws Exception {\n    final Path testHome = SolrTestCaseJ4.getFile(\"solr/collection1\").getParentFile().toPath();\n    final ResourceLoader loader = new SolrResourceLoader(testHome.resolve(\"collection1\"), this.getClass().getClassLoader());\n    final SystemIdResolver resolver = new SystemIdResolver(loader);\n    final String fileUri = new File(testHome+\"/crazy-path-to-config.xml\").toURI().toASCIIString();\n    \n    assertEquals(\"solrres:/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"test.xml\"));\n    assertEquals(\"solrres://@/usr/local/etc/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"/usr/local/etc/test.xml\"));\n    assertEquals(\"solrres://@/test.xml\", SystemIdResolver.createSystemIdFromResourceName(File.separatorChar+\"test.xml\"));\n    \n    // check relative URI resolving\n    assertEquals(\"solrres:/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"test.xml\").toASCIIString());\n    assertEquals(\"solrres://@/etc/test.xml\",\n      resolver.resolveRelativeURI(\"solrres://@/usr/local/etc/base.xml\", \"../../../etc/test.xml\").toASCIIString());\n    // special case: if relative URI starts with \"/\" convert to an absolute solrres://@/-URI\n    assertEquals(\"solrres://@/a/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"/a/test.xml\").toASCIIString());\n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, it should be preserved\n    assertEquals(fileUri, resolver.resolveRelativeURI(\"solrres:/base.xml\", fileUri).toASCIIString());\n    assertEquals(\"solrres:/base.xml\", resolver.resolveRelativeURI(fileUri, \"solrres:/base.xml\").toASCIIString());\n    \n    // do some real resolves to InputStreams with real existing files\n    assertEntityResolving(resolver, \"solrres:/schema.xml\", \"solrres:/solrconfig.xml\", \"schema.xml\");\n    assertEntityResolving(resolver, \"solrres:/org/apache/solr/util/TestSystemIdResolver.class\",\n      \"solrres:/org/apache/solr/util/RTimer.class\", \"TestSystemIdResolver.class\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/solrconfig.xml\"), \"schema.xml\");\n    \n    // if somebody uses an absolute uri (e.g., file://) we should fail resolving:\n    IOException ioe = expectThrows(IOException.class, () -> {\n      resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", fileUri);\n    });\n    assertTrue(ioe.getMessage().startsWith(\"Cannot resolve absolute\"));\n    \n    ioe = expectThrows(IOException.class, () -> {\n      resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", \"http://lucene.apache.org/test.xml\");\n    });\n    assertTrue(ioe.getMessage().startsWith(\"Cannot resolve absolute\"));\n    \n    // check that we can't escape with absolute file paths:\n    for (String path : Arrays.asList(\"/etc/passwd\", \"/windows/notepad.exe\")) {\n      ioe = expectThrows(IOException.class, () -> {\n        resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", path);\n      });\n      assertTrue(ioe.getMessage().startsWith(\"Can't find resource\")\n          || ioe.getMessage().contains(\"access denied\")\n          || ioe.getMessage().contains(\"is outside resource loader dir\"));\n    }\n  }\n\n","sourceOld":"  public void testResolving() throws Exception {\n    final Path testHome = SolrTestCaseJ4.getFile(\"solr/collection1\").getParentFile().toPath();\n    final ResourceLoader loader = new SolrResourceLoader(testHome.resolve(\"collection1\"), this.getClass().getClassLoader());\n    final SystemIdResolver resolver = new SystemIdResolver(loader);\n    final String fileUri = new File(testHome+\"/crazy-path-to-config.xml\").toURI().toASCIIString();\n    \n    assertEquals(\"solrres:/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"test.xml\"));\n    assertEquals(\"solrres://@/usr/local/etc/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"/usr/local/etc/test.xml\"));\n    assertEquals(\"solrres://@/test.xml\", SystemIdResolver.createSystemIdFromResourceName(File.separatorChar+\"test.xml\"));\n    \n    // check relative URI resolving\n    assertEquals(\"solrres:/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"test.xml\").toASCIIString());\n    assertEquals(\"solrres://@/etc/test.xml\",\n      resolver.resolveRelativeURI(\"solrres://@/usr/local/etc/base.xml\", \"../../../etc/test.xml\").toASCIIString());\n    // special case: if relative URI starts with \"/\" convert to an absolute solrres://@/-URI\n    assertEquals(\"solrres://@/a/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"/a/test.xml\").toASCIIString());\n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, it should be preserved\n    assertEquals(fileUri, resolver.resolveRelativeURI(\"solrres:/base.xml\", fileUri).toASCIIString());\n    assertEquals(\"solrres:/base.xml\", resolver.resolveRelativeURI(fileUri, \"solrres:/base.xml\").toASCIIString());\n    \n    // do some real resolves to InputStreams with real existing files\n    assertEntityResolving(resolver, \"solrres:/schema.xml\", \"solrres:/solrconfig.xml\", \"schema.xml\");\n    assertEntityResolving(resolver, \"solrres:/org/apache/solr/util/TestSystemIdResolver.class\",\n      \"solrres:/org/apache/solr/util/RTimer.class\", \"TestSystemIdResolver.class\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/solrconfig.xml\"), \"schema.xml\");\n    \n    // if somebody uses an absolute uri (e.g., file://) we should fail resolving:\n    IOException ioe = expectThrows(IOException.class, () -> {\n      resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", fileUri);\n    });\n    assertTrue(ioe.getMessage().startsWith(\"Cannot resolve absolute\"));\n    \n    ioe = expectThrows(IOException.class, () -> {\n      resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", \"http://lucene.apache.org/test.xml\");\n    });\n    assertTrue(ioe.getMessage().startsWith(\"Cannot resolve absolute\"));\n    \n    // check that we can't escape with absolute file paths:\n    for (String path : Arrays.asList(\"/etc/passwd\", \"/windows/notepad.exe\")) {\n      ioe = expectThrows(IOException.class, () -> {\n        resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", path);\n      });\n      assertTrue(ioe.getMessage().startsWith(\"Can't find resource\")\n          || ioe.getMessage().contains(\"is outside resource loader dir\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a90f561fc609ec007ba18b10dea9191dbbd71831","date":1575541054,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSystemIdResolver#testResolving().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSystemIdResolver#testResolving().mjava","sourceNew":"  public void testResolving() throws Exception {\n    final Path testHome = SolrTestCaseJ4.getFile(\"solr/collection1\").getParentFile().toPath();\n    final ResourceLoader loader = new SolrResourceLoader(testHome.resolve(\"collection1\"), this.getClass().getClassLoader());\n    final SystemIdResolver resolver = new SystemIdResolver(loader);\n    final String fileUri = new File(testHome+\"/crazy-path-to-config.xml\").toURI().toASCIIString();\n    \n    assertEquals(\"solrres:/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"test.xml\"));\n    assertEquals(\"solrres://@/usr/local/etc/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"/usr/local/etc/test.xml\"));\n    assertEquals(\"solrres://@/test.xml\", SystemIdResolver.createSystemIdFromResourceName(File.separatorChar+\"test.xml\"));\n    \n    // check relative URI resolving\n    assertEquals(\"solrres:/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"test.xml\").toASCIIString());\n    assertEquals(\"solrres://@/etc/test.xml\",\n      resolver.resolveRelativeURI(\"solrres://@/usr/local/etc/base.xml\", \"../../../etc/test.xml\").toASCIIString());\n    // special case: if relative URI starts with \"/\" convert to an absolute solrres://@/-URI\n    assertEquals(\"solrres://@/a/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"/a/test.xml\").toASCIIString());\n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, it should be preserved\n    assertEquals(fileUri, resolver.resolveRelativeURI(\"solrres:/base.xml\", fileUri).toASCIIString());\n    assertEquals(\"solrres:/base.xml\", resolver.resolveRelativeURI(fileUri, \"solrres:/base.xml\").toASCIIString());\n    \n    // do some real resolves to InputStreams with real existing files\n    assertEntityResolving(resolver, \"solrres:/schema.xml\", \"solrres:/solrconfig.xml\", \"schema.xml\");\n    assertEntityResolving(resolver, \"solrres:/org/apache/solr/util/TestSystemIdResolver.class\",\n      \"solrres:/org/apache/solr/util/RTimer.class\", \"TestSystemIdResolver.class\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/solrconfig.xml\"), \"schema.xml\");\n    \n    // if somebody uses an absolute uri (e.g., file://) we should fail resolving:\n    IOException ioe = expectThrows(IOException.class, () -> {\n      resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", fileUri);\n    });\n    assertTrue(ioe.getMessage().startsWith(\"Cannot resolve absolute\"));\n    \n    ioe = expectThrows(IOException.class, () -> {\n      resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", \"http://lucene.apache.org/test.xml\");\n    });\n    assertTrue(ioe.getMessage().startsWith(\"Cannot resolve absolute\"));\n    \n    // check that we can't escape with absolute file paths:\n    for (String path : Arrays.asList(\"/etc/passwd\", \"/windows/notepad.exe\")) {\n      ioe = expectThrows(IOException.class, () -> {\n        resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", path);\n      });\n      assertTrue(ioe.getMessage().startsWith(\"Can't find resource\")\n          || ioe.getMessage().contains(\"access denied\")\n          || ioe.getMessage().contains(\"is outside resource loader dir\"));\n    }\n  }\n\n","sourceOld":"  public void testResolving() throws Exception {\n    final Path testHome = SolrTestCaseJ4.getFile(\"solr/collection1\").getParentFile().toPath();\n    final ResourceLoader loader = new SolrResourceLoader(testHome.resolve(\"collection1\"), this.getClass().getClassLoader());\n    final SystemIdResolver resolver = new SystemIdResolver(loader);\n    final String fileUri = new File(testHome+\"/crazy-path-to-config.xml\").toURI().toASCIIString();\n    \n    assertEquals(\"solrres:/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"test.xml\"));\n    assertEquals(\"solrres://@/usr/local/etc/test.xml\", SystemIdResolver.createSystemIdFromResourceName(\"/usr/local/etc/test.xml\"));\n    assertEquals(\"solrres://@/test.xml\", SystemIdResolver.createSystemIdFromResourceName(File.separatorChar+\"test.xml\"));\n    \n    // check relative URI resolving\n    assertEquals(\"solrres:/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"test.xml\").toASCIIString());\n    assertEquals(\"solrres://@/etc/test.xml\",\n      resolver.resolveRelativeURI(\"solrres://@/usr/local/etc/base.xml\", \"../../../etc/test.xml\").toASCIIString());\n    // special case: if relative URI starts with \"/\" convert to an absolute solrres://@/-URI\n    assertEquals(\"solrres://@/a/test.xml\", resolver.resolveRelativeURI(\"solrres:/base.xml\", \"/a/test.xml\").toASCIIString());\n    // test, that resolving works if somebody uses an absolute file:-URI in a href attribute, it should be preserved\n    assertEquals(fileUri, resolver.resolveRelativeURI(\"solrres:/base.xml\", fileUri).toASCIIString());\n    assertEquals(\"solrres:/base.xml\", resolver.resolveRelativeURI(fileUri, \"solrres:/base.xml\").toASCIIString());\n    \n    // do some real resolves to InputStreams with real existing files\n    assertEntityResolving(resolver, \"solrres:/schema.xml\", \"solrres:/solrconfig.xml\", \"schema.xml\");\n    assertEntityResolving(resolver, \"solrres:/org/apache/solr/util/TestSystemIdResolver.class\",\n      \"solrres:/org/apache/solr/util/RTimer.class\", \"TestSystemIdResolver.class\");\n    assertEntityResolving(resolver, SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/schema.xml\"),\n      SystemIdResolver.createSystemIdFromResourceName(testHome+\"/collection1/conf/solrconfig.xml\"), \"schema.xml\");\n    \n    // if somebody uses an absolute uri (e.g., file://) we should fail resolving:\n    IOException ioe = expectThrows(IOException.class, () -> {\n      resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", fileUri);\n    });\n    assertTrue(ioe.getMessage().startsWith(\"Cannot resolve absolute\"));\n    \n    ioe = expectThrows(IOException.class, () -> {\n      resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", \"http://lucene.apache.org/test.xml\");\n    });\n    assertTrue(ioe.getMessage().startsWith(\"Cannot resolve absolute\"));\n    \n    // check that we can't escape with absolute file paths:\n    for (String path : Arrays.asList(\"/etc/passwd\", \"/windows/notepad.exe\")) {\n      ioe = expectThrows(IOException.class, () -> {\n        resolver.resolveEntity(null, null, \"solrres:/solrconfig.xml\", path);\n      });\n      assertTrue(ioe.getMessage().startsWith(\"Can't find resource\")\n          || ioe.getMessage().contains(\"is outside resource loader dir\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"e6a2315ba749856e5787b2ad962fa124bc3ed121":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["21591922fb4db3e2a6ffb2cb342b3d61c053a973"],"a90f561fc609ec007ba18b10dea9191dbbd71831":["cd99eb6fefdb646f15855602f34a46893574efb7","e5bcf88d0563d08e5b68c127842dd8e7d7e81338"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e6a2315ba749856e5787b2ad962fa124bc3ed121","21591922fb4db3e2a6ffb2cb342b3d61c053a973"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd99eb6fefdb646f15855602f34a46893574efb7":["4e06677b4aab487aad861dc2ffa1077e535698e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e5bcf88d0563d08e5b68c127842dd8e7d7e81338"],"e5bcf88d0563d08e5b68c127842dd8e7d7e81338":["cd99eb6fefdb646f15855602f34a46893574efb7"],"4e06677b4aab487aad861dc2ffa1077e535698e5":["a626ec4d1c92e59fe390724d6220081047b03ce7"]},"commit2Childs":{"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["a626ec4d1c92e59fe390724d6220081047b03ce7","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"e6a2315ba749856e5787b2ad962fa124bc3ed121":["21591922fb4db3e2a6ffb2cb342b3d61c053a973","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["4e06677b4aab487aad861dc2ffa1077e535698e5"],"a90f561fc609ec007ba18b10dea9191dbbd71831":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"cd99eb6fefdb646f15855602f34a46893574efb7":["a90f561fc609ec007ba18b10dea9191dbbd71831","e5bcf88d0563d08e5b68c127842dd8e7d7e81338"],"e5bcf88d0563d08e5b68c127842dd8e7d7e81338":["a90f561fc609ec007ba18b10dea9191dbbd71831","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e06677b4aab487aad861dc2ffa1077e535698e5":["cd99eb6fefdb646f15855602f34a46893574efb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a90f561fc609ec007ba18b10dea9191dbbd71831","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}