{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","pathOld":"/dev/null","sourceNew":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testManyFields().mjava","sourceNew":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testManyFields() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"a\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"b\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"c\"+j, \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"d\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"e\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"f\"+j, \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(100, reader.maxDoc());\n      assertEquals(100, reader.numDocs());\n      for(int j=0;j<100;j++) {\n        assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n        assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n        assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n      }\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}