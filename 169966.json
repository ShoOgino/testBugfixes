{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#testSynOverHole2().mjava","commits":[{"id":"6ce825e9276493231308229152c48f755ce1a0a5","date":1348871483,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#testSynOverHole2().mjava","pathOld":"/dev/null","sourceNew":"  public void testSynOverHole2() throws Exception {\n\n    final TokenStream ts = new CannedTokenStream(\n      new Token[] {\n        token(\"xyz\", 1, 1),\n        token(\"abc\", 0, 3),\n        token(\"def\", 2, 1),\n      });\n    final Automaton actual = (new TokenStreamToAutomaton()).toAutomaton(ts);\n    final Automaton expected = BasicOperations.union(\n                                                     join(s2a(\"xyz\"), SEP_A, HOLE_A, SEP_A, s2a(\"def\")),\n                                                     BasicAutomata.makeString(\"abc\"));\n    assertTrue(BasicOperations.sameLanguage(expected, actual));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ac8571c2d82c574e446c3729251b994c69a55c","date":1402523781,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#testSynOverHole2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#testSynOverHole2().mjava","sourceNew":"  public void testSynOverHole2() throws Exception {\n\n    final TokenStream ts = new CannedTokenStream(\n      new Token[] {\n        token(\"xyz\", 1, 1),\n        token(\"abc\", 0, 3),\n        token(\"def\", 2, 1),\n      });\n    final LightAutomaton actual = (new TokenStreamToAutomaton()).toAutomaton(ts);\n    final LightAutomaton expected = BasicOperations.unionLight(\n                                                     join(s2a(\"xyz\"), SEP_A, HOLE_A, SEP_A, s2a(\"def\")),\n                                                     s2a(\"abc\"));\n    assertTrue(BasicOperations.sameLanguage(BasicOperations.determinize(expected),\n                                            BasicOperations.determinize(actual)));\n  }\n\n","sourceOld":"  public void testSynOverHole2() throws Exception {\n\n    final TokenStream ts = new CannedTokenStream(\n      new Token[] {\n        token(\"xyz\", 1, 1),\n        token(\"abc\", 0, 3),\n        token(\"def\", 2, 1),\n      });\n    final Automaton actual = (new TokenStreamToAutomaton()).toAutomaton(ts);\n    final Automaton expected = BasicOperations.union(\n                                                     join(s2a(\"xyz\"), SEP_A, HOLE_A, SEP_A, s2a(\"def\")),\n                                                     BasicAutomata.makeString(\"abc\"));\n    assertTrue(BasicOperations.sameLanguage(expected, actual));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#testSynOverHole2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#testSynOverHole2().mjava","sourceNew":"  public void testSynOverHole2() throws Exception {\n\n    final TokenStream ts = new CannedTokenStream(\n      new Token[] {\n        token(\"xyz\", 1, 1),\n        token(\"abc\", 0, 3),\n        token(\"def\", 2, 1),\n      });\n    final LightAutomaton actual = (new TokenStreamToAutomaton()).toAutomaton(ts);\n    final LightAutomaton expected = BasicOperations.unionLight(\n                                                     join(s2a(\"xyz\"), SEP_A, HOLE_A, SEP_A, s2a(\"def\")),\n                                                     s2a(\"abc\"));\n    assertTrue(BasicOperations.sameLanguage(BasicOperations.determinize(BasicOperations.removeDeadStates(expected)),\n                                            BasicOperations.determinize(BasicOperations.removeDeadStates(actual))));\n  }\n\n","sourceOld":"  public void testSynOverHole2() throws Exception {\n\n    final TokenStream ts = new CannedTokenStream(\n      new Token[] {\n        token(\"xyz\", 1, 1),\n        token(\"abc\", 0, 3),\n        token(\"def\", 2, 1),\n      });\n    final LightAutomaton actual = (new TokenStreamToAutomaton()).toAutomaton(ts);\n    final LightAutomaton expected = BasicOperations.unionLight(\n                                                     join(s2a(\"xyz\"), SEP_A, HOLE_A, SEP_A, s2a(\"def\")),\n                                                     s2a(\"abc\"));\n    assertTrue(BasicOperations.sameLanguage(BasicOperations.determinize(expected),\n                                            BasicOperations.determinize(actual)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#testSynOverHole2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#testSynOverHole2().mjava","sourceNew":"  public void testSynOverHole2() throws Exception {\n\n    final TokenStream ts = new CannedTokenStream(\n      new Token[] {\n        token(\"xyz\", 1, 1),\n        token(\"abc\", 0, 3),\n        token(\"def\", 2, 1),\n      });\n    final Automaton actual = (new TokenStreamToAutomaton()).toAutomaton(ts);\n    final Automaton expected = Operations.union(\n                                                     join(s2a(\"xyz\"), SEP_A, HOLE_A, SEP_A, s2a(\"def\")),\n                                                     s2a(\"abc\"));\n    assertTrue(Operations.sameLanguage(Operations.determinize(Operations.removeDeadStates(expected)),\n                                       Operations.determinize(Operations.removeDeadStates(actual))));\n  }\n\n","sourceOld":"  public void testSynOverHole2() throws Exception {\n\n    final TokenStream ts = new CannedTokenStream(\n      new Token[] {\n        token(\"xyz\", 1, 1),\n        token(\"abc\", 0, 3),\n        token(\"def\", 2, 1),\n      });\n    final LightAutomaton actual = (new TokenStreamToAutomaton()).toAutomaton(ts);\n    final LightAutomaton expected = BasicOperations.unionLight(\n                                                     join(s2a(\"xyz\"), SEP_A, HOLE_A, SEP_A, s2a(\"def\")),\n                                                     s2a(\"abc\"));\n    assertTrue(BasicOperations.sameLanguage(BasicOperations.determinize(BasicOperations.removeDeadStates(expected)),\n                                            BasicOperations.determinize(BasicOperations.removeDeadStates(actual))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#testSynOverHole2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#testSynOverHole2().mjava","sourceNew":"  public void testSynOverHole2() throws Exception {\n\n    final TokenStream ts = new CannedTokenStream(\n      new Token[] {\n        token(\"xyz\", 1, 1),\n        token(\"abc\", 0, 3),\n        token(\"def\", 2, 1),\n      });\n    final Automaton actual = (new TokenStreamToAutomaton()).toAutomaton(ts);\n    final Automaton expected = Operations.union(\n                                                     join(s2a(\"xyz\"), SEP_A, HOLE_A, SEP_A, s2a(\"def\")),\n                                                     s2a(\"abc\"));\n    assertTrue(Operations.sameLanguage(Operations.determinize(Operations.removeDeadStates(expected)),\n                                       Operations.determinize(Operations.removeDeadStates(actual))));\n  }\n\n","sourceOld":"  public void testSynOverHole2() throws Exception {\n\n    final TokenStream ts = new CannedTokenStream(\n      new Token[] {\n        token(\"xyz\", 1, 1),\n        token(\"abc\", 0, 3),\n        token(\"def\", 2, 1),\n      });\n    final Automaton actual = (new TokenStreamToAutomaton()).toAutomaton(ts);\n    final Automaton expected = BasicOperations.union(\n                                                     join(s2a(\"xyz\"), SEP_A, HOLE_A, SEP_A, s2a(\"def\")),\n                                                     BasicAutomata.makeString(\"abc\"));\n    assertTrue(BasicOperations.sameLanguage(expected, actual));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#testSynOverHole2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#testSynOverHole2().mjava","sourceNew":"  public void testSynOverHole2() throws Exception {\n\n    final TokenStream ts = new CannedTokenStream(\n      new Token[] {\n        token(\"xyz\", 1, 1),\n        token(\"abc\", 0, 3),\n        token(\"def\", 2, 1),\n      });\n    final Automaton expected = Operations.union(\n      join(s2a(\"xyz\"), SEP_A, HOLE_A, SEP_A, s2a(\"def\")), s2a(\"abc\"));\n    assertSameLanguage(expected, ts);\n  }\n\n","sourceOld":"  public void testSynOverHole2() throws Exception {\n\n    final TokenStream ts = new CannedTokenStream(\n      new Token[] {\n        token(\"xyz\", 1, 1),\n        token(\"abc\", 0, 3),\n        token(\"def\", 2, 1),\n      });\n    final Automaton actual = (new TokenStreamToAutomaton()).toAutomaton(ts);\n    final Automaton expected = Operations.union(\n                                                     join(s2a(\"xyz\"), SEP_A, HOLE_A, SEP_A, s2a(\"def\")),\n                                                     s2a(\"abc\"));\n    assertTrue(Operations.sameLanguage(Operations.determinize(Operations.removeDeadStates(expected)),\n                                       Operations.determinize(Operations.removeDeadStates(actual))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/analysis/TestGraphTokenizers#testSynOverHole2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#testSynOverHole2().mjava","sourceNew":"  public void testSynOverHole2() throws Exception {\n\n    final TokenStream ts = new CannedTokenStream(\n      new Token[] {\n        token(\"xyz\", 1, 1),\n        token(\"abc\", 0, 3),\n        token(\"def\", 2, 1),\n      });\n    final Automaton expected = Operations.union(\n      join(s2a(\"xyz\"), SEP_A, HOLE_A, SEP_A, s2a(\"def\")), s2a(\"abc\"));\n    assertSameLanguage(expected, ts);\n  }\n\n","sourceOld":"  public void testSynOverHole2() throws Exception {\n\n    final TokenStream ts = new CannedTokenStream(\n      new Token[] {\n        token(\"xyz\", 1, 1),\n        token(\"abc\", 0, 3),\n        token(\"def\", 2, 1),\n      });\n    final Automaton expected = Operations.union(\n      join(s2a(\"xyz\"), SEP_A, HOLE_A, SEP_A, s2a(\"def\")), s2a(\"abc\"));\n    assertSameLanguage(expected, ts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"085e5eccb1e06e3bfb487813880adc54c888dd02","date":1483875517,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#testSynOverHole2().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/analysis/TestGraphTokenizers#testSynOverHole2().mjava","sourceNew":"  public void testSynOverHole2() throws Exception {\n\n    final TokenStream ts = new CannedTokenStream(\n      new Token[] {\n        token(\"xyz\", 1, 1),\n        token(\"abc\", 0, 3),\n        token(\"def\", 2, 1),\n      });\n    final Automaton expected = Operations.union(\n      join(s2a(\"xyz\"), SEP_A, HOLE_A, SEP_A, s2a(\"def\")), s2a(\"abc\"));\n    assertSameLanguage(expected, ts);\n  }\n\n","sourceOld":"  public void testSynOverHole2() throws Exception {\n\n    final TokenStream ts = new CannedTokenStream(\n      new Token[] {\n        token(\"xyz\", 1, 1),\n        token(\"abc\", 0, 3),\n        token(\"def\", 2, 1),\n      });\n    final Automaton expected = Operations.union(\n      join(s2a(\"xyz\"), SEP_A, HOLE_A, SEP_A, s2a(\"def\")), s2a(\"abc\"));\n    assertSameLanguage(expected, ts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestGraphTokenizers#testSynOverHole2().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/analysis/TestGraphTokenizers#testSynOverHole2().mjava","sourceNew":"  public void testSynOverHole2() throws Exception {\n\n    final TokenStream ts = new CannedTokenStream(\n      new Token[] {\n        token(\"xyz\", 1, 1),\n        token(\"abc\", 0, 3),\n        token(\"def\", 2, 1),\n      });\n    final Automaton expected = Operations.union(\n      join(s2a(\"xyz\"), SEP_A, HOLE_A, SEP_A, s2a(\"def\")), s2a(\"abc\"));\n    assertSameLanguage(expected, ts);\n  }\n\n","sourceOld":"  public void testSynOverHole2() throws Exception {\n\n    final TokenStream ts = new CannedTokenStream(\n      new Token[] {\n        token(\"xyz\", 1, 1),\n        token(\"abc\", 0, 3),\n        token(\"def\", 2, 1),\n      });\n    final Automaton expected = Operations.union(\n      join(s2a(\"xyz\"), SEP_A, HOLE_A, SEP_A, s2a(\"def\")), s2a(\"abc\"));\n    assertSameLanguage(expected, ts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75ac8571c2d82c574e446c3729251b994c69a55c":["6ce825e9276493231308229152c48f755ce1a0a5"],"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["75ac8571c2d82c574e446c3729251b994c69a55c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"6ce825e9276493231308229152c48f755ce1a0a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","085e5eccb1e06e3bfb487813880adc54c888dd02"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["6ce825e9276493231308229152c48f755ce1a0a5","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"085e5eccb1e06e3bfb487813880adc54c888dd02":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["085e5eccb1e06e3bfb487813880adc54c888dd02"]},"commit2Childs":{"75ac8571c2d82c574e446c3729251b994c69a55c":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ce825e9276493231308229152c48f755ce1a0a5"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"6ce825e9276493231308229152c48f755ce1a0a5":["75ac8571c2d82c574e446c3729251b994c69a55c","5c84485629d80d203608e8975a1139de9933cc38"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","085e5eccb1e06e3bfb487813880adc54c888dd02"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"085e5eccb1e06e3bfb487813880adc54c888dd02":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}