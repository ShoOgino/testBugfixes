{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTupleStream().mjava","commits":[{"id":"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7","date":1493327009,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTupleStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTupleStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"hello\", \"test_t\", \"l b c d c e\");\n    updateRequest.add(id, \"hello1\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id,test_t\\\", sort=\\\"id desc\\\")\";\n\n    //Add a Stream and an Evaluator to the Tuple.\n    String cat = \"tuple(results=\"+expr+\", sum=add(1,1))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cat);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Map> results  = (List<Map>)tuples.get(0).get(\"results\");\n    assertTrue(results.get(0).get(\"id\").equals(\"hello1\"));\n    assertTrue(results.get(0).get(\"test_t\").equals(\"l b c d c\"));\n    assertTrue(results.get(1).get(\"id\").equals(\"hello\"));\n    assertTrue(results.get(1).get(\"test_t\").equals(\"l b c d c e\"));\n\n    assertTrue(tuples.get(0).getLong(\"sum\").equals(2L));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTupleStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTupleStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"hello\", \"test_t\", \"l b c d c e\");\n    updateRequest.add(id, \"hello1\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id,test_t\\\", sort=\\\"id desc\\\")\";\n\n    //Add a Stream and an Evaluator to the Tuple.\n    String cat = \"tuple(results=\"+expr+\", sum=add(1,1))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cat);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Map> results  = (List<Map>)tuples.get(0).get(\"results\");\n    assertTrue(results.get(0).get(\"id\").equals(\"hello1\"));\n    assertTrue(results.get(0).get(\"test_t\").equals(\"l b c d c\"));\n    assertTrue(results.get(1).get(\"id\").equals(\"hello\"));\n    assertTrue(results.get(1).get(\"test_t\").equals(\"l b c d c e\"));\n\n    assertTrue(tuples.get(0).getLong(\"sum\").equals(2L));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18391e7d733bf8152ea2d4fae43fe3bd85a973d5","date":1580489654,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTupleStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTupleStream().mjava","sourceNew":"  @Test\n  public void testTupleStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"hello\", \"test_t\", \"l b c d c e\");\n    updateRequest.add(id, \"hello1\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"`c d c`\\\", fl=\\\"id,test_t\\\", sort=\\\"id desc\\\")\";\n\n    //Add a Stream and an Evaluator to the Tuple.\n    String cat = \"tuple(results=\"+expr+\", sum=add(1,1))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cat);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Map> results  = (List<Map>)tuples.get(0).get(\"results\");\n    assertTrue(results.get(0).get(\"id\").equals(\"hello1\"));\n    assertTrue(results.get(0).get(\"test_t\").equals(\"l b c d c\"));\n    assertTrue(results.get(1).get(\"id\").equals(\"hello\"));\n    assertTrue(results.get(1).get(\"test_t\").equals(\"l b c d c e\"));\n\n    assertTrue(tuples.get(0).getLong(\"sum\").equals(2L));\n\n  }\n\n","sourceOld":"  @Test\n  public void testTupleStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"hello\", \"test_t\", \"l b c d c e\");\n    updateRequest.add(id, \"hello1\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id,test_t\\\", sort=\\\"id desc\\\")\";\n\n    //Add a Stream and an Evaluator to the Tuple.\n    String cat = \"tuple(results=\"+expr+\", sum=add(1,1))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cat);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Map> results  = (List<Map>)tuples.get(0).get(\"results\");\n    assertTrue(results.get(0).get(\"id\").equals(\"hello1\"));\n    assertTrue(results.get(0).get(\"test_t\").equals(\"l b c d c\"));\n    assertTrue(results.get(1).get(\"id\").equals(\"hello\"));\n    assertTrue(results.get(1).get(\"test_t\").equals(\"l b c d c e\"));\n\n    assertTrue(tuples.get(0).getLong(\"sum\").equals(2L));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTupleStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTupleStream().mjava","sourceNew":"  @Test\n  public void testTupleStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"hello\", \"test_t\", \"l b c d c e\");\n    updateRequest.add(id, \"hello1\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"`c d c`\\\", fl=\\\"id,test_t\\\", sort=\\\"id desc\\\")\";\n\n    //Add a Stream and an Evaluator to the Tuple.\n    String cat = \"tuple(results=\"+expr+\", sum=add(1,1))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cat);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<Map> results  = (List<Map>)tuples.get(0).get(\"results\");\n    assertTrue(results.get(0).get(\"id\").equals(\"hello1\"));\n    assertTrue(results.get(0).get(\"test_t\").equals(\"l b c d c\"));\n    assertTrue(results.get(1).get(\"id\").equals(\"hello\"));\n    assertTrue(results.get(1).get(\"test_t\").equals(\"l b c d c e\"));\n\n    assertTrue(tuples.get(0).getLong(\"sum\").equals(2L));\n\n  }\n\n","sourceOld":"  @Test\n  public void testTupleStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"hello\", \"test_t\", \"l b c d c e\");\n    updateRequest.add(id, \"hello1\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"`c d c`\\\", fl=\\\"id,test_t\\\", sort=\\\"id desc\\\")\";\n\n    //Add a Stream and an Evaluator to the Tuple.\n    String cat = \"tuple(results=\"+expr+\", sum=add(1,1))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cat);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Map> results  = (List<Map>)tuples.get(0).get(\"results\");\n    assertTrue(results.get(0).get(\"id\").equals(\"hello1\"));\n    assertTrue(results.get(0).get(\"test_t\").equals(\"l b c d c\"));\n    assertTrue(results.get(1).get(\"id\").equals(\"hello\"));\n    assertTrue(results.get(1).get(\"test_t\").equals(\"l b c d c e\"));\n\n    assertTrue(tuples.get(0).getLong(\"sum\").equals(2L));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["18391e7d733bf8152ea2d4fae43fe3bd85a973d5"],"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"18391e7d733bf8152ea2d4fae43fe3bd85a973d5":["ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7":["e9017cf144952056066919f1ebc7897ff9bd71b1","18391e7d733bf8152ea2d4fae43fe3bd85a973d5"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7","e9017cf144952056066919f1ebc7897ff9bd71b1"],"18391e7d733bf8152ea2d4fae43fe3bd85a973d5":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}