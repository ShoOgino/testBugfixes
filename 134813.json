{"path":"src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(char[],int,UTF8Result).mjava","commits":[{"id":"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4","date":1206538765,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(char[],int,UTF8Result).mjava","pathOld":"/dev/null","sourceNew":"  /** Encode characters from a char[] source, starting at\n   *  offset and stopping when the character 0xffff is seen.\n   *  Returns the number of bytes written to bytesOut. */\n  public static void UTF16toUTF8(final char[] source, final int offset, UTF8Result result) {\n\n    int upto = 0;\n    int i = offset;\n    byte[] out = result.result;\n\n    while(true) {\n      \n      final int code = (int) source[i++];\n\n      if (upto+4 > out.length) {\n        byte[] newOut = new byte[2*out.length];\n        assert newOut.length >= upto+4;\n        System.arraycopy(out, 0, newOut, 0, upto);\n        result.result = out = newOut;\n      }\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        if (code == 0xffff)\n          // END\n          break;\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && source[i] != 0xffff) {\n          int utf32 = (int) source[i];\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(source, offset, i-offset-1, out, upto);\n    result.length = upto;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a43a81875fea76763cb9f1ff5a41f2c5b79a6585","date":1264678816,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(char[],int,UTF8Result).mjava","pathOld":"src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(char[],int,UTF8Result).mjava","sourceNew":"  /** Encode characters from a char[] source, starting at\n   *  offset and stopping when the character 0xffff is seen.\n   *  Returns the number of bytes written to bytesOut. */\n  public static void UTF16toUTF8(final char[] source, final int offset, UTF8Result result) {\n\n    int upto = 0;\n    int i = offset;\n    byte[] out = result.result;\n\n    while(true) {\n      \n      final int code = (int) source[i++];\n\n      if (upto+4 > out.length) {\n        out = result.result = ArrayUtil.grow(out, upto+4);\n      }\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        if (code == 0xffff)\n          // END\n          break;\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && source[i] != 0xffff) {\n          int utf32 = (int) source[i];\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(source, offset, i-offset-1, out, upto);\n    result.length = upto;\n  }\n\n","sourceOld":"  /** Encode characters from a char[] source, starting at\n   *  offset and stopping when the character 0xffff is seen.\n   *  Returns the number of bytes written to bytesOut. */\n  public static void UTF16toUTF8(final char[] source, final int offset, UTF8Result result) {\n\n    int upto = 0;\n    int i = offset;\n    byte[] out = result.result;\n\n    while(true) {\n      \n      final int code = (int) source[i++];\n\n      if (upto+4 > out.length) {\n        byte[] newOut = new byte[2*out.length];\n        assert newOut.length >= upto+4;\n        System.arraycopy(out, 0, newOut, 0, upto);\n        result.result = out = newOut;\n      }\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        if (code == 0xffff)\n          // END\n          break;\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && source[i] != 0xffff) {\n          int utf32 = (int) source[i];\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(source, offset, i-offset-1, out, upto);\n    result.length = upto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(char[],int,UTF8Result).mjava","pathOld":"src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(char[],int,UTF8Result).mjava","sourceNew":"  /** Encode characters from a char[] source, starting at\n   *  offset and stopping when the character 0xffff is seen.\n   *  Returns the number of bytes written to bytesOut. */\n  public static void UTF16toUTF8(final char[] source, final int offset, UTF8Result result) {\n\n    int upto = 0;\n    int i = offset;\n    byte[] out = result.result;\n\n    while(true) {\n      \n      final int code = (int) source[i++];\n\n      if (upto+4 > out.length) {\n        out = result.result = ArrayUtil.grow(out, upto+4);\n      }\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        if (code == 0xffff)\n          // END\n          break;\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && source[i] != 0xffff) {\n          int utf32 = (int) source[i];\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(source, offset, i-offset-1, out, upto);\n    result.length = upto;\n  }\n\n","sourceOld":"  /** Encode characters from a char[] source, starting at\n   *  offset and stopping when the character 0xffff is seen.\n   *  Returns the number of bytes written to bytesOut. */\n  public static void UTF16toUTF8(final char[] source, final int offset, UTF8Result result) {\n\n    int upto = 0;\n    int i = offset;\n    byte[] out = result.result;\n\n    while(true) {\n      \n      final int code = (int) source[i++];\n\n      if (upto+4 > out.length) {\n        out = result.result = ArrayUtil.grow(out, upto+4);\n      }\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        if (code == 0xffff)\n          // END\n          break;\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && source[i] != 0xffff) {\n          int utf32 = (int) source[i];\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(source, offset, i-offset-1, out, upto);\n    result.length = upto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a43a81875fea76763cb9f1ff5a41f2c5b79a6585":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a43a81875fea76763cb9f1ff5a41f2c5b79a6585"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["a43a81875fea76763cb9f1ff5a41f2c5b79a6585"],"a43a81875fea76763cb9f1ff5a41f2c5b79a6585":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}