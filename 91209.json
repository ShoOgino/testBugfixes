{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#checkIntegrity().mjava","commits":[{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#checkIntegrity().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void checkIntegrity() throws IOException {\n    BytesRef scratch = new BytesRef();\n    IndexInput clone = data.clone();\n    clone.seek(0);\n    ChecksumIndexInput input = new BufferedChecksumIndexInput(clone);\n    while(true) {\n      SimpleTextUtil.readLine(input, scratch);\n      if (scratch.equals(END)) {\n        SimpleTextUtil.checkFooter(input, CHECKSUM);\n        break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","caf65fa364fcf8ea8ef1032c1247622933af3b04"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#checkIntegrity().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void checkIntegrity() throws IOException {\n    BytesRef scratch = new BytesRef();\n    IndexInput clone = data.clone();\n    clone.seek(0);\n    ChecksumIndexInput input = new BufferedChecksumIndexInput(clone);\n    while(true) {\n      SimpleTextUtil.readLine(input, scratch);\n      if (scratch.equals(END)) {\n        SimpleTextUtil.checkFooter(input, CHECKSUM);\n        break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"caf65fa364fcf8ea8ef1032c1247622933af3b04","date":1397057745,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#checkIntegrity().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#checkIntegrity().mjava","sourceNew":"  @Override\n  public void checkIntegrity() throws IOException {\n    BytesRef scratch = new BytesRef();\n    IndexInput clone = data.clone();\n    clone.seek(0);\n    ChecksumIndexInput input = new BufferedChecksumIndexInput(clone);\n    while(true) {\n      SimpleTextUtil.readLine(input, scratch);\n      if (scratch.equals(END)) {\n        SimpleTextUtil.checkFooter(input);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void checkIntegrity() throws IOException {\n    BytesRef scratch = new BytesRef();\n    IndexInput clone = data.clone();\n    clone.seek(0);\n    ChecksumIndexInput input = new BufferedChecksumIndexInput(clone);\n    while(true) {\n      SimpleTextUtil.readLine(input, scratch);\n      if (scratch.equals(END)) {\n        SimpleTextUtil.checkFooter(input, CHECKSUM);\n        break;\n      }\n    }\n  }\n\n","bugFix":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#checkIntegrity().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#checkIntegrity().mjava","sourceNew":"  @Override\n  public void checkIntegrity() throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    IndexInput clone = data.clone();\n    clone.seek(0);\n    ChecksumIndexInput input = new BufferedChecksumIndexInput(clone);\n    while(true) {\n      SimpleTextUtil.readLine(input, scratch);\n      if (scratch.get().equals(END)) {\n        SimpleTextUtil.checkFooter(input);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void checkIntegrity() throws IOException {\n    BytesRef scratch = new BytesRef();\n    IndexInput clone = data.clone();\n    clone.seek(0);\n    ChecksumIndexInput input = new BufferedChecksumIndexInput(clone);\n    while(true) {\n      SimpleTextUtil.readLine(input, scratch);\n      if (scratch.equals(END)) {\n        SimpleTextUtil.checkFooter(input);\n        break;\n      }\n    }\n  }\n\n","bugFix":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15d822cf5f34a21b7fea671ef876f0a38f1a9e59","date":1425137195,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#checkIntegrity().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#checkIntegrity().mjava","sourceNew":"  @Override\n  public void checkIntegrity() throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    IndexInput clone = data.clone();\n    clone.seek(0);\n    // checksum is fixed-width encoded with 20 bytes, plus 1 byte for newline (the space is included in SimpleTextUtil.CHECKSUM):\n    long footerStartPos = data.length() - (SimpleTextUtil.CHECKSUM.length + 21);\n    ChecksumIndexInput input = new BufferedChecksumIndexInput(clone);\n    while (true) {\n      SimpleTextUtil.readLine(input, scratch);\n      if (input.getFilePointer() >= footerStartPos) {\n        // Make sure we landed at precisely the right location:\n        if (input.getFilePointer() != footerStartPos) {\n          throw new CorruptIndexException(\"SimpleText failure: footer does not start at expected position current=\" + input.getFilePointer() + \" vs expected=\" + footerStartPos, input);\n        }\n        SimpleTextUtil.checkFooter(input);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void checkIntegrity() throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    IndexInput clone = data.clone();\n    clone.seek(0);\n    ChecksumIndexInput input = new BufferedChecksumIndexInput(clone);\n    while(true) {\n      SimpleTextUtil.readLine(input, scratch);\n      if (scratch.get().equals(END)) {\n        SimpleTextUtil.checkFooter(input);\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#checkIntegrity().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#checkIntegrity().mjava","sourceNew":"  @Override\n  public void checkIntegrity() throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    IndexInput clone = data.clone();\n    clone.seek(0);\n    // checksum is fixed-width encoded with 20 bytes, plus 1 byte for newline (the space is included in SimpleTextUtil.CHECKSUM):\n    long footerStartPos = data.length() - (SimpleTextUtil.CHECKSUM.length + 21);\n    ChecksumIndexInput input = new BufferedChecksumIndexInput(clone);\n    while (true) {\n      SimpleTextUtil.readLine(input, scratch);\n      if (input.getFilePointer() >= footerStartPos) {\n        // Make sure we landed at precisely the right location:\n        if (input.getFilePointer() != footerStartPos) {\n          throw new CorruptIndexException(\"SimpleText failure: footer does not start at expected position current=\" + input.getFilePointer() + \" vs expected=\" + footerStartPos, input);\n        }\n        SimpleTextUtil.checkFooter(input);\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void checkIntegrity() throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    IndexInput clone = data.clone();\n    clone.seek(0);\n    ChecksumIndexInput input = new BufferedChecksumIndexInput(clone);\n    while(true) {\n      SimpleTextUtil.readLine(input, scratch);\n      if (scratch.get().equals(END)) {\n        SimpleTextUtil.checkFooter(input);\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","15d822cf5f34a21b7fea671ef876f0a38f1a9e59"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["caf65fa364fcf8ea8ef1032c1247622933af3b04"],"15d822cf5f34a21b7fea671ef876f0a38f1a9e59":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"caf65fa364fcf8ea8ef1032c1247622933af3b04":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["15d822cf5f34a21b7fea671ef876f0a38f1a9e59"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","caf65fa364fcf8ea8ef1032c1247622933af3b04"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","15d822cf5f34a21b7fea671ef876f0a38f1a9e59"],"15d822cf5f34a21b7fea671ef876f0a38f1a9e59":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"caf65fa364fcf8ea8ef1032c1247622933af3b04":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}