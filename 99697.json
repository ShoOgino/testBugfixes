{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkCollectionExpectations(String,List[Integer]).mjava","commits":[{"id":"c215736a9e29403edd2132d9f0829a287b428df4","date":1354641965,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkCollectionExpectations(String,List[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1) + 1;\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n    \n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (collections.containsKey(collectionName)) {\n        Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards; \n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ccf4d8c4536f02247aec7edc26a89e19c5c05dd4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkCollectionExpectations(String,List[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1) + 1;\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n    \n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (collections.containsKey(collectionName)) {\n        Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards; \n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ccf4d8c4536f02247aec7edc26a89e19c5c05dd4","date":1355167764,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkCollectionExpectations(String,List[Integer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkCollectionExpectations(String,List[Integer]).mjava","sourceNew":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1);\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n    \n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (collections.containsKey(collectionName)) {\n        Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards; \n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","sourceOld":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1) + 1;\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n    \n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (collections.containsKey(collectionName)) {\n        Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards; \n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","bugFix":["c215736a9e29403edd2132d9f0829a287b428df4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a57adc9bfabbc207ed17740dd86e0a2401ea385","date":1355507623,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkCollectionExpectations(String,List[Integer],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkCollectionExpectations(String,List[Integer]).mjava","sourceNew":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1);\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n    \n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (collections.containsKey(collectionName)) {\n        Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        for (Replica replica : slices.get(sliceName).getReplicas()) {\n          if (nodesAllowedToRunShards != null && !nodesAllowedToRunShards.contains(replica.getStr(ZkStateReader.NODE_NAME_PROP))) {\n            return \"Shard \" + replica.getName() + \" created on node \" + replica.getStr(ZkStateReader.NODE_NAME_PROP) + \" not allowed to run shards for the created collection \" + collectionName;\n          }\n        }\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards; \n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","sourceOld":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1);\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n    \n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (collections.containsKey(collectionName)) {\n        Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards; \n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkCollectionExpectations(String,List[Integer]).mjava","sourceNew":null,"sourceOld":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1) + 1;\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n    \n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (collections.containsKey(collectionName)) {\n        Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards; \n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"9a57adc9bfabbc207ed17740dd86e0a2401ea385":["ccf4d8c4536f02247aec7edc26a89e19c5c05dd4"],"c215736a9e29403edd2132d9f0829a287b428df4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ccf4d8c4536f02247aec7edc26a89e19c5c05dd4":["c215736a9e29403edd2132d9f0829a287b428df4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c215736a9e29403edd2132d9f0829a287b428df4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a57adc9bfabbc207ed17740dd86e0a2401ea385"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"9a57adc9bfabbc207ed17740dd86e0a2401ea385":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c215736a9e29403edd2132d9f0829a287b428df4":["ccf4d8c4536f02247aec7edc26a89e19c5c05dd4","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"ccf4d8c4536f02247aec7edc26a89e19c5c05dd4":["9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c215736a9e29403edd2132d9f0829a287b428df4","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}