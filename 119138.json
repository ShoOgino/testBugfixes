{"path":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,IndexSchema,SelectorParams,FieldNameSelector).mjava","commits":[{"id":"f13b9d4c228e77327b284419c8cafd16913a7a19","date":1405437837,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,IndexSchema,SelectorParams,FieldNameSelector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init \n   * code.  This may be useful for Factories that wish to define default \n   * selectors in similar terms to what the configuration would look like.\n   * Uses {@code schema} for checking field existence.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final IndexSchema schema,\n     final SelectorParams params,\n     final FieldNameSelector defSelector) {\n\n    if (params.noSelectorsSpecified()) {\n      return defSelector;\n    }\n\n    final ConfigurableFieldNameSelectorHelper helper =\n      new ConfigurableFieldNameSelectorHelper(loader, params);\n    return new FieldNameSelector() {\n      @Override\n      public boolean shouldMutate(String fieldName) {\n        return helper.shouldMutateBasedOnSchema(fieldName, schema);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5ad8cb078811acf9ef38ece78171f1bfe5786de","date":1474538499,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,IndexSchema,SelectorParams,FieldNameSelector).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,IndexSchema,SelectorParams,FieldNameSelector).mjava","sourceNew":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init \n   * code.  This may be useful for Factories that wish to define default \n   * selectors in similar terms to what the configuration would look like.\n   * Uses {@code schema} for checking field existence.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final IndexSchema schema,\n     final SelectorParams params,\n     final FieldNameSelector defSelector) {\n\n    if (params.noSelectorsSpecified()) {\n      return defSelector;\n    }\n\n    final ConfigurableFieldNameSelectorHelper helper =\n      new ConfigurableFieldNameSelectorHelper(loader, params);\n    return fieldName -> helper.shouldMutateBasedOnSchema(fieldName, schema);\n  }\n\n","sourceOld":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init \n   * code.  This may be useful for Factories that wish to define default \n   * selectors in similar terms to what the configuration would look like.\n   * Uses {@code schema} for checking field existence.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final IndexSchema schema,\n     final SelectorParams params,\n     final FieldNameSelector defSelector) {\n\n    if (params.noSelectorsSpecified()) {\n      return defSelector;\n    }\n\n    final ConfigurableFieldNameSelectorHelper helper =\n      new ConfigurableFieldNameSelectorHelper(loader, params);\n    return new FieldNameSelector() {\n      @Override\n      public boolean shouldMutate(String fieldName) {\n        return helper.shouldMutateBasedOnSchema(fieldName, schema);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,IndexSchema,SelectorParams,FieldNameSelector).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,IndexSchema,SelectorParams,FieldNameSelector).mjava","sourceNew":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init \n   * code.  This may be useful for Factories that wish to define default \n   * selectors in similar terms to what the configuration would look like.\n   * Uses {@code schema} for checking field existence.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final IndexSchema schema,\n     final SelectorParams params,\n     final FieldNameSelector defSelector) {\n\n    if (params.noSelectorsSpecified()) {\n      return defSelector;\n    }\n\n    final ConfigurableFieldNameSelectorHelper helper =\n      new ConfigurableFieldNameSelectorHelper(loader, params);\n    return fieldName -> helper.shouldMutateBasedOnSchema(fieldName, schema);\n  }\n\n","sourceOld":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init \n   * code.  This may be useful for Factories that wish to define default \n   * selectors in similar terms to what the configuration would look like.\n   * Uses {@code schema} for checking field existence.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final IndexSchema schema,\n     final SelectorParams params,\n     final FieldNameSelector defSelector) {\n\n    if (params.noSelectorsSpecified()) {\n      return defSelector;\n    }\n\n    final ConfigurableFieldNameSelectorHelper helper =\n      new ConfigurableFieldNameSelectorHelper(loader, params);\n    return new FieldNameSelector() {\n      @Override\n      public boolean shouldMutate(String fieldName) {\n        return helper.shouldMutateBasedOnSchema(fieldName, schema);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,IndexSchema,SelectorParams,FieldNameSelector).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,IndexSchema,SelectorParams,FieldNameSelector).mjava","sourceNew":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init \n   * code.  This may be useful for Factories that wish to define default \n   * selectors in similar terms to what the configuration would look like.\n   * Uses {@code schema} for checking field existence.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final IndexSchema schema,\n     final SelectorParams params,\n     final FieldNameSelector defSelector) {\n\n    if (params.noSelectorsSpecified()) {\n      return defSelector;\n    }\n\n    final ConfigurableFieldNameSelectorHelper helper =\n      new ConfigurableFieldNameSelectorHelper(loader, params);\n    return fieldName -> helper.shouldMutateBasedOnSchema(fieldName, schema);\n  }\n\n","sourceOld":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init \n   * code.  This may be useful for Factories that wish to define default \n   * selectors in similar terms to what the configuration would look like.\n   * Uses {@code schema} for checking field existence.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final IndexSchema schema,\n     final SelectorParams params,\n     final FieldNameSelector defSelector) {\n\n    if (params.noSelectorsSpecified()) {\n      return defSelector;\n    }\n\n    final ConfigurableFieldNameSelectorHelper helper =\n      new ConfigurableFieldNameSelectorHelper(loader, params);\n    return new FieldNameSelector() {\n      @Override\n      public boolean shouldMutate(String fieldName) {\n        return helper.shouldMutateBasedOnSchema(fieldName, schema);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f13b9d4c228e77327b284419c8cafd16913a7a19","c5ad8cb078811acf9ef38ece78171f1bfe5786de"],"c5ad8cb078811acf9ef38ece78171f1bfe5786de":["f13b9d4c228e77327b284419c8cafd16913a7a19"],"f13b9d4c228e77327b284419c8cafd16913a7a19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f13b9d4c228e77327b284419c8cafd16913a7a19","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f13b9d4c228e77327b284419c8cafd16913a7a19"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c5ad8cb078811acf9ef38ece78171f1bfe5786de":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f13b9d4c228e77327b284419c8cafd16913a7a19":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","c5ad8cb078811acf9ef38ece78171f1bfe5786de","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}