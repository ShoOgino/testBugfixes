{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#SearchRateTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","commits":[{"id":"c3f354f2175f861ee625bb3c9572d53b77cd8545","date":1508405819,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#SearchRateTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","pathOld":"/dev/null","sourceNew":"  public SearchRateTrigger(String name, Map<String, Object> properties,\n                           SolrResourceLoader loader,\n                           SolrCloudManager cloudManager) {\n    super(TriggerEventType.SEARCHRATE, name, properties, loader, cloudManager);\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.state.put(\"lastCollectionEvent\", lastCollectionEvent);\n    this.state.put(\"lastNodeEvent\", lastNodeEvent);\n    this.state.put(\"lastShardEvent\", lastShardEvent);\n    this.state.put(\"lastReplicaEvent\", lastReplicaEvent);\n\n    // parse config options\n    collection = (String)properties.getOrDefault(AutoScalingParams.COLLECTION, Policy.ANY);\n    shard = (String)properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (collection.equals(Policy.ANY) && !shard.equals(Policy.ANY)) {\n      throw new IllegalArgumentException(\"When 'shard' is other than #ANY collection name must be also other than #ANY\");\n    }\n    node = (String)properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    handler = (String)properties.getOrDefault(AutoScalingParams.HANDLER, \"/select\");\n\n    if (properties.get(\"rate\") == null) {\n      throw new IllegalArgumentException(\"No 'rate' specified in configuration\");\n    }\n    String rateString = String.valueOf(properties.get(\"rate\"));\n    try {\n      rate = Double.parseDouble(rateString);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid 'rate' configuration value: '\" + rateString + \"'\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d7cf463e12b13965d63f133adc46a1c673d0c4e","date":1509636749,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#SearchRateTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#SearchRateTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  public SearchRateTrigger(String name, Map<String, Object> properties,\n                           SolrResourceLoader loader,\n                           SolrCloudManager cloudManager) {\n    super(TriggerEventType.SEARCHRATE, name, properties, loader, cloudManager);\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.state.put(\"lastCollectionEvent\", lastCollectionEvent);\n    this.state.put(\"lastNodeEvent\", lastNodeEvent);\n    this.state.put(\"lastShardEvent\", lastShardEvent);\n    this.state.put(\"lastReplicaEvent\", lastReplicaEvent);\n\n    // parse config options\n    collection = (String)properties.getOrDefault(AutoScalingParams.COLLECTION, Policy.ANY);\n    shard = (String)properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (collection.equals(Policy.ANY) && !shard.equals(Policy.ANY)) {\n      throw new IllegalArgumentException(\"When 'shard' is other than #ANY then collection name must be also other than #ANY\");\n    }\n    node = (String)properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    handler = (String)properties.getOrDefault(AutoScalingParams.HANDLER, \"/select\");\n\n    if (properties.get(\"rate\") == null) {\n      throw new IllegalArgumentException(\"No 'rate' specified in configuration\");\n    }\n    String rateString = String.valueOf(properties.get(\"rate\"));\n    try {\n      rate = Double.parseDouble(rateString);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid 'rate' configuration value: '\" + rateString + \"'\", e);\n    }\n  }\n\n","sourceOld":"  public SearchRateTrigger(String name, Map<String, Object> properties,\n                           SolrResourceLoader loader,\n                           SolrCloudManager cloudManager) {\n    super(TriggerEventType.SEARCHRATE, name, properties, loader, cloudManager);\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.state.put(\"lastCollectionEvent\", lastCollectionEvent);\n    this.state.put(\"lastNodeEvent\", lastNodeEvent);\n    this.state.put(\"lastShardEvent\", lastShardEvent);\n    this.state.put(\"lastReplicaEvent\", lastReplicaEvent);\n\n    // parse config options\n    collection = (String)properties.getOrDefault(AutoScalingParams.COLLECTION, Policy.ANY);\n    shard = (String)properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (collection.equals(Policy.ANY) && !shard.equals(Policy.ANY)) {\n      throw new IllegalArgumentException(\"When 'shard' is other than #ANY collection name must be also other than #ANY\");\n    }\n    node = (String)properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    handler = (String)properties.getOrDefault(AutoScalingParams.HANDLER, \"/select\");\n\n    if (properties.get(\"rate\") == null) {\n      throw new IllegalArgumentException(\"No 'rate' specified in configuration\");\n    }\n    String rateString = String.valueOf(properties.get(\"rate\"));\n    try {\n      rate = Double.parseDouble(rateString);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid 'rate' configuration value: '\" + rateString + \"'\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#SearchRateTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#SearchRateTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  public SearchRateTrigger(String name, Map<String, Object> properties,\n                           SolrResourceLoader loader,\n                           SolrCloudManager cloudManager) {\n    super(TriggerEventType.SEARCHRATE, name, properties, loader, cloudManager);\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.state.put(\"lastCollectionEvent\", lastCollectionEvent);\n    this.state.put(\"lastNodeEvent\", lastNodeEvent);\n    this.state.put(\"lastShardEvent\", lastShardEvent);\n    this.state.put(\"lastReplicaEvent\", lastReplicaEvent);\n\n    // parse config options\n    collection = (String)properties.getOrDefault(AutoScalingParams.COLLECTION, Policy.ANY);\n    shard = (String)properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (collection.equals(Policy.ANY) && !shard.equals(Policy.ANY)) {\n      throw new IllegalArgumentException(\"When 'shard' is other than #ANY then collection name must be also other than #ANY\");\n    }\n    node = (String)properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    handler = (String)properties.getOrDefault(AutoScalingParams.HANDLER, \"/select\");\n\n    if (properties.get(\"rate\") == null) {\n      throw new IllegalArgumentException(\"No 'rate' specified in configuration\");\n    }\n    String rateString = String.valueOf(properties.get(\"rate\"));\n    try {\n      rate = Double.parseDouble(rateString);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid 'rate' configuration value: '\" + rateString + \"'\", e);\n    }\n  }\n\n","sourceOld":"  public SearchRateTrigger(String name, Map<String, Object> properties,\n                           SolrResourceLoader loader,\n                           SolrCloudManager cloudManager) {\n    super(TriggerEventType.SEARCHRATE, name, properties, loader, cloudManager);\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.state.put(\"lastCollectionEvent\", lastCollectionEvent);\n    this.state.put(\"lastNodeEvent\", lastNodeEvent);\n    this.state.put(\"lastShardEvent\", lastShardEvent);\n    this.state.put(\"lastReplicaEvent\", lastReplicaEvent);\n\n    // parse config options\n    collection = (String)properties.getOrDefault(AutoScalingParams.COLLECTION, Policy.ANY);\n    shard = (String)properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (collection.equals(Policy.ANY) && !shard.equals(Policy.ANY)) {\n      throw new IllegalArgumentException(\"When 'shard' is other than #ANY collection name must be also other than #ANY\");\n    }\n    node = (String)properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    handler = (String)properties.getOrDefault(AutoScalingParams.HANDLER, \"/select\");\n\n    if (properties.get(\"rate\") == null) {\n      throw new IllegalArgumentException(\"No 'rate' specified in configuration\");\n    }\n    String rateString = String.valueOf(properties.get(\"rate\"));\n    try {\n      rate = Double.parseDouble(rateString);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid 'rate' configuration value: '\" + rateString + \"'\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#SearchRateTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#SearchRateTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  public SearchRateTrigger(String name, Map<String, Object> properties,\n                           SolrResourceLoader loader,\n                           SolrCloudManager cloudManager) {\n    super(TriggerEventType.SEARCHRATE, name, properties, loader, cloudManager);\n    this.state.put(\"lastCollectionEvent\", lastCollectionEvent);\n    this.state.put(\"lastNodeEvent\", lastNodeEvent);\n    this.state.put(\"lastShardEvent\", lastShardEvent);\n    this.state.put(\"lastReplicaEvent\", lastReplicaEvent);\n\n    // parse config options\n    collection = (String)properties.getOrDefault(AutoScalingParams.COLLECTION, Policy.ANY);\n    shard = (String)properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (collection.equals(Policy.ANY) && !shard.equals(Policy.ANY)) {\n      throw new IllegalArgumentException(\"When 'shard' is other than #ANY then collection name must be also other than #ANY\");\n    }\n    node = (String)properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    handler = (String)properties.getOrDefault(AutoScalingParams.HANDLER, \"/select\");\n\n    if (properties.get(\"rate\") == null) {\n      throw new IllegalArgumentException(\"No 'rate' specified in configuration\");\n    }\n    String rateString = String.valueOf(properties.get(\"rate\"));\n    try {\n      rate = Double.parseDouble(rateString);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid 'rate' configuration value: '\" + rateString + \"'\", e);\n    }\n  }\n\n","sourceOld":"  public SearchRateTrigger(String name, Map<String, Object> properties,\n                           SolrResourceLoader loader,\n                           SolrCloudManager cloudManager) {\n    super(TriggerEventType.SEARCHRATE, name, properties, loader, cloudManager);\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.state.put(\"lastCollectionEvent\", lastCollectionEvent);\n    this.state.put(\"lastNodeEvent\", lastNodeEvent);\n    this.state.put(\"lastShardEvent\", lastShardEvent);\n    this.state.put(\"lastReplicaEvent\", lastReplicaEvent);\n\n    // parse config options\n    collection = (String)properties.getOrDefault(AutoScalingParams.COLLECTION, Policy.ANY);\n    shard = (String)properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (collection.equals(Policy.ANY) && !shard.equals(Policy.ANY)) {\n      throw new IllegalArgumentException(\"When 'shard' is other than #ANY then collection name must be also other than #ANY\");\n    }\n    node = (String)properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    handler = (String)properties.getOrDefault(AutoScalingParams.HANDLER, \"/select\");\n\n    if (properties.get(\"rate\") == null) {\n      throw new IllegalArgumentException(\"No 'rate' specified in configuration\");\n    }\n    String rateString = String.valueOf(properties.get(\"rate\"));\n    try {\n      rate = Double.parseDouble(rateString);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid 'rate' configuration value: '\" + rateString + \"'\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#SearchRateTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    // parse config options\n    collection = (String)properties.getOrDefault(AutoScalingParams.COLLECTION, Policy.ANY);\n    shard = (String)properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (collection.equals(Policy.ANY) && !shard.equals(Policy.ANY)) {\n      throw new TriggerValidationException(\"shard\", \"When 'shard' is other than #ANY then collection name must be also other than #ANY\");\n    }\n    node = (String)properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    handler = (String)properties.getOrDefault(AutoScalingParams.HANDLER, \"/select\");\n\n    String rateString = String.valueOf(properties.get(\"rate\"));\n    try {\n      rate = Double.parseDouble(rateString);\n    } catch (Exception e) {\n      throw new TriggerValidationException(name, \"rate\", \"Invalid 'rate' configuration value: '\" + rateString + \"': \" + e.toString());\n    }\n  }\n\n","sourceOld":"  public SearchRateTrigger(String name, Map<String, Object> properties,\n                           SolrResourceLoader loader,\n                           SolrCloudManager cloudManager) {\n    super(TriggerEventType.SEARCHRATE, name, properties, loader, cloudManager);\n    this.state.put(\"lastCollectionEvent\", lastCollectionEvent);\n    this.state.put(\"lastNodeEvent\", lastNodeEvent);\n    this.state.put(\"lastShardEvent\", lastShardEvent);\n    this.state.put(\"lastReplicaEvent\", lastReplicaEvent);\n\n    // parse config options\n    collection = (String)properties.getOrDefault(AutoScalingParams.COLLECTION, Policy.ANY);\n    shard = (String)properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (collection.equals(Policy.ANY) && !shard.equals(Policy.ANY)) {\n      throw new IllegalArgumentException(\"When 'shard' is other than #ANY then collection name must be also other than #ANY\");\n    }\n    node = (String)properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    handler = (String)properties.getOrDefault(AutoScalingParams.HANDLER, \"/select\");\n\n    if (properties.get(\"rate\") == null) {\n      throw new IllegalArgumentException(\"No 'rate' specified in configuration\");\n    }\n    String rateString = String.valueOf(properties.get(\"rate\"));\n    try {\n      rate = Double.parseDouble(rateString);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid 'rate' configuration value: '\" + rateString + \"'\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3f354f2175f861ee625bb3c9572d53b77cd8545":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["c3f354f2175f861ee625bb3c9572d53b77cd8545","7d7cf463e12b13965d63f133adc46a1c673d0c4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d7cf463e12b13965d63f133adc46a1c673d0c4e":["c3f354f2175f861ee625bb3c9572d53b77cd8545"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"]},"commit2Childs":{"c3f354f2175f861ee625bb3c9572d53b77cd8545":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","7d7cf463e12b13965d63f133adc46a1c673d0c4e"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3f354f2175f861ee625bb3c9572d53b77cd8545"],"7d7cf463e12b13965d63f133adc46a1c673d0c4e":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}