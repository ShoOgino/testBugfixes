{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetScore(List[Query]).mjava","commits":[{"id":"ceae51e37bbff02dcdeaa12303fec10d3eaaa004","date":1387382773,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetScore(List[Query]).mjava","pathOld":"/dev/null","sourceNew":"  private DocSet getDocSetScore(List<Query> queries) throws IOException {\n    Query main = queries.remove(0);\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    search(main, pf.filter, collector);\n\n    if(collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n\n    DocSet docSet = setCollector.getDocSet();\n    return docSet;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetScore(List[Query]).mjava","pathOld":"/dev/null","sourceNew":"  private DocSet getDocSetScore(List<Query> queries) throws IOException {\n    Query main = queries.remove(0);\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    search(main, pf.filter, collector);\n\n    if(collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n\n    DocSet docSet = setCollector.getDocSet();\n    return docSet;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetScore(List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetScore(List[Query]).mjava","sourceNew":"  private DocSet getDocSetScore(List<Query> queries) throws IOException {\n    Query main = queries.remove(0);\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    if (pf.filter != null) {\n      search(new FilteredQuery(main, pf.filter), collector);\n    } else {\n      search(main, collector);\n    }\n\n    if(collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n\n    DocSet docSet = setCollector.getDocSet();\n    return docSet;\n  }\n\n","sourceOld":"  private DocSet getDocSetScore(List<Query> queries) throws IOException {\n    Query main = queries.remove(0);\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    search(main, pf.filter, collector);\n\n    if(collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n\n    DocSet docSet = setCollector.getDocSet();\n    return docSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetScore(List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetScore(List[Query]).mjava","sourceNew":"  private DocSet getDocSetScore(List<Query> queries) throws IOException {\n    Query main = queries.remove(0);\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    if (pf.filter != null) {\n      Query query = new BooleanQuery.Builder()\n          .add(main, Occur.MUST)\n          .add(pf.filter, Occur.FILTER)\n          .build();\n      search(query, collector);\n    } else {\n      search(main, collector);\n    }\n\n    if(collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n\n    DocSet docSet = setCollector.getDocSet();\n    return docSet;\n  }\n\n","sourceOld":"  private DocSet getDocSetScore(List<Query> queries) throws IOException {\n    Query main = queries.remove(0);\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    if (pf.filter != null) {\n      search(new FilteredQuery(main, pf.filter), collector);\n    } else {\n      search(main, collector);\n    }\n\n    if(collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n\n    DocSet docSet = setCollector.getDocSet();\n    return docSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0cc2f173b07ff75ca951e017f5dd1f319fdad0","date":1442027674,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetScore(List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetScore(List[Query]).mjava","sourceNew":"  private DocSet getDocSetScore(List<Query> queries) throws IOException {\n    Query main = queries.remove(0);\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    DocSetCollector setCollector = new DocSetCollector(maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    if (pf.filter != null) {\n      Query query = new BooleanQuery.Builder()\n          .add(main, Occur.MUST)\n          .add(pf.filter, Occur.FILTER)\n          .build();\n      search(query, collector);\n    } else {\n      search(main, collector);\n    }\n\n    if(collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n\n    DocSet docSet = setCollector.getDocSet();\n    return docSet;\n  }\n\n","sourceOld":"  private DocSet getDocSetScore(List<Query> queries) throws IOException {\n    Query main = queries.remove(0);\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    if (pf.filter != null) {\n      Query query = new BooleanQuery.Builder()\n          .add(main, Occur.MUST)\n          .add(pf.filter, Occur.FILTER)\n          .build();\n      search(query, collector);\n    } else {\n      search(main, collector);\n    }\n\n    if(collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n\n    DocSet docSet = setCollector.getDocSet();\n    return docSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetScore(List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetScore(List[Query]).mjava","sourceNew":"  private DocSet getDocSetScore(List<Query> queries) throws IOException {\n    Query main = queries.remove(0);\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    DocSetCollector setCollector = new DocSetCollector(maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    if (pf.filter != null) {\n      Query query = new BooleanQuery.Builder().add(main, Occur.MUST).add(pf.filter, Occur.FILTER).build();\n      search(query, collector);\n    } else {\n      search(main, collector);\n    }\n\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n\n    DocSet docSet = setCollector.getDocSet();\n    return docSet;\n  }\n\n","sourceOld":"  private DocSet getDocSetScore(List<Query> queries) throws IOException {\n    Query main = queries.remove(0);\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    DocSetCollector setCollector = new DocSetCollector(maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    if (pf.filter != null) {\n      Query query = new BooleanQuery.Builder()\n          .add(main, Occur.MUST)\n          .add(pf.filter, Occur.FILTER)\n          .build();\n      search(query, collector);\n    } else {\n      search(main, collector);\n    }\n\n    if(collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n\n    DocSet docSet = setCollector.getDocSet();\n    return docSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3","date":1485881524,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetScore(List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetScore(List[Query]).mjava","sourceNew":"  private DocSet getDocSetScore(List<Query> queries) throws IOException {\n    Query main = queries.remove(0);\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    DocSetCollector setCollector = new DocSetCollector(maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    if (pf.filter != null) {\n      Query query = new BooleanQuery.Builder().add(main, Occur.MUST).add(pf.filter, Occur.FILTER).build();\n      search(query, collector);\n    } else {\n      search(main, collector);\n    }\n\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n\n    return DocSetUtil.getDocSet(setCollector, this);\n  }\n\n","sourceOld":"  private DocSet getDocSetScore(List<Query> queries) throws IOException {\n    Query main = queries.remove(0);\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    DocSetCollector setCollector = new DocSetCollector(maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    if (pf.filter != null) {\n      Query query = new BooleanQuery.Builder().add(main, Occur.MUST).add(pf.filter, Occur.FILTER).build();\n      search(query, collector);\n    } else {\n      search(main, collector);\n    }\n\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n\n    DocSet docSet = setCollector.getDocSet();\n    return docSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetScore(List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetScore(List[Query]).mjava","sourceNew":"  private DocSet getDocSetScore(List<Query> queries) throws IOException {\n    Query main = queries.remove(0);\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    DocSetCollector setCollector = new DocSetCollector(maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    if (pf.filter != null) {\n      Query query = new BooleanQuery.Builder().add(main, Occur.MUST).add(pf.filter, Occur.FILTER).build();\n      search(query, collector);\n    } else {\n      search(main, collector);\n    }\n\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n\n    return DocSetUtil.getDocSet(setCollector, this);\n  }\n\n","sourceOld":"  private DocSet getDocSetScore(List<Query> queries) throws IOException {\n    Query main = queries.remove(0);\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    DocSetCollector setCollector = new DocSetCollector(maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    if (pf.filter != null) {\n      Query query = new BooleanQuery.Builder().add(main, Occur.MUST).add(pf.filter, Occur.FILTER).build();\n      search(query, collector);\n    } else {\n      search(main, collector);\n    }\n\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n\n    DocSet docSet = setCollector.getDocSet();\n    return docSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec","date":1586897159,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetScore(List[Query]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetScore(List[Query]).mjava","sourceNew":"  private DocSet getDocSetScore(List<Query> queries) throws IOException {\n    Query main = queries.remove(0);\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    DocSetCollector setCollector = new DocSetCollector(maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    search(QueryUtils.combineQueryAndFilter(main, pf.filter), collector);\n\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n\n    return DocSetUtil.getDocSet(setCollector, this);\n  }\n\n","sourceOld":"  private DocSet getDocSetScore(List<Query> queries) throws IOException {\n    Query main = queries.remove(0);\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    DocSetCollector setCollector = new DocSetCollector(maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    if (pf.filter != null) {\n      Query query = new BooleanQuery.Builder().add(main, Occur.MUST).add(pf.filter, Occur.FILTER).build();\n      search(query, collector);\n    } else {\n      search(main, collector);\n    }\n\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n\n    return DocSetUtil.getDocSet(setCollector, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49731339ba07ef57ca4823faf0252a8b31dc33e2","date":1587256137,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetScore(List[Query]).mjava","sourceNew":null,"sourceOld":"  private DocSet getDocSetScore(List<Query> queries) throws IOException {\n    Query main = queries.remove(0);\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    DocSetCollector setCollector = new DocSetCollector(maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    search(QueryUtils.combineQueryAndFilter(main, pf.filter), collector);\n\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n\n    return DocSetUtil.getDocSet(setCollector, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec":["0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"1db68e96dd908fcd79ef809095822736aa601d08":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"49731339ba07ef57ca4823faf0252a8b31dc33e2":["d4d8a0350513120be3cf48c0eafd6b8787fcd3ec"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["ceae51e37bbff02dcdeaa12303fec10d3eaaa004"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["ac9de183adbc9483681f275ac1e2d92ed19f52e1","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ceae51e37bbff02dcdeaa12303fec10d3eaaa004"],"ca0cc2f173b07ff75ca951e017f5dd1f319fdad0":["1db68e96dd908fcd79ef809095822736aa601d08"],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["ca0cc2f173b07ff75ca951e017f5dd1f319fdad0"],"ceae51e37bbff02dcdeaa12303fec10d3eaaa004":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["49731339ba07ef57ca4823faf0252a8b31dc33e2"]},"commit2Childs":{"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec":["49731339ba07ef57ca4823faf0252a8b31dc33e2"],"1db68e96dd908fcd79ef809095822736aa601d08":["ca0cc2f173b07ff75ca951e017f5dd1f319fdad0"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["1db68e96dd908fcd79ef809095822736aa601d08"],"49731339ba07ef57ca4823faf0252a8b31dc33e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ceae51e37bbff02dcdeaa12303fec10d3eaaa004"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ca0cc2f173b07ff75ca951e017f5dd1f319fdad0":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["d4d8a0350513120be3cf48c0eafd6b8787fcd3ec","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"ceae51e37bbff02dcdeaa12303fec10d3eaaa004":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}