{"path":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#rehash().mjava","commits":[{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#rehash().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread#rehash().mjava","sourceNew":"  private void rehash() {\n    final int newHashSize = (fieldHash.length*2);\n    assert newHashSize > fieldHash.length;\n\n    final DocFieldProcessorPerField newHashArray[] = new DocFieldProcessorPerField[newHashSize];\n\n    // Rehash\n    int newHashMask = newHashSize-1;\n    for(int j=0;j<fieldHash.length;j++) {\n      DocFieldProcessorPerField fp0 = fieldHash[j];\n      while(fp0 != null) {\n        final int hashPos2 = fp0.fieldInfo.name.hashCode() & newHashMask;\n        DocFieldProcessorPerField nextFP0 = fp0.next;\n        fp0.next = newHashArray[hashPos2];\n        newHashArray[hashPos2] = fp0;\n        fp0 = nextFP0;\n      }\n    }\n\n    fieldHash = newHashArray;\n    hashMask = newHashMask;\n  }\n\n","sourceOld":"  private void rehash() {\n    final int newHashSize = (fieldHash.length*2);\n    assert newHashSize > fieldHash.length;\n\n    final DocFieldProcessorPerField newHashArray[] = new DocFieldProcessorPerField[newHashSize];\n\n    // Rehash\n    int newHashMask = newHashSize-1;\n    for(int j=0;j<fieldHash.length;j++) {\n      DocFieldProcessorPerField fp0 = fieldHash[j];\n      while(fp0 != null) {\n        final int hashPos2 = fp0.fieldInfo.name.hashCode() & newHashMask;\n        DocFieldProcessorPerField nextFP0 = fp0.next;\n        fp0.next = newHashArray[hashPos2];\n        newHashArray[hashPos2] = fp0;\n        fp0 = nextFP0;\n      }\n    }\n\n    fieldHash = newHashArray;\n    hashMask = newHashMask;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#rehash().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread#rehash().mjava","sourceNew":"  private void rehash() {\n    final int newHashSize = (fieldHash.length*2);\n    assert newHashSize > fieldHash.length;\n\n    final DocFieldProcessorPerField newHashArray[] = new DocFieldProcessorPerField[newHashSize];\n\n    // Rehash\n    int newHashMask = newHashSize-1;\n    for(int j=0;j<fieldHash.length;j++) {\n      DocFieldProcessorPerField fp0 = fieldHash[j];\n      while(fp0 != null) {\n        final int hashPos2 = fp0.fieldInfo.name.hashCode() & newHashMask;\n        DocFieldProcessorPerField nextFP0 = fp0.next;\n        fp0.next = newHashArray[hashPos2];\n        newHashArray[hashPos2] = fp0;\n        fp0 = nextFP0;\n      }\n    }\n\n    fieldHash = newHashArray;\n    hashMask = newHashMask;\n  }\n\n","sourceOld":"  private void rehash() {\n    final int newHashSize = (fieldHash.length*2);\n    assert newHashSize > fieldHash.length;\n\n    final DocFieldProcessorPerField newHashArray[] = new DocFieldProcessorPerField[newHashSize];\n\n    // Rehash\n    int newHashMask = newHashSize-1;\n    for(int j=0;j<fieldHash.length;j++) {\n      DocFieldProcessorPerField fp0 = fieldHash[j];\n      while(fp0 != null) {\n        final int hashPos2 = fp0.fieldInfo.name.hashCode() & newHashMask;\n        DocFieldProcessorPerField nextFP0 = fp0.next;\n        fp0.next = newHashArray[hashPos2];\n        newHashArray[hashPos2] = fp0;\n        fp0 = nextFP0;\n      }\n    }\n\n    fieldHash = newHashArray;\n    hashMask = newHashMask;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#rehash().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread#rehash().mjava","sourceNew":"  private void rehash() {\n    final int newHashSize = (fieldHash.length*2);\n    assert newHashSize > fieldHash.length;\n\n    final DocFieldProcessorPerField newHashArray[] = new DocFieldProcessorPerField[newHashSize];\n\n    // Rehash\n    int newHashMask = newHashSize-1;\n    for(int j=0;j<fieldHash.length;j++) {\n      DocFieldProcessorPerField fp0 = fieldHash[j];\n      while(fp0 != null) {\n        final int hashPos2 = fp0.fieldInfo.name.hashCode() & newHashMask;\n        DocFieldProcessorPerField nextFP0 = fp0.next;\n        fp0.next = newHashArray[hashPos2];\n        newHashArray[hashPos2] = fp0;\n        fp0 = nextFP0;\n      }\n    }\n\n    fieldHash = newHashArray;\n    hashMask = newHashMask;\n  }\n\n","sourceOld":"  private void rehash() {\n    final int newHashSize = (fieldHash.length*2);\n    assert newHashSize > fieldHash.length;\n\n    final DocFieldProcessorPerField newHashArray[] = new DocFieldProcessorPerField[newHashSize];\n\n    // Rehash\n    int newHashMask = newHashSize-1;\n    for(int j=0;j<fieldHash.length;j++) {\n      DocFieldProcessorPerField fp0 = fieldHash[j];\n      while(fp0 != null) {\n        final int hashPos2 = fp0.fieldInfo.name.hashCode() & newHashMask;\n        DocFieldProcessorPerField nextFP0 = fp0.next;\n        fp0.next = newHashArray[hashPos2];\n        newHashArray[hashPos2] = fp0;\n        fp0 = nextFP0;\n      }\n    }\n\n    fieldHash = newHashArray;\n    hashMask = newHashMask;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#rehash().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread#rehash().mjava","sourceNew":"  private void rehash() {\n    final int newHashSize = (fieldHash.length*2);\n    assert newHashSize > fieldHash.length;\n\n    final DocFieldProcessorPerField newHashArray[] = new DocFieldProcessorPerField[newHashSize];\n\n    // Rehash\n    int newHashMask = newHashSize-1;\n    for(int j=0;j<fieldHash.length;j++) {\n      DocFieldProcessorPerField fp0 = fieldHash[j];\n      while(fp0 != null) {\n        final int hashPos2 = fp0.fieldInfo.name.hashCode() & newHashMask;\n        DocFieldProcessorPerField nextFP0 = fp0.next;\n        fp0.next = newHashArray[hashPos2];\n        newHashArray[hashPos2] = fp0;\n        fp0 = nextFP0;\n      }\n    }\n\n    fieldHash = newHashArray;\n    hashMask = newHashMask;\n  }\n\n","sourceOld":"  private void rehash() {\n    final int newHashSize = (fieldHash.length*2);\n    assert newHashSize > fieldHash.length;\n\n    final DocFieldProcessorPerField newHashArray[] = new DocFieldProcessorPerField[newHashSize];\n\n    // Rehash\n    int newHashMask = newHashSize-1;\n    for(int j=0;j<fieldHash.length;j++) {\n      DocFieldProcessorPerField fp0 = fieldHash[j];\n      while(fp0 != null) {\n        final int hashPos2 = fp0.fieldInfo.name.hashCode() & newHashMask;\n        DocFieldProcessorPerField nextFP0 = fp0.next;\n        fp0.next = newHashArray[hashPos2];\n        newHashArray[hashPos2] = fp0;\n        fp0 = nextFP0;\n      }\n    }\n\n    fieldHash = newHashArray;\n    hashMask = newHashMask;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#rehash().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#rehash().mjava","sourceNew":"  private void rehash() {\n    final int newHashSize = (fieldHash.length*2);\n    assert newHashSize > fieldHash.length;\n\n    final DocFieldProcessorPerField newHashArray[] = new DocFieldProcessorPerField[newHashSize];\n\n    // Rehash\n    int newHashMask = newHashSize-1;\n    for(int j=0;j<fieldHash.length;j++) {\n      DocFieldProcessorPerField fp0 = fieldHash[j];\n      while(fp0 != null) {\n        final int hashPos2 = fp0.fieldInfo.name.hashCode() & newHashMask;\n        DocFieldProcessorPerField nextFP0 = fp0.next;\n        fp0.next = newHashArray[hashPos2];\n        newHashArray[hashPos2] = fp0;\n        fp0 = nextFP0;\n      }\n    }\n\n    fieldHash = newHashArray;\n    hashMask = newHashMask;\n  }\n\n","sourceOld":"  private void rehash() {\n    final int newHashSize = (fieldHash.length*2);\n    assert newHashSize > fieldHash.length;\n\n    final DocFieldProcessorPerField newHashArray[] = new DocFieldProcessorPerField[newHashSize];\n\n    // Rehash\n    int newHashMask = newHashSize-1;\n    for(int j=0;j<fieldHash.length;j++) {\n      DocFieldProcessorPerField fp0 = fieldHash[j];\n      while(fp0 != null) {\n        final int hashPos2 = fp0.fieldInfo.name.hashCode() & newHashMask;\n        DocFieldProcessorPerField nextFP0 = fp0.next;\n        fp0.next = newHashArray[hashPos2];\n        newHashArray[hashPos2] = fp0;\n        fp0 = nextFP0;\n      }\n    }\n\n    fieldHash = newHashArray;\n    hashMask = newHashMask;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c18273ea5b3974d2f30117f46f1ae416c28f727"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c18273ea5b3974d2f30117f46f1ae416c28f727","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}