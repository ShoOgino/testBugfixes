{"path":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#assertResponseContains(SolrClient,SolrParams,String).mjava","commits":[{"id":"7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81","date":1489617105,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#assertResponseContains(SolrClient,SolrParams,String).mjava","pathOld":"/dev/null","sourceNew":"  public void assertResponseContains(SolrClient server, SolrParams requestParams, String json) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if(p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    QueryRequest query = new QueryRequest( requestParams );\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(\"json\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    BufferedReader bufferedReader = new BufferedReader(reader);\n    String response = bufferedReader.readLine();\n    assertTrue(response.contains(json));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6106d879512729bf1e4840d612448c4180d110c8","date":1489651910,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#assertResponseContains(SolrClient,SolrParams,String).mjava","pathOld":"/dev/null","sourceNew":"  public void assertResponseContains(SolrClient server, SolrParams requestParams, String json) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if(p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    QueryRequest query = new QueryRequest( requestParams );\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(\"json\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    BufferedReader bufferedReader = new BufferedReader(reader);\n    String response = bufferedReader.readLine();\n    assertTrue(response.contains(json));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#assertResponseContains(SolrClient,SolrParams,String).mjava","pathOld":"/dev/null","sourceNew":"  public void assertResponseContains(SolrClient server, SolrParams requestParams, String json) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if(p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    QueryRequest query = new QueryRequest( requestParams );\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(\"json\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    BufferedReader bufferedReader = new BufferedReader(reader);\n    String response = bufferedReader.readLine();\n    assertTrue(response.contains(json));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#assertResponseContains(SolrClient,SolrParams,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#assertResponseContains(SolrClient,SolrParams,String).mjava","sourceNew":"  public void assertResponseContains(SolrClient server, SolrParams requestParams, String json) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n    modifiableSolrParams.set(\"indent\", modifiableSolrParams.get(\"indent\", \"off\"));\n    if(p != null) {\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    QueryRequest query = new QueryRequest( modifiableSolrParams );\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(\"json\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    BufferedReader bufferedReader = new BufferedReader(reader);\n    String response = bufferedReader.readLine();\n    assertTrue(response.contains(json));\n  }\n\n","sourceOld":"  public void assertResponseContains(SolrClient server, SolrParams requestParams, String json) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if(p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    QueryRequest query = new QueryRequest( requestParams );\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(\"json\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    BufferedReader bufferedReader = new BufferedReader(reader);\n    String response = bufferedReader.readLine();\n    assertTrue(response.contains(json));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#assertResponseContains(SolrClient,SolrParams,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#assertResponseContains(SolrClient,SolrParams,String).mjava","sourceNew":"  public void assertResponseContains(SolrClient server, SolrParams requestParams, String json) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n    modifiableSolrParams.set(\"indent\", modifiableSolrParams.get(\"indent\", \"off\"));\n    if(p != null) {\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    QueryRequest query = new QueryRequest( modifiableSolrParams );\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(\"json\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    BufferedReader bufferedReader = new BufferedReader(reader);\n    String response = bufferedReader.readLine();\n    assertTrue(response.contains(json));\n  }\n\n","sourceOld":"  public void assertResponseContains(SolrClient server, SolrParams requestParams, String json) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if(p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    QueryRequest query = new QueryRequest( requestParams );\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(\"json\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    BufferedReader bufferedReader = new BufferedReader(reader);\n    String response = bufferedReader.readLine();\n    assertTrue(response.contains(json));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#assertResponseContains(SolrClient,SolrParams,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#assertResponseContains(SolrClient,SolrParams,String).mjava","sourceNew":"  public void assertResponseContains(SolrClient server, SolrParams requestParams, String json) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n    modifiableSolrParams.set(\"indent\", modifiableSolrParams.get(\"indent\", \"off\"));\n    if(p != null) {\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    QueryRequest query = new QueryRequest( modifiableSolrParams );\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(\"json\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    BufferedReader bufferedReader = new BufferedReader(reader);\n    String response = bufferedReader.readLine();\n    assertTrue(response.contains(json));\n  }\n\n","sourceOld":"  public void assertResponseContains(SolrClient server, SolrParams requestParams, String json) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if(p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    QueryRequest query = new QueryRequest( requestParams );\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(\"json\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    BufferedReader bufferedReader = new BufferedReader(reader);\n    String response = bufferedReader.readLine();\n    assertTrue(response.contains(json));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c58a62203315881cce5089ef67ffee6b8a988a75","date":1544601986,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#assertResponseContains(SolrClient,SolrParams,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#assertResponseContains(SolrClient,SolrParams,String).mjava","sourceNew":"  public void assertResponseContains(SolrClient server, SolrParams requestParams, String json)\n      throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n    modifiableSolrParams.set(\"indent\", modifiableSolrParams.get(\"indent\", \"off\"));\n    if (p != null) {\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    QueryRequest query = new QueryRequest(modifiableSolrParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(\"json\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    BufferedReader bufferedReader = new BufferedReader(reader);\n    String response = bufferedReader.readLine();\n    assertTrue(response.contains(json));\n  }\n\n","sourceOld":"  public void assertResponseContains(SolrClient server, SolrParams requestParams, String json) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n    modifiableSolrParams.set(\"indent\", modifiableSolrParams.get(\"indent\", \"off\"));\n    if(p != null) {\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    QueryRequest query = new QueryRequest( modifiableSolrParams );\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(\"json\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    BufferedReader bufferedReader = new BufferedReader(reader);\n    String response = bufferedReader.readLine();\n    assertTrue(response.contains(json));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22191e72f6c40dec88c9b94f9bb55c7527772a47","date":1553715407,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#assertResponseContains(SolrClient,SolrParams,String).mjava","sourceNew":null,"sourceOld":"  public void assertResponseContains(SolrClient server, SolrParams requestParams, String json)\n      throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n    modifiableSolrParams.set(\"indent\", modifiableSolrParams.get(\"indent\", \"off\"));\n    if (p != null) {\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    QueryRequest query = new QueryRequest(modifiableSolrParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(\"json\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    BufferedReader bufferedReader = new BufferedReader(reader);\n    String response = bufferedReader.readLine();\n    assertTrue(response.contains(json));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["c58a62203315881cce5089ef67ffee6b8a988a75"],"a52341299179de5479672f7cf518bf4b173f34b3":["7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81","ac1e7fa558287a811ea07634d815ee7b1c541284"],"6106d879512729bf1e4840d612448c4180d110c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["ab68488225b6a6c357dda72ed11dedca9914a192","ac1e7fa558287a811ea07634d815ee7b1c541284"],"c58a62203315881cce5089ef67ffee6b8a988a75":["a52341299179de5479672f7cf518bf4b173f34b3"],"7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab68488225b6a6c357dda72ed11dedca9914a192":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6106d879512729bf1e4840d612448c4180d110c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22191e72f6c40dec88c9b94f9bb55c7527772a47"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81"]},"commit2Childs":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a52341299179de5479672f7cf518bf4b173f34b3":["c58a62203315881cce5089ef67ffee6b8a988a75"],"6106d879512729bf1e4840d612448c4180d110c8":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6106d879512729bf1e4840d612448c4180d110c8","7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81","ab68488225b6a6c357dda72ed11dedca9914a192"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"c58a62203315881cce5089ef67ffee6b8a988a75":["22191e72f6c40dec88c9b94f9bb55c7527772a47"],"7dbb74d09c5d364f22c2b7dfe3b0ab2f587cec81":["a52341299179de5479672f7cf518bf4b173f34b3","ac1e7fa558287a811ea07634d815ee7b1c541284"],"ab68488225b6a6c357dda72ed11dedca9914a192":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}