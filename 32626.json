{"path":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod1().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod1().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod1().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer());\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer());\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer());\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer());\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer());\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new StandardAnalyzer(TEST_VERSION_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod1().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer(random));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer(random));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer(random));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer(random));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer(random));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer());\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer());\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer());\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer());\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer());\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod1().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer(random));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer(random));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer(random));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer(random));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer(random));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer());\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer());\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer());\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer());\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer());\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod1().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer(random));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer(random));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer(random));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer(random));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer(random));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer());\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer());\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer());\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer());\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer());\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod1().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer(random));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer(random));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer(random));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer(random));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer(random));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer());\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer());\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer());\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer());\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer());\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStaticMethod1().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer(random));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer(random));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer(random));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer(random));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer(random));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer(random));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer(random));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer(random));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer(random));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer(random));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a3776dccca01c11e7046323cfad46a3b4a471233":["d572389229127c297dd1fa5ce4758e1cec41e799","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d572389229127c297dd1fa5ce4758e1cec41e799","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["d572389229127c297dd1fa5ce4758e1cec41e799","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a3776dccca01c11e7046323cfad46a3b4a471233","91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}