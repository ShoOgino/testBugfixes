{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleCopyJob#visit().mjava","commits":[{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleCopyJob#visit().mjava","pathOld":"/dev/null","sourceNew":"  /** Do an iota of work; returns true if all copying is done */\n  synchronized boolean visit() throws IOException {\n    if (exc != null) {\n      // We were externally cancelled:\n      return true;\n    }\n\n    if (current == null) {\n      if (iter.hasNext() == false) {\n        c.close();\n        return true;\n      }\n\n      Map.Entry<String,FileMetaData> next = iter.next();\n      FileMetaData metaData = next.getValue();\n      String fileName = next.getKey();\n      long len = c.in.readVLong();\n      if (len != metaData.length) {\n        throw new IllegalStateException(\"file \" + fileName + \": meta data says length=\" + metaData.length + \" but c.in says \" + len);\n      }\n      current = new CopyOneFile(c.in, dest, fileName, metaData, copyBuffer);\n    }\n\n    if (current.visit()) {\n      // This file is done copying\n      copiedFiles.put(current.name, current.tmpName);\n      totBytesCopied += current.getBytesCopied();\n      assert totBytesCopied <= totBytes: \"totBytesCopied=\" + totBytesCopied + \" totBytes=\" + totBytes;\n      current = null;\n      return false;\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimpleCopyJob#visit().mjava","pathOld":"/dev/null","sourceNew":"  /** Do an iota of work; returns true if all copying is done */\n  synchronized boolean visit() throws IOException {\n    if (exc != null) {\n      // We were externally cancelled:\n      return true;\n    }\n\n    if (current == null) {\n      if (iter.hasNext() == false) {\n        c.close();\n        return true;\n      }\n\n      Map.Entry<String,FileMetaData> next = iter.next();\n      FileMetaData metaData = next.getValue();\n      String fileName = next.getKey();\n      long len = c.in.readVLong();\n      if (len != metaData.length) {\n        throw new IllegalStateException(\"file \" + fileName + \": meta data says length=\" + metaData.length + \" but c.in says \" + len);\n      }\n      current = new CopyOneFile(c.in, dest, fileName, metaData, copyBuffer);\n    }\n\n    if (current.visit()) {\n      // This file is done copying\n      copiedFiles.put(current.name, current.tmpName);\n      totBytesCopied += current.getBytesCopied();\n      assert totBytesCopied <= totBytes: \"totBytesCopied=\" + totBytesCopied + \" totBytes=\" + totBytes;\n      current = null;\n      return false;\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["68496c2200e559fb7802f7575427b7a482659afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}