{"path":"contrib/analyzers/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer#testOtherLetterOffset().mjava","commits":[{"id":"40313e824c97bff922ec07766195564b4d2ebff8","date":1133737662,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer#testOtherLetterOffset().mjava","pathOld":"/dev/null","sourceNew":"    public void testOtherLetterOffset() throws IOException\n    {\n        String s = \"a天b\";\n        ChineseTokenizer tokenizer = new ChineseTokenizer(new StringReader(s));\n        Token token;\n\n        int correctStartOffset = 0;\n        int correctEndOffset = 1;\n        while ((token = tokenizer.next()) != null)\n        {\n            assertEquals(correctStartOffset, token.startOffset());\n            assertEquals(correctEndOffset, token.endOffset());\n            correctStartOffset++;\n            correctEndOffset++;\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer#testOtherLetterOffset().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer#testOtherLetterOffset().mjava","sourceNew":"    public void testOtherLetterOffset() throws IOException\n    {\n        String s = \"a天b\";\n        ChineseTokenizer tokenizer = new ChineseTokenizer(new StringReader(s));\n\n        int correctStartOffset = 0;\n        int correctEndOffset = 1;\n        final Token reusableToken = new Token();\n        for (Token nextToken = tokenizer.next(reusableToken); nextToken != null; nextToken = tokenizer.next(reusableToken)) {\n            assertEquals(correctStartOffset, nextToken.startOffset());\n            assertEquals(correctEndOffset, nextToken.endOffset());\n            correctStartOffset++;\n            correctEndOffset++;\n        }\n    }\n\n","sourceOld":"    public void testOtherLetterOffset() throws IOException\n    {\n        String s = \"a天b\";\n        ChineseTokenizer tokenizer = new ChineseTokenizer(new StringReader(s));\n        Token token;\n\n        int correctStartOffset = 0;\n        int correctEndOffset = 1;\n        while ((token = tokenizer.next()) != null)\n        {\n            assertEquals(correctStartOffset, token.startOffset());\n            assertEquals(correctEndOffset, token.endOffset());\n            correctStartOffset++;\n            correctEndOffset++;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer#testOtherLetterOffset().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer#testOtherLetterOffset().mjava","sourceNew":"    public void testOtherLetterOffset() throws IOException\n    {\n        String s = \"a天b\";\n        ChineseTokenizer tokenizer = new ChineseTokenizer(new StringReader(s));\n\n        int correctStartOffset = 0;\n        int correctEndOffset = 1;\n        final Token reusableToken = new Token();\n        for (Token nextToken = tokenizer.next(reusableToken); nextToken != null; nextToken = tokenizer.next(reusableToken)) {\n            assertEquals(correctStartOffset, nextToken.startOffset());\n            assertEquals(correctEndOffset, nextToken.endOffset());\n            correctStartOffset++;\n            correctEndOffset++;\n        }\n    }\n\n","sourceOld":"    public void testOtherLetterOffset() throws IOException\n    {\n        String s = \"a天b\";\n        ChineseTokenizer tokenizer = new ChineseTokenizer(new StringReader(s));\n\n        int correctStartOffset = 0;\n        int correctEndOffset = 1;\n        final Token reusableToken = new Token();\n        for (Token nextToken = tokenizer.next(reusableToken); nextToken != null; nextToken = tokenizer.next(reusableToken)) {\n            assertEquals(correctStartOffset, nextToken.startOffset());\n            assertEquals(correctEndOffset, nextToken.endOffset());\n            correctStartOffset++;\n            correctEndOffset++;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["40313e824c97bff922ec07766195564b4d2ebff8"],"40313e824c97bff922ec07766195564b4d2ebff8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"40313e824c97bff922ec07766195564b4d2ebff8":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["40313e824c97bff922ec07766195564b4d2ebff8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}