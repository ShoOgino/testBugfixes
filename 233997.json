{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ExternalHttpClientTest#testTimeoutWithExternalClient().mjava","commits":[{"id":"aef669943dc1a9d3350b34471b5a829f9191c569","date":1405430894,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ExternalHttpClientTest#testTimeoutWithExternalClient().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The internal client created by HttpSolrServer is a SystemDefaultHttpClient\n   * which takes care of merging request level params (such as timeout) with the\n   * configured defaults.\n   *\n   * However, if an external HttpClient is passed to HttpSolrServer,\n   * the logic in InternalHttpClient.executeMethod replaces the configured defaults\n   * by request level params if they exist. That is why we must test a setting such\n   * as timeout with an external client to assert that the defaults are indeed being\n   * used\n   *\n   * See SOLR-6245 for more details\n   */\n  @Test\n  public void testTimeoutWithExternalClient() throws Exception {\n    HttpClientBuilder builder = HttpClientBuilder.create();\n    RequestConfig config = RequestConfig.custom().setSocketTimeout(2000).build();\n    builder.setDefaultRequestConfig(config);\n    HttpSolrServer server = null;\n    try (CloseableHttpClient httpClient = builder.build()) {\n      server = new HttpSolrServer(jetty.getBaseUrl().toString() +\n          \"/slow/foo\", httpClient);\n\n      SolrQuery q = new SolrQuery(\"*:*\");\n      try {\n        QueryResponse response = server.query(q, SolrRequest.METHOD.GET);\n        fail(\"No exception thrown.\");\n      } catch (SolrServerException e) {\n        assertTrue(e.getMessage().contains(\"Timeout\"));\n      }\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ExternalHttpClientTest#testTimeoutWithExternalClient().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ExternalHttpClientTest#testTimeoutWithExternalClient().mjava","sourceNew":"  /**\n   * The internal client created by HttpSolrClient is a SystemDefaultHttpClient\n   * which takes care of merging request level params (such as timeout) with the\n   * configured defaults.\n   *\n   * However, if an external HttpClient is passed to HttpSolrClient,\n   * the logic in InternalHttpClient.executeMethod replaces the configured defaults\n   * by request level params if they exist. That is why we must test a setting such\n   * as timeout with an external client to assert that the defaults are indeed being\n   * used\n   *\n   * See SOLR-6245 for more details\n   */\n  @Test\n  public void testTimeoutWithExternalClient() throws Exception {\n    HttpClientBuilder builder = HttpClientBuilder.create();\n    RequestConfig config = RequestConfig.custom().setSocketTimeout(2000).build();\n    builder.setDefaultRequestConfig(config);\n    HttpSolrClient solrClient = null;\n    try (CloseableHttpClient httpClient = builder.build()) {\n      solrClient = new HttpSolrClient(jetty.getBaseUrl().toString() +\n          \"/slow/foo\", httpClient);\n\n      SolrQuery q = new SolrQuery(\"*:*\");\n      try {\n        QueryResponse response = solrClient.query(q, SolrRequest.METHOD.GET);\n        fail(\"No exception thrown.\");\n      } catch (SolrServerException e) {\n        assertTrue(e.getMessage().contains(\"Timeout\"));\n      }\n    } finally {\n      if (solrClient != null) {\n        solrClient.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The internal client created by HttpSolrServer is a SystemDefaultHttpClient\n   * which takes care of merging request level params (such as timeout) with the\n   * configured defaults.\n   *\n   * However, if an external HttpClient is passed to HttpSolrServer,\n   * the logic in InternalHttpClient.executeMethod replaces the configured defaults\n   * by request level params if they exist. That is why we must test a setting such\n   * as timeout with an external client to assert that the defaults are indeed being\n   * used\n   *\n   * See SOLR-6245 for more details\n   */\n  @Test\n  public void testTimeoutWithExternalClient() throws Exception {\n    HttpClientBuilder builder = HttpClientBuilder.create();\n    RequestConfig config = RequestConfig.custom().setSocketTimeout(2000).build();\n    builder.setDefaultRequestConfig(config);\n    HttpSolrServer server = null;\n    try (CloseableHttpClient httpClient = builder.build()) {\n      server = new HttpSolrServer(jetty.getBaseUrl().toString() +\n          \"/slow/foo\", httpClient);\n\n      SolrQuery q = new SolrQuery(\"*:*\");\n      try {\n        QueryResponse response = server.query(q, SolrRequest.METHOD.GET);\n        fail(\"No exception thrown.\");\n      } catch (SolrServerException e) {\n        assertTrue(e.getMessage().contains(\"Timeout\"));\n      }\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ExternalHttpClientTest#testTimeoutWithExternalClient().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ExternalHttpClientTest#testTimeoutWithExternalClient().mjava","sourceNew":"  /**\n   * The internal client created by HttpSolrClient is a SystemDefaultHttpClient\n   * which takes care of merging request level params (such as timeout) with the\n   * configured defaults.\n   *\n   * However, if an external HttpClient is passed to HttpSolrClient,\n   * the logic in InternalHttpClient.executeMethod replaces the configured defaults\n   * by request level params if they exist. That is why we must test a setting such\n   * as timeout with an external client to assert that the defaults are indeed being\n   * used\n   *\n   * See SOLR-6245 for more details\n   */\n  @Test\n  public void testTimeoutWithExternalClient() throws Exception {\n\n    HttpClientBuilder builder = HttpClientBuilder.create();\n    RequestConfig config = RequestConfig.custom().setSocketTimeout(2000).build();\n    builder.setDefaultRequestConfig(config);\n\n    try (CloseableHttpClient httpClient = builder.build();\n         HttpSolrClient solrClient = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/slow/foo\", httpClient)) {\n\n      SolrQuery q = new SolrQuery(\"*:*\");\n      try {\n        solrClient.query(q, SolrRequest.METHOD.GET);\n        fail(\"No exception thrown.\");\n      } catch (SolrServerException e) {\n        assertTrue(e.getMessage().contains(\"Timeout\"));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The internal client created by HttpSolrClient is a SystemDefaultHttpClient\n   * which takes care of merging request level params (such as timeout) with the\n   * configured defaults.\n   *\n   * However, if an external HttpClient is passed to HttpSolrClient,\n   * the logic in InternalHttpClient.executeMethod replaces the configured defaults\n   * by request level params if they exist. That is why we must test a setting such\n   * as timeout with an external client to assert that the defaults are indeed being\n   * used\n   *\n   * See SOLR-6245 for more details\n   */\n  @Test\n  public void testTimeoutWithExternalClient() throws Exception {\n    HttpClientBuilder builder = HttpClientBuilder.create();\n    RequestConfig config = RequestConfig.custom().setSocketTimeout(2000).build();\n    builder.setDefaultRequestConfig(config);\n    HttpSolrClient solrClient = null;\n    try (CloseableHttpClient httpClient = builder.build()) {\n      solrClient = new HttpSolrClient(jetty.getBaseUrl().toString() +\n          \"/slow/foo\", httpClient);\n\n      SolrQuery q = new SolrQuery(\"*:*\");\n      try {\n        QueryResponse response = solrClient.query(q, SolrRequest.METHOD.GET);\n        fail(\"No exception thrown.\");\n      } catch (SolrServerException e) {\n        assertTrue(e.getMessage().contains(\"Timeout\"));\n      }\n    } finally {\n      if (solrClient != null) {\n        solrClient.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":4,"author":"markrmiller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ExternalHttpClientTest#testTimeoutWithExternalClient().mjava","sourceNew":null,"sourceOld":"  /**\n   * The internal client created by HttpSolrClient is a SystemDefaultHttpClient\n   * which takes care of merging request level params (such as timeout) with the\n   * configured defaults.\n   *\n   * However, if an external HttpClient is passed to HttpSolrClient,\n   * the logic in InternalHttpClient.executeMethod replaces the configured defaults\n   * by request level params if they exist. That is why we must test a setting such\n   * as timeout with an external client to assert that the defaults are indeed being\n   * used\n   *\n   * See SOLR-6245 for more details\n   */\n  @Test\n  public void testTimeoutWithExternalClient() throws Exception {\n\n    HttpClientBuilder builder = HttpClientBuilder.create();\n    RequestConfig config = RequestConfig.custom().setSocketTimeout(2000).build();\n    builder.setDefaultRequestConfig(config);\n\n    try (CloseableHttpClient httpClient = builder.build();\n         HttpSolrClient solrClient = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/slow/foo\", httpClient)) {\n\n      SolrQuery q = new SolrQuery(\"*:*\");\n      try {\n        solrClient.query(q, SolrRequest.METHOD.GET);\n        fail(\"No exception thrown.\");\n      } catch (SolrServerException e) {\n        assertTrue(e.getMessage().contains(\"Timeout\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"859081acf00749f5dd462772c571d611d4a4d2db":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aef669943dc1a9d3350b34471b5a829f9191c569":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["aef669943dc1a9d3350b34471b5a829f9191c569"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["859081acf00749f5dd462772c571d611d4a4d2db"]},"commit2Childs":{"859081acf00749f5dd462772c571d611d4a4d2db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aef669943dc1a9d3350b34471b5a829f9191c569"],"aef669943dc1a9d3350b34471b5a829f9191c569":["bafca15d8e408346a67f4282ad1143b88023893b"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["859081acf00749f5dd462772c571d611d4a4d2db"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}