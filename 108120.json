{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#getDocsAndPositions(LeafReader,BytesRef,Bits).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#getDocsAndPositions(LeafReader,BytesRef,Bits).mjava","pathOld":"/dev/null","sourceNew":"  public DocsAndPositionsEnum getDocsAndPositions(LeafReader reader,\n      BytesRef bytes, Bits liveDocs) throws IOException {\n    Terms terms = reader.terms(fieldName);\n    if (terms != null) {\n      TermsEnum te = terms.iterator(null);\n      if (te.seekExact(bytes)) {\n        return te.docsAndPositions(liveDocs, null);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#getDocsAndPositions(LeafReader,BytesRef,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#getDocsAndPositions(LeafReader,BytesRef,Bits).mjava","sourceNew":"  public PostingsEnum getDocsAndPositions(LeafReader reader,\n      BytesRef bytes, Bits liveDocs) throws IOException {\n    Terms terms = reader.terms(fieldName);\n    if (terms != null) {\n      TermsEnum te = terms.iterator(null);\n      if (te.seekExact(bytes)) {\n        return te.postings(liveDocs, null, PostingsEnum.FLAG_ALL);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  public DocsAndPositionsEnum getDocsAndPositions(LeafReader reader,\n      BytesRef bytes, Bits liveDocs) throws IOException {\n    Terms terms = reader.terms(fieldName);\n    if (terms != null) {\n      TermsEnum te = terms.iterator(null);\n      if (te.seekExact(bytes)) {\n        return te.docsAndPositions(liveDocs, null);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#getDocsAndPositions(LeafReader,BytesRef,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#getDocsAndPositions(LeafReader,BytesRef,Bits).mjava","sourceNew":"  public PostingsEnum getDocsAndPositions(LeafReader reader,\n      BytesRef bytes, Bits liveDocs) throws IOException {\n    Terms terms = reader.terms(fieldName);\n    if (terms != null) {\n      TermsEnum te = terms.iterator(null);\n      if (te.seekExact(bytes)) {\n        return te.postings(liveDocs, null, PostingsEnum.ALL);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  public PostingsEnum getDocsAndPositions(LeafReader reader,\n      BytesRef bytes, Bits liveDocs) throws IOException {\n    Terms terms = reader.terms(fieldName);\n    if (terms != null) {\n      TermsEnum te = terms.iterator(null);\n      if (te.seekExact(bytes)) {\n        return te.postings(liveDocs, null, PostingsEnum.FLAG_ALL);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#getDocsAndPositions(LeafReader,BytesRef,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#getDocsAndPositions(LeafReader,BytesRef,Bits).mjava","sourceNew":"  public PostingsEnum getDocsAndPositions(LeafReader reader,\n      BytesRef bytes, Bits liveDocs) throws IOException {\n    Terms terms = reader.terms(fieldName);\n    if (terms != null) {\n      TermsEnum te = terms.iterator();\n      if (te.seekExact(bytes)) {\n        return te.postings(liveDocs, null, PostingsEnum.ALL);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  public PostingsEnum getDocsAndPositions(LeafReader reader,\n      BytesRef bytes, Bits liveDocs) throws IOException {\n    Terms terms = reader.terms(fieldName);\n    if (terms != null) {\n      TermsEnum te = terms.iterator(null);\n      if (te.seekExact(bytes)) {\n        return te.postings(liveDocs, null, PostingsEnum.ALL);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#getDocsAndPositions(LeafReader,BytesRef).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#getDocsAndPositions(LeafReader,BytesRef,Bits).mjava","sourceNew":"  public PostingsEnum getDocsAndPositions(LeafReader reader,\n      BytesRef bytes) throws IOException {\n    Terms terms = reader.terms(fieldName);\n    if (terms != null) {\n      TermsEnum te = terms.iterator();\n      if (te.seekExact(bytes)) {\n        return te.postings(null, PostingsEnum.ALL);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  public PostingsEnum getDocsAndPositions(LeafReader reader,\n      BytesRef bytes, Bits liveDocs) throws IOException {\n    Terms terms = reader.terms(fieldName);\n    if (terms != null) {\n      TermsEnum te = terms.iterator();\n      if (te.seekExact(bytes)) {\n        return te.postings(liveDocs, null, PostingsEnum.ALL);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["51f5280f31484820499077f41fcdfe92d527d9dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}