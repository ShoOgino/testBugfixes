{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = DirectoryReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"527cc14542789f47d75da436cb4287d1ab887e34","date":1391705548,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = getAssertNoDeletesDirectory(newDirectory());\n\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = DirectoryReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = DirectoryReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = getAssertNoDeletesDirectory(newDirectory());\n\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = DirectoryReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = getAssertNoDeletesDirectory(newDirectory());\n\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = DirectoryReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = getAssertNoDeletesDirectory(newDirectory());\n\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setMergePolicy(newLogMergePolicy()));\n    TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = DirectoryReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = getAssertNoDeletesDirectory(newDirectory());\n\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = DirectoryReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aee6e14aa025a22ed06b7e38e12bcc15ec251fbd","date":1417101195,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  @Slow\n  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = getAssertNoDeletesDirectory(newDirectory());\n\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setMergePolicy(newLogMergePolicy()));\n    TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = DirectoryReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = getAssertNoDeletesDirectory(newDirectory());\n\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setMergePolicy(newLogMergePolicy()));\n    TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = DirectoryReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  @Slow\n  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = getAssertNoDeletesDirectory(newDirectory());\n\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setMergePolicy(newLogMergePolicy()));\n    TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainwriter.getDocStats().numDocs);\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.getDocStats().numDocs);\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = DirectoryReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  @Slow\n  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = getAssertNoDeletesDirectory(newDirectory());\n\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setMergePolicy(newLogMergePolicy()));\n    TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = DirectoryReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  @Slow\n  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = TEST_NIGHTLY ? 2 : 1;\n    int numDirs = TEST_NIGHTLY ? 3 : 2;\n    \n    Directory mainDir = getAssertNoDeletesDirectory(newDirectory());\n\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setMergePolicy(newLogMergePolicy()));\n    TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainwriter.getDocStats().numDocs);\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.getDocStats().numDocs);\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = DirectoryReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  @Slow\n  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = getAssertNoDeletesDirectory(newDirectory());\n\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setMergePolicy(newLogMergePolicy()));\n    TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainwriter.getDocStats().numDocs);\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.getDocStats().numDocs);\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = DirectoryReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f354ba79a5a3e8491ec2953f14f365a02c058ac","date":1598293148,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  @Slow\n  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = TEST_NIGHTLY ? 2 : 1;\n    int numDirs = TEST_NIGHTLY ? 3 : 2;\n    \n    Directory mainDir = getAssertNoDeletesDirectory(newDirectory());\n\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setMergePolicy(newLogMergePolicy())\n                                                        .setMaxFullFlushMergeWaitMillis(0));\n    TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainwriter.getDocStats().numDocs);\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.getDocStats().numDocs);\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = DirectoryReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  @Slow\n  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = TEST_NIGHTLY ? 2 : 1;\n    int numDirs = TEST_NIGHTLY ? 3 : 2;\n    \n    Directory mainDir = getAssertNoDeletesDirectory(newDirectory());\n\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                        .setMergePolicy(newLogMergePolicy()));\n    TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainwriter.getDocStats().numDocs);\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.getDocStats().numDocs);\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = DirectoryReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"527cc14542789f47d75da436cb4287d1ab887e34":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["6613659748fe4411a7dcf85266e55db1f95f7315"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["aee6e14aa025a22ed06b7e38e12bcc15ec251fbd"],"6613659748fe4411a7dcf85266e55db1f95f7315":["527cc14542789f47d75da436cb4287d1ab887e34"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"aee6e14aa025a22ed06b7e38e12bcc15ec251fbd":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"]},"commit2Childs":{"527cc14542789f47d75da436cb4287d1ab887e34":["6613659748fe4411a7dcf85266e55db1f95f7315"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["aee6e14aa025a22ed06b7e38e12bcc15ec251fbd"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["527cc14542789f47d75da436cb4287d1ab887e34"],"6613659748fe4411a7dcf85266e55db1f95f7315":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"],"aee6e14aa025a22ed06b7e38e12bcc15ec251fbd":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}