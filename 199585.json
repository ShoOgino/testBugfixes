{"path":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","sourceNew":"  public void parseConfig() {\n    if (zkProps == null) {\n      zkProps = new SolrZkServerProps();\n      // set default data dir\n      // TODO: use something based on IP+port???  support ensemble all from same solr home?\n      zkProps.setDataDir(solrHome + '/' + \"zoo_data\");\n      zkProps.zkRun = zkRun;\n      zkProps.solrPort = solrPort;\n    }\n    \n    try {\n      props = SolrZkServerProps.getProperties(solrHome + '/' + \"zoo.cfg\");\n      SolrZkServerProps.injectServers(props, zkRun, zkHost);\n      zkProps.parseProperties(props);\n      if (zkProps.getClientPortAddress() == null) {\n        zkProps.setClientPort(Integer.parseInt(solrPort)+1000);\n      }\n    } catch (QuorumPeerConfig.ConfigException e) {\n      if (zkRun != null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (IOException e) {\n      if (zkRun != null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public void parseConfig() {\n    if (zkProps == null) {\n      zkProps = new SolrZkServerProps();\n      // set default data dir\n      // TODO: use something based on IP+port???  support ensemble all from same solr home?\n      zkProps.setDataDir(solrHome + '/' + \"zoo_data\");\n      zkProps.zkRun = zkRun;\n      zkProps.solrPort = solrPort;\n    }\n    \n    try {\n      props = SolrZkServerProps.getProperties(solrHome + '/' + \"zoo.cfg\");\n      SolrZkServerProps.injectServers(props, zkRun, zkHost);\n      zkProps.parseProperties(props);\n      if (zkProps.getClientPortAddress() == null) {\n        zkProps.setClientPort(Integer.parseInt(solrPort)+1000);\n      }\n    } catch (QuorumPeerConfig.ConfigException e) {\n      if (zkRun != null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (IOException e) {\n      if (zkRun != null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","sourceNew":"  public void parseConfig() {\n    if (zkProps == null) {\n      zkProps = new SolrZkServerProps();\n      // set default data dir\n      // TODO: use something based on IP+port???  support ensemble all from same solr home?\n      zkProps.setDataDir(solrHome + '/' + \"zoo_data\");\n      zkProps.zkRun = zkRun;\n      zkProps.solrPort = solrPort;\n    }\n    \n    try {\n      props = SolrZkServerProps.getProperties(solrHome + '/' + \"zoo.cfg\");\n      SolrZkServerProps.injectServers(props, zkRun, zkHost);\n      zkProps.parseProperties(props);\n      if (zkProps.getClientPortAddress() == null) {\n        zkProps.setClientPort(Integer.parseInt(solrPort)+1000);\n      }\n    } catch (QuorumPeerConfig.ConfigException e) {\n      if (zkRun != null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (IOException e) {\n      if (zkRun != null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public void parseConfig() {\n    if (zkProps == null) {\n      zkProps = new SolrZkServerProps();\n      // set default data dir\n      // TODO: use something based on IP+port???  support ensemble all from same solr home?\n      zkProps.setDataDir(solrHome + '/' + \"zoo_data\");\n      zkProps.zkRun = zkRun;\n      zkProps.solrPort = solrPort;\n    }\n    \n    try {\n      props = SolrZkServerProps.getProperties(solrHome + '/' + \"zoo.cfg\");\n      SolrZkServerProps.injectServers(props, zkRun, zkHost);\n      zkProps.parseProperties(props);\n      if (zkProps.getClientPortAddress() == null) {\n        zkProps.setClientPort(Integer.parseInt(solrPort)+1000);\n      }\n    } catch (QuorumPeerConfig.ConfigException e) {\n      if (zkRun != null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (IOException e) {\n      if (zkRun != null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","sourceNew":"  public void parseConfig() {\n    if (zkProps == null) {\n      zkProps = new SolrZkServerProps();\n      // set default data dir\n      // TODO: use something based on IP+port???  support ensemble all from same solr home?\n      zkProps.setDataDir(solrHome + '/' + \"zoo_data\");\n      zkProps.zkRun = zkRun;\n      zkProps.solrPort = solrPort;\n    }\n    \n    try {\n      props = SolrZkServerProps.getProperties(solrHome + '/' + \"zoo.cfg\");\n      SolrZkServerProps.injectServers(props, zkRun, zkHost);\n      zkProps.parseProperties(props);\n      if (zkProps.getClientPortAddress() == null) {\n        zkProps.setClientPort(Integer.parseInt(solrPort)+1000);\n      }\n    } catch (QuorumPeerConfig.ConfigException e) {\n      if (zkRun != null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (IOException e) {\n      if (zkRun != null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public void parseConfig() {\n    if (zkProps == null) {\n      zkProps = new SolrZkServerProps();\n      // set default data dir\n      // TODO: use something based on IP+port???  support ensemble all from same solr home?\n      zkProps.setDataDir(solrHome + '/' + \"zoo_data\");\n      zkProps.zkRun = zkRun;\n      zkProps.solrPort = solrPort;\n    }\n    \n    try {\n      props = SolrZkServerProps.getProperties(solrHome + '/' + \"zoo.cfg\");\n      SolrZkServerProps.injectServers(props, zkRun, zkHost);\n      zkProps.parseProperties(props);\n      if (zkProps.getClientPortAddress() == null) {\n        zkProps.setClientPort(Integer.parseInt(solrPort)+1000);\n      }\n    } catch (QuorumPeerConfig.ConfigException e) {\n      if (zkRun != null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (IOException e) {\n      if (zkRun != null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"794c33b9adf21c29b61694090a098440a8f7c363","date":1330138494,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","sourceNew":"  public void parseConfig() {\n    if (zkProps == null) {\n      zkProps = new SolrZkServerProps();\n      // set default data dir\n      // TODO: use something based on IP+port???  support ensemble all from same solr home?\n      zkProps.setDataDir(dataHome);\n      zkProps.zkRun = zkRun;\n      zkProps.solrPort = solrPort;\n    }\n    \n    try {\n      props = SolrZkServerProps.getProperties(confHome + '/' + \"zoo.cfg\");\n      SolrZkServerProps.injectServers(props, zkRun, zkHost);\n      zkProps.parseProperties(props);\n      if (zkProps.getClientPortAddress() == null) {\n        zkProps.setClientPort(Integer.parseInt(solrPort)+1000);\n      }\n    } catch (QuorumPeerConfig.ConfigException e) {\n      if (zkRun != null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (IOException e) {\n      if (zkRun != null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public void parseConfig() {\n    if (zkProps == null) {\n      zkProps = new SolrZkServerProps();\n      // set default data dir\n      // TODO: use something based on IP+port???  support ensemble all from same solr home?\n      zkProps.setDataDir(solrHome + '/' + \"zoo_data\");\n      zkProps.zkRun = zkRun;\n      zkProps.solrPort = solrPort;\n    }\n    \n    try {\n      props = SolrZkServerProps.getProperties(solrHome + '/' + \"zoo.cfg\");\n      SolrZkServerProps.injectServers(props, zkRun, zkHost);\n      zkProps.parseProperties(props);\n      if (zkProps.getClientPortAddress() == null) {\n        zkProps.setClientPort(Integer.parseInt(solrPort)+1000);\n      }\n    } catch (QuorumPeerConfig.ConfigException e) {\n      if (zkRun != null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (IOException e) {\n      if (zkRun != null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","sourceNew":"  public void parseConfig() {\n    if (zkProps == null) {\n      zkProps = new SolrZkServerProps();\n      // set default data dir\n      // TODO: use something based on IP+port???  support ensemble all from same solr home?\n      zkProps.setDataDir(dataHome);\n      zkProps.zkRun = zkRun;\n      zkProps.solrPort = solrPort;\n    }\n    \n    try {\n      props = SolrZkServerProps.getProperties(confHome + '/' + \"zoo.cfg\");\n      SolrZkServerProps.injectServers(props, zkRun, zkHost);\n      zkProps.parseProperties(props);\n      if (zkProps.getClientPortAddress() == null) {\n        zkProps.setClientPort(Integer.parseInt(solrPort)+1000);\n      }\n    } catch (QuorumPeerConfig.ConfigException e) {\n      if (zkRun != null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (IOException e) {\n      if (zkRun != null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public void parseConfig() {\n    if (zkProps == null) {\n      zkProps = new SolrZkServerProps();\n      // set default data dir\n      // TODO: use something based on IP+port???  support ensemble all from same solr home?\n      zkProps.setDataDir(solrHome + '/' + \"zoo_data\");\n      zkProps.zkRun = zkRun;\n      zkProps.solrPort = solrPort;\n    }\n    \n    try {\n      props = SolrZkServerProps.getProperties(solrHome + '/' + \"zoo.cfg\");\n      SolrZkServerProps.injectServers(props, zkRun, zkHost);\n      zkProps.parseProperties(props);\n      if (zkProps.getClientPortAddress() == null) {\n        zkProps.setClientPort(Integer.parseInt(solrPort)+1000);\n      }\n    } catch (QuorumPeerConfig.ConfigException e) {\n      if (zkRun != null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (IOException e) {\n      if (zkRun != null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","sourceNew":"  public void parseConfig() {\n    if (zkProps == null) {\n      zkProps = new SolrZkServerProps();\n      // set default data dir\n      // TODO: use something based on IP+port???  support ensemble all from same solr home?\n      zkProps.setDataDir(dataHome);\n      zkProps.zkRun = zkRun;\n      zkProps.solrPort = solrPort;\n    }\n    \n    try {\n      props = SolrZkServerProps.getProperties(confHome + '/' + \"zoo.cfg\");\n      SolrZkServerProps.injectServers(props, zkRun, zkHost);\n      zkProps.parseProperties(props);\n      if (zkProps.getClientPortAddress() == null) {\n        zkProps.setClientPort(Integer.parseInt(solrPort)+1000);\n      }\n    } catch (QuorumPeerConfig.ConfigException | IOException e) {\n      if (zkRun != null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public void parseConfig() {\n    if (zkProps == null) {\n      zkProps = new SolrZkServerProps();\n      // set default data dir\n      // TODO: use something based on IP+port???  support ensemble all from same solr home?\n      zkProps.setDataDir(dataHome);\n      zkProps.zkRun = zkRun;\n      zkProps.solrPort = solrPort;\n    }\n    \n    try {\n      props = SolrZkServerProps.getProperties(confHome + '/' + \"zoo.cfg\");\n      SolrZkServerProps.injectServers(props, zkRun, zkHost);\n      zkProps.parseProperties(props);\n      if (zkProps.getClientPortAddress() == null) {\n        zkProps.setClientPort(Integer.parseInt(solrPort)+1000);\n      }\n    } catch (QuorumPeerConfig.ConfigException e) {\n      if (zkRun != null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (IOException e) {\n      if (zkRun != null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","sourceNew":"  public void parseConfig() {\n    if (zkProps == null) {\n      zkProps = new SolrZkServerProps();\n      // set default data dir\n      // TODO: use something based on IP+port???  support ensemble all from same solr home?\n      zkProps.setDataDir(dataHome);\n      zkProps.zkRun = zkRun;\n      zkProps.solrPort = Integer.toString(solrPort);\n    }\n    \n    try {\n      props = SolrZkServerProps.getProperties(confHome + '/' + \"zoo.cfg\");\n      SolrZkServerProps.injectServers(props, zkRun, zkHost);\n      zkProps.parseProperties(props);\n      if (zkProps.getClientPortAddress() == null) {\n        zkProps.setClientPort(solrPort + 1000);\n      }\n    } catch (QuorumPeerConfig.ConfigException | IOException e) {\n      if (zkRun != null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public void parseConfig() {\n    if (zkProps == null) {\n      zkProps = new SolrZkServerProps();\n      // set default data dir\n      // TODO: use something based on IP+port???  support ensemble all from same solr home?\n      zkProps.setDataDir(dataHome);\n      zkProps.zkRun = zkRun;\n      zkProps.solrPort = solrPort;\n    }\n    \n    try {\n      props = SolrZkServerProps.getProperties(confHome + '/' + \"zoo.cfg\");\n      SolrZkServerProps.injectServers(props, zkRun, zkHost);\n      zkProps.parseProperties(props);\n      if (zkProps.getClientPortAddress() == null) {\n        zkProps.setClientPort(Integer.parseInt(solrPort)+1000);\n      }\n    } catch (QuorumPeerConfig.ConfigException | IOException e) {\n      if (zkRun != null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","sourceNew":"  public void parseConfig() {\n    if (zkProps == null) {\n      zkProps = new SolrZkServerProps();\n      // set default data dir\n      // TODO: use something based on IP+port???  support ensemble all from same solr home?\n      zkProps.setDataDir(dataHome);\n      zkProps.zkRun = zkRun;\n      zkProps.solrPort = Integer.toString(solrPort);\n    }\n    \n    try {\n      props = SolrZkServerProps.getProperties(confHome + '/' + \"zoo.cfg\");\n      SolrZkServerProps.injectServers(props, zkRun, zkHost);\n      zkProps.parseProperties(props);\n      if (zkProps.getClientPortAddress() == null) {\n        zkProps.setClientPort(solrPort + 1000);\n      }\n    } catch (QuorumPeerConfig.ConfigException | IOException e) {\n      if (zkRun != null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public void parseConfig() {\n    if (zkProps == null) {\n      zkProps = new SolrZkServerProps();\n      // set default data dir\n      // TODO: use something based on IP+port???  support ensemble all from same solr home?\n      zkProps.setDataDir(dataHome);\n      zkProps.zkRun = zkRun;\n      zkProps.solrPort = solrPort;\n    }\n    \n    try {\n      props = SolrZkServerProps.getProperties(confHome + '/' + \"zoo.cfg\");\n      SolrZkServerProps.injectServers(props, zkRun, zkHost);\n      zkProps.parseProperties(props);\n      if (zkProps.getClientPortAddress() == null) {\n        zkProps.setClientPort(Integer.parseInt(solrPort)+1000);\n      }\n    } catch (QuorumPeerConfig.ConfigException | IOException e) {\n      if (zkRun != null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"977fed459b666e6dfc1165dd9b565479bb0cbe12","date":1493648801,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","sourceNew":"  public void parseConfig() {\n    if (zkProps == null) {\n      zkProps = new SolrZkServerProps();\n      // set default data dir\n      // TODO: use something based on IP+port???  support ensemble all from same solr home?\n      zkProps.setDataDir(dataHome);\n      zkProps.zkRun = zkRun;\n      zkProps.solrPort = Integer.toString(solrPort);\n    }\n    \n    try {\n      props = SolrZkServerProps.getProperties(confHome + '/' + \"zoo.cfg\");\n      SolrZkServerProps.injectServers(props, zkRun, zkHost);\n      if (props.getProperty(\"clientPort\") == null) {\n        props.setProperty(\"clientPort\", Integer.toString(solrPort + 1000));\n      }\n      zkProps.parseProperties(props);\n    } catch (QuorumPeerConfig.ConfigException | IOException e) {\n      if (zkRun != null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public void parseConfig() {\n    if (zkProps == null) {\n      zkProps = new SolrZkServerProps();\n      // set default data dir\n      // TODO: use something based on IP+port???  support ensemble all from same solr home?\n      zkProps.setDataDir(dataHome);\n      zkProps.zkRun = zkRun;\n      zkProps.solrPort = Integer.toString(solrPort);\n    }\n    \n    try {\n      props = SolrZkServerProps.getProperties(confHome + '/' + \"zoo.cfg\");\n      SolrZkServerProps.injectServers(props, zkRun, zkHost);\n      zkProps.parseProperties(props);\n      if (zkProps.getClientPortAddress() == null) {\n        zkProps.setClientPort(solrPort + 1000);\n      }\n    } catch (QuorumPeerConfig.ConfigException | IOException e) {\n      if (zkRun != null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServer#parseConfig().mjava","sourceNew":"  public void parseConfig() {\n    if (zkProps == null) {\n      zkProps = new SolrZkServerProps();\n      // set default data dir\n      // TODO: use something based on IP+port???  support ensemble all from same solr home?\n      zkProps.setDataDir(dataHome);\n      zkProps.zkRun = zkRun;\n      zkProps.solrPort = Integer.toString(solrPort);\n    }\n    \n    try {\n      props = SolrZkServerProps.getProperties(confHome + '/' + \"zoo.cfg\");\n      SolrZkServerProps.injectServers(props, zkRun, zkHost);\n      if (props.getProperty(\"clientPort\") == null) {\n        props.setProperty(\"clientPort\", Integer.toString(solrPort + 1000));\n      }\n      zkProps.parseProperties(props);\n    } catch (QuorumPeerConfig.ConfigException | IOException e) {\n      if (zkRun != null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public void parseConfig() {\n    if (zkProps == null) {\n      zkProps = new SolrZkServerProps();\n      // set default data dir\n      // TODO: use something based on IP+port???  support ensemble all from same solr home?\n      zkProps.setDataDir(dataHome);\n      zkProps.zkRun = zkRun;\n      zkProps.solrPort = Integer.toString(solrPort);\n    }\n    \n    try {\n      props = SolrZkServerProps.getProperties(confHome + '/' + \"zoo.cfg\");\n      SolrZkServerProps.injectServers(props, zkRun, zkHost);\n      zkProps.parseProperties(props);\n      if (zkProps.getClientPortAddress() == null) {\n        zkProps.setClientPort(solrPort + 1000);\n      }\n    } catch (QuorumPeerConfig.ConfigException | IOException e) {\n      if (zkRun != null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["794c33b9adf21c29b61694090a098440a8f7c363"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["e15199583d3635cb940942caed05132dd6c4c7c6","977fed459b666e6dfc1165dd9b565479bb0cbe12"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c6e1dc1bb4254226c8d7151b596cc1be40671751","e15199583d3635cb940942caed05132dd6c4c7c6"],"794c33b9adf21c29b61694090a098440a8f7c363":["c26f00b574427b55127e869b935845554afde1fa"],"977fed459b666e6dfc1165dd9b565479bb0cbe12":["e15199583d3635cb940942caed05132dd6c4c7c6"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["c26f00b574427b55127e869b935845554afde1fa","794c33b9adf21c29b61694090a098440a8f7c363"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["977fed459b666e6dfc1165dd9b565479bb0cbe12"],"e15199583d3635cb940942caed05132dd6c4c7c6":["c6e1dc1bb4254226c8d7151b596cc1be40671751"]},"commit2Childs":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e15199583d3635cb940942caed05132dd6c4c7c6"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"794c33b9adf21c29b61694090a098440a8f7c363":["c6e1dc1bb4254226c8d7151b596cc1be40671751","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"977fed459b666e6dfc1165dd9b565479bb0cbe12":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["794c33b9adf21c29b61694090a098440a8f7c363","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e15199583d3635cb940942caed05132dd6c4c7c6":["e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","977fed459b666e6dfc1165dd9b565479bb0cbe12"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}