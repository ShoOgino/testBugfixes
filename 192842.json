{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#readHeader(IndexInput).mjava","commits":[{"id":"ede45a461a2dcb573505ed9b6a5182dfebd3688f","date":1353338494,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#readHeader(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  //nocommit javadoc\n  public static Header readHeader(IndexInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_CURRENT);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n    return new Header(format, valueCount, bitsPerValue, version);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527426d2324e11fb56b1d594bc79b7559fb8dbf6","date":1359607178,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#readHeader(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#readHeader(IndexInput).mjava","sourceNew":"  /**\n   * Expert: reads only the metadata from a stream. This is useful to later\n   * restore a stream or open a direct reader via \n   * {@link #getReaderNoHeader(DataInput, Header)}\n   * or {@link #getDirectReaderNoHeader(IndexInput, Header)}.\n   * @param    in the stream to read data\n   * @return   packed integer metadata.\n   * @throws   IOException If there is a low-level I/O error\n   * @see #getReaderNoHeader(DataInput, Header)\n   * @see #getDirectReaderNoHeader(IndexInput, Header)\n   */\n  public static Header readHeader(DataInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_CURRENT);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n    return new Header(format, valueCount, bitsPerValue, version);\n  }\n\n","sourceOld":"  //nocommit javadoc\n  public static Header readHeader(IndexInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_CURRENT);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n    return new Header(format, valueCount, bitsPerValue, version);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"527426d2324e11fb56b1d594bc79b7559fb8dbf6":["ede45a461a2dcb573505ed9b6a5182dfebd3688f"],"ede45a461a2dcb573505ed9b6a5182dfebd3688f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"527426d2324e11fb56b1d594bc79b7559fb8dbf6":[],"ede45a461a2dcb573505ed9b6a5182dfebd3688f":["527426d2324e11fb56b1d594bc79b7559fb8dbf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ede45a461a2dcb573505ed9b6a5182dfebd3688f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["527426d2324e11fb56b1d594bc79b7559fb8dbf6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}