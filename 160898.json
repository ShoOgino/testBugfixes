{"path":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testAllEqual().mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testAllEqual().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#testAllEqual().mjava","sourceNew":"  public void testAllEqual() throws Exception {\n    int numValues = atLeast(10000);\n    long value = randomValue(false);\n    long[] values = new long[numValues];\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: use same value=\" + value);\n    }\n    Arrays.fill(values, value);\n\n    verifyLongs(values, null);\n  }\n\n","sourceOld":"  public void testAllEqual() throws Exception {\n    int numValues = atLeast(10000);\n    long value = randomValue(false);\n    long[] values = new long[numValues];\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: use same value=\" + value);\n    }\n    Arrays.fill(values, value);\n\n    verifyLongs(values, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testAllEqual().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testAllEqual().mjava","sourceNew":"  public void testAllEqual() throws Exception {\n    int numValues = atLeast(10000);\n    long value = randomValue();\n    long[] values = new long[numValues];\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: use same value=\" + value);\n    }\n    Arrays.fill(values, value);\n\n    verifyLongs(values, null);\n  }\n\n","sourceOld":"  public void testAllEqual() throws Exception {\n    int numValues = atLeast(10000);\n    long value = randomValue(false);\n    long[] values = new long[numValues];\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: use same value=\" + value);\n    }\n    Arrays.fill(values, value);\n\n    verifyLongs(values, null);\n  }\n\n","bugFix":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testAllEqual().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testAllEqual().mjava","sourceNew":"  public void testAllEqual() throws Exception {\n    int numValues = atLeast(10000);\n    long value = randomValue();\n    long[] values = new long[numValues];\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: use same value=\" + value);\n    }\n    Arrays.fill(values, value);\n\n    verifyLongs(values, null);\n  }\n\n","sourceOld":"  public void testAllEqual() throws Exception {\n    int numValues = atLeast(10000);\n    long value = randomValue(false);\n    long[] values = new long[numValues];\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: use same value=\" + value);\n    }\n    Arrays.fill(values, value);\n\n    verifyLongs(values, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testAllEqual().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testAllEqual().mjava","sourceNew":"  public void testAllEqual() throws Exception {\n    int numValues = atLeast(10000);\n    long value = randomValue();\n    long[] values = new long[numValues];\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: use same value=\" + value);\n    }\n    Arrays.fill(values, value);\n\n    verifyLongs(values, null);\n  }\n\n","sourceOld":"  public void testAllEqual() throws Exception {\n    int numValues = atLeast(10000);\n    long value = randomValue(false);\n    long[] values = new long[numValues];\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: use same value=\" + value);\n    }\n    Arrays.fill(values, value);\n\n    verifyLongs(values, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testAllEqual().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testAllEqual().mjava","sourceNew":"  public void testAllEqual() throws Exception {\n    int numValues = atLeast(1000);\n    long value = randomValue();\n    long[] values = new long[numValues];\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: use same value=\" + value);\n    }\n    Arrays.fill(values, value);\n\n    verifyLongs(values, null);\n  }\n\n","sourceOld":"  public void testAllEqual() throws Exception {\n    int numValues = atLeast(10000);\n    long value = randomValue();\n    long[] values = new long[numValues];\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: use same value=\" + value);\n    }\n    Arrays.fill(values, value);\n\n    verifyLongs(values, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","c422e924212367b334b4938f1fd3e44438e88c40"],"c422e924212367b334b4938f1fd3e44438e88c40":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}