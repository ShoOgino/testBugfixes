{"path":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","commits":[{"id":"cdd2d639986db5a5a6f3703a8b4136a6473a5f81","date":1376372957,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"/dev/null","sourceNew":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<String, List<Integer>>();\n    CloudSolrServer client = null;\n    String shard_fld = \"shard_s\";\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = OverseerCollectionProcessor.asMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES,numShards,\n          DocRouter.ROUTE_FIELD, shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(collectionName);\n\n    HttpSolrServer collectionClient = new HttpSolrServer(url);\n\n    // poll for a second - it can take a moment before we are ready to serve\n    waitForNon403or404or503(collectionClient);\n\n\n    collectionClient = new HttpSolrServer(url);\n\n\n    // lets try and use the solrj client to index a couple documents\n\n    collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n\n    collectionClient.commit();\n\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    //TODO debug the following case\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4c7856260bc28f285ae7bfefa99b28db4dca6daf","6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"/dev/null","sourceNew":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<String, List<Integer>>();\n    CloudSolrServer client = null;\n    String shard_fld = \"shard_s\";\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = OverseerCollectionProcessor.asMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES,numShards,\n          DocRouter.ROUTE_FIELD, shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(collectionName);\n\n    HttpSolrServer collectionClient = new HttpSolrServer(url);\n\n    // poll for a second - it can take a moment before we are ready to serve\n    waitForNon403or404or503(collectionClient);\n\n\n    collectionClient = new HttpSolrServer(url);\n\n\n    // lets try and use the solrj client to index a couple documents\n\n    collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n\n    collectionClient.commit();\n\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    //TODO debug the following case\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e187a371a1d09379bb452c2c13a7b9221525dff8","date":1379517004,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<String, List<Integer>>();\n    CloudSolrServer client = null;\n    String shard_fld = \"shard_s\";\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES,numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(collectionName);\n\n    HttpSolrServer collectionClient = new HttpSolrServer(url);\n\n    // poll for a second - it can take a moment before we are ready to serve\n    waitForNon403or404or503(collectionClient);\n\n\n    collectionClient = new HttpSolrServer(url);\n\n\n    // lets try and use the solrj client to index a couple documents\n\n    collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n\n    collectionClient.commit();\n\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    //TODO debug the following case\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n\n  }\n\n","sourceOld":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<String, List<Integer>>();\n    CloudSolrServer client = null;\n    String shard_fld = \"shard_s\";\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = OverseerCollectionProcessor.asMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES,numShards,\n          DocRouter.ROUTE_FIELD, shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(collectionName);\n\n    HttpSolrServer collectionClient = new HttpSolrServer(url);\n\n    // poll for a second - it can take a moment before we are ready to serve\n    waitForNon403or404or503(collectionClient);\n\n\n    collectionClient = new HttpSolrServer(url);\n\n\n    // lets try and use the solrj client to index a couple documents\n\n    collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n\n    collectionClient.commit();\n\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    //TODO debug the following case\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1816753738ff1f27f11b38030e83c0ded050b7a4","date":1380106089,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<String, List<Integer>>();\n    CloudSolrServer client = null;\n    String shard_fld = \"shard_s\";\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES,numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrServer().getZkStateReader().getClusterState(), collectionName);\n\n    HttpSolrServer collectionClient = new HttpSolrServer(url);\n\n    // poll for a second - it can take a moment before we are ready to serve\n    waitForNon403or404or503(collectionClient);\n\n\n    collectionClient = new HttpSolrServer(url);\n\n\n    // lets try and use the solrj client to index a couple documents\n\n    collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n\n    collectionClient.commit();\n\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    //TODO debug the following case\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n\n  }\n\n","sourceOld":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<String, List<Integer>>();\n    CloudSolrServer client = null;\n    String shard_fld = \"shard_s\";\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES,numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(collectionName);\n\n    HttpSolrServer collectionClient = new HttpSolrServer(url);\n\n    // poll for a second - it can take a moment before we are ready to serve\n    waitForNon403or404or503(collectionClient);\n\n\n    collectionClient = new HttpSolrServer(url);\n\n\n    // lets try and use the solrj client to index a couple documents\n\n    collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n\n    collectionClient.commit();\n\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    //TODO debug the following case\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eb8aa4753ae13ba02f5681be1d66f4ff2210c693","date":1380639661,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<String, List<Integer>>();\n    CloudSolrServer client = null;\n    String shard_fld = \"shard_s\";\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES,numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrServer().getZkStateReader().getClusterState(), collectionName);\n\n    HttpSolrServer collectionClient = new HttpSolrServer(url);\n\n    // poll for a second - it can take a moment before we are ready to serve\n    waitForNon403or404or503(collectionClient);\n\n\n    collectionClient = new HttpSolrServer(url);\n\n\n    // lets try and use the solrj client to index a couple documents\n\n    collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n\n    collectionClient.commit();\n\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    //TODO debug the following case\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    collectionClient.deleteByQuery(\"*:*\");\n    collectionClient.commit();\n\n    collectionClient.add (getDoc( id,100,shard_fld, \"b!doc1\"));\n    collectionClient.commit();\n    assertEquals(1, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b!\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<String, List<Integer>>();\n    CloudSolrServer client = null;\n    String shard_fld = \"shard_s\";\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES,numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrServer().getZkStateReader().getClusterState(), collectionName);\n\n    HttpSolrServer collectionClient = new HttpSolrServer(url);\n\n    // poll for a second - it can take a moment before we are ready to serve\n    waitForNon403or404or503(collectionClient);\n\n\n    collectionClient = new HttpSolrServer(url);\n\n\n    // lets try and use the solrj client to index a couple documents\n\n    collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n\n    collectionClient.commit();\n\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    //TODO debug the following case\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    CloudSolrServer client = null;\n    String shard_fld = \"shard_s\";\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES,numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrServer().getZkStateReader().getClusterState(), collectionName);\n\n    HttpSolrServer collectionClient = new HttpSolrServer(url);\n\n    // poll for a second - it can take a moment before we are ready to serve\n    waitForNon403or404or503(collectionClient);\n\n\n    collectionClient = new HttpSolrServer(url);\n\n\n    // lets try and use the solrj client to index a couple documents\n\n    collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n\n    collectionClient.commit();\n\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    //TODO debug the following case\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    collectionClient.deleteByQuery(\"*:*\");\n    collectionClient.commit();\n\n    collectionClient.add (getDoc( id,100,shard_fld, \"b!doc1\"));\n    collectionClient.commit();\n    assertEquals(1, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b!\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<String, List<Integer>>();\n    CloudSolrServer client = null;\n    String shard_fld = \"shard_s\";\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES,numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrServer().getZkStateReader().getClusterState(), collectionName);\n\n    HttpSolrServer collectionClient = new HttpSolrServer(url);\n\n    // poll for a second - it can take a moment before we are ready to serve\n    waitForNon403or404or503(collectionClient);\n\n\n    collectionClient = new HttpSolrServer(url);\n\n\n    // lets try and use the solrj client to index a couple documents\n\n    collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n\n    collectionClient.commit();\n\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    //TODO debug the following case\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    collectionClient.deleteByQuery(\"*:*\");\n    collectionClient.commit();\n\n    collectionClient.add (getDoc( id,100,shard_fld, \"b!doc1\"));\n    collectionClient.commit();\n    assertEquals(1, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b!\")).getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c7856260bc28f285ae7bfefa99b28db4dca6daf","date":1395253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    CloudSolrServer client = null;\n    String shard_fld = \"shard_s\";\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES,numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrServer().getZkStateReader().getClusterState(), collectionName);\n\n    HttpSolrServer collectionClient = new HttpSolrServer(url);\n\n    // poll for a second - it can take a moment before we are ready to serve\n    waitForNon403or404or503(collectionClient);\n    collectionClient.shutdown();\n\n\n    collectionClient = new HttpSolrServer(url);\n\n\n    // lets try and use the solrj client to index a couple documents\n\n    collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n\n    collectionClient.commit();\n\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    //TODO debug the following case\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    collectionClient.deleteByQuery(\"*:*\");\n    collectionClient.commit();\n\n    collectionClient.add (getDoc( id,100,shard_fld, \"b!doc1\"));\n    collectionClient.commit();\n    assertEquals(1, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b!\")).getResults().getNumFound());\n    collectionClient.shutdown();\n  }\n\n","sourceOld":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    CloudSolrServer client = null;\n    String shard_fld = \"shard_s\";\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES,numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrServer().getZkStateReader().getClusterState(), collectionName);\n\n    HttpSolrServer collectionClient = new HttpSolrServer(url);\n\n    // poll for a second - it can take a moment before we are ready to serve\n    waitForNon403or404or503(collectionClient);\n\n\n    collectionClient = new HttpSolrServer(url);\n\n\n    // lets try and use the solrj client to index a couple documents\n\n    collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n\n    collectionClient.commit();\n\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    //TODO debug the following case\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    collectionClient.deleteByQuery(\"*:*\");\n    collectionClient.commit();\n\n    collectionClient.add (getDoc( id,100,shard_fld, \"b!doc1\"));\n    collectionClient.commit();\n    assertEquals(1, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b!\")).getResults().getNumFound());\n\n  }\n\n","bugFix":["cdd2d639986db5a5a6f3703a8b4136a6473a5f81"],"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    CloudSolrClient client = null;\n    String shard_fld = \"shard_s\";\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES,numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    HttpSolrClient collectionClient = new HttpSolrClient(url);\n\n    // poll for a second - it can take a moment before we are ready to serve\n    waitForNon403or404or503(collectionClient);\n    collectionClient.shutdown();\n\n\n    collectionClient = new HttpSolrClient(url);\n\n\n    // lets try and use the solrj client to index a couple documents\n\n    collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n\n    collectionClient.commit();\n\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    //TODO debug the following case\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    collectionClient.deleteByQuery(\"*:*\");\n    collectionClient.commit();\n\n    collectionClient.add (getDoc( id,100,shard_fld, \"b!doc1\"));\n    collectionClient.commit();\n    assertEquals(1, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b!\")).getResults().getNumFound());\n    collectionClient.shutdown();\n  }\n\n","sourceOld":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    CloudSolrServer client = null;\n    String shard_fld = \"shard_s\";\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES,numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrServer().getZkStateReader().getClusterState(), collectionName);\n\n    HttpSolrServer collectionClient = new HttpSolrServer(url);\n\n    // poll for a second - it can take a moment before we are ready to serve\n    waitForNon403or404or503(collectionClient);\n    collectionClient.shutdown();\n\n\n    collectionClient = new HttpSolrServer(url);\n\n\n    // lets try and use the solrj client to index a couple documents\n\n    collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n\n    collectionClient.commit();\n\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    //TODO debug the following case\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    collectionClient.deleteByQuery(\"*:*\");\n    collectionClient.commit();\n\n    collectionClient.add (getDoc( id,100,shard_fld, \"b!doc1\"));\n    collectionClient.commit();\n    assertEquals(1, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b!\")).getResults().getNumFound());\n    collectionClient.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    CloudSolrClient client = null;\n    String shard_fld = \"shard_s\";\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES,numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    HttpSolrClient collectionClient = new HttpSolrClient(url);\n    try {\n      // poll for a second - it can take a moment before we are ready to serve\n      waitForNon403or404or503(collectionClient);\n      collectionClient.shutdown();\n    } finally {\n      collectionClient.shutdown();\n    }\n\n\n    collectionClient = new HttpSolrClient(url);\n    try {\n      // lets try and use the solrj client to index a couple documents\n  \n      collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n          \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n          \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n          \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n  \n      collectionClient.commit();\n  \n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      //TODO debug the following case\n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n  \n      collectionClient.deleteByQuery(\"*:*\");\n      collectionClient.commit();\n  \n      collectionClient.add (getDoc( id,100,shard_fld, \"b!doc1\"));\n      collectionClient.commit();\n      assertEquals(1, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b!\")).getResults().getNumFound());\n    } finally {\n      collectionClient.shutdown();\n    }\n  }\n\n","sourceOld":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    CloudSolrClient client = null;\n    String shard_fld = \"shard_s\";\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES,numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    HttpSolrClient collectionClient = new HttpSolrClient(url);\n\n    // poll for a second - it can take a moment before we are ready to serve\n    waitForNon403or404or503(collectionClient);\n    collectionClient.shutdown();\n\n\n    collectionClient = new HttpSolrClient(url);\n\n\n    // lets try and use the solrj client to index a couple documents\n\n    collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n        \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n        \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n\n    collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n        \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n\n    collectionClient.commit();\n\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    //TODO debug the following case\n    assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    collectionClient.deleteByQuery(\"*:*\");\n    collectionClient.commit();\n\n    collectionClient.add (getDoc( id,100,shard_fld, \"b!doc1\"));\n    collectionClient.commit();\n    assertEquals(1, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b!\")).getResults().getNumFound());\n    collectionClient.shutdown();\n  }\n\n","bugFix":["eb8aa4753ae13ba02f5681be1d66f4ff2210c693","cdd2d639986db5a5a6f3703a8b4136a6473a5f81","4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    String shard_fld = \"shard_s\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES,numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {\n      // poll for a second - it can take a moment before we are ready to serve\n      waitForNon403or404or503(collectionClient);\n    }\n\n\n    try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {\n      // lets try and use the solrj client to index a couple documents\n  \n      collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n          \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n          \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n          \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n  \n      collectionClient.commit();\n  \n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      //TODO debug the following case\n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n  \n      collectionClient.deleteByQuery(\"*:*\");\n      collectionClient.commit();\n  \n      collectionClient.add (getDoc( id,100,shard_fld, \"b!doc1\"));\n      collectionClient.commit();\n      assertEquals(1, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b!\")).getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    CloudSolrClient client = null;\n    String shard_fld = \"shard_s\";\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES,numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    HttpSolrClient collectionClient = new HttpSolrClient(url);\n    try {\n      // poll for a second - it can take a moment before we are ready to serve\n      waitForNon403or404or503(collectionClient);\n      collectionClient.shutdown();\n    } finally {\n      collectionClient.shutdown();\n    }\n\n\n    collectionClient = new HttpSolrClient(url);\n    try {\n      // lets try and use the solrj client to index a couple documents\n  \n      collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n          \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n          \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n          \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n  \n      collectionClient.commit();\n  \n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      //TODO debug the following case\n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n  \n      collectionClient.deleteByQuery(\"*:*\");\n      collectionClient.commit();\n  \n      collectionClient.add (getDoc( id,100,shard_fld, \"b!doc1\"));\n      collectionClient.commit();\n      assertEquals(1, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b!\")).getResults().getNumFound());\n    } finally {\n      collectionClient.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    String shard_fld = \"shard_s\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES, numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {\n      // poll for a second - it can take a moment before we are ready to serve\n      waitForNon403or404or503(collectionClient);\n    }\n\n\n    try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {\n      // lets try and use the solrj client to index a couple documents\n  \n      collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n          \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n          \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n          \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n  \n      collectionClient.commit();\n  \n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      //TODO debug the following case\n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n  \n      collectionClient.deleteByQuery(\"*:*\");\n      collectionClient.commit();\n  \n      collectionClient.add (getDoc( id,100,shard_fld, \"b!doc1\"));\n      collectionClient.commit();\n      assertEquals(1, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b!\")).getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    String shard_fld = \"shard_s\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES,numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {\n      // poll for a second - it can take a moment before we are ready to serve\n      waitForNon403or404or503(collectionClient);\n    }\n\n\n    try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {\n      // lets try and use the solrj client to index a couple documents\n  \n      collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n          \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n          \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n          \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n  \n      collectionClient.commit();\n  \n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      //TODO debug the following case\n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n  \n      collectionClient.deleteByQuery(\"*:*\");\n      collectionClient.commit();\n  \n      collectionClient.add (getDoc( id,100,shard_fld, \"b!doc1\"));\n      collectionClient.commit();\n      assertEquals(1, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b!\")).getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    String shard_fld = \"shard_s\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES, numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    try (HttpSolrClient collectionClient = getHttpSolrClient(url)) {\n      // poll for a second - it can take a moment before we are ready to serve\n      waitForNon403or404or503(collectionClient);\n    }\n\n\n    try (HttpSolrClient collectionClient = getHttpSolrClient(url)) {\n      // lets try and use the solrj client to index a couple documents\n  \n      collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n          \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n          \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n          \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n  \n      collectionClient.commit();\n  \n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      //TODO debug the following case\n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n  \n      collectionClient.deleteByQuery(\"*:*\");\n      collectionClient.commit();\n  \n      collectionClient.add (getDoc( id,100,shard_fld, \"b!doc1\"));\n      collectionClient.commit();\n      assertEquals(1, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b!\")).getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    String shard_fld = \"shard_s\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES, numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {\n      // poll for a second - it can take a moment before we are ready to serve\n      waitForNon403or404or503(collectionClient);\n    }\n\n\n    try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {\n      // lets try and use the solrj client to index a couple documents\n  \n      collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n          \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n          \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n          \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n  \n      collectionClient.commit();\n  \n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      //TODO debug the following case\n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n  \n      collectionClient.deleteByQuery(\"*:*\");\n      collectionClient.commit();\n  \n      collectionClient.add (getDoc( id,100,shard_fld, \"b!doc1\"));\n      collectionClient.commit();\n      assertEquals(1, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b!\")).getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    String shard_fld = \"shard_s\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES, numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    try (HttpSolrClient collectionClient = getHttpSolrClient(url)) {\n      // poll for a second - it can take a moment before we are ready to serve\n      waitForNon403or404or503(collectionClient);\n    }\n\n\n    try (HttpSolrClient collectionClient = getHttpSolrClient(url)) {\n      // lets try and use the solrj client to index a couple documents\n  \n      collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n          \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n          \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n          \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n  \n      collectionClient.commit();\n  \n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      //TODO debug the following case\n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n  \n      collectionClient.deleteByQuery(\"*:*\");\n      collectionClient.commit();\n  \n      collectionClient.add (getDoc( id,100,shard_fld, \"b!doc1\"));\n      collectionClient.commit();\n      assertEquals(1, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b!\")).getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    String shard_fld = \"shard_s\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES, numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {\n      // poll for a second - it can take a moment before we are ready to serve\n      waitForNon403or404or503(collectionClient);\n    }\n\n\n    try (HttpSolrClient collectionClient = new HttpSolrClient(url)) {\n      // lets try and use the solrj client to index a couple documents\n  \n      collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n          \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n          \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n          \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n  \n      collectionClient.commit();\n  \n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      //TODO debug the following case\n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n  \n      collectionClient.deleteByQuery(\"*:*\");\n      collectionClient.commit();\n  \n      collectionClient.add (getDoc( id,100,shard_fld, \"b!doc1\"));\n      collectionClient.commit();\n      assertEquals(1, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b!\")).getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  @Test\n  public void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collectionName);\n\n    assertEquals(3, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n\n    cluster.getSolrClient().deleteByQuery(collectionName, \"*:*\");\n    cluster.getSolrClient().commit(collectionName);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"100\", shard_fld, \"c!doc1\"));\n    cluster.getSolrClient().commit(collectionName);\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c!\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    String shard_fld = \"shard_s\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES, numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    try (HttpSolrClient collectionClient = getHttpSolrClient(url)) {\n      // poll for a second - it can take a moment before we are ready to serve\n      waitForNon403or404or503(collectionClient);\n    }\n\n\n    try (HttpSolrClient collectionClient = getHttpSolrClient(url)) {\n      // lets try and use the solrj client to index a couple documents\n  \n      collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n          \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n          \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n          \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n  \n      collectionClient.commit();\n  \n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      //TODO debug the following case\n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n  \n      collectionClient.deleteByQuery(\"*:*\");\n      collectionClient.commit();\n  \n      collectionClient.add (getDoc( id,100,shard_fld, \"b!doc1\"));\n      collectionClient.commit();\n      assertEquals(1, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b!\")).getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  @Test\n  public void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collectionName);\n\n    assertEquals(3, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n\n    cluster.getSolrClient().deleteByQuery(collectionName, \"*:*\");\n    cluster.getSolrClient().commit(collectionName);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"100\", shard_fld, \"c!doc1\"));\n    cluster.getSolrClient().commit(collectionName);\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c!\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  private void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    String shard_fld = \"shard_s\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, replicationFactor,\n          MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES, numShards,\n          \"router.field\", shard_fld);\n\n      createCollection(collectionInfos, collectionName,props,client);\n    }\n\n    List<Integer> list = collectionInfos.get(collectionName);\n    checkForCollection(collectionName, list, null);\n\n\n    String url = getUrlFromZk(getCommonCloudSolrClient().getZkStateReader().getClusterState(), collectionName);\n\n    try (HttpSolrClient collectionClient = getHttpSolrClient(url)) {\n      // poll for a second - it can take a moment before we are ready to serve\n      waitForNon403or404or503(collectionClient);\n    }\n\n\n    try (HttpSolrClient collectionClient = getHttpSolrClient(url)) {\n      // lets try and use the solrj client to index a couple documents\n  \n      collectionClient.add(getDoc(id, 6, i1, -600, tlong, 600, t1,\n          \"humpty dumpy sat on a wall\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 7, i1, -600, tlong, 600, t1,\n          \"humpty dumpy3 sat on a walls\", shard_fld,\"a\"));\n  \n      collectionClient.add(getDoc(id, 8, i1, -600, tlong, 600, t1,\n          \"humpty dumpy2 sat on a walled\", shard_fld,\"a\"));\n  \n      collectionClient.commit();\n  \n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      //TODO debug the following case\n      assertEquals(3, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n  \n      collectionClient.deleteByQuery(\"*:*\");\n      collectionClient.commit();\n  \n      collectionClient.add (getDoc( id,100,shard_fld, \"b!doc1\"));\n      collectionClient.commit();\n      assertEquals(1, collectionClient.query(new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b!\")).getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  @Test\n  public void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collectionName);\n\n    assertEquals(3, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n\n    cluster.getSolrClient().deleteByQuery(collectionName, \"*:*\");\n    cluster.getSolrClient().commit(collectionName);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"100\", shard_fld, \"c!doc1\"));\n    cluster.getSolrClient().commit(collectionName);\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c!\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  public void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collectionName);\n\n    assertEquals(3, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n\n    cluster.getSolrClient().deleteByQuery(collectionName, \"*:*\");\n    cluster.getSolrClient().commit(collectionName);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"100\", shard_fld, \"c!doc1\"));\n    cluster.getSolrClient().commit(collectionName);\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c!\")).getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  @Test\n  public void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collectionName);\n\n    assertEquals(3, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n\n    cluster.getSolrClient().deleteByQuery(collectionName, \"*:*\");\n    cluster.getSolrClient().commit(collectionName);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"100\", shard_fld, \"c!doc1\"));\n    cluster.getSolrClient().commit(collectionName);\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c!\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  public void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collectionName);\n\n    assertEquals(3, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n\n    cluster.getSolrClient().deleteByQuery(collectionName, \"*:*\");\n    cluster.getSolrClient().commit(collectionName);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"100\", shard_fld, \"c!doc1\"));\n    cluster.getSolrClient().commit(collectionName);\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c!\")).getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["eb8aa4753ae13ba02f5681be1d66f4ff2210c693"],"1816753738ff1f27f11b38030e83c0ded050b7a4":["e187a371a1d09379bb452c2c13a7b9221525dff8"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a4efd3fffdd7acd625bb88e455c8097e17f75735","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cdd2d639986db5a5a6f3703a8b4136a6473a5f81"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"bafca15d8e408346a67f4282ad1143b88023893b":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e187a371a1d09379bb452c2c13a7b9221525dff8":["cdd2d639986db5a5a6f3703a8b4136a6473a5f81"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["b693a83132c9e45afcd564fd65a25b60ed80388b","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"eb8aa4753ae13ba02f5681be1d66f4ff2210c693":["1816753738ff1f27f11b38030e83c0ded050b7a4"],"cdd2d639986db5a5a6f3703a8b4136a6473a5f81":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["b94236357aaa22b76c10629851fe4e376e0cea82","59dce44d6a0b58c171de1d47ad8c0a75831f94fd","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"1816753738ff1f27f11b38030e83c0ded050b7a4":["eb8aa4753ae13ba02f5681be1d66f4ff2210c693"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bafca15d8e408346a67f4282ad1143b88023893b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cdd2d639986db5a5a6f3703a8b4136a6473a5f81"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"e187a371a1d09379bb452c2c13a7b9221525dff8":["1816753738ff1f27f11b38030e83c0ded050b7a4"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"eb8aa4753ae13ba02f5681be1d66f4ff2210c693":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cdd2d639986db5a5a6f3703a8b4136a6473a5f81":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e187a371a1d09379bb452c2c13a7b9221525dff8"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}