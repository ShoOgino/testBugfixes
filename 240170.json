{"path":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","sourceNew":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n      SolrParams p = req.getParams();\n      if (defaults != null) {\n        p = new DefaultSolrParams(p,defaults);\n      }\n      if (appends != null) {\n        p = new AppendedSolrParams(p,appends);\n      }\n      if (invariants != null) {\n        p = new DefaultSolrParams(invariants,p);\n      }\n      req.setParams(p);\n  }\n\n","sourceOld":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n      SolrParams p = req.getParams();\n      if (defaults != null) {\n        p = new DefaultSolrParams(p,defaults);\n      }\n      if (appends != null) {\n        p = new AppendedSolrParams(p,appends);\n      }\n      if (invariants != null) {\n        p = new DefaultSolrParams(invariants,p);\n      }\n      req.setParams(p);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","sourceNew":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n      SolrParams p = req.getParams();\n      if (defaults != null) {\n        p = new DefaultSolrParams(p,defaults);\n      }\n      if (appends != null) {\n        p = new AppendedSolrParams(p,appends);\n      }\n      if (invariants != null) {\n        p = new DefaultSolrParams(invariants,p);\n      }\n      req.setParams(p);\n  }\n\n","sourceOld":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n      SolrParams p = req.getParams();\n      if (defaults != null) {\n        p = new DefaultSolrParams(p,defaults);\n      }\n      if (appends != null) {\n        p = new AppendedSolrParams(p,appends);\n      }\n      if (invariants != null) {\n        p = new DefaultSolrParams(invariants,p);\n      }\n      req.setParams(p);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","sourceNew":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n      SolrParams p = req.getParams();\n      if (defaults != null) {\n        p = new DefaultSolrParams(p,defaults);\n      }\n      if (appends != null) {\n        p = new AppendedSolrParams(p,appends);\n      }\n      if (invariants != null) {\n        p = new DefaultSolrParams(invariants,p);\n      }\n      req.setParams(p);\n  }\n\n","sourceOld":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n      SolrParams p = req.getParams();\n      if (defaults != null) {\n        p = new DefaultSolrParams(p,defaults);\n      }\n      if (appends != null) {\n        p = new AppendedSolrParams(p,appends);\n      }\n      if (invariants != null) {\n        p = new DefaultSolrParams(invariants,p);\n      }\n      req.setParams(p);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dcbe407b62ce0c91dc171a4695a9f442c46ce14","date":1323729111,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","sourceNew":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n      SolrParams p = req.getParams();\n      p = SolrParams.wrapDefaults(p, defaults);\n      p = SolrParams.wrapAppended(p, appends);\n      p = SolrParams.wrapDefaults(invariants, p);\n\n      req.setParams(p);\n  }\n\n","sourceOld":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n      SolrParams p = req.getParams();\n      if (defaults != null) {\n        p = new DefaultSolrParams(p,defaults);\n      }\n      if (appends != null) {\n        p = new AppendedSolrParams(p,appends);\n      }\n      if (invariants != null) {\n        p = new DefaultSolrParams(invariants,p);\n      }\n      req.setParams(p);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceb6a6c707ada1df8bde804e25c98668e699a18","date":1323800602,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","sourceNew":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n      SolrParams p = req.getParams();\n      p = SolrParams.wrapDefaults(p, defaults);\n      p = SolrParams.wrapAppended(p, appends);\n      p = SolrParams.wrapDefaults(invariants, p);\n\n      req.setParams(p);\n  }\n\n","sourceOld":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n      SolrParams p = req.getParams();\n      if (defaults != null) {\n        p = new DefaultSolrParams(p,defaults);\n      }\n      if (appends != null) {\n        p = new AppendedSolrParams(p,appends);\n      }\n      if (invariants != null) {\n        p = new DefaultSolrParams(invariants,p);\n      }\n      req.setParams(p);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f7392e322590b1c5c54beda8e0dc4dac5a0dc70","date":1409367206,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","sourceNew":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n      String paramSetNames = req.getParams().get(ParamSet.TYPE);\n      if(paramSetNames !=null){\n        for (String name : StrUtils.splitSmart(paramSetNames,',')) {\n          ParamSet paramSet = req.getCore().getSolrConfig().getParamSets().get(name);\n          if(paramSet!=null){\n            if(paramSet.defaults != null) defaults = SolrParams.wrapDefaults(SolrParams.toSolrParams(paramSet.defaults) , defaults);\n            if(paramSet.invariants != null) invariants = SolrParams.wrapDefaults(invariants, SolrParams.toSolrParams(paramSet.invariants));\n            if(paramSet.appends != null)  appends = SolrParams.wrapAppended(appends, SolrParams.toSolrParams(paramSet.appends));\n          }\n        }\n      }\n\n      SolrParams p = req.getParams();\n      p = SolrParams.wrapDefaults(p, defaults);\n      p = SolrParams.wrapAppended(p, appends);\n      p = SolrParams.wrapDefaults(invariants, p);\n\n      req.setParams(p);\n  }\n\n","sourceOld":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n      SolrParams p = req.getParams();\n      p = SolrParams.wrapDefaults(p, defaults);\n      p = SolrParams.wrapAppended(p, appends);\n      p = SolrParams.wrapDefaults(invariants, p);\n\n      req.setParams(p);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb537081ae8ce706dd40a122f57a9e7b8a112be8","date":1411065946,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","sourceNew":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n      String useParams = req.getParams().get(\"useParam\");\n      if(useParams !=null){\n        for (String name : StrUtils.splitSmart(useParams,',')) {\n          InitParams initParams = req.getCore().getSolrConfig().getInitParams().get(name);\n          if(initParams !=null){\n            if(initParams.defaults != null) defaults = SolrParams.wrapDefaults(SolrParams.toSolrParams(initParams.defaults) , defaults);\n            if(initParams.invariants != null) invariants = SolrParams.wrapDefaults(invariants, SolrParams.toSolrParams(initParams.invariants));\n            if(initParams.appends != null)  appends = SolrParams.wrapAppended(appends, SolrParams.toSolrParams(initParams.appends));\n          }\n        }\n      }\n\n      SolrParams p = req.getParams();\n      p = SolrParams.wrapDefaults(p, defaults);\n      p = SolrParams.wrapAppended(p, appends);\n      p = SolrParams.wrapDefaults(invariants, p);\n\n      req.setParams(p);\n  }\n\n","sourceOld":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n      String paramSetNames = req.getParams().get(ParamSet.TYPE);\n      if(paramSetNames !=null){\n        for (String name : StrUtils.splitSmart(paramSetNames,',')) {\n          ParamSet paramSet = req.getCore().getSolrConfig().getParamSets().get(name);\n          if(paramSet!=null){\n            if(paramSet.defaults != null) defaults = SolrParams.wrapDefaults(SolrParams.toSolrParams(paramSet.defaults) , defaults);\n            if(paramSet.invariants != null) invariants = SolrParams.wrapDefaults(invariants, SolrParams.toSolrParams(paramSet.invariants));\n            if(paramSet.appends != null)  appends = SolrParams.wrapAppended(appends, SolrParams.toSolrParams(paramSet.appends));\n          }\n        }\n      }\n\n      SolrParams p = req.getParams();\n      p = SolrParams.wrapDefaults(p, defaults);\n      p = SolrParams.wrapAppended(p, appends);\n      p = SolrParams.wrapDefaults(invariants, p);\n\n      req.setParams(p);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2d72c3e6563e08675f940d4c74139309c5e3db2","date":1419411068,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","sourceNew":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n    List<String> paramNames =null;\n    String useParams = req.getParams().get(RequestParams.USEPARAM);\n    if(useParams == null) useParams = (String) req.getContext().get(RequestParams.USEPARAM);\n    if(useParams !=null) paramNames = StrUtils.splitSmart(useParams, ',');\n    if(paramNames != null){\n        for (String name : paramNames) {\n          SolrParams requestParams = req.getCore().getSolrConfig().getRequestParams().getParams(name);\n          if(requestParams !=null){\n            defaults = SolrParams.wrapDefaults(requestParams , defaults);\n          }\n        }\n      }\n\n      SolrParams p = req.getParams();\n      p = SolrParams.wrapDefaults(p, defaults);\n      p = SolrParams.wrapAppended(p, appends);\n      p = SolrParams.wrapDefaults(invariants, p);\n\n      req.setParams(p);\n  }\n\n","sourceOld":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n      String useParams = req.getParams().get(\"useParam\");\n      if(useParams !=null){\n        for (String name : StrUtils.splitSmart(useParams,',')) {\n          InitParams initParams = req.getCore().getSolrConfig().getInitParams().get(name);\n          if(initParams !=null){\n            if(initParams.defaults != null) defaults = SolrParams.wrapDefaults(SolrParams.toSolrParams(initParams.defaults) , defaults);\n            if(initParams.invariants != null) invariants = SolrParams.wrapDefaults(invariants, SolrParams.toSolrParams(initParams.invariants));\n            if(initParams.appends != null)  appends = SolrParams.wrapAppended(appends, SolrParams.toSolrParams(initParams.appends));\n          }\n        }\n      }\n\n      SolrParams p = req.getParams();\n      p = SolrParams.wrapDefaults(p, defaults);\n      p = SolrParams.wrapAppended(p, appends);\n      p = SolrParams.wrapDefaults(invariants, p);\n\n      req.setParams(p);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2d15e642ab6ee7c6c468ac4c314ec0ed077df2b","date":1421335218,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","sourceNew":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n    List<String> paramNames =null;\n    String useParams = req.getParams().get(RequestParams.USEPARAM);\n    if(useParams!=null && !useParams.isEmpty()){\n      // now that we have expanded the request macro useParams with the actual values\n      // it makes no sense to keep it visible now on.\n      // distrib request sends all params to the nodes down the line and\n      // if it sends the useParams to other nodes , they will expand them as well.\n      // which is not desirable. At the same time, because we send the useParams\n      // value as an empty string to other nodes we get the desired benefit of\n      // overriding the useParams specified in the requestHandler directly\n      req.setParams(SolrParams.wrapDefaults(maskUseParams,req.getParams()));\n    }\n    if(useParams == null) useParams = (String) req.getContext().get(RequestParams.USEPARAM);\n    if(useParams !=null && !useParams.isEmpty()) paramNames = StrUtils.splitSmart(useParams, ',');\n    if(paramNames != null){\n        for (String name : paramNames) {\n          SolrParams requestParams = req.getCore().getSolrConfig().getRequestParams().getParams(name);\n          if(requestParams !=null){\n            defaults = SolrParams.wrapDefaults(requestParams , defaults);\n          }\n        }\n      }\n\n      SolrParams p = req.getParams();\n      p = SolrParams.wrapDefaults(p, defaults);\n      p = SolrParams.wrapAppended(p, appends);\n      p = SolrParams.wrapDefaults(invariants, p);\n\n      req.setParams(p);\n  }\n\n","sourceOld":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n    List<String> paramNames =null;\n    String useParams = req.getParams().get(RequestParams.USEPARAM);\n    if(useParams == null) useParams = (String) req.getContext().get(RequestParams.USEPARAM);\n    if(useParams !=null) paramNames = StrUtils.splitSmart(useParams, ',');\n    if(paramNames != null){\n        for (String name : paramNames) {\n          SolrParams requestParams = req.getCore().getSolrConfig().getRequestParams().getParams(name);\n          if(requestParams !=null){\n            defaults = SolrParams.wrapDefaults(requestParams , defaults);\n          }\n        }\n      }\n\n      SolrParams p = req.getParams();\n      p = SolrParams.wrapDefaults(p, defaults);\n      p = SolrParams.wrapAppended(p, appends);\n      p = SolrParams.wrapDefaults(invariants, p);\n\n      req.setParams(p);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f88a361ac44a2756ed61b960b6609b91ab23df99","date":1426442309,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","sourceNew":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n    List<String> paramNames = null;\n    String useParams = req.getParams().get(RequestParams.USEPARAM);\n    if (useParams != null && !useParams.isEmpty()) {\n      // now that we have expanded the request macro useParams with the actual values\n      // it makes no sense to keep it visible now on.\n      // distrib request sends all params to the nodes down the line and\n      // if it sends the useParams to other nodes , they will expand them as well.\n      // which is not desirable. At the same time, because we send the useParams\n      // value as an empty string to other nodes we get the desired benefit of\n      // overriding the useParams specified in the requestHandler directly\n      req.setParams(SolrParams.wrapDefaults(maskUseParams, req.getParams()));\n    }\n    if (useParams == null) useParams = (String) req.getContext().get(RequestParams.USEPARAM);\n    if (useParams != null && !useParams.isEmpty()) paramNames = StrUtils.splitSmart(useParams, ',');\n    if (paramNames != null) {\n      for (String name : paramNames) {\n        SolrParams requestParams = req.getCore().getSolrConfig().getRequestParams().getParams(name);\n        if (requestParams != null) {\n          defaults = SolrParams.wrapDefaults(requestParams, defaults);\n        }\n      }\n    }\n\n    SolrParams p = req.getParams();\n    p = SolrParams.wrapDefaults(p, defaults);\n    p = SolrParams.wrapAppended(p, appends);\n    p = SolrParams.wrapDefaults(invariants, p);\n\n    req.setParams(p);\n  }\n\n","sourceOld":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n    List<String> paramNames =null;\n    String useParams = req.getParams().get(RequestParams.USEPARAM);\n    if(useParams!=null && !useParams.isEmpty()){\n      // now that we have expanded the request macro useParams with the actual values\n      // it makes no sense to keep it visible now on.\n      // distrib request sends all params to the nodes down the line and\n      // if it sends the useParams to other nodes , they will expand them as well.\n      // which is not desirable. At the same time, because we send the useParams\n      // value as an empty string to other nodes we get the desired benefit of\n      // overriding the useParams specified in the requestHandler directly\n      req.setParams(SolrParams.wrapDefaults(maskUseParams,req.getParams()));\n    }\n    if(useParams == null) useParams = (String) req.getContext().get(RequestParams.USEPARAM);\n    if(useParams !=null && !useParams.isEmpty()) paramNames = StrUtils.splitSmart(useParams, ',');\n    if(paramNames != null){\n        for (String name : paramNames) {\n          SolrParams requestParams = req.getCore().getSolrConfig().getRequestParams().getParams(name);\n          if(requestParams !=null){\n            defaults = SolrParams.wrapDefaults(requestParams , defaults);\n          }\n        }\n      }\n\n      SolrParams p = req.getParams();\n      p = SolrParams.wrapDefaults(p, defaults);\n      p = SolrParams.wrapAppended(p, appends);\n      p = SolrParams.wrapDefaults(invariants, p);\n\n      req.setParams(p);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","sourceNew":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults, SolrParams appends, SolrParams invariants) {\n    setDefaults(null, req, defaults, appends, invariants);\n  }\n\n","sourceOld":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n    List<String> paramNames = null;\n    String useParams = req.getParams().get(RequestParams.USEPARAM);\n    if (useParams != null && !useParams.isEmpty()) {\n      // now that we have expanded the request macro useParams with the actual values\n      // it makes no sense to keep it visible now on.\n      // distrib request sends all params to the nodes down the line and\n      // if it sends the useParams to other nodes , they will expand them as well.\n      // which is not desirable. At the same time, because we send the useParams\n      // value as an empty string to other nodes we get the desired benefit of\n      // overriding the useParams specified in the requestHandler directly\n      req.setParams(SolrParams.wrapDefaults(maskUseParams, req.getParams()));\n    }\n    if (useParams == null) useParams = (String) req.getContext().get(RequestParams.USEPARAM);\n    if (useParams != null && !useParams.isEmpty()) paramNames = StrUtils.splitSmart(useParams, ',');\n    if (paramNames != null) {\n      for (String name : paramNames) {\n        SolrParams requestParams = req.getCore().getSolrConfig().getRequestParams().getParams(name);\n        if (requestParams != null) {\n          defaults = SolrParams.wrapDefaults(requestParams, defaults);\n        }\n      }\n    }\n\n    SolrParams p = req.getParams();\n    p = SolrParams.wrapDefaults(p, defaults);\n    p = SolrParams.wrapAppended(p, appends);\n    p = SolrParams.wrapDefaults(invariants, p);\n\n    req.setParams(p);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams).mjava","sourceNew":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults, SolrParams appends, SolrParams invariants) {\n    setDefaults(null, req, defaults, appends, invariants);\n  }\n\n","sourceOld":"  /**\n   * Set default-ish params on a SolrQueryRequest.\n   *\n   * RequestHandlers can use this method to ensure their defaults and\n   * overrides are visible to other components such as the response writer\n   *\n   * @param req The request whose params we are interested i\n   * @param defaults values to be used if no values are specified in the request params\n   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.\n   * @param invariants values which will be used instead of any request, or default values, regardless of context.\n   */\n  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,\n                                 SolrParams appends, SolrParams invariants) {\n\n    List<String> paramNames =null;\n    String useParams = req.getParams().get(RequestParams.USEPARAM);\n    if(useParams!=null && !useParams.isEmpty()){\n      // now that we have expanded the request macro useParams with the actual values\n      // it makes no sense to keep it visible now on.\n      // distrib request sends all params to the nodes down the line and\n      // if it sends the useParams to other nodes , they will expand them as well.\n      // which is not desirable. At the same time, because we send the useParams\n      // value as an empty string to other nodes we get the desired benefit of\n      // overriding the useParams specified in the requestHandler directly\n      req.setParams(SolrParams.wrapDefaults(maskUseParams,req.getParams()));\n    }\n    if(useParams == null) useParams = (String) req.getContext().get(RequestParams.USEPARAM);\n    if(useParams !=null && !useParams.isEmpty()) paramNames = StrUtils.splitSmart(useParams, ',');\n    if(paramNames != null){\n        for (String name : paramNames) {\n          SolrParams requestParams = req.getCore().getSolrConfig().getRequestParams().getParams(name);\n          if(requestParams !=null){\n            defaults = SolrParams.wrapDefaults(requestParams , defaults);\n          }\n        }\n      }\n\n      SolrParams p = req.getParams();\n      p = SolrParams.wrapDefaults(p, defaults);\n      p = SolrParams.wrapAppended(p, appends);\n      p = SolrParams.wrapDefaults(invariants, p);\n\n      req.setParams(p);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb537081ae8ce706dd40a122f57a9e7b8a112be8":["0f7392e322590b1c5c54beda8e0dc4dac5a0dc70"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":["c26f00b574427b55127e869b935845554afde1fa","0dcbe407b62ce0c91dc171a4695a9f442c46ce14"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"e2d15e642ab6ee7c6c468ac4c314ec0ed077df2b":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e2d15e642ab6ee7c6c468ac4c314ec0ed077df2b","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0dcbe407b62ce0c91dc171a4695a9f442c46ce14":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["f88a361ac44a2756ed61b960b6609b91ab23df99"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f7392e322590b1c5c54beda8e0dc4dac5a0dc70":["0dcbe407b62ce0c91dc171a4695a9f442c46ce14"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["bb537081ae8ce706dd40a122f57a9e7b8a112be8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"f88a361ac44a2756ed61b960b6609b91ab23df99":["e2d15e642ab6ee7c6c468ac4c314ec0ed077df2b"]},"commit2Childs":{"bb537081ae8ce706dd40a122f57a9e7b8a112be8":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":[],"c26f00b574427b55127e869b935845554afde1fa":["4ceb6a6c707ada1df8bde804e25c98668e699a18","0dcbe407b62ce0c91dc171a4695a9f442c46ce14"],"e2d15e642ab6ee7c6c468ac4c314ec0ed077df2b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f88a361ac44a2756ed61b960b6609b91ab23df99"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"0dcbe407b62ce0c91dc171a4695a9f442c46ce14":["4ceb6a6c707ada1df8bde804e25c98668e699a18","0f7392e322590b1c5c54beda8e0dc4dac5a0dc70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"0f7392e322590b1c5c54beda8e0dc4dac5a0dc70":["bb537081ae8ce706dd40a122f57a9e7b8a112be8"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["e2d15e642ab6ee7c6c468ac4c314ec0ed077df2b"],"f88a361ac44a2756ed61b960b6609b91ab23df99":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ceb6a6c707ada1df8bde804e25c98668e699a18","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}