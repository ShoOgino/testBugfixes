{"path":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTree#getNodesAltPoint(Point,int,boolean).mjava","commits":[{"id":"b17c5c53627893d93f9261826cc6d9c447c5ee3a","date":1329777932,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTree#getNodesAltPoint(Point,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Subclasses might override {@link #getNodes(org.apache.lucene.spatial.base.shape.Shape, int, boolean)}\n   * and check if the argument is a shape and if so, delegate\n   * to this implementation, which calls {@link #getNode(org.apache.lucene.spatial.base.shape.Point, int)} and\n   * then calls {@link #getNode(String)} repeatedly if inclParents is true.\n   */\n  protected final List<Node> getNodesAltPoint(Point p, int detailLevel, boolean inclParents) {\n    Node cell = getNode(p, detailLevel);\n    if (!inclParents) {\n      return Collections.singletonList(cell);\n    }\n\n    String endToken = cell.getTokenString();\n    assert endToken.length() == detailLevel;\n    List<Node> cells = new ArrayList<Node>(detailLevel);\n    for (int i = 1; i < detailLevel; i++) {\n      cells.add(getNode(endToken.substring(0, i)));\n    }\n    cells.add(cell);\n    return cells;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTree#getNodesAltPoint(Point,int,boolean).mjava","pathOld":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTree#getNodesAltPoint(Point,int,boolean).mjava","sourceNew":"  /**\n   * Subclasses might override {@link #getNodes(org.apache.lucene.spatial.base.shape.Shape, int, boolean)}\n   * and check if the argument is a shape and if so, delegate\n   * to this implementation, which calls {@link #getNode(org.apache.lucene.spatial.base.shape.Point, int)} and\n   * then calls {@link #getNode(String)} repeatedly if inclParents is true.\n   */\n  protected final List<Node> getNodesAltPoint(Point p, int detailLevel, boolean inclParents) {\n    Node cell = getNode(p, detailLevel);\n    if (!inclParents) {\n      return Collections.singletonList(cell);\n    }\n\n    String endToken = cell.getTokenString();\n    assert endToken.length() == detailLevel;\n    List<Node> cells = new ArrayList<Node>(detailLevel);\n    for (int i = 1; i < detailLevel; i++) {\n      cells.add(getNode(endToken.substring(0, i)));\n    }\n    cells.add(cell);\n    return cells;\n  }\n\n","sourceOld":"  /**\n   * Subclasses might override {@link #getNodes(org.apache.lucene.spatial.base.shape.Shape, int, boolean)}\n   * and check if the argument is a shape and if so, delegate\n   * to this implementation, which calls {@link #getNode(org.apache.lucene.spatial.base.shape.Point, int)} and\n   * then calls {@link #getNode(String)} repeatedly if inclParents is true.\n   */\n  protected final List<Node> getNodesAltPoint(Point p, int detailLevel, boolean inclParents) {\n    Node cell = getNode(p, detailLevel);\n    if (!inclParents) {\n      return Collections.singletonList(cell);\n    }\n\n    String endToken = cell.getTokenString();\n    assert endToken.length() == detailLevel;\n    List<Node> cells = new ArrayList<Node>(detailLevel);\n    for (int i = 1; i < detailLevel; i++) {\n      cells.add(getNode(endToken.substring(0, i)));\n    }\n    cells.add(cell);\n    return cells;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["b17c5c53627893d93f9261826cc6d9c447c5ee3a"],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b17c5c53627893d93f9261826cc6d9c447c5ee3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":[],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}