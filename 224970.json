{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupHeadsCollector.GeneralAllGroupHeadsCollector#retrieveGroupHeadAndAddIfNotExist(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupHeadsCollector.GeneralAllGroupHeadsCollector#retrieveGroupHeadAndAddIfNotExist(int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupHeadsCollector.GeneralAllGroupHeadsCollector#retrieveGroupHeadAndAddIfNotExist(int).mjava","sourceNew":"    protected void retrieveGroupHeadAndAddIfNotExist(int doc) throws IOException {\n      final Comparable<?> groupValue = getGroupValue(doc);\n      GroupHead groupHead = groups.get(groupValue);\n      if (groupHead == null) {\n        groupHead = new GroupHead(groupValue, sortWithinGroup, doc, readerContext, scorer);\n        groups.put(groupValue == null ? null : duplicate(groupValue), groupHead);\n        temporalResult.stop = true;\n      } else {\n        temporalResult.stop = false;\n      }\n      temporalResult.groupHead = groupHead;\n    }\n\n","sourceOld":"    protected void retrieveGroupHeadAndAddIfNotExist(int doc) throws IOException {\n      final Comparable<?> groupValue = getGroupValue(doc);\n      GroupHead groupHead = groups.get(groupValue);\n      if (groupHead == null) {\n        groupHead = new GroupHead(groupValue, sortWithinGroup, doc, readerContext, scorer);\n        groups.put(groupValue == null ? null : duplicate(groupValue), groupHead);\n        temporalResult.stop = true;\n      } else {\n        temporalResult.stop = false;\n      }\n      temporalResult.groupHead = groupHead;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupHeadsCollector.GeneralAllGroupHeadsCollector#retrieveGroupHeadAndAddIfNotExist(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupHeadsCollector.GeneralAllGroupHeadsCollector#retrieveGroupHeadAndAddIfNotExist(int).mjava","sourceNew":"    @Override\n    protected void retrieveGroupHeadAndAddIfNotExist(int doc) throws IOException {\n      final Comparable<?> groupValue = getGroupValue(doc);\n      GroupHead groupHead = groups.get(groupValue);\n      if (groupHead == null) {\n        groupHead = new GroupHead(groupValue, sortWithinGroup, doc, readerContext, scorer);\n        groups.put(groupValue == null ? null : duplicate(groupValue), groupHead);\n        temporalResult.stop = true;\n      } else {\n        temporalResult.stop = false;\n      }\n      temporalResult.groupHead = groupHead;\n    }\n\n","sourceOld":"    protected void retrieveGroupHeadAndAddIfNotExist(int doc) throws IOException {\n      final Comparable<?> groupValue = getGroupValue(doc);\n      GroupHead groupHead = groups.get(groupValue);\n      if (groupHead == null) {\n        groupHead = new GroupHead(groupValue, sortWithinGroup, doc, readerContext, scorer);\n        groups.put(groupValue == null ? null : duplicate(groupValue), groupHead);\n        temporalResult.stop = true;\n      } else {\n        temporalResult.stop = false;\n      }\n      temporalResult.groupHead = groupHead;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupHeadsCollector.GeneralAllGroupHeadsCollector#retrieveGroupHeadAndAddIfNotExist(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupHeadsCollector.GeneralAllGroupHeadsCollector#retrieveGroupHeadAndAddIfNotExist(int).mjava","sourceNew":"    @Override\n    protected void retrieveGroupHeadAndAddIfNotExist(int doc) throws IOException {\n      final Comparable<?> groupValue = getGroupValue(doc);\n      GroupHead groupHead = groups.get(groupValue);\n      if (groupHead == null) {\n        groupHead = new GroupHead(groupValue, sortWithinGroup, doc, readerContext, scorer);\n        groups.put(groupValue == null ? null : duplicate(groupValue), groupHead);\n        temporalResult.stop = true;\n      } else {\n        temporalResult.stop = false;\n      }\n      temporalResult.groupHead = groupHead;\n    }\n\n","sourceOld":"    protected void retrieveGroupHeadAndAddIfNotExist(int doc) throws IOException {\n      final Comparable<?> groupValue = getGroupValue(doc);\n      GroupHead groupHead = groups.get(groupValue);\n      if (groupHead == null) {\n        groupHead = new GroupHead(groupValue, sortWithinGroup, doc, readerContext, scorer);\n        groups.put(groupValue == null ? null : duplicate(groupValue), groupHead);\n        temporalResult.stop = true;\n      } else {\n        temporalResult.stop = false;\n      }\n      temporalResult.groupHead = groupHead;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupHeadsCollector.GeneralAllGroupHeadsCollector#retrieveGroupHeadAndAddIfNotExist(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected void retrieveGroupHeadAndAddIfNotExist(int doc) throws IOException {\n      final Comparable<?> groupValue = getGroupValue(doc);\n      GroupHead groupHead = groups.get(groupValue);\n      if (groupHead == null) {\n        groupHead = new GroupHead(groupValue, sortWithinGroup, doc, readerContext, scorer);\n        groups.put(groupValue == null ? null : duplicate(groupValue), groupHead);\n        temporalResult.stop = true;\n      } else {\n        temporalResult.stop = false;\n      }\n      temporalResult.groupHead = groupHead;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupHeadsCollector.GeneralAllGroupHeadsCollector#retrieveGroupHeadAndAddIfNotExist(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected void retrieveGroupHeadAndAddIfNotExist(int doc) throws IOException {\n      final Comparable<?> groupValue = getGroupValue(doc);\n      GroupHead groupHead = groups.get(groupValue);\n      if (groupHead == null) {\n        groupHead = new GroupHead(groupValue, sortWithinGroup, doc, readerContext, scorer);\n        groups.put(groupValue == null ? null : duplicate(groupValue), groupHead);\n        temporalResult.stop = true;\n      } else {\n        temporalResult.stop = false;\n      }\n      temporalResult.groupHead = groupHead;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["7530de27b87b961b51f01bd1299b7004d46e8823","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["0837ab0472feecb3a54260729d845f839e1cbd72"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}