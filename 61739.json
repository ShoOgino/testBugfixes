{"path":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testContainsAgainstOriginal().mjava","commits":[{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testContainsAgainstOriginal().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testContainsAgainstOriginal().mjava","sourceNew":"  /** Tests current impl against original algorithm */\n  public void testContainsAgainstOriginal() {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      // currently we don't generate these, but this test does not want holes.\n      while (polygon.getHoles().length > 0) {\n        polygon = nextPolygon();\n      }\n      Polygon2D impl = Polygon2D.create(polygon);\n      \n      // random lat/lons against polygon\n      for (int j = 0; j < 1000; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        boolean expected = GeoTestUtil.containsSlowly(polygon, latitude, longitude);\n        assertEquals(expected, impl.contains(latitude, longitude));\n      }\n    }\n  }\n\n","sourceOld":"  /** Tests current impl against original algorithm */\n  public void testContainsAgainstOriginal() {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      // currently we don't generate these, but this test does not want holes.\n      while (polygon.getHoles().length > 0) {\n        polygon = nextPolygon();\n      }\n      \n      double polyLats[] = polygon.getPolyLats();\n      double polyLons[] = polygon.getPolyLons();\n      \n      // random lat/lons against polygon\n      for (int j = 0; j < 1000; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        // bounding box check required due to rounding errors (we don't solve that problem)\n        if (latitude >= polygon.minLat && latitude <= polygon.maxLat && longitude >= polygon.minLon && longitude <= polygon.maxLon) {\n          boolean expected = containsOriginal(polyLats, polyLons, latitude, longitude);\n          assertEquals(expected, polygon.contains(latitude, longitude));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testContainsAgainstOriginal().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testContainsAgainstOriginal().mjava","sourceNew":"  /** Tests current impl against original algorithm */\n  public void testContainsAgainstOriginal() {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      // currently we don't generate these, but this test does not want holes.\n      while (polygon.getHoles().length > 0) {\n        polygon = nextPolygon();\n      }\n      Polygon2D impl = Polygon2D.create(polygon);\n      \n      // random lat/lons against polygon\n      for (int j = 0; j < 1000; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        boolean expected = GeoTestUtil.containsSlowly(polygon, latitude, longitude);\n        assertEquals(expected, impl.contains(latitude, longitude));\n      }\n    }\n  }\n\n","sourceOld":"  /** Tests current impl against original algorithm */\n  public void testContainsAgainstOriginal() {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      // currently we don't generate these, but this test does not want holes.\n      while (polygon.getHoles().length > 0) {\n        polygon = nextPolygon();\n      }\n      \n      double polyLats[] = polygon.getPolyLats();\n      double polyLons[] = polygon.getPolyLons();\n      \n      // random lat/lons against polygon\n      for (int j = 0; j < 1000; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        // bounding box check required due to rounding errors (we don't solve that problem)\n        if (latitude >= polygon.minLat && latitude <= polygon.maxLat && longitude >= polygon.minLon && longitude <= polygon.maxLon) {\n          boolean expected = containsOriginal(polyLats, polyLons, latitude, longitude);\n          assertEquals(expected, polygon.contains(latitude, longitude));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dea8da13fd1a227ae1071e8f4ce66bff42174de","date":1471439735,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testContainsAgainstOriginal().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testContainsAgainstOriginal().mjava","sourceNew":"  /** Tests current impl against original algorithm */\n  public void testContainsAgainstOriginal() {\n    int iters = atLeast(100);\n    for (int i = 0; i < iters; i++) {\n      Polygon polygon = nextPolygon();\n      // currently we don't generate these, but this test does not want holes.\n      while (polygon.getHoles().length > 0) {\n        polygon = nextPolygon();\n      }\n      Polygon2D impl = Polygon2D.create(polygon);\n      \n      // random lat/lons against polygon\n      for (int j = 0; j < 1000; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        boolean expected = GeoTestUtil.containsSlowly(polygon, latitude, longitude);\n        assertEquals(expected, impl.contains(latitude, longitude));\n      }\n    }\n  }\n\n","sourceOld":"  /** Tests current impl against original algorithm */\n  public void testContainsAgainstOriginal() {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      // currently we don't generate these, but this test does not want holes.\n      while (polygon.getHoles().length > 0) {\n        polygon = nextPolygon();\n      }\n      Polygon2D impl = Polygon2D.create(polygon);\n      \n      // random lat/lons against polygon\n      for (int j = 0; j < 1000; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        boolean expected = GeoTestUtil.containsSlowly(polygon, latitude, longitude);\n        assertEquals(expected, impl.contains(latitude, longitude));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testContainsAgainstOriginal().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testContainsAgainstOriginal().mjava","sourceNew":"  /** Tests current impl against original algorithm */\n  public void testContainsAgainstOriginal() {\n    int iters = atLeast(100);\n    for (int i = 0; i < iters; i++) {\n      Polygon polygon = nextPolygon();\n      // currently we don't generate these, but this test does not want holes.\n      while (polygon.getHoles().length > 0) {\n        polygon = nextPolygon();\n      }\n      Polygon2D impl = Polygon2D.create(polygon);\n      \n      // random lat/lons against polygon\n      for (int j = 0; j < 1000; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        boolean expected = GeoTestUtil.containsSlowly(polygon, latitude, longitude);\n        assertEquals(expected, impl.contains(latitude, longitude));\n      }\n    }\n  }\n\n","sourceOld":"  /** Tests current impl against original algorithm */\n  public void testContainsAgainstOriginal() {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      // currently we don't generate these, but this test does not want holes.\n      while (polygon.getHoles().length > 0) {\n        polygon = nextPolygon();\n      }\n      Polygon2D impl = Polygon2D.create(polygon);\n      \n      // random lat/lons against polygon\n      for (int j = 0; j < 1000; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        boolean expected = GeoTestUtil.containsSlowly(polygon, latitude, longitude);\n        assertEquals(expected, impl.contains(latitude, longitude));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testContainsAgainstOriginal().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testContainsAgainstOriginal().mjava","sourceNew":"  /** Tests current impl against original algorithm */\n  public void testContainsAgainstOriginal() {\n    int iters = atLeast(100);\n    for (int i = 0; i < iters; i++) {\n      Polygon polygon = nextPolygon();\n      // currently we don't generate these, but this test does not want holes.\n      while (polygon.getHoles().length > 0) {\n        polygon = nextPolygon();\n      }\n      Polygon2D impl = Polygon2D.create(polygon);\n      \n      // random lat/lons against polygon\n      for (int j = 0; j < 1000; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        boolean expected = GeoTestUtil.containsSlowly(polygon, latitude, longitude);\n        assertEquals(expected, impl.contains(latitude, longitude));\n      }\n    }\n  }\n\n","sourceOld":"  /** Tests current impl against original algorithm */\n  public void testContainsAgainstOriginal() {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      // currently we don't generate these, but this test does not want holes.\n      while (polygon.getHoles().length > 0) {\n        polygon = nextPolygon();\n      }\n      Polygon2D impl = Polygon2D.create(polygon);\n      \n      // random lat/lons against polygon\n      for (int j = 0; j < 1000; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        boolean expected = GeoTestUtil.containsSlowly(polygon, latitude, longitude);\n        assertEquals(expected, impl.contains(latitude, longitude));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testContainsAgainstOriginal().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testContainsAgainstOriginal().mjava","sourceNew":"  /** Tests current impl against original algorithm */\n  public void testContainsAgainstOriginal() {\n    int iters = atLeast(100);\n    for (int i = 0; i < iters; i++) {\n      Polygon polygon = nextPolygon();\n      // currently we don't generate these, but this test does not want holes.\n      while (polygon.getHoles().length > 0) {\n        polygon = nextPolygon();\n      }\n      Polygon2D impl = Polygon2D.create(polygon);\n      \n      // random lat/lons against polygon\n      for (int j = 0; j < 1000; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        boolean expected = GeoTestUtil.containsSlowly(polygon, latitude, longitude);\n        assertEquals(expected, impl.contains(latitude, longitude));\n      }\n    }\n  }\n\n","sourceOld":"  /** Tests current impl against original algorithm */\n  public void testContainsAgainstOriginal() {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      // currently we don't generate these, but this test does not want holes.\n      while (polygon.getHoles().length > 0) {\n        polygon = nextPolygon();\n      }\n      Polygon2D impl = Polygon2D.create(polygon);\n      \n      // random lat/lons against polygon\n      for (int j = 0; j < 1000; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        boolean expected = GeoTestUtil.containsSlowly(polygon, latitude, longitude);\n        assertEquals(expected, impl.contains(latitude, longitude));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testContainsAgainstOriginal().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testContainsAgainstOriginal().mjava","sourceNew":"  /** Tests current impl against original algorithm */\n  public void testContainsAgainstOriginal() {\n    int iters = atLeast(100);\n    for (int i = 0; i < iters; i++) {\n      Polygon polygon = nextPolygon();\n      // currently we don't generate these, but this test does not want holes.\n      while (polygon.getHoles().length > 0) {\n        polygon = nextPolygon();\n      }\n      Component2D impl = Polygon2D.create(polygon);\n      \n      // random lat/lons against polygon\n      for (int j = 0; j < 1000; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        boolean expected = GeoTestUtil.containsSlowly(polygon, longitude, latitude);\n        assertEquals(expected, impl.contains(latitude, longitude));\n      }\n    }\n  }\n\n","sourceOld":"  /** Tests current impl against original algorithm */\n  public void testContainsAgainstOriginal() {\n    int iters = atLeast(100);\n    for (int i = 0; i < iters; i++) {\n      Polygon polygon = nextPolygon();\n      // currently we don't generate these, but this test does not want holes.\n      while (polygon.getHoles().length > 0) {\n        polygon = nextPolygon();\n      }\n      Polygon2D impl = Polygon2D.create(polygon);\n      \n      // random lat/lons against polygon\n      for (int j = 0; j < 1000; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        boolean expected = GeoTestUtil.containsSlowly(polygon, latitude, longitude);\n        assertEquals(expected, impl.contains(latitude, longitude));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testContainsAgainstOriginal().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testContainsAgainstOriginal().mjava","sourceNew":"  /** Tests current impl against original algorithm */\n  public void testContainsAgainstOriginal() {\n    int iters = atLeast(100);\n    for (int i = 0; i < iters; i++) {\n      Polygon polygon = nextPolygon();\n      // currently we don't generate these, but this test does not want holes.\n      while (polygon.getHoles().length > 0) {\n        polygon = nextPolygon();\n      }\n      Component2D impl = Polygon2D.create(polygon);\n      \n      // random lat/lons against polygon\n      for (int j = 0; j < 1000; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        boolean expected = GeoTestUtil.containsSlowly(polygon, longitude, latitude);\n        assertEquals(expected, impl.contains(latitude, longitude));\n      }\n    }\n  }\n\n","sourceOld":"  /** Tests current impl against original algorithm */\n  public void testContainsAgainstOriginal() {\n    int iters = atLeast(100);\n    for (int i = 0; i < iters; i++) {\n      Polygon polygon = nextPolygon();\n      // currently we don't generate these, but this test does not want holes.\n      while (polygon.getHoles().length > 0) {\n        polygon = nextPolygon();\n      }\n      Polygon2D impl = Polygon2D.create(polygon);\n      \n      // random lat/lons against polygon\n      for (int j = 0; j < 1000; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        boolean expected = GeoTestUtil.containsSlowly(polygon, latitude, longitude);\n        assertEquals(expected, impl.contains(latitude, longitude));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","925fce43f3bac029d912b9b7de03c789e258a333"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","9dea8da13fd1a227ae1071e8f4ce66bff42174de"],"9dea8da13fd1a227ae1071e8f4ce66bff42174de":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"925fce43f3bac029d912b9b7de03c789e258a333":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0b597c65628ca9e73913a07e81691f8229bae35":["403d05f7f8d69b65659157eff1bc1d2717f04c66","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b0b597c65628ca9e73913a07e81691f8229bae35"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","9dea8da13fd1a227ae1071e8f4ce66bff42174de","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","925fce43f3bac029d912b9b7de03c789e258a333"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"9dea8da13fd1a227ae1071e8f4ce66bff42174de":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}