{"path":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String,String[],Reader).mjava","commits":[{"id":"b4e08e2b6886d78c91752d82ea2b436c4324cd55","date":1464786234,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String,String[],Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","sourceNew":"    private void handleSplitMode(String split, String childSplit, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, childSplit, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            if (copy.containsKey(null)) {\n              copy.put(CHILD_DOC_KEY, copy.get(null));\n              copy.remove(null);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = buildDoc(copy);\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : copy.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(), entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"611f7ea4eee5babadf4129bfa5fbae964738cd7c","date":1464787051,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String,String[],Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","sourceNew":"    private void handleSplitMode(String split, String childSplit, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, childSplit, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            if (copy.containsKey(null)) {\n              copy.put(CHILD_DOC_KEY, copy.get(null));\n              copy.remove(null);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = buildDoc(copy);\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : copy.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(), entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String,String[],Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","sourceNew":"    private void handleSplitMode(String split, String childSplit, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, childSplit, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            if (copy.containsKey(null)) {\n              copy.put(CHILD_DOC_KEY, copy.get(null));\n              copy.remove(null);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = buildDoc(copy);\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : copy.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(), entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String,String[],Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","sourceNew":"    private void handleSplitMode(String split, String childSplit, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, childSplit, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            if (copy.containsKey(null)) {\n              copy.put(CHILD_DOC_KEY, copy.get(null));\n              copy.remove(null);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = buildDoc(copy);\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : copy.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(), entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d9512babbd72795eb013cdd392dad2e2b2313e","date":1465331500,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String,String[],Reader).mjava","sourceNew":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            if (copy.containsKey(null)) {\n              copy.put(CHILD_DOC_KEY, copy.get(null));\n              copy.remove(null);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = buildDoc(copy);\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String childSplit, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, childSplit, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            if (copy.containsKey(null)) {\n              copy.put(CHILD_DOC_KEY, copy.get(null));\n              copy.remove(null);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = buildDoc(copy);\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d8d9512babbd72795eb013cdd392dad2e2b2313e":["b4e08e2b6886d78c91752d82ea2b436c4324cd55"],"b4e08e2b6886d78c91752d82ea2b436c4324cd55":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"611f7ea4eee5babadf4129bfa5fbae964738cd7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b4e08e2b6886d78c91752d82ea2b436c4324cd55"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","611f7ea4eee5babadf4129bfa5fbae964738cd7c"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d8d9512babbd72795eb013cdd392dad2e2b2313e"]},"commit2Childs":{"d8d9512babbd72795eb013cdd392dad2e2b2313e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b4e08e2b6886d78c91752d82ea2b436c4324cd55":["d8d9512babbd72795eb013cdd392dad2e2b2313e","611f7ea4eee5babadf4129bfa5fbae964738cd7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e08e2b6886d78c91752d82ea2b436c4324cd55","611f7ea4eee5babadf4129bfa5fbae964738cd7c","5b8ee93140fd0efef7e101786e3ed5160a700b5f","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"611f7ea4eee5babadf4129bfa5fbae964738cd7c":["5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}