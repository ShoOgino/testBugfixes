{"path":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","commits":[{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field f = newField(\"foo\", \"this is a test test\", Field.Index.ANALYZED);\n    f.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    DocsEnum de = MultiFields.getTermDocsEnum(reader, null, \"foo\", new BytesRef(\"test\"));\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    DocsEnum de = MultiFields.getTermDocsEnum(reader, null, \"foo\", new BytesRef(\"test\"));\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field f = newField(\"foo\", \"this is a test test\", Field.Index.ANALYZED);\n    f.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    DocsEnum de = MultiFields.getTermDocsEnum(reader, null, \"foo\", new BytesRef(\"test\"));\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    DocsEnum de = _TestUtil.docs(random, reader, \"foo\", new BytesRef(\"test\"), null, null, true);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    DocsEnum de = MultiFields.getTermDocsEnum(reader, null, \"foo\", new BytesRef(\"test\"));\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    DocsEnum de = _TestUtil.docs(random, reader, \"foo\", new BytesRef(\"test\"), null, null, true);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    DocsEnum de = MultiFields.getTermDocsEnum(reader, null, \"foo\", new BytesRef(\"test\"));\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\"), false));\n    \n    DocsEnum de = _TestUtil.docs(random, reader, \"foo\", new BytesRef(\"test\"), null, null, true);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\")));\n    \n    DocsEnum de = _TestUtil.docs(random, reader, \"foo\", new BytesRef(\"test\"), null, null, true);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\"), false));\n    \n    DocsEnum de = _TestUtil.docs(random, reader, \"foo\", new BytesRef(\"test\"), null, null, true);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {   \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f = newField(\"foo\", \"this is a test test\", ft);\n    doc.add(f);\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(doc);\n    }\n    \n    IndexReader reader = w.getReader();\n    w.close();\n    \n    assertNull(MultiFields.getTermPositionsEnum(reader, null, \"foo\", new BytesRef(\"test\"), false));\n    \n    DocsEnum de = _TestUtil.docs(random, reader, \"foo\", new BytesRef(\"test\"), null, null, true);\n    while (de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(2, de.freq());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["1509f151d7692d84fae414b2b799ac06ba60fcb4","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["872cff1d3a554e0cd64014cd97f88d3002b0f491"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","31f025ae60076ae95274433f3fe8e6ace2857a87"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}