{"path":"lucene/core/src/test/org/apache/lucene/util/TestRecyclingIntBlockAllocator#testAllocate().mjava","commits":[{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRecyclingIntBlockAllocator#testAllocate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAllocate() {\n    RecyclingIntBlockAllocator allocator = newAllocator();\n    HashSet<int[]> set = new HashSet<int[]>();\n    int[] block = allocator.getIntBlock();\n    set.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    int num = atLeast(97);\n    for (int i = 0; i < num; i++) {\n      block = allocator.getIntBlock();\n      assertNotNull(block);\n      assertEquals(size, block.length);\n      assertTrue(\"block is returned twice\", set.add(block));\n      assertEquals(4 * size * (i + 2), allocator.bytesUsed()); // zero based + 1\n      assertEquals(0, allocator.numBufferedBlocks());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRecyclingIntBlockAllocator#testAllocate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRecyclingIntBlockAllocator#testAllocate().mjava","sourceNew":"  @Test\n  public void testAllocate() {\n    RecyclingIntBlockAllocator allocator = newAllocator();\n    HashSet<int[]> set = new HashSet<>();\n    int[] block = allocator.getIntBlock();\n    set.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    int num = atLeast(97);\n    for (int i = 0; i < num; i++) {\n      block = allocator.getIntBlock();\n      assertNotNull(block);\n      assertEquals(size, block.length);\n      assertTrue(\"block is returned twice\", set.add(block));\n      assertEquals(4 * size * (i + 2), allocator.bytesUsed()); // zero based + 1\n      assertEquals(0, allocator.numBufferedBlocks());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllocate() {\n    RecyclingIntBlockAllocator allocator = newAllocator();\n    HashSet<int[]> set = new HashSet<int[]>();\n    int[] block = allocator.getIntBlock();\n    set.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    int num = atLeast(97);\n    for (int i = 0; i < num; i++) {\n      block = allocator.getIntBlock();\n      assertNotNull(block);\n      assertEquals(size, block.length);\n      assertTrue(\"block is returned twice\", set.add(block));\n      assertEquals(4 * size * (i + 2), allocator.bytesUsed()); // zero based + 1\n      assertEquals(0, allocator.numBufferedBlocks());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}