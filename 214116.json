{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.Highest#Highest(FieldComparator[Object],BitDocIdSetFilter,BitDocIdSetFilter,int).mjava","commits":[{"id":"b012914a8110b2ff1d075ed1ef72aa57084d4897","date":1414685177,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.Highest#Highest(FieldComparator[Object],BitDocIdSetFilter,BitDocIdSetFilter,int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.Highest#Highest(FieldComparator[Object],Filter,Filter,int).mjava","sourceNew":"    /**\n     * Create ToParentBlockJoinFieldComparator.Highest\n     *\n     * @param wrappedComparator The {@link FieldComparator} on the child / nested level.\n     * @param parentFilter Filter that identifies the parent documents.\n     * @param childFilter Filter that defines which child / nested documents participates in sorting.\n     * @param spareSlot The extra slot inside the wrapped comparator that is used to compare which nested document\n     *                  inside the parent document scope is most competitive.\n     */\n    public Highest(FieldComparator<Object> wrappedComparator, BitDocIdSetFilter parentFilter, BitDocIdSetFilter childFilter, int spareSlot) {\n      super(wrappedComparator, parentFilter, childFilter, spareSlot);\n    }\n\n","sourceOld":"    /**\n     * Create ToParentBlockJoinFieldComparator.Highest\n     *\n     * @param wrappedComparator The {@link FieldComparator} on the child / nested level.\n     * @param parentFilter Filter (must produce FixedBitSet per-segment) that identifies the parent documents.\n     * @param childFilter Filter that defines which child / nested documents participates in sorting.\n     * @param spareSlot The extra slot inside the wrapped comparator that is used to compare which nested document\n     *                  inside the parent document scope is most competitive.\n     */\n    public Highest(FieldComparator<Object> wrappedComparator, Filter parentFilter, Filter childFilter, int spareSlot) {\n      super(wrappedComparator, parentFilter, childFilter, spareSlot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.Highest#Highest(FieldComparator[Object],BitDocIdSetFilter,BitDocIdSetFilter,int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.Highest#Highest(FieldComparator[Object],BitDocIdSetFilter,BitDocIdSetFilter,int).mjava","sourceNew":"    /**\n     * Create ToParentBlockJoinFieldComparator.Highest\n     *\n     * @param wrappedComparator The {@link LeafFieldComparator} on the child / nested level.\n     * @param parentFilter Filter that identifies the parent documents.\n     * @param childFilter Filter that defines which child / nested documents participates in sorting.\n     * @param spareSlot The extra slot inside the wrapped comparator that is used to compare which nested document\n     *                  inside the parent document scope is most competitive.\n     */\n    public Highest(FieldComparator<Object> wrappedComparator, BitDocIdSetFilter parentFilter, BitDocIdSetFilter childFilter, int spareSlot) {\n      super(wrappedComparator, parentFilter, childFilter, spareSlot);\n    }\n\n","sourceOld":"    /**\n     * Create ToParentBlockJoinFieldComparator.Highest\n     *\n     * @param wrappedComparator The {@link FieldComparator} on the child / nested level.\n     * @param parentFilter Filter that identifies the parent documents.\n     * @param childFilter Filter that defines which child / nested documents participates in sorting.\n     * @param spareSlot The extra slot inside the wrapped comparator that is used to compare which nested document\n     *                  inside the parent document scope is most competitive.\n     */\n    public Highest(FieldComparator<Object> wrappedComparator, BitDocIdSetFilter parentFilter, BitDocIdSetFilter childFilter, int spareSlot) {\n      super(wrappedComparator, parentFilter, childFilter, spareSlot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db447c88c3c3367999a54f10d9a207f3e63db201","date":1435740861,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.Highest#Highest(FieldComparator[Object],BitDocIdSetFilter,BitDocIdSetFilter,int).mjava","sourceNew":null,"sourceOld":"    /**\n     * Create ToParentBlockJoinFieldComparator.Highest\n     *\n     * @param wrappedComparator The {@link LeafFieldComparator} on the child / nested level.\n     * @param parentFilter Filter that identifies the parent documents.\n     * @param childFilter Filter that defines which child / nested documents participates in sorting.\n     * @param spareSlot The extra slot inside the wrapped comparator that is used to compare which nested document\n     *                  inside the parent document scope is most competitive.\n     */\n    public Highest(FieldComparator<Object> wrappedComparator, BitDocIdSetFilter parentFilter, BitDocIdSetFilter childFilter, int spareSlot) {\n      super(wrappedComparator, parentFilter, childFilter, spareSlot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db447c88c3c3367999a54f10d9a207f3e63db201":["901e951cec2e6af4e503209a6721c8834db23279"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"901e951cec2e6af4e503209a6721c8834db23279":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db447c88c3c3367999a54f10d9a207f3e63db201"]},"commit2Childs":{"db447c88c3c3367999a54f10d9a207f3e63db201":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["901e951cec2e6af4e503209a6721c8834db23279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"901e951cec2e6af4e503209a6721c8834db23279":["db447c88c3c3367999a54f10d9a207f3e63db201"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}