{"path":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#testRandom().mjava","sourceNew":"  @Nightly\n  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random;\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      float weight = rnd.nextFloat() * 100; \n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term;\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(prefix, true, 10)) {\n          assertTrue(lr.key.startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random;\n    for (int i = 0; i < 5000; i++) {\n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), rnd.nextInt(100)));\n    }\n    lookup = new FSTLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term;\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(prefix, true, 10)) {\n          assertTrue(lr.key.startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d334a3e8e6b94298d8cf2802a403a096c06f0b92","date":1329766559,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","sourceNew":"  @Nightly\n  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random;\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      float weight = rnd.nextFloat() * 100; \n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term.utf8ToString();\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(prefix, true, 10)) {\n          assertTrue(lr.key.startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Nightly\n  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random;\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      float weight = rnd.nextFloat() * 100; \n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term;\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(prefix, true, 10)) {\n          assertTrue(lr.key.startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"534d49064b2131355fc96bf1d52e3c76b6fad1e6","date":1329908244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random;\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      float weight = rnd.nextFloat() * 100; \n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term.utf8ToString();\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(prefix, true, 10)) {\n          assertTrue(lr.key.startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Nightly\n  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random;\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      float weight = rnd.nextFloat() * 100; \n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term.utf8ToString();\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(prefix, true, 10)) {\n          assertTrue(lr.key.startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecc52400551de6a7d8daf646be839487911627c","date":1330076979,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random;\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      int weight = random.nextInt(100); \n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term.utf8ToString();\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(_TestUtil.stringToCharSequence(prefix, random), true, 10)) {\n          assertTrue(lr.key.toString().startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random;\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      float weight = rnd.nextFloat() * 100; \n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term.utf8ToString();\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(prefix, true, 10)) {\n          assertTrue(lr.key.startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random;\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      int weight = random.nextInt(100); \n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term.utf8ToString();\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(_TestUtil.stringToCharSequence(prefix, random), true, 10)) {\n          assertTrue(lr.key.toString().startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Nightly\n  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random;\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      float weight = rnd.nextFloat() * 100; \n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term;\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(prefix, true, 10)) {\n          assertTrue(lr.key.startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random();\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      int weight = rnd.nextInt(100); \n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term.utf8ToString();\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(stringToCharSequence(prefix), true, 10)) {\n          assertTrue(lr.key.toString().startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random;\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      int weight = random.nextInt(100); \n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term.utf8ToString();\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(_TestUtil.stringToCharSequence(prefix, random), true, 10)) {\n          assertTrue(lr.key.toString().startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random();\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      int weight = rnd.nextInt(100); \n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term.utf8ToString();\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(stringToCharSequence(prefix), true, 10)) {\n          assertTrue(lr.key.toString().startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random();\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      int weight = rnd.nextInt(100); \n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term.utf8ToString();\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(stringToCharSequence(prefix), true, 10)) {\n          assertTrue(lr.key.toString().startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"534d49064b2131355fc96bf1d52e3c76b6fad1e6":["d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["7bf07f4ebadc7539de83a531e64678350d78ca26","6ecc52400551de6a7d8daf646be839487911627c"],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ecc52400551de6a7d8daf646be839487911627c":["534d49064b2131355fc96bf1d52e3c76b6fad1e6"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6ecc52400551de6a7d8daf646be839487911627c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"534d49064b2131355fc96bf1d52e3c76b6fad1e6":["6ecc52400551de6a7d8daf646be839487911627c"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["534d49064b2131355fc96bf1d52e3c76b6fad1e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"6ecc52400551de6a7d8daf646be839487911627c":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}