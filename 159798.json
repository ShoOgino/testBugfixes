{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#totalize().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#totalize().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#totalize().mjava","sourceNew":"  /**\n   * Adds transitions to explicit crash state to ensure that transition function\n   * is total.\n   */\n  void totalize() {\n    State s = new State();\n    s.addTransition(new Transition(Character.MIN_CODE_POINT, Character.MAX_CODE_POINT,\n        s));\n    for (State p : getNumberedStates()) {\n      int maxi = Character.MIN_CODE_POINT;\n      p.sortTransitions(Transition.CompareByMinMaxThenDest);\n      for (Transition t : p.getTransitions()) {\n        if (t.min > maxi) p.addTransition(new Transition(maxi,\n            (t.min - 1), s));\n        if (t.max + 1 > maxi) maxi = t.max + 1;\n      }\n      if (maxi <= Character.MAX_CODE_POINT) p.addTransition(new Transition(\n          maxi, Character.MAX_CODE_POINT, s));\n    }\n    clearNumberedStates();\n  }\n\n","sourceOld":"  /**\n   * Adds transitions to explicit crash state to ensure that transition function\n   * is total.\n   */\n  void totalize() {\n    State s = new State();\n    s.addTransition(new Transition(Character.MIN_CODE_POINT, Character.MAX_CODE_POINT,\n        s));\n    for (State p : getNumberedStates()) {\n      int maxi = Character.MIN_CODE_POINT;\n      p.sortTransitions(Transition.CompareByMinMaxThenDest);\n      for (Transition t : p.getTransitions()) {\n        if (t.min > maxi) p.addTransition(new Transition(maxi,\n            (t.min - 1), s));\n        if (t.max + 1 > maxi) maxi = t.max + 1;\n      }\n      if (maxi <= Character.MAX_CODE_POINT) p.addTransition(new Transition(\n          maxi, Character.MAX_CODE_POINT, s));\n    }\n    clearNumberedStates();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#totalize().mjava","sourceNew":null,"sourceOld":"  /**\n   * Adds transitions to explicit crash state to ensure that transition function\n   * is total.\n   */\n  void totalize() {\n    State s = new State();\n    s.addTransition(new Transition(Character.MIN_CODE_POINT, Character.MAX_CODE_POINT,\n        s));\n    for (State p : getNumberedStates()) {\n      int maxi = Character.MIN_CODE_POINT;\n      p.sortTransitions(Transition.CompareByMinMaxThenDest);\n      for (Transition t : p.getTransitions()) {\n        if (t.min > maxi) p.addTransition(new Transition(maxi,\n            (t.min - 1), s));\n        if (t.max + 1 > maxi) maxi = t.max + 1;\n      }\n      if (maxi <= Character.MAX_CODE_POINT) p.addTransition(new Transition(\n          maxi, Character.MAX_CODE_POINT, s));\n    }\n    clearNumberedStates();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#totalize().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#totalize().mjava","sourceNew":"  // nocommit move to Operations\n  public Automaton totalize() {\n    Automaton result = new Automaton();\n    int numStates = getNumStates();\n    for(int i=0;i<numStates;i++) {\n      result.createState();\n      result.setAccept(i, isAccept(i));\n    }\n\n    int deadState = result.createState();\n    result.addTransition(deadState, deadState, Character.MIN_CODE_POINT, Character.MAX_CODE_POINT);\n\n    Transition t = new Transition();\n    for(int i=0;i<numStates;i++) {\n      int maxi = Character.MIN_CODE_POINT;\n      int count = initTransition(i, t);\n      for(int j=0;j<count;j++) {\n        getNextTransition(t);\n        result.addTransition(i, t.dest, t.min, t.max);\n        if (t.min > maxi) {\n          result.addTransition(i, deadState, maxi, t.min-1);\n        }\n        if (t.max + 1 > maxi) {\n          maxi = t.max + 1;\n        }\n      }\n\n      if (maxi <= Character.MAX_CODE_POINT) {\n        result.addTransition(i, deadState, maxi, Character.MAX_CODE_POINT);\n      }\n    }\n    result.finishState();\n    return result;\n  }\n\n","sourceOld":"  public LightAutomaton totalize() {\n    LightAutomaton result = new LightAutomaton();\n    int numStates = getNumStates();\n    for(int i=0;i<numStates;i++) {\n      result.createState();\n      result.setAccept(i, isAccept(i));\n    }\n\n    int deadState = result.createState();\n    result.addTransition(deadState, deadState, Character.MIN_CODE_POINT, Character.MAX_CODE_POINT);\n\n    Transition t = new Transition();\n    for(int i=0;i<numStates;i++) {\n      int maxi = Character.MIN_CODE_POINT;\n      int count = initTransition(i, t);\n      for(int j=0;j<count;j++) {\n        getNextTransition(t);\n        result.addTransition(i, t.dest, t.min, t.max);\n        if (t.min > maxi) {\n          result.addTransition(i, deadState, maxi, t.min-1);\n        }\n        if (t.max + 1 > maxi) {\n          maxi = t.max + 1;\n        }\n      }\n\n      if (maxi <= Character.MAX_CODE_POINT) {\n        result.addTransition(i, deadState, maxi, Character.MAX_CODE_POINT);\n      }\n    }\n    result.finishState();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bab620c8ab32bb77a62753eca4afb8e47efa87c","date":1402997861,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#totalize(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#totalize().mjava","sourceNew":"  /** Returns a new automaton accepting the same language with added\n   *  transitions to a dead state so that from every state and every label\n   *  there is a transition. */\n  static Automaton totalize(Automaton a) {\n    Automaton result = new Automaton();\n    int numStates = a.getNumStates();\n    for(int i=0;i<numStates;i++) {\n      result.createState();\n      result.setAccept(i, a.isAccept(i));\n    }\n\n    int deadState = result.createState();\n    result.addTransition(deadState, deadState, Character.MIN_CODE_POINT, Character.MAX_CODE_POINT);\n\n    Transition t = new Transition();\n    for(int i=0;i<numStates;i++) {\n      int maxi = Character.MIN_CODE_POINT;\n      int count = a.initTransition(i, t);\n      for(int j=0;j<count;j++) {\n        a.getNextTransition(t);\n        result.addTransition(i, t.dest, t.min, t.max);\n        if (t.min > maxi) {\n          result.addTransition(i, deadState, maxi, t.min-1);\n        }\n        if (t.max + 1 > maxi) {\n          maxi = t.max + 1;\n        }\n      }\n\n      if (maxi <= Character.MAX_CODE_POINT) {\n        result.addTransition(i, deadState, maxi, Character.MAX_CODE_POINT);\n      }\n    }\n\n    result.finishState();\n    return result;\n  }\n\n","sourceOld":"  // nocommit move to Operations\n  public Automaton totalize() {\n    Automaton result = new Automaton();\n    int numStates = getNumStates();\n    for(int i=0;i<numStates;i++) {\n      result.createState();\n      result.setAccept(i, isAccept(i));\n    }\n\n    int deadState = result.createState();\n    result.addTransition(deadState, deadState, Character.MIN_CODE_POINT, Character.MAX_CODE_POINT);\n\n    Transition t = new Transition();\n    for(int i=0;i<numStates;i++) {\n      int maxi = Character.MIN_CODE_POINT;\n      int count = initTransition(i, t);\n      for(int j=0;j<count;j++) {\n        getNextTransition(t);\n        result.addTransition(i, t.dest, t.min, t.max);\n        if (t.min > maxi) {\n          result.addTransition(i, deadState, maxi, t.min-1);\n        }\n        if (t.max + 1 > maxi) {\n          maxi = t.max + 1;\n        }\n      }\n\n      if (maxi <= Character.MAX_CODE_POINT) {\n        result.addTransition(i, deadState, maxi, Character.MAX_CODE_POINT);\n      }\n    }\n    result.finishState();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#totalize().mjava","sourceNew":null,"sourceOld":"  /**\n   * Adds transitions to explicit crash state to ensure that transition function\n   * is total.\n   */\n  void totalize() {\n    State s = new State();\n    s.addTransition(new Transition(Character.MIN_CODE_POINT, Character.MAX_CODE_POINT,\n        s));\n    for (State p : getNumberedStates()) {\n      int maxi = Character.MIN_CODE_POINT;\n      p.sortTransitions(Transition.CompareByMinMaxThenDest);\n      for (Transition t : p.getTransitions()) {\n        if (t.min > maxi) p.addTransition(new Transition(maxi,\n            (t.min - 1), s));\n        if (t.max + 1 > maxi) maxi = t.max + 1;\n      }\n      if (maxi <= Character.MAX_CODE_POINT) p.addTransition(new Transition(\n          maxi, Character.MAX_CODE_POINT, s));\n    }\n    clearNumberedStates();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["5c84485629d80d203608e8975a1139de9933cc38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}