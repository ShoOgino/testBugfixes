{"path":"src/java/org/apache/solr/core/SolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe366944118e4f2dcf893ae671f9eda0aa2f31fa","date":1217532456,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/core/SolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  /** The searchers passed here are only guaranteed to be valid for the duration\n   * of this method call, so care should be taken not to spawn threads or asynchronous\n   * tasks with references to these searchers.\n   */\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher);\n\n","sourceOld":"  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8c77019d92a937be281e1f8b72bf54b3ac89420","date":1249507506,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/core/SolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  /** The searchers passed here are only guaranteed to be valid for the duration\n   * of this method call, so care should be taken not to spawn threads or asynchronous\n   * tasks with references to these searchers.\n   * <p/>\n   * Implementations should add the {@link org.apache.solr.common.params.EventParams#EVENT} parameter and set it to a value of either:\n   * <ul>\n   * <li>{@link org.apache.solr.common.params.EventParams#FIRST_SEARCHER} - First Searcher event</li>\n   * <li>{@link org.apache.solr.common.params.EventParams#NEW_SEARCHER} - New Searcher event</li>\n   * </ul>\n   *\n   * Sample:\n   * <pre>\n    if (currentSearcher != null) {\n      nlst.add(CommonParams.EVENT, CommonParams.NEW_SEARCHER);\n    } else {\n      nlst.add(CommonParams.EVENT, CommonParams.FIRST_SEARCHER);\n    }\n   *\n   * </pre>\n   *\n   * @see org.apache.solr.core.AbstractSolrEventListener#addEventParms(org.apache.solr.search.SolrIndexSearcher, org.apache.solr.common.util.NamedList) \n   *\n   * @param newSearcher The new {@link org.apache.solr.search.SolrIndexSearcher} to use\n   * @param currentSearcher The existing {@link org.apache.solr.search.SolrIndexSearcher}.  null if this is a firstSearcher event.\n   *\n   */\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher);\n\n","sourceOld":"  /** The searchers passed here are only guaranteed to be valid for the duration\n   * of this method call, so care should be taken not to spawn threads or asynchronous\n   * tasks with references to these searchers.\n   */\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher);\n\n","bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/core/SolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  /** The searchers passed here are only guaranteed to be valid for the duration\n   * of this method call, so care should be taken not to spawn threads or asynchronous\n   * tasks with references to these searchers.\n   * <p/>\n   * Implementations should add the {@link org.apache.solr.common.params.EventParams#EVENT} parameter and set it to a value of either:\n   * <ul>\n   * <li>{@link org.apache.solr.common.params.EventParams#FIRST_SEARCHER} - First Searcher event</li>\n   * <li>{@link org.apache.solr.common.params.EventParams#NEW_SEARCHER} - New Searcher event</li>\n   * </ul>\n   *\n   * Sample:\n   * <pre>\n    if (currentSearcher != null) {\n      nlst.add(CommonParams.EVENT, CommonParams.NEW_SEARCHER);\n    } else {\n      nlst.add(CommonParams.EVENT, CommonParams.FIRST_SEARCHER);\n    }\n   *\n   * </pre>\n   *\n   * @see org.apache.solr.core.AbstractSolrEventListener#addEventParms(org.apache.solr.search.SolrIndexSearcher, org.apache.solr.common.util.NamedList) \n   *\n   * @param newSearcher The new {@link org.apache.solr.search.SolrIndexSearcher} to use\n   * @param currentSearcher The existing {@link org.apache.solr.search.SolrIndexSearcher}.  null if this is a firstSearcher event.\n   *\n   */\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher);\n\n","sourceOld":"  /** The searchers passed here are only guaranteed to be valid for the duration\n   * of this method call, so care should be taken not to spawn threads or asynchronous\n   * tasks with references to these searchers.\n   * <p/>\n   * Implementations should add the {@link org.apache.solr.common.params.EventParams#EVENT} parameter and set it to a value of either:\n   * <ul>\n   * <li>{@link org.apache.solr.common.params.EventParams#FIRST_SEARCHER} - First Searcher event</li>\n   * <li>{@link org.apache.solr.common.params.EventParams#NEW_SEARCHER} - New Searcher event</li>\n   * </ul>\n   *\n   * Sample:\n   * <pre>\n    if (currentSearcher != null) {\n      nlst.add(CommonParams.EVENT, CommonParams.NEW_SEARCHER);\n    } else {\n      nlst.add(CommonParams.EVENT, CommonParams.FIRST_SEARCHER);\n    }\n   *\n   * </pre>\n   *\n   * @see org.apache.solr.core.AbstractSolrEventListener#addEventParms(org.apache.solr.search.SolrIndexSearcher, org.apache.solr.common.util.NamedList) \n   *\n   * @param newSearcher The new {@link org.apache.solr.search.SolrIndexSearcher} to use\n   * @param currentSearcher The existing {@link org.apache.solr.search.SolrIndexSearcher}.  null if this is a firstSearcher event.\n   *\n   */\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher);\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"fe366944118e4f2dcf893ae671f9eda0aa2f31fa":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"c8c77019d92a937be281e1f8b72bf54b3ac89420":["fe366944118e4f2dcf893ae671f9eda0aa2f31fa"],"ad94625fb8d088209f46650c8097196fec67f00c":["c8c77019d92a937be281e1f8b72bf54b3ac89420"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["fe366944118e4f2dcf893ae671f9eda0aa2f31fa"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe366944118e4f2dcf893ae671f9eda0aa2f31fa":["c8c77019d92a937be281e1f8b72bf54b3ac89420"],"c8c77019d92a937be281e1f8b72bf54b3ac89420":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}