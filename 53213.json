{"path":"sandbox/contributions/spellchecker/src/java/org/apache/lucene/search/spell/TRStringDistance#getDistance(String).mjava","commits":[{"id":"e561bdf81b5b983639de610f7c878f3e2382bf24","date":1099437089,"type":0,"author":"David Spencer","isMerge":false,"pathNew":"sandbox/contributions/spellchecker/src/java/org/apache/lucene/search/spell/TRStringDistance#getDistance(String).mjava","pathOld":"/dev/null","sourceNew":"    //*****************************\n     // Compute Levenshtein distance\n     //*****************************\n      public final int getDistance (String other) {\n          int d[][]; // matrix\n          int cost; // cost\n\n          // Step 1\n          final char[] ta=other.toCharArray();\n          final int m=ta.length;\n          if (n==0) {\n              return m;\n          }\n          if (m==0) {\n              return n;\n          }\n\n          if (m>=cache.length) {\n              d=form(n, m);\n          }\n          else if (cache[m]!=null) {\n              d=cache[m];\n          }\n          else {\n              d=cache[m]=form(n, m);\n\n              // Step 3\n\n          }\n          for (int i=1; i<=n; i++) {\n              final char s_i=sa[i-1];\n\n              // Step 4\n\n              for (int j=1; j<=m; j++) {\n                  final char t_j=ta[j-1];\n\n                  // Step 5\n\n                  if (s_i==t_j) { // same\n                      cost=0;\n                  }\n                  else { // not a match\n                      cost=1;\n\n                      // Step 6\n\n                  }\n                  d[i][j]=min3(d[i-1][j]+1, d[i][j-1]+1, d[i-1][j-1]+cost);\n\n              }\n\n          }\n\n          // Step 7\n          return d[n][m];\n\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa8dcd4adc562c6e8da67c42872ef9194f8598fa","date":1108145465,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/TRStringDistance#getDistance(String).mjava","pathOld":"sandbox/contributions/spellchecker/src/java/org/apache/lucene/search/spell/TRStringDistance#getDistance(String).mjava","sourceNew":"    //*****************************\n     // Compute Levenshtein distance\n     //*****************************\n      public final int getDistance (String other) {\n          int d[][]; // matrix\n          int cost; // cost\n\n          // Step 1\n          final char[] ta=other.toCharArray();\n          final int m=ta.length;\n          if (n==0) {\n              return m;\n          }\n          if (m==0) {\n              return n;\n          }\n\n          if (m>=cache.length) {\n              d=form(n, m);\n          }\n          else if (cache[m]!=null) {\n              d=cache[m];\n          }\n          else {\n              d=cache[m]=form(n, m);\n\n              // Step 3\n\n          }\n          for (int i=1; i<=n; i++) {\n              final char s_i=sa[i-1];\n\n              // Step 4\n\n              for (int j=1; j<=m; j++) {\n                  final char t_j=ta[j-1];\n\n                  // Step 5\n\n                  if (s_i==t_j) { // same\n                      cost=0;\n                  }\n                  else { // not a match\n                      cost=1;\n\n                      // Step 6\n\n                  }\n                  d[i][j]=min3(d[i-1][j]+1, d[i][j-1]+1, d[i-1][j-1]+cost);\n\n              }\n\n          }\n\n          // Step 7\n          return d[n][m];\n\n      }\n\n","sourceOld":"    //*****************************\n     // Compute Levenshtein distance\n     //*****************************\n      public final int getDistance (String other) {\n          int d[][]; // matrix\n          int cost; // cost\n\n          // Step 1\n          final char[] ta=other.toCharArray();\n          final int m=ta.length;\n          if (n==0) {\n              return m;\n          }\n          if (m==0) {\n              return n;\n          }\n\n          if (m>=cache.length) {\n              d=form(n, m);\n          }\n          else if (cache[m]!=null) {\n              d=cache[m];\n          }\n          else {\n              d=cache[m]=form(n, m);\n\n              // Step 3\n\n          }\n          for (int i=1; i<=n; i++) {\n              final char s_i=sa[i-1];\n\n              // Step 4\n\n              for (int j=1; j<=m; j++) {\n                  final char t_j=ta[j-1];\n\n                  // Step 5\n\n                  if (s_i==t_j) { // same\n                      cost=0;\n                  }\n                  else { // not a match\n                      cost=1;\n\n                      // Step 6\n\n                  }\n                  d[i][j]=min3(d[i-1][j]+1, d[i][j-1]+1, d[i-1][j-1]+cost);\n\n              }\n\n          }\n\n          // Step 7\n          return d[n][m];\n\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["e561bdf81b5b983639de610f7c878f3e2382bf24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e561bdf81b5b983639de610f7c878f3e2382bf24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"]},"commit2Childs":{"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e561bdf81b5b983639de610f7c878f3e2382bf24"],"e561bdf81b5b983639de610f7c878f3e2382bf24":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}