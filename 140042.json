{"path":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#deleteEntry(StorageEntryWrapper).mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#deleteEntry(StorageEntryWrapper).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#deleteEntry(StorageEntryWrapper).mjava","sourceNew":"    /**\n     * Deletes the entry for the given entry id.\n     * @param wrapper - the wrapper containing the information to delete \n     * \n     * @throws StorageException -\n     *             if the entry can not be deleted\n     * \n     */\n    public void deleteEntry(final StorageEntryWrapper wrapper)\n            throws StorageException {\n        if(wrapper.getOperation() != StorageOperation.DELETE)\n            throw new StorageException(\"Illegal method call -- insertEntry does not accept other storage operations than delete\");\n        this.lock.lock();\n        try {\n            \n            Term tempTerm = new Term(StorageEntryWrapper.FIELD_ENTRY_ID,\n                    wrapper.getEntryId());\n            this.deletedDocumentQueue.add(tempTerm);\n            storageModified();\n            /*\n             * If storage not written write entry to recoverfile\n             * and make the entry available via the buffer\n             */\n            if(this.modifiedCounter != 0)\n                try{\n                    this.controller.writeRecoverEntry(wrapper);\n                    this.buffer.addDeleted(wrapper.getEntryId(), wrapper.getFeedId());\n                }catch (Exception e) {\n                    /*\n                     * remove from all resources\n                     */\n                 this.deletedDocumentQueue.remove(tempTerm);\n                    \n                }\n        } finally {\n            this.lock.unlock();\n        }\n    }\n\n","sourceOld":"    /**\n     * Deletes the entry for the given entry id.\n     * @param wrapper - the wrapper containing the information to delete \n     * \n     * @throws StorageException -\n     *             if the entry can not be deleted\n     * \n     */\n    public void deleteEntry(final StorageEntryWrapper wrapper)\n            throws StorageException {\n        if(wrapper.getOperation() != StorageOperation.DELETE)\n            throw new StorageException(\"Illegal method call -- insertEntry does not accept other storage operations than delete\");\n        this.lock.lock();\n        try {\n            \n            Term tempTerm = new Term(StorageEntryWrapper.FIELD_ENTRY_ID,\n                    wrapper.getEntryId());\n            this.deletedDocumentQueue.add(tempTerm);\n            storageModified();\n            /*\n             * If storage not written write entry to recoverfile\n             * and make the entry available via the buffer\n             */\n            if(this.modifiedCounter != 0)\n                try{\n                    this.controller.writeRecoverEntry(wrapper);\n                    this.buffer.addDeleted(wrapper.getEntryId(), wrapper.getFeedId());\n                }catch (Exception e) {\n                    /*\n                     * remove from all resources\n                     */\n                 this.deletedDocumentQueue.remove(tempTerm);\n                    \n                }\n        } finally {\n            this.lock.unlock();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#deleteEntry(StorageEntryWrapper).mjava","sourceNew":null,"sourceOld":"    /**\n     * Deletes the entry for the given entry id.\n     * @param wrapper - the wrapper containing the information to delete \n     * \n     * @throws StorageException -\n     *             if the entry can not be deleted\n     * \n     */\n    public void deleteEntry(final StorageEntryWrapper wrapper)\n            throws StorageException {\n        if(wrapper.getOperation() != StorageOperation.DELETE)\n            throw new StorageException(\"Illegal method call -- insertEntry does not accept other storage operations than delete\");\n        this.lock.lock();\n        try {\n            \n            Term tempTerm = new Term(StorageEntryWrapper.FIELD_ENTRY_ID,\n                    wrapper.getEntryId());\n            this.deletedDocumentQueue.add(tempTerm);\n            storageModified();\n            /*\n             * If storage not written write entry to recoverfile\n             * and make the entry available via the buffer\n             */\n            if(this.modifiedCounter != 0)\n                try{\n                    this.controller.writeRecoverEntry(wrapper);\n                    this.buffer.addDeleted(wrapper.getEntryId(), wrapper.getFeedId());\n                }catch (Exception e) {\n                    /*\n                     * remove from all resources\n                     */\n                 this.deletedDocumentQueue.remove(tempTerm);\n                    \n                }\n        } finally {\n            this.lock.unlock();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}