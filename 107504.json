{"path":"solr/core/src/java/org/apache/solr/schema/CurrencyField.ConvertedCurrencyValueSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"8af63063406a531a215fa9c65fae3eee06bc7ab3","date":1362428737,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField.ConvertedCurrencyValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, AtomicReaderContext reader) \n      throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final int sourceFractionDigits = source.getTargetCurrency().getDefaultFractionDigits();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.ConvertedCurrencyValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    public FunctionValues getValues(Map context, AtomicReaderContext reader) \n      throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final int sourceFractionDigits = source.getTargetCurrency().getDefaultFractionDigits();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8af63063406a531a215fa9c65fae3eee06bc7ab3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["8af63063406a531a215fa9c65fae3eee06bc7ab3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"8af63063406a531a215fa9c65fae3eee06bc7ab3":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8af63063406a531a215fa9c65fae3eee06bc7ab3"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}