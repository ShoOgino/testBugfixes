{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelG#score(BasicStats,double).mjava","commits":[{"id":"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46","date":1508899684,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelG#score(BasicStats,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelG#score(BasicStats,float).mjava","sourceNew":"  @Override\n  public final double score(BasicStats stats, double tfn) {\n    // just like in BE, approximation only holds true when F << N, so we use lambda = F / (N + F)\n    double F = stats.getTotalTermFreq() + 1;\n    double N = stats.getNumberOfDocuments();\n    double lambda = F / (N + F);\n    // -log(1 / (lambda + 1)) -> log(lambda + 1)\n    return log2(lambda + 1) + tfn * log2((1 + lambda) / lambda);\n  }\n\n","sourceOld":"  @Override\n  public final float score(BasicStats stats, float tfn) {\n    // just like in BE, approximation only holds true when F << N, so we use lambda = F / (N + F)\n    double F = stats.getTotalTermFreq() + 1;\n    double N = stats.getNumberOfDocuments();\n    double lambda = F / (N + F);\n    // -log(1 / (lambda + 1)) -> log(lambda + 1)\n    return (float)(log2(lambda + 1) + tfn * log2((1 + lambda) / lambda));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83d379038462cf6dcf64cc9e9a49053c4bb78011","date":1512580797,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelG#score(BasicStats,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelG#score(BasicStats,double).mjava","sourceNew":"  @Override\n  public final double score(BasicStats stats, double tfn, double aeTimes1pTfn) {\n    // just like in BE, approximation only holds true when F << N, so we use lambda = F / (N + F)\n    double F = stats.getTotalTermFreq() + 1;\n    double N = stats.getNumberOfDocuments();\n    double lambda = F / (N + F);\n    // -log(1 / (lambda + 1)) -> log(lambda + 1)\n    double A = log2(lambda + 1);\n    double B = log2((1 + lambda) / lambda);\n    \n    // basic model G should return (A + B * tfn)\n    // which we rewrite to B * (1 + tfn) - (B - A)\n    // so that it can be combined with the after effect while still guaranteeing\n    // that the result is non-decreasing with tfn since B >= A\n    \n    return (B - (B - A) / (1 + tfn)) * aeTimes1pTfn;\n  }\n\n","sourceOld":"  @Override\n  public final double score(BasicStats stats, double tfn) {\n    // just like in BE, approximation only holds true when F << N, so we use lambda = F / (N + F)\n    double F = stats.getTotalTermFreq() + 1;\n    double N = stats.getNumberOfDocuments();\n    double lambda = F / (N + F);\n    // -log(1 / (lambda + 1)) -> log(lambda + 1)\n    return log2(lambda + 1) + tfn * log2((1 + lambda) / lambda);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83d379038462cf6dcf64cc9e9a49053c4bb78011":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83d379038462cf6dcf64cc9e9a49053c4bb78011"]},"commit2Childs":{"83d379038462cf6dcf64cc9e9a49053c4bb78011":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["83d379038462cf6dcf64cc9e9a49053c4bb78011"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}