{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale(Directory).mjava","commits":[{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale().mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      if (dir.fileExists((String) file.get(NAME))\n              && dir.fileLength((String) file.get(NAME)) != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   */\n  private boolean isIndexStale() {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file\n              .get(NAME));\n      if (localIndexFile.exists()\n              && localIndexFile.length() != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale().mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      if (dir.fileExists((String) file.get(NAME))\n              && dir.fileLength((String) file.get(NAME)) != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   */\n  private boolean isIndexStale() {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file\n              .get(NAME));\n      if (localIndexFile.exists()\n              && localIndexFile.length() != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98cea0099cc72184db7c3314fb0a5b81a8662543","date":1385273192,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale(Directory).mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      if (dir.fileExists((String) file.get(NAME))\n              && dir.fileLength((String) file.get(NAME)) != (Long) file.get(SIZE)) {\n        LOG.warn(\"File \" + file.get(NAME) + \" expected to be \" + file.get(SIZE)\n            + \" while it is \" + dir.fileLength((String) file.get(NAME)));\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      if (dir.fileExists((String) file.get(NAME))\n              && dir.fileLength((String) file.get(NAME)) != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale(Directory).mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      if (dir.fileExists((String) file.get(NAME))\n              && dir.fileLength((String) file.get(NAME)) != (Long) file.get(SIZE)) {\n        LOG.warn(\"File \" + file.get(NAME) + \" expected to be \" + file.get(SIZE)\n            + \" while it is \" + dir.fileLength((String) file.get(NAME)));\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      if (dir.fileExists((String) file.get(NAME))\n              && dir.fileLength((String) file.get(NAME)) != (Long) file.get(SIZE)) {\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale(Directory).mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      if (slowFileExists(dir, (String) file.get(NAME))\n              && dir.fileLength((String) file.get(NAME)) != (Long) file.get(SIZE)) {\n        LOG.warn(\"File \" + file.get(NAME) + \" expected to be \" + file.get(SIZE)\n            + \" while it is \" + dir.fileLength((String) file.get(NAME)));\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      if (dir.fileExists((String) file.get(NAME))\n              && dir.fileLength((String) file.get(NAME)) != (Long) file.get(SIZE)) {\n        LOG.warn(\"File \" + file.get(NAME) + \" expected to be \" + file.get(SIZE)\n            + \" while it is \" + dir.fileLength((String) file.get(NAME)));\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738","date":1423258737,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale(Directory).mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      Long length = (Long) file.get(SIZE);\n      Long checksum = (Long) file.get(CHECKSUM);\n      if (slowFileExists(dir, filename)) {\n        if (checksum != null) {\n          if (!(compareFile(dir, filename, length, checksum).equal)) {\n            // file exists and size or checksum is different, therefore we must download it again\n            return true;\n          }\n        } else {\n          if (length != dir.fileLength(filename)) {\n            LOG.warn(\"File {} did not match. expected length is {} and actual length is {}\",\n                filename, length, dir.fileLength(filename));\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      if (slowFileExists(dir, (String) file.get(NAME))\n              && dir.fileLength((String) file.get(NAME)) != (Long) file.get(SIZE)) {\n        LOG.warn(\"File \" + file.get(NAME) + \" expected to be \" + file.get(SIZE)\n            + \" while it is \" + dir.fileLength((String) file.get(NAME)));\n        // file exists and size is different, therefore we must assume\n        // corrupted index\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":5,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#isIndexStale(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale(Directory).mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      Long length = (Long) file.get(SIZE);\n      Long checksum = (Long) file.get(CHECKSUM);\n      if (slowFileExists(dir, filename)) {\n        if (checksum != null) {\n          if (!(compareFile(dir, filename, length, checksum).equal)) {\n            // file exists and size or checksum is different, therefore we must download it again\n            return true;\n          }\n        } else {\n          if (length != dir.fileLength(filename)) {\n            LOG.warn(\"File {} did not match. expected length is {} and actual length is {}\",\n                filename, length, dir.fileLength(filename));\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      Long length = (Long) file.get(SIZE);\n      Long checksum = (Long) file.get(CHECKSUM);\n      if (slowFileExists(dir, filename)) {\n        if (checksum != null) {\n          if (!(compareFile(dir, filename, length, checksum).equal)) {\n            // file exists and size or checksum is different, therefore we must download it again\n            return true;\n          }\n        } else {\n          if (length != dir.fileLength(filename)) {\n            LOG.warn(\"File {} did not match. expected length is {} and actual length is {}\",\n                filename, length, dir.fileLength(filename));\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":5,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#isIndexStale(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale(Directory).mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      Long length = (Long) file.get(SIZE);\n      Long checksum = (Long) file.get(CHECKSUM);\n      if (slowFileExists(dir, filename)) {\n        if (checksum != null) {\n          if (!(compareFile(dir, filename, length, checksum).equal)) {\n            // file exists and size or checksum is different, therefore we must download it again\n            return true;\n          }\n        } else {\n          if (length != dir.fileLength(filename)) {\n            LOG.warn(\"File {} did not match. expected length is {} and actual length is {}\",\n                filename, length, dir.fileLength(filename));\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      Long length = (Long) file.get(SIZE);\n      Long checksum = (Long) file.get(CHECKSUM);\n      if (slowFileExists(dir, filename)) {\n        if (checksum != null) {\n          if (!(compareFile(dir, filename, length, checksum).equal)) {\n            // file exists and size or checksum is different, therefore we must download it again\n            return true;\n          }\n        } else {\n          if (length != dir.fileLength(filename)) {\n            LOG.warn(\"File {} did not match. expected length is {} and actual length is {}\",\n                filename, length, dir.fileLength(filename));\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["98cea0099cc72184db7c3314fb0a5b81a8662543"],"8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["d9405f486872f1e416304dfe389741f4ee2f8a4d","98cea0099cc72184db7c3314fb0a5b81a8662543"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2126b84bd093fa3d921582a109a0ee578c28126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"98cea0099cc72184db7c3314fb0a5b81a8662543":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20f6b7cff3771384f27af0f059795d7e64aff6b9"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738"],"8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","f2126b84bd093fa3d921582a109a0ee578c28126","98cea0099cc72184db7c3314fb0a5b81a8662543"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"98cea0099cc72184db7c3314fb0a5b81a8662543":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","74f45af4339b0daf7a95c820ab88c1aea74fbce0","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}