{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#advance(int).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"load skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene41SkipReader(docIn.clone(),\n                                        Lucene41PostingsFormat.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene41SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"load skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene41SkipReader(docIn.clone(),\n                                        Lucene41PostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene41SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"load skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene41SkipReader(docIn.clone(),\n                                        Lucene41PostingsFormat.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene41SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"load skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene41SkipReader(docIn.clone(),\n                                        Lucene41PostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene41SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"load skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new Lucene41SkipReader(docIn.clone(),\n                                        Lucene41PostingsFormat.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in Lucene41SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}