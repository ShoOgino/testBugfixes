{"path":"lucene/core/src/test/org/apache/lucene/util/TestRollingBuffer#test().mjava","commits":[{"id":"6795c6bc2f5a6b2a2230cb20ff4744003faf7802","date":1333839972,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRollingBuffer#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() {\n    \n    final RollingBuffer<Position> buffer = new RollingBuffer<Position>() {\n      @Override\n      protected Position newInstance() {\n        final Position pos = new Position();\n        pos.pos = -1;\n        return pos;\n      }\n    };\n\n    for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n\n      int freeBeforePos = 0;\n      final int maxPos = atLeast(10000);\n      final FixedBitSet posSet = new FixedBitSet(maxPos + 1000);\n      int posUpto = 0;\n      while (freeBeforePos < maxPos) {\n        if (random.nextInt(4) == 1) {\n          final int limit = rarely() ? 1000 : 20;\n          final int inc = random.nextInt(limit);\n          final int pos = freeBeforePos + inc;\n          posUpto = Math.max(posUpto, pos);\n          if (VERBOSE) {\n            System.out.println(\"  check pos=\" + pos + \" posUpto=\" + posUpto);\n          }\n          final Position posData = buffer.get(pos);\n          if (!posSet.getAndSet(pos)) {\n            assertEquals(-1, posData.pos);\n            posData.pos = pos;\n          } else {\n            assertEquals(pos, posData.pos);\n          }\n        } else {\n          if (posUpto > freeBeforePos) {\n            freeBeforePos += random.nextInt(posUpto - freeBeforePos);\n          }\n          if (VERBOSE) {\n            System.out.println(\"  freeBeforePos=\" + freeBeforePos);\n          }\n          buffer.freeBefore(freeBeforePos);\n        }          \n      }\n\n      buffer.reset();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRollingBuffer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRollingBuffer#test().mjava","sourceNew":"  public void test() {\n    \n    final RollingBuffer<Position> buffer = new RollingBuffer<Position>() {\n      @Override\n      protected Position newInstance() {\n        final Position pos = new Position();\n        pos.pos = -1;\n        return pos;\n      }\n    };\n\n    for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n\n      int freeBeforePos = 0;\n      final int maxPos = atLeast(10000);\n      final FixedBitSet posSet = new FixedBitSet(maxPos + 1000);\n      int posUpto = 0;\n      Random random = random();\n      while (freeBeforePos < maxPos) {\n        if (random.nextInt(4) == 1) {\n          final int limit = rarely() ? 1000 : 20;\n          final int inc = random.nextInt(limit);\n          final int pos = freeBeforePos + inc;\n          posUpto = Math.max(posUpto, pos);\n          if (VERBOSE) {\n            System.out.println(\"  check pos=\" + pos + \" posUpto=\" + posUpto);\n          }\n          final Position posData = buffer.get(pos);\n          if (!posSet.getAndSet(pos)) {\n            assertEquals(-1, posData.pos);\n            posData.pos = pos;\n          } else {\n            assertEquals(pos, posData.pos);\n          }\n        } else {\n          if (posUpto > freeBeforePos) {\n            freeBeforePos += random.nextInt(posUpto - freeBeforePos);\n          }\n          if (VERBOSE) {\n            System.out.println(\"  freeBeforePos=\" + freeBeforePos);\n          }\n          buffer.freeBefore(freeBeforePos);\n        }          \n      }\n\n      buffer.reset();\n    }\n  }\n\n","sourceOld":"  public void test() {\n    \n    final RollingBuffer<Position> buffer = new RollingBuffer<Position>() {\n      @Override\n      protected Position newInstance() {\n        final Position pos = new Position();\n        pos.pos = -1;\n        return pos;\n      }\n    };\n\n    for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n\n      int freeBeforePos = 0;\n      final int maxPos = atLeast(10000);\n      final FixedBitSet posSet = new FixedBitSet(maxPos + 1000);\n      int posUpto = 0;\n      while (freeBeforePos < maxPos) {\n        if (random.nextInt(4) == 1) {\n          final int limit = rarely() ? 1000 : 20;\n          final int inc = random.nextInt(limit);\n          final int pos = freeBeforePos + inc;\n          posUpto = Math.max(posUpto, pos);\n          if (VERBOSE) {\n            System.out.println(\"  check pos=\" + pos + \" posUpto=\" + posUpto);\n          }\n          final Position posData = buffer.get(pos);\n          if (!posSet.getAndSet(pos)) {\n            assertEquals(-1, posData.pos);\n            posData.pos = pos;\n          } else {\n            assertEquals(pos, posData.pos);\n          }\n        } else {\n          if (posUpto > freeBeforePos) {\n            freeBeforePos += random.nextInt(posUpto - freeBeforePos);\n          }\n          if (VERBOSE) {\n            System.out.println(\"  freeBeforePos=\" + freeBeforePos);\n          }\n          buffer.freeBefore(freeBeforePos);\n        }          \n      }\n\n      buffer.reset();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6795c6bc2f5a6b2a2230cb20ff4744003faf7802"],"6795c6bc2f5a6b2a2230cb20ff4744003faf7802":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6795c6bc2f5a6b2a2230cb20ff4744003faf7802"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6795c6bc2f5a6b2a2230cb20ff4744003faf7802":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}