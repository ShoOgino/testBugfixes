{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTooManyTokens().mjava","commits":[{"id":"7b0a60ef1cfb11efc4c3ca24b5a894b0eaf65101","date":1412673344,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTooManyTokens().mjava","pathOld":"/dev/null","sourceNew":"  // kind of slow, but omits positions, so just CPU\n  @Nightly\n  public void testTooManyTokens() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    doc.add(new Field(\"foo\", new TokenStream() {\n      CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);\n      long num = 0;\n      \n      @Override\n      public boolean incrementToken() throws IOException {\n        if (num == Integer.MAX_VALUE + 1) {\n          return false;\n        }\n        clearAttributes();\n        if (num == 0) {\n          posIncAtt.setPositionIncrement(1);\n        } else {\n          posIncAtt.setPositionIncrement(0);\n        }\n        termAtt.append(\"a\");\n        num++;\n        if (VERBOSE && num % 1000000 == 0) {\n          System.out.println(\"indexed: \" + num);\n        }\n        return true;\n      }\n    }, ft));\n    try {\n      iw.addDocument(doc);\n      fail(\"didn't hit exception\");\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"too many tokens\"));\n    }\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTooManyTokens().mjava","pathOld":"/dev/null","sourceNew":"  // kind of slow, but omits positions, so just CPU\n  @Nightly\n  public void testTooManyTokens() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    doc.add(new Field(\"foo\", new TokenStream() {\n      CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);\n      long num = 0;\n      \n      @Override\n      public boolean incrementToken() throws IOException {\n        if (num == Integer.MAX_VALUE + 1) {\n          return false;\n        }\n        clearAttributes();\n        if (num == 0) {\n          posIncAtt.setPositionIncrement(1);\n        } else {\n          posIncAtt.setPositionIncrement(0);\n        }\n        termAtt.append(\"a\");\n        num++;\n        if (VERBOSE && num % 1000000 == 0) {\n          System.out.println(\"indexed: \" + num);\n        }\n        return true;\n      }\n    }, ft));\n    try {\n      iw.addDocument(doc);\n      fail(\"didn't hit exception\");\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"too many tokens\"));\n    }\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTooManyTokens().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTooManyTokens().mjava","sourceNew":"  // kind of slow, but omits positions, so just CPU\n  @Nightly\n  public void testTooManyTokens() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    doc.add(new Field(\"foo\", new TokenStream() {\n      CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);\n      long num = 0;\n      \n      @Override\n      public boolean incrementToken() throws IOException {\n        if (num == Integer.MAX_VALUE + 1) {\n          return false;\n        }\n        clearAttributes();\n        if (num == 0) {\n          posIncAtt.setPositionIncrement(1);\n        } else {\n          posIncAtt.setPositionIncrement(0);\n        }\n        termAtt.append(\"a\");\n        num++;\n        if (VERBOSE && num % 1000000 == 0) {\n          System.out.println(\"indexed: \" + num);\n        }\n        return true;\n      }\n    }, ft));\n\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      iw.addDocument(doc);\n    });\n    assertTrue(expected.getMessage().contains(\"too many tokens\"));\n\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // kind of slow, but omits positions, so just CPU\n  @Nightly\n  public void testTooManyTokens() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    doc.add(new Field(\"foo\", new TokenStream() {\n      CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);\n      long num = 0;\n      \n      @Override\n      public boolean incrementToken() throws IOException {\n        if (num == Integer.MAX_VALUE + 1) {\n          return false;\n        }\n        clearAttributes();\n        if (num == 0) {\n          posIncAtt.setPositionIncrement(1);\n        } else {\n          posIncAtt.setPositionIncrement(0);\n        }\n        termAtt.append(\"a\");\n        num++;\n        if (VERBOSE && num % 1000000 == 0) {\n          System.out.println(\"indexed: \" + num);\n        }\n        return true;\n      }\n    }, ft));\n    try {\n      iw.addDocument(doc);\n      fail(\"didn't hit exception\");\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"too many tokens\"));\n    }\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":["7b0a60ef1cfb11efc4c3ca24b5a894b0eaf65101"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7b0a60ef1cfb11efc4c3ca24b5a894b0eaf65101"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["7b0a60ef1cfb11efc4c3ca24b5a894b0eaf65101"],"7b0a60ef1cfb11efc4c3ca24b5a894b0eaf65101":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55980207f1977bd1463465de1659b821347e2fa8","7b0a60ef1cfb11efc4c3ca24b5a894b0eaf65101"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7b0a60ef1cfb11efc4c3ca24b5a894b0eaf65101":["55980207f1977bd1463465de1659b821347e2fa8","05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}