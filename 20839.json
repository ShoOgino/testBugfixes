{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#FieldReader(BlockTreeTermsReader,FieldInfo,long,BytesRef,long,long,int,long,int,IndexInput,BytesRef,BytesRef,boolean,Lucene50PostingsFormat.FSTLoadMode).mjava","commits":[{"id":"938935e3efe6aaecb925448d7f992783247366de","date":1554389977,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#FieldReader(BlockTreeTermsReader,FieldInfo,long,BytesRef,long,long,int,long,int,IndexInput,BytesRef,BytesRef,boolean,Lucene50PostingsFormat.FSTLoadMode).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#FieldReader(BlockTreeTermsReader,FieldInfo,long,BytesRef,long,long,int,long,int,IndexInput,BytesRef,BytesRef,boolean).mjava","sourceNew":"  FieldReader(BlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n              long indexStartFP, int longsSize, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm, boolean openedFromWriter, Lucene50PostingsFormat.FSTLoadMode fstLoadMode) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq;\n    this.sumDocFreq = sumDocFreq;\n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.longsSize = longsSize;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n    rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS;\n    // Initialize FST offheap if index is MMapDirectory and\n    // docCount != sumDocFreq implying field is not primary key\n    if (indexIn != null) {\n      switch (fstLoadMode) {\n        case ON_HEAP:\n          isFSTOffHeap = false;\n          break;\n        case OFF_HEAP:\n          isFSTOffHeap = true;\n          break;\n        case OPTIMIZE_UPDATES_OFF_HEAP:\n          isFSTOffHeap = ((this.docCount != this.sumDocFreq) || openedFromWriter == false);\n          break;\n        case AUTO:\n          isFSTOffHeap = ((this.docCount != this.sumDocFreq) || openedFromWriter == false) && indexIn instanceof ByteBufferIndexInput;\n          break;\n        default:\n          throw new IllegalStateException(\"unknown enum constant: \" + fstLoadMode);\n      }\n      final IndexInput clone = indexIn.clone();\n      clone.seek(indexStartFP);\n      if (isFSTOffHeap) {\n        index = new FST<>(clone, ByteSequenceOutputs.getSingleton(), new OffHeapFSTStore());\n      } else {\n        index = new FST<>(clone, ByteSequenceOutputs.getSingleton());\n      }\n      /*\n        if (false) {\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        }\n      */\n    } else {\n      isFSTOffHeap = false;\n      index = null;\n    }\n  }\n\n","sourceOld":"  FieldReader(BlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n              long indexStartFP, int longsSize, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm, boolean openedFromWriter) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq; \n    this.sumDocFreq = sumDocFreq; \n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.longsSize = longsSize;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n\n    rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS;\n\n    if (indexIn != null) {\n      final IndexInput clone = indexIn.clone();\n      clone.seek(indexStartFP);\n      // Initialize FST offheap if index is MMapDirectory and\n      // docCount != sumDocFreq implying field is not primary key\n      isFSTOffHeap = clone instanceof ByteBufferIndexInput && ((this.docCount != this.sumDocFreq) || openedFromWriter == false);\n      if (isFSTOffHeap) {\n        index = new FST<>(clone, ByteSequenceOutputs.getSingleton(), new OffHeapFSTStore());\n      } else {\n        index = new FST<>(clone, ByteSequenceOutputs.getSingleton());\n      }\n        \n      /*\n        if (false) {\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        }\n      */\n    } else {\n      index = null;\n      isFSTOffHeap = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#FieldReader(BlockTreeTermsReader,FieldInfo,long,BytesRef,long,long,int,long,int,IndexInput,BytesRef,BytesRef,boolean,BlockTreeTermsReader.FSTLoadMode).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#FieldReader(BlockTreeTermsReader,FieldInfo,long,BytesRef,long,long,int,long,int,IndexInput,BytesRef,BytesRef,boolean,Lucene50PostingsFormat.FSTLoadMode).mjava","sourceNew":"  FieldReader(BlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n              long indexStartFP, int longsSize, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm, boolean openedFromWriter, BlockTreeTermsReader.FSTLoadMode fstLoadMode) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq;\n    this.sumDocFreq = sumDocFreq;\n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.longsSize = longsSize;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n    rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS;\n    // Initialize FST offheap if index is MMapDirectory and\n    // docCount != sumDocFreq implying field is not primary key\n    if (indexIn != null) {\n      switch (fstLoadMode) {\n        case ON_HEAP:\n          isFSTOffHeap = false;\n          break;\n        case OFF_HEAP:\n          isFSTOffHeap = true;\n          break;\n        case OPTIMIZE_UPDATES_OFF_HEAP:\n          isFSTOffHeap = ((this.docCount != this.sumDocFreq) || openedFromWriter == false);\n          break;\n        case AUTO:\n          isFSTOffHeap = ((this.docCount != this.sumDocFreq) || openedFromWriter == false) && indexIn instanceof ByteBufferIndexInput;\n          break;\n        default:\n          throw new IllegalStateException(\"unknown enum constant: \" + fstLoadMode);\n      }\n      final IndexInput clone = indexIn.clone();\n      clone.seek(indexStartFP);\n      if (isFSTOffHeap) {\n        index = new FST<>(clone, ByteSequenceOutputs.getSingleton(), new OffHeapFSTStore());\n      } else {\n        index = new FST<>(clone, ByteSequenceOutputs.getSingleton());\n      }\n      /*\n        if (false) {\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        }\n      */\n    } else {\n      isFSTOffHeap = false;\n      index = null;\n    }\n  }\n\n","sourceOld":"  FieldReader(BlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n              long indexStartFP, int longsSize, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm, boolean openedFromWriter, Lucene50PostingsFormat.FSTLoadMode fstLoadMode) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq;\n    this.sumDocFreq = sumDocFreq;\n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.longsSize = longsSize;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n    rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS;\n    // Initialize FST offheap if index is MMapDirectory and\n    // docCount != sumDocFreq implying field is not primary key\n    if (indexIn != null) {\n      switch (fstLoadMode) {\n        case ON_HEAP:\n          isFSTOffHeap = false;\n          break;\n        case OFF_HEAP:\n          isFSTOffHeap = true;\n          break;\n        case OPTIMIZE_UPDATES_OFF_HEAP:\n          isFSTOffHeap = ((this.docCount != this.sumDocFreq) || openedFromWriter == false);\n          break;\n        case AUTO:\n          isFSTOffHeap = ((this.docCount != this.sumDocFreq) || openedFromWriter == false) && indexIn instanceof ByteBufferIndexInput;\n          break;\n        default:\n          throw new IllegalStateException(\"unknown enum constant: \" + fstLoadMode);\n      }\n      final IndexInput clone = indexIn.clone();\n      clone.seek(indexStartFP);\n      if (isFSTOffHeap) {\n        index = new FST<>(clone, ByteSequenceOutputs.getSingleton(), new OffHeapFSTStore());\n      } else {\n        index = new FST<>(clone, ByteSequenceOutputs.getSingleton());\n      }\n      /*\n        if (false) {\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        }\n      */\n    } else {\n      isFSTOffHeap = false;\n      index = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"763da4a9605e47013078edc323b9d4b608f0f9e0":["938935e3efe6aaecb925448d7f992783247366de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"938935e3efe6aaecb925448d7f992783247366de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["763da4a9605e47013078edc323b9d4b608f0f9e0"]},"commit2Childs":{"763da4a9605e47013078edc323b9d4b608f0f9e0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["938935e3efe6aaecb925448d7f992783247366de"],"938935e3efe6aaecb925448d7f992783247366de":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}