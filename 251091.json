{"path":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#doTest().mjava","commits":[{"id":"4e6b620c271c84c0f14919eec7b90083b292ee51","date":1419461736,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    reps = random().nextInt(9) + 1; // make sure and do at least one.\n    try {\n      // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.\n      // shards, replicationfactor, maxreplicaspernode\n      int shards = random().nextInt(7);\n      if (shards < 2) shards = 2;\n      int rFactor = random().nextInt(4);\n      if (rFactor < 2) rFactor = 2;\n      createCollection(null, COLLECTION_NAME, shards, rFactor, shards * rFactor + 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n\n    listCollection();\n\n    rebalanceLeaderTest();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    reps = random().nextInt(9) + 1; // make sure and do at least one.\n    try {\n      // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.\n      // shards, replicationfactor, maxreplicaspernode\n      int shards = random().nextInt(7);\n      if (shards < 2) shards = 2;\n      int rFactor = random().nextInt(4);\n      if (rFactor < 2) rFactor = 2;\n      createCollection(null, COLLECTION_NAME, shards, rFactor, shards * rFactor + 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n\n    listCollection();\n\n    rebalanceLeaderTest();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    reps = random().nextInt(9) + 1; // make sure and do at least one.\n    try {\n      // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.\n      // shards, replicationfactor, maxreplicaspernode\n      int shards = random().nextInt(7);\n      if (shards < 2) shards = 2;\n      int rFactor = random().nextInt(4);\n      if (rFactor < 2) rFactor = 2;\n      createCollection(null, COLLECTION_NAME, shards, rFactor, shards * rFactor + 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n\n    listCollection();\n\n    rebalanceLeaderTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    reps = random().nextInt(9) + 1; // make sure and do at least one.\n    try {\n      // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.\n      // shards, replicationfactor, maxreplicaspernode\n      int shards = random().nextInt(7);\n      if (shards < 2) shards = 2;\n      int rFactor = random().nextInt(4);\n      if (rFactor < 2) rFactor = 2;\n      createCollection(null, COLLECTION_NAME, shards, rFactor, shards * rFactor + 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n\n    listCollection();\n\n    rebalanceLeaderTest();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    reps = random().nextInt(9) + 1; // make sure and do at least one.\n    try {\n      // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.\n      // shards, replicationfactor, maxreplicaspernode\n      int shards = random().nextInt(7);\n      if (shards < 2) shards = 2;\n      int rFactor = random().nextInt(4);\n      if (rFactor < 2) rFactor = 2;\n      createCollection(null, COLLECTION_NAME, shards, rFactor, shards * rFactor + 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n\n    listCollection();\n\n    rebalanceLeaderTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"abb23fcc2461782ab204e61213240feb77d355aa":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"bafca15d8e408346a67f4282ad1143b88023893b":["abb23fcc2461782ab204e61213240feb77d355aa"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}