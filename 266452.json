{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[String],List[String],Policy.Session).mjava","commits":[{"id":"ef7c0ae2232b955007fc003318142c3bdb0e5e8c","date":1515055559,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[String],List[String],Policy.Session).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[String],List[String],SolrCloudManager).mjava","sourceNew":"  public Row(String node, List<String> params, List<String> perReplicaAttributes, Policy.Session session) {\n    collectionVsShardVsReplicas = session.nodeStateProvider.getReplicaInfo(node, perReplicaAttributes);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = session.cloudManager.getClusterStateProvider().getLiveNodes().contains(node);\n    Map<String, Object> vals = isLive ? session.nodeStateProvider.getNodeValues(node, params) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, Clause.validate(s,vals.get(s), false));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","sourceOld":"  public Row(String node, List<String> params, List<String> perReplicaAttributes, SolrCloudManager cloudManager) {\n    NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n    collectionVsShardVsReplicas = nodeStateProvider.getReplicaInfo(node, perReplicaAttributes);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = cloudManager.getClusterStateProvider().getLiveNodes().contains(node);\n    Map<String, Object> vals = isLive ? nodeStateProvider.getNodeValues(node, params) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, Clause.validate(s,vals.get(s), false));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[String],List[String],Policy.Session).mjava","pathOld":"/dev/null","sourceNew":"  public Row(String node, List<String> params, List<String> perReplicaAttributes, Policy.Session session) {\n    collectionVsShardVsReplicas = session.nodeStateProvider.getReplicaInfo(node, perReplicaAttributes);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = session.cloudManager.getClusterStateProvider().getLiveNodes().contains(node);\n    Map<String, Object> vals = isLive ? session.nodeStateProvider.getNodeValues(node, params) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, Clause.validate(s,vals.get(s), false));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":5,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[Pair[String,Suggestion.ConditionType]],List[String],Policy.Session).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,List[String],List[String],Policy.Session).mjava","sourceNew":"  public Row(String node, List<Pair<String, Suggestion.ConditionType>> params, List<String> perReplicaAttributes, Policy.Session session) {\n    this.session = session;\n    collectionVsShardVsReplicas = session.nodeStateProvider.getReplicaInfo(node, perReplicaAttributes);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = session.cloudManager.getClusterStateProvider().getLiveNodes().contains(node);\n    List<String> paramNames = params.stream().map(Pair::first).collect(Collectors.toList());\n    Map<String, Object> vals = isLive ? session.nodeStateProvider.getNodeValues(node, paramNames) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      Pair<String, Suggestion.ConditionType> pair = params.get(i);\n      cells[i] = new Cell(i, pair.first(), Clause.validate(pair.first(), vals.get(pair.first()), false), null, pair.second(), this);\n      if (NODE.equals(pair.first())) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","sourceOld":"  public Row(String node, List<String> params, List<String> perReplicaAttributes, Policy.Session session) {\n    collectionVsShardVsReplicas = session.nodeStateProvider.getReplicaInfo(node, perReplicaAttributes);\n    if (collectionVsShardVsReplicas == null) collectionVsShardVsReplicas = new HashMap<>();\n    this.node = node;\n    cells = new Cell[params.size()];\n    isLive = session.cloudManager.getClusterStateProvider().getLiveNodes().contains(node);\n    Map<String, Object> vals = isLive ? session.nodeStateProvider.getNodeValues(node, params) : Collections.emptyMap();\n    for (int i = 0; i < params.size(); i++) {\n      String s = params.get(i);\n      cells[i] = new Cell(i, s, Clause.validate(s,vals.get(s), false));\n      if (NODE.equals(s)) cells[i].val = node;\n      if (cells[i].val == null) anyValueMissing = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":["7b0249ced9c25c3b173d20c3ca74160b9eade78c"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ef7c0ae2232b955007fc003318142c3bdb0e5e8c"],"ef7c0ae2232b955007fc003318142c3bdb0e5e8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9f0e33082a86447f4f2b59a1a5f69a310500276a"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"ef7c0ae2232b955007fc003318142c3bdb0e5e8c":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","ef7c0ae2232b955007fc003318142c3bdb0e5e8c"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}