{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardResponseParser#processResponse(InputStream,String).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardResponseParser#processResponse(InputStream,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    DataInputStream input = new DataInputStream(body);\n    //check to see if the response is an exception\n    NamedList<Object> exception = new NamedList<>();\n    try {\n      if (input.readBoolean()) {\n        manager.importShardData(input);\n      } else {\n        exception.add(\"Exception\", new ObjectInputStream(input).readObject());\n      }\n    } catch (IOException e) {\n      exception.add(\"Exception\", new SolrException(ErrorCode.SERVER_ERROR, \"Couldn't process analytics shard response\", e));\n    } catch (ClassNotFoundException e1) {\n      throw new RuntimeException(e1);\n    }\n    return exception;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardResponseParser#processResponse(InputStream,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    DataInputStream input = new DataInputStream(body);\n    //check to see if the response is an exception\n    NamedList<Object> exception = new NamedList<>();\n    try {\n      if (input.readBoolean()) {\n        manager.importShardData(input);\n      } else {\n        exception.add(\"Exception\", new ObjectInputStream(input).readObject());\n      }\n    } catch (IOException e) {\n      exception.add(\"Exception\", new SolrException(ErrorCode.SERVER_ERROR, \"Couldn't process analytics shard response\", e));\n    } catch (ClassNotFoundException e1) {\n      throw new RuntimeException(e1);\n    }\n    return exception;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardResponseParser#processResponse(InputStream,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    DataInputStream input = new DataInputStream(body);\n    //check to see if the response is an exception\n    NamedList<Object> exception = new NamedList<>();\n    try {\n      if (input.readBoolean()) {\n        manager.importShardData(input);\n      } else {\n        exception.add(\"Exception\", new ObjectInputStream(input).readObject());\n      }\n    } catch (IOException e) {\n      exception.add(\"Exception\", new SolrException(ErrorCode.SERVER_ERROR, \"Couldn't process analytics shard response\", e));\n    } catch (ClassNotFoundException e1) {\n      throw new RuntimeException(e1);\n    }\n    return exception;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cb5c25025721b90f1f80bf3df99ae2b9a945e6c","date":1576521071,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardResponseParser#processResponse(InputStream,String).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardResponseParser#processResponse(InputStream,String).mjava","sourceNew":"  @Override\n  @SuppressForbidden(reason = \"XXX: security hole\")\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    DataInputStream input = new DataInputStream(body);\n    //check to see if the response is an exception\n    NamedList<Object> exception = new NamedList<>();\n    try {\n      if (input.readBoolean()) {\n        manager.importShardData(input);\n      } else {\n        exception.add(\"Exception\", new ObjectInputStream(input).readObject());\n      }\n    } catch (IOException e) {\n      exception.add(\"Exception\", new SolrException(ErrorCode.SERVER_ERROR, \"Couldn't process analytics shard response\", e));\n    } catch (ClassNotFoundException e1) {\n      throw new RuntimeException(e1);\n    }\n    return exception;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    DataInputStream input = new DataInputStream(body);\n    //check to see if the response is an exception\n    NamedList<Object> exception = new NamedList<>();\n    try {\n      if (input.readBoolean()) {\n        manager.importShardData(input);\n      } else {\n        exception.add(\"Exception\", new ObjectInputStream(input).readObject());\n      }\n    } catch (IOException e) {\n      exception.add(\"Exception\", new SolrException(ErrorCode.SERVER_ERROR, \"Couldn't process analytics shard response\", e));\n    } catch (ClassNotFoundException e1) {\n      throw new RuntimeException(e1);\n    }\n    return exception;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardResponseParser#processResponse(InputStream,String).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardResponseParser#processResponse(InputStream,String).mjava","sourceNew":"  @Override\n  @SuppressForbidden(reason = \"XXX: security hole\")\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    DataInputStream input = new DataInputStream(body);\n    //check to see if the response is an exception\n    NamedList<Object> exception = new NamedList<>();\n    try {\n      if (input.readBoolean()) {\n        manager.importShardData(input);\n      } else {\n        exception.add(\"Exception\", new ObjectInputStream(input).readObject());\n      }\n    } catch (IOException e) {\n      exception.add(\"Exception\", new SolrException(ErrorCode.SERVER_ERROR, \"Couldn't process analytics shard response\", e));\n    } catch (ClassNotFoundException e1) {\n      throw new RuntimeException(e1);\n    }\n    return exception;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> processResponse(InputStream body, String encoding) {\n    DataInputStream input = new DataInputStream(body);\n    //check to see if the response is an exception\n    NamedList<Object> exception = new NamedList<>();\n    try {\n      if (input.readBoolean()) {\n        manager.importShardData(input);\n      } else {\n        exception.add(\"Exception\", new ObjectInputStream(input).readObject());\n      }\n    } catch (IOException e) {\n      exception.add(\"Exception\", new SolrException(ErrorCode.SERVER_ERROR, \"Couldn't process analytics shard response\", e));\n    } catch (ClassNotFoundException e1) {\n      throw new RuntimeException(e1);\n    }\n    return exception;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cb5c25025721b90f1f80bf3df99ae2b9a945e6c":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"b945b8f5bba0303382bc69d60c0c287714f23328":["28288370235ed02234a64753cdbf0c6ec096304a","4cb5c25025721b90f1f80bf3df99ae2b9a945e6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cb5c25025721b90f1f80bf3df99ae2b9a945e6c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"4cb5c25025721b90f1f80bf3df99ae2b9a945e6c":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","4cb5c25025721b90f1f80bf3df99ae2b9a945e6c","b945b8f5bba0303382bc69d60c0c287714f23328"],"b945b8f5bba0303382bc69d60c0c287714f23328":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}