{"path":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest#testRequireZkConnected().mjava","commits":[{"id":"bd22dcd3ba035a1626face7319c94be45ae07172","date":1527224634,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest#testRequireZkConnected().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRequireZkConnected() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(5, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(5, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testRequireZkConnectedCollection\";\n      String configName = collectionName + \"Config\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 2)\n          .process(miniCluster.getSolrClient());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(ShardParams.SHARDS_TOLERANT, \"requireZkConnected\");\n      QueryRequest req = new QueryRequest(params);\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n      Collection<Slice> slices = cloudSolrClient.getZkStateReader().getClusterState().getCollection(collectionName).getSlices();\n      Slice disconnectedSlice = getRandomEntry(slices);\n      Replica disconnectedReplica = getRandomEntry(disconnectedSlice.getReplicas());\n      JettySolrRunner disconnectedJetty = miniCluster.getReplicaJetty(disconnectedReplica);\n      // Use the replica's core URL to avoid ZK communication\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(disconnectedReplica.getCoreUrl()).build()) {\n        ignoreException(\"ZooKeeper is not connected\");\n        disconnectedJetty.getCoreContainer().getZkController().getZkClient().close();\n        req.process(httpSolrClient);\n        fail(\"An exception should be thrown when ZooKeeper is not connected and shards.tolerant=requireZkConnected\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"ZooKeeper is not connected\"));\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd22dcd3ba035a1626face7319c94be45ae07172":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd22dcd3ba035a1626face7319c94be45ae07172"]},"commit2Childs":{"bd22dcd3ba035a1626face7319c94be45ae07172":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd22dcd3ba035a1626face7319c94be45ae07172"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}