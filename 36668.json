{"path":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#testTypes().mjava","commits":[{"id":"be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235","date":1435150219,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#testTypes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    SmileResponseWriter smileResponseWriter = new SmileResponseWriter();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    smileResponseWriter.write(baos,req,rsp);\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(baos.toByteArray()));\n    CharArr out = new CharArr();\n    JSONWriter jsonWriter = new JSONWriter(out, 2);\n    jsonWriter.setIndentSize(-1); // indentation by default\n    jsonWriter.write(m);\n    String s = new String(ZkStateReader.toUTF8(out), StandardCharsets.UTF_8);\n    assertEquals(s , \"{\\\"data1\\\":NaN,\\\"data2\\\":-Infinity,\\\"data3\\\":Infinity}\");\n\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#testTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#testTypes().mjava","sourceNew":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    SmileResponseWriter smileResponseWriter = new SmileResponseWriter();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    smileResponseWriter.write(baos,req,rsp);\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(baos.toByteArray()));\n    CharArr out = new CharArr();\n    JSONWriter jsonWriter = new JSONWriter(out, 2);\n    jsonWriter.setIndentSize(-1); // indentation by default\n    jsonWriter.write(m);\n    String s = new String(Utils.toUTF8(out), StandardCharsets.UTF_8);\n    assertEquals(s , \"{\\\"data1\\\":NaN,\\\"data2\\\":-Infinity,\\\"data3\\\":Infinity}\");\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    SmileResponseWriter smileResponseWriter = new SmileResponseWriter();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    smileResponseWriter.write(baos,req,rsp);\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(baos.toByteArray()));\n    CharArr out = new CharArr();\n    JSONWriter jsonWriter = new JSONWriter(out, 2);\n    jsonWriter.setIndentSize(-1); // indentation by default\n    jsonWriter.write(m);\n    String s = new String(ZkStateReader.toUTF8(out), StandardCharsets.UTF_8);\n    assertEquals(s , \"{\\\"data1\\\":NaN,\\\"data2\\\":-Infinity,\\\"data3\\\":Infinity}\");\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a","date":1474893506,"type":4,"author":"Christine Poerschke","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#testTypes().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    SmileResponseWriter smileResponseWriter = new SmileResponseWriter();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    smileResponseWriter.write(baos,req,rsp);\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(baos.toByteArray()));\n    CharArr out = new CharArr();\n    JSONWriter jsonWriter = new JSONWriter(out, 2);\n    jsonWriter.setIndentSize(-1); // indentation by default\n    jsonWriter.write(m);\n    String s = new String(Utils.toUTF8(out), StandardCharsets.UTF_8);\n    assertEquals(s , \"{\\\"data1\\\":NaN,\\\"data2\\\":-Infinity,\\\"data3\\\":Infinity}\");\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/SmileWriterTest#testTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#testTypes().mjava","sourceNew":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    SmileResponseWriter smileResponseWriter = new SmileResponseWriter();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    smileResponseWriter.write(baos,req,rsp);\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(baos.toByteArray()));\n    CharArr out = new CharArr();\n    JSONWriter jsonWriter = new JSONWriter(out, 2);\n    jsonWriter.setIndentSize(-1); // indentation by default\n    jsonWriter.write(m);\n    String s = new String(Utils.toUTF8(out), StandardCharsets.UTF_8);\n    assertEquals(s , \"{\\\"data1\\\":NaN,\\\"data2\\\":-Infinity,\\\"data3\\\":Infinity}\");\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    SmileResponseWriter smileResponseWriter = new SmileResponseWriter();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    smileResponseWriter.write(baos,req,rsp);\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(baos.toByteArray()));\n    CharArr out = new CharArr();\n    JSONWriter jsonWriter = new JSONWriter(out, 2);\n    jsonWriter.setIndentSize(-1); // indentation by default\n    jsonWriter.write(m);\n    String s = new String(Utils.toUTF8(out), StandardCharsets.UTF_8);\n    assertEquals(s , \"{\\\"data1\\\":NaN,\\\"data2\\\":-Infinity,\\\"data3\\\":Infinity}\");\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/SmileWriterTest#testTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#testTypes().mjava","sourceNew":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    SmileResponseWriter smileResponseWriter = new SmileResponseWriter();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    smileResponseWriter.write(baos,req,rsp);\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(baos.toByteArray()));\n    CharArr out = new CharArr();\n    JSONWriter jsonWriter = new JSONWriter(out, 2);\n    jsonWriter.setIndentSize(-1); // indentation by default\n    jsonWriter.write(m);\n    String s = new String(Utils.toUTF8(out), StandardCharsets.UTF_8);\n    assertEquals(s , \"{\\\"data1\\\":NaN,\\\"data2\\\":-Infinity,\\\"data3\\\":Infinity}\");\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    SmileResponseWriter smileResponseWriter = new SmileResponseWriter();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    smileResponseWriter.write(baos,req,rsp);\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(baos.toByteArray()));\n    CharArr out = new CharArr();\n    JSONWriter jsonWriter = new JSONWriter(out, 2);\n    jsonWriter.setIndentSize(-1); // indentation by default\n    jsonWriter.write(m);\n    String s = new String(Utils.toUTF8(out), StandardCharsets.UTF_8);\n    assertEquals(s , \"{\\\"data1\\\":NaN,\\\"data2\\\":-Infinity,\\\"data3\\\":Infinity}\");\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b693a83132c9e45afcd564fd65a25b60ed80388b","b564b6c464f1c4b1f8e676b2b9b1558c34634b3a"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235"],"be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b693a83132c9e45afcd564fd65a25b60ed80388b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["b564b6c464f1c4b1f8e676b2b9b1558c34634b3a","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}