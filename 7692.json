{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase#query(int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase#query(int).mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase#query(int).mjava","sourceNew":"  private void query(int count) throws SolrServerException, IOException {\n    SolrServer gserver = this.getSolrServer();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = gserver.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(count, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void query(int count) throws SolrServerException, IOException {\n    SolrServer gserver = this.getSolrServer();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = gserver.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(count, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase#query(int).mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase#query(int).mjava","sourceNew":"  private void query(int count) throws SolrServerException, IOException {\n    SolrServer gserver = this.getSolrServer();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = gserver.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(count, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void query(int count) throws SolrServerException, IOException {\n    SolrServer gserver = this.getSolrServer();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = gserver.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(count, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase#query(int).mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase#query(int).mjava","sourceNew":"  private void query(int count) throws SolrServerException, IOException {\n    SolrServer gserver = this.getSolrServer();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = gserver.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(count, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void query(int count) throws SolrServerException, IOException {\n    SolrServer gserver = this.getSolrServer();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = gserver.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(count, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase#query(int).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase#query(int).mjava","sourceNew":"  private void query(int count) throws SolrServerException {\n    SolrServer gserver = this.getSolrServer();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = gserver.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(count, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void query(int count) throws SolrServerException, IOException {\n    SolrServer gserver = this.getSolrServer();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = gserver.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(count, response.getResults().getNumFound());\n  }\n\n","bugFix":["1120e71c0583ecdee6258cbe78707eac06e96a1f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase#query(int).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase#query(int).mjava","sourceNew":"  private void query(int count) throws SolrServerException {\n    SolrServer gserver = this.getSolrServer();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = gserver.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(count, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void query(int count) throws SolrServerException, IOException {\n    SolrServer gserver = this.getSolrServer();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = gserver.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(count, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase#query(int).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase#query(int).mjava","sourceNew":"  private void query(int count) throws SolrServerException {\n    SolrClient client = this.getSolrClient();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = client.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(count, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void query(int count) throws SolrServerException {\n    SolrServer gserver = this.getSolrServer();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = gserver.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(count, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa","date":1425039471,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase#query(int).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase#query(int).mjava","sourceNew":"  private void query(int count) throws SolrServerException, IOException {\n    SolrClient client = this.getSolrClient();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = client.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(count, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void query(int count) throws SolrServerException {\n    SolrClient client = this.getSolrClient();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = client.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(count, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase#query(int).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/LargeVolumeTestBase#query(int).mjava","sourceNew":"  private void query(int count) throws SolrServerException, IOException {\n    SolrClient client = this.getSolrClient();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = client.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(count, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void query(int count) throws SolrServerException {\n    SolrClient client = this.getSolrClient();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = client.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(count, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["bafca15d8e408346a67f4282ad1143b88023893b","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["bafca15d8e408346a67f4282ad1143b88023893b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}