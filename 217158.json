{"path":"src/test/org/apache/lucene/store/MockRAMDirectory#openInput(String).mjava","commits":[{"id":"6a9c72bd2eb83901c17f22729e7a4d3d2b18c4b9","date":1172996731,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#openInput(String).mjava","pathOld":"/dev/null","sourceNew":"  public IndexInput openInput(String name) throws IOException {\n    RAMFile file;\n    synchronized (this) {\n      file = (RAMFile)fileMap.get(name);\n    }\n    if (file == null)\n      throw new FileNotFoundException(name);\n    else {\n      synchronized(openFiles) {\n        if (openFiles.containsKey(name)) {\n          Integer v = (Integer) openFiles.get(name);\n          v = new Integer(v.intValue()+1);\n          openFiles.put(name, v);\n        } else {\n          openFiles.put(name, new Integer(1));\n        }\n      }\n    }\n    return new MockRAMInputStream(this, name, file);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c65000dee855f8d7329bd4f6310cb44af4d63bd3","2a186ae8733084223c22044e935e4ef848a143d1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c65000dee855f8d7329bd4f6310cb44af4d63bd3","date":1242673652,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#openInput(String).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#openInput(String).mjava","sourceNew":"  public synchronized IndexInput openInput(String name) throws IOException {\n    RAMFile file = (RAMFile)fileMap.get(name);\n    if (file == null)\n      throw new FileNotFoundException(name);\n    else {\n      if (openFiles.containsKey(name)) {\n        Integer v = (Integer) openFiles.get(name);\n        v = new Integer(v.intValue()+1);\n        openFiles.put(name, v);\n      } else {\n         openFiles.put(name, new Integer(1));\n      }\n    }\n    return new MockRAMInputStream(this, name, file);\n  }\n\n","sourceOld":"  public IndexInput openInput(String name) throws IOException {\n    RAMFile file;\n    synchronized (this) {\n      file = (RAMFile)fileMap.get(name);\n    }\n    if (file == null)\n      throw new FileNotFoundException(name);\n    else {\n      synchronized(openFiles) {\n        if (openFiles.containsKey(name)) {\n          Integer v = (Integer) openFiles.get(name);\n          v = new Integer(v.intValue()+1);\n          openFiles.put(name, v);\n        } else {\n          openFiles.put(name, new Integer(1));\n        }\n      }\n    }\n    return new MockRAMInputStream(this, name, file);\n  }\n\n","bugFix":["6a9c72bd2eb83901c17f22729e7a4d3d2b18c4b9"],"bugIntro":["2a186ae8733084223c22044e935e4ef848a143d1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#openInput(String).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#openInput(String).mjava","sourceNew":"  public synchronized IndexInput openInput(String name) throws IOException {\n    RAMFile file = (RAMFile)fileMap.get(name);\n    if (file == null)\n      throw new FileNotFoundException(name);\n    else {\n      if (openFiles.containsKey(name)) {\n        Integer v = (Integer) openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        openFiles.put(name, v);\n      } else {\n         openFiles.put(name, Integer.valueOf(1));\n      }\n    }\n    return new MockRAMInputStream(this, name, file);\n  }\n\n","sourceOld":"  public synchronized IndexInput openInput(String name) throws IOException {\n    RAMFile file = (RAMFile)fileMap.get(name);\n    if (file == null)\n      throw new FileNotFoundException(name);\n    else {\n      if (openFiles.containsKey(name)) {\n        Integer v = (Integer) openFiles.get(name);\n        v = new Integer(v.intValue()+1);\n        openFiles.put(name, v);\n      } else {\n         openFiles.put(name, new Integer(1));\n      }\n    }\n    return new MockRAMInputStream(this, name, file);\n  }\n\n","bugFix":null,"bugIntro":["2a186ae8733084223c22044e935e4ef848a143d1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#openInput(String).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#openInput(String).mjava","sourceNew":"  public synchronized IndexInput openInput(String name) throws IOException {\n    RAMFile file = fileMap.get(name);\n    if (file == null)\n      throw new FileNotFoundException(name);\n    else {\n      if (openFiles.containsKey(name)) {\n        Integer v = (Integer) openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        openFiles.put(name, v);\n      } else {\n         openFiles.put(name, Integer.valueOf(1));\n      }\n    }\n    return new MockRAMInputStream(this, name, file);\n  }\n\n","sourceOld":"  public synchronized IndexInput openInput(String name) throws IOException {\n    RAMFile file = (RAMFile)fileMap.get(name);\n    if (file == null)\n      throw new FileNotFoundException(name);\n    else {\n      if (openFiles.containsKey(name)) {\n        Integer v = (Integer) openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        openFiles.put(name, v);\n      } else {\n         openFiles.put(name, Integer.valueOf(1));\n      }\n    }\n    return new MockRAMInputStream(this, name, file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#openInput(String).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#openInput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name) throws IOException {\n    RAMFile file = fileMap.get(name);\n    if (file == null)\n      throw new FileNotFoundException(name);\n    else {\n      if (openFiles.containsKey(name)) {\n        Integer v = (Integer) openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        openFiles.put(name, v);\n      } else {\n         openFiles.put(name, Integer.valueOf(1));\n      }\n    }\n    return new MockRAMInputStream(this, name, file);\n  }\n\n","sourceOld":"  public synchronized IndexInput openInput(String name) throws IOException {\n    RAMFile file = fileMap.get(name);\n    if (file == null)\n      throw new FileNotFoundException(name);\n    else {\n      if (openFiles.containsKey(name)) {\n        Integer v = (Integer) openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        openFiles.put(name, v);\n      } else {\n         openFiles.put(name, Integer.valueOf(1));\n      }\n    }\n    return new MockRAMInputStream(this, name, file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7848880b3c06f09f0f3ac50d0854b16efb0b815e","date":1260006234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#openInput(String).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#openInput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name) throws IOException {\n    RAMFile file = fileMap.get(name);\n    if (file == null)\n      throw new FileNotFoundException(name);\n    else {\n      if (openFiles.containsKey(name)) {\n        Integer v =  openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        openFiles.put(name, v);\n      } else {\n         openFiles.put(name, Integer.valueOf(1));\n      }\n    }\n    return new MockRAMInputStream(this, name, file);\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name) throws IOException {\n    RAMFile file = fileMap.get(name);\n    if (file == null)\n      throw new FileNotFoundException(name);\n    else {\n      if (openFiles.containsKey(name)) {\n        Integer v = (Integer) openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        openFiles.put(name, v);\n      } else {\n         openFiles.put(name, Integer.valueOf(1));\n      }\n    }\n    return new MockRAMInputStream(this, name, file);\n  }\n\n","bugFix":null,"bugIntro":["2a186ae8733084223c22044e935e4ef848a143d1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#openInput(String).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#openInput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name) throws IOException {\n    RAMFile file = fileMap.get(name);\n    if (file == null)\n      throw new FileNotFoundException(name);\n    else {\n      if (openFiles.containsKey(name)) {\n        Integer v =  openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        openFiles.put(name, v);\n      } else {\n         openFiles.put(name, Integer.valueOf(1));\n      }\n    }\n    return new MockRAMInputStream(this, name, file);\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name) throws IOException {\n    RAMFile file = fileMap.get(name);\n    if (file == null)\n      throw new FileNotFoundException(name);\n    else {\n      if (openFiles.containsKey(name)) {\n        Integer v =  openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        openFiles.put(name, v);\n      } else {\n         openFiles.put(name, Integer.valueOf(1));\n      }\n    }\n    return new MockRAMInputStream(this, name, file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["ef82ff03e4016c705811b2658e81471a645c0e49"],"6bcde5e3f23911110baa101ed062b544162825b5":["c65000dee855f8d7329bd4f6310cb44af4d63bd3"],"6a9c72bd2eb83901c17f22729e7a4d3d2b18c4b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef82ff03e4016c705811b2658e81471a645c0e49":["6bcde5e3f23911110baa101ed062b544162825b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c65000dee855f8d7329bd4f6310cb44af4d63bd3":["6a9c72bd2eb83901c17f22729e7a4d3d2b18c4b9"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"6bcde5e3f23911110baa101ed062b544162825b5":["ef82ff03e4016c705811b2658e81471a645c0e49"],"6a9c72bd2eb83901c17f22729e7a4d3d2b18c4b9":["c65000dee855f8d7329bd4f6310cb44af4d63bd3"],"ef82ff03e4016c705811b2658e81471a645c0e49":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6a9c72bd2eb83901c17f22729e7a4d3d2b18c4b9"],"c65000dee855f8d7329bd4f6310cb44af4d63bd3":["6bcde5e3f23911110baa101ed062b544162825b5"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}