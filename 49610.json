{"path":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointDistanceRangeQuery#rewrite(IndexReader).mjava","commits":[{"id":"0222f69d35b097815cb3e3e4843fb6a10e4f80c7","date":1445287257,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointDistanceRangeQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) {\n    Query q = super.rewrite(reader);\n    if (minRadius == 0.0) {\n      return q;\n    }\n\n    final double radius;\n    if (q instanceof BooleanQuery) {\n      final List<BooleanClause> clauses = ((BooleanQuery)q).clauses();\n      assert clauses.size() > 0;\n      radius = ((GeoPointDistanceQueryImpl)(clauses.get(0).getQuery())).getRadius();\n    } else {\n      radius = ((GeoPointDistanceQueryImpl)q).getRadius();\n    }\n\n    // add an exclusion query\n    BooleanQuery.Builder bqb = new BooleanQuery.Builder();\n\n    // create a new exclusion query\n    GeoPointDistanceQuery exclude = new GeoPointDistanceQuery(field, centerLon, centerLat, minRadius);\n    // full map search\n    if (radius >= GeoProjectionUtils.SEMIMINOR_AXIS) {\n      bqb.add(new BooleanClause(new GeoPointInBBoxQuery(this.field, -180.0, -90.0, 180.0, 90.0), BooleanClause.Occur.MUST));\n    } else {\n      bqb.add(new BooleanClause(q, BooleanClause.Occur.MUST));\n    }\n    bqb.add(new BooleanClause(exclude, BooleanClause.Occur.MUST_NOT));\n\n    return bqb.build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b64310504f2f0fce3bdfd240b1247cfcc1459066","date":1445289114,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointDistanceRangeQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointDistanceRangeQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) {\n    Query q = super.rewrite(reader);\n    if (minRadius == 0.0) {\n      return q;\n    }\n\n    // add an exclusion query\n    BooleanQuery.Builder bqb = new BooleanQuery.Builder();\n\n    // create a new exclusion query\n    GeoPointDistanceQuery exclude = new GeoPointDistanceQuery(field, centerLon, centerLat, minRadius);\n    // full map search\n    if (radius >= GeoProjectionUtils.SEMIMINOR_AXIS) {\n      bqb.add(new BooleanClause(new GeoPointInBBoxQuery(this.field, -180.0, -90.0, 180.0, 90.0), BooleanClause.Occur.MUST));\n    } else {\n      bqb.add(new BooleanClause(q, BooleanClause.Occur.MUST));\n    }\n    bqb.add(new BooleanClause(exclude, BooleanClause.Occur.MUST_NOT));\n\n    return bqb.build();\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) {\n    Query q = super.rewrite(reader);\n    if (minRadius == 0.0) {\n      return q;\n    }\n\n    final double radius;\n    if (q instanceof BooleanQuery) {\n      final List<BooleanClause> clauses = ((BooleanQuery)q).clauses();\n      assert clauses.size() > 0;\n      radius = ((GeoPointDistanceQueryImpl)(clauses.get(0).getQuery())).getRadius();\n    } else {\n      radius = ((GeoPointDistanceQueryImpl)q).getRadius();\n    }\n\n    // add an exclusion query\n    BooleanQuery.Builder bqb = new BooleanQuery.Builder();\n\n    // create a new exclusion query\n    GeoPointDistanceQuery exclude = new GeoPointDistanceQuery(field, centerLon, centerLat, minRadius);\n    // full map search\n    if (radius >= GeoProjectionUtils.SEMIMINOR_AXIS) {\n      bqb.add(new BooleanClause(new GeoPointInBBoxQuery(this.field, -180.0, -90.0, 180.0, 90.0), BooleanClause.Occur.MUST));\n    } else {\n      bqb.add(new BooleanClause(q, BooleanClause.Occur.MUST));\n    }\n    bqb.add(new BooleanClause(exclude, BooleanClause.Occur.MUST_NOT));\n\n    return bqb.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07c50cb1eca5629cac5b6702dd0f5e06157af61a","date":1445464748,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointDistanceRangeQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointDistanceRangeQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) {\n    Query q = super.rewrite(reader);\n    if (minRadiusMeters == 0.0) {\n      return q;\n    }\n\n    // add an exclusion query\n    BooleanQuery.Builder bqb = new BooleanQuery.Builder();\n\n    // create a new exclusion query\n    GeoPointDistanceQuery exclude = new GeoPointDistanceQuery(field, centerLon, centerLat, minRadiusMeters);\n    // full map search\n//    if (radiusMeters >= GeoProjectionUtils.SEMIMINOR_AXIS) {\n//      bqb.add(new BooleanClause(new GeoPointInBBoxQuery(this.field, -180.0, -90.0, 180.0, 90.0), BooleanClause.Occur.MUST));\n//    } else {\n      bqb.add(new BooleanClause(q, BooleanClause.Occur.MUST));\n//    }\n    bqb.add(new BooleanClause(exclude, BooleanClause.Occur.MUST_NOT));\n\n    return bqb.build();\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) {\n    Query q = super.rewrite(reader);\n    if (minRadius == 0.0) {\n      return q;\n    }\n\n    // add an exclusion query\n    BooleanQuery.Builder bqb = new BooleanQuery.Builder();\n\n    // create a new exclusion query\n    GeoPointDistanceQuery exclude = new GeoPointDistanceQuery(field, centerLon, centerLat, minRadius);\n    // full map search\n    if (radius >= GeoProjectionUtils.SEMIMINOR_AXIS) {\n      bqb.add(new BooleanClause(new GeoPointInBBoxQuery(this.field, -180.0, -90.0, 180.0, 90.0), BooleanClause.Occur.MUST));\n    } else {\n      bqb.add(new BooleanClause(q, BooleanClause.Occur.MUST));\n    }\n    bqb.add(new BooleanClause(exclude, BooleanClause.Occur.MUST_NOT));\n\n    return bqb.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointDistanceRangeQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointDistanceRangeQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) {\n    Query q = super.rewrite(reader);\n    if (minRadiusMeters == 0.0) {\n      return q;\n    }\n\n    // add an exclusion query\n    BooleanQuery.Builder bqb = new BooleanQuery.Builder();\n\n    // create a new exclusion query\n    GeoPointDistanceQuery exclude = new GeoPointDistanceQuery(field, centerLon, centerLat, minRadiusMeters);\n    // full map search\n//    if (radiusMeters >= GeoProjectionUtils.SEMIMINOR_AXIS) {\n//      bqb.add(new BooleanClause(new GeoPointInBBoxQuery(this.field, -180.0, -90.0, 180.0, 90.0), BooleanClause.Occur.MUST));\n//    } else {\n      bqb.add(new BooleanClause(q, BooleanClause.Occur.MUST));\n//    }\n    bqb.add(new BooleanClause(exclude, BooleanClause.Occur.MUST_NOT));\n\n    return bqb.build();\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) {\n    Query q = super.rewrite(reader);\n    if (minRadiusMeters == 0.0) {\n      return q;\n    }\n\n    // add an exclusion query\n    BooleanQuery.Builder bqb = new BooleanQuery.Builder();\n\n    // create a new exclusion query\n    GeoPointDistanceQuery exclude = new GeoPointDistanceQuery(field, centerLon, centerLat, minRadiusMeters);\n    // full map search\n//    if (radiusMeters >= GeoProjectionUtils.SEMIMINOR_AXIS) {\n//      bqb.add(new BooleanClause(new GeoPointInBBoxQuery(this.field, -180.0, -90.0, 180.0, 90.0), BooleanClause.Occur.MUST));\n//    } else {\n      bqb.add(new BooleanClause(q, BooleanClause.Occur.MUST));\n//    }\n    bqb.add(new BooleanClause(exclude, BooleanClause.Occur.MUST_NOT));\n\n    return bqb.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointDistanceRangeQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointDistanceRangeQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) {\n    Query q = super.rewrite(reader);\n    if (minRadiusMeters == 0.0) {\n      return q;\n    }\n\n    // add an exclusion query\n    BooleanQuery.Builder bqb = new BooleanQuery.Builder();\n\n    // create a new exclusion query\n    GeoPointDistanceQuery exclude = new GeoPointDistanceQuery(field, termEncoding, centerLon, centerLat, minRadiusMeters);\n    // full map search\n//    if (radiusMeters >= GeoProjectionUtils.SEMIMINOR_AXIS) {\n//      bqb.add(new BooleanClause(new GeoPointInBBoxQuery(this.field, -180.0, -90.0, 180.0, 90.0), BooleanClause.Occur.MUST));\n//    } else {\n      bqb.add(new BooleanClause(q, BooleanClause.Occur.MUST));\n//    }\n    bqb.add(new BooleanClause(exclude, BooleanClause.Occur.MUST_NOT));\n\n    return bqb.build();\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) {\n    Query q = super.rewrite(reader);\n    if (minRadiusMeters == 0.0) {\n      return q;\n    }\n\n    // add an exclusion query\n    BooleanQuery.Builder bqb = new BooleanQuery.Builder();\n\n    // create a new exclusion query\n    GeoPointDistanceQuery exclude = new GeoPointDistanceQuery(field, centerLon, centerLat, minRadiusMeters);\n    // full map search\n//    if (radiusMeters >= GeoProjectionUtils.SEMIMINOR_AXIS) {\n//      bqb.add(new BooleanClause(new GeoPointInBBoxQuery(this.field, -180.0, -90.0, 180.0, 90.0), BooleanClause.Occur.MUST));\n//    } else {\n      bqb.add(new BooleanClause(q, BooleanClause.Occur.MUST));\n//    }\n    bqb.add(new BooleanClause(exclude, BooleanClause.Occur.MUST_NOT));\n\n    return bqb.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["07c50cb1eca5629cac5b6702dd0f5e06157af61a","937923083e4d137932336fc80f3d78758ff698a6"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["b64310504f2f0fce3bdfd240b1247cfcc1459066"],"b64310504f2f0fce3bdfd240b1247cfcc1459066":["0222f69d35b097815cb3e3e4843fb6a10e4f80c7"],"0222f69d35b097815cb3e3e4843fb6a10e4f80c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"937923083e4d137932336fc80f3d78758ff698a6":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0222f69d35b097815cb3e3e4843fb6a10e4f80c7"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"b64310504f2f0fce3bdfd240b1247cfcc1459066":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"0222f69d35b097815cb3e3e4843fb6a10e4f80c7":["b64310504f2f0fce3bdfd240b1247cfcc1459066"],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}