{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","sourceNew":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @param a\n   * @param b\n   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    // Negative query if absolute value different from original\n    Query absQ = QueryUtils.getAbs(a);\n    DocSet positiveA = getPositiveDocSet(absQ);\n    return a==absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n  }\n\n","sourceOld":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @param a\n   * @param b\n   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    // Negative query if absolute value different from original\n    Query absQ = QueryUtils.getAbs(a);\n    DocSet positiveA = getPositiveDocSet(absQ);\n    return a==absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","sourceNew":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @param a\n   * @param b\n   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    // Negative query if absolute value different from original\n    Query absQ = QueryUtils.getAbs(a);\n    DocSet positiveA = getPositiveDocSet(absQ);\n    return a==absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n  }\n\n","sourceOld":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @param a\n   * @param b\n   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    // Negative query if absolute value different from original\n    Query absQ = QueryUtils.getAbs(a);\n    DocSet positiveA = getPositiveDocSet(absQ);\n    return a==absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","sourceNew":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @param a\n   * @param b\n   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    // Negative query if absolute value different from original\n    Query absQ = QueryUtils.getAbs(a);\n    DocSet positiveA = getPositiveDocSet(absQ);\n    return a==absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n  }\n\n","sourceOld":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @param a\n   * @param b\n   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    // Negative query if absolute value different from original\n    Query absQ = QueryUtils.getAbs(a);\n    DocSet positiveA = getPositiveDocSet(absQ);\n    return a==absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","sourceNew":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    // Negative query if absolute value different from original\n    Query absQ = QueryUtils.getAbs(a);\n    DocSet positiveA = getPositiveDocSet(absQ);\n    return a==absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n  }\n\n","sourceOld":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @param a\n   * @param b\n   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    // Negative query if absolute value different from original\n    Query absQ = QueryUtils.getAbs(a);\n    DocSet positiveA = getPositiveDocSet(absQ);\n    return a==absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5fed4f1fc33765fb27864e780fd52f2b0d94686","date":1373050996,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","sourceNew":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    if (filterCache != null) {\n      // Negative query if absolute value different from original\n      Query absQ = QueryUtils.getAbs(a);\n      DocSet positiveA = getPositiveDocSet(absQ);\n      return a==absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n    } else {\n      // If there isn't a cache, then do a single filtered query\n      // NOTE: we cannot use FilteredQuery, because BitDocSet assumes it will never \n      // have deleted documents, but UninvertedField's doNegative has sets with deleted docs\n      TotalHitCountCollector collector = new TotalHitCountCollector();\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(QueryUtils.makeQueryable(a), BooleanClause.Occur.MUST);\n      bq.add(new ConstantScoreQuery(b.getTopFilter()), BooleanClause.Occur.MUST);\n      super.search(bq, null, collector);\n      return collector.getTotalHits();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    // Negative query if absolute value different from original\n    Query absQ = QueryUtils.getAbs(a);\n    DocSet positiveA = getPositiveDocSet(absQ);\n    return a==absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","sourceNew":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    if (filterCache != null) {\n      // Negative query if absolute value different from original\n      Query absQ = QueryUtils.getAbs(a);\n      DocSet positiveA = getPositiveDocSet(absQ);\n      return a==absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n    } else {\n      // If there isn't a cache, then do a single filtered query\n      // NOTE: we cannot use FilteredQuery, because BitDocSet assumes it will never \n      // have deleted documents, but UninvertedField's doNegative has sets with deleted docs\n      TotalHitCountCollector collector = new TotalHitCountCollector();\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(QueryUtils.makeQueryable(a), BooleanClause.Occur.MUST);\n      bq.add(new ConstantScoreQuery(b.getTopFilter()), BooleanClause.Occur.MUST);\n      super.search(bq, null, collector);\n      return collector.getTotalHits();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    // Negative query if absolute value different from original\n    Query absQ = QueryUtils.getAbs(a);\n    DocSet positiveA = getPositiveDocSet(absQ);\n    return a==absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","sourceNew":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    if (filterCache != null) {\n      // Negative query if absolute value different from original\n      Query absQ = QueryUtils.getAbs(a);\n      DocSet positiveA = getPositiveDocSet(absQ);\n      return a==absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n    } else {\n      // If there isn't a cache, then do a single filtered query\n      // NOTE: we cannot use FilteredQuery, because BitDocSet assumes it will never \n      // have deleted documents, but UninvertedField's doNegative has sets with deleted docs\n      TotalHitCountCollector collector = new TotalHitCountCollector();\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(QueryUtils.makeQueryable(a), BooleanClause.Occur.MUST);\n      bq.add(new ConstantScoreQuery(b.getTopFilter()), BooleanClause.Occur.MUST);\n      super.search(bq, collector);\n      return collector.getTotalHits();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    if (filterCache != null) {\n      // Negative query if absolute value different from original\n      Query absQ = QueryUtils.getAbs(a);\n      DocSet positiveA = getPositiveDocSet(absQ);\n      return a==absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n    } else {\n      // If there isn't a cache, then do a single filtered query\n      // NOTE: we cannot use FilteredQuery, because BitDocSet assumes it will never \n      // have deleted documents, but UninvertedField's doNegative has sets with deleted docs\n      TotalHitCountCollector collector = new TotalHitCountCollector();\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(QueryUtils.makeQueryable(a), BooleanClause.Occur.MUST);\n      bq.add(new ConstantScoreQuery(b.getTopFilter()), BooleanClause.Occur.MUST);\n      super.search(bq, null, collector);\n      return collector.getTotalHits();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","sourceNew":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    if (filterCache != null) {\n      // Negative query if absolute value different from original\n      Query absQ = QueryUtils.getAbs(a);\n      DocSet positiveA = getPositiveDocSet(absQ);\n      return a==absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n    } else {\n      // If there isn't a cache, then do a single filtered query\n      // NOTE: we cannot use FilteredQuery, because BitDocSet assumes it will never \n      // have deleted documents, but UninvertedField's doNegative has sets with deleted docs\n      TotalHitCountCollector collector = new TotalHitCountCollector();\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(QueryUtils.makeQueryable(a), BooleanClause.Occur.MUST);\n      bq.add(new ConstantScoreQuery(b.getTopFilter()), BooleanClause.Occur.MUST);\n      super.search(bq.build(), collector);\n      return collector.getTotalHits();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    if (filterCache != null) {\n      // Negative query if absolute value different from original\n      Query absQ = QueryUtils.getAbs(a);\n      DocSet positiveA = getPositiveDocSet(absQ);\n      return a==absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n    } else {\n      // If there isn't a cache, then do a single filtered query\n      // NOTE: we cannot use FilteredQuery, because BitDocSet assumes it will never \n      // have deleted documents, but UninvertedField's doNegative has sets with deleted docs\n      TotalHitCountCollector collector = new TotalHitCountCollector();\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(QueryUtils.makeQueryable(a), BooleanClause.Occur.MUST);\n      bq.add(new ConstantScoreQuery(b.getTopFilter()), BooleanClause.Occur.MUST);\n      super.search(bq, collector);\n      return collector.getTotalHits();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","sourceNew":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   *           If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    if (filterCache != null) {\n      // Negative query if absolute value different from original\n      Query absQ = QueryUtils.getAbs(a);\n      DocSet positiveA = getPositiveDocSet(absQ);\n      return a == absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n    } else {\n      // If there isn't a cache, then do a single filtered query\n      // NOTE: we cannot use FilteredQuery, because BitDocSet assumes it will never\n      // have deleted documents, but UninvertedField's doNegative has sets with deleted docs\n      TotalHitCountCollector collector = new TotalHitCountCollector();\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(QueryUtils.makeQueryable(a), BooleanClause.Occur.MUST);\n      bq.add(new ConstantScoreQuery(b.getTopFilter()), BooleanClause.Occur.MUST);\n      super.search(bq.build(), collector);\n      return collector.getTotalHits();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    if (filterCache != null) {\n      // Negative query if absolute value different from original\n      Query absQ = QueryUtils.getAbs(a);\n      DocSet positiveA = getPositiveDocSet(absQ);\n      return a==absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n    } else {\n      // If there isn't a cache, then do a single filtered query\n      // NOTE: we cannot use FilteredQuery, because BitDocSet assumes it will never \n      // have deleted documents, but UninvertedField's doNegative has sets with deleted docs\n      TotalHitCountCollector collector = new TotalHitCountCollector();\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(QueryUtils.makeQueryable(a), BooleanClause.Occur.MUST);\n      bq.add(new ConstantScoreQuery(b.getTopFilter()), BooleanClause.Occur.MUST);\n      super.search(bq.build(), collector);\n      return collector.getTotalHits();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52a479d9fc88ce0a4081f215d180a813591f2c85","date":1495551060,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","sourceNew":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   *           If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    if (b.size() == 0) {\n      return 0;\n    }\n    if (filterCache != null) {\n      // Negative query if absolute value different from original\n      Query absQ = QueryUtils.getAbs(a);\n      DocSet positiveA = getPositiveDocSet(absQ);\n      return a == absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n    } else {\n      // If there isn't a cache, then do a single filtered query\n      // NOTE: we cannot use FilteredQuery, because BitDocSet assumes it will never\n      // have deleted documents, but UninvertedField's doNegative has sets with deleted docs\n      TotalHitCountCollector collector = new TotalHitCountCollector();\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(QueryUtils.makeQueryable(a), BooleanClause.Occur.MUST);\n      bq.add(new ConstantScoreQuery(b.getTopFilter()), BooleanClause.Occur.MUST);\n      super.search(bq.build(), collector);\n      return collector.getTotalHits();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   *           If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    if (filterCache != null) {\n      // Negative query if absolute value different from original\n      Query absQ = QueryUtils.getAbs(a);\n      DocSet positiveA = getPositiveDocSet(absQ);\n      return a == absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n    } else {\n      // If there isn't a cache, then do a single filtered query\n      // NOTE: we cannot use FilteredQuery, because BitDocSet assumes it will never\n      // have deleted documents, but UninvertedField's doNegative has sets with deleted docs\n      TotalHitCountCollector collector = new TotalHitCountCollector();\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(QueryUtils.makeQueryable(a), BooleanClause.Occur.MUST);\n      bq.add(new ConstantScoreQuery(b.getTopFilter()), BooleanClause.Occur.MUST);\n      super.search(bq.build(), collector);\n      return collector.getTotalHits();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,DocSet).mjava","sourceNew":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   *           If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    if (b.size() == 0) {\n      return 0;\n    }\n    if (filterCache != null) {\n      // Negative query if absolute value different from original\n      Query absQ = QueryUtils.getAbs(a);\n      DocSet positiveA = getPositiveDocSet(absQ);\n      return a == absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n    } else {\n      // If there isn't a cache, then do a single filtered query\n      // NOTE: we cannot use FilteredQuery, because BitDocSet assumes it will never\n      // have deleted documents, but UninvertedField's doNegative has sets with deleted docs\n      TotalHitCountCollector collector = new TotalHitCountCollector();\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(QueryUtils.makeQueryable(a), BooleanClause.Occur.MUST);\n      bq.add(new ConstantScoreQuery(b.getTopFilter()), BooleanClause.Occur.MUST);\n      super.search(bq.build(), collector);\n      return collector.getTotalHits();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @return the number of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   *           If there is a low-level I/O error.\n   */\n  public int numDocs(Query a, DocSet b) throws IOException {\n    if (filterCache != null) {\n      // Negative query if absolute value different from original\n      Query absQ = QueryUtils.getAbs(a);\n      DocSet positiveA = getPositiveDocSet(absQ);\n      return a == absQ ? b.intersectionSize(positiveA) : b.andNotSize(positiveA);\n    } else {\n      // If there isn't a cache, then do a single filtered query\n      // NOTE: we cannot use FilteredQuery, because BitDocSet assumes it will never\n      // have deleted documents, but UninvertedField's doNegative has sets with deleted docs\n      TotalHitCountCollector collector = new TotalHitCountCollector();\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(QueryUtils.makeQueryable(a), BooleanClause.Occur.MUST);\n      bq.add(new ConstantScoreQuery(b.getTopFilter()), BooleanClause.Occur.MUST);\n      super.search(bq.build(), collector);\n      return collector.getTotalHits();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c26f00b574427b55127e869b935845554afde1fa"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","d5fed4f1fc33765fb27864e780fd52f2b0d94686"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d5fed4f1fc33765fb27864e780fd52f2b0d94686":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["ac9de183adbc9483681f275ac1e2d92ed19f52e1","52a479d9fc88ce0a4081f215d180a813591f2c85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d5fed4f1fc33765fb27864e780fd52f2b0d94686"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52a479d9fc88ce0a4081f215d180a813591f2c85":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["52a479d9fc88ce0a4081f215d180a813591f2c85"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d5fed4f1fc33765fb27864e780fd52f2b0d94686"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c26f00b574427b55127e869b935845554afde1fa":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"d5fed4f1fc33765fb27864e780fd52f2b0d94686":["37a0f60745e53927c4c876cfe5b5a58170f0646c","f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["e9017cf144952056066919f1ebc7897ff9bd71b1","52a479d9fc88ce0a4081f215d180a813591f2c85"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"52a479d9fc88ce0a4081f215d180a813591f2c85":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","e9017cf144952056066919f1ebc7897ff9bd71b1","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}