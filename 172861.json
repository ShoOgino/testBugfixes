{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"6616b1fd222bb5a60f7f7856ace312252bc97890","date":1350142044,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c0ecdaef6f1405eb02cc90e5aba6405c82ef093","date":1378031758,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    if (!LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE) {\n      return super.fieldsConsumer(state);\n    } else {\n      PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n      \n      // TODO: should we make the terms index more easily\n      // pluggable?  Ie so that this codec would record which\n      // index impl was used, and switch on loading?\n      // Or... you must make a new Codec for this?\n      boolean success = false;\n      try {\n        FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, minBlockSize, maxBlockSize);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          docs.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n\n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    if (!LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE) {\n      return super.fieldsConsumer(state);\n    } else {\n      PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n      \n      // TODO: should we make the terms index more easily\n      // pluggable?  Ie so that this codec would record which\n      // index impl was used, and switch on loading?\n      // Or... you must make a new Codec for this?\n      boolean success = false;\n      try {\n        FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, minBlockSize, maxBlockSize);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          docs.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    if (!LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE) {\n      return super.fieldsConsumer(state);\n    } else {\n      PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n      \n      // TODO: should we make the terms index more easily\n      // pluggable?  Ie so that this codec would record which\n      // index impl was used, and switch on loading?\n      // Or... you must make a new Codec for this?\n      boolean success = false;\n      try {\n        FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, minBlockSize, maxBlockSize);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          docs.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    if (!LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE) {\n      return super.fieldsConsumer(state);\n    } else {\n      PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n      \n      // TODO: should we make the terms index more easily\n      // pluggable?  Ie so that this codec would record which\n      // index impl was used, and switch on loading?\n      // Or... you must make a new Codec for this?\n      boolean success = false;\n      try {\n        FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, minBlockSize, maxBlockSize);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          docs.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6616b1fd222bb5a60f7f7856ace312252bc97890"],"3c0ecdaef6f1405eb02cc90e5aba6405c82ef093":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["3c0ecdaef6f1405eb02cc90e5aba6405c82ef093"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["3c0ecdaef6f1405eb02cc90e5aba6405c82ef093","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["3c0ecdaef6f1405eb02cc90e5aba6405c82ef093","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"3c0ecdaef6f1405eb02cc90e5aba6405c82ef093":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6616b1fd222bb5a60f7f7856ace312252bc97890","c7492bcb52be51e55d596134b95b2e53cc4ffb91","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}