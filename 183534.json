{"path":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","sourceNew":"  /** create a new searcher over the reader */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    if (random.nextBoolean()) {\n      return new IndexSearcher(r);\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null \n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8), \n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null && VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n      }\n      return new IndexSearcher(r.getTopReaderContext(), ex) {\n        @Override\n        public void close() throws IOException {\n          super.close();\n          if (ex != null) {\n            ex.shutdown();\n            try {\n              ex.awaitTermination(1000, TimeUnit.MILLISECONDS);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /** create a new searcher over the reader */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    if (random.nextBoolean()) {\n      return new IndexSearcher(r);\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null \n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8), \n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null && VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n      }\n      return new IndexSearcher(r.getTopReaderContext(), ex) {\n        @Override\n        public void close() throws IOException {\n          super.close();\n          if (ex != null) {\n            ex.shutdown();\n            try {\n              ex.awaitTermination(1000, TimeUnit.MILLISECONDS);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /** create a new searcher over the reader */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    if (random.nextBoolean()) {\n      return new IndexSearcher(r);\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null \n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8), \n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null && VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n      }\n      return new IndexSearcher(r.getTopReaderContext(), ex) {\n        @Override\n        public void close() throws IOException {\n          super.close();\n          if (ex != null) {\n            ex.shutdown();\n            try {\n              ex.awaitTermination(1000, TimeUnit.MILLISECONDS);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d","date":1298208351,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","sourceNew":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads. */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    if (random.nextBoolean()) {\n      return new IndexSearcher(r);\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null \n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8), \n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null && VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n      }\n      return new IndexSearcher(r.getTopReaderContext(), ex) {\n        @Override\n        public void close() throws IOException {\n          super.close();\n          if (ex != null) {\n            ex.shutdown();\n            try {\n              ex.awaitTermination(1000, TimeUnit.MILLISECONDS);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /** create a new searcher over the reader */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    if (random.nextBoolean()) {\n      return new IndexSearcher(r);\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null \n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8), \n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null && VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n      }\n      return new IndexSearcher(r.getTopReaderContext(), ex) {\n        @Override\n        public void close() throws IOException {\n          super.close();\n          if (ex != null) {\n            ex.shutdown();\n            try {\n              ex.awaitTermination(1000, TimeUnit.MILLISECONDS);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","sourceNew":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads. */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    if (random.nextBoolean()) {\n      return new IndexSearcher(r);\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null \n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8), \n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null && VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n      }\n      return new IndexSearcher(r.getTopReaderContext(), ex) {\n        @Override\n        public void close() throws IOException {\n          super.close();\n          if (ex != null) {\n            ex.shutdown();\n            try {\n              ex.awaitTermination(1000, TimeUnit.MILLISECONDS);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /** create a new searcher over the reader */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    if (random.nextBoolean()) {\n      return new IndexSearcher(r);\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null \n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8), \n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null && VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n      }\n      return new IndexSearcher(r.getTopReaderContext(), ex) {\n        @Override\n        public void close() throws IOException {\n          super.close();\n          if (ex != null) {\n            ex.shutdown();\n            try {\n              ex.awaitTermination(1000, TimeUnit.MILLISECONDS);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /** create a new searcher over the reader */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    if (random.nextBoolean()) {\n      return new IndexSearcher(r);\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null && VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n      }\n      return new IndexSearcher(r.getTopReaderContext(), ex) {\n        @Override\n        public void close() throws IOException {\n          super.close();\n          if (ex != null) {\n            ex.shutdown();\n            try {\n              ex.awaitTermination(1000, TimeUnit.MILLISECONDS);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a32e313633383bfadd3bbf8b933611c6a07c7c","date":1303945298,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","sourceNew":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads. */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    if (random.nextBoolean()) {\n      return new IndexSearcher(r);\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null && VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n      }\n      return new IndexSearcher(r.getTopReaderContext(), ex) {\n        @Override\n        public void close() throws IOException {\n          super.close();\n          if (ex != null) {\n            ex.shutdown();\n            try {\n              ex.awaitTermination(1000, TimeUnit.MILLISECONDS);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /** create a new searcher over the reader */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    if (random.nextBoolean()) {\n      return new IndexSearcher(r);\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null && VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n      }\n      return new IndexSearcher(r.getTopReaderContext(), ex) {\n        @Override\n        public void close() throws IOException {\n          super.close();\n          if (ex != null) {\n            ex.shutdown();\n            try {\n              ex.awaitTermination(1000, TimeUnit.MILLISECONDS);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1bb50752d43a65ef1b623eabdb8e865983d3cd6","date":1304257984,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","sourceNew":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads. */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    return newSearcher(r, true);\n  }\n\n","sourceOld":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads. */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    if (random.nextBoolean()) {\n      return new IndexSearcher(r);\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null \n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8), \n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null && VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n      }\n      return new IndexSearcher(r.getTopReaderContext(), ex) {\n        @Override\n        public void close() throws IOException {\n          super.close();\n          if (ex != null) {\n            ex.shutdown();\n            try {\n              ex.awaitTermination(1000, TimeUnit.MILLISECONDS);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","sourceNew":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads. */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    return newSearcher(r, true);\n  }\n\n","sourceOld":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads. */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    if (random.nextBoolean()) {\n      return new IndexSearcher(r);\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null \n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8), \n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null && VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n      }\n      return new IndexSearcher(r.getTopReaderContext(), ex) {\n        @Override\n        public void close() throws IOException {\n          super.close();\n          if (ex != null) {\n            ex.shutdown();\n            try {\n              ex.awaitTermination(1000, TimeUnit.MILLISECONDS);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","sourceNew":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads. */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    return newSearcher(r, true);\n  }\n\n","sourceOld":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads. */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    if (random.nextBoolean()) {\n      return new IndexSearcher(r);\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null \n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8), \n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null && VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n      }\n      return new IndexSearcher(r.getTopReaderContext(), ex) {\n        @Override\n        public void close() throws IOException {\n          super.close();\n          if (ex != null) {\n            ex.shutdown();\n            try {\n              ex.awaitTermination(1000, TimeUnit.MILLISECONDS);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader).mjava","sourceNew":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads. */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    return newSearcher(r, true);\n  }\n\n","sourceOld":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads. */\n  public static IndexSearcher newSearcher(IndexReader r) throws IOException {\n    return newSearcher(r, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["c1bb50752d43a65ef1b623eabdb8e865983d3cd6"],"0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d"],"70a32e313633383bfadd3bbf8b933611c6a07c7c":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a3776dccca01c11e7046323cfad46a3b4a471233":["0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d","c1bb50752d43a65ef1b623eabdb8e865983d3cd6"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","c1bb50752d43a65ef1b623eabdb8e865983d3cd6"],"c1bb50752d43a65ef1b623eabdb8e865983d3cd6":["0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d":["f1bdbf92da222965b46c0a942c3857ba56e5c638","a3776dccca01c11e7046323cfad46a3b4a471233","c1bb50752d43a65ef1b623eabdb8e865983d3cd6","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"70a32e313633383bfadd3bbf8b933611c6a07c7c":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"c1bb50752d43a65ef1b623eabdb8e865983d3cd6":["7b91922b55d15444d554721b352861d028eb8278","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["70a32e313633383bfadd3bbf8b933611c6a07c7c"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d","29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70a32e313633383bfadd3bbf8b933611c6a07c7c","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}