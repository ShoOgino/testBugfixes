{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","commits":[{"id":"2bceb2cdf01c012aaa9fd1132529159bd7c2fe82","date":1355878858,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","pathOld":"/dev/null","sourceNew":"  protected void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().getCollections().contains(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection + \"nSlices=\"+slices);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","pathOld":"/dev/null","sourceNew":"  protected void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().getCollections().contains(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection + \"nSlices=\"+slices);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eeda7e62e149f90eee8895af874c74efa7d4852","date":1375293182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","sourceNew":"  protected void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().getCollections().contains(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getSlices(collection).size()\n            + \" slices : \"+ reader.getClusterState().getSlices(collection) );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","sourceOld":"  protected void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().getCollections().contains(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection + \"nSlices=\"+slices);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","sourceNew":"  protected void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().getCollections().contains(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getSlices(collection).size()\n            + \" slices : \"+ reader.getClusterState().getSlices(collection) );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","sourceOld":"  protected void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().getCollections().contains(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection + \"nSlices=\"+slices);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","sourceNew":"  protected void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().hasCollection(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getSlices(collection).size()\n            + \" slices : \"+ reader.getClusterState().getSlices(collection) );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","sourceOld":"  protected void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().getCollections().contains(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getSlices(collection).size()\n            + \" slices : \"+ reader.getClusterState().getSlices(collection) );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5c99ad021f3da085fcb66220598a8f91dc5e453","date":1462242046,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","sourceNew":"  protected static void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().hasCollection(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getSlices(collection).size()\n            + \" slices : \"+ reader.getClusterState().getSlices(collection) );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","sourceOld":"  protected void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().hasCollection(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getSlices(collection).size()\n            + \" slices : \"+ reader.getClusterState().getSlices(collection) );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c7a21395bae9e2f61aeb639f47aaca771c426ed","date":1462255690,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","sourceNew":"  protected static void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().hasCollection(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getSlices(collection).size()\n            + \" slices : \"+ reader.getClusterState().getSlices(collection) );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","sourceOld":"  protected void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().hasCollection(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getSlices(collection).size()\n            + \" slices : \"+ reader.getClusterState().getSlices(collection) );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","sourceNew":"  protected static void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().hasCollection(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getSlices(collection).size()\n            + \" slices : \"+ reader.getClusterState().getSlices(collection) );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","sourceOld":"  protected void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().hasCollection(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getSlices(collection).size()\n            + \" slices : \"+ reader.getClusterState().getSlices(collection) );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed1b270b5ea6e1859f4b77233891fbb991898dba","date":1497429460,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","sourceNew":"  public static void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().hasCollection(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getSlices(collection).size()\n            + \" slices : \"+ reader.getClusterState().getSlices(collection) );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","sourceOld":"  protected static void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().hasCollection(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getSlices(collection).size()\n            + \" slices : \"+ reader.getClusterState().getSlices(collection) );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","sourceNew":"  public static void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().hasCollection(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getSlices(collection).size()\n            + \" slices : \"+ reader.getClusterState().getSlices(collection) );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","sourceOld":"  protected static void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().hasCollection(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getSlices(collection).size()\n            + \" slices : \"+ reader.getClusterState().getSlices(collection) );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","sourceNew":"  public static void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().hasCollection(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getSlices(collection).size()\n            + \" slices : \"+ reader.getClusterState().getSlices(collection) );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","sourceOld":"  protected static void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().hasCollection(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getSlices(collection).size()\n            + \" slices : \"+ reader.getClusterState().getSlices(collection) );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","sourceNew":"  public static void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().hasCollection(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    \n    while (reader.getClusterState().getCollection(collection).getSlices().size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getCollection(collection).getSlices().size()\n            + \" slices : \"+ reader.getClusterState().getCollection(collection).getSlices() );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","sourceOld":"  public static void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().hasCollection(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getSlices(collection).size()\n            + \" slices : \"+ reader.getClusterState().getSlices(collection) );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","bugFix":["1eeda7e62e149f90eee8895af874c74efa7d4852","2bceb2cdf01c012aaa9fd1132529159bd7c2fe82"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","sourceNew":"  public static void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().hasCollection(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    \n    while (reader.getClusterState().getCollection(collection).getSlices().size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getCollection(collection).getSlices().size()\n            + \" slices : \"+ reader.getClusterState().getCollection(collection).getSlices() );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","sourceOld":"  public static void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().hasCollection(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (reader.getClusterState().getSlices(collection).size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getSlices(collection).size()\n            + \" slices : \"+ reader.getClusterState().getSlices(collection) );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06f42faae0ab79dde1a569756990bb96283580d","date":1566418420,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitForCollection(ZkStateReader,String,int).mjava","sourceNew":"  public static void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    log.info(\"waitForCollection ({}): slices={}\", collection, slices);\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().hasCollection(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    \n    while (reader.getClusterState().getCollection(collection).getSlices().size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getCollection(collection).getSlices().size()\n            + \" slices : \"+ reader.getClusterState().getCollection(collection).getSlices() );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","sourceOld":"  public static void waitForCollection(ZkStateReader reader, String collection, int slices) throws Exception {\n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!reader.getClusterState().hasCollection(collection)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection in cluster state: collection=\" + collection);\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    \n    while (reader.getClusterState().getCollection(collection).getSlices().size() < slices) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up: collection=\"+collection\n            + \", slices.expected=\"+slices+ \" slices.actual= \" + reader.getClusterState().getCollection(collection).getSlices().size()\n            + \" slices : \"+ reader.getClusterState().getCollection(collection).getSlices() );\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5c99ad021f3da085fcb66220598a8f91dc5e453":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2bceb2cdf01c012aaa9fd1132529159bd7c2fe82"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["2bceb2cdf01c012aaa9fd1132529159bd7c2fe82","1eeda7e62e149f90eee8895af874c74efa7d4852"],"344b0840364d990b29b97467bfcc766ff8325d11":["28288370235ed02234a64753cdbf0c6ec096304a"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["2bceb2cdf01c012aaa9fd1132529159bd7c2fe82"],"28288370235ed02234a64753cdbf0c6ec096304a":["1c7a21395bae9e2f61aeb639f47aaca771c426ed","ed1b270b5ea6e1859f4b77233891fbb991898dba"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["0622fbd990643ae4cacb693db6a0c82cf8916ae2","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"ed1b270b5ea6e1859f4b77233891fbb991898dba":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","344b0840364d990b29b97467bfcc766ff8325d11"],"2bceb2cdf01c012aaa9fd1132529159bd7c2fe82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["0622fbd990643ae4cacb693db6a0c82cf8916ae2","c5c99ad021f3da085fcb66220598a8f91dc5e453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b06f42faae0ab79dde1a569756990bb96283580d":["344b0840364d990b29b97467bfcc766ff8325d11"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["1eeda7e62e149f90eee8895af874c74efa7d4852"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["1c7a21395bae9e2f61aeb639f47aaca771c426ed","ed1b270b5ea6e1859f4b77233891fbb991898dba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b06f42faae0ab79dde1a569756990bb96283580d"]},"commit2Childs":{"c5c99ad021f3da085fcb66220598a8f91dc5e453":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","b06f42faae0ab79dde1a569756990bb96283580d"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"28288370235ed02234a64753cdbf0c6ec096304a":["344b0840364d990b29b97467bfcc766ff8325d11"],"55b50463286869f584cf849d1587a0fcd54d1dfa":[],"ed1b270b5ea6e1859f4b77233891fbb991898dba":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"2bceb2cdf01c012aaa9fd1132529159bd7c2fe82":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","1eeda7e62e149f90eee8895af874c74efa7d4852"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["28288370235ed02234a64753cdbf0c6ec096304a","55b50463286869f584cf849d1587a0fcd54d1dfa","ed1b270b5ea6e1859f4b77233891fbb991898dba","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","2bceb2cdf01c012aaa9fd1132529159bd7c2fe82"],"b06f42faae0ab79dde1a569756990bb96283580d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["c5c99ad021f3da085fcb66220598a8f91dc5e453","55b50463286869f584cf849d1587a0fcd54d1dfa","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","55b50463286869f584cf849d1587a0fcd54d1dfa","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}