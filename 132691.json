{"path":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#move(Directory,Directory,String,IOContext).mjava","commits":[{"id":"15fdb1d84f9e74320d318f682fd2b7d370398857","date":1355194688,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#move(Directory,Directory,String,IOContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#move(Directory,Directory,String).mjava","sourceNew":"  /**\n   * Override for more efficient moves.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public void move(Directory fromDir, Directory toDir, String fileName, IOContext ioContext) throws IOException {\n    fromDir.copy(toDir, fileName, fileName, ioContext);\n    fromDir.deleteFile(fileName);\n  }\n\n","sourceOld":"  /**\n   * Override for more efficient moves.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public void move(Directory fromDir, Directory toDir, String fileName) throws IOException {\n    fromDir.copy(toDir, fileName, fileName, IOContext.DEFAULT);\n    fromDir.deleteFile(fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#move(Directory,Directory,String,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Override for more efficient moves.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public void move(Directory fromDir, Directory toDir, String fileName, IOContext ioContext) throws IOException {\n    fromDir.copy(toDir, fileName, fileName, ioContext);\n    fromDir.deleteFile(fileName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38186799b39019eb8ae92e6ee46a91668cac69d3","date":1360978077,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#move(Directory,Directory,String,IOContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#move(Directory,Directory,String,IOContext).mjava","sourceNew":"  /**\n   * Override for more efficient moves.\n   * \n   * Intended for use with replication - use\n   * carefully - some Directory wrappers will\n   * cache files for example.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public void move(Directory fromDir, Directory toDir, String fileName, IOContext ioContext) throws IOException {\n    fromDir.copy(toDir, fileName, fileName, ioContext);\n    fromDir.deleteFile(fileName);\n  }\n\n","sourceOld":"  /**\n   * Override for more efficient moves.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public void move(Directory fromDir, Directory toDir, String fileName, IOContext ioContext) throws IOException {\n    fromDir.copy(toDir, fileName, fileName, ioContext);\n    fromDir.deleteFile(fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#move(Directory,Directory,String,IOContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#move(Directory,Directory,String,IOContext).mjava","sourceNew":"  /**\n   * Override for more efficient moves.\n   * \n   * Intended for use with replication - use\n   * carefully - some Directory wrappers will\n   * cache files for example.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public void move(Directory fromDir, Directory toDir, String fileName, IOContext ioContext) throws IOException {\n    fromDir.copy(toDir, fileName, fileName, ioContext);\n    fromDir.deleteFile(fileName);\n  }\n\n","sourceOld":"  /**\n   * Override for more efficient moves.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public void move(Directory fromDir, Directory toDir, String fileName, IOContext ioContext) throws IOException {\n    fromDir.copy(toDir, fileName, fileName, ioContext);\n    fromDir.deleteFile(fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52d4cfb22484037a9b8e9080e03aeaff60954880","date":1420125313,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#move(Directory,Directory,String,IOContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#move(Directory,Directory,String,IOContext).mjava","sourceNew":"  /**\n   * Override for more efficient moves.\n   * \n   * Intended for use with replication - use\n   * carefully - some Directory wrappers will\n   * cache files for example.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public void move(Directory fromDir, Directory toDir, String fileName, IOContext ioContext) throws IOException {\n    toDir.copyFrom(fromDir, fileName, fileName, ioContext);\n    fromDir.deleteFile(fileName);\n  }\n\n","sourceOld":"  /**\n   * Override for more efficient moves.\n   * \n   * Intended for use with replication - use\n   * carefully - some Directory wrappers will\n   * cache files for example.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public void move(Directory fromDir, Directory toDir, String fileName, IOContext ioContext) throws IOException {\n    fromDir.copy(toDir, fileName, fileName, ioContext);\n    fromDir.deleteFile(fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#move(Directory,Directory,String,IOContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#move(Directory,Directory,String,IOContext).mjava","sourceNew":"  /**\n   * Override for more efficient moves.\n   * \n   * Intended for use with replication - use\n   * carefully - some Directory wrappers will\n   * cache files for example.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public void move(Directory fromDir, Directory toDir, String fileName, IOContext ioContext) throws IOException {\n    toDir.copyFrom(fromDir, fileName, fileName, ioContext);\n    fromDir.deleteFiles(Collections.singleton(fileName));\n  }\n\n","sourceOld":"  /**\n   * Override for more efficient moves.\n   * \n   * Intended for use with replication - use\n   * carefully - some Directory wrappers will\n   * cache files for example.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public void move(Directory fromDir, Directory toDir, String fileName, IOContext ioContext) throws IOException {\n    toDir.copyFrom(fromDir, fileName, fileName, ioContext);\n    fromDir.deleteFile(fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44a0466296f4b2d9deac60e3e524628c97aa5191","date":1454532248,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#move(Directory,Directory,String,IOContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#move(Directory,Directory,String,IOContext).mjava","sourceNew":"  /**\n   * Override for more efficient moves.\n   * \n   * Intended for use with replication - use\n   * carefully - some Directory wrappers will\n   * cache files for example.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public void move(Directory fromDir, Directory toDir, String fileName, IOContext ioContext) throws IOException {\n    toDir.copyFrom(fromDir, fileName, fileName, ioContext);\n    fromDir.deleteFile(fileName);\n  }\n\n","sourceOld":"  /**\n   * Override for more efficient moves.\n   * \n   * Intended for use with replication - use\n   * carefully - some Directory wrappers will\n   * cache files for example.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public void move(Directory fromDir, Directory toDir, String fileName, IOContext ioContext) throws IOException {\n    toDir.copyFrom(fromDir, fileName, fileName, ioContext);\n    fromDir.deleteFiles(Collections.singleton(fileName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15fdb1d84f9e74320d318f682fd2b7d370398857":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","15fdb1d84f9e74320d318f682fd2b7d370398857"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["15fdb1d84f9e74320d318f682fd2b7d370398857","38186799b39019eb8ae92e6ee46a91668cac69d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38186799b39019eb8ae92e6ee46a91668cac69d3":["15fdb1d84f9e74320d318f682fd2b7d370398857"],"52d4cfb22484037a9b8e9080e03aeaff60954880":["38186799b39019eb8ae92e6ee46a91668cac69d3"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["52d4cfb22484037a9b8e9080e03aeaff60954880"],"44a0466296f4b2d9deac60e3e524628c97aa5191":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["52d4cfb22484037a9b8e9080e03aeaff60954880"]},"commit2Childs":{"15fdb1d84f9e74320d318f682fd2b7d370398857":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","95303ff3749680c743b9425f9cf99e6e4065e8a8","38186799b39019eb8ae92e6ee46a91668cac69d3"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15fdb1d84f9e74320d318f682fd2b7d370398857","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"38186799b39019eb8ae92e6ee46a91668cac69d3":["95303ff3749680c743b9425f9cf99e6e4065e8a8","52d4cfb22484037a9b8e9080e03aeaff60954880"],"52d4cfb22484037a9b8e9080e03aeaff60954880":["6bfe104fc023fadc9e709f8d17403d2cc61133fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["44a0466296f4b2d9deac60e3e524628c97aa5191"],"44a0466296f4b2d9deac60e3e524628c97aa5191":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","95303ff3749680c743b9425f9cf99e6e4065e8a8","44a0466296f4b2d9deac60e3e524628c97aa5191","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}