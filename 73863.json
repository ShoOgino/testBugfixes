{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#read().mjava","commits":[{"id":"37f0902b794e42ac312bfd9daa69e6a523cf4675","date":1447303057,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#read().mjava","pathOld":"/dev/null","sourceNew":"  public Tuple read() throws IOException {\n    Tuple original = stream.read();\n    \n    if(original.EOF){\n      return original;\n    }\n\n    // create a copy with the limited set of fields\n    Tuple working = new Tuple(new HashMap<>());\n    for(Object fieldName : original.fields.keySet()){\n      if(selectedFields.containsKey(fieldName)){\n        working.put(selectedFields.get(fieldName), original.get(fieldName));\n      }\n    }\n    \n    // apply all operations\n    for(StreamOperation operation : operations){\n      operation.operate(working);\n    }\n    \n    return working;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88073e8783f450d4c0218decc2f001a1ac2c7e7c","date":1486705191,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    Tuple original = stream.read();\n    \n    if(original.EOF){\n      return original;\n    }\n\n    // create a copy with the limited set of fields\n    Tuple workingToReturn = new Tuple(new HashMap<>());\n    Tuple workingForEvaluators = new Tuple(new HashMap<>());\n    for(Object fieldName : original.fields.keySet()){\n      workingForEvaluators.put(fieldName, original.get(fieldName));\n      if(selectedFields.containsKey(fieldName)){\n        workingToReturn.put(selectedFields.get(fieldName), original.get(fieldName));\n      }\n    }\n    \n    // apply all operations\n    for(StreamOperation operation : operations){\n      operation.operate(workingToReturn);\n      operation.operate(workingForEvaluators);\n    }\n    \n    // Apply all evaluators\n    for(Map.Entry<StreamEvaluator, String> selectedEvaluator : selectedEvaluators.entrySet()) {\n      workingToReturn.put(selectedEvaluator.getValue(), selectedEvaluator.getKey().evaluate(workingForEvaluators));\n    }\n    \n    return workingToReturn;\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    Tuple original = stream.read();\n    \n    if(original.EOF){\n      return original;\n    }\n\n    // create a copy with the limited set of fields\n    Tuple working = new Tuple(new HashMap<>());\n    for(Object fieldName : original.fields.keySet()){\n      if(selectedFields.containsKey(fieldName)){\n        working.put(selectedFields.get(fieldName), original.get(fieldName));\n      }\n    }\n    \n    // apply all operations\n    for(StreamOperation operation : operations){\n      operation.operate(working);\n    }\n    \n    return working;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56ebde9c21d35a39c07989c178372e901ad377da","date":1492023892,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    Tuple original = stream.read();\n    \n    if(original.EOF){\n      return original;\n    }\n\n    // create a copy with the limited set of fields\n    Tuple workingToReturn = new Tuple(new HashMap<>());\n    Tuple workingForEvaluators = new Tuple(new HashMap<>());\n\n    //Clear the TupleContext before running the evaluators.\n    //The TupleContext allows evaluators to cache values within the scope of a single tuple.\n    //For example a LocalDateTime could be parsed by one evaluator and used by other evaluators within the scope of the tuple.\n    //This avoids the need to create multiple LocalDateTime instances for the same tuple to satisfy a select expression.\n\n    streamContext.getTupleContext().clear();\n\n    for(Object fieldName : original.fields.keySet()){\n      workingForEvaluators.put(fieldName, original.get(fieldName));\n      if(selectedFields.containsKey(fieldName)){\n        workingToReturn.put(selectedFields.get(fieldName), original.get(fieldName));\n      }\n    }\n    \n    // apply all operations\n    for(StreamOperation operation : operations){\n      operation.operate(workingToReturn);\n      operation.operate(workingForEvaluators);\n    }\n    \n    // Apply all evaluators\n    for(Map.Entry<StreamEvaluator, String> selectedEvaluator : selectedEvaluators.entrySet()) {\n      workingToReturn.put(selectedEvaluator.getValue(), selectedEvaluator.getKey().evaluate(workingForEvaluators));\n    }\n    \n    return workingToReturn;\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    Tuple original = stream.read();\n    \n    if(original.EOF){\n      return original;\n    }\n\n    // create a copy with the limited set of fields\n    Tuple workingToReturn = new Tuple(new HashMap<>());\n    Tuple workingForEvaluators = new Tuple(new HashMap<>());\n    for(Object fieldName : original.fields.keySet()){\n      workingForEvaluators.put(fieldName, original.get(fieldName));\n      if(selectedFields.containsKey(fieldName)){\n        workingToReturn.put(selectedFields.get(fieldName), original.get(fieldName));\n      }\n    }\n    \n    // apply all operations\n    for(StreamOperation operation : operations){\n      operation.operate(workingToReturn);\n      operation.operate(workingForEvaluators);\n    }\n    \n    // Apply all evaluators\n    for(Map.Entry<StreamEvaluator, String> selectedEvaluator : selectedEvaluators.entrySet()) {\n      workingToReturn.put(selectedEvaluator.getValue(), selectedEvaluator.getKey().evaluate(workingForEvaluators));\n    }\n    \n    return workingToReturn;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    Tuple original = stream.read();\n    \n    if(original.EOF){\n      return original;\n    }\n\n    // create a copy with the limited set of fields\n    Tuple workingToReturn = new Tuple(new HashMap<>());\n    Tuple workingForEvaluators = new Tuple(new HashMap<>());\n\n    //Clear the TupleContext before running the evaluators.\n    //The TupleContext allows evaluators to cache values within the scope of a single tuple.\n    //For example a LocalDateTime could be parsed by one evaluator and used by other evaluators within the scope of the tuple.\n    //This avoids the need to create multiple LocalDateTime instances for the same tuple to satisfy a select expression.\n\n    streamContext.getTupleContext().clear();\n\n    for(Object fieldName : original.fields.keySet()){\n      workingForEvaluators.put(fieldName, original.get(fieldName));\n      if(selectedFields.containsKey(fieldName)){\n        workingToReturn.put(selectedFields.get(fieldName), original.get(fieldName));\n      }\n    }\n    \n    // apply all operations\n    for(StreamOperation operation : operations){\n      operation.operate(workingToReturn);\n      operation.operate(workingForEvaluators);\n    }\n    \n    // Apply all evaluators\n    for(Map.Entry<StreamEvaluator, String> selectedEvaluator : selectedEvaluators.entrySet()) {\n      workingToReturn.put(selectedEvaluator.getValue(), selectedEvaluator.getKey().evaluate(workingForEvaluators));\n    }\n    \n    return workingToReturn;\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    Tuple original = stream.read();\n    \n    if(original.EOF){\n      return original;\n    }\n\n    // create a copy with the limited set of fields\n    Tuple workingToReturn = new Tuple(new HashMap<>());\n    Tuple workingForEvaluators = new Tuple(new HashMap<>());\n    for(Object fieldName : original.fields.keySet()){\n      workingForEvaluators.put(fieldName, original.get(fieldName));\n      if(selectedFields.containsKey(fieldName)){\n        workingToReturn.put(selectedFields.get(fieldName), original.get(fieldName));\n      }\n    }\n    \n    // apply all operations\n    for(StreamOperation operation : operations){\n      operation.operate(workingToReturn);\n      operation.operate(workingForEvaluators);\n    }\n    \n    // Apply all evaluators\n    for(Map.Entry<StreamEvaluator, String> selectedEvaluator : selectedEvaluators.entrySet()) {\n      workingToReturn.put(selectedEvaluator.getValue(), selectedEvaluator.getKey().evaluate(workingForEvaluators));\n    }\n    \n    return workingToReturn;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc","date":1539269037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    Tuple original = stream.read();\n    \n    if(original.EOF){\n      return original;\n    }\n\n    // create a copy with the limited set of fields\n    Tuple workingToReturn = new Tuple(new HashMap<>());\n    Tuple workingForEvaluators = new Tuple(new HashMap<>());\n\n    //Clear the TupleContext before running the evaluators.\n    //The TupleContext allows evaluators to cache values within the scope of a single tuple.\n    //For example a LocalDateTime could be parsed by one evaluator and used by other evaluators within the scope of the tuple.\n    //This avoids the need to create multiple LocalDateTime instances for the same tuple to satisfy a select expression.\n\n    streamContext.getTupleContext().clear();\n\n    for(Object fieldName : original.fields.keySet()){\n      workingForEvaluators.put(fieldName, original.get(fieldName));\n      if(selectedFields.containsKey(fieldName)){\n        workingToReturn.put(selectedFields.get(fieldName), original.get(fieldName));\n      }\n    }\n    \n    // apply all operations\n    for(StreamOperation operation : operations){\n      operation.operate(workingToReturn);\n      operation.operate(workingForEvaluators);\n    }\n    \n    // Apply all evaluators\n    for(Map.Entry<StreamEvaluator, String> selectedEvaluator : selectedEvaluators.entrySet()) {\n      Object o = selectedEvaluator.getKey().evaluate(workingForEvaluators);\n      workingForEvaluators.put(selectedEvaluator.getValue(), o);\n      workingToReturn.put(selectedEvaluator.getValue(), o);\n    }\n    \n    return workingToReturn;\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    Tuple original = stream.read();\n    \n    if(original.EOF){\n      return original;\n    }\n\n    // create a copy with the limited set of fields\n    Tuple workingToReturn = new Tuple(new HashMap<>());\n    Tuple workingForEvaluators = new Tuple(new HashMap<>());\n\n    //Clear the TupleContext before running the evaluators.\n    //The TupleContext allows evaluators to cache values within the scope of a single tuple.\n    //For example a LocalDateTime could be parsed by one evaluator and used by other evaluators within the scope of the tuple.\n    //This avoids the need to create multiple LocalDateTime instances for the same tuple to satisfy a select expression.\n\n    streamContext.getTupleContext().clear();\n\n    for(Object fieldName : original.fields.keySet()){\n      workingForEvaluators.put(fieldName, original.get(fieldName));\n      if(selectedFields.containsKey(fieldName)){\n        workingToReturn.put(selectedFields.get(fieldName), original.get(fieldName));\n      }\n    }\n    \n    // apply all operations\n    for(StreamOperation operation : operations){\n      operation.operate(workingToReturn);\n      operation.operate(workingForEvaluators);\n    }\n    \n    // Apply all evaluators\n    for(Map.Entry<StreamEvaluator, String> selectedEvaluator : selectedEvaluators.entrySet()) {\n      workingToReturn.put(selectedEvaluator.getValue(), selectedEvaluator.getKey().evaluate(workingForEvaluators));\n    }\n    \n    return workingToReturn;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35cc45f54fe95a5534e02f9b8ca2a54af211ded5","date":1564774706,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    Tuple original = stream.read();\n    \n    if(original.EOF){\n      return original;\n    }\n\n    // create a copy with the limited set of fields\n    Tuple workingToReturn = new Tuple(new HashMap<>());\n    Tuple workingForEvaluators = new Tuple(new HashMap<>());\n\n    //Clear the TupleContext before running the evaluators.\n    //The TupleContext allows evaluators to cache values within the scope of a single tuple.\n    //For example a LocalDateTime could be parsed by one evaluator and used by other evaluators within the scope of the tuple.\n    //This avoids the need to create multiple LocalDateTime instances for the same tuple to satisfy a select expression.\n\n    streamContext.getTupleContext().clear();\n\n    for(Object fieldName : original.fields.keySet()){\n      workingForEvaluators.put(fieldName, original.get(fieldName));\n      if(selectedFields.containsKey(fieldName)){\n        workingToReturn.put(selectedFields.get(fieldName), original.get(fieldName));\n      }\n    }\n    \n    // apply all operations\n    for(StreamOperation operation : operations){\n      operation.operate(workingToReturn);\n      operation.operate(workingForEvaluators);\n    }\n    \n    // Apply all evaluators\n    for(Map.Entry<StreamEvaluator, String> selectedEvaluator : selectedEvaluators.entrySet()) {\n      Object o = selectedEvaluator.getKey().evaluate(workingForEvaluators);\n      if(o != null) {\n        workingForEvaluators.put(selectedEvaluator.getValue(), o);\n        workingToReturn.put(selectedEvaluator.getValue(), o);\n      }\n    }\n    \n    return workingToReturn;\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    Tuple original = stream.read();\n    \n    if(original.EOF){\n      return original;\n    }\n\n    // create a copy with the limited set of fields\n    Tuple workingToReturn = new Tuple(new HashMap<>());\n    Tuple workingForEvaluators = new Tuple(new HashMap<>());\n\n    //Clear the TupleContext before running the evaluators.\n    //The TupleContext allows evaluators to cache values within the scope of a single tuple.\n    //For example a LocalDateTime could be parsed by one evaluator and used by other evaluators within the scope of the tuple.\n    //This avoids the need to create multiple LocalDateTime instances for the same tuple to satisfy a select expression.\n\n    streamContext.getTupleContext().clear();\n\n    for(Object fieldName : original.fields.keySet()){\n      workingForEvaluators.put(fieldName, original.get(fieldName));\n      if(selectedFields.containsKey(fieldName)){\n        workingToReturn.put(selectedFields.get(fieldName), original.get(fieldName));\n      }\n    }\n    \n    // apply all operations\n    for(StreamOperation operation : operations){\n      operation.operate(workingToReturn);\n      operation.operate(workingForEvaluators);\n    }\n    \n    // Apply all evaluators\n    for(Map.Entry<StreamEvaluator, String> selectedEvaluator : selectedEvaluators.entrySet()) {\n      Object o = selectedEvaluator.getKey().evaluate(workingForEvaluators);\n      workingForEvaluators.put(selectedEvaluator.getValue(), o);\n      workingToReturn.put(selectedEvaluator.getValue(), o);\n    }\n    \n    return workingToReturn;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    Tuple original = stream.read();\n    \n    if(original.EOF){\n      return original;\n    }\n\n    // create a copy with the limited set of fields\n    Tuple workingToReturn = new Tuple(new HashMap<>());\n    Tuple workingForEvaluators = new Tuple(new HashMap<>());\n\n    //Clear the TupleContext before running the evaluators.\n    //The TupleContext allows evaluators to cache values within the scope of a single tuple.\n    //For example a LocalDateTime could be parsed by one evaluator and used by other evaluators within the scope of the tuple.\n    //This avoids the need to create multiple LocalDateTime instances for the same tuple to satisfy a select expression.\n\n    streamContext.getTupleContext().clear();\n\n    for(Object fieldName : original.fields.keySet()){\n      workingForEvaluators.put(fieldName, original.get(fieldName));\n      if(selectedFields.containsKey(fieldName)){\n        workingToReturn.put(selectedFields.get(fieldName), original.get(fieldName));\n      }\n    }\n    \n    // apply all operations\n    for(StreamOperation operation : operations){\n      operation.operate(workingToReturn);\n      operation.operate(workingForEvaluators);\n    }\n    \n    // Apply all evaluators\n    for(Map.Entry<StreamEvaluator, String> selectedEvaluator : selectedEvaluators.entrySet()) {\n      Object o = selectedEvaluator.getKey().evaluate(workingForEvaluators);\n      if(o != null) {\n        workingForEvaluators.put(selectedEvaluator.getValue(), o);\n        workingToReturn.put(selectedEvaluator.getValue(), o);\n      }\n    }\n    \n    return workingToReturn;\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    Tuple original = stream.read();\n    \n    if(original.EOF){\n      return original;\n    }\n\n    // create a copy with the limited set of fields\n    Tuple workingToReturn = new Tuple(new HashMap<>());\n    Tuple workingForEvaluators = new Tuple(new HashMap<>());\n\n    //Clear the TupleContext before running the evaluators.\n    //The TupleContext allows evaluators to cache values within the scope of a single tuple.\n    //For example a LocalDateTime could be parsed by one evaluator and used by other evaluators within the scope of the tuple.\n    //This avoids the need to create multiple LocalDateTime instances for the same tuple to satisfy a select expression.\n\n    streamContext.getTupleContext().clear();\n\n    for(Object fieldName : original.fields.keySet()){\n      workingForEvaluators.put(fieldName, original.get(fieldName));\n      if(selectedFields.containsKey(fieldName)){\n        workingToReturn.put(selectedFields.get(fieldName), original.get(fieldName));\n      }\n    }\n    \n    // apply all operations\n    for(StreamOperation operation : operations){\n      operation.operate(workingToReturn);\n      operation.operate(workingForEvaluators);\n    }\n    \n    // Apply all evaluators\n    for(Map.Entry<StreamEvaluator, String> selectedEvaluator : selectedEvaluators.entrySet()) {\n      Object o = selectedEvaluator.getKey().evaluate(workingForEvaluators);\n      workingForEvaluators.put(selectedEvaluator.getValue(), o);\n      workingToReturn.put(selectedEvaluator.getValue(), o);\n    }\n    \n    return workingToReturn;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    Tuple original = stream.read();\n    \n    if(original.EOF){\n      return original;\n    }\n\n    // create a copy with the limited set of fields\n    Tuple workingToReturn = new Tuple(new HashMap<>());\n    Tuple workingForEvaluators = new Tuple(new HashMap<>());\n\n    //Clear the TupleContext before running the evaluators.\n    //The TupleContext allows evaluators to cache values within the scope of a single tuple.\n    //For example a LocalDateTime could be parsed by one evaluator and used by other evaluators within the scope of the tuple.\n    //This avoids the need to create multiple LocalDateTime instances for the same tuple to satisfy a select expression.\n\n    streamContext.getTupleContext().clear();\n\n    for(Object fieldName : original.fields.keySet()){\n      workingForEvaluators.put(fieldName, original.get(fieldName));\n      if(selectedFields.containsKey(fieldName)){\n        workingToReturn.put(selectedFields.get(fieldName), original.get(fieldName));\n      }\n    }\n    \n    // apply all operations\n    for(StreamOperation operation : operations){\n      operation.operate(workingToReturn);\n      operation.operate(workingForEvaluators);\n    }\n    \n    // Apply all evaluators\n    for(Map.Entry<StreamEvaluator, String> selectedEvaluator : selectedEvaluators.entrySet()) {\n      Object o = selectedEvaluator.getKey().evaluate(workingForEvaluators);\n      if(o != null) {\n        workingForEvaluators.put(selectedEvaluator.getValue(), o);\n        workingToReturn.put(selectedEvaluator.getValue(), o);\n      }\n    }\n    \n    return workingToReturn;\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    Tuple original = stream.read();\n    \n    if(original.EOF){\n      return original;\n    }\n\n    // create a copy with the limited set of fields\n    Tuple workingToReturn = new Tuple(new HashMap<>());\n    Tuple workingForEvaluators = new Tuple(new HashMap<>());\n\n    //Clear the TupleContext before running the evaluators.\n    //The TupleContext allows evaluators to cache values within the scope of a single tuple.\n    //For example a LocalDateTime could be parsed by one evaluator and used by other evaluators within the scope of the tuple.\n    //This avoids the need to create multiple LocalDateTime instances for the same tuple to satisfy a select expression.\n\n    streamContext.getTupleContext().clear();\n\n    for(Object fieldName : original.fields.keySet()){\n      workingForEvaluators.put(fieldName, original.get(fieldName));\n      if(selectedFields.containsKey(fieldName)){\n        workingToReturn.put(selectedFields.get(fieldName), original.get(fieldName));\n      }\n    }\n    \n    // apply all operations\n    for(StreamOperation operation : operations){\n      operation.operate(workingToReturn);\n      operation.operate(workingForEvaluators);\n    }\n    \n    // Apply all evaluators\n    for(Map.Entry<StreamEvaluator, String> selectedEvaluator : selectedEvaluators.entrySet()) {\n      Object o = selectedEvaluator.getKey().evaluate(workingForEvaluators);\n      workingForEvaluators.put(selectedEvaluator.getValue(), o);\n      workingToReturn.put(selectedEvaluator.getValue(), o);\n    }\n    \n    return workingToReturn;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    Tuple original = stream.read();\n    \n    if(original.EOF){\n      return original;\n    }\n\n    // create a copy with the limited set of fields\n    Tuple workingToReturn = new Tuple();\n    Tuple workingForEvaluators = new Tuple();\n\n    //Clear the TupleContext before running the evaluators.\n    //The TupleContext allows evaluators to cache values within the scope of a single tuple.\n    //For example a LocalDateTime could be parsed by one evaluator and used by other evaluators within the scope of the tuple.\n    //This avoids the need to create multiple LocalDateTime instances for the same tuple to satisfy a select expression.\n\n    streamContext.getTupleContext().clear();\n\n    for(Object fieldName : original.getFields().keySet()){\n      workingForEvaluators.put(fieldName, original.get(fieldName));\n      if(selectedFields.containsKey(fieldName)){\n        workingToReturn.put(selectedFields.get(fieldName), original.get(fieldName));\n      }\n    }\n    \n    // apply all operations\n    for(StreamOperation operation : operations){\n      operation.operate(workingToReturn);\n      operation.operate(workingForEvaluators);\n    }\n    \n    // Apply all evaluators\n    for(Map.Entry<StreamEvaluator, String> selectedEvaluator : selectedEvaluators.entrySet()) {\n      Object o = selectedEvaluator.getKey().evaluate(workingForEvaluators);\n      if(o != null) {\n        workingForEvaluators.put(selectedEvaluator.getValue(), o);\n        workingToReturn.put(selectedEvaluator.getValue(), o);\n      }\n    }\n    \n    return workingToReturn;\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    Tuple original = stream.read();\n    \n    if(original.EOF){\n      return original;\n    }\n\n    // create a copy with the limited set of fields\n    Tuple workingToReturn = new Tuple(new HashMap<>());\n    Tuple workingForEvaluators = new Tuple(new HashMap<>());\n\n    //Clear the TupleContext before running the evaluators.\n    //The TupleContext allows evaluators to cache values within the scope of a single tuple.\n    //For example a LocalDateTime could be parsed by one evaluator and used by other evaluators within the scope of the tuple.\n    //This avoids the need to create multiple LocalDateTime instances for the same tuple to satisfy a select expression.\n\n    streamContext.getTupleContext().clear();\n\n    for(Object fieldName : original.fields.keySet()){\n      workingForEvaluators.put(fieldName, original.get(fieldName));\n      if(selectedFields.containsKey(fieldName)){\n        workingToReturn.put(selectedFields.get(fieldName), original.get(fieldName));\n      }\n    }\n    \n    // apply all operations\n    for(StreamOperation operation : operations){\n      operation.operate(workingToReturn);\n      operation.operate(workingForEvaluators);\n    }\n    \n    // Apply all evaluators\n    for(Map.Entry<StreamEvaluator, String> selectedEvaluator : selectedEvaluators.entrySet()) {\n      Object o = selectedEvaluator.getKey().evaluate(workingForEvaluators);\n      if(o != null) {\n        workingForEvaluators.put(selectedEvaluator.getValue(), o);\n        workingToReturn.put(selectedEvaluator.getValue(), o);\n      }\n    }\n    \n    return workingToReturn;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["37f0902b794e42ac312bfd9daa69e6a523cf4675"],"56ebde9c21d35a39c07989c178372e901ad377da":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37f0902b794e42ac312bfd9daa69e6a523cf4675":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"804a8d5358fe7b7563b85ee7838714d720b89272":["35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc":["56ebde9c21d35a39c07989c178372e901ad377da"],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc"],"f8061ddd97f3352007d927dae445884a6f3d857b":["1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","56ebde9c21d35a39c07989c178372e901ad377da"],"56ebde9c21d35a39c07989c178372e901ad377da":["1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37f0902b794e42ac312bfd9daa69e6a523cf4675"],"37f0902b794e42ac312bfd9daa69e6a523cf4675":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","35cc45f54fe95a5534e02f9b8ca2a54af211ded5","f8061ddd97f3352007d927dae445884a6f3d857b"],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","804a8d5358fe7b7563b85ee7838714d720b89272","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}