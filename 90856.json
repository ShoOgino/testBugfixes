{"path":"lucene/backwards/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#addMyself().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#addMyself().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#addMyself().mjava","sourceNew":"  /** Used for testing */\n  private void addMyself() {\n    synchronized(allInstances) {\n      final int size = allInstances.size();\n      int upto = 0;\n      for(int i=0;i<size;i++) {\n        final ConcurrentMergeScheduler other = allInstances.get(i);\n        if (!(other.closed && 0 == other.mergeThreadCount()))\n          // Keep this one for now: it still has threads or\n          // may spawn new threads\n          allInstances.set(upto++, other);\n      }\n      allInstances.subList(upto, allInstances.size()).clear();\n      allInstances.add(this);\n    }\n  }\n\n","sourceOld":"  /** Used for testing */\n  private void addMyself() {\n    synchronized(allInstances) {\n      final int size = allInstances.size();\n      int upto = 0;\n      for(int i=0;i<size;i++) {\n        final ConcurrentMergeScheduler other = allInstances.get(i);\n        if (!(other.closed && 0 == other.mergeThreadCount()))\n          // Keep this one for now: it still has threads or\n          // may spawn new threads\n          allInstances.set(upto++, other);\n      }\n      allInstances.subList(upto, allInstances.size()).clear();\n      allInstances.add(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#addMyself().mjava","sourceNew":null,"sourceOld":"  /** Used for testing */\n  private void addMyself() {\n    synchronized(allInstances) {\n      final int size = allInstances.size();\n      int upto = 0;\n      for(int i=0;i<size;i++) {\n        final ConcurrentMergeScheduler other = allInstances.get(i);\n        if (!(other.closed && 0 == other.mergeThreadCount()))\n          // Keep this one for now: it still has threads or\n          // may spawn new threads\n          allInstances.set(upto++, other);\n      }\n      allInstances.subList(upto, allInstances.size()).clear();\n      allInstances.add(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}