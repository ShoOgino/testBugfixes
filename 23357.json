{"path":"src/java/org/apache/lucene/index/SegmentReader#get(Directory,SegmentInfo,SegmentInfos,boolean,boolean,int,boolean).mjava","commits":[{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#get(Directory,SegmentInfo,SegmentInfos,boolean,boolean,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(Directory dir, SegmentInfo si,\n                                  SegmentInfos sis,\n                                  boolean closeDir, boolean ownDir,\n                                  int readBufferSize,\n                                  boolean doOpenStores)\n    throws CorruptIndexException, IOException {\n    SegmentReader instance;\n    try {\n      instance = (SegmentReader)IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n    instance.init(dir, sis, closeDir, ownDir);\n    instance.initialize(si, readBufferSize, doOpenStores);\n    return instance;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"125b5699f11b58d9be0820c6ce8b1648812902e8","date":1190273227,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#get(Directory,SegmentInfo,SegmentInfos,boolean,boolean,int,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#get(Directory,SegmentInfo,SegmentInfos,boolean,boolean,int,boolean).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(Directory dir, SegmentInfo si,\n                                  SegmentInfos sis,\n                                  boolean closeDir, boolean ownDir,\n                                  int readBufferSize,\n                                  boolean doOpenStores)\n    throws CorruptIndexException, IOException {\n    SegmentReader instance;\n    try {\n      instance = (SegmentReader)IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n    instance.init(dir, sis, closeDir);\n    instance.initialize(si, readBufferSize, doOpenStores);\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(Directory dir, SegmentInfo si,\n                                  SegmentInfos sis,\n                                  boolean closeDir, boolean ownDir,\n                                  int readBufferSize,\n                                  boolean doOpenStores)\n    throws CorruptIndexException, IOException {\n    SegmentReader instance;\n    try {\n      instance = (SegmentReader)IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n    instance.init(dir, sis, closeDir, ownDir);\n    instance.initialize(si, readBufferSize, doOpenStores);\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5712975970a595c28f1988efd007e1b8a617a92f","date":1219499238,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,SegmentInfos,boolean,boolean,int,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#get(Directory,SegmentInfo,SegmentInfos,boolean,boolean,int,boolean).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  SegmentInfos sis,\n                                  boolean closeDir, boolean ownDir,\n                                  int readBufferSize,\n                                  boolean doOpenStores)\n    throws CorruptIndexException, IOException {\n    SegmentReader instance;\n    try {\n      if (readOnly)\n        instance = (SegmentReader)READONLY_IMPL.newInstance();\n      else\n        instance = (SegmentReader)IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n    instance.init(dir, sis, closeDir, readOnly);\n    instance.initialize(si, readBufferSize, doOpenStores);\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(Directory dir, SegmentInfo si,\n                                  SegmentInfos sis,\n                                  boolean closeDir, boolean ownDir,\n                                  int readBufferSize,\n                                  boolean doOpenStores)\n    throws CorruptIndexException, IOException {\n    SegmentReader instance;\n    try {\n      instance = (SegmentReader)IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n    instance.init(dir, sis, closeDir);\n    instance.initialize(si, readBufferSize, doOpenStores);\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"5712975970a595c28f1988efd007e1b8a617a92f":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5712975970a595c28f1988efd007e1b8a617a92f"]},"commit2Childs":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["5712975970a595c28f1988efd007e1b8a617a92f"],"5712975970a595c28f1988efd007e1b8a617a92f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}