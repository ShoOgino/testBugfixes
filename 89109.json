{"path":"solr/core/src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testRequiredOrProhibitedFlags().mjava","commits":[{"id":"0ad9ec888e587ca9a3279368245cdf00aabdc108","date":1338832525,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testRequiredOrProhibitedFlags().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRequiredOrProhibitedFlags() {\n    SpellingQueryConverter converter = new SpellingQueryConverter();\n    converter.init(new NamedList());\n    converter.setAnalyzer(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    {\n      List<Token> tokens = new ArrayList<Token>(converter.convert(\"aaa bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be optional\",    !hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be optional\",    !hasRequiredFlag(tokens.get(2)) && !hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<Token>(converter.convert(\"+aaa bbb -ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be required\",     hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be prohibited\",  !hasRequiredFlag(tokens.get(2)) &&  hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<Token>(converter.convert(\"aaa AND bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<Token>(converter.convert(\"aaa OR bbb OR ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<Token>(converter.convert(\"aaa AND bbb NOT ccc\"));\n      assertTrue(\"Should have 3 tokens\",            tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<Token>(converter.convert(\"aaa NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<Token>(converter.convert(\"aaa AND NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testRequiredOrProhibitedFlags().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testRequiredOrProhibitedFlags().mjava","sourceNew":"  @Test\n  public void testRequiredOrProhibitedFlags() {\n    SpellingQueryConverter converter = new SpellingQueryConverter();\n    converter.init(new NamedList());\n    converter.setAnalyzer(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be optional\",    !hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be optional\",    !hasRequiredFlag(tokens.get(2)) && !hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"+aaa bbb -ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be required\",     hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be prohibited\",  !hasRequiredFlag(tokens.get(2)) &&  hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa OR bbb OR ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND bbb NOT ccc\"));\n      assertTrue(\"Should have 3 tokens\",            tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testRequiredOrProhibitedFlags() {\n    SpellingQueryConverter converter = new SpellingQueryConverter();\n    converter.init(new NamedList());\n    converter.setAnalyzer(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    {\n      List<Token> tokens = new ArrayList<Token>(converter.convert(\"aaa bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be optional\",    !hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be optional\",    !hasRequiredFlag(tokens.get(2)) && !hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<Token>(converter.convert(\"+aaa bbb -ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be required\",     hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be prohibited\",  !hasRequiredFlag(tokens.get(2)) &&  hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<Token>(converter.convert(\"aaa AND bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<Token>(converter.convert(\"aaa OR bbb OR ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<Token>(converter.convert(\"aaa AND bbb NOT ccc\"));\n      assertTrue(\"Should have 3 tokens\",            tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<Token>(converter.convert(\"aaa NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<Token>(converter.convert(\"aaa AND NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testRequiredOrProhibitedFlags().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testRequiredOrProhibitedFlags().mjava","sourceNew":"  @Test\n  public void testRequiredOrProhibitedFlags() {\n    SpellingQueryConverter converter = new SpellingQueryConverter();\n    converter.init(new NamedList());\n    converter.setAnalyzer(new WhitespaceAnalyzer());\n\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be optional\",    !hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be optional\",    !hasRequiredFlag(tokens.get(2)) && !hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"+aaa bbb -ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be required\",     hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be prohibited\",  !hasRequiredFlag(tokens.get(2)) &&  hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa OR bbb OR ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND bbb NOT ccc\"));\n      assertTrue(\"Should have 3 tokens\",            tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testRequiredOrProhibitedFlags() {\n    SpellingQueryConverter converter = new SpellingQueryConverter();\n    converter.init(new NamedList());\n    converter.setAnalyzer(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be optional\",    !hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be optional\",    !hasRequiredFlag(tokens.get(2)) && !hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"+aaa bbb -ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be required\",     hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be prohibited\",  !hasRequiredFlag(tokens.get(2)) &&  hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa OR bbb OR ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND bbb NOT ccc\"));\n      assertTrue(\"Should have 3 tokens\",            tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testRequiredOrProhibitedFlags().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testRequiredOrProhibitedFlags().mjava","sourceNew":"  @Test\n  public void testRequiredOrProhibitedFlags() {\n    SpellingQueryConverter converter = new SpellingQueryConverter();\n    converter.init(new NamedList());\n    converter.setAnalyzer(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be optional\",    !hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be optional\",    !hasRequiredFlag(tokens.get(2)) && !hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"+aaa bbb -ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be required\",     hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be prohibited\",  !hasRequiredFlag(tokens.get(2)) &&  hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa OR bbb OR ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND bbb NOT ccc\"));\n      assertTrue(\"Should have 3 tokens\",            tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testRequiredOrProhibitedFlags() {\n    SpellingQueryConverter converter = new SpellingQueryConverter();\n    converter.init(new NamedList());\n    converter.setAnalyzer(new WhitespaceAnalyzer());\n\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be optional\",    !hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be optional\",    !hasRequiredFlag(tokens.get(2)) && !hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"+aaa bbb -ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be required\",     hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be prohibited\",  !hasRequiredFlag(tokens.get(2)) &&  hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa OR bbb OR ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND bbb NOT ccc\"));\n      assertTrue(\"Should have 3 tokens\",            tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testRequiredOrProhibitedFlags().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testRequiredOrProhibitedFlags().mjava","sourceNew":"  @Test\n  public void testRequiredOrProhibitedFlags() {\n    SpellingQueryConverter converter = new SpellingQueryConverter();\n    converter.init(new NamedList());\n    converter.setAnalyzer(new WhitespaceAnalyzer());\n\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be optional\",    !hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be optional\",    !hasRequiredFlag(tokens.get(2)) && !hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"+aaa bbb -ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be required\",     hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be prohibited\",  !hasRequiredFlag(tokens.get(2)) &&  hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa OR bbb OR ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND bbb NOT ccc\"));\n      assertTrue(\"Should have 3 tokens\",            tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testRequiredOrProhibitedFlags() {\n    SpellingQueryConverter converter = new SpellingQueryConverter();\n    converter.init(new NamedList());\n    converter.setAnalyzer(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be optional\",    !hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be optional\",    !hasRequiredFlag(tokens.get(2)) && !hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"+aaa bbb -ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be required\",     hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be prohibited\",  !hasRequiredFlag(tokens.get(2)) &&  hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa OR bbb OR ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND bbb NOT ccc\"));\n      assertTrue(\"Should have 3 tokens\",            tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testRequiredOrProhibitedFlags().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testRequiredOrProhibitedFlags().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"rawtypes\"})\n  public void testRequiredOrProhibitedFlags() {\n    SpellingQueryConverter converter = new SpellingQueryConverter();\n    converter.init(new NamedList());\n    converter.setAnalyzer(new WhitespaceAnalyzer());\n\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be optional\",    !hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be optional\",    !hasRequiredFlag(tokens.get(2)) && !hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"+aaa bbb -ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be required\",     hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be prohibited\",  !hasRequiredFlag(tokens.get(2)) &&  hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa OR bbb OR ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND bbb NOT ccc\"));\n      assertTrue(\"Should have 3 tokens\",            tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testRequiredOrProhibitedFlags() {\n    SpellingQueryConverter converter = new SpellingQueryConverter();\n    converter.init(new NamedList());\n    converter.setAnalyzer(new WhitespaceAnalyzer());\n\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be optional\",    !hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be optional\",    !hasRequiredFlag(tokens.get(2)) && !hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"+aaa bbb -ccc\"));\n      assertTrue(\"Should have 3 tokens\",          tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 should be required\",     hasRequiredFlag(tokens.get(0)) && !hasProhibitedFlag(tokens.get(0)));\n      assertTrue(\"token 2 should be optional\",    !hasRequiredFlag(tokens.get(1)) && !hasProhibitedFlag(tokens.get(1)));\n      assertTrue(\"token 3 should be prohibited\",  !hasRequiredFlag(tokens.get(2)) &&  hasProhibitedFlag(tokens.get(2)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND bbb ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa OR bbb OR ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND bbb NOT ccc\"));\n      assertTrue(\"Should have 3 tokens\",            tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precede n.b.o.\",  !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    {\n      List<Token> tokens = new ArrayList<>(converter.convert(\"aaa AND NOT bbb AND ccc\"));\n      assertTrue(\"Should have 3 tokens\",           tokens != null && tokens.size()==3);\n      assertTrue(\"token 1 precedes n.b.o.\",          hasNBOFlag(tokens.get(0)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 2 precedes n.b.o.\",          hasNBOFlag(tokens.get(1)) && hasInBooleanFlag(tokens.get(0)));\n      assertTrue(\"token 3 doesn't precedes n.b.o.\", !hasNBOFlag(tokens.get(2)) && hasInBooleanFlag(tokens.get(0)));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"0ad9ec888e587ca9a3279368245cdf00aabdc108":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"0ad9ec888e587ca9a3279368245cdf00aabdc108":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}