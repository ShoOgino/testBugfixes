{"path":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonRangeFacetAsSubFacet().mjava","commits":[{"id":"6409f24cc7d96b04fb1c932845092b0e307fb5d4","date":1515972624,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonRangeFacetAsSubFacet().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJsonRangeFacetAsSubFacet() throws Exception {\n\n    // limit=1, overrequest=1, with refinement enabled\n    // filter out the first 5 docs (by id), which should ensure that 'x2' is the top bucket overall...\n    //   ...except in some rare sharding cases where it doesn't make it into the top 2 terms.\n    // \n    // So the filter also explicitly accepts all 'x2' docs -- ensuring we have enough matches containing that term for it\n    // to be enough of a candidate in phase#1, but for many shard arrangements it won't be returned by all shards resulting\n    // in refinement being neccessary to get the x_s:x2 sub-shard ranges from shard(s) where x_s:x2 is only tied for the\n    // (shard local) top term count and would lose the (index order) tie breaker with x_s:x0 or x_s:x1\n    final String filter = \"id_i1:[\"+VALUES.size()+\" TO *] OR x_s:x2\";\n\n    // the *facet* results should be the same regardless of wether we filter via fq, or using a domain filter on the top facet\n    for (boolean use_domain : Arrays.asList(true, false)) {\n      final String domain = use_domain ? \"domain: { filter:'\" + filter + \"'},\" : \"\";\n      final SolrQuery solrQuery = new SolrQuery(\"q\", (use_domain ? \"*:*\" : filter),\n                                                \"rows\", \"0\", \"json.facet\",\n                                                \"{ foo:{ type:terms, field:x_s, refine:true, limit:1, overrequest:1, \" + domain +\n                                                \"        facet: { bar:{ type:range, field:\"+FIELD+\", other:all, \" +\n                                                \"                       start:'8,EUR', gap:'2,EUR', end:'22,EUR' }} } }\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        // this top level result count sanity check that should vary based on how we are filtering our facets...\n        assertEquals(use_domain ? 15 : 11, rsp.getResults().getNumFound());\n        \n        final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n        \n        // sanity check...\n        // because of the facet limit, foo should only have 1 bucket\n        // because of the fq, the val should be \"x2\" and the count=5\n        final List<NamedList<Object>> foo_buckets = (List<NamedList<Object>>) foo.get(\"buckets\");\n        assertEquals(1, foo_buckets.size());\n        assertEquals(\"x2\", foo_buckets.get(0).get(\"val\"));\n        assertEqualsHACK(\"foo bucket count\", 5L, foo_buckets.get(0).get(\"count\"));\n        \n        final NamedList<Object> bar = (NamedList<Object>)foo_buckets.get(0).get(\"bar\");\n        \n        // these are the 'x2' specific counts, based on our fq...\n        \n        assertEqualsHACK(\"before\", 2L, ((NamedList)bar.get(\"before\")).get(\"count\"));\n        assertEqualsHACK(\"after\", 1L, ((NamedList)bar.get(\"after\")).get(\"count\"));\n        assertEqualsHACK(\"between\", 2L, ((NamedList)bar.get(\"between\")).get(\"count\"));\n        \n        final List<NamedList> buckets = (List<NamedList>) bar.get(\"buckets\");\n        assertEquals(7, buckets.size());\n        for (int i = 0; i < 7; i++) {\n          NamedList bucket = buckets.get(i);\n          assertEquals((8 + (i * 2)) + \".00,EUR\", bucket.get(\"val\"));\n          // 12,EUR & 15,EUR are the 2 values that align with x2 docs\n          assertEqualsHACK(\"bucket #\" + i, (i == 2 || i == 3) ? 1L : 0L, bucket.get(\"count\"));\n        }\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1c841e27891873cab110ebeb89f124a8ec470176"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonRangeFacetAsSubFacet().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJsonRangeFacetAsSubFacet() throws Exception {\n\n    // limit=1, overrequest=1, with refinement enabled\n    // filter out the first 5 docs (by id), which should ensure that 'x2' is the top bucket overall...\n    //   ...except in some rare sharding cases where it doesn't make it into the top 2 terms.\n    // \n    // So the filter also explicitly accepts all 'x2' docs -- ensuring we have enough matches containing that term for it\n    // to be enough of a candidate in phase#1, but for many shard arrangements it won't be returned by all shards resulting\n    // in refinement being neccessary to get the x_s:x2 sub-shard ranges from shard(s) where x_s:x2 is only tied for the\n    // (shard local) top term count and would lose the (index order) tie breaker with x_s:x0 or x_s:x1\n    final String filter = \"id_i1:[\"+VALUES.size()+\" TO *] OR x_s:x2\";\n\n    // the *facet* results should be the same regardless of wether we filter via fq, or using a domain filter on the top facet\n    for (boolean use_domain : Arrays.asList(true, false)) {\n      final String domain = use_domain ? \"domain: { filter:'\" + filter + \"'},\" : \"\";\n      final SolrQuery solrQuery = new SolrQuery(\"q\", (use_domain ? \"*:*\" : filter),\n                                                \"rows\", \"0\", \"json.facet\",\n                                                \"{ foo:{ type:terms, field:x_s, refine:true, limit:1, overrequest:1, \" + domain +\n                                                \"        facet: { bar:{ type:range, field:\"+FIELD+\", other:all, \" +\n                                                \"                       start:'8,EUR', gap:'2,EUR', end:'22,EUR' }} } }\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        // this top level result count sanity check that should vary based on how we are filtering our facets...\n        assertEquals(use_domain ? 15 : 11, rsp.getResults().getNumFound());\n        \n        final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n        \n        // sanity check...\n        // because of the facet limit, foo should only have 1 bucket\n        // because of the fq, the val should be \"x2\" and the count=5\n        final List<NamedList<Object>> foo_buckets = (List<NamedList<Object>>) foo.get(\"buckets\");\n        assertEquals(1, foo_buckets.size());\n        assertEquals(\"x2\", foo_buckets.get(0).get(\"val\"));\n        assertEqualsHACK(\"foo bucket count\", 5L, foo_buckets.get(0).get(\"count\"));\n        \n        final NamedList<Object> bar = (NamedList<Object>)foo_buckets.get(0).get(\"bar\");\n        \n        // these are the 'x2' specific counts, based on our fq...\n        \n        assertEqualsHACK(\"before\", 2L, ((NamedList)bar.get(\"before\")).get(\"count\"));\n        assertEqualsHACK(\"after\", 1L, ((NamedList)bar.get(\"after\")).get(\"count\"));\n        assertEqualsHACK(\"between\", 2L, ((NamedList)bar.get(\"between\")).get(\"count\"));\n        \n        final List<NamedList> buckets = (List<NamedList>) bar.get(\"buckets\");\n        assertEquals(7, buckets.size());\n        for (int i = 0; i < 7; i++) {\n          NamedList bucket = buckets.get(i);\n          assertEquals((8 + (i * 2)) + \".00,EUR\", bucket.get(\"val\"));\n          // 12,EUR & 15,EUR are the 2 values that align with x2 docs\n          assertEqualsHACK(\"bucket #\" + i, (i == 2 || i == 3) ? 1L : 0L, bucket.get(\"count\"));\n        }\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c841e27891873cab110ebeb89f124a8ec470176","date":1586527220,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonRangeFacetAsSubFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonRangeFacetAsSubFacet().mjava","sourceNew":"  @Test\n  public void testJsonRangeFacetAsSubFacet() throws Exception {\n\n    // limit=1, overrequest=1, with refinement enabled\n    // filter out the first 5 docs (by id), which should ensure that 'x2' is the top bucket overall...\n    //   ...except in some rare sharding cases where it doesn't make it into the top 2 terms.\n    // \n    // So the filter also explicitly accepts all 'x2' docs -- ensuring we have enough matches containing that term for it\n    // to be enough of a candidate in phase#1, but for many shard arrangements it won't be returned by all shards resulting\n    // in refinement being neccessary to get the x_s:x2 sub-shard ranges from shard(s) where x_s:x2 is only tied for the\n    // (shard local) top term count and would lose the (index order) tie breaker with x_s:x0 or x_s:x1\n    final String filter = \"id_i1:[\"+VALUES.size()+\" TO *] OR x_s:x2\";\n\n    // the *facet* results should be the same regardless of wether we filter via fq, or using a domain filter on the top facet\n    for (boolean use_domain : Arrays.asList(true, false)) {\n      final String domain = use_domain ? \"domain: { filter:'\" + filter + \"'},\" : \"\";\n      final SolrQuery solrQuery = new SolrQuery(\"q\", (use_domain ? \"*:*\" : filter),\n                                                \"rows\", \"0\", \"json.facet\",\n                                                \"{ foo:{ type:terms, field:x_s, refine:true, limit:1, overrequest:1, \" + domain +\n                                                \"        facet: { bar:{ type:range, field:\"+FIELD+\", other:all, \" +\n                                                \"                       start:'8,EUR', gap:'2,EUR', end:'22,EUR' }} } }\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        // this top level result count sanity check that should vary based on how we are filtering our facets...\n        assertEquals(use_domain ? 15 : 11, rsp.getResults().getNumFound());\n        \n        final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n        \n        // sanity check...\n        // because of the facet limit, foo should only have 1 bucket\n        // because of the fq, the val should be \"x2\" and the count=5\n        final List<NamedList<Object>> foo_buckets = (List<NamedList<Object>>) foo.get(\"buckets\");\n        assertEquals(1, foo_buckets.size());\n        assertEquals(\"x2\", foo_buckets.get(0).get(\"val\"));\n        assertEquals(\"foo bucket count\", 5L, foo_buckets.get(0).get(\"count\"));\n        \n        final NamedList<Object> bar = (NamedList<Object>)foo_buckets.get(0).get(\"bar\");\n        \n        // these are the 'x2' specific counts, based on our fq...\n        \n        assertEquals(\"before\", 2L, ((NamedList)bar.get(\"before\")).get(\"count\"));\n        assertEquals(\"after\", 1L, ((NamedList)bar.get(\"after\")).get(\"count\"));\n        assertEquals(\"between\", 2L, ((NamedList)bar.get(\"between\")).get(\"count\"));\n        \n        final List<NamedList> buckets = (List<NamedList>) bar.get(\"buckets\");\n        assertEquals(7, buckets.size());\n        for (int i = 0; i < 7; i++) {\n          NamedList bucket = buckets.get(i);\n          assertEquals((8 + (i * 2)) + \".00,EUR\", bucket.get(\"val\"));\n          // 12,EUR & 15,EUR are the 2 values that align with x2 docs\n          assertEquals(\"bucket #\" + i, (i == 2 || i == 3) ? 1L : 0L, bucket.get(\"count\"));\n        }\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJsonRangeFacetAsSubFacet() throws Exception {\n\n    // limit=1, overrequest=1, with refinement enabled\n    // filter out the first 5 docs (by id), which should ensure that 'x2' is the top bucket overall...\n    //   ...except in some rare sharding cases where it doesn't make it into the top 2 terms.\n    // \n    // So the filter also explicitly accepts all 'x2' docs -- ensuring we have enough matches containing that term for it\n    // to be enough of a candidate in phase#1, but for many shard arrangements it won't be returned by all shards resulting\n    // in refinement being neccessary to get the x_s:x2 sub-shard ranges from shard(s) where x_s:x2 is only tied for the\n    // (shard local) top term count and would lose the (index order) tie breaker with x_s:x0 or x_s:x1\n    final String filter = \"id_i1:[\"+VALUES.size()+\" TO *] OR x_s:x2\";\n\n    // the *facet* results should be the same regardless of wether we filter via fq, or using a domain filter on the top facet\n    for (boolean use_domain : Arrays.asList(true, false)) {\n      final String domain = use_domain ? \"domain: { filter:'\" + filter + \"'},\" : \"\";\n      final SolrQuery solrQuery = new SolrQuery(\"q\", (use_domain ? \"*:*\" : filter),\n                                                \"rows\", \"0\", \"json.facet\",\n                                                \"{ foo:{ type:terms, field:x_s, refine:true, limit:1, overrequest:1, \" + domain +\n                                                \"        facet: { bar:{ type:range, field:\"+FIELD+\", other:all, \" +\n                                                \"                       start:'8,EUR', gap:'2,EUR', end:'22,EUR' }} } }\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        // this top level result count sanity check that should vary based on how we are filtering our facets...\n        assertEquals(use_domain ? 15 : 11, rsp.getResults().getNumFound());\n        \n        final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n        \n        // sanity check...\n        // because of the facet limit, foo should only have 1 bucket\n        // because of the fq, the val should be \"x2\" and the count=5\n        final List<NamedList<Object>> foo_buckets = (List<NamedList<Object>>) foo.get(\"buckets\");\n        assertEquals(1, foo_buckets.size());\n        assertEquals(\"x2\", foo_buckets.get(0).get(\"val\"));\n        assertEqualsHACK(\"foo bucket count\", 5L, foo_buckets.get(0).get(\"count\"));\n        \n        final NamedList<Object> bar = (NamedList<Object>)foo_buckets.get(0).get(\"bar\");\n        \n        // these are the 'x2' specific counts, based on our fq...\n        \n        assertEqualsHACK(\"before\", 2L, ((NamedList)bar.get(\"before\")).get(\"count\"));\n        assertEqualsHACK(\"after\", 1L, ((NamedList)bar.get(\"after\")).get(\"count\"));\n        assertEqualsHACK(\"between\", 2L, ((NamedList)bar.get(\"between\")).get(\"count\"));\n        \n        final List<NamedList> buckets = (List<NamedList>) bar.get(\"buckets\");\n        assertEquals(7, buckets.size());\n        for (int i = 0; i < 7; i++) {\n          NamedList bucket = buckets.get(i);\n          assertEquals((8 + (i * 2)) + \".00,EUR\", bucket.get(\"val\"));\n          // 12,EUR & 15,EUR are the 2 values that align with x2 docs\n          assertEqualsHACK(\"bucket #\" + i, (i == 2 || i == 3) ? 1L : 0L, bucket.get(\"count\"));\n        }\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","bugFix":["6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonRangeFacetAsSubFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonRangeFacetAsSubFacet().mjava","sourceNew":"  @Test\n  public void testJsonRangeFacetAsSubFacet() throws Exception {\n\n    // limit=1, overrequest=1, with refinement enabled\n    // filter out the first 5 docs (by id), which should ensure that 'x2' is the top bucket overall...\n    //   ...except in some rare sharding cases where it doesn't make it into the top 2 terms.\n    // \n    // So the filter also explicitly accepts all 'x2' docs -- ensuring we have enough matches containing that term for it\n    // to be enough of a candidate in phase#1, but for many shard arrangements it won't be returned by all shards resulting\n    // in refinement being neccessary to get the x_s:x2 sub-shard ranges from shard(s) where x_s:x2 is only tied for the\n    // (shard local) top term count and would lose the (index order) tie breaker with x_s:x0 or x_s:x1\n    final String filter = \"id_i1:[\"+VALUES.size()+\" TO *] OR x_s:x2\";\n\n    // the *facet* results should be the same regardless of wether we filter via fq, or using a domain filter on the top facet\n    for (boolean use_domain : Arrays.asList(true, false)) {\n      final String domain = use_domain ? \"domain: { filter:'\" + filter + \"'},\" : \"\";\n      final SolrQuery solrQuery = new SolrQuery(\"q\", (use_domain ? \"*:*\" : filter),\n                                                \"rows\", \"0\", \"json.facet\",\n                                                \"{ foo:{ type:terms, field:x_s, refine:true, limit:1, overrequest:1, \" + domain +\n                                                \"        facet: { bar:{ type:range, field:\"+FIELD+\", other:all, \" +\n                                                \"                       start:'8,EUR', gap:'2,EUR', end:'22,EUR' }} } }\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        // this top level result count sanity check that should vary based on how we are filtering our facets...\n        assertEquals(use_domain ? 15 : 11, rsp.getResults().getNumFound());\n        \n        @SuppressWarnings({\"unchecked\"})\n        final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n        \n        // sanity check...\n        // because of the facet limit, foo should only have 1 bucket\n        // because of the fq, the val should be \"x2\" and the count=5\n        @SuppressWarnings({\"unchecked\"})\n        final List<NamedList<Object>> foo_buckets = (List<NamedList<Object>>) foo.get(\"buckets\");\n        assertEquals(1, foo_buckets.size());\n        assertEquals(\"x2\", foo_buckets.get(0).get(\"val\"));\n        assertEquals(\"foo bucket count\", 5L, foo_buckets.get(0).get(\"count\"));\n        \n        @SuppressWarnings({\"unchecked\"})\n        final NamedList<Object> bar = (NamedList<Object>)foo_buckets.get(0).get(\"bar\");\n        \n        // these are the 'x2' specific counts, based on our fq...\n        \n        assertEquals(\"before\", 2L, ((NamedList)bar.get(\"before\")).get(\"count\"));\n        assertEquals(\"after\", 1L, ((NamedList)bar.get(\"after\")).get(\"count\"));\n        assertEquals(\"between\", 2L, ((NamedList)bar.get(\"between\")).get(\"count\"));\n        \n        @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n        final List<NamedList> buckets = (List<NamedList>) bar.get(\"buckets\");\n        assertEquals(7, buckets.size());\n        for (int i = 0; i < 7; i++) {\n          @SuppressWarnings({\"rawtypes\"})\n          NamedList bucket = buckets.get(i);\n          assertEquals((8 + (i * 2)) + \".00,EUR\", bucket.get(\"val\"));\n          // 12,EUR & 15,EUR are the 2 values that align with x2 docs\n          assertEquals(\"bucket #\" + i, (i == 2 || i == 3) ? 1L : 0L, bucket.get(\"count\"));\n        }\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJsonRangeFacetAsSubFacet() throws Exception {\n\n    // limit=1, overrequest=1, with refinement enabled\n    // filter out the first 5 docs (by id), which should ensure that 'x2' is the top bucket overall...\n    //   ...except in some rare sharding cases where it doesn't make it into the top 2 terms.\n    // \n    // So the filter also explicitly accepts all 'x2' docs -- ensuring we have enough matches containing that term for it\n    // to be enough of a candidate in phase#1, but for many shard arrangements it won't be returned by all shards resulting\n    // in refinement being neccessary to get the x_s:x2 sub-shard ranges from shard(s) where x_s:x2 is only tied for the\n    // (shard local) top term count and would lose the (index order) tie breaker with x_s:x0 or x_s:x1\n    final String filter = \"id_i1:[\"+VALUES.size()+\" TO *] OR x_s:x2\";\n\n    // the *facet* results should be the same regardless of wether we filter via fq, or using a domain filter on the top facet\n    for (boolean use_domain : Arrays.asList(true, false)) {\n      final String domain = use_domain ? \"domain: { filter:'\" + filter + \"'},\" : \"\";\n      final SolrQuery solrQuery = new SolrQuery(\"q\", (use_domain ? \"*:*\" : filter),\n                                                \"rows\", \"0\", \"json.facet\",\n                                                \"{ foo:{ type:terms, field:x_s, refine:true, limit:1, overrequest:1, \" + domain +\n                                                \"        facet: { bar:{ type:range, field:\"+FIELD+\", other:all, \" +\n                                                \"                       start:'8,EUR', gap:'2,EUR', end:'22,EUR' }} } }\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        // this top level result count sanity check that should vary based on how we are filtering our facets...\n        assertEquals(use_domain ? 15 : 11, rsp.getResults().getNumFound());\n        \n        final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n        \n        // sanity check...\n        // because of the facet limit, foo should only have 1 bucket\n        // because of the fq, the val should be \"x2\" and the count=5\n        final List<NamedList<Object>> foo_buckets = (List<NamedList<Object>>) foo.get(\"buckets\");\n        assertEquals(1, foo_buckets.size());\n        assertEquals(\"x2\", foo_buckets.get(0).get(\"val\"));\n        assertEquals(\"foo bucket count\", 5L, foo_buckets.get(0).get(\"count\"));\n        \n        final NamedList<Object> bar = (NamedList<Object>)foo_buckets.get(0).get(\"bar\");\n        \n        // these are the 'x2' specific counts, based on our fq...\n        \n        assertEquals(\"before\", 2L, ((NamedList)bar.get(\"before\")).get(\"count\"));\n        assertEquals(\"after\", 1L, ((NamedList)bar.get(\"after\")).get(\"count\"));\n        assertEquals(\"between\", 2L, ((NamedList)bar.get(\"between\")).get(\"count\"));\n        \n        final List<NamedList> buckets = (List<NamedList>) bar.get(\"buckets\");\n        assertEquals(7, buckets.size());\n        for (int i = 0; i < 7; i++) {\n          NamedList bucket = buckets.get(i);\n          assertEquals((8 + (i * 2)) + \".00,EUR\", bucket.get(\"val\"));\n          // 12,EUR & 15,EUR are the 2 values that align with x2 docs\n          assertEquals(\"bucket #\" + i, (i == 2 || i == 3) ? 1L : 0L, bucket.get(\"count\"));\n        }\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c841e27891873cab110ebeb89f124a8ec470176":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["1c841e27891873cab110ebeb89f124a8ec470176"]},"commit2Childs":{"1c841e27891873cab110ebeb89f124a8ec470176":["e98520789adb1d5ad05afb4956eca0944a929688"],"b94236357aaa22b76c10629851fe4e376e0cea82":["1c841e27891873cab110ebeb89f124a8ec470176"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}