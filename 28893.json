{"path":"src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(String).mjava","commits":[{"id":"a2686717a32b40222a4361bd16ae295511cb8ce7","date":1226500515,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(String).mjava","pathOld":"src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getIdf(String).mjava","sourceNew":"    private int getDocFreq(String term) {\n      int result = 1;\n      currentTerm = currentTerm.createTerm(term);\n      try {\n        TermEnum termEnum = reader.terms(currentTerm);\n        if (termEnum != null && termEnum.term().equals(currentTerm)) {\n          result = termEnum.docFreq();\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","sourceOld":"    private int getIdf(String term) {\n      int result = 1;\n      currentTerm = currentTerm.createTerm(term);\n      try {\n        TermEnum termEnum = reader.terms(currentTerm);\n        if (termEnum != null && termEnum.term().equals(currentTerm)) {\n          result = termEnum.docFreq();\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(String).mjava","pathOld":"src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#getDocFreq(String).mjava","sourceNew":"    private int getDocFreq(String term) {\n      int result = 1;\n      currentTerm = currentTerm.createTerm(term);\n      try {\n        TermEnum termEnum = reader.terms(currentTerm);\n        if (termEnum != null && termEnum.term().equals(currentTerm)) {\n          result = termEnum.docFreq();\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","sourceOld":"    private int getDocFreq(String term) {\n      int result = 1;\n      currentTerm = currentTerm.createTerm(term);\n      try {\n        TermEnum termEnum = reader.terms(currentTerm);\n        if (termEnum != null && termEnum.term().equals(currentTerm)) {\n          result = termEnum.docFreq();\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a2686717a32b40222a4361bd16ae295511cb8ce7":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["a2686717a32b40222a4361bd16ae295511cb8ce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["a2686717a32b40222a4361bd16ae295511cb8ce7"],"a2686717a32b40222a4361bd16ae295511cb8ce7":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}