{"path":"lucene/src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","sourceNew":"  @Override\n  public TopDocs search(Weight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    final HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      final TopDocs docs = new MultiSearcherCallableNoSort(DummyConcurrentLock.INSTANCE,\n        searchables[i], weight, filter, nDocs, hq, i, starts).call();\n      totalHits += docs.totalHits; // update totalHits\n    }\n\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","sourceOld":"  @Override\n  public TopDocs search(Weight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    final HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      final TopDocs docs = new MultiSearcherCallableNoSort(DummyConcurrentLock.INSTANCE,\n        searchables[i], weight, filter, nDocs, hq, i, starts).call();\n      totalHits += docs.totalHits; // update totalHits\n    }\n\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","sourceNew":"  @Override\n  public TopDocs search(Weight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    nDocs = Math.min(nDocs, maxDoc());\n    final HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      final TopDocs docs = new MultiSearcherCallableNoSort(DummyConcurrentLock.INSTANCE,\n        searchables[i], weight, filter, nDocs, hq, i, starts).call();\n      totalHits += docs.totalHits; // update totalHits\n    }\n\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","sourceOld":"  @Override\n  public TopDocs search(Weight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    final HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      final TopDocs docs = new MultiSearcherCallableNoSort(DummyConcurrentLock.INSTANCE,\n        searchables[i], weight, filter, nDocs, hq, i, starts).call();\n      totalHits += docs.totalHits; // update totalHits\n    }\n\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public TopDocs search(Weight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    nDocs = Math.min(nDocs, maxDoc());\n    final HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      final TopDocs docs = new MultiSearcherCallableNoSort(DummyConcurrentLock.INSTANCE,\n        searchables[i], weight, filter, nDocs, hq, i, starts).call();\n      totalHits += docs.totalHits; // update totalHits\n    }\n\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public TopDocs search(Weight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    nDocs = Math.min(nDocs, maxDoc());\n    final HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      final TopDocs docs = new MultiSearcherCallableNoSort(DummyConcurrentLock.INSTANCE,\n        searchables[i], weight, filter, nDocs, hq, i, starts).call();\n      totalHits += docs.totalHits; // update totalHits\n    }\n\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public TopDocs search(Weight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    nDocs = Math.min(nDocs, maxDoc());\n    final HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      final TopDocs docs = new MultiSearcherCallableNoSort(DummyConcurrentLock.INSTANCE,\n        searchables[i], weight, filter, nDocs, hq, i, starts).call();\n      totalHits += docs.totalHits; // update totalHits\n    }\n\n    final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["2aafd88401639311b0404e67c94e829e123a0e45","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["2aafd88401639311b0404e67c94e829e123a0e45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2aafd88401639311b0404e67c94e829e123a0e45":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["2aafd88401639311b0404e67c94e829e123a0e45","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2aafd88401639311b0404e67c94e829e123a0e45":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2aafd88401639311b0404e67c94e829e123a0e45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}