{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","sourceNew":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfd4d352ddf04b37253ad97ce1aad1448253f0f7","date":1310173878,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","sourceNew":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n\n        TermRangeQuery rangeQuery = new TermRangeQuery(\n            FIELD_NAME,\n            new BytesRef(\"kannedy\"),\n            new BytesRef(\"kznnedy\"),\n            true, true);\n        rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n\n        query = rangeQuery;\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","sourceNew":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n\n        TermRangeQuery rangeQuery = new TermRangeQuery(\n            FIELD_NAME,\n            new BytesRef(\"kannedy\"),\n            new BytesRef(\"kznnedy\"),\n            true, true);\n        rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n\n        query = rangeQuery;\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bfa39296944e5fddc334aa89243d91f9cbb8367","date":1330973284,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","sourceNew":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n\n        TermRangeQuery rangeQuery = new TermRangeQuery(\n            FIELD_NAME,\n            new BytesRef(\"kannedy\"),\n            new BytesRef(\"kznnedy\"),\n            true, true);\n        rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n\n        query = rangeQuery;\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n\n        TermRangeQuery rangeQuery = new TermRangeQuery(\n            FIELD_NAME,\n            new BytesRef(\"kannedy\"),\n            new BytesRef(\"kznnedy\"),\n            true, true);\n        rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n\n        query = rangeQuery;\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","sourceNew":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n\n        TermRangeQuery rangeQuery = new TermRangeQuery(\n            FIELD_NAME,\n            new BytesRef(\"kannedy\"),\n            new BytesRef(\"kznnedy\"),\n            true, true);\n        rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n\n        query = rangeQuery;\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n\n        TermRangeQuery rangeQuery = new TermRangeQuery(\n            FIELD_NAME,\n            new BytesRef(\"kannedy\"),\n            new BytesRef(\"kznnedy\"),\n            true, true);\n        rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n\n        query = rangeQuery;\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","sourceNew":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n\n        TermRangeQuery rangeQuery = new TermRangeQuery(\n            FIELD_NAME,\n            new BytesRef(\"kannedy\"),\n            new BytesRef(\"kznnedy\"),\n            true, true);\n        rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n\n        query = rangeQuery;\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n\n        TermRangeQuery rangeQuery = new TermRangeQuery(\n            FIELD_NAME,\n            new BytesRef(\"kannedy\"),\n            new BytesRef(\"kznnedy\"),\n            true, true);\n        rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n\n        query = rangeQuery;\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8bfa39296944e5fddc334aa89243d91f9cbb8367"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["9454a6510e2db155fb01faa5c049b06ece95fab9","dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8bfa39296944e5fddc334aa89243d91f9cbb8367","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","63639dd66fd5bd9b90bc24dd596ae01575f27cc4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}