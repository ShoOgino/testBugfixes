{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","commits":[{"id":"1494abe5dc85557ec2e2772f87660d48f831c3a5","date":1337614370,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,String,CheckAbort,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file \" + fileName);\n    }\n    assert info.getDocStoreOffset() == -1;\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    IOException prior = null;\n    try {\n      for (String file : files) {\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } catch(IOException ex) {\n      prior = ex;\n    } finally {\n      IOUtils.closeWhileHandlingException(prior, cfsDir);\n    }\n\n    Set<String> siFiles = new HashSet<String>();\n    siFiles.add(fileName);\n    siFiles.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, String fileName, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file \" + fileName);\n    }\n    assert info.getDocStoreOffset() == -1;\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    IOException prior = null;\n    try {\n      for (String file : files) {\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } catch(IOException ex) {\n      prior = ex;\n    } finally {\n      IOUtils.closeWhileHandlingException(prior, cfsDir);\n    }\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb5728b83dbb3e002cdd22adfe6caf103a96ef15","date":1337791289,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file \" + fileName);\n    }\n    assert info.getDocStoreOffset() == -1;\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    IOException prior = null;\n    try {\n      for (String file : files) {\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } catch(IOException ex) {\n      prior = ex;\n    } finally {\n      IOUtils.closeWhileHandlingException(prior, cfsDir);\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<String>();\n    siFiles.add(fileName);\n    siFiles.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file \" + fileName);\n    }\n    assert info.getDocStoreOffset() == -1;\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    IOException prior = null;\n    try {\n      for (String file : files) {\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } catch(IOException ex) {\n      prior = ex;\n    } finally {\n      IOUtils.closeWhileHandlingException(prior, cfsDir);\n    }\n\n    Set<String> siFiles = new HashSet<String>();\n    siFiles.add(fileName);\n    siFiles.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a917aca07a305ab70118a83e84d931503441271","date":1337826487,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file \" + fileName);\n    }\n    assert Lucene3xSegmentInfoFormat.getDocStoreOffset(info) == -1;\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    IOException prior = null;\n    try {\n      for (String file : files) {\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } catch(IOException ex) {\n      prior = ex;\n    } finally {\n      IOUtils.closeWhileHandlingException(prior, cfsDir);\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<String>();\n    siFiles.add(fileName);\n    siFiles.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file \" + fileName);\n    }\n    assert info.getDocStoreOffset() == -1;\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    IOException prior = null;\n    try {\n      for (String file : files) {\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } catch(IOException ex) {\n      prior = ex;\n    } finally {\n      IOUtils.closeWhileHandlingException(prior, cfsDir);\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<String>();\n    siFiles.add(fileName);\n    siFiles.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(Directory,String,CheckAbort,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file \" + fileName);\n    }\n    assert Lucene3xSegmentInfoFormat.getDocStoreOffset(info) == -1;\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    IOException prior = null;\n    try {\n      for (String file : files) {\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } catch(IOException ex) {\n      prior = ex;\n    } finally {\n      IOUtils.closeWhileHandlingException(prior, cfsDir);\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<String>();\n    siFiles.add(fileName);\n    siFiles.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(Directory directory, String fileName, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n    assert info.getDocStoreOffset() == -1;\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    try {\n      for (String file : files) {\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } finally {\n      cfsDir.close();\n    }\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file \" + fileName);\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    IOException prior = null;\n    try {\n      for (String file : files) {\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } catch(IOException ex) {\n      prior = ex;\n    } finally {\n      IOUtils.closeWhileHandlingException(prior, cfsDir);\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<String>();\n    siFiles.add(fileName);\n    siFiles.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file \" + fileName);\n    }\n    assert Lucene3xSegmentInfoFormat.getDocStoreOffset(info) == -1;\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    IOException prior = null;\n    try {\n      for (String file : files) {\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } catch(IOException ex) {\n      prior = ex;\n    } finally {\n      IOUtils.closeWhileHandlingException(prior, cfsDir);\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<String>();\n    siFiles.add(fileName);\n    siFiles.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eae2a56dc810a17cf807d831f720dec931a03de","date":1349262073,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file \" + fileName);\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    IOException prior = null;\n    try {\n      for (String file : files) {\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } catch(IOException ex) {\n      prior = ex;\n    } finally {\n      boolean success = false;\n      try {\n        IOUtils.closeWhileHandlingException(prior, cfsDir);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory.deleteFile(fileName);\n          } catch (Throwable t) {\n          }\n          try {\n            directory.deleteFile(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n          } catch (Throwable t) {\n          }\n        }\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<String>();\n    siFiles.add(fileName);\n    siFiles.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file \" + fileName);\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    IOException prior = null;\n    try {\n      for (String file : files) {\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } catch(IOException ex) {\n      prior = ex;\n    } finally {\n      IOUtils.closeWhileHandlingException(prior, cfsDir);\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<String>();\n    siFiles.add(fileName);\n    siFiles.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file \" + fileName);\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    IOException prior = null;\n    try {\n      for (String file : files) {\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } catch(IOException ex) {\n      prior = ex;\n    } finally {\n      boolean success = false;\n      try {\n        IOUtils.closeWhileHandlingException(prior, cfsDir);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory.deleteFile(fileName);\n          } catch (Throwable t) {\n          }\n          try {\n            directory.deleteFile(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n          } catch (Throwable t) {\n          }\n        }\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>();\n    siFiles.add(fileName);\n    siFiles.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file \" + fileName);\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    IOException prior = null;\n    try {\n      for (String file : files) {\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } catch(IOException ex) {\n      prior = ex;\n    } finally {\n      boolean success = false;\n      try {\n        IOUtils.closeWhileHandlingException(prior, cfsDir);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory.deleteFile(fileName);\n          } catch (Throwable t) {\n          }\n          try {\n            directory.deleteFile(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n          } catch (Throwable t) {\n          }\n        }\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<String>();\n    siFiles.add(fileName);\n    siFiles.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43e3527ed736c46c0f0ab28181937b9de5ef7c63","date":1399502658,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file \" + fileName);\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    boolean success = false;\n    try {\n      for (String file : files) {\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(cfsDir);\n      } else {\n        IOUtils.closeWhileHandlingException(cfsDir);\n        try {\n          directory.deleteFile(fileName);\n        } catch (Throwable t) {\n        }\n        try {\n          directory.deleteFile(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n        } catch (Throwable t) {\n        }\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>();\n    siFiles.add(fileName);\n    siFiles.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file \" + fileName);\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    IOException prior = null;\n    try {\n      for (String file : files) {\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } catch(IOException ex) {\n      prior = ex;\n    } finally {\n      boolean success = false;\n      try {\n        IOUtils.closeWhileHandlingException(prior, cfsDir);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory.deleteFile(fileName);\n          } catch (Throwable t) {\n          }\n          try {\n            directory.deleteFile(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n          } catch (Throwable t) {\n          }\n        }\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>();\n    siFiles.add(fileName);\n    siFiles.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","date":1412231650,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file \" + fileName);\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(info.getId(), directory, fileName, context, true);\n    boolean success = false;\n    try {\n      for (String file : files) {\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(cfsDir);\n      } else {\n        IOUtils.closeWhileHandlingException(cfsDir);\n        try {\n          directory.deleteFile(fileName);\n        } catch (Throwable t) {\n        }\n        try {\n          directory.deleteFile(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n        } catch (Throwable t) {\n        }\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>();\n    siFiles.add(fileName);\n    siFiles.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file \" + fileName);\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    boolean success = false;\n    try {\n      for (String file : files) {\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(cfsDir);\n      } else {\n        IOUtils.closeWhileHandlingException(cfsDir);\n        try {\n          directory.deleteFile(fileName);\n        } catch (Throwable t) {\n        }\n        try {\n          directory.deleteFile(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n        } catch (Throwable t) {\n        }\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>();\n    siFiles.add(fileName);\n    siFiles.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // nocommit: use trackingdirectorywrapper instead to know which files to delete when things fail:\n    String cfsFileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    String cfeFileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file\");\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    \n    boolean success = false;\n    try {\n      info.getCodec().compoundFormat().write(directory, info, files, checkAbort, context);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, cfsFileName, cfeFileName);\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>();\n    siFiles.add(cfsFileName);\n    siFiles.add(cfeFileName);\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file \" + fileName);\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(info.getId(), directory, fileName, context, true);\n    boolean success = false;\n    try {\n      for (String file : files) {\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(cfsDir);\n      } else {\n        IOUtils.closeWhileHandlingException(cfsDir);\n        try {\n          directory.deleteFile(fileName);\n        } catch (Throwable t) {\n        }\n        try {\n          directory.deleteFile(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n        } catch (Throwable t) {\n        }\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>();\n    siFiles.add(fileName);\n    siFiles.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cbcba1596953276043d89eca0af2ef0bd115c79","date":1412306275,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // TODO: use trackingdirectorywrapper instead of files() to know which files to delete when things fail:\n    String cfsFiles[] = info.getCodec().compoundFormat().files(info);\n    \n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file\");\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    \n    boolean success = false;\n    try {\n      info.getCodec().compoundFormat().write(directory, info, files, checkAbort, context);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, cfsFiles);\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>();\n    for (String cfsFile : cfsFiles) {\n      siFiles.add(cfsFile);\n    };\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // nocommit: use trackingdirectorywrapper instead to know which files to delete when things fail:\n    String cfsFileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    String cfeFileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file\");\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    \n    boolean success = false;\n    try {\n      info.getCodec().compoundFormat().write(directory, info, files, checkAbort, context);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, cfsFileName, cfeFileName);\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>();\n    siFiles.add(cfsFileName);\n    siFiles.add(cfeFileName);\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // TODO: use trackingdirectorywrapper instead of files() to know which files to delete when things fail:\n    String cfsFiles[] = info.getCodec().compoundFormat().files(info);\n    \n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file\");\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    \n    boolean success = false;\n    try {\n      info.getCodec().compoundFormat().write(directory, info, files, checkAbort, context);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, cfsFiles);\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>();\n    for (String cfsFile : cfsFiles) {\n      siFiles.add(cfsFile);\n    };\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file \" + fileName);\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    boolean success = false;\n    try {\n      for (String file : files) {\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(cfsDir);\n      } else {\n        IOUtils.closeWhileHandlingException(cfsDir);\n        try {\n          directory.deleteFile(fileName);\n        } catch (Throwable t) {\n        }\n        try {\n          directory.deleteFile(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n        } catch (Throwable t) {\n        }\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>();\n    siFiles.add(fileName);\n    siFiles.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7599427f762eb1b4265584fd6e96521e4a1a4f3c","date":1413100083,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // TODO: use trackingdirectorywrapper instead of files() to know which files to delete when things fail:\n    String cfsFiles[] = info.getCodec().compoundFormat().files(info);\n    \n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file\");\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    \n    boolean success = false;\n    try {\n      info.getCodec().compoundFormat().write(directory, info, files, checkAbort, context);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, cfsFiles);\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>();\n    for (String cfsFile : cfsFiles) {\n      siFiles.add(cfsFile);\n    }\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // TODO: use trackingdirectorywrapper instead of files() to know which files to delete when things fail:\n    String cfsFiles[] = info.getCodec().compoundFormat().files(info);\n    \n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file\");\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    \n    boolean success = false;\n    try {\n      info.getCodec().compoundFormat().write(directory, info, files, checkAbort, context);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, cfsFiles);\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>();\n    for (String cfsFile : cfsFiles) {\n      siFiles.add(cfsFile);\n    };\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // TODO: use trackingdirectorywrapper instead of files() to know which files to delete when things fail:\n    String cfsFiles[] = info.getCodec().compoundFormat().files(info);\n    \n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file\");\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    \n    boolean success = false;\n    try {\n      info.getCodec().compoundFormat().write(directory, info, files, checkAbort, context);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, cfsFiles);\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>();\n    for (String cfsFile : cfsFiles) {\n      siFiles.add(cfsFile);\n    }\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // TODO: use trackingdirectorywrapper instead of files() to know which files to delete when things fail:\n    String cfsFiles[] = info.getCodec().compoundFormat().files(info);\n    \n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file\");\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    \n    boolean success = false;\n    try {\n      info.getCodec().compoundFormat().write(directory, info, files, checkAbort, context);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, cfsFiles);\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>();\n    for (String cfsFile : cfsFiles) {\n      siFiles.add(cfsFile);\n    };\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,Directory,CheckAbort,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // TODO: use trackingdirectorywrapper instead of files() to know which files to delete when things fail:\n    String cfsFiles[] = info.getCodec().compoundFormat().files(info);\n    \n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file\");\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    \n    boolean success = false;\n    try {\n      info.getCodec().compoundFormat().write(directory, info, files, context);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, cfsFiles);\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>();\n    for (String cfsFile : cfsFiles) {\n      siFiles.add(cfsFile);\n    }\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(InfoStream infoStream, Directory directory, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // TODO: use trackingdirectorywrapper instead of files() to know which files to delete when things fail:\n    String cfsFiles[] = info.getCodec().compoundFormat().files(info);\n    \n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file\");\n    }\n    // Now merge all added files\n    Collection<String> files = info.files();\n    \n    boolean success = false;\n    try {\n      info.getCodec().compoundFormat().write(directory, info, files, checkAbort, context);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, cfsFiles);\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    Set<String> siFiles = new HashSet<>();\n    for (String cfsFile : cfsFiles) {\n      siFiles.add(cfsFile);\n    }\n    info.setFiles(siFiles);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7599427f762eb1b4265584fd6e96521e4a1a4f3c":["9bb9a29a5e71a90295f175df8919802993142c9a"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9eae2a56dc810a17cf807d831f720dec931a03de"],"55980207f1977bd1463465de1659b821347e2fa8":["4cbcba1596953276043d89eca0af2ef0bd115c79","7599427f762eb1b4265584fd6e96521e4a1a4f3c"],"fb5728b83dbb3e002cdd22adfe6caf103a96ef15":["1494abe5dc85557ec2e2772f87660d48f831c3a5"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["43e3527ed736c46c0f0ab28181937b9de5ef7c63"],"9eae2a56dc810a17cf807d831f720dec931a03de":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"6a917aca07a305ab70118a83e84d931503441271":["fb5728b83dbb3e002cdd22adfe6caf103a96ef15"],"43e3527ed736c46c0f0ab28181937b9de5ef7c63":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4cbcba1596953276043d89eca0af2ef0bd115c79":["989d940c4bf402188f4f0ae13736836885227383"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6a917aca07a305ab70118a83e84d931503441271"],"989d940c4bf402188f4f0ae13736836885227383":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171"],"9bb9a29a5e71a90295f175df8919802993142c9a":["43e3527ed736c46c0f0ab28181937b9de5ef7c63","4cbcba1596953276043d89eca0af2ef0bd115c79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5faf65b6692f15cca0f87bf8666c87899afc619f":["7599427f762eb1b4265584fd6e96521e4a1a4f3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5faf65b6692f15cca0f87bf8666c87899afc619f"]},"commit2Childs":{"7599427f762eb1b4265584fd6e96521e4a1a4f3c":["55980207f1977bd1463465de1659b821347e2fa8","5faf65b6692f15cca0f87bf8666c87899afc619f"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["43e3527ed736c46c0f0ab28181937b9de5ef7c63"],"55980207f1977bd1463465de1659b821347e2fa8":[],"fb5728b83dbb3e002cdd22adfe6caf103a96ef15":["6a917aca07a305ab70118a83e84d931503441271"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["989d940c4bf402188f4f0ae13736836885227383"],"9eae2a56dc810a17cf807d831f720dec931a03de":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6a917aca07a305ab70118a83e84d931503441271":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"43e3527ed736c46c0f0ab28181937b9de5ef7c63":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","9bb9a29a5e71a90295f175df8919802993142c9a"],"4cbcba1596953276043d89eca0af2ef0bd115c79":["55980207f1977bd1463465de1659b821347e2fa8","9bb9a29a5e71a90295f175df8919802993142c9a"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["fb5728b83dbb3e002cdd22adfe6caf103a96ef15"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["9eae2a56dc810a17cf807d831f720dec931a03de"],"989d940c4bf402188f4f0ae13736836885227383":["4cbcba1596953276043d89eca0af2ef0bd115c79"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"9bb9a29a5e71a90295f175df8919802993142c9a":["7599427f762eb1b4265584fd6e96521e4a1a4f3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1494abe5dc85557ec2e2772f87660d48f831c3a5","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}