{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","commits":[{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  @Override\n  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) {\n    // for backward compatibility\n    ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n    String autoAddReplicas = stateProvider.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return NoneSuggester.get(session);\n    }\n\n    Suggester suggester = super.getSuggester(session, event, context, cloudManager);\n    ClusterState clusterState;\n    try {\n      clusterState = stateProvider.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return NoneSuggester.get(session);\n    return suggester;\n  }\n\n","sourceOld":"  @Override\n  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    // for backward compatibility\n    ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n    String autoAddReplicas = stateProvider.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return NoneSuggester.get(session);\n    }\n\n    Suggester suggester = super.getSuggester(session, event, cloudManager);\n    ClusterState clusterState;\n    try {\n      clusterState = stateProvider.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return NoneSuggester.get(session);\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  @Override\n  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) {\n    // for backward compatibility\n    ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n    String autoAddReplicas = stateProvider.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return NoneSuggester.get(session);\n    }\n\n    Suggester suggester = super.getSuggester(session, event, context, cloudManager);\n    ClusterState clusterState;\n    try {\n      clusterState = stateProvider.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return NoneSuggester.get(session);\n    return suggester;\n  }\n\n","sourceOld":"  @Override\n  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    // for backward compatibility\n    ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n    String autoAddReplicas = stateProvider.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return NoneSuggester.get(session);\n    }\n\n    Suggester suggester = super.getSuggester(session, event, cloudManager);\n    ClusterState clusterState;\n    try {\n      clusterState = stateProvider.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return NoneSuggester.get(session);\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6","date":1536060944,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","sourceNew":"  @Override\n  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) throws IOException {\n    // for backward compatibility\n    ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n    String autoAddReplicas = stateProvider.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return NoneSuggester.get(session);\n    }\n\n    Suggester suggester = super.getSuggester(session, event, context, cloudManager);\n    ClusterState clusterState;\n    try {\n      clusterState = stateProvider.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return NoneSuggester.get(session);\n    return suggester;\n  }\n\n","sourceOld":"  @Override\n  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) {\n    // for backward compatibility\n    ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n    String autoAddReplicas = stateProvider.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return NoneSuggester.get(session);\n    }\n\n    Suggester suggester = super.getSuggester(session, event, context, cloudManager);\n    ClusterState clusterState;\n    try {\n      clusterState = stateProvider.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return NoneSuggester.get(session);\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"034aa493deab2c07f8061b37af0a53470dd1e6f6","date":1590123987,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) throws IOException {\n    // for backward compatibility\n    ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n    String autoAddReplicas = stateProvider.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return NoneSuggester.get(session);\n    }\n\n    Suggester suggester = super.getSuggester(session, event, context, cloudManager);\n    ClusterState clusterState;\n    try {\n      clusterState = stateProvider.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return NoneSuggester.get(session);\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["034aa493deab2c07f8061b37af0a53470dd1e6f6"]},"commit2Childs":{"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","43345f1452f9510f8aaadae6156fe0c834e7d957"],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}