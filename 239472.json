{"path":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#applyListUpdates(List[String],boolean).mjava","commits":[{"id":"eb58c4024f450cc56f3a748012536d763700adb5","date":1495748960,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#applyListUpdates(List[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"    protected boolean applyListUpdates(List<String> jsonList, boolean ignoreCase) {\n      boolean madeChanges = false;\n      for (String term : jsonList) {\n        // find the mappings using the case aware key\n        String origTerm = term;\n        term = applyCaseSetting(ignoreCase, term);\n        CasePreservedSynonymMappings cpsm = synonymMappings.get(term);\n        if (cpsm == null)\n          cpsm = new CasePreservedSynonymMappings();\n\n        Set<String> treeTerms = new TreeSet<>();\n        treeTerms.addAll(jsonList);\n        cpsm.mappings.put(origTerm, treeTerms);\n        madeChanges = true;\n        // only add the cpsm to the synonymMappings if it has valid data\n        if (!synonymMappings.containsKey(term) && cpsm.mappings.get(origTerm) != null) {\n          synonymMappings.put(term, cpsm);\n        }\n      }\n      return madeChanges;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#applyListUpdates(List[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"    protected boolean applyListUpdates(List<String> jsonList, boolean ignoreCase) {\n      boolean madeChanges = false;\n      for (String term : jsonList) {\n        // find the mappings using the case aware key\n        String origTerm = term;\n        term = applyCaseSetting(ignoreCase, term);\n        CasePreservedSynonymMappings cpsm = synonymMappings.get(term);\n        if (cpsm == null)\n          cpsm = new CasePreservedSynonymMappings();\n\n        Set<String> treeTerms = new TreeSet<>();\n        treeTerms.addAll(jsonList);\n        cpsm.mappings.put(origTerm, treeTerms);\n        madeChanges = true;\n        // only add the cpsm to the synonymMappings if it has valid data\n        if (!synonymMappings.containsKey(term) && cpsm.mappings.get(origTerm) != null) {\n          synonymMappings.put(term, cpsm);\n        }\n      }\n      return madeChanges;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#applyListUpdates(List[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"    protected boolean applyListUpdates(List<String> jsonList, boolean ignoreCase) {\n      boolean madeChanges = false;\n      for (String term : jsonList) {\n        // find the mappings using the case aware key\n        String origTerm = term;\n        term = applyCaseSetting(ignoreCase, term);\n        CasePreservedSynonymMappings cpsm = synonymMappings.get(term);\n        if (cpsm == null)\n          cpsm = new CasePreservedSynonymMappings();\n\n        Set<String> treeTerms = new TreeSet<>();\n        treeTerms.addAll(jsonList);\n        cpsm.mappings.put(origTerm, treeTerms);\n        madeChanges = true;\n        // only add the cpsm to the synonymMappings if it has valid data\n        if (!synonymMappings.containsKey(term) && cpsm.mappings.get(origTerm) != null) {\n          synonymMappings.put(term, cpsm);\n        }\n      }\n      return madeChanges;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","date":1571071547,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#applyListUpdates(List[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#applyListUpdates(List[String],boolean).mjava","sourceNew":"    protected boolean applyListUpdates(List<String> jsonList, boolean ignoreCase) {\n      boolean madeChanges = false;\n      for (String term : jsonList) {\n        // find the mappings using the case aware key\n        String origTerm = term;\n        term = applyCaseSetting(ignoreCase, term);\n        CasePreservedSynonymMappings cpsm = synonymMappings.get(term);\n        if (cpsm == null)\n          cpsm = new CasePreservedSynonymMappings();\n\n        Set<String> treeTerms = new TreeSet<>(jsonList);\n        cpsm.mappings.put(origTerm, treeTerms);\n        madeChanges = true;\n        // only add the cpsm to the synonymMappings if it has valid data\n        if (!synonymMappings.containsKey(term) && cpsm.mappings.get(origTerm) != null) {\n          synonymMappings.put(term, cpsm);\n        }\n      }\n      return madeChanges;\n    }\n\n","sourceOld":"    protected boolean applyListUpdates(List<String> jsonList, boolean ignoreCase) {\n      boolean madeChanges = false;\n      for (String term : jsonList) {\n        // find the mappings using the case aware key\n        String origTerm = term;\n        term = applyCaseSetting(ignoreCase, term);\n        CasePreservedSynonymMappings cpsm = synonymMappings.get(term);\n        if (cpsm == null)\n          cpsm = new CasePreservedSynonymMappings();\n\n        Set<String> treeTerms = new TreeSet<>();\n        treeTerms.addAll(jsonList);\n        cpsm.mappings.put(origTerm, treeTerms);\n        madeChanges = true;\n        // only add the cpsm to the synonymMappings if it has valid data\n        if (!synonymMappings.containsKey(term) && cpsm.mappings.get(origTerm) != null) {\n          synonymMappings.put(term, cpsm);\n        }\n      }\n      return madeChanges;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#applyListUpdates(List[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#applyListUpdates(List[String],boolean).mjava","sourceNew":"    protected boolean applyListUpdates(List<String> jsonList, boolean ignoreCase) {\n      boolean madeChanges = false;\n      for (String term : jsonList) {\n        // find the mappings using the case aware key\n        String origTerm = term;\n        term = applyCaseSetting(ignoreCase, term);\n        CasePreservedSynonymMappings cpsm = synonymMappings.get(term);\n        if (cpsm == null)\n          cpsm = new CasePreservedSynonymMappings();\n\n        Set<String> treeTerms = new TreeSet<>(jsonList);\n        cpsm.mappings.put(origTerm, treeTerms);\n        madeChanges = true;\n        // only add the cpsm to the synonymMappings if it has valid data\n        if (!synonymMappings.containsKey(term) && cpsm.mappings.get(origTerm) != null) {\n          synonymMappings.put(term, cpsm);\n        }\n      }\n      return madeChanges;\n    }\n\n","sourceOld":"    protected boolean applyListUpdates(List<String> jsonList, boolean ignoreCase) {\n      boolean madeChanges = false;\n      for (String term : jsonList) {\n        // find the mappings using the case aware key\n        String origTerm = term;\n        term = applyCaseSetting(ignoreCase, term);\n        CasePreservedSynonymMappings cpsm = synonymMappings.get(term);\n        if (cpsm == null)\n          cpsm = new CasePreservedSynonymMappings();\n\n        Set<String> treeTerms = new TreeSet<>();\n        treeTerms.addAll(jsonList);\n        cpsm.mappings.put(origTerm, treeTerms);\n        madeChanges = true;\n        // only add the cpsm to the synonymMappings if it has valid data\n        if (!synonymMappings.containsKey(term) && cpsm.mappings.get(origTerm) != null) {\n          synonymMappings.put(term, cpsm);\n        }\n      }\n      return madeChanges;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb58c4024f450cc56f3a748012536d763700adb5"],"eb58c4024f450cc56f3a748012536d763700adb5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb58c4024f450cc56f3a748012536d763700adb5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"],"b0b597c65628ca9e73913a07e81691f8229bae35":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"]},"commit2Childs":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"eb58c4024f450cc56f3a748012536d763700adb5":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","eb58c4024f450cc56f3a748012536d763700adb5","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}