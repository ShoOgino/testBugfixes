{"path":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#writeData(Object).mjava","commits":[{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#writeData(Object).mjava","pathOld":"/dev/null","sourceNew":"  public long writeData(Object o) {\n    LogCodec codec = new LogCodec();\n    try {\n      long pos = start + fos.size();   // if we had flushed, this should be equal to channel.position()\n      codec.init(fos);\n      codec.writeVal(o);\n      return pos;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"192f28916e749c4a857bd4e135a84523234ad354","date":1320945822,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#writeData(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#writeData(Object).mjava","sourceNew":"  public long writeData(Object o) {\n    LogCodec codec = new LogCodec();\n    try {\n      long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n      codec.init(fos);\n      codec.writeVal(o);\n      return pos;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public long writeData(Object o) {\n    LogCodec codec = new LogCodec();\n    try {\n      long pos = start + fos.size();   // if we had flushed, this should be equal to channel.position()\n      codec.init(fos);\n      codec.writeVal(o);\n      return pos;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeData(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#writeData(Object).mjava","sourceNew":"  public long writeData(Object o) {\n    LogCodec codec = new LogCodec();\n    try {\n      long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n      codec.init(fos);\n      codec.writeVal(o);\n      return pos;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public long writeData(Object o) {\n    LogCodec codec = new LogCodec();\n    try {\n      long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n      codec.init(fos);\n      codec.writeVal(o);\n      return pos;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeData(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#writeData(Object).mjava","sourceNew":"  public long writeData(Object o) {\n    LogCodec codec = new LogCodec();\n    try {\n      long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n      codec.init(fos);\n      codec.writeVal(o);\n      return pos;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public long writeData(Object o) {\n    LogCodec codec = new LogCodec();\n    try {\n      long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n      codec.init(fos);\n      codec.writeVal(o);\n      return pos;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeData(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#writeData(Object).mjava","sourceNew":"  public long writeData(Object o) {\n    LogCodec codec = new LogCodec();\n    try {\n      long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n      codec.init(fos);\n      codec.writeVal(o);\n      return pos;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  public long writeData(Object o) {\n    LogCodec codec = new LogCodec();\n    try {\n      long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n      codec.init(fos);\n      codec.writeVal(o);\n      return pos;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["192f28916e749c4a857bd4e135a84523234ad354","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"192f28916e749c4a857bd4e135a84523234ad354":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["192f28916e749c4a857bd4e135a84523234ad354","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["192f28916e749c4a857bd4e135a84523234ad354"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["192f28916e749c4a857bd4e135a84523234ad354"],"192f28916e749c4a857bd4e135a84523234ad354":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}