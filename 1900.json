{"path":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues(SolrParams).mjava","commits":[{"id":"f494bc636a1302995e4930fdccd371eeda452f87","date":1457370876,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues(SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public SimpleOrderedMap<Object> getNamedPropertyValues(SolrParams params) {\n    SimpleOrderedMap<Object> topLevel = new SimpleOrderedMap<>();\n    topLevel.add(NAME, getSchemaName());\n    topLevel.add(VERSION, getVersion());\n    if (null != uniqueKeyFieldName) {\n      topLevel.add(UNIQUE_KEY, uniqueKeyFieldName);\n    }\n    if (null != defaultSearchFieldName) {\n      topLevel.add(DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n    }\n    if (isExplicitQueryParserDefaultOperator) {\n      SimpleOrderedMap<Object> solrQueryParserProperties = new SimpleOrderedMap<>();\n      solrQueryParserProperties.add(DEFAULT_OPERATOR, queryParserDefaultOperator);\n      topLevel.add(SOLR_QUERY_PARSER, solrQueryParserProperties);\n    }\n    if (isExplicitSimilarity) {\n      topLevel.add(SIMILARITY, similarityFactory.getNamedPropertyValues());\n    }\n    List<SimpleOrderedMap<Object>> fieldTypeProperties = new ArrayList<>();\n    SortedMap<String,FieldType> sortedFieldTypes = new TreeMap<>(fieldTypes);\n    for (FieldType fieldType : sortedFieldTypes.values()) {\n      fieldTypeProperties.add(fieldType.getNamedPropertyValues(params.getBool(\"showDefaults\", false)));\n    }\n    topLevel.add(FIELD_TYPES, fieldTypeProperties);  \n    List<SimpleOrderedMap<Object>> fieldProperties = new ArrayList<>();\n    SortedSet<String> fieldNames = new TreeSet<>(fields.keySet());\n    for (String fieldName : fieldNames) {\n      fieldProperties.add(fields.get(fieldName).getNamedPropertyValues(params.getBool(\"showDefaults\", false)));\n    }\n    topLevel.add(FIELDS, fieldProperties);\n    List<SimpleOrderedMap<Object>> dynamicFieldProperties = new ArrayList<>();\n    for (IndexSchema.DynamicField dynamicField : dynamicFields) {\n      if ( ! dynamicField.getRegex().startsWith(INTERNAL_POLY_FIELD_PREFIX)) { // omit internal polyfields\n        dynamicFieldProperties.add(dynamicField.getPrototype().getNamedPropertyValues(params.getBool(\"showDefaults\", false)));\n      }\n    }\n    topLevel.add(DYNAMIC_FIELDS, dynamicFieldProperties);\n    topLevel.add(COPY_FIELDS, getCopyFieldProperties(false, null, null));\n    return topLevel;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3e0cc0c93694fa865a8ef4328b9e40796de1dffa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e0cc0c93694fa865a8ef4328b9e40796de1dffa","date":1460706831,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues(SolrParams).mjava","sourceNew":"  public SimpleOrderedMap<Object> getNamedPropertyValues(SolrParams params) {\n    SimpleOrderedMap<Object> topLevel = new SimpleOrderedMap<>();\n    topLevel.add(NAME, getSchemaName());\n    topLevel.add(VERSION, getVersion());\n    if (null != uniqueKeyFieldName) {\n      topLevel.add(UNIQUE_KEY, uniqueKeyFieldName);\n    }\n    if (null != defaultSearchFieldName) {\n      topLevel.add(DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n    }\n    if (isExplicitQueryParserDefaultOperator) {\n      SimpleOrderedMap<Object> solrQueryParserProperties = new SimpleOrderedMap<>();\n      solrQueryParserProperties.add(DEFAULT_OPERATOR, queryParserDefaultOperator);\n      topLevel.add(SOLR_QUERY_PARSER, solrQueryParserProperties);\n    }\n    if (isExplicitSimilarity) {\n      topLevel.add(SIMILARITY, similarityFactory.getNamedPropertyValues());\n    }\n    List<SimpleOrderedMap<Object>> fieldTypeProperties = new ArrayList<>();\n    SortedMap<String,FieldType> sortedFieldTypes = new TreeMap<>(fieldTypes);\n    for (FieldType fieldType : sortedFieldTypes.values()) {\n      fieldTypeProperties.add(fieldType.getNamedPropertyValues(params.getBool(\"showDefaults\", false)));\n    }\n    topLevel.add(FIELD_TYPES, fieldTypeProperties);  \n    List<SimpleOrderedMap<Object>> fieldProperties = new ArrayList<>();\n    SortedSet<String> fieldNames = new TreeSet<>(fields.keySet());\n    for (String fieldName : fieldNames) {\n      fieldProperties.add(fields.get(fieldName).getNamedPropertyValues(params.getBool(\"showDefaults\", false)));\n    }\n    if (params.getBool(\"includeDynamic\", false)) {\n      fieldProperties.addAll(getDynamicFields(params));\n    }\n    topLevel.add(FIELDS, fieldProperties);\n    topLevel.add(DYNAMIC_FIELDS, getDynamicFields(params));\n    topLevel.add(COPY_FIELDS, getCopyFieldProperties(false, null, null));\n    return topLevel;\n  }\n\n","sourceOld":"  public SimpleOrderedMap<Object> getNamedPropertyValues(SolrParams params) {\n    SimpleOrderedMap<Object> topLevel = new SimpleOrderedMap<>();\n    topLevel.add(NAME, getSchemaName());\n    topLevel.add(VERSION, getVersion());\n    if (null != uniqueKeyFieldName) {\n      topLevel.add(UNIQUE_KEY, uniqueKeyFieldName);\n    }\n    if (null != defaultSearchFieldName) {\n      topLevel.add(DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n    }\n    if (isExplicitQueryParserDefaultOperator) {\n      SimpleOrderedMap<Object> solrQueryParserProperties = new SimpleOrderedMap<>();\n      solrQueryParserProperties.add(DEFAULT_OPERATOR, queryParserDefaultOperator);\n      topLevel.add(SOLR_QUERY_PARSER, solrQueryParserProperties);\n    }\n    if (isExplicitSimilarity) {\n      topLevel.add(SIMILARITY, similarityFactory.getNamedPropertyValues());\n    }\n    List<SimpleOrderedMap<Object>> fieldTypeProperties = new ArrayList<>();\n    SortedMap<String,FieldType> sortedFieldTypes = new TreeMap<>(fieldTypes);\n    for (FieldType fieldType : sortedFieldTypes.values()) {\n      fieldTypeProperties.add(fieldType.getNamedPropertyValues(params.getBool(\"showDefaults\", false)));\n    }\n    topLevel.add(FIELD_TYPES, fieldTypeProperties);  \n    List<SimpleOrderedMap<Object>> fieldProperties = new ArrayList<>();\n    SortedSet<String> fieldNames = new TreeSet<>(fields.keySet());\n    for (String fieldName : fieldNames) {\n      fieldProperties.add(fields.get(fieldName).getNamedPropertyValues(params.getBool(\"showDefaults\", false)));\n    }\n    topLevel.add(FIELDS, fieldProperties);\n    List<SimpleOrderedMap<Object>> dynamicFieldProperties = new ArrayList<>();\n    for (IndexSchema.DynamicField dynamicField : dynamicFields) {\n      if ( ! dynamicField.getRegex().startsWith(INTERNAL_POLY_FIELD_PREFIX)) { // omit internal polyfields\n        dynamicFieldProperties.add(dynamicField.getPrototype().getNamedPropertyValues(params.getBool(\"showDefaults\", false)));\n      }\n    }\n    topLevel.add(DYNAMIC_FIELDS, dynamicFieldProperties);\n    topLevel.add(COPY_FIELDS, getCopyFieldProperties(false, null, null));\n    return topLevel;\n  }\n\n","bugFix":["f494bc636a1302995e4930fdccd371eeda452f87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12271d04f8737578da2d57f9e87fe82eea9d5e08","date":1460718696,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues(SolrParams).mjava","sourceNew":"  public SimpleOrderedMap<Object> getNamedPropertyValues(SolrParams params) {\n    SimpleOrderedMap<Object> topLevel = new SimpleOrderedMap<>();\n    topLevel.add(NAME, getSchemaName());\n    topLevel.add(VERSION, getVersion());\n    if (null != uniqueKeyFieldName) {\n      topLevel.add(UNIQUE_KEY, uniqueKeyFieldName);\n    }\n    if (null != defaultSearchFieldName) {\n      topLevel.add(DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n    }\n    if (isExplicitQueryParserDefaultOperator) {\n      SimpleOrderedMap<Object> solrQueryParserProperties = new SimpleOrderedMap<>();\n      solrQueryParserProperties.add(DEFAULT_OPERATOR, queryParserDefaultOperator);\n      topLevel.add(SOLR_QUERY_PARSER, solrQueryParserProperties);\n    }\n    if (isExplicitSimilarity) {\n      topLevel.add(SIMILARITY, similarityFactory.getNamedPropertyValues());\n    }\n    List<SimpleOrderedMap<Object>> fieldTypeProperties = new ArrayList<>();\n    SortedMap<String,FieldType> sortedFieldTypes = new TreeMap<>(fieldTypes);\n    for (FieldType fieldType : sortedFieldTypes.values()) {\n      fieldTypeProperties.add(fieldType.getNamedPropertyValues(params.getBool(\"showDefaults\", false)));\n    }\n    topLevel.add(FIELD_TYPES, fieldTypeProperties);  \n    List<SimpleOrderedMap<Object>> fieldProperties = new ArrayList<>();\n    SortedSet<String> fieldNames = new TreeSet<>(fields.keySet());\n    for (String fieldName : fieldNames) {\n      fieldProperties.add(fields.get(fieldName).getNamedPropertyValues(params.getBool(\"showDefaults\", false)));\n    }\n    if (params.getBool(\"includeDynamic\", false)) {\n      fieldProperties.addAll(getDynamicFields(params));\n    }\n    topLevel.add(FIELDS, fieldProperties);\n    topLevel.add(DYNAMIC_FIELDS, getDynamicFields(params));\n    topLevel.add(COPY_FIELDS, getCopyFieldProperties(false, null, null));\n    return topLevel;\n  }\n\n","sourceOld":"  public SimpleOrderedMap<Object> getNamedPropertyValues(SolrParams params) {\n    SimpleOrderedMap<Object> topLevel = new SimpleOrderedMap<>();\n    topLevel.add(NAME, getSchemaName());\n    topLevel.add(VERSION, getVersion());\n    if (null != uniqueKeyFieldName) {\n      topLevel.add(UNIQUE_KEY, uniqueKeyFieldName);\n    }\n    if (null != defaultSearchFieldName) {\n      topLevel.add(DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n    }\n    if (isExplicitQueryParserDefaultOperator) {\n      SimpleOrderedMap<Object> solrQueryParserProperties = new SimpleOrderedMap<>();\n      solrQueryParserProperties.add(DEFAULT_OPERATOR, queryParserDefaultOperator);\n      topLevel.add(SOLR_QUERY_PARSER, solrQueryParserProperties);\n    }\n    if (isExplicitSimilarity) {\n      topLevel.add(SIMILARITY, similarityFactory.getNamedPropertyValues());\n    }\n    List<SimpleOrderedMap<Object>> fieldTypeProperties = new ArrayList<>();\n    SortedMap<String,FieldType> sortedFieldTypes = new TreeMap<>(fieldTypes);\n    for (FieldType fieldType : sortedFieldTypes.values()) {\n      fieldTypeProperties.add(fieldType.getNamedPropertyValues(params.getBool(\"showDefaults\", false)));\n    }\n    topLevel.add(FIELD_TYPES, fieldTypeProperties);  \n    List<SimpleOrderedMap<Object>> fieldProperties = new ArrayList<>();\n    SortedSet<String> fieldNames = new TreeSet<>(fields.keySet());\n    for (String fieldName : fieldNames) {\n      fieldProperties.add(fields.get(fieldName).getNamedPropertyValues(params.getBool(\"showDefaults\", false)));\n    }\n    topLevel.add(FIELDS, fieldProperties);\n    List<SimpleOrderedMap<Object>> dynamicFieldProperties = new ArrayList<>();\n    for (IndexSchema.DynamicField dynamicField : dynamicFields) {\n      if ( ! dynamicField.getRegex().startsWith(INTERNAL_POLY_FIELD_PREFIX)) { // omit internal polyfields\n        dynamicFieldProperties.add(dynamicField.getPrototype().getNamedPropertyValues(params.getBool(\"showDefaults\", false)));\n      }\n    }\n    topLevel.add(DYNAMIC_FIELDS, dynamicFieldProperties);\n    topLevel.add(COPY_FIELDS, getCopyFieldProperties(false, null, null));\n    return topLevel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83ed5fbd2aab9f605f08774c9293e521ec99f0a1","date":1461251300,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues(SolrParams).mjava","sourceNew":null,"sourceOld":"  public SimpleOrderedMap<Object> getNamedPropertyValues(SolrParams params) {\n    SimpleOrderedMap<Object> topLevel = new SimpleOrderedMap<>();\n    topLevel.add(NAME, getSchemaName());\n    topLevel.add(VERSION, getVersion());\n    if (null != uniqueKeyFieldName) {\n      topLevel.add(UNIQUE_KEY, uniqueKeyFieldName);\n    }\n    if (null != defaultSearchFieldName) {\n      topLevel.add(DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n    }\n    if (isExplicitQueryParserDefaultOperator) {\n      SimpleOrderedMap<Object> solrQueryParserProperties = new SimpleOrderedMap<>();\n      solrQueryParserProperties.add(DEFAULT_OPERATOR, queryParserDefaultOperator);\n      topLevel.add(SOLR_QUERY_PARSER, solrQueryParserProperties);\n    }\n    if (isExplicitSimilarity) {\n      topLevel.add(SIMILARITY, similarityFactory.getNamedPropertyValues());\n    }\n    List<SimpleOrderedMap<Object>> fieldTypeProperties = new ArrayList<>();\n    SortedMap<String,FieldType> sortedFieldTypes = new TreeMap<>(fieldTypes);\n    for (FieldType fieldType : sortedFieldTypes.values()) {\n      fieldTypeProperties.add(fieldType.getNamedPropertyValues(params.getBool(\"showDefaults\", false)));\n    }\n    topLevel.add(FIELD_TYPES, fieldTypeProperties);  \n    List<SimpleOrderedMap<Object>> fieldProperties = new ArrayList<>();\n    SortedSet<String> fieldNames = new TreeSet<>(fields.keySet());\n    for (String fieldName : fieldNames) {\n      fieldProperties.add(fields.get(fieldName).getNamedPropertyValues(params.getBool(\"showDefaults\", false)));\n    }\n    if (params.getBool(\"includeDynamic\", false)) {\n      fieldProperties.addAll(getDynamicFields(params));\n    }\n    topLevel.add(FIELDS, fieldProperties);\n    topLevel.add(DYNAMIC_FIELDS, getDynamicFields(params));\n    topLevel.add(COPY_FIELDS, getCopyFieldProperties(false, null, null));\n    return topLevel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12271d04f8737578da2d57f9e87fe82eea9d5e08":["f494bc636a1302995e4930fdccd371eeda452f87","3e0cc0c93694fa865a8ef4328b9e40796de1dffa"],"f494bc636a1302995e4930fdccd371eeda452f87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83ed5fbd2aab9f605f08774c9293e521ec99f0a1":["12271d04f8737578da2d57f9e87fe82eea9d5e08"],"3e0cc0c93694fa865a8ef4328b9e40796de1dffa":["f494bc636a1302995e4930fdccd371eeda452f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83ed5fbd2aab9f605f08774c9293e521ec99f0a1"]},"commit2Childs":{"12271d04f8737578da2d57f9e87fe82eea9d5e08":["83ed5fbd2aab9f605f08774c9293e521ec99f0a1"],"f494bc636a1302995e4930fdccd371eeda452f87":["12271d04f8737578da2d57f9e87fe82eea9d5e08","3e0cc0c93694fa865a8ef4328b9e40796de1dffa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f494bc636a1302995e4930fdccd371eeda452f87"],"83ed5fbd2aab9f605f08774c9293e521ec99f0a1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e0cc0c93694fa865a8ef4328b9e40796de1dffa":["12271d04f8737578da2d57f9e87fe82eea9d5e08"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}