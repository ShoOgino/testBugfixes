{"path":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDaitchMokotoffSoundexFilter#testRandomStrings().mjava","commits":[{"id":"a137707f06c6a771585c040e79addbe9a4b77874","date":1415731634,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDaitchMokotoffSoundexFilter#testRandomStrings().mjava","pathOld":"/dev/null","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DaitchMokotoffSoundexFilter(tokenizer, false));\n      }\n    };\n\n    checkRandomData(random(), a, 1000 * RANDOM_MULTIPLIER);\n\n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DaitchMokotoffSoundexFilter(tokenizer, false));\n      }\n    };\n\n    checkRandomData(random(), b, 1000 * RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDaitchMokotoffSoundexFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDaitchMokotoffSoundexFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DaitchMokotoffSoundexFilter(tokenizer, false));\n      }\n    };\n\n    checkRandomData(random(), a, 1000 * RANDOM_MULTIPLIER);\n    a.close();\n\n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DaitchMokotoffSoundexFilter(tokenizer, false));\n      }\n    };\n\n    checkRandomData(random(), b, 1000 * RANDOM_MULTIPLIER);\n    b.close();\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DaitchMokotoffSoundexFilter(tokenizer, false));\n      }\n    };\n\n    checkRandomData(random(), a, 1000 * RANDOM_MULTIPLIER);\n\n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DaitchMokotoffSoundexFilter(tokenizer, false));\n      }\n    };\n\n    checkRandomData(random(), b, 1000 * RANDOM_MULTIPLIER);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDaitchMokotoffSoundexFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDaitchMokotoffSoundexFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DaitchMokotoffSoundexFilter(tokenizer, false));\n      }\n    };\n\n    checkRandomData(random(), a, 1000 * RANDOM_MULTIPLIER);\n    a.close();\n\n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DaitchMokotoffSoundexFilter(tokenizer, false));\n      }\n    };\n\n    checkRandomData(random(), b, 1000 * RANDOM_MULTIPLIER);\n    b.close();\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DaitchMokotoffSoundexFilter(tokenizer, false));\n      }\n    };\n\n    checkRandomData(random(), a, 1000 * RANDOM_MULTIPLIER);\n\n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DaitchMokotoffSoundexFilter(tokenizer, false));\n      }\n    };\n\n    checkRandomData(random(), b, 1000 * RANDOM_MULTIPLIER);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a137707f06c6a771585c040e79addbe9a4b77874","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a137707f06c6a771585c040e79addbe9a4b77874":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a137707f06c6a771585c040e79addbe9a4b77874"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a137707f06c6a771585c040e79addbe9a4b77874":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a137707f06c6a771585c040e79addbe9a4b77874"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}