{"path":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processBackupAction(ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String asyncId = message.getStr(ASYNC);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    String location = message.getStr(CoreAdminParams.BACKUP_LOCATION);\n\n    Map<String, String> requestMap = new HashMap<>();\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader, collectionName);\n\n    // Backup location\n    URI backupPath = repository.createURI(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = slice.getLeader();\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repo);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.getPath()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","sourceOld":"  private void processBackupAction(ZkNodeProps message, NamedList results) throws IOException, KeeperException, InterruptedException {\n    String collectionName =  message.getStr(COLLECTION_PROP);\n    String backupName =  message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    String asyncId = message.getStr(ASYNC);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    String location = message.getStr(CoreAdminParams.BACKUP_LOCATION);\n\n    Map<String, String> requestMap = new HashMap<>();\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = this.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, zkStateReader, collectionName);\n\n    // Backup location\n    URI backupPath = repository.createURI(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    for (Slice slice : zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = slice.getLeader();\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repo);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.getPath()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n\n      sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processBackupAction(ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String asyncId = message.getStr(ASYNC);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    String location = message.getStr(CoreAdminParams.BACKUP_LOCATION);\n\n    Map<String, String> requestMap = new HashMap<>();\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader, collectionName);\n\n    // Backup location\n    URI backupPath = repository.createURI(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = slice.getLeader();\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repo);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.getPath()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","sourceOld":"  private void processBackupAction(ZkNodeProps message, NamedList results) throws IOException, KeeperException, InterruptedException {\n    String collectionName =  message.getStr(COLLECTION_PROP);\n    String backupName =  message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    String asyncId = message.getStr(ASYNC);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    String location = message.getStr(CoreAdminParams.BACKUP_LOCATION);\n\n    Map<String, String> requestMap = new HashMap<>();\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = this.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, zkStateReader, collectionName);\n\n    // Backup location\n    URI backupPath = repository.createURI(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    for (Slice slice : zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = slice.getLeader();\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repo);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.getPath()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n\n      sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af3193c66df8e8324d4bce9f66df967af9e8c602","date":1472772499,"type":3,"author":"Hrishikesh Gadre","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String asyncId = message.getStr(ASYNC);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n\n    Map<String, String> requestMap = new HashMap<>();\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader, collectionName);\n\n    // Backup location\n    URI location = repository.createURI(message.getStr(CoreAdminParams.BACKUP_LOCATION));\n    URI backupPath = repository.resolve(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = slice.getLeader();\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repo);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String asyncId = message.getStr(ASYNC);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    String location = message.getStr(CoreAdminParams.BACKUP_LOCATION);\n\n    Map<String, String> requestMap = new HashMap<>();\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader, collectionName);\n\n    // Backup location\n    URI backupPath = repository.createURI(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = slice.getLeader();\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repo);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.getPath()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","bugFix":["4c623a7f72be34d6c45bee682028c50327d9e4b7"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da02fc41cfc83eaee66abb7c926f2c909bda6d26","date":1472818509,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String asyncId = message.getStr(ASYNC);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n\n    Map<String, String> requestMap = new HashMap<>();\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader, collectionName);\n\n    // Backup location\n    URI location = repository.createURI(message.getStr(CoreAdminParams.BACKUP_LOCATION));\n    URI backupPath = repository.resolve(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = slice.getLeader();\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repo);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String asyncId = message.getStr(ASYNC);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    String location = message.getStr(CoreAdminParams.BACKUP_LOCATION);\n\n    Map<String, String> requestMap = new HashMap<>();\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader, collectionName);\n\n    // Backup location\n    URI backupPath = repository.createURI(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = slice.getLeader();\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repo);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.getPath()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String asyncId = message.getStr(ASYNC);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n\n    Map<String, String> requestMap = new HashMap<>();\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader, collectionName);\n\n    // Backup location\n    URI location = repository.createURI(message.getStr(CoreAdminParams.BACKUP_LOCATION));\n    URI backupPath = repository.resolve(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = slice.getLeader();\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repo);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String asyncId = message.getStr(ASYNC);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    String location = message.getStr(CoreAdminParams.BACKUP_LOCATION);\n\n    Map<String, String> requestMap = new HashMap<>();\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader, collectionName);\n\n    // Backup location\n    URI backupPath = repository.createURI(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = slice.getLeader();\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repo);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.getPath()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String asyncId = message.getStr(ASYNC);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n\n    Map<String, String> requestMap = new HashMap<>();\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader, collectionName);\n\n    // Backup location\n    URI location = repository.createURI(message.getStr(CoreAdminParams.BACKUP_LOCATION));\n    URI backupPath = repository.resolve(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = slice.getLeader();\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repo);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String asyncId = message.getStr(ASYNC);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n    String location = message.getStr(CoreAdminParams.BACKUP_LOCATION);\n\n    Map<String, String> requestMap = new HashMap<>();\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader, collectionName);\n\n    // Backup location\n    URI backupPath = repository.createURI(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = slice.getLeader();\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repo);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.getPath()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String asyncId = message.getStr(ASYNC);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n\n    Map<String, String> requestMap = new HashMap<>();\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader, collectionName);\n\n    // Backup location\n    URI location = repository.createURI(message.getStr(CoreAdminParams.BACKUP_LOCATION));\n    URI backupPath = repository.resolve(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = slice.getLeader();\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repo);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"424ac616f0aeeb2a3c8b6b94084255a0bcab9628","date":1477057622,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String asyncId = message.getStr(ASYNC);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n\n    String commitName = message.getStr(CoreAdminParams.COMMIT_NAME);\n    Optional<CollectionSnapshotMetaData> snapshotMeta = Optional.empty();\n    if (commitName != null) {\n      SolrZkClient zkClient = ocmh.overseer.getZkController().getZkClient();\n      snapshotMeta = SolrSnapshotManager.getCollectionLevelSnapshot(zkClient, collectionName, commitName);\n      if (!snapshotMeta.isPresent()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName\n            + \" does not exist for collection \" + collectionName);\n      }\n      if (snapshotMeta.get().getStatus() != SnapshotStatus.Successful) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName + \" for collection \" + collectionName\n            + \" has not completed successfully. The status is \" + snapshotMeta.get().getStatus());\n      }\n    }\n\n    Map<String, String> requestMap = new HashMap<>();\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader, collectionName);\n\n    // Backup location\n    URI location = repository.createURI(message.getStr(CoreAdminParams.BACKUP_LOCATION));\n    URI backupPath = repository.resolve(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    Collection<String> shardsToConsider = Collections.emptySet();\n    if (snapshotMeta.isPresent()) {\n      shardsToConsider = snapshotMeta.get().getShards();\n    }\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = null;\n\n      if (snapshotMeta.isPresent()) {\n        if (!shardsToConsider.contains(slice.getName())) {\n          log.warn(\"Skipping the backup for shard {} since it wasn't part of the collection {} when snapshot {} was created.\",\n              slice.getName(), collectionName, snapshotMeta.get().getName());\n          continue;\n        }\n        replica = selectReplicaWithSnapshot(snapshotMeta.get(), slice);\n      } else {\n        // Note - Actually this can return a null value when there is no leader for this shard.\n        replica = slice.getLeader();\n        if (replica == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collectionName);\n        }\n      }\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repo);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n      if (snapshotMeta.isPresent()) {\n        params.set(CoreAdminParams.COMMIT_NAME, snapshotMeta.get().getName());\n      }\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String asyncId = message.getStr(ASYNC);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n\n    Map<String, String> requestMap = new HashMap<>();\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader, collectionName);\n\n    // Backup location\n    URI location = repository.createURI(message.getStr(CoreAdminParams.BACKUP_LOCATION));\n    URI backupPath = repository.resolve(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = slice.getLeader();\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repo);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String asyncId = message.getStr(ASYNC);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n\n    String commitName = message.getStr(CoreAdminParams.COMMIT_NAME);\n    Optional<CollectionSnapshotMetaData> snapshotMeta = Optional.empty();\n    if (commitName != null) {\n      SolrZkClient zkClient = ocmh.overseer.getZkController().getZkClient();\n      snapshotMeta = SolrSnapshotManager.getCollectionLevelSnapshot(zkClient, collectionName, commitName);\n      if (!snapshotMeta.isPresent()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName\n            + \" does not exist for collection \" + collectionName);\n      }\n      if (snapshotMeta.get().getStatus() != SnapshotStatus.Successful) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName + \" for collection \" + collectionName\n            + \" has not completed successfully. The status is \" + snapshotMeta.get().getStatus());\n      }\n    }\n\n    Map<String, String> requestMap = new HashMap<>();\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader, collectionName);\n\n    // Backup location\n    URI location = repository.createURI(message.getStr(CoreAdminParams.BACKUP_LOCATION));\n    URI backupPath = repository.resolve(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    Collection<String> shardsToConsider = Collections.emptySet();\n    if (snapshotMeta.isPresent()) {\n      shardsToConsider = snapshotMeta.get().getShards();\n    }\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = null;\n\n      if (snapshotMeta.isPresent()) {\n        if (!shardsToConsider.contains(slice.getName())) {\n          log.warn(\"Skipping the backup for shard {} since it wasn't part of the collection {} when snapshot {} was created.\",\n              slice.getName(), collectionName, snapshotMeta.get().getName());\n          continue;\n        }\n        replica = selectReplicaWithSnapshot(snapshotMeta.get(), slice);\n      } else {\n        // Note - Actually this can return a null value when there is no leader for this shard.\n        replica = slice.getLeader();\n        if (replica == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collectionName);\n        }\n      }\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repo);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n      if (snapshotMeta.isPresent()) {\n        params.set(CoreAdminParams.COMMIT_NAME, snapshotMeta.get().getName());\n      }\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String asyncId = message.getStr(ASYNC);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n\n    Map<String, String> requestMap = new HashMap<>();\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader, collectionName);\n\n    // Backup location\n    URI location = repository.createURI(message.getStr(CoreAdminParams.BACKUP_LOCATION));\n    URI backupPath = repository.resolve(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = slice.getLeader();\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repo);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ad92550399520cc0148c3ee5ca087706f12da4","date":1478270512,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader);\n\n    // Backup location\n    URI location = repository.createURI(message.getStr(CoreAdminParams.BACKUP_LOCATION));\n    URI backupPath = repository.resolve(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    String strategy = message.getStr(CollectionAdminParams.INDEX_BACKUP_STRATEGY, CollectionAdminParams.COPY_FILES_STRATEGY);\n    switch (strategy) {\n      case CollectionAdminParams.COPY_FILES_STRATEGY: {\n        copyIndexFiles(backupPath, message, results);\n        break;\n      }\n      case CollectionAdminParams.NO_INDEX_BACKUP_STRATEGY: {\n        break;\n      }\n    }\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    properties.put(BackupManager.INDEX_VERSION_PROP, Version.LATEST.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String asyncId = message.getStr(ASYNC);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n\n    String commitName = message.getStr(CoreAdminParams.COMMIT_NAME);\n    Optional<CollectionSnapshotMetaData> snapshotMeta = Optional.empty();\n    if (commitName != null) {\n      SolrZkClient zkClient = ocmh.overseer.getZkController().getZkClient();\n      snapshotMeta = SolrSnapshotManager.getCollectionLevelSnapshot(zkClient, collectionName, commitName);\n      if (!snapshotMeta.isPresent()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName\n            + \" does not exist for collection \" + collectionName);\n      }\n      if (snapshotMeta.get().getStatus() != SnapshotStatus.Successful) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName + \" for collection \" + collectionName\n            + \" has not completed successfully. The status is \" + snapshotMeta.get().getStatus());\n      }\n    }\n\n    Map<String, String> requestMap = new HashMap<>();\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader, collectionName);\n\n    // Backup location\n    URI location = repository.createURI(message.getStr(CoreAdminParams.BACKUP_LOCATION));\n    URI backupPath = repository.resolve(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    Collection<String> shardsToConsider = Collections.emptySet();\n    if (snapshotMeta.isPresent()) {\n      shardsToConsider = snapshotMeta.get().getShards();\n    }\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = null;\n\n      if (snapshotMeta.isPresent()) {\n        if (!shardsToConsider.contains(slice.getName())) {\n          log.warn(\"Skipping the backup for shard {} since it wasn't part of the collection {} when snapshot {} was created.\",\n              slice.getName(), collectionName, snapshotMeta.get().getName());\n          continue;\n        }\n        replica = selectReplicaWithSnapshot(snapshotMeta.get(), slice);\n      } else {\n        // Note - Actually this can return a null value when there is no leader for this shard.\n        replica = slice.getLeader();\n        if (replica == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collectionName);\n        }\n      }\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repo);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n      if (snapshotMeta.isPresent()) {\n        params.set(CoreAdminParams.COMMIT_NAME, snapshotMeta.get().getName());\n      }\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader);\n\n    // Backup location\n    URI location = repository.createURI(message.getStr(CoreAdminParams.BACKUP_LOCATION));\n    URI backupPath = repository.resolve(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    String strategy = message.getStr(CollectionAdminParams.INDEX_BACKUP_STRATEGY, CollectionAdminParams.COPY_FILES_STRATEGY);\n    switch (strategy) {\n      case CollectionAdminParams.COPY_FILES_STRATEGY: {\n        copyIndexFiles(backupPath, message, results);\n        break;\n      }\n      case CollectionAdminParams.NO_INDEX_BACKUP_STRATEGY: {\n        break;\n      }\n    }\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    properties.put(BackupManager.INDEX_VERSION_PROP, Version.LATEST.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String asyncId = message.getStr(ASYNC);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n\n    String commitName = message.getStr(CoreAdminParams.COMMIT_NAME);\n    Optional<CollectionSnapshotMetaData> snapshotMeta = Optional.empty();\n    if (commitName != null) {\n      SolrZkClient zkClient = ocmh.overseer.getZkController().getZkClient();\n      snapshotMeta = SolrSnapshotManager.getCollectionLevelSnapshot(zkClient, collectionName, commitName);\n      if (!snapshotMeta.isPresent()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName\n            + \" does not exist for collection \" + collectionName);\n      }\n      if (snapshotMeta.get().getStatus() != SnapshotStatus.Successful) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Snapshot with name \" + commitName + \" for collection \" + collectionName\n            + \" has not completed successfully. The status is \" + snapshotMeta.get().getStatus());\n      }\n    }\n\n    Map<String, String> requestMap = new HashMap<>();\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader, collectionName);\n\n    // Backup location\n    URI location = repository.createURI(message.getStr(CoreAdminParams.BACKUP_LOCATION));\n    URI backupPath = repository.resolve(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    log.info(\"Starting backup of collection={} with backupName={} at location={}\", collectionName, backupName,\n        backupPath);\n\n    Collection<String> shardsToConsider = Collections.emptySet();\n    if (snapshotMeta.isPresent()) {\n      shardsToConsider = snapshotMeta.get().getShards();\n    }\n\n    for (Slice slice : ocmh.zkStateReader.getClusterState().getCollection(collectionName).getActiveSlices()) {\n      Replica replica = null;\n\n      if (snapshotMeta.isPresent()) {\n        if (!shardsToConsider.contains(slice.getName())) {\n          log.warn(\"Skipping the backup for shard {} since it wasn't part of the collection {} when snapshot {} was created.\",\n              slice.getName(), collectionName, snapshotMeta.get().getName());\n          continue;\n        }\n        replica = selectReplicaWithSnapshot(snapshotMeta.get(), slice);\n      } else {\n        // Note - Actually this can return a null value when there is no leader for this shard.\n        replica = slice.getLeader();\n        if (replica == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collectionName);\n        }\n      }\n\n      String coreName = replica.getStr(CORE_NAME_PROP);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString());\n      params.set(NAME, slice.getName());\n      params.set(CoreAdminParams.BACKUP_REPOSITORY, repo);\n      params.set(CoreAdminParams.BACKUP_LOCATION, backupPath.toASCIIString()); // note: index dir will be here then the \"snapshot.\" + slice name\n      params.set(CORE_NAME_PROP, coreName);\n      if (snapshotMeta.isPresent()) {\n        params.set(CoreAdminParams.COMMIT_NAME, snapshotMeta.get().getName());\n      }\n\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap);\n      log.debug(\"Sent backup request to core={} for backupName={}\", coreName, backupName);\n    }\n    log.debug(\"Sent backup requests to all shard leaders for backupName={}\", backupName);\n\n    ocmh.processResponses(results, shardHandler, true, \"Could not backup all replicas\", asyncId, requestMap);\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader);\n\n    // Backup location\n    URI location = repository.createURI(message.getStr(CoreAdminParams.BACKUP_LOCATION));\n    URI backupPath = repository.resolve(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    String strategy = message.getStr(CollectionAdminParams.INDEX_BACKUP_STRATEGY, CollectionAdminParams.COPY_FILES_STRATEGY);\n    switch (strategy) {\n      case CollectionAdminParams.COPY_FILES_STRATEGY: {\n        copyIndexFiles(backupPath, message, results);\n        break;\n      }\n      case CollectionAdminParams.NO_INDEX_BACKUP_STRATEGY: {\n        break;\n      }\n    }\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(OverseerCollectionMessageHandler.COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    properties.put(BackupManager.INDEX_VERSION_PROP, Version.LATEST.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader);\n\n    // Backup location\n    URI location = repository.createURI(message.getStr(CoreAdminParams.BACKUP_LOCATION));\n    URI backupPath = repository.resolve(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    String strategy = message.getStr(CollectionAdminParams.INDEX_BACKUP_STRATEGY, CollectionAdminParams.COPY_FILES_STRATEGY);\n    switch (strategy) {\n      case CollectionAdminParams.COPY_FILES_STRATEGY: {\n        copyIndexFiles(backupPath, message, results);\n        break;\n      }\n      case CollectionAdminParams.NO_INDEX_BACKUP_STRATEGY: {\n        break;\n      }\n    }\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    properties.put(BackupManager.INDEX_VERSION_PROP, Version.LATEST.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/BackupCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String backupName = message.getStr(NAME);\n    String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n\n    Instant startTime = Instant.now();\n\n    CoreContainer cc = ocmh.overseer.getZkController().getCoreContainer();\n    BackupRepository repository = cc.newBackupRepository(Optional.ofNullable(repo));\n    BackupManager backupMgr = new BackupManager(repository, ocmh.zkStateReader);\n\n    // Backup location\n    URI location = repository.createURI(message.getStr(CoreAdminParams.BACKUP_LOCATION));\n    URI backupPath = repository.resolve(location, backupName);\n\n    //Validating if the directory already exists.\n    if (repository.exists(backupPath)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The backup directory already exists: \" + backupPath);\n    }\n\n    // Create a directory to store backup details.\n    repository.createDirectory(backupPath);\n\n    String strategy = message.getStr(CollectionAdminParams.INDEX_BACKUP_STRATEGY, CollectionAdminParams.COPY_FILES_STRATEGY);\n    switch (strategy) {\n      case CollectionAdminParams.COPY_FILES_STRATEGY: {\n        copyIndexFiles(backupPath, message, results);\n        break;\n      }\n      case CollectionAdminParams.NO_INDEX_BACKUP_STRATEGY: {\n        break;\n      }\n    }\n\n    log.info(\"Starting to backup ZK data for backupName={}\", backupName);\n\n    //Download the configs\n    String configName = ocmh.zkStateReader.readConfigName(collectionName);\n    backupMgr.downloadConfigDir(location, backupName, configName);\n\n    //Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json\n    //Since we don't want to distinguish we extract the state and back it up as a separate json\n    DocCollection collectionState = ocmh.zkStateReader.getClusterState().getCollection(collectionName);\n    backupMgr.writeCollectionState(location, backupName, collectionName, collectionState);\n\n    Properties properties = new Properties();\n\n    properties.put(BackupManager.BACKUP_NAME_PROP, backupName);\n    properties.put(BackupManager.COLLECTION_NAME_PROP, collectionName);\n    properties.put(COLL_CONF, configName);\n    properties.put(BackupManager.START_TIME_PROP, startTime.toString());\n    properties.put(BackupManager.INDEX_VERSION_PROP, Version.LATEST.toString());\n    //TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.\n    //if they are not the same then we can throw an error or have an 'overwriteConfig' flag\n    //TODO save numDocs for the shardLeader. We can use it to sanity check the restore.\n\n    backupMgr.writeBackupProperties(location, backupName, properties);\n\n    log.info(\"Completed backing up ZK data for backupName={}\", backupName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["403d05f7f8d69b65659157eff1bc1d2717f04c66","af3193c66df8e8324d4bce9f66df967af9e8c602"],"b94236357aaa22b76c10629851fe4e376e0cea82":["b2ad92550399520cc0148c3ee5ca087706f12da4","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b2ad92550399520cc0148c3ee5ca087706f12da4"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","b2ad92550399520cc0148c3ee5ca087706f12da4"],"bc8f206328a706450934717bec7ccc22ad166fc0":["403d05f7f8d69b65659157eff1bc1d2717f04c66","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["403d05f7f8d69b65659157eff1bc1d2717f04c66","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","424ac616f0aeeb2a3c8b6b94084255a0bcab9628"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b2ad92550399520cc0148c3ee5ca087706f12da4":["424ac616f0aeeb2a3c8b6b94084255a0bcab9628"],"af3193c66df8e8324d4bce9f66df967af9e8c602":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"424ac616f0aeeb2a3c8b6b94084255a0bcab9628":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["bc8f206328a706450934717bec7ccc22ad166fc0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["da02fc41cfc83eaee66abb7c926f2c909bda6d26","bc8f206328a706450934717bec7ccc22ad166fc0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","af3193c66df8e8324d4bce9f66df967af9e8c602"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","424ac616f0aeeb2a3c8b6b94084255a0bcab9628"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"af3193c66df8e8324d4bce9f66df967af9e8c602":["da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"b2ad92550399520cc0148c3ee5ca087706f12da4":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"424ac616f0aeeb2a3c8b6b94084255a0bcab9628":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","b2ad92550399520cc0148c3ee5ca087706f12da4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","bc8f206328a706450934717bec7ccc22ad166fc0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}