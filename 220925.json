{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#readSysProps(String,Set[String],ClientSnitchCtx).mjava","commits":[{"id":"2369aca9d59355841bea58e4e175d90816d26148","date":1496039862,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#readSysProps(String,Set[String],ClientSnitchCtx).mjava","pathOld":"/dev/null","sourceNew":"    private void readSysProps(String solrNode, Set<String> requestedTags, ClientSnitchCtx snitchContext) {\n      List<String> prefixes = null;\n      ModifiableSolrParams params;\n      List<String> sysProp = null;\n      for (String tag : requestedTags) {\n        if (!tag.startsWith(SYSPROP)) continue;\n        if (sysProp == null) {\n          prefixes = new ArrayList<>();\n          sysProp = new ArrayList<>();\n          prefixes.add(\"system.properties\");\n        }\n        sysProp.add(tag.substring(SYSPROP.length()));\n      }\n\n      if (sysProp == null) return;\n      params = new ModifiableSolrParams();\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n      for (String s : sysProp) params.add(\"property\", s);\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(6);\n        for (String s : sysProp) {\n          Object v = Utils.getObjectByPath(m, true,\n              Arrays.asList(\"metrics\", \"solr.jvm\", \"system.properties\", \"value\", s));\n          if (v != null) snitchContext.getTags().put(\"sysprop.\" + s, v);\n        }\n\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#readSysProps(String,Set[String],ClientSnitchCtx).mjava","pathOld":"/dev/null","sourceNew":"    private void readSysProps(String solrNode, Set<String> requestedTags, ClientSnitchCtx snitchContext) {\n      List<String> prefixes = null;\n      ModifiableSolrParams params;\n      List<String> sysProp = null;\n      for (String tag : requestedTags) {\n        if (!tag.startsWith(SYSPROP)) continue;\n        if (sysProp == null) {\n          prefixes = new ArrayList<>();\n          sysProp = new ArrayList<>();\n          prefixes.add(\"system.properties\");\n        }\n        sysProp.add(tag.substring(SYSPROP.length()));\n      }\n\n      if (sysProp == null) return;\n      params = new ModifiableSolrParams();\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n      for (String s : sysProp) params.add(\"property\", s);\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(6);\n        for (String s : sysProp) {\n          Object v = Utils.getObjectByPath(m, true,\n              Arrays.asList(\"metrics\", \"solr.jvm\", \"system.properties\", s));\n          if (v != null) snitchContext.getTags().put(\"sysprop.\" + s, v);\n        }\n\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#readSysProps(String,Set[String],ClientSnitchCtx).mjava","pathOld":"/dev/null","sourceNew":"    private void readSysProps(String solrNode, Set<String> requestedTags, ClientSnitchCtx snitchContext) {\n      List<String> prefixes = null;\n      ModifiableSolrParams params;\n      List<String> sysProp = null;\n      for (String tag : requestedTags) {\n        if (!tag.startsWith(SYSPROP)) continue;\n        if (sysProp == null) {\n          prefixes = new ArrayList<>();\n          sysProp = new ArrayList<>();\n          prefixes.add(\"system.properties\");\n        }\n        sysProp.add(tag.substring(SYSPROP.length()));\n      }\n\n      if (sysProp == null) return;\n      params = new ModifiableSolrParams();\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n      for (String s : sysProp) params.add(\"property\", s);\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(6);\n        for (String s : sysProp) {\n          Object v = Utils.getObjectByPath(m, true,\n              Arrays.asList(\"metrics\", \"solr.jvm\", \"system.properties\", s));\n          if (v != null) snitchContext.getTags().put(\"sysprop.\" + s, v);\n        }\n\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#readSysProps(String,Set[String],ClientSnitchCtx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#readSysProps(String,Set[String],ClientSnitchCtx).mjava","sourceNew":"    private void readSysProps(String solrNode, Set<String> requestedTags, ClientSnitchCtx snitchContext) {\n      List<String> prefixes = null;\n      ModifiableSolrParams params;\n      List<String> sysProp = null;\n      for (String tag : requestedTags) {\n        if (!tag.startsWith(SYSPROP)) continue;\n        if (sysProp == null) {\n          prefixes = new ArrayList<>();\n          sysProp = new ArrayList<>();\n          prefixes.add(\"system.properties\");\n        }\n        sysProp.add(tag.substring(SYSPROP.length()));\n      }\n\n      if (sysProp == null) return;\n      params = new ModifiableSolrParams();\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n      for (String s : sysProp) params.add(\"property\", s);\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(6);\n        for (String s : sysProp) {\n          Object v = Utils.getObjectByPath(m, true,\n              Arrays.asList(\"metrics\", \"solr.jvm\", \"system.properties\", s));\n          if (v != null) snitchContext.getTags().put(\"sysprop.\" + s, v);\n        }\n\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      }\n    }\n\n","sourceOld":"    private void readSysProps(String solrNode, Set<String> requestedTags, ClientSnitchCtx snitchContext) {\n      List<String> prefixes = null;\n      ModifiableSolrParams params;\n      List<String> sysProp = null;\n      for (String tag : requestedTags) {\n        if (!tag.startsWith(SYSPROP)) continue;\n        if (sysProp == null) {\n          prefixes = new ArrayList<>();\n          sysProp = new ArrayList<>();\n          prefixes.add(\"system.properties\");\n        }\n        sysProp.add(tag.substring(SYSPROP.length()));\n      }\n\n      if (sysProp == null) return;\n      params = new ModifiableSolrParams();\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n      for (String s : sysProp) params.add(\"property\", s);\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(6);\n        for (String s : sysProp) {\n          Object v = Utils.getObjectByPath(m, true,\n              Arrays.asList(\"metrics\", \"solr.jvm\", \"system.properties\", \"value\", s));\n          if (v != null) snitchContext.getTags().put(\"sysprop.\" + s, v);\n        }\n\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#readSysProps(String,Set[String],ClientSnitchCtx).mjava","pathOld":"/dev/null","sourceNew":"    private void readSysProps(String solrNode, Set<String> requestedTags, ClientSnitchCtx snitchContext) {\n      List<String> prefixes = null;\n      ModifiableSolrParams params;\n      List<String> sysProp = null;\n      for (String tag : requestedTags) {\n        if (!tag.startsWith(SYSPROP)) continue;\n        if (sysProp == null) {\n          prefixes = new ArrayList<>();\n          sysProp = new ArrayList<>();\n          prefixes.add(\"system.properties\");\n        }\n        sysProp.add(tag.substring(SYSPROP.length()));\n      }\n\n      if (sysProp == null) return;\n      params = new ModifiableSolrParams();\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n      for (String s : sysProp) params.add(\"property\", s);\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(6);\n        for (String s : sysProp) {\n          Object v = Utils.getObjectByPath(m, true,\n              Arrays.asList(\"metrics\", \"solr.jvm\", \"system.properties\", s));\n          if (v != null) snitchContext.getTags().put(\"sysprop.\" + s, v);\n        }\n\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7811b56f2d9e37eb839450d346535c87f1f504c2","date":1502459873,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#readSysProps(String,Set[String],ClientSnitchCtx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#readSysProps(String,Set[String],ClientSnitchCtx).mjava","sourceNew":"    private void readSysProps(String solrNode, Set<String> requestedTags, ClientSnitchCtx snitchContext) {\n      List<String> prefixes = null;\n      ModifiableSolrParams params;\n      List<String> sysProp = null;\n      for (String tag : requestedTags) {\n        if (!tag.startsWith(SYSPROP)) continue;\n        if (sysProp == null) {\n          prefixes = new ArrayList<>();\n          sysProp = new ArrayList<>();\n          prefixes.add(\"system.properties\");\n        }\n        sysProp.add(tag.substring(SYSPROP.length()));\n      }\n\n      if (sysProp == null) return;\n      params = new ModifiableSolrParams();\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n      for (String s : sysProp) params.add(\"property\", s);\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        for (String s : sysProp) {\n          Object v = Utils.getObjectByPath(rsp.nl, true,\n              Arrays.asList(\"metrics\", \"solr.jvm\", \"system.properties\", s));\n          if (v != null) snitchContext.getTags().put(\"sysprop.\" + s, v);\n        }\n\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      }\n    }\n\n","sourceOld":"    private void readSysProps(String solrNode, Set<String> requestedTags, ClientSnitchCtx snitchContext) {\n      List<String> prefixes = null;\n      ModifiableSolrParams params;\n      List<String> sysProp = null;\n      for (String tag : requestedTags) {\n        if (!tag.startsWith(SYSPROP)) continue;\n        if (sysProp == null) {\n          prefixes = new ArrayList<>();\n          sysProp = new ArrayList<>();\n          prefixes.add(\"system.properties\");\n        }\n        sysProp.add(tag.substring(SYSPROP.length()));\n      }\n\n      if (sysProp == null) return;\n      params = new ModifiableSolrParams();\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n      for (String s : sysProp) params.add(\"property\", s);\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(6);\n        for (String s : sysProp) {\n          Object v = Utils.getObjectByPath(m, true,\n              Arrays.asList(\"metrics\", \"solr.jvm\", \"system.properties\", s));\n          if (v != null) snitchContext.getTags().put(\"sysprop.\" + s, v);\n        }\n\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"455b47db0cfa51136fb68f261afcee3f59acb80e","date":1502982490,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#readSysProps(String,Set[String],ClientSnitchCtx).mjava","sourceNew":null,"sourceOld":"    private void readSysProps(String solrNode, Set<String> requestedTags, ClientSnitchCtx snitchContext) {\n      List<String> prefixes = null;\n      ModifiableSolrParams params;\n      List<String> sysProp = null;\n      for (String tag : requestedTags) {\n        if (!tag.startsWith(SYSPROP)) continue;\n        if (sysProp == null) {\n          prefixes = new ArrayList<>();\n          sysProp = new ArrayList<>();\n          prefixes.add(\"system.properties\");\n        }\n        sysProp.add(tag.substring(SYSPROP.length()));\n      }\n\n      if (sysProp == null) return;\n      params = new ModifiableSolrParams();\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n      for (String s : sysProp) params.add(\"property\", s);\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        for (String s : sysProp) {\n          Object v = Utils.getObjectByPath(rsp.nl, true,\n              Arrays.asList(\"metrics\", \"solr.jvm\", \"system.properties\", s));\n          if (v != null) snitchContext.getTags().put(\"sysprop.\" + s, v);\n        }\n\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#readSysProps(String,Set[String],ClientSnitchCtx).mjava","sourceNew":null,"sourceOld":"    private void readSysProps(String solrNode, Set<String> requestedTags, ClientSnitchCtx snitchContext) {\n      List<String> prefixes = null;\n      ModifiableSolrParams params;\n      List<String> sysProp = null;\n      for (String tag : requestedTags) {\n        if (!tag.startsWith(SYSPROP)) continue;\n        if (sysProp == null) {\n          prefixes = new ArrayList<>();\n          sysProp = new ArrayList<>();\n          prefixes.add(\"system.properties\");\n        }\n        sysProp.add(tag.substring(SYSPROP.length()));\n      }\n\n      if (sysProp == null) return;\n      params = new ModifiableSolrParams();\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n      for (String s : sysProp) params.add(\"property\", s);\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(6);\n        for (String s : sysProp) {\n          Object v = Utils.getObjectByPath(m, true,\n              Arrays.asList(\"metrics\", \"solr.jvm\", \"system.properties\", s));\n          if (v != null) snitchContext.getTags().put(\"sysprop.\" + s, v);\n        }\n\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#readSysProps(String,Set[String],ClientSnitchCtx).mjava","sourceNew":null,"sourceOld":"    private void readSysProps(String solrNode, Set<String> requestedTags, ClientSnitchCtx snitchContext) {\n      List<String> prefixes = null;\n      ModifiableSolrParams params;\n      List<String> sysProp = null;\n      for (String tag : requestedTags) {\n        if (!tag.startsWith(SYSPROP)) continue;\n        if (sysProp == null) {\n          prefixes = new ArrayList<>();\n          sysProp = new ArrayList<>();\n          prefixes.add(\"system.properties\");\n        }\n        sysProp.add(tag.substring(SYSPROP.length()));\n      }\n\n      if (sysProp == null) return;\n      params = new ModifiableSolrParams();\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n      for (String s : sysProp) params.add(\"property\", s);\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(6);\n        for (String s : sysProp) {\n          Object v = Utils.getObjectByPath(m, true,\n              Arrays.asList(\"metrics\", \"solr.jvm\", \"system.properties\", s));\n          if (v != null) snitchContext.getTags().put(\"sysprop.\" + s, v);\n        }\n\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2369aca9d59355841bea58e4e175d90816d26148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2369aca9d59355841bea58e4e175d90816d26148","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","455b47db0cfa51136fb68f261afcee3f59acb80e"],"7811b56f2d9e37eb839450d346535c87f1f504c2":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"455b47db0cfa51136fb68f261afcee3f59acb80e":["7811b56f2d9e37eb839450d346535c87f1f504c2"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["560c18d71dad43d675158783c3840f8c80d6d39c"]},"commit2Childs":{"2369aca9d59355841bea58e4e175d90816d26148":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["7811b56f2d9e37eb839450d346535c87f1f504c2"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"7811b56f2d9e37eb839450d346535c87f1f504c2":["455b47db0cfa51136fb68f261afcee3f59acb80e"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2369aca9d59355841bea58e4e175d90816d26148","74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","28288370235ed02234a64753cdbf0c6ec096304a"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"455b47db0cfa51136fb68f261afcee3f59acb80e":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}