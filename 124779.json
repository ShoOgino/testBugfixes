{"path":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    SolrParams p = rb.req.getParams();\n    if( p.getBool( MoreLikeThisParams.MLT, false ) ) {\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n      \n      NamedList<DocList> sim = getMoreLikeThese( rb, searcher,\n          rb.getResults().docList, rb.getFieldFlags() );\n\n      // TODO ???? add this directly to the response?\n      rb.rsp.add( \"moreLikeThis\", sim );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    SolrParams p = rb.req.getParams();\n    if( p.getBool( MoreLikeThisParams.MLT, false ) ) {\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n      \n      NamedList<DocList> sim = getMoreLikeThese( rb, searcher,\n          rb.getResults().docList, rb.getFieldFlags() );\n\n      // TODO ???? add this directly to the response?\n      rb.rsp.add( \"moreLikeThis\", sim );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    SolrParams p = rb.req.getParams();\n    if( p.getBool( MoreLikeThisParams.MLT, false ) ) {\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n      \n      NamedList<DocList> sim = getMoreLikeThese( rb, searcher,\n          rb.getResults().docList, rb.getFieldFlags() );\n\n      // TODO ???? add this directly to the response?\n      rb.rsp.add( \"moreLikeThis\", sim );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    SolrParams p = rb.req.getParams();\n    if( p.getBool( MoreLikeThisParams.MLT, false ) ) {\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n      \n      NamedList<DocList> sim = getMoreLikeThese( rb, searcher,\n          rb.getResults().docList, rb.getFieldFlags() );\n\n      // TODO ???? add this directly to the response?\n      rb.rsp.add( \"moreLikeThis\", sim );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    SolrParams p = rb.req.getParams();\n    if( p.getBool( MoreLikeThisParams.MLT, false ) ) {\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n      \n      NamedList<DocList> sim = getMoreLikeThese( rb, searcher,\n          rb.getResults().docList, rb.getFieldFlags() );\n\n      // TODO ???? add this directly to the response?\n      rb.rsp.add( \"moreLikeThis\", sim );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    SolrParams p = rb.req.getParams();\n    if( p.getBool( MoreLikeThisParams.MLT, false ) ) {\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n      \n      NamedList<DocList> sim = getMoreLikeThese( rb, searcher,\n          rb.getResults().docList, rb.getFieldFlags() );\n\n      // TODO ???? add this directly to the response?\n      rb.rsp.add( \"moreLikeThis\", sim );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b38d50314a7281b1ef90bfb3bb0bc91a38f0078f","date":1355410999,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n\n    SolrParams params = rb.req.getParams();\n    if (params.getBool(MoreLikeThisParams.MLT, false)) {\n      log.debug(\"Starting MoreLikeThis.Process.  isShard: \"\n          + params.getBool(ShardParams.IS_SHARD));\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n\n      int mltcount = params.getInt(MoreLikeThisParams.DOC_COUNT, 20);\n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        if (params.get(MoreLikeThisComponent.DIST_DOC_ID) == null) {\n          MoreLikeThisHandler.MoreLikeThisHelper mlt = new MoreLikeThisHandler.MoreLikeThisHelper(\n              params, searcher);\n          \n          NamedList<BooleanQuery> bQuery = mlt.getMoreLikeTheseQuery(rb\n              .getResults().docList);\n          \n          NamedList<String> temp = new NamedList<String>();\n          Iterator<Entry<String,BooleanQuery>> idToQueryIt = bQuery.iterator();\n\n          \n          while (idToQueryIt.hasNext()) {\n            Entry<String,BooleanQuery> idToQuery = idToQueryIt.next();\n            String s = idToQuery.getValue().toString();\n\n            log.debug(\"MLT Query:\" + s);\n            temp.add(idToQuery.getKey(), idToQuery.getValue().toString());\n          }\n\n          rb.rsp.add(\"moreLikeThis\", temp);\n        } else {\n          NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n              rb.getResults().docList, mltcount);\n          rb.rsp.add(\"moreLikeThis\", sim);\n        }\n      } else {\n        // non distrib case\n        NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(), rb.getResults().docList,\n            mltcount);\n        rb.rsp.add(\"moreLikeThis\", sim);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    SolrParams p = rb.req.getParams();\n    if( p.getBool( MoreLikeThisParams.MLT, false ) ) {\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n      \n      NamedList<DocList> sim = getMoreLikeThese( rb, searcher,\n          rb.getResults().docList, rb.getFieldFlags() );\n\n      // TODO ???? add this directly to the response?\n      rb.rsp.add( \"moreLikeThis\", sim );\n    }\n  }\n\n","bugFix":null,"bugIntro":["b8452c76b29af54eee832bf7b4ea9d46a9bf1fe3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98ef9d9ecf768191e0c139463409e9297f8367de","date":1356019463,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n\n    SolrParams params = rb.req.getParams();\n    if (params.getBool(MoreLikeThisParams.MLT, false)) {\n      log.debug(\"Starting MoreLikeThis.Process.  isShard: \"\n          + params.getBool(ShardParams.IS_SHARD));\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n\n      int mltcount = params.getInt(MoreLikeThisParams.DOC_COUNT, 20);\n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        if (params.get(MoreLikeThisComponent.DIST_DOC_ID) == null) {\n          if (rb.getResults().docList.size() == 0) {\n            // return empty response\n            rb.rsp.add(\"moreLikeThis\", new NamedList<DocList>());\n            return;\n          }\n          \n          MoreLikeThisHandler.MoreLikeThisHelper mlt = new MoreLikeThisHandler.MoreLikeThisHelper(\n              params, searcher);\n          \n          NamedList<BooleanQuery> bQuery = mlt.getMoreLikeTheseQuery(rb\n              .getResults().docList);\n          \n          NamedList<String> temp = new NamedList<String>();\n          Iterator<Entry<String,BooleanQuery>> idToQueryIt = bQuery.iterator();\n\n          \n          while (idToQueryIt.hasNext()) {\n            Entry<String,BooleanQuery> idToQuery = idToQueryIt.next();\n            String s = idToQuery.getValue().toString();\n\n            log.debug(\"MLT Query:\" + s);\n            temp.add(idToQuery.getKey(), idToQuery.getValue().toString());\n          }\n\n          rb.rsp.add(\"moreLikeThis\", temp);\n        } else {\n          NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n              rb.getResults().docList, mltcount);\n          rb.rsp.add(\"moreLikeThis\", sim);\n        }\n      } else {\n        // non distrib case\n        NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(), rb.getResults().docList,\n            mltcount);\n        rb.rsp.add(\"moreLikeThis\", sim);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n\n    SolrParams params = rb.req.getParams();\n    if (params.getBool(MoreLikeThisParams.MLT, false)) {\n      log.debug(\"Starting MoreLikeThis.Process.  isShard: \"\n          + params.getBool(ShardParams.IS_SHARD));\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n\n      int mltcount = params.getInt(MoreLikeThisParams.DOC_COUNT, 20);\n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        if (params.get(MoreLikeThisComponent.DIST_DOC_ID) == null) {\n          MoreLikeThisHandler.MoreLikeThisHelper mlt = new MoreLikeThisHandler.MoreLikeThisHelper(\n              params, searcher);\n          \n          NamedList<BooleanQuery> bQuery = mlt.getMoreLikeTheseQuery(rb\n              .getResults().docList);\n          \n          NamedList<String> temp = new NamedList<String>();\n          Iterator<Entry<String,BooleanQuery>> idToQueryIt = bQuery.iterator();\n\n          \n          while (idToQueryIt.hasNext()) {\n            Entry<String,BooleanQuery> idToQuery = idToQueryIt.next();\n            String s = idToQuery.getValue().toString();\n\n            log.debug(\"MLT Query:\" + s);\n            temp.add(idToQuery.getKey(), idToQuery.getValue().toString());\n          }\n\n          rb.rsp.add(\"moreLikeThis\", temp);\n        } else {\n          NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n              rb.getResults().docList, mltcount);\n          rb.rsp.add(\"moreLikeThis\", sim);\n        }\n      } else {\n        // non distrib case\n        NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(), rb.getResults().docList,\n            mltcount);\n        rb.rsp.add(\"moreLikeThis\", sim);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a97a2a60d1ce1ac2bd6ca3f40ed674baab554095","date":1356979334,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n\n    SolrParams params = rb.req.getParams();\n    if (params.getBool(MoreLikeThisParams.MLT, false)) {\n      log.debug(\"Starting MoreLikeThis.Process.  isShard: \"\n          + params.getBool(ShardParams.IS_SHARD));\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n\n      int mltcount = params.getInt(MoreLikeThisParams.DOC_COUNT, 5);\n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        if (params.get(MoreLikeThisComponent.DIST_DOC_ID) == null) {\n          if (rb.getResults().docList.size() == 0) {\n            // return empty response\n            rb.rsp.add(\"moreLikeThis\", new NamedList<DocList>());\n            return;\n          }\n          \n          MoreLikeThisHandler.MoreLikeThisHelper mlt = new MoreLikeThisHandler.MoreLikeThisHelper(\n              params, searcher);\n          \n          NamedList<BooleanQuery> bQuery = mlt.getMoreLikeTheseQuery(rb\n              .getResults().docList);\n          \n          NamedList<String> temp = new NamedList<String>();\n          Iterator<Entry<String,BooleanQuery>> idToQueryIt = bQuery.iterator();\n\n          \n          while (idToQueryIt.hasNext()) {\n            Entry<String,BooleanQuery> idToQuery = idToQueryIt.next();\n            String s = idToQuery.getValue().toString();\n\n            log.debug(\"MLT Query:\" + s);\n            temp.add(idToQuery.getKey(), idToQuery.getValue().toString());\n          }\n\n          rb.rsp.add(\"moreLikeThis\", temp);\n        } else {\n          NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n              rb.getResults().docList, mltcount);\n          rb.rsp.add(\"moreLikeThis\", sim);\n        }\n      } else {\n        // non distrib case\n        NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(), rb.getResults().docList,\n            mltcount);\n        rb.rsp.add(\"moreLikeThis\", sim);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n\n    SolrParams params = rb.req.getParams();\n    if (params.getBool(MoreLikeThisParams.MLT, false)) {\n      log.debug(\"Starting MoreLikeThis.Process.  isShard: \"\n          + params.getBool(ShardParams.IS_SHARD));\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n\n      int mltcount = params.getInt(MoreLikeThisParams.DOC_COUNT, 20);\n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        if (params.get(MoreLikeThisComponent.DIST_DOC_ID) == null) {\n          if (rb.getResults().docList.size() == 0) {\n            // return empty response\n            rb.rsp.add(\"moreLikeThis\", new NamedList<DocList>());\n            return;\n          }\n          \n          MoreLikeThisHandler.MoreLikeThisHelper mlt = new MoreLikeThisHandler.MoreLikeThisHelper(\n              params, searcher);\n          \n          NamedList<BooleanQuery> bQuery = mlt.getMoreLikeTheseQuery(rb\n              .getResults().docList);\n          \n          NamedList<String> temp = new NamedList<String>();\n          Iterator<Entry<String,BooleanQuery>> idToQueryIt = bQuery.iterator();\n\n          \n          while (idToQueryIt.hasNext()) {\n            Entry<String,BooleanQuery> idToQuery = idToQueryIt.next();\n            String s = idToQuery.getValue().toString();\n\n            log.debug(\"MLT Query:\" + s);\n            temp.add(idToQuery.getKey(), idToQuery.getValue().toString());\n          }\n\n          rb.rsp.add(\"moreLikeThis\", temp);\n        } else {\n          NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n              rb.getResults().docList, mltcount);\n          rb.rsp.add(\"moreLikeThis\", sim);\n        }\n      } else {\n        // non distrib case\n        NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(), rb.getResults().docList,\n            mltcount);\n        rb.rsp.add(\"moreLikeThis\", sim);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["b8452c76b29af54eee832bf7b4ea9d46a9bf1fe3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n\n    SolrParams params = rb.req.getParams();\n    if (params.getBool(MoreLikeThisParams.MLT, false)) {\n      log.debug(\"Starting MoreLikeThis.Process.  isShard: \"\n          + params.getBool(ShardParams.IS_SHARD));\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n\n      int mltcount = params.getInt(MoreLikeThisParams.DOC_COUNT, 5);\n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        if (params.get(MoreLikeThisComponent.DIST_DOC_ID) == null) {\n          if (rb.getResults().docList.size() == 0) {\n            // return empty response\n            rb.rsp.add(\"moreLikeThis\", new NamedList<DocList>());\n            return;\n          }\n          \n          MoreLikeThisHandler.MoreLikeThisHelper mlt = new MoreLikeThisHandler.MoreLikeThisHelper(\n              params, searcher);\n          \n          NamedList<BooleanQuery> bQuery = mlt.getMoreLikeTheseQuery(rb\n              .getResults().docList);\n          \n          NamedList<String> temp = new NamedList<String>();\n          Iterator<Entry<String,BooleanQuery>> idToQueryIt = bQuery.iterator();\n\n          \n          while (idToQueryIt.hasNext()) {\n            Entry<String,BooleanQuery> idToQuery = idToQueryIt.next();\n            String s = idToQuery.getValue().toString();\n\n            log.debug(\"MLT Query:\" + s);\n            temp.add(idToQuery.getKey(), idToQuery.getValue().toString());\n          }\n\n          rb.rsp.add(\"moreLikeThis\", temp);\n        } else {\n          NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n              rb.getResults().docList, mltcount);\n          rb.rsp.add(\"moreLikeThis\", sim);\n        }\n      } else {\n        // non distrib case\n        NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(), rb.getResults().docList,\n            mltcount);\n        rb.rsp.add(\"moreLikeThis\", sim);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    SolrParams p = rb.req.getParams();\n    if( p.getBool( MoreLikeThisParams.MLT, false ) ) {\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n      \n      NamedList<DocList> sim = getMoreLikeThese( rb, searcher,\n          rb.getResults().docList, rb.getFieldFlags() );\n\n      // TODO ???? add this directly to the response?\n      rb.rsp.add( \"moreLikeThis\", sim );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8452c76b29af54eee832bf7b4ea9d46a9bf1fe3","date":1382305255,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n\n    SolrParams params = rb.req.getParams();\n    ReturnFields returnFields = new SolrReturnFields( rb.req );\n\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n\n    rb.setFieldFlags(flags);\n\n    if (params.getBool(MoreLikeThisParams.MLT, false)) {\n      log.debug(\"Starting MoreLikeThis.Process.  isShard: \"\n          + params.getBool(ShardParams.IS_SHARD));\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n\n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        if (params.get(MoreLikeThisComponent.DIST_DOC_ID) == null) {\n          if (rb.getResults().docList.size() == 0) {\n            // return empty response\n            rb.rsp.add(\"moreLikeThis\", new NamedList<DocList>());\n            return;\n          }\n          \n          MoreLikeThisHandler.MoreLikeThisHelper mlt = new MoreLikeThisHandler.MoreLikeThisHelper(\n              params, searcher);\n\n          NamedList<BooleanQuery> bQuery = mlt.getMoreLikeTheseQuery(rb\n              .getResults().docList);\n          \n          NamedList<String> temp = new NamedList<String>();\n          Iterator<Entry<String,BooleanQuery>> idToQueryIt = bQuery.iterator();\n\n          \n          while (idToQueryIt.hasNext()) {\n            Entry<String,BooleanQuery> idToQuery = idToQueryIt.next();\n            String s = idToQuery.getValue().toString();\n\n            log.debug(\"MLT Query:\" + s);\n            temp.add(idToQuery.getKey(), idToQuery.getValue().toString());\n          }\n\n          rb.rsp.add(\"moreLikeThis\", temp);\n        } else {\n          NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n              rb.getResults().docList, flags);\n          rb.rsp.add(\"moreLikeThis\", sim);\n        }\n      } else {\n        // non distrib case\n        NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(), rb.getResults().docList,\n            flags);\n        rb.rsp.add(\"moreLikeThis\", sim);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n\n    SolrParams params = rb.req.getParams();\n    if (params.getBool(MoreLikeThisParams.MLT, false)) {\n      log.debug(\"Starting MoreLikeThis.Process.  isShard: \"\n          + params.getBool(ShardParams.IS_SHARD));\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n\n      int mltcount = params.getInt(MoreLikeThisParams.DOC_COUNT, 5);\n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        if (params.get(MoreLikeThisComponent.DIST_DOC_ID) == null) {\n          if (rb.getResults().docList.size() == 0) {\n            // return empty response\n            rb.rsp.add(\"moreLikeThis\", new NamedList<DocList>());\n            return;\n          }\n          \n          MoreLikeThisHandler.MoreLikeThisHelper mlt = new MoreLikeThisHandler.MoreLikeThisHelper(\n              params, searcher);\n          \n          NamedList<BooleanQuery> bQuery = mlt.getMoreLikeTheseQuery(rb\n              .getResults().docList);\n          \n          NamedList<String> temp = new NamedList<String>();\n          Iterator<Entry<String,BooleanQuery>> idToQueryIt = bQuery.iterator();\n\n          \n          while (idToQueryIt.hasNext()) {\n            Entry<String,BooleanQuery> idToQuery = idToQueryIt.next();\n            String s = idToQuery.getValue().toString();\n\n            log.debug(\"MLT Query:\" + s);\n            temp.add(idToQuery.getKey(), idToQuery.getValue().toString());\n          }\n\n          rb.rsp.add(\"moreLikeThis\", temp);\n        } else {\n          NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n              rb.getResults().docList, mltcount);\n          rb.rsp.add(\"moreLikeThis\", sim);\n        }\n      } else {\n        // non distrib case\n        NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(), rb.getResults().docList,\n            mltcount);\n        rb.rsp.add(\"moreLikeThis\", sim);\n      }\n    }\n  }\n\n","bugFix":["b38d50314a7281b1ef90bfb3bb0bc91a38f0078f","a97a2a60d1ce1ac2bd6ca3f40ed674baab554095"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n\n    SolrParams params = rb.req.getParams();\n    ReturnFields returnFields = new SolrReturnFields( rb.req );\n\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n\n    rb.setFieldFlags(flags);\n\n    if (params.getBool(MoreLikeThisParams.MLT, false)) {\n      log.debug(\"Starting MoreLikeThis.Process.  isShard: \"\n          + params.getBool(ShardParams.IS_SHARD));\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n\n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        if (params.get(MoreLikeThisComponent.DIST_DOC_ID) == null) {\n          if (rb.getResults().docList.size() == 0) {\n            // return empty response\n            rb.rsp.add(\"moreLikeThis\", new NamedList<DocList>());\n            return;\n          }\n          \n          MoreLikeThisHandler.MoreLikeThisHelper mlt = new MoreLikeThisHandler.MoreLikeThisHelper(\n              params, searcher);\n\n          NamedList<BooleanQuery> bQuery = mlt.getMoreLikeTheseQuery(rb\n              .getResults().docList);\n          \n          NamedList<String> temp = new NamedList<>();\n          Iterator<Entry<String,BooleanQuery>> idToQueryIt = bQuery.iterator();\n\n          \n          while (idToQueryIt.hasNext()) {\n            Entry<String,BooleanQuery> idToQuery = idToQueryIt.next();\n            String s = idToQuery.getValue().toString();\n\n            log.debug(\"MLT Query:\" + s);\n            temp.add(idToQuery.getKey(), idToQuery.getValue().toString());\n          }\n\n          rb.rsp.add(\"moreLikeThis\", temp);\n        } else {\n          NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n              rb.getResults().docList, flags);\n          rb.rsp.add(\"moreLikeThis\", sim);\n        }\n      } else {\n        // non distrib case\n        NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(), rb.getResults().docList,\n            flags);\n        rb.rsp.add(\"moreLikeThis\", sim);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n\n    SolrParams params = rb.req.getParams();\n    ReturnFields returnFields = new SolrReturnFields( rb.req );\n\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n\n    rb.setFieldFlags(flags);\n\n    if (params.getBool(MoreLikeThisParams.MLT, false)) {\n      log.debug(\"Starting MoreLikeThis.Process.  isShard: \"\n          + params.getBool(ShardParams.IS_SHARD));\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n\n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        if (params.get(MoreLikeThisComponent.DIST_DOC_ID) == null) {\n          if (rb.getResults().docList.size() == 0) {\n            // return empty response\n            rb.rsp.add(\"moreLikeThis\", new NamedList<DocList>());\n            return;\n          }\n          \n          MoreLikeThisHandler.MoreLikeThisHelper mlt = new MoreLikeThisHandler.MoreLikeThisHelper(\n              params, searcher);\n\n          NamedList<BooleanQuery> bQuery = mlt.getMoreLikeTheseQuery(rb\n              .getResults().docList);\n          \n          NamedList<String> temp = new NamedList<String>();\n          Iterator<Entry<String,BooleanQuery>> idToQueryIt = bQuery.iterator();\n\n          \n          while (idToQueryIt.hasNext()) {\n            Entry<String,BooleanQuery> idToQuery = idToQueryIt.next();\n            String s = idToQuery.getValue().toString();\n\n            log.debug(\"MLT Query:\" + s);\n            temp.add(idToQuery.getKey(), idToQuery.getValue().toString());\n          }\n\n          rb.rsp.add(\"moreLikeThis\", temp);\n        } else {\n          NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n              rb.getResults().docList, flags);\n          rb.rsp.add(\"moreLikeThis\", sim);\n        }\n      } else {\n        // non distrib case\n        NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(), rb.getResults().docList,\n            flags);\n        rb.rsp.add(\"moreLikeThis\", sim);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"561c2351baf6dd64061addef891359954c1a7faa","date":1462788487,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n\n    SolrParams params = rb.req.getParams();\n    \n    if (params.getBool(MoreLikeThisParams.MLT, false)) {\n      ReturnFields returnFields = new SolrReturnFields( rb.req );\n  \n      int flags = 0;\n      if (returnFields.wantsScore()) {\n        flags |= SolrIndexSearcher.GET_SCORES;\n      }\n  \n      rb.setFieldFlags(flags);\n\n      log.debug(\"Starting MoreLikeThis.Process.  isShard: \"\n          + params.getBool(ShardParams.IS_SHARD));\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n\n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        if (params.get(MoreLikeThisComponent.DIST_DOC_ID) == null) {\n          if (rb.getResults().docList.size() == 0) {\n            // return empty response\n            rb.rsp.add(\"moreLikeThis\", new NamedList<DocList>());\n            return;\n          }\n          \n          MoreLikeThisHandler.MoreLikeThisHelper mlt = new MoreLikeThisHandler.MoreLikeThisHelper(\n              params, searcher);\n\n          NamedList<BooleanQuery> bQuery = mlt.getMoreLikeTheseQuery(rb\n              .getResults().docList);\n          \n          NamedList<String> temp = new NamedList<>();\n          Iterator<Entry<String,BooleanQuery>> idToQueryIt = bQuery.iterator();\n\n          \n          while (idToQueryIt.hasNext()) {\n            Entry<String,BooleanQuery> idToQuery = idToQueryIt.next();\n            String s = idToQuery.getValue().toString();\n\n            log.debug(\"MLT Query:\" + s);\n            temp.add(idToQuery.getKey(), idToQuery.getValue().toString());\n          }\n\n          rb.rsp.add(\"moreLikeThis\", temp);\n        } else {\n          NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n              rb.getResults().docList, flags);\n          rb.rsp.add(\"moreLikeThis\", sim);\n        }\n      } else {\n        // non distrib case\n        NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(), rb.getResults().docList,\n            flags);\n        rb.rsp.add(\"moreLikeThis\", sim);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n\n    SolrParams params = rb.req.getParams();\n    ReturnFields returnFields = new SolrReturnFields( rb.req );\n\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n\n    rb.setFieldFlags(flags);\n\n    if (params.getBool(MoreLikeThisParams.MLT, false)) {\n      log.debug(\"Starting MoreLikeThis.Process.  isShard: \"\n          + params.getBool(ShardParams.IS_SHARD));\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n\n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        if (params.get(MoreLikeThisComponent.DIST_DOC_ID) == null) {\n          if (rb.getResults().docList.size() == 0) {\n            // return empty response\n            rb.rsp.add(\"moreLikeThis\", new NamedList<DocList>());\n            return;\n          }\n          \n          MoreLikeThisHandler.MoreLikeThisHelper mlt = new MoreLikeThisHandler.MoreLikeThisHelper(\n              params, searcher);\n\n          NamedList<BooleanQuery> bQuery = mlt.getMoreLikeTheseQuery(rb\n              .getResults().docList);\n          \n          NamedList<String> temp = new NamedList<>();\n          Iterator<Entry<String,BooleanQuery>> idToQueryIt = bQuery.iterator();\n\n          \n          while (idToQueryIt.hasNext()) {\n            Entry<String,BooleanQuery> idToQuery = idToQueryIt.next();\n            String s = idToQuery.getValue().toString();\n\n            log.debug(\"MLT Query:\" + s);\n            temp.add(idToQuery.getKey(), idToQuery.getValue().toString());\n          }\n\n          rb.rsp.add(\"moreLikeThis\", temp);\n        } else {\n          NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n              rb.getResults().docList, flags);\n          rb.rsp.add(\"moreLikeThis\", sim);\n        }\n      } else {\n        // non distrib case\n        NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(), rb.getResults().docList,\n            flags);\n        rb.rsp.add(\"moreLikeThis\", sim);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n\n    SolrParams params = rb.req.getParams();\n    \n    if (params.getBool(MoreLikeThisParams.MLT, false)) {\n      ReturnFields returnFields = new SolrReturnFields( rb.req );\n  \n      int flags = 0;\n      if (returnFields.wantsScore()) {\n        flags |= SolrIndexSearcher.GET_SCORES;\n      }\n  \n      rb.setFieldFlags(flags);\n\n      log.debug(\"Starting MoreLikeThis.Process.  isShard: \"\n          + params.getBool(ShardParams.IS_SHARD));\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n\n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        if (params.get(MoreLikeThisComponent.DIST_DOC_ID) == null) {\n          if (rb.getResults().docList.size() == 0) {\n            // return empty response\n            rb.rsp.add(\"moreLikeThis\", new NamedList<DocList>());\n            return;\n          }\n          \n          MoreLikeThisHandler.MoreLikeThisHelper mlt = new MoreLikeThisHandler.MoreLikeThisHelper(\n              params, searcher);\n\n          NamedList<BooleanQuery> bQuery = mlt.getMoreLikeTheseQuery(rb\n              .getResults().docList);\n          \n          NamedList<String> temp = new NamedList<>();\n          Iterator<Entry<String,BooleanQuery>> idToQueryIt = bQuery.iterator();\n\n          \n          while (idToQueryIt.hasNext()) {\n            Entry<String,BooleanQuery> idToQuery = idToQueryIt.next();\n            String s = idToQuery.getValue().toString();\n\n            log.debug(\"MLT Query:\" + s);\n            temp.add(idToQuery.getKey(), idToQuery.getValue().toString());\n          }\n\n          rb.rsp.add(\"moreLikeThis\", temp);\n        } else {\n          NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n              rb.getResults().docList, flags);\n          rb.rsp.add(\"moreLikeThis\", sim);\n        }\n      } else {\n        // non distrib case\n        NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(), rb.getResults().docList,\n            flags);\n        rb.rsp.add(\"moreLikeThis\", sim);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n\n    SolrParams params = rb.req.getParams();\n    ReturnFields returnFields = new SolrReturnFields( rb.req );\n\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n\n    rb.setFieldFlags(flags);\n\n    if (params.getBool(MoreLikeThisParams.MLT, false)) {\n      log.debug(\"Starting MoreLikeThis.Process.  isShard: \"\n          + params.getBool(ShardParams.IS_SHARD));\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n\n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        if (params.get(MoreLikeThisComponent.DIST_DOC_ID) == null) {\n          if (rb.getResults().docList.size() == 0) {\n            // return empty response\n            rb.rsp.add(\"moreLikeThis\", new NamedList<DocList>());\n            return;\n          }\n          \n          MoreLikeThisHandler.MoreLikeThisHelper mlt = new MoreLikeThisHandler.MoreLikeThisHelper(\n              params, searcher);\n\n          NamedList<BooleanQuery> bQuery = mlt.getMoreLikeTheseQuery(rb\n              .getResults().docList);\n          \n          NamedList<String> temp = new NamedList<>();\n          Iterator<Entry<String,BooleanQuery>> idToQueryIt = bQuery.iterator();\n\n          \n          while (idToQueryIt.hasNext()) {\n            Entry<String,BooleanQuery> idToQuery = idToQueryIt.next();\n            String s = idToQuery.getValue().toString();\n\n            log.debug(\"MLT Query:\" + s);\n            temp.add(idToQuery.getKey(), idToQuery.getValue().toString());\n          }\n\n          rb.rsp.add(\"moreLikeThis\", temp);\n        } else {\n          NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n              rb.getResults().docList, flags);\n          rb.rsp.add(\"moreLikeThis\", sim);\n        }\n      } else {\n        // non distrib case\n        NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(), rb.getResults().docList,\n            flags);\n        rb.rsp.add(\"moreLikeThis\", sim);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n\n    SolrParams params = rb.req.getParams();\n    \n    if (params.getBool(MoreLikeThisParams.MLT, false)) {\n      ReturnFields returnFields = new SolrReturnFields( rb.req );\n  \n      int flags = 0;\n      if (returnFields.wantsScore()) {\n        flags |= SolrIndexSearcher.GET_SCORES;\n      }\n  \n      rb.setFieldFlags(flags);\n\n      log.debug(\"Starting MoreLikeThis.Process.  isShard: \"\n          + params.getBool(ShardParams.IS_SHARD));\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n\n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        if (params.get(MoreLikeThisComponent.DIST_DOC_ID) == null) {\n          if (rb.getResults().docList.size() == 0) {\n            // return empty response\n            rb.rsp.add(\"moreLikeThis\", new NamedList<DocList>());\n            return;\n          }\n          \n          MoreLikeThisHandler.MoreLikeThisHelper mlt = new MoreLikeThisHandler.MoreLikeThisHelper(\n              params, searcher);\n\n          NamedList<BooleanQuery> bQuery = mlt.getMoreLikeTheseQuery(rb\n              .getResults().docList);\n          \n          NamedList<String> temp = new NamedList<>();\n          Iterator<Entry<String,BooleanQuery>> idToQueryIt = bQuery.iterator();\n\n          \n          while (idToQueryIt.hasNext()) {\n            Entry<String,BooleanQuery> idToQuery = idToQueryIt.next();\n            String s = idToQuery.getValue().toString();\n\n            log.debug(\"MLT Query:\" + s);\n            temp.add(idToQuery.getKey(), idToQuery.getValue().toString());\n          }\n\n          rb.rsp.add(\"moreLikeThis\", temp);\n        } else {\n          NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n              rb.getResults().docList, flags);\n          rb.rsp.add(\"moreLikeThis\", sim);\n        }\n      } else {\n        // non distrib case\n        NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(), rb.getResults().docList,\n            flags);\n        rb.rsp.add(\"moreLikeThis\", sim);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n\n    SolrParams params = rb.req.getParams();\n    ReturnFields returnFields = new SolrReturnFields( rb.req );\n\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n\n    rb.setFieldFlags(flags);\n\n    if (params.getBool(MoreLikeThisParams.MLT, false)) {\n      log.debug(\"Starting MoreLikeThis.Process.  isShard: \"\n          + params.getBool(ShardParams.IS_SHARD));\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n\n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        if (params.get(MoreLikeThisComponent.DIST_DOC_ID) == null) {\n          if (rb.getResults().docList.size() == 0) {\n            // return empty response\n            rb.rsp.add(\"moreLikeThis\", new NamedList<DocList>());\n            return;\n          }\n          \n          MoreLikeThisHandler.MoreLikeThisHelper mlt = new MoreLikeThisHandler.MoreLikeThisHelper(\n              params, searcher);\n\n          NamedList<BooleanQuery> bQuery = mlt.getMoreLikeTheseQuery(rb\n              .getResults().docList);\n          \n          NamedList<String> temp = new NamedList<>();\n          Iterator<Entry<String,BooleanQuery>> idToQueryIt = bQuery.iterator();\n\n          \n          while (idToQueryIt.hasNext()) {\n            Entry<String,BooleanQuery> idToQuery = idToQueryIt.next();\n            String s = idToQuery.getValue().toString();\n\n            log.debug(\"MLT Query:\" + s);\n            temp.add(idToQuery.getKey(), idToQuery.getValue().toString());\n          }\n\n          rb.rsp.add(\"moreLikeThis\", temp);\n        } else {\n          NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n              rb.getResults().docList, flags);\n          rb.rsp.add(\"moreLikeThis\", sim);\n        }\n      } else {\n        // non distrib case\n        NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(), rb.getResults().docList,\n            flags);\n        rb.rsp.add(\"moreLikeThis\", sim);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n\n    SolrParams params = rb.req.getParams();\n    \n    if (params.getBool(MoreLikeThisParams.MLT, false)) {\n      ReturnFields returnFields = new SolrReturnFields( rb.req );\n  \n      int flags = 0;\n      if (returnFields.wantsScore()) {\n        flags |= SolrIndexSearcher.GET_SCORES;\n      }\n  \n      rb.setFieldFlags(flags);\n\n      log.debug(\"Starting MoreLikeThis.Process.  isShard: \"\n          + params.getBool(ShardParams.IS_SHARD));\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n\n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        if (params.get(MoreLikeThisComponent.DIST_DOC_ID) == null) {\n          if (rb.getResults().docList.size() == 0) {\n            // return empty response\n            rb.rsp.add(\"moreLikeThis\", new NamedList<DocList>());\n            return;\n          }\n          \n          MoreLikeThisHandler.MoreLikeThisHelper mlt = new MoreLikeThisHandler.MoreLikeThisHelper(\n              params, searcher);\n\n          NamedList<BooleanQuery> bQuery = mlt.getMoreLikeTheseQuery(rb\n              .getResults().docList);\n          \n          NamedList<String> temp = new NamedList<>();\n          Iterator<Entry<String,BooleanQuery>> idToQueryIt = bQuery.iterator();\n\n          \n          while (idToQueryIt.hasNext()) {\n            Entry<String,BooleanQuery> idToQuery = idToQueryIt.next();\n            String s = idToQuery.getValue().toString();\n\n            log.debug(\"MLT Query:\" + s);\n            temp.add(idToQuery.getKey(), idToQuery.getValue().toString());\n          }\n\n          rb.rsp.add(\"moreLikeThis\", temp);\n        } else {\n          NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n              rb.getResults().docList, flags);\n          rb.rsp.add(\"moreLikeThis\", sim);\n        }\n      } else {\n        // non distrib case\n        NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(), rb.getResults().docList,\n            flags);\n        rb.rsp.add(\"moreLikeThis\", sim);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n\n    SolrParams params = rb.req.getParams();\n    ReturnFields returnFields = new SolrReturnFields( rb.req );\n\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n\n    rb.setFieldFlags(flags);\n\n    if (params.getBool(MoreLikeThisParams.MLT, false)) {\n      log.debug(\"Starting MoreLikeThis.Process.  isShard: \"\n          + params.getBool(ShardParams.IS_SHARD));\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n\n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        if (params.get(MoreLikeThisComponent.DIST_DOC_ID) == null) {\n          if (rb.getResults().docList.size() == 0) {\n            // return empty response\n            rb.rsp.add(\"moreLikeThis\", new NamedList<DocList>());\n            return;\n          }\n          \n          MoreLikeThisHandler.MoreLikeThisHelper mlt = new MoreLikeThisHandler.MoreLikeThisHelper(\n              params, searcher);\n\n          NamedList<BooleanQuery> bQuery = mlt.getMoreLikeTheseQuery(rb\n              .getResults().docList);\n          \n          NamedList<String> temp = new NamedList<>();\n          Iterator<Entry<String,BooleanQuery>> idToQueryIt = bQuery.iterator();\n\n          \n          while (idToQueryIt.hasNext()) {\n            Entry<String,BooleanQuery> idToQuery = idToQueryIt.next();\n            String s = idToQuery.getValue().toString();\n\n            log.debug(\"MLT Query:\" + s);\n            temp.add(idToQuery.getKey(), idToQuery.getValue().toString());\n          }\n\n          rb.rsp.add(\"moreLikeThis\", temp);\n        } else {\n          NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n              rb.getResults().docList, flags);\n          rb.rsp.add(\"moreLikeThis\", sim);\n        }\n      } else {\n        // non distrib case\n        NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(), rb.getResults().docList,\n            flags);\n        rb.rsp.add(\"moreLikeThis\", sim);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/MoreLikeThisComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n\n    SolrParams params = rb.req.getParams();\n    \n    if (params.getBool(MoreLikeThisParams.MLT, false)) {\n      ReturnFields returnFields = new SolrReturnFields( rb.req );\n  \n      int flags = 0;\n      if (returnFields.wantsScore()) {\n        flags |= SolrIndexSearcher.GET_SCORES;\n      }\n  \n      rb.setFieldFlags(flags);\n\n      if (log.isDebugEnabled()) {\n        log.debug(\"Starting MoreLikeThis.Process.  isShard: {}\", params.getBool(ShardParams.IS_SHARD));\n      }\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n\n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        if (params.get(MoreLikeThisComponent.DIST_DOC_ID) == null) {\n          if (rb.getResults().docList.size() == 0) {\n            // return empty response\n            rb.rsp.add(\"moreLikeThis\", new NamedList<DocList>());\n            return;\n          }\n          \n          MoreLikeThisHandler.MoreLikeThisHelper mlt = new MoreLikeThisHandler.MoreLikeThisHelper(\n              params, searcher);\n\n          NamedList<BooleanQuery> bQuery = mlt.getMoreLikeTheseQuery(rb\n              .getResults().docList);\n          \n          NamedList<String> temp = new NamedList<>();\n          Iterator<Entry<String,BooleanQuery>> idToQueryIt = bQuery.iterator();\n\n          \n          while (idToQueryIt.hasNext()) {\n            Entry<String,BooleanQuery> idToQuery = idToQueryIt.next();\n            String s = idToQuery.getValue().toString();\n\n            log.debug(\"MLT Query:{}\", s);\n            temp.add(idToQuery.getKey(), idToQuery.getValue().toString());\n          }\n\n          rb.rsp.add(\"moreLikeThis\", temp);\n        } else {\n          NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n              rb.getResults().docList, flags);\n          rb.rsp.add(\"moreLikeThis\", sim);\n        }\n      } else {\n        // non distrib case\n        NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(), rb.getResults().docList,\n            flags);\n        rb.rsp.add(\"moreLikeThis\", sim);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n\n    SolrParams params = rb.req.getParams();\n    \n    if (params.getBool(MoreLikeThisParams.MLT, false)) {\n      ReturnFields returnFields = new SolrReturnFields( rb.req );\n  \n      int flags = 0;\n      if (returnFields.wantsScore()) {\n        flags |= SolrIndexSearcher.GET_SCORES;\n      }\n  \n      rb.setFieldFlags(flags);\n\n      log.debug(\"Starting MoreLikeThis.Process.  isShard: \"\n          + params.getBool(ShardParams.IS_SHARD));\n      SolrIndexSearcher searcher = rb.req.getSearcher();\n\n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        if (params.get(MoreLikeThisComponent.DIST_DOC_ID) == null) {\n          if (rb.getResults().docList.size() == 0) {\n            // return empty response\n            rb.rsp.add(\"moreLikeThis\", new NamedList<DocList>());\n            return;\n          }\n          \n          MoreLikeThisHandler.MoreLikeThisHelper mlt = new MoreLikeThisHandler.MoreLikeThisHelper(\n              params, searcher);\n\n          NamedList<BooleanQuery> bQuery = mlt.getMoreLikeTheseQuery(rb\n              .getResults().docList);\n          \n          NamedList<String> temp = new NamedList<>();\n          Iterator<Entry<String,BooleanQuery>> idToQueryIt = bQuery.iterator();\n\n          \n          while (idToQueryIt.hasNext()) {\n            Entry<String,BooleanQuery> idToQuery = idToQueryIt.next();\n            String s = idToQuery.getValue().toString();\n\n            log.debug(\"MLT Query:\" + s);\n            temp.add(idToQuery.getKey(), idToQuery.getValue().toString());\n          }\n\n          rb.rsp.add(\"moreLikeThis\", temp);\n        } else {\n          NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n              rb.getResults().docList, flags);\n          rb.rsp.add(\"moreLikeThis\", sim);\n        }\n      } else {\n        // non distrib case\n        NamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(), rb.getResults().docList,\n            flags);\n        rb.rsp.add(\"moreLikeThis\", sim);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","a97a2a60d1ce1ac2bd6ca3f40ed674baab554095"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b8452c76b29af54eee832bf7b4ea9d46a9bf1fe3"],"98ef9d9ecf768191e0c139463409e9297f8367de":["b38d50314a7281b1ef90bfb3bb0bc91a38f0078f"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"575e66bd4b2349209027f6801184da7fc3cba13f":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a97a2a60d1ce1ac2bd6ca3f40ed674baab554095":["98ef9d9ecf768191e0c139463409e9297f8367de"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","561c2351baf6dd64061addef891359954c1a7faa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b8452c76b29af54eee832bf7b4ea9d46a9bf1fe3":["a97a2a60d1ce1ac2bd6ca3f40ed674baab554095"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","561c2351baf6dd64061addef891359954c1a7faa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"561c2351baf6dd64061addef891359954c1a7faa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b38d50314a7281b1ef90bfb3bb0bc91a38f0078f":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed","561c2351baf6dd64061addef891359954c1a7faa"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b38d50314a7281b1ef90bfb3bb0bc91a38f0078f"],"98ef9d9ecf768191e0c139463409e9297f8367de":["a97a2a60d1ce1ac2bd6ca3f40ed674baab554095"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a97a2a60d1ce1ac2bd6ca3f40ed674baab554095":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b8452c76b29af54eee832bf7b4ea9d46a9bf1fe3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["575e66bd4b2349209027f6801184da7fc3cba13f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b8452c76b29af54eee832bf7b4ea9d46a9bf1fe3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"561c2351baf6dd64061addef891359954c1a7faa":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"b38d50314a7281b1ef90bfb3bb0bc91a38f0078f":["98ef9d9ecf768191e0c139463409e9297f8367de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e66a459d38c1c4a2f97128433dab546f683a9fed","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}