{"path":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#testMultiValuedSortedSet().mjava","commits":[{"id":"8c12c43c449a172df0f2b122918f0f5fc0e9a470","date":1438415333,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#testMultiValuedSortedSet().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiValuedSortedSet() throws Exception {\n    int numValues = atLeast(10000);\n    // Every doc has 2 values:\n    long[] values = new long[2*numValues];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), 1024, 1024*1024);\n    Codec codec = TestUtil.alwaysDocValuesFormat(new RangeTreeDocValuesFormat(maxPointsInLeaf, maxPointsSortInHeap));\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int docID=0;docID<numValues;docID++) {\n      Document doc = new Document();\n      values[2*docID] = randomValue();\n      doc.add(new SortedSetDocValuesField(\"value\", longToBytes(values[2*docID])));\n      values[2*docID+1] = randomValue();\n      doc.add(new SortedSetDocValuesField(\"value\", longToBytes(values[2*docID+1])));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n    // We can't wrap with \"exotic\" readers because the NumericRangeTreeQuery must see the NumericTreeDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(100);\n    for (int iter=0;iter<iters;iter++) {\n      long lower = randomValue();\n      long upper = randomValue();\n\n      if (upper < lower) {\n        long x = lower;\n        lower = upper;\n        upper = x;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" value=\" + lower + \" TO \" + upper);\n      }\n\n      boolean includeLower = random().nextBoolean();\n      boolean includeUpper = random().nextBoolean();\n      Query query = new SortedSetRangeTreeQuery(\"value\", longToBytes(lower), includeLower, longToBytes(upper), includeUpper);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      for(int docID=0;docID<values.length/2;docID++) {\n        long docValue1 = values[2*docID];\n        long docValue2 = values[2*docID+1];\n        boolean expected = matches(lower, includeLower, upper, includeUpper, docValue1) ||\n          matches(lower, includeLower, upper, includeUpper, docValue2);\n\n        if (hits.get(docID) != expected) {\n          fail(\"docID=\" + docID + \" docValue1=\" + docValue1 + \" docValue2=\" + docValue2 + \" expected \" + expected + \" but got: \" + hits.get(docID));\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcb51fecc8dab4f1ea6aadb9cb87c27d50918b74","date":1438421983,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#testMultiValuedSortedSet().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#testMultiValuedSortedSet().mjava","sourceNew":"  public void testMultiValuedSortedSet() throws Exception {\n    int numValues = atLeast(10000);\n    // Every doc has 2 values:\n    long[] values = new long[2*numValues];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), 1024, 1024*1024);\n    Codec codec = TestUtil.alwaysDocValuesFormat(new RangeTreeDocValuesFormat(maxPointsInLeaf, maxPointsSortInHeap));\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int docID=0;docID<numValues;docID++) {\n      Document doc = new Document();\n      values[2*docID] = randomValue();\n      doc.add(new SortedSetDocValuesField(\"value\", longToBytes(values[2*docID])));\n      values[2*docID+1] = randomValue();\n      doc.add(new SortedSetDocValuesField(\"value\", longToBytes(values[2*docID+1])));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n    // We can't wrap with \"exotic\" readers because the NumericRangeTreeQuery must see the RangeTreeDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(100);\n    for (int iter=0;iter<iters;iter++) {\n      long lower = randomValue();\n      long upper = randomValue();\n\n      if (upper < lower) {\n        long x = lower;\n        lower = upper;\n        upper = x;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" value=\" + lower + \" TO \" + upper);\n      }\n\n      boolean includeLower = random().nextBoolean();\n      boolean includeUpper = random().nextBoolean();\n      Query query = new SortedSetRangeTreeQuery(\"value\", longToBytes(lower), includeLower, longToBytes(upper), includeUpper);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      for(int docID=0;docID<values.length/2;docID++) {\n        long docValue1 = values[2*docID];\n        long docValue2 = values[2*docID+1];\n        boolean expected = matches(lower, includeLower, upper, includeUpper, docValue1) ||\n          matches(lower, includeLower, upper, includeUpper, docValue2);\n\n        if (hits.get(docID) != expected) {\n          fail(\"docID=\" + docID + \" docValue1=\" + docValue1 + \" docValue2=\" + docValue2 + \" expected \" + expected + \" but got: \" + hits.get(docID));\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValuedSortedSet() throws Exception {\n    int numValues = atLeast(10000);\n    // Every doc has 2 values:\n    long[] values = new long[2*numValues];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), 1024, 1024*1024);\n    Codec codec = TestUtil.alwaysDocValuesFormat(new RangeTreeDocValuesFormat(maxPointsInLeaf, maxPointsSortInHeap));\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int docID=0;docID<numValues;docID++) {\n      Document doc = new Document();\n      values[2*docID] = randomValue();\n      doc.add(new SortedSetDocValuesField(\"value\", longToBytes(values[2*docID])));\n      values[2*docID+1] = randomValue();\n      doc.add(new SortedSetDocValuesField(\"value\", longToBytes(values[2*docID+1])));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n    // We can't wrap with \"exotic\" readers because the NumericRangeTreeQuery must see the NumericTreeDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(100);\n    for (int iter=0;iter<iters;iter++) {\n      long lower = randomValue();\n      long upper = randomValue();\n\n      if (upper < lower) {\n        long x = lower;\n        lower = upper;\n        upper = x;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" value=\" + lower + \" TO \" + upper);\n      }\n\n      boolean includeLower = random().nextBoolean();\n      boolean includeUpper = random().nextBoolean();\n      Query query = new SortedSetRangeTreeQuery(\"value\", longToBytes(lower), includeLower, longToBytes(upper), includeUpper);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      for(int docID=0;docID<values.length/2;docID++) {\n        long docValue1 = values[2*docID];\n        long docValue2 = values[2*docID+1];\n        boolean expected = matches(lower, includeLower, upper, includeUpper, docValue1) ||\n          matches(lower, includeLower, upper, includeUpper, docValue2);\n\n        if (hits.get(docID) != expected) {\n          fail(\"docID=\" + docID + \" docValue1=\" + docValue1 + \" docValue2=\" + docValue2 + \" expected \" + expected + \" but got: \" + hits.get(docID));\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89a0e70ecaf27e127004b7fbfad2e02d52ea1f8f","date":1439766922,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#testMultiValuedSortedSet().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#testMultiValuedSortedSet().mjava","sourceNew":"  public void testMultiValuedSortedSet() throws Exception {\n    int numValues = atLeast(10000);\n    // Every doc has 2 values:\n    long[] values = new long[2*numValues];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    Codec codec = TestUtil.alwaysDocValuesFormat(getDocValuesFormat());\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int docID=0;docID<numValues;docID++) {\n      Document doc = new Document();\n      values[2*docID] = randomValue();\n      doc.add(new SortedSetDocValuesField(\"value\", longToBytes(values[2*docID])));\n      values[2*docID+1] = randomValue();\n      doc.add(new SortedSetDocValuesField(\"value\", longToBytes(values[2*docID+1])));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n    // We can't wrap with \"exotic\" readers because the NumericRangeTreeQuery must see the RangeTreeDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(100);\n    for (int iter=0;iter<iters;iter++) {\n      long lower = randomValue();\n      long upper = randomValue();\n\n      if (upper < lower) {\n        long x = lower;\n        lower = upper;\n        upper = x;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" value=\" + lower + \" TO \" + upper);\n      }\n\n      boolean includeLower = random().nextBoolean();\n      boolean includeUpper = random().nextBoolean();\n      Query query = new SortedSetRangeTreeQuery(\"value\", longToBytes(lower), includeLower, longToBytes(upper), includeUpper);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      for(int docID=0;docID<values.length/2;docID++) {\n        long docValue1 = values[2*docID];\n        long docValue2 = values[2*docID+1];\n        boolean expected = matches(lower, includeLower, upper, includeUpper, docValue1) ||\n          matches(lower, includeLower, upper, includeUpper, docValue2);\n\n        if (hits.get(docID) != expected) {\n          fail(\"docID=\" + docID + \" docValue1=\" + docValue1 + \" docValue2=\" + docValue2 + \" expected \" + expected + \" but got: \" + hits.get(docID));\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValuedSortedSet() throws Exception {\n    int numValues = atLeast(10000);\n    // Every doc has 2 values:\n    long[] values = new long[2*numValues];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), 1024, 1024*1024);\n    Codec codec = TestUtil.alwaysDocValuesFormat(new RangeTreeDocValuesFormat(maxPointsInLeaf, maxPointsSortInHeap));\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int docID=0;docID<numValues;docID++) {\n      Document doc = new Document();\n      values[2*docID] = randomValue();\n      doc.add(new SortedSetDocValuesField(\"value\", longToBytes(values[2*docID])));\n      values[2*docID+1] = randomValue();\n      doc.add(new SortedSetDocValuesField(\"value\", longToBytes(values[2*docID+1])));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n    // We can't wrap with \"exotic\" readers because the NumericRangeTreeQuery must see the RangeTreeDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(100);\n    for (int iter=0;iter<iters;iter++) {\n      long lower = randomValue();\n      long upper = randomValue();\n\n      if (upper < lower) {\n        long x = lower;\n        lower = upper;\n        upper = x;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" value=\" + lower + \" TO \" + upper);\n      }\n\n      boolean includeLower = random().nextBoolean();\n      boolean includeUpper = random().nextBoolean();\n      Query query = new SortedSetRangeTreeQuery(\"value\", longToBytes(lower), includeLower, longToBytes(upper), includeUpper);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      for(int docID=0;docID<values.length/2;docID++) {\n        long docValue1 = values[2*docID];\n        long docValue2 = values[2*docID+1];\n        boolean expected = matches(lower, includeLower, upper, includeUpper, docValue1) ||\n          matches(lower, includeLower, upper, includeUpper, docValue2);\n\n        if (hits.get(docID) != expected) {\n          fail(\"docID=\" + docID + \" docValue1=\" + docValue1 + \" docValue2=\" + docValue2 + \" expected \" + expected + \" but got: \" + hits.get(docID));\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#testMultiValuedSortedSet().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#testMultiValuedSortedSet().mjava","sourceNew":"  public void testMultiValuedSortedSet() throws Exception {\n    int numValues = atLeast(10000);\n    // Every doc has 2 values:\n    long[] values = new long[2*numValues];\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    Codec codec = TestUtil.alwaysDocValuesFormat(getDocValuesFormat());\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int docID=0;docID<numValues;docID++) {\n      Document doc = new Document();\n      values[2*docID] = randomValue();\n      doc.add(new SortedSetDocValuesField(\"value\", longToBytes(values[2*docID])));\n      values[2*docID+1] = randomValue();\n      doc.add(new SortedSetDocValuesField(\"value\", longToBytes(values[2*docID+1])));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n    // We can't wrap with \"exotic\" readers because the NumericRangeTreeQuery must see the RangeTreeDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(100);\n    for (int iter=0;iter<iters;iter++) {\n      long lower = randomValue();\n      long upper = randomValue();\n\n      if (upper < lower) {\n        long x = lower;\n        lower = upper;\n        upper = x;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" value=\" + lower + \" TO \" + upper);\n      }\n\n      boolean includeLower = random().nextBoolean();\n      boolean includeUpper = random().nextBoolean();\n      Query query = new SortedSetRangeTreeQuery(\"value\", longToBytes(lower), includeLower, longToBytes(upper), includeUpper);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      for(int docID=0;docID<values.length/2;docID++) {\n        long docValue1 = values[2*docID];\n        long docValue2 = values[2*docID+1];\n        boolean expected = matches(lower, includeLower, upper, includeUpper, docValue1) ||\n          matches(lower, includeLower, upper, includeUpper, docValue2);\n\n        if (hits.get(docID) != expected) {\n          fail(\"docID=\" + docID + \" docValue1=\" + docValue1 + \" docValue2=\" + docValue2 + \" expected \" + expected + \" but got: \" + hits.get(docID));\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValuedSortedSet() throws Exception {\n    int numValues = atLeast(10000);\n    // Every doc has 2 values:\n    long[] values = new long[2*numValues];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    Codec codec = TestUtil.alwaysDocValuesFormat(getDocValuesFormat());\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int docID=0;docID<numValues;docID++) {\n      Document doc = new Document();\n      values[2*docID] = randomValue();\n      doc.add(new SortedSetDocValuesField(\"value\", longToBytes(values[2*docID])));\n      values[2*docID+1] = randomValue();\n      doc.add(new SortedSetDocValuesField(\"value\", longToBytes(values[2*docID+1])));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n    // We can't wrap with \"exotic\" readers because the NumericRangeTreeQuery must see the RangeTreeDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(100);\n    for (int iter=0;iter<iters;iter++) {\n      long lower = randomValue();\n      long upper = randomValue();\n\n      if (upper < lower) {\n        long x = lower;\n        lower = upper;\n        upper = x;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" value=\" + lower + \" TO \" + upper);\n      }\n\n      boolean includeLower = random().nextBoolean();\n      boolean includeUpper = random().nextBoolean();\n      Query query = new SortedSetRangeTreeQuery(\"value\", longToBytes(lower), includeLower, longToBytes(upper), includeUpper);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      for(int docID=0;docID<values.length/2;docID++) {\n        long docValue1 = values[2*docID];\n        long docValue2 = values[2*docID+1];\n        boolean expected = matches(lower, includeLower, upper, includeUpper, docValue1) ||\n          matches(lower, includeLower, upper, includeUpper, docValue2);\n\n        if (hits.get(docID) != expected) {\n          fail(\"docID=\" + docID + \" docValue1=\" + docValue1 + \" docValue2=\" + docValue2 + \" expected \" + expected + \" but got: \" + hits.get(docID));\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#testMultiValuedSortedSet().mjava","sourceNew":null,"sourceOld":"  public void testMultiValuedSortedSet() throws Exception {\n    int numValues = atLeast(10000);\n    // Every doc has 2 values:\n    long[] values = new long[2*numValues];\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    Codec codec = TestUtil.alwaysDocValuesFormat(getDocValuesFormat());\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int docID=0;docID<numValues;docID++) {\n      Document doc = new Document();\n      values[2*docID] = randomValue();\n      doc.add(new SortedSetDocValuesField(\"value\", longToBytes(values[2*docID])));\n      values[2*docID+1] = randomValue();\n      doc.add(new SortedSetDocValuesField(\"value\", longToBytes(values[2*docID+1])));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n    // We can't wrap with \"exotic\" readers because the NumericRangeTreeQuery must see the RangeTreeDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(100);\n    for (int iter=0;iter<iters;iter++) {\n      long lower = randomValue();\n      long upper = randomValue();\n\n      if (upper < lower) {\n        long x = lower;\n        lower = upper;\n        upper = x;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" value=\" + lower + \" TO \" + upper);\n      }\n\n      boolean includeLower = random().nextBoolean();\n      boolean includeUpper = random().nextBoolean();\n      Query query = new SortedSetRangeTreeQuery(\"value\", longToBytes(lower), includeLower, longToBytes(upper), includeUpper);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      for(int docID=0;docID<values.length/2;docID++) {\n        long docValue1 = values[2*docID];\n        long docValue2 = values[2*docID+1];\n        boolean expected = matches(lower, includeLower, upper, includeUpper, docValue1) ||\n          matches(lower, includeLower, upper, includeUpper, docValue2);\n\n        if (hits.get(docID) != expected) {\n          fail(\"docID=\" + docID + \" docValue1=\" + docValue1 + \" docValue2=\" + docValue2 + \" expected \" + expected + \" but got: \" + hits.get(docID));\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bcb51fecc8dab4f1ea6aadb9cb87c27d50918b74":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["89a0e70ecaf27e127004b7fbfad2e02d52ea1f8f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"89a0e70ecaf27e127004b7fbfad2e02d52ea1f8f":["bcb51fecc8dab4f1ea6aadb9cb87c27d50918b74"]},"commit2Childs":{"bcb51fecc8dab4f1ea6aadb9cb87c27d50918b74":["89a0e70ecaf27e127004b7fbfad2e02d52ea1f8f"],"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["bcb51fecc8dab4f1ea6aadb9cb87c27d50918b74"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"89a0e70ecaf27e127004b7fbfad2e02d52ea1f8f":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}