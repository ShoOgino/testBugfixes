{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#getCollectionAliasProperties(String).mjava","commits":[{"id":"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767","date":1520865397,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#getCollectionAliasProperties(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#getCollectionAliasMetadata(String).mjava","sourceNew":"  /**\n   * Returns an unmodifiable Map of properties for a given alias. If an alias by the given name\n   * exists, this method will never return null.\n   *\n   * @param alias the name of an alias also found as a key in {@link #getCollectionAliasListMap()}\n   * @return The properties for the alias (possibly empty) or null if the alias does not exist.\n   */\n  public Map<String,String> getCollectionAliasProperties(String alias) {\n    // Note: map is already unmodifiable; it can be shared safely\n    return collectionAliasProperties.getOrDefault(alias, Collections.emptyMap());\n  }\n\n","sourceOld":"  /**\n   * Returns an unmodifiable Map of metadata for a given alias. If an alias by the given name\n   * exists, this method will never return null.\n   *\n   * @param alias the name of an alias also found as a key in {@link #getCollectionAliasListMap()}\n   * @return The metadata for the alias (possibly empty) or null if the alias does not exist.\n   */\n  public Map<String,String> getCollectionAliasMetadata(String alias) {\n    // Note: map is already unmodifiable; it can be shared safely\n    return collectionAliasMetadata.getOrDefault(alias, Collections.emptyMap());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27f8671abed52d7fc3010c636b6fd43ae36804ac","date":1556533169,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#getCollectionAliasProperties(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#getCollectionAliasProperties(String).mjava","sourceNew":"  /**\n   * Returns an unmodifiable Map of properties for a given alias. This method will never return null.\n   *\n   * @param alias the name of an alias also found as a key in {@link #getCollectionAliasListMap()}\n   * @return The properties for the alias (possibly empty).\n   */\n  public Map<String,String> getCollectionAliasProperties(String alias) {\n    // Note: map is already unmodifiable; it can be shared safely\n    return collectionAliasProperties.getOrDefault(alias, Collections.emptyMap());\n  }\n\n","sourceOld":"  /**\n   * Returns an unmodifiable Map of properties for a given alias. If an alias by the given name\n   * exists, this method will never return null.\n   *\n   * @param alias the name of an alias also found as a key in {@link #getCollectionAliasListMap()}\n   * @return The properties for the alias (possibly empty) or null if the alias does not exist.\n   */\n  public Map<String,String> getCollectionAliasProperties(String alias) {\n    // Note: map is already unmodifiable; it can be shared safely\n    return collectionAliasProperties.getOrDefault(alias, Collections.emptyMap());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"27f8671abed52d7fc3010c636b6fd43ae36804ac":["6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27f8671abed52d7fc3010c636b6fd43ae36804ac"]},"commit2Childs":{"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767":["27f8671abed52d7fc3010c636b6fd43ae36804ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767"],"27f8671abed52d7fc3010c636b6fd43ae36804ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}