{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicNRT().mjava","commits":[{"id":"a371aa649cc243e82cb8677ca960a1e0232ecedf","date":1393605574,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicNRT().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicNRT() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n    };\n\n    File tempDir = TestUtil.getTempDir(\"AnalyzingInfixSuggesterTest\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, tempDir, a, a, 3) {\n        @Override\n        protected Directory getDirectory(File path) {\n          return newDirectory();\n        }\n      };\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    // Add a new suggestion:\n    suggester.add(new BytesRef(\"a penny saved is a penny earned\"), 10, new BytesRef(\"foobaz\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    // Change the weight:\n    suggester.update(new BytesRef(\"lend me your ear\"), 12, new BytesRef(\"foobox\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(12, results.get(0).value);\n    assertEquals(new BytesRef(\"foobox\"), results.get(0).payload);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(1).key);\n    assertEquals(10, results.get(1).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(1).payload);\n    suggester.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ec083aa3f3ecd55f91c47009d49e45553f99bd77","4637747f71df783fc2014ef1f1e0418466e3bed6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1e7da8a91a92330e8f04b171b83e655a4a25c31","date":1394125906,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicNRT().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicNRT().mjava","sourceNew":"  public void testBasicNRT() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newDirectory(), a, a, 3);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    // Add a new suggestion:\n    suggester.add(new BytesRef(\"a penny saved is a penny earned\"), 10, new BytesRef(\"foobaz\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    // Change the weight:\n    suggester.update(new BytesRef(\"lend me your ear\"), 12, new BytesRef(\"foobox\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(12, results.get(0).value);\n    assertEquals(new BytesRef(\"foobox\"), results.get(0).payload);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(1).key);\n    assertEquals(10, results.get(1).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(1).payload);\n    suggester.close();\n  }\n\n","sourceOld":"  public void testBasicNRT() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n    };\n\n    File tempDir = TestUtil.getTempDir(\"AnalyzingInfixSuggesterTest\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, tempDir, a, a, 3) {\n        @Override\n        protected Directory getDirectory(File path) {\n          return newDirectory();\n        }\n      };\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    // Add a new suggestion:\n    suggester.add(new BytesRef(\"a penny saved is a penny earned\"), 10, new BytesRef(\"foobaz\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    // Change the weight:\n    suggester.update(new BytesRef(\"lend me your ear\"), 12, new BytesRef(\"foobox\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(12, results.get(0).value);\n    assertEquals(new BytesRef(\"foobox\"), results.get(0).payload);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(1).key);\n    assertEquals(10, results.get(1).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(1).payload);\n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4637747f71df783fc2014ef1f1e0418466e3bed6","date":1394196311,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicNRT().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicNRT().mjava","sourceNew":"  public void testBasicNRT() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newDirectory(), a, a, 3);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    // Add a new suggestion:\n    suggester.add(new BytesRef(\"a penny saved is a penny earned\"), 10, new BytesRef(\"foobaz\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    // Change the weight:\n    suggester.update(new BytesRef(\"lend me your ear\"), 12, new BytesRef(\"foobox\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(12, results.get(0).value);\n    assertEquals(new BytesRef(\"foobox\"), results.get(0).payload);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(1).key);\n    assertEquals(10, results.get(1).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(1).payload);\n    suggester.close();\n  }\n\n","sourceOld":"  public void testBasicNRT() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n    };\n\n    File tempDir = TestUtil.getTempDir(\"AnalyzingInfixSuggesterTest\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, tempDir, a, a, 3) {\n        @Override\n        protected Directory getDirectory(File path) {\n          return newDirectory();\n        }\n      };\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    // Add a new suggestion:\n    suggester.add(new BytesRef(\"a penny saved is a penny earned\"), 10, new BytesRef(\"foobaz\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    // Change the weight:\n    suggester.update(new BytesRef(\"lend me your ear\"), 12, new BytesRef(\"foobox\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(12, results.get(0).value);\n    assertEquals(new BytesRef(\"foobox\"), results.get(0).payload);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(1).key);\n    assertEquals(10, results.get(1).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(1).payload);\n    suggester.close();\n  }\n\n","bugFix":["a371aa649cc243e82cb8677ca960a1e0232ecedf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicNRT().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicNRT().mjava","sourceNew":"  public void testBasicNRT() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newDirectory(), a, a, 3);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    // Add a new suggestion:\n    suggester.add(new BytesRef(\"a penny saved is a penny earned\"), 10, new BytesRef(\"foobaz\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    // Change the weight:\n    suggester.update(new BytesRef(\"lend me your ear\"), 12, new BytesRef(\"foobox\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(12, results.get(0).value);\n    assertEquals(new BytesRef(\"foobox\"), results.get(0).payload);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(1).key);\n    assertEquals(10, results.get(1).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(1).payload);\n    suggester.close();\n  }\n\n","sourceOld":"  public void testBasicNRT() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n    };\n\n    File tempDir = TestUtil.getTempDir(\"AnalyzingInfixSuggesterTest\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, tempDir, a, a, 3) {\n        @Override\n        protected Directory getDirectory(File path) {\n          return newDirectory();\n        }\n      };\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    // Add a new suggestion:\n    suggester.add(new BytesRef(\"a penny saved is a penny earned\"), 10, new BytesRef(\"foobaz\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    // Change the weight:\n    suggester.update(new BytesRef(\"lend me your ear\"), 12, new BytesRef(\"foobox\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(12, results.get(0).value);\n    assertEquals(new BytesRef(\"foobox\"), results.get(0).payload);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(1).key);\n    assertEquals(10, results.get(1).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(1).payload);\n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","date":1395588343,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicNRT().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicNRT().mjava","sourceNew":"  public void testBasicNRT() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newDirectory(), a, a, 3);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    // Add a new suggestion:\n    suggester.add(new BytesRef(\"a penny saved is a penny earned\"), null, 10, new BytesRef(\"foobaz\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    // Change the weight:\n    suggester.update(new BytesRef(\"lend me your ear\"), null, 12, new BytesRef(\"foobox\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(12, results.get(0).value);\n    assertEquals(new BytesRef(\"foobox\"), results.get(0).payload);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(1).key);\n    assertEquals(10, results.get(1).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(1).payload);\n    suggester.close();\n  }\n\n","sourceOld":"  public void testBasicNRT() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newDirectory(), a, a, 3);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    // Add a new suggestion:\n    suggester.add(new BytesRef(\"a penny saved is a penny earned\"), 10, new BytesRef(\"foobaz\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    // Change the weight:\n    suggester.update(new BytesRef(\"lend me your ear\"), 12, new BytesRef(\"foobox\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(12, results.get(0).value);\n    assertEquals(new BytesRef(\"foobox\"), results.get(0).payload);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(1).key);\n    assertEquals(10, results.get(1).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(1).payload);\n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6549d5ea6b7b25525309b981de3ec92b4dff99d1","date":1408666035,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicNRT().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicNRT().mjava","sourceNew":"  public void testBasicNRT() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    // Add a new suggestion:\n    suggester.add(new BytesRef(\"a penny saved is a penny earned\"), null, 10, new BytesRef(\"foobaz\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    // Change the weight:\n    suggester.update(new BytesRef(\"lend me your ear\"), null, 12, new BytesRef(\"foobox\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(12, results.get(0).value);\n    assertEquals(new BytesRef(\"foobox\"), results.get(0).payload);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(1).key);\n    assertEquals(10, results.get(1).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(1).payload);\n    suggester.close();\n  }\n\n","sourceOld":"  public void testBasicNRT() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newDirectory(), a, a, 3);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    // Add a new suggestion:\n    suggester.add(new BytesRef(\"a penny saved is a penny earned\"), null, 10, new BytesRef(\"foobaz\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    // Change the weight:\n    suggester.update(new BytesRef(\"lend me your ear\"), null, 12, new BytesRef(\"foobox\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(12, results.get(0).value);\n    assertEquals(new BytesRef(\"foobox\"), results.get(0).payload);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(1).key);\n    assertEquals(10, results.get(1).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(1).payload);\n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19e497fe4da591a79332da97681b8017d9c61165","date":1409030374,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicNRT().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicNRT().mjava","sourceNew":"  public void testBasicNRT() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    // Add a new suggestion:\n    suggester.add(new BytesRef(\"a penny saved is a penny earned\"), null, 10, new BytesRef(\"foobaz\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    // Change the weight:\n    suggester.update(new BytesRef(\"lend me your ear\"), null, 12, new BytesRef(\"foobox\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(12, results.get(0).value);\n    assertEquals(new BytesRef(\"foobox\"), results.get(0).payload);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(1).key);\n    assertEquals(10, results.get(1).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(1).payload);\n    suggester.close();\n  }\n\n","sourceOld":"  public void testBasicNRT() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    // Add a new suggestion:\n    suggester.add(new BytesRef(\"a penny saved is a penny earned\"), null, 10, new BytesRef(\"foobaz\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    // Change the weight:\n    suggester.update(new BytesRef(\"lend me your ear\"), null, 12, new BytesRef(\"foobox\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(12, results.get(0).value);\n    assertEquals(new BytesRef(\"foobox\"), results.get(0).payload);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(1).key);\n    assertEquals(10, results.get(1).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(1).payload);\n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec083aa3f3ecd55f91c47009d49e45553f99bd77","date":1416002645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicNRT().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicNRT().mjava","sourceNew":"  public void testBasicNRT() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    // Add a new suggestion:\n    suggester.add(new BytesRef(\"a penny saved is a penny earned\"), null, 10, new BytesRef(\"foobaz\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    // Change the weight:\n    suggester.update(new BytesRef(\"lend me your ear\"), null, 12, new BytesRef(\"foobox\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(12, results.get(0).value);\n    assertEquals(new BytesRef(\"foobox\"), results.get(0).payload);\n    assertEquals(\"a penny saved is a penny earned\", results.get(1).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(1).highlightKey);\n    assertEquals(10, results.get(1).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(1).payload);\n    suggester.close();\n  }\n\n","sourceOld":"  public void testBasicNRT() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    // Add a new suggestion:\n    suggester.add(new BytesRef(\"a penny saved is a penny earned\"), null, 10, new BytesRef(\"foobaz\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    // Change the weight:\n    suggester.update(new BytesRef(\"lend me your ear\"), null, 12, new BytesRef(\"foobox\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(12, results.get(0).value);\n    assertEquals(new BytesRef(\"foobox\"), results.get(0).payload);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(1).key);\n    assertEquals(10, results.get(1).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(1).payload);\n    suggester.close();\n  }\n\n","bugFix":["a371aa649cc243e82cb8677ca960a1e0232ecedf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicNRT().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicNRT().mjava","sourceNew":"  public void testBasicNRT() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    // Add a new suggestion:\n    suggester.add(new BytesRef(\"a penny saved is a penny earned\"), null, 10, new BytesRef(\"foobaz\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    // Change the weight:\n    suggester.update(new BytesRef(\"lend me your ear\"), null, 12, new BytesRef(\"foobox\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(12, results.get(0).value);\n    assertEquals(new BytesRef(\"foobox\"), results.get(0).payload);\n    assertEquals(\"a penny saved is a penny earned\", results.get(1).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(1).highlightKey);\n    assertEquals(10, results.get(1).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(1).payload);\n    suggester.close();\n    a.close();\n  }\n\n","sourceOld":"  public void testBasicNRT() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    // Add a new suggestion:\n    suggester.add(new BytesRef(\"a penny saved is a penny earned\"), null, 10, new BytesRef(\"foobaz\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    // Change the weight:\n    suggester.update(new BytesRef(\"lend me your ear\"), null, 12, new BytesRef(\"foobox\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(12, results.get(0).value);\n    assertEquals(new BytesRef(\"foobox\"), results.get(0).payload);\n    assertEquals(\"a penny saved is a penny earned\", results.get(1).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(1).highlightKey);\n    assertEquals(10, results.get(1).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(1).payload);\n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicNRT().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasicNRT().mjava","sourceNew":"  public void testBasicNRT() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    // Add a new suggestion:\n    suggester.add(new BytesRef(\"a penny saved is a penny earned\"), null, 10, new BytesRef(\"foobaz\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    // Change the weight:\n    suggester.update(new BytesRef(\"lend me your ear\"), null, 12, new BytesRef(\"foobox\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(12, results.get(0).value);\n    assertEquals(new BytesRef(\"foobox\"), results.get(0).payload);\n    assertEquals(\"a penny saved is a penny earned\", results.get(1).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(1).highlightKey);\n    assertEquals(10, results.get(1).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(1).payload);\n    suggester.close();\n    a.close();\n  }\n\n","sourceOld":"  public void testBasicNRT() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    // Add a new suggestion:\n    suggester.add(new BytesRef(\"a penny saved is a penny earned\"), null, 10, new BytesRef(\"foobaz\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    // Change the weight:\n    suggester.update(new BytesRef(\"lend me your ear\"), null, 12, new BytesRef(\"foobox\"));\n\n    // Must refresh to see any newly added suggestions:\n    suggester.refresh();\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(12, results.get(0).value);\n    assertEquals(new BytesRef(\"foobox\"), results.get(0).payload);\n    assertEquals(\"a penny saved is a penny earned\", results.get(1).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(1).highlightKey);\n    assertEquals(10, results.get(1).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(1).payload);\n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ec083aa3f3ecd55f91c47009d49e45553f99bd77","a56958d7f71a28824f20031ffbb2e13502a0274e"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a371aa649cc243e82cb8677ca960a1e0232ecedf","4637747f71df783fc2014ef1f1e0418466e3bed6"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"6549d5ea6b7b25525309b981de3ec92b4dff99d1":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec083aa3f3ecd55f91c47009d49e45553f99bd77":["19e497fe4da591a79332da97681b8017d9c61165"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["ec083aa3f3ecd55f91c47009d49e45553f99bd77"],"a371aa649cc243e82cb8677ca960a1e0232ecedf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["a371aa649cc243e82cb8677ca960a1e0232ecedf","f1e7da8a91a92330e8f04b171b83e655a4a25c31"],"f1e7da8a91a92330e8f04b171b83e655a4a25c31":["a371aa649cc243e82cb8677ca960a1e0232ecedf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"19e497fe4da591a79332da97681b8017d9c61165":["6549d5ea6b7b25525309b981de3ec92b4dff99d1"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["6549d5ea6b7b25525309b981de3ec92b4dff99d1"],"6549d5ea6b7b25525309b981de3ec92b4dff99d1":["19e497fe4da591a79332da97681b8017d9c61165"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a371aa649cc243e82cb8677ca960a1e0232ecedf"],"ec083aa3f3ecd55f91c47009d49e45553f99bd77":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a371aa649cc243e82cb8677ca960a1e0232ecedf":["96ea64d994d340044e0d57aeb6a5871539d10ca5","4637747f71df783fc2014ef1f1e0418466e3bed6","f1e7da8a91a92330e8f04b171b83e655a4a25c31"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["96ea64d994d340044e0d57aeb6a5871539d10ca5","58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"f1e7da8a91a92330e8f04b171b83e655a4a25c31":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"19e497fe4da591a79332da97681b8017d9c61165":["ec083aa3f3ecd55f91c47009d49e45553f99bd77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}