{"path":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.StdNode#hashCode().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.StdNode#hashCode().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int hashCode() {\n      final int prime = 31;\n      int result = 1;\n      result = prime * result + ((baseUrl == null) ? 0 : baseUrl.hashCode());\n      result = prime * result + ((coreName == null) ? 0 : coreName.hashCode());\n      result = prime * result + ((url == null) ? 0 : url.hashCode());\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.StdNode#hashCode().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int hashCode() {\n      final int prime = 31;\n      int result = 1;\n      result = prime * result + ((baseUrl == null) ? 0 : baseUrl.hashCode());\n      result = prime * result + ((coreName == null) ? 0 : coreName.hashCode());\n      result = prime * result + ((url == null) ? 0 : url.hashCode());\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.StdNode#hashCode().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int hashCode() {\n      final int prime = 31;\n      int result = 1;\n      result = prime * result + ((baseUrl == null) ? 0 : baseUrl.hashCode());\n      result = prime * result + ((coreName == null) ? 0 : coreName.hashCode());\n      result = prime * result + ((url == null) ? 0 : url.hashCode());\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8400054c72c65ef74e49c2d99ed7e537db8d0c2a","date":1357104191,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.StdNode#hashCode().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.StdNode#hashCode().mjava","sourceNew":"    @Override\n    public int hashCode() {\n      final int prime = 31;\n      int result = 1;\n      String baseUrl = nodeProps.getBaseUrl();\n      String coreName = nodeProps.getCoreName();\n      String url = nodeProps.getCoreUrl();\n      result = prime * result + ((baseUrl == null) ? 0 : baseUrl.hashCode());\n      result = prime * result + ((coreName == null) ? 0 : coreName.hashCode());\n      result = prime * result + ((url == null) ? 0 : url.hashCode());\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public int hashCode() {\n      final int prime = 31;\n      int result = 1;\n      result = prime * result + ((baseUrl == null) ? 0 : baseUrl.hashCode());\n      result = prime * result + ((coreName == null) ? 0 : coreName.hashCode());\n      result = prime * result + ((url == null) ? 0 : url.hashCode());\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.StdNode#hashCode().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.StdNode#hashCode().mjava","sourceNew":"    @Override\n    public int hashCode() {\n      final int prime = 31;\n      int result = 1;\n      String baseUrl = nodeProps.getBaseUrl();\n      String coreName = nodeProps.getCoreName();\n      String url = nodeProps.getCoreUrl();\n      result = prime * result + ((baseUrl == null) ? 0 : baseUrl.hashCode());\n      result = prime * result + ((coreName == null) ? 0 : coreName.hashCode());\n      result = prime * result + ((url == null) ? 0 : url.hashCode());\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public int hashCode() {\n      final int prime = 31;\n      int result = 1;\n      result = prime * result + ((baseUrl == null) ? 0 : baseUrl.hashCode());\n      result = prime * result + ((coreName == null) ? 0 : coreName.hashCode());\n      result = prime * result + ((url == null) ? 0 : url.hashCode());\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3","date":1533596209,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.StdNode#hashCode().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.StdNode#hashCode().mjava","sourceNew":"    @Override\n    public int hashCode() {\n      final int prime = 31;\n      int result = 1;\n      String baseUrl = nodeProps.getBaseUrl();\n      String coreName = nodeProps.getCoreName();\n      String url = nodeProps.getCoreUrl();\n      result = prime * result + ((baseUrl == null) ? 0 : baseUrl.hashCode());\n      result = prime * result + ((coreName == null) ? 0 : coreName.hashCode());\n      result = prime * result + ((url == null) ? 0 : url.hashCode());\n      result = prime * result + Boolean.hashCode(retry);\n      result = prime * result + Integer.hashCode(maxRetries);\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public int hashCode() {\n      final int prime = 31;\n      int result = 1;\n      String baseUrl = nodeProps.getBaseUrl();\n      String coreName = nodeProps.getCoreName();\n      String url = nodeProps.getCoreUrl();\n      result = prime * result + ((baseUrl == null) ? 0 : baseUrl.hashCode());\n      result = prime * result + ((coreName == null) ? 0 : coreName.hashCode());\n      result = prime * result + ((url == null) ? 0 : url.hashCode());\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","8400054c72c65ef74e49c2d99ed7e537db8d0c2a"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8400054c72c65ef74e49c2d99ed7e537db8d0c2a":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["8400054c72c65ef74e49c2d99ed7e537db8d0c2a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"8400054c72c65ef74e49c2d99ed7e537db8d0c2a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0d22ac6a4146774c1bc8400160fc0b6150294e92","8400054c72c65ef74e49c2d99ed7e537db8d0c2a","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}