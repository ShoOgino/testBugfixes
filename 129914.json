{"path":"src/test/org/apache/lucene/search/TestRangeQuery#testEqualsHashcode().mjava","commits":[{"id":"f81be51430d74c492f81c1491f9eb2806f8e4d9f","date":1113309296,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRangeQuery#testEqualsHashcode().mjava","pathOld":"/dev/null","sourceNew":"  public void testEqualsHashcode() {\n    Query query = new RangeQuery(new Term(\"content\", \"A\"),\n                                 new Term(\"content\", \"C\"),\n                                 true);\n    query.setBoost(1.0f);\n    Query other = new RangeQuery(new Term(\"content\", \"A\"),\n                                 new Term(\"content\", \"C\"),\n                                 true);\n    other.setBoost(1.0f);\n\n    assertEquals(\"query equals itself is true\", query, query);\n    assertEquals(\"equivalent queries are equal\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    other.setBoost(2.0f);\n    assertFalse(\"Different boost queries are not equal\", query.equals(other));\n\n    other = new RangeQuery(new Term(\"notcontent\", \"A\"), new Term(\"notcontent\", \"C\"), true);\n    assertFalse(\"Different fields are not equal\", query.equals(other));\n\n    other = new RangeQuery(new Term(\"content\", \"X\"), new Term(\"content\", \"C\"), true);\n    assertFalse(\"Different lower terms are not equal\", query.equals(other));\n\n    other = new RangeQuery(new Term(\"content\", \"A\"), new Term(\"content\", \"Z\"), true);\n    assertFalse(\"Different upper terms are not equal\", query.equals(other));\n\n    query = new RangeQuery(null, new Term(\"content\", \"C\"), true);\n    other = new RangeQuery(null, new Term(\"content\", \"C\"), true);\n    assertEquals(\"equivalent queries with null lowerterms are equal()\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    query = new RangeQuery(new Term(\"content\", \"C\"), null, true);\n    other = new RangeQuery(new Term(\"content\", \"C\"), null, true);\n    assertEquals(\"equivalent queries with null upperterms are equal()\", query, other);\n    assertEquals(\"hashcode returns same value\", query.hashCode(), other.hashCode());\n\n    query = new RangeQuery(null, new Term(\"content\", \"C\"), true);\n    other = new RangeQuery(new Term(\"content\", \"C\"), null, true);\n    assertFalse(\"queries with different upper and lower terms are not equal\", query.equals(other));\n\n    query = new RangeQuery(new Term(\"content\", \"A\"), new Term(\"content\", \"C\"), false);\n    other = new RangeQuery(new Term(\"content\", \"A\"), new Term(\"content\", \"C\"), true);\n    assertFalse(\"queries with different inclusive are not equal\", query.equals(other));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRangeQuery#testEqualsHashcode().mjava","pathOld":"src/test/org/apache/lucene/search/TestRangeQuery#testEqualsHashcode().mjava","sourceNew":"  public void testEqualsHashcode() {\n    Query query = new RangeQuery(\"content\", \"A\", \"C\", true, true);\n    \n    query.setBoost(1.0f);\n    Query other = new RangeQuery(\"content\", \"A\", \"C\", true, true);\n    other.setBoost(1.0f);\n\n    assertEquals(\"query equals itself is true\", query, query);\n    assertEquals(\"equivalent queries are equal\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    other.setBoost(2.0f);\n    assertFalse(\"Different boost queries are not equal\", query.equals(other));\n\n    other = new RangeQuery(\"notcontent\", \"A\", \"C\", true, true);\n    assertFalse(\"Different fields are not equal\", query.equals(other));\n\n    other = new RangeQuery(\"content\", \"X\", \"C\", true, true);\n    assertFalse(\"Different lower terms are not equal\", query.equals(other));\n\n    other = new RangeQuery(\"content\", \"A\", \"Z\", true, true);\n    assertFalse(\"Different upper terms are not equal\", query.equals(other));\n\n    query = new RangeQuery(\"content\", null, \"C\", true, true);\n    other = new RangeQuery(\"content\", null, \"C\", true, true);\n    assertEquals(\"equivalent queries with null lowerterms are equal()\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    query = new RangeQuery(\"content\", \"C\", null, true, true);\n    other = new RangeQuery(\"content\", \"C\", null, true, true);\n    assertEquals(\"equivalent queries with null upperterms are equal()\", query, other);\n    assertEquals(\"hashcode returns same value\", query.hashCode(), other.hashCode());\n\n    query = new RangeQuery(\"content\", null, \"C\", true, true);\n    other = new RangeQuery(\"content\", \"C\", null, true, true);\n    assertFalse(\"queries with different upper and lower terms are not equal\", query.equals(other));\n\n    query = new RangeQuery(\"content\", \"A\", \"C\", false, false);\n    other = new RangeQuery(\"content\", \"A\", \"C\", true, true);\n    assertFalse(\"queries with different inclusive are not equal\", query.equals(other));\n  }\n\n","sourceOld":"  public void testEqualsHashcode() {\n    Query query = new RangeQuery(new Term(\"content\", \"A\"),\n                                 new Term(\"content\", \"C\"),\n                                 true);\n    query.setBoost(1.0f);\n    Query other = new RangeQuery(new Term(\"content\", \"A\"),\n                                 new Term(\"content\", \"C\"),\n                                 true);\n    other.setBoost(1.0f);\n\n    assertEquals(\"query equals itself is true\", query, query);\n    assertEquals(\"equivalent queries are equal\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    other.setBoost(2.0f);\n    assertFalse(\"Different boost queries are not equal\", query.equals(other));\n\n    other = new RangeQuery(new Term(\"notcontent\", \"A\"), new Term(\"notcontent\", \"C\"), true);\n    assertFalse(\"Different fields are not equal\", query.equals(other));\n\n    other = new RangeQuery(new Term(\"content\", \"X\"), new Term(\"content\", \"C\"), true);\n    assertFalse(\"Different lower terms are not equal\", query.equals(other));\n\n    other = new RangeQuery(new Term(\"content\", \"A\"), new Term(\"content\", \"Z\"), true);\n    assertFalse(\"Different upper terms are not equal\", query.equals(other));\n\n    query = new RangeQuery(null, new Term(\"content\", \"C\"), true);\n    other = new RangeQuery(null, new Term(\"content\", \"C\"), true);\n    assertEquals(\"equivalent queries with null lowerterms are equal()\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    query = new RangeQuery(new Term(\"content\", \"C\"), null, true);\n    other = new RangeQuery(new Term(\"content\", \"C\"), null, true);\n    assertEquals(\"equivalent queries with null upperterms are equal()\", query, other);\n    assertEquals(\"hashcode returns same value\", query.hashCode(), other.hashCode());\n\n    query = new RangeQuery(null, new Term(\"content\", \"C\"), true);\n    other = new RangeQuery(new Term(\"content\", \"C\"), null, true);\n    assertFalse(\"queries with different upper and lower terms are not equal\", query.equals(other));\n\n    query = new RangeQuery(new Term(\"content\", \"A\"), new Term(\"content\", \"C\"), false);\n    other = new RangeQuery(new Term(\"content\", \"A\"), new Term(\"content\", \"C\"), true);\n    assertFalse(\"queries with different inclusive are not equal\", query.equals(other));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a42d54cb6fd51d6c22cda75f08efaee58d31ac3","date":1239324031,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRangeQuery#testEqualsHashcode().mjava","pathOld":"src/test/org/apache/lucene/search/TestRangeQuery#testEqualsHashcode().mjava","sourceNew":"  public void testEqualsHashcode() {\n    Query query = new RangeQuery(\"content\", \"A\", \"C\", true, true);\n    \n    query.setBoost(1.0f);\n    Query other = new RangeQuery(\"content\", \"A\", \"C\", true, true);\n    other.setBoost(1.0f);\n\n    assertEquals(\"query equals itself is true\", query, query);\n    assertEquals(\"equivalent queries are equal\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    other.setBoost(2.0f);\n    assertFalse(\"Different boost queries are not equal\", query.equals(other));\n\n    other = new RangeQuery(\"notcontent\", \"A\", \"C\", true, true);\n    assertFalse(\"Different fields are not equal\", query.equals(other));\n\n    other = new RangeQuery(\"content\", \"X\", \"C\", true, true);\n    assertFalse(\"Different lower terms are not equal\", query.equals(other));\n\n    other = new RangeQuery(\"content\", \"A\", \"Z\", true, true);\n    assertFalse(\"Different upper terms are not equal\", query.equals(other));\n\n    query = new RangeQuery(\"content\", null, \"C\", true, true);\n    other = new RangeQuery(\"content\", null, \"C\", true, true);\n    assertEquals(\"equivalent queries with null lowerterms are equal()\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    query = new RangeQuery(\"content\", \"C\", null, true, true);\n    other = new RangeQuery(\"content\", \"C\", null, true, true);\n    assertEquals(\"equivalent queries with null upperterms are equal()\", query, other);\n    assertEquals(\"hashcode returns same value\", query.hashCode(), other.hashCode());\n\n    query = new RangeQuery(\"content\", null, \"C\", true, true);\n    other = new RangeQuery(\"content\", \"C\", null, true, true);\n    assertFalse(\"queries with different upper and lower terms are not equal\", query.equals(other));\n\n    query = new RangeQuery(\"content\", \"A\", \"C\", false, false);\n    other = new RangeQuery(\"content\", \"A\", \"C\", true, true);\n    assertFalse(\"queries with different inclusive are not equal\", query.equals(other));\n    \n    query = new RangeQuery(\"content\", \"A\", \"C\", false, false);\n    other = new RangeQuery(\"content\", \"A\", \"C\", false, false, Collator.getInstance());\n    assertFalse(\"a query with a collator is not equal to one without\", query.equals(other));\n  }\n\n","sourceOld":"  public void testEqualsHashcode() {\n    Query query = new RangeQuery(\"content\", \"A\", \"C\", true, true);\n    \n    query.setBoost(1.0f);\n    Query other = new RangeQuery(\"content\", \"A\", \"C\", true, true);\n    other.setBoost(1.0f);\n\n    assertEquals(\"query equals itself is true\", query, query);\n    assertEquals(\"equivalent queries are equal\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    other.setBoost(2.0f);\n    assertFalse(\"Different boost queries are not equal\", query.equals(other));\n\n    other = new RangeQuery(\"notcontent\", \"A\", \"C\", true, true);\n    assertFalse(\"Different fields are not equal\", query.equals(other));\n\n    other = new RangeQuery(\"content\", \"X\", \"C\", true, true);\n    assertFalse(\"Different lower terms are not equal\", query.equals(other));\n\n    other = new RangeQuery(\"content\", \"A\", \"Z\", true, true);\n    assertFalse(\"Different upper terms are not equal\", query.equals(other));\n\n    query = new RangeQuery(\"content\", null, \"C\", true, true);\n    other = new RangeQuery(\"content\", null, \"C\", true, true);\n    assertEquals(\"equivalent queries with null lowerterms are equal()\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    query = new RangeQuery(\"content\", \"C\", null, true, true);\n    other = new RangeQuery(\"content\", \"C\", null, true, true);\n    assertEquals(\"equivalent queries with null upperterms are equal()\", query, other);\n    assertEquals(\"hashcode returns same value\", query.hashCode(), other.hashCode());\n\n    query = new RangeQuery(\"content\", null, \"C\", true, true);\n    other = new RangeQuery(\"content\", \"C\", null, true, true);\n    assertFalse(\"queries with different upper and lower terms are not equal\", query.equals(other));\n\n    query = new RangeQuery(\"content\", \"A\", \"C\", false, false);\n    other = new RangeQuery(\"content\", \"A\", \"C\", true, true);\n    assertFalse(\"queries with different inclusive are not equal\", query.equals(other));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermRangeQuery#testEqualsHashcode().mjava","pathOld":"src/test/org/apache/lucene/search/TestRangeQuery#testEqualsHashcode().mjava","sourceNew":"  public void testEqualsHashcode() {\n    Query query = new TermRangeQuery(\"content\", \"A\", \"C\", true, true);\n    \n    query.setBoost(1.0f);\n    Query other = new TermRangeQuery(\"content\", \"A\", \"C\", true, true);\n    other.setBoost(1.0f);\n\n    assertEquals(\"query equals itself is true\", query, query);\n    assertEquals(\"equivalent queries are equal\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    other.setBoost(2.0f);\n    assertFalse(\"Different boost queries are not equal\", query.equals(other));\n\n    other = new TermRangeQuery(\"notcontent\", \"A\", \"C\", true, true);\n    assertFalse(\"Different fields are not equal\", query.equals(other));\n\n    other = new TermRangeQuery(\"content\", \"X\", \"C\", true, true);\n    assertFalse(\"Different lower terms are not equal\", query.equals(other));\n\n    other = new TermRangeQuery(\"content\", \"A\", \"Z\", true, true);\n    assertFalse(\"Different upper terms are not equal\", query.equals(other));\n\n    query = new TermRangeQuery(\"content\", null, \"C\", true, true);\n    other = new TermRangeQuery(\"content\", null, \"C\", true, true);\n    assertEquals(\"equivalent queries with null lowerterms are equal()\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    query = new TermRangeQuery(\"content\", \"C\", null, true, true);\n    other = new TermRangeQuery(\"content\", \"C\", null, true, true);\n    assertEquals(\"equivalent queries with null upperterms are equal()\", query, other);\n    assertEquals(\"hashcode returns same value\", query.hashCode(), other.hashCode());\n\n    query = new TermRangeQuery(\"content\", null, \"C\", true, true);\n    other = new TermRangeQuery(\"content\", \"C\", null, true, true);\n    assertFalse(\"queries with different upper and lower terms are not equal\", query.equals(other));\n\n    query = new TermRangeQuery(\"content\", \"A\", \"C\", false, false);\n    other = new TermRangeQuery(\"content\", \"A\", \"C\", true, true);\n    assertFalse(\"queries with different inclusive are not equal\", query.equals(other));\n    \n    query = new TermRangeQuery(\"content\", \"A\", \"C\", false, false);\n    other = new TermRangeQuery(\"content\", \"A\", \"C\", false, false, Collator.getInstance());\n    assertFalse(\"a query with a collator is not equal to one without\", query.equals(other));\n  }\n\n","sourceOld":"  public void testEqualsHashcode() {\n    Query query = new RangeQuery(\"content\", \"A\", \"C\", true, true);\n    \n    query.setBoost(1.0f);\n    Query other = new RangeQuery(\"content\", \"A\", \"C\", true, true);\n    other.setBoost(1.0f);\n\n    assertEquals(\"query equals itself is true\", query, query);\n    assertEquals(\"equivalent queries are equal\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    other.setBoost(2.0f);\n    assertFalse(\"Different boost queries are not equal\", query.equals(other));\n\n    other = new RangeQuery(\"notcontent\", \"A\", \"C\", true, true);\n    assertFalse(\"Different fields are not equal\", query.equals(other));\n\n    other = new RangeQuery(\"content\", \"X\", \"C\", true, true);\n    assertFalse(\"Different lower terms are not equal\", query.equals(other));\n\n    other = new RangeQuery(\"content\", \"A\", \"Z\", true, true);\n    assertFalse(\"Different upper terms are not equal\", query.equals(other));\n\n    query = new RangeQuery(\"content\", null, \"C\", true, true);\n    other = new RangeQuery(\"content\", null, \"C\", true, true);\n    assertEquals(\"equivalent queries with null lowerterms are equal()\", query, other);\n    assertEquals(\"hashcode must return same value when equals is true\", query.hashCode(), other.hashCode());\n\n    query = new RangeQuery(\"content\", \"C\", null, true, true);\n    other = new RangeQuery(\"content\", \"C\", null, true, true);\n    assertEquals(\"equivalent queries with null upperterms are equal()\", query, other);\n    assertEquals(\"hashcode returns same value\", query.hashCode(), other.hashCode());\n\n    query = new RangeQuery(\"content\", null, \"C\", true, true);\n    other = new RangeQuery(\"content\", \"C\", null, true, true);\n    assertFalse(\"queries with different upper and lower terms are not equal\", query.equals(other));\n\n    query = new RangeQuery(\"content\", \"A\", \"C\", false, false);\n    other = new RangeQuery(\"content\", \"A\", \"C\", true, true);\n    assertFalse(\"queries with different inclusive are not equal\", query.equals(other));\n    \n    query = new RangeQuery(\"content\", \"A\", \"C\", false, false);\n    other = new RangeQuery(\"content\", \"A\", \"C\", false, false, Collator.getInstance());\n    assertFalse(\"a query with a collator is not equal to one without\", query.equals(other));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f81be51430d74c492f81c1491f9eb2806f8e4d9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["7a42d54cb6fd51d6c22cda75f08efaee58d31ac3"],"7a42d54cb6fd51d6c22cda75f08efaee58d31ac3":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["f81be51430d74c492f81c1491f9eb2806f8e4d9f"]},"commit2Childs":{"f81be51430d74c492f81c1491f9eb2806f8e4d9f":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a42d54cb6fd51d6c22cda75f08efaee58d31ac3":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f81be51430d74c492f81c1491f9eb2806f8e4d9f"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["7a42d54cb6fd51d6c22cda75f08efaee58d31ac3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}