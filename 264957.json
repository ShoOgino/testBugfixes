{"path":"lucene/core/src/test/org/apache/lucene/geo/ShapeTestUtil#surpriseMePolygon(Random).mjava","commits":[{"id":"617d6d4150e0fb2acef8980ce51e3b8e628fb200","date":1580326292,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/ShapeTestUtil#surpriseMePolygon(Random).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/ShapeTestUtil#surpriseMePolygon().mjava","sourceNew":"  private static XYPolygon surpriseMePolygon(Random random) {\n    // repeat until we get a poly that doesn't cross dateline:\n    while (true) {\n      //System.out.println(\"\\nPOLY ITER\");\n      double centerX = nextDouble(random);\n      double centerY = nextDouble(random);\n      double radius = 0.1 + 20 * random.nextDouble();\n      double radiusDelta = random.nextDouble();\n\n      ArrayList<Float> xList = new ArrayList<>();\n      ArrayList<Float> yList = new ArrayList<>();\n      double angle = 0.0;\n      while (true) {\n        angle += random.nextDouble()*40.0;\n        //System.out.println(\"  angle \" + angle);\n        if (angle > 360) {\n          break;\n        }\n        double len = radius * (1.0 - radiusDelta + radiusDelta * random.nextDouble());\n        double maxX = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerX), StrictMath.abs(-Float.MAX_VALUE - centerX));\n        double maxY = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerY), StrictMath.abs(-Float.MAX_VALUE - centerY));\n\n        len = StrictMath.min(len, StrictMath.min(maxX, maxY));\n\n        //System.out.println(\"    len=\" + len);\n        float x = (float)(centerX + len * Math.cos(Math.toRadians(angle)));\n        float y = (float)(centerY + len * Math.sin(Math.toRadians(angle)));\n\n        xList.add(x);\n        yList.add(y);\n\n        //System.out.println(\"    lat=\" + lats.get(lats.size()-1) + \" lon=\" + lons.get(lons.size()-1));\n      }\n\n      // close it\n      xList.add(xList.get(0));\n      yList.add(yList.get(0));\n\n      float[] xArray = new float[xList.size()];\n      float[] yArray = new float[yList.size()];\n      for(int i=0;i<xList.size();i++) {\n        xArray[i] = xList.get(i);\n        yArray[i] = yList.get(i);\n      }\n      return new XYPolygon(xArray, yArray);\n    }\n  }\n\n","sourceOld":"  private static XYPolygon surpriseMePolygon() {\n    // repeat until we get a poly that doesn't cross dateline:\n    while (true) {\n      //System.out.println(\"\\nPOLY ITER\");\n      double centerX = nextDouble();\n      double centerY = nextDouble();\n      double radius = 0.1 + 20 * random().nextDouble();\n      double radiusDelta = random().nextDouble();\n\n      ArrayList<Float> xList = new ArrayList<>();\n      ArrayList<Float> yList = new ArrayList<>();\n      double angle = 0.0;\n      while (true) {\n        angle += random().nextDouble()*40.0;\n        //System.out.println(\"  angle \" + angle);\n        if (angle > 360) {\n          break;\n        }\n        double len = radius * (1.0 - radiusDelta + radiusDelta * random().nextDouble());\n        double maxX = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerX), StrictMath.abs(-Float.MAX_VALUE - centerX));\n        double maxY = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerY), StrictMath.abs(-Float.MAX_VALUE - centerY));\n\n        len = StrictMath.min(len, StrictMath.min(maxX, maxY));\n\n        //System.out.println(\"    len=\" + len);\n        float x = (float)(centerX + len * Math.cos(Math.toRadians(angle)));\n        float y = (float)(centerY + len * Math.sin(Math.toRadians(angle)));\n\n        xList.add(x);\n        yList.add(y);\n\n        //System.out.println(\"    lat=\" + lats.get(lats.size()-1) + \" lon=\" + lons.get(lons.size()-1));\n      }\n\n      // close it\n      xList.add(xList.get(0));\n      yList.add(yList.get(0));\n\n      float[] xArray = new float[xList.size()];\n      float[] yArray = new float[yList.size()];\n      for(int i=0;i<xList.size();i++) {\n        xArray[i] = xList.get(i);\n        yArray[i] = yList.get(i);\n      }\n      return new XYPolygon(xArray, yArray);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d14322963cbbe599706c6c272d5cba0817ea32","date":1581676750,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/ShapeTestUtil#surpriseMePolygon(Random).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/ShapeTestUtil#surpriseMePolygon(Random).mjava","sourceNew":"  private static XYPolygon surpriseMePolygon(Random random) {\n    // repeat until we get a poly that doesn't cross dateline:\n    while (true) {\n      //System.out.println(\"\\nPOLY ITER\");\n      float centerX = nextFloat(random);\n      float centerY = nextFloat(random);\n      double radius = 0.1 + 20 * random.nextDouble();\n      double radiusDelta = random.nextDouble();\n\n      ArrayList<Float> xList = new ArrayList<>();\n      ArrayList<Float> yList = new ArrayList<>();\n      double angle = 0.0;\n      while (true) {\n        angle += random.nextDouble()*40.0;\n        //System.out.println(\"  angle \" + angle);\n        if (angle > 360) {\n          break;\n        }\n        double len = radius * (1.0 - radiusDelta + radiusDelta * random.nextDouble());\n        float maxX = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerX), StrictMath.abs(-Float.MAX_VALUE - centerX));\n        float maxY = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerY), StrictMath.abs(-Float.MAX_VALUE - centerY));\n\n        len = StrictMath.min(len, StrictMath.min(maxX, maxY));\n\n        //System.out.println(\"    len=\" + len);\n        float x = (float)(centerX + len * Math.cos(Math.toRadians(angle)));\n        float y = (float)(centerY + len * Math.sin(Math.toRadians(angle)));\n\n        xList.add(x);\n        yList.add(y);\n\n        //System.out.println(\"    lat=\" + lats.get(lats.size()-1) + \" lon=\" + lons.get(lons.size()-1));\n      }\n\n      // close it\n      xList.add(xList.get(0));\n      yList.add(yList.get(0));\n\n      float[] xArray = new float[xList.size()];\n      float[] yArray = new float[yList.size()];\n      for(int i=0;i<xList.size();i++) {\n        xArray[i] = xList.get(i);\n        yArray[i] = yList.get(i);\n      }\n      return new XYPolygon(xArray, yArray);\n    }\n  }\n\n","sourceOld":"  private static XYPolygon surpriseMePolygon(Random random) {\n    // repeat until we get a poly that doesn't cross dateline:\n    while (true) {\n      //System.out.println(\"\\nPOLY ITER\");\n      double centerX = nextDouble(random);\n      double centerY = nextDouble(random);\n      double radius = 0.1 + 20 * random.nextDouble();\n      double radiusDelta = random.nextDouble();\n\n      ArrayList<Float> xList = new ArrayList<>();\n      ArrayList<Float> yList = new ArrayList<>();\n      double angle = 0.0;\n      while (true) {\n        angle += random.nextDouble()*40.0;\n        //System.out.println(\"  angle \" + angle);\n        if (angle > 360) {\n          break;\n        }\n        double len = radius * (1.0 - radiusDelta + radiusDelta * random.nextDouble());\n        double maxX = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerX), StrictMath.abs(-Float.MAX_VALUE - centerX));\n        double maxY = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerY), StrictMath.abs(-Float.MAX_VALUE - centerY));\n\n        len = StrictMath.min(len, StrictMath.min(maxX, maxY));\n\n        //System.out.println(\"    len=\" + len);\n        float x = (float)(centerX + len * Math.cos(Math.toRadians(angle)));\n        float y = (float)(centerY + len * Math.sin(Math.toRadians(angle)));\n\n        xList.add(x);\n        yList.add(y);\n\n        //System.out.println(\"    lat=\" + lats.get(lats.size()-1) + \" lon=\" + lons.get(lons.size()-1));\n      }\n\n      // close it\n      xList.add(xList.get(0));\n      yList.add(yList.get(0));\n\n      float[] xArray = new float[xList.size()];\n      float[] yArray = new float[yList.size()];\n      for(int i=0;i<xList.size();i++) {\n        xArray[i] = xList.get(i);\n        yArray[i] = yList.get(i);\n      }\n      return new XYPolygon(xArray, yArray);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f66eaefcdea9f8ffcf9508f78556159d61b8e3df","date":1581695213,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/ShapeTestUtil#surpriseMePolygon(Random).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/ShapeTestUtil#surpriseMePolygon(Random).mjava","sourceNew":"  private static XYPolygon surpriseMePolygon(Random random) {\n    // repeat until we get a poly that doesn't cross dateline:\n    while (true) {\n      //System.out.println(\"\\nPOLY ITER\");\n      float centerX = nextFloat(random);\n      float centerY = nextFloat(random);\n      double radius = 0.1 + 20 * random.nextDouble();\n      double radiusDelta = random.nextDouble();\n\n      ArrayList<Float> xList = new ArrayList<>();\n      ArrayList<Float> yList = new ArrayList<>();\n      double angle = 0.0;\n      while (true) {\n        angle += random.nextDouble()*40.0;\n        //System.out.println(\"  angle \" + angle);\n        if (angle > 360) {\n          break;\n        }\n        double len = radius * (1.0 - radiusDelta + radiusDelta * random.nextDouble());\n        float maxX = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerX), StrictMath.abs(-Float.MAX_VALUE - centerX));\n        float maxY = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerY), StrictMath.abs(-Float.MAX_VALUE - centerY));\n\n        len = StrictMath.min(len, StrictMath.min(maxX, maxY));\n\n        //System.out.println(\"    len=\" + len);\n        float x = (float)(centerX + len * Math.cos(Math.toRadians(angle)));\n        float y = (float)(centerY + len * Math.sin(Math.toRadians(angle)));\n\n        xList.add(x);\n        yList.add(y);\n\n        //System.out.println(\"    lat=\" + lats.get(lats.size()-1) + \" lon=\" + lons.get(lons.size()-1));\n      }\n\n      // close it\n      xList.add(xList.get(0));\n      yList.add(yList.get(0));\n\n      float[] xArray = new float[xList.size()];\n      float[] yArray = new float[yList.size()];\n      for(int i=0;i<xList.size();i++) {\n        xArray[i] = xList.get(i);\n        yArray[i] = yList.get(i);\n      }\n      return new XYPolygon(xArray, yArray);\n    }\n  }\n\n","sourceOld":"  private static XYPolygon surpriseMePolygon(Random random) {\n    // repeat until we get a poly that doesn't cross dateline:\n    while (true) {\n      //System.out.println(\"\\nPOLY ITER\");\n      double centerX = nextDouble(random);\n      double centerY = nextDouble(random);\n      double radius = 0.1 + 20 * random.nextDouble();\n      double radiusDelta = random.nextDouble();\n\n      ArrayList<Float> xList = new ArrayList<>();\n      ArrayList<Float> yList = new ArrayList<>();\n      double angle = 0.0;\n      while (true) {\n        angle += random.nextDouble()*40.0;\n        //System.out.println(\"  angle \" + angle);\n        if (angle > 360) {\n          break;\n        }\n        double len = radius * (1.0 - radiusDelta + radiusDelta * random.nextDouble());\n        double maxX = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerX), StrictMath.abs(-Float.MAX_VALUE - centerX));\n        double maxY = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerY), StrictMath.abs(-Float.MAX_VALUE - centerY));\n\n        len = StrictMath.min(len, StrictMath.min(maxX, maxY));\n\n        //System.out.println(\"    len=\" + len);\n        float x = (float)(centerX + len * Math.cos(Math.toRadians(angle)));\n        float y = (float)(centerY + len * Math.sin(Math.toRadians(angle)));\n\n        xList.add(x);\n        yList.add(y);\n\n        //System.out.println(\"    lat=\" + lats.get(lats.size()-1) + \" lon=\" + lons.get(lons.size()-1));\n      }\n\n      // close it\n      xList.add(xList.get(0));\n      yList.add(yList.get(0));\n\n      float[] xArray = new float[xList.size()];\n      float[] yArray = new float[yList.size()];\n      for(int i=0;i<xList.size();i++) {\n        xArray[i] = xList.get(i);\n        yArray[i] = yList.get(i);\n      }\n      return new XYPolygon(xArray, yArray);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04","date":1582280790,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/ShapeTestUtil#surpriseMePolygon(Random).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/ShapeTestUtil#surpriseMePolygon(Random).mjava","sourceNew":"  private static XYPolygon surpriseMePolygon(Random random) {\n    while (true) {\n      float centerX = nextFloat(random);\n      float centerY = nextFloat(random);\n      double radius = 0.1 + 20 * random.nextDouble();\n      double radiusDelta = random.nextDouble();\n\n      ArrayList<Float> xList = new ArrayList<>();\n      ArrayList<Float> yList = new ArrayList<>();\n      double angle = 0.0;\n      while (true) {\n        angle += random.nextDouble()*40.0;\n        if (angle > 360) {\n          break;\n        }\n        double len = radius * (1.0 - radiusDelta + radiusDelta * random.nextDouble());\n        float maxX = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerX), StrictMath.abs(-Float.MAX_VALUE - centerX));\n        float maxY = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerY), StrictMath.abs(-Float.MAX_VALUE - centerY));\n\n        len = StrictMath.min(len, StrictMath.min(maxX, maxY));\n\n        float x = (float)(centerX + len * Math.cos(Math.toRadians(angle)));\n        float y = (float)(centerY + len * Math.sin(Math.toRadians(angle)));\n\n        xList.add(x);\n        yList.add(y);\n      }\n\n      // close it\n      xList.add(xList.get(0));\n      yList.add(yList.get(0));\n\n      float[] xArray = new float[xList.size()];\n      float[] yArray = new float[yList.size()];\n      for(int i=0;i<xList.size();i++) {\n        xArray[i] = xList.get(i);\n        yArray[i] = yList.get(i);\n      }\n      return new XYPolygon(xArray, yArray);\n    }\n  }\n\n","sourceOld":"  private static XYPolygon surpriseMePolygon(Random random) {\n    // repeat until we get a poly that doesn't cross dateline:\n    while (true) {\n      //System.out.println(\"\\nPOLY ITER\");\n      float centerX = nextFloat(random);\n      float centerY = nextFloat(random);\n      double radius = 0.1 + 20 * random.nextDouble();\n      double radiusDelta = random.nextDouble();\n\n      ArrayList<Float> xList = new ArrayList<>();\n      ArrayList<Float> yList = new ArrayList<>();\n      double angle = 0.0;\n      while (true) {\n        angle += random.nextDouble()*40.0;\n        //System.out.println(\"  angle \" + angle);\n        if (angle > 360) {\n          break;\n        }\n        double len = radius * (1.0 - radiusDelta + radiusDelta * random.nextDouble());\n        float maxX = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerX), StrictMath.abs(-Float.MAX_VALUE - centerX));\n        float maxY = StrictMath.min(StrictMath.abs(Float.MAX_VALUE - centerY), StrictMath.abs(-Float.MAX_VALUE - centerY));\n\n        len = StrictMath.min(len, StrictMath.min(maxX, maxY));\n\n        //System.out.println(\"    len=\" + len);\n        float x = (float)(centerX + len * Math.cos(Math.toRadians(angle)));\n        float y = (float)(centerY + len * Math.sin(Math.toRadians(angle)));\n\n        xList.add(x);\n        yList.add(y);\n\n        //System.out.println(\"    lat=\" + lats.get(lats.size()-1) + \" lon=\" + lons.get(lons.size()-1));\n      }\n\n      // close it\n      xList.add(xList.get(0));\n      yList.add(yList.get(0));\n\n      float[] xArray = new float[xList.size()];\n      float[] yArray = new float[yList.size()];\n      for(int i=0;i<xList.size();i++) {\n        xArray[i] = xList.get(i);\n        yArray[i] = yList.get(i);\n      }\n      return new XYPolygon(xArray, yArray);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f66eaefcdea9f8ffcf9508f78556159d61b8e3df":["617d6d4150e0fb2acef8980ce51e3b8e628fb200","a4d14322963cbbe599706c6c272d5cba0817ea32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04"],"a4d14322963cbbe599706c6c272d5cba0817ea32":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"]},"commit2Childs":{"f66eaefcdea9f8ffcf9508f78556159d61b8e3df":["0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df","a4d14322963cbbe599706c6c272d5cba0817ea32"],"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a4d14322963cbbe599706c6c272d5cba0817ea32":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}