{"path":"lucene/core/src/java/org/apache/lucene/search/NRTManagerReopenThread#run().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NRTManagerReopenThread#run().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NRTManagerReopenThread#run().mjava","sourceNew":"  @Override\n  public void run() {\n    // TODO: maybe use private thread ticktock timer, in\n    // case clock shift messes up nanoTime?\n    long lastReopenStartNS = System.nanoTime();\n\n    //System.out.println(\"reopen: start\");\n    try {\n      while (true) {\n\n        boolean hasWaiting = false;\n\n        synchronized(this) {\n          // TODO: try to guestimate how long reopen might\n          // take based on past data?\n\n          while (!finish) {\n            //System.out.println(\"reopen: cycle\");\n\n            // True if we have someone waiting for reopen'd searcher:\n            hasWaiting = waitingGen > manager.getCurrentSearchingGen(waitingNeedsDeletes);\n            final long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);\n\n            final long sleepNS = nextReopenStartNS - System.nanoTime();\n\n            if (sleepNS > 0) {\n              //System.out.println(\"reopen: sleep \" + (sleepNS/1000000.0) + \" ms (hasWaiting=\" + hasWaiting + \")\");\n              try {\n                wait(sleepNS/1000000, (int) (sleepNS%1000000));\n              } catch (InterruptedException ie) {\n                Thread.currentThread().interrupt();\n                //System.out.println(\"NRT: set finish on interrupt\");\n                finish = true;\n                break;\n              }\n            } else {\n              break;\n            }\n          }\n\n          if (finish) {\n            //System.out.println(\"reopen: finish\");\n            return;\n          }\n          //System.out.println(\"reopen: start hasWaiting=\" + hasWaiting);\n        }\n\n        lastReopenStartNS = System.nanoTime();\n        try {\n          //final long t0 = System.nanoTime();\n          manager.maybeReopen(waitingNeedsDeletes);\n          //System.out.println(\"reopen took \" + ((System.nanoTime()-t0)/1000000.0) + \" msec\");\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": IOE\");\n          //ioe.printStackTrace();\n          throw new RuntimeException(ioe);\n        }\n      }\n    } catch (Throwable t) {\n      //System.out.println(\"REOPEN EXC\");\n      //t.printStackTrace(System.out);\n      throw new RuntimeException(t);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    // TODO: maybe use private thread ticktock timer, in\n    // case clock shift messes up nanoTime?\n    long lastReopenStartNS = System.nanoTime();\n\n    //System.out.println(\"reopen: start\");\n    try {\n      while (true) {\n\n        boolean hasWaiting = false;\n\n        synchronized(this) {\n          // TODO: try to guestimate how long reopen might\n          // take based on past data?\n\n          while (!finish) {\n            //System.out.println(\"reopen: cycle\");\n\n            // True if we have someone waiting for reopen'd searcher:\n            hasWaiting = waitingGen > manager.getCurrentSearchingGen(waitingNeedsDeletes);\n            final long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);\n\n            final long sleepNS = nextReopenStartNS - System.nanoTime();\n\n            if (sleepNS > 0) {\n              //System.out.println(\"reopen: sleep \" + (sleepNS/1000000.0) + \" ms (hasWaiting=\" + hasWaiting + \")\");\n              try {\n                wait(sleepNS/1000000, (int) (sleepNS%1000000));\n              } catch (InterruptedException ie) {\n                Thread.currentThread().interrupt();\n                //System.out.println(\"NRT: set finish on interrupt\");\n                finish = true;\n                break;\n              }\n            } else {\n              break;\n            }\n          }\n\n          if (finish) {\n            //System.out.println(\"reopen: finish\");\n            return;\n          }\n          //System.out.println(\"reopen: start hasWaiting=\" + hasWaiting);\n        }\n\n        lastReopenStartNS = System.nanoTime();\n        try {\n          //final long t0 = System.nanoTime();\n          manager.maybeReopen(waitingNeedsDeletes);\n          //System.out.println(\"reopen took \" + ((System.nanoTime()-t0)/1000000.0) + \" msec\");\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": IOE\");\n          //ioe.printStackTrace();\n          throw new RuntimeException(ioe);\n        }\n      }\n    } catch (Throwable t) {\n      //System.out.println(\"REOPEN EXC\");\n      //t.printStackTrace(System.out);\n      throw new RuntimeException(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c36db4818c5eba16bdcbedab4f06dd69ae59190","date":1329160108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NRTManagerReopenThread#run().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NRTManagerReopenThread#run().mjava","sourceNew":"  @Override\n  public void run() {\n    // TODO: maybe use private thread ticktock timer, in\n    // case clock shift messes up nanoTime?\n    long lastReopenStartNS = System.nanoTime();\n\n    //System.out.println(\"reopen: start\");\n    try {\n      while (true) {\n\n        boolean hasWaiting = false;\n\n        synchronized(this) {\n          // TODO: try to guestimate how long reopen might\n          // take based on past data?\n\n          while (!finish) {\n            //System.out.println(\"reopen: cycle\");\n\n            // True if we have someone waiting for reopen'd searcher:\n            hasWaiting = waitingGen > manager.getCurrentSearchingGen();\n            final long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);\n\n            final long sleepNS = nextReopenStartNS - System.nanoTime();\n\n            if (sleepNS > 0) {\n              //System.out.println(\"reopen: sleep \" + (sleepNS/1000000.0) + \" ms (hasWaiting=\" + hasWaiting + \")\");\n              try {\n                wait(sleepNS/1000000, (int) (sleepNS%1000000));\n              } catch (InterruptedException ie) {\n                Thread.currentThread().interrupt();\n                //System.out.println(\"NRT: set finish on interrupt\");\n                finish = true;\n                break;\n              }\n            } else {\n              break;\n            }\n          }\n\n          if (finish) {\n            //System.out.println(\"reopen: finish\");\n            return;\n          }\n          //System.out.println(\"reopen: start hasWaiting=\" + hasWaiting);\n        }\n\n        lastReopenStartNS = System.nanoTime();\n        try {\n          //final long t0 = System.nanoTime();\n          manager.maybeReopen();\n          //System.out.println(\"reopen took \" + ((System.nanoTime()-t0)/1000000.0) + \" msec\");\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": IOE\");\n          //ioe.printStackTrace();\n          throw new RuntimeException(ioe);\n        }\n      }\n    } catch (Throwable t) {\n      //System.out.println(\"REOPEN EXC\");\n      //t.printStackTrace(System.out);\n      throw new RuntimeException(t);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    // TODO: maybe use private thread ticktock timer, in\n    // case clock shift messes up nanoTime?\n    long lastReopenStartNS = System.nanoTime();\n\n    //System.out.println(\"reopen: start\");\n    try {\n      while (true) {\n\n        boolean hasWaiting = false;\n\n        synchronized(this) {\n          // TODO: try to guestimate how long reopen might\n          // take based on past data?\n\n          while (!finish) {\n            //System.out.println(\"reopen: cycle\");\n\n            // True if we have someone waiting for reopen'd searcher:\n            hasWaiting = waitingGen > manager.getCurrentSearchingGen(waitingNeedsDeletes);\n            final long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);\n\n            final long sleepNS = nextReopenStartNS - System.nanoTime();\n\n            if (sleepNS > 0) {\n              //System.out.println(\"reopen: sleep \" + (sleepNS/1000000.0) + \" ms (hasWaiting=\" + hasWaiting + \")\");\n              try {\n                wait(sleepNS/1000000, (int) (sleepNS%1000000));\n              } catch (InterruptedException ie) {\n                Thread.currentThread().interrupt();\n                //System.out.println(\"NRT: set finish on interrupt\");\n                finish = true;\n                break;\n              }\n            } else {\n              break;\n            }\n          }\n\n          if (finish) {\n            //System.out.println(\"reopen: finish\");\n            return;\n          }\n          //System.out.println(\"reopen: start hasWaiting=\" + hasWaiting);\n        }\n\n        lastReopenStartNS = System.nanoTime();\n        try {\n          //final long t0 = System.nanoTime();\n          manager.maybeReopen(waitingNeedsDeletes);\n          //System.out.println(\"reopen took \" + ((System.nanoTime()-t0)/1000000.0) + \" msec\");\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": IOE\");\n          //ioe.printStackTrace();\n          throw new RuntimeException(ioe);\n        }\n      }\n    } catch (Throwable t) {\n      //System.out.println(\"REOPEN EXC\");\n      //t.printStackTrace(System.out);\n      throw new RuntimeException(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c380c22ff3b659b2d7412a3335f853d354d17568","date":1329505731,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NRTManagerReopenThread#run().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NRTManagerReopenThread#run().mjava","sourceNew":"  @Override\n  public void run() {\n    // TODO: maybe use private thread ticktock timer, in\n    // case clock shift messes up nanoTime?\n    long lastReopenStartNS = System.nanoTime();\n\n    //System.out.println(\"reopen: start\");\n    try {\n      while (true) {\n\n        boolean hasWaiting = false;\n\n        synchronized(this) {\n          // TODO: try to guestimate how long reopen might\n          // take based on past data?\n\n          while (!finish) {\n            //System.out.println(\"reopen: cycle\");\n\n            // True if we have someone waiting for reopen'd searcher:\n            hasWaiting = waitingGen > manager.getCurrentSearchingGen();\n            final long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);\n\n            final long sleepNS = nextReopenStartNS - System.nanoTime();\n\n            if (sleepNS > 0) {\n              //System.out.println(\"reopen: sleep \" + (sleepNS/1000000.0) + \" ms (hasWaiting=\" + hasWaiting + \")\");\n              try {\n                wait(sleepNS/1000000, (int) (sleepNS%1000000));\n              } catch (InterruptedException ie) {\n                Thread.currentThread().interrupt();\n                //System.out.println(\"NRT: set finish on interrupt\");\n                finish = true;\n                break;\n              }\n            } else {\n              break;\n            }\n          }\n\n          if (finish) {\n            //System.out.println(\"reopen: finish\");\n            return;\n          }\n          //System.out.println(\"reopen: start hasWaiting=\" + hasWaiting);\n        }\n\n        lastReopenStartNS = System.nanoTime();\n        try {\n          //final long t0 = System.nanoTime();\n          manager.maybeRefresh();\n          //System.out.println(\"reopen took \" + ((System.nanoTime()-t0)/1000000.0) + \" msec\");\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": IOE\");\n          //ioe.printStackTrace();\n          throw new RuntimeException(ioe);\n        }\n      }\n    } catch (Throwable t) {\n      //System.out.println(\"REOPEN EXC\");\n      //t.printStackTrace(System.out);\n      throw new RuntimeException(t);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    // TODO: maybe use private thread ticktock timer, in\n    // case clock shift messes up nanoTime?\n    long lastReopenStartNS = System.nanoTime();\n\n    //System.out.println(\"reopen: start\");\n    try {\n      while (true) {\n\n        boolean hasWaiting = false;\n\n        synchronized(this) {\n          // TODO: try to guestimate how long reopen might\n          // take based on past data?\n\n          while (!finish) {\n            //System.out.println(\"reopen: cycle\");\n\n            // True if we have someone waiting for reopen'd searcher:\n            hasWaiting = waitingGen > manager.getCurrentSearchingGen();\n            final long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);\n\n            final long sleepNS = nextReopenStartNS - System.nanoTime();\n\n            if (sleepNS > 0) {\n              //System.out.println(\"reopen: sleep \" + (sleepNS/1000000.0) + \" ms (hasWaiting=\" + hasWaiting + \")\");\n              try {\n                wait(sleepNS/1000000, (int) (sleepNS%1000000));\n              } catch (InterruptedException ie) {\n                Thread.currentThread().interrupt();\n                //System.out.println(\"NRT: set finish on interrupt\");\n                finish = true;\n                break;\n              }\n            } else {\n              break;\n            }\n          }\n\n          if (finish) {\n            //System.out.println(\"reopen: finish\");\n            return;\n          }\n          //System.out.println(\"reopen: start hasWaiting=\" + hasWaiting);\n        }\n\n        lastReopenStartNS = System.nanoTime();\n        try {\n          //final long t0 = System.nanoTime();\n          manager.maybeReopen();\n          //System.out.println(\"reopen took \" + ((System.nanoTime()-t0)/1000000.0) + \" msec\");\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": IOE\");\n          //ioe.printStackTrace();\n          throw new RuntimeException(ioe);\n        }\n      }\n    } catch (Throwable t) {\n      //System.out.println(\"REOPEN EXC\");\n      //t.printStackTrace(System.out);\n      throw new RuntimeException(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2045b132a2396bb23dff28d2d9f349a6907d36e","date":1367513076,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/NRTManagerReopenThread#run().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void run() {\n    // TODO: maybe use private thread ticktock timer, in\n    // case clock shift messes up nanoTime?\n    long lastReopenStartNS = System.nanoTime();\n\n    //System.out.println(\"reopen: start\");\n    try {\n      while (true) {\n\n        boolean hasWaiting = false;\n\n        synchronized(this) {\n          // TODO: try to guestimate how long reopen might\n          // take based on past data?\n\n          while (!finish) {\n            //System.out.println(\"reopen: cycle\");\n\n            // True if we have someone waiting for reopen'd searcher:\n            hasWaiting = waitingGen > manager.getCurrentSearchingGen();\n            final long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);\n\n            final long sleepNS = nextReopenStartNS - System.nanoTime();\n\n            if (sleepNS > 0) {\n              //System.out.println(\"reopen: sleep \" + (sleepNS/1000000.0) + \" ms (hasWaiting=\" + hasWaiting + \")\");\n              try {\n                wait(sleepNS/1000000, (int) (sleepNS%1000000));\n              } catch (InterruptedException ie) {\n                Thread.currentThread().interrupt();\n                //System.out.println(\"NRT: set finish on interrupt\");\n                finish = true;\n                break;\n              }\n            } else {\n              break;\n            }\n          }\n\n          if (finish) {\n            //System.out.println(\"reopen: finish\");\n            return;\n          }\n          //System.out.println(\"reopen: start hasWaiting=\" + hasWaiting);\n        }\n\n        lastReopenStartNS = System.nanoTime();\n        try {\n          //final long t0 = System.nanoTime();\n          manager.maybeRefresh();\n          //System.out.println(\"reopen took \" + ((System.nanoTime()-t0)/1000000.0) + \" msec\");\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": IOE\");\n          //ioe.printStackTrace();\n          throw new RuntimeException(ioe);\n        }\n      }\n    } catch (Throwable t) {\n      //System.out.println(\"REOPEN EXC\");\n      //t.printStackTrace(System.out);\n      throw new RuntimeException(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2045b132a2396bb23dff28d2d9f349a6907d36e":["c380c22ff3b659b2d7412a3335f853d354d17568"],"c380c22ff3b659b2d7412a3335f853d354d17568":["2c36db4818c5eba16bdcbedab4f06dd69ae59190"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c36db4818c5eba16bdcbedab4f06dd69ae59190":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2045b132a2396bb23dff28d2d9f349a6907d36e"]},"commit2Childs":{"c2045b132a2396bb23dff28d2d9f349a6907d36e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c380c22ff3b659b2d7412a3335f853d354d17568":["c2045b132a2396bb23dff28d2d9f349a6907d36e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2c36db4818c5eba16bdcbedab4f06dd69ae59190"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2c36db4818c5eba16bdcbedab4f06dd69ae59190":["c380c22ff3b659b2d7412a3335f853d354d17568"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}