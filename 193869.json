{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesConsumer#addNumericField(FieldInfo,long,long).mjava","commits":[{"id":"bfc53d09502e7e9683618107ef3cd087df2d6152","date":1357571745,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesConsumer#addNumericField(FieldInfo,long,long).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public NumericDocValuesConsumer addNumericField(FieldInfo field, final long minValue, long maxValue) throws IOException {\n      meta.writeVInt(field.number);\n      meta.writeLong(minValue);\n      meta.writeLong(maxValue);\n      long delta = maxValue - minValue;\n      final int bitsPerValue;\n      if (delta < 0) {\n        bitsPerValue = 64;\n      } else {\n        bitsPerValue = PackedInts.bitsRequired(delta);\n      }\n      FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(maxDoc, bitsPerValue, PackedInts.COMPACT);\n      \n      // nocommit: refactor this crap in PackedInts.java\n      // e.g. Header.load()/save() or something rather than how it works now.\n      CodecUtil.writeHeader(meta, PackedInts.CODEC_NAME, PackedInts.VERSION_CURRENT);\n      meta.writeVInt(bitsPerValue);\n      meta.writeVInt(maxDoc);\n      meta.writeVInt(formatAndBits.format.getId());\n      \n      meta.writeLong(data.getFilePointer());\n      \n      final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, formatAndBits.format, maxDoc, formatAndBits.bitsPerValue, 0);\n      return new NumericDocValuesConsumer() {\n        @Override\n        public void add(long value) throws IOException {\n          writer.add(value - minValue);\n        }\n\n        @Override\n        public void finish() throws IOException {\n          writer.finish();\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32fb848e256860b63adc9c2b068f386032c77b67","date":1357587205,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesConsumer#addNumericField(FieldInfo,long,long).mjava","sourceNew":"    @Override\n    public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n      meta.writeVInt(field.number);\n      long minValue = Long.MAX_VALUE;\n      long maxValue = Long.MIN_VALUE;\n      for(Number nv : values) {\n        long v = nv.longValue();\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n      }\n      meta.writeLong(minValue);\n      long delta = maxValue - minValue;\n      final int bitsPerValue;\n      if (delta < 0) {\n        bitsPerValue = 64;\n      } else {\n        bitsPerValue = PackedInts.bitsRequired(delta);\n      }\n      FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(maxDoc, bitsPerValue, PackedInts.COMPACT);\n      \n      // nocommit: refactor this crap in PackedInts.java\n      // e.g. Header.load()/save() or something rather than how it works now.\n      CodecUtil.writeHeader(meta, PackedInts.CODEC_NAME, PackedInts.VERSION_CURRENT);\n      meta.writeVInt(bitsPerValue);\n      meta.writeVInt(maxDoc);\n      meta.writeVInt(formatAndBits.format.getId());\n      \n      meta.writeLong(data.getFilePointer());\n      \n      final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, formatAndBits.format, maxDoc, formatAndBits.bitsPerValue, 0);\n      for(Number nv : values) {\n        writer.add(nv.longValue() - minValue);\n      }\n      writer.finish();\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValuesConsumer addNumericField(FieldInfo field, final long minValue, long maxValue) throws IOException {\n      meta.writeVInt(field.number);\n      meta.writeLong(minValue);\n      meta.writeLong(maxValue);\n      long delta = maxValue - minValue;\n      final int bitsPerValue;\n      if (delta < 0) {\n        bitsPerValue = 64;\n      } else {\n        bitsPerValue = PackedInts.bitsRequired(delta);\n      }\n      FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(maxDoc, bitsPerValue, PackedInts.COMPACT);\n      \n      // nocommit: refactor this crap in PackedInts.java\n      // e.g. Header.load()/save() or something rather than how it works now.\n      CodecUtil.writeHeader(meta, PackedInts.CODEC_NAME, PackedInts.VERSION_CURRENT);\n      meta.writeVInt(bitsPerValue);\n      meta.writeVInt(maxDoc);\n      meta.writeVInt(formatAndBits.format.getId());\n      \n      meta.writeLong(data.getFilePointer());\n      \n      final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, formatAndBits.format, maxDoc, formatAndBits.bitsPerValue, 0);\n      return new NumericDocValuesConsumer() {\n        @Override\n        public void add(long value) throws IOException {\n          writer.add(value - minValue);\n        }\n\n        @Override\n        public void finish() throws IOException {\n          writer.finish();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bfc53d09502e7e9683618107ef3cd087df2d6152":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"32fb848e256860b63adc9c2b068f386032c77b67":["bfc53d09502e7e9683618107ef3cd087df2d6152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"bfc53d09502e7e9683618107ef3cd087df2d6152":["32fb848e256860b63adc9c2b068f386032c77b67"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfc53d09502e7e9683618107ef3cd087df2d6152","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"32fb848e256860b63adc9c2b068f386032c77b67":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["32fb848e256860b63adc9c2b068f386032c77b67","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}