{"path":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].PerSegmentComparator#setBottom(int).mjava","commits":[{"id":"0c81a8899ecd6e225389876dfeac34c6873c4516","date":1284403877,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].PerSegmentComparator#setBottom(int).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public void setBottom(final int bottom) {\n        TermOrdValComparator_SML.this.setBottom(bottom);\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a05818166782d252a03edc21cda3f0f186170b70"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05818166782d252a03edc21cda3f0f186170b70","date":1284576100,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].PerSegmentComparator#setBottom(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].PerSegmentComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == NULL_ORD;\n          bottomOrd = NULL_ORD;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n          }\n        }\n      }\n      if (bottomSameReader) {\n        readerGen[bottomSlot] = currentReaderGen;\n      }\n    }\n\n","sourceOld":"      @Override\n      public void setBottom(final int bottom) {\n        TermOrdValComparator_SML.this.setBottom(bottom);\n      }\n\n","bugFix":["0c81a8899ecd6e225389876dfeac34c6873c4516"],"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fb88f33e6d34835fc7b06b94e2935732ecdfa7f","date":1289846398,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].PerSegmentComparator#setBottom(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].PerSegmentComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == NULL_ORD;\n          bottomOrd = NULL_ORD;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n          }\n          ords[bottomSlot] = bottomOrd;\n        }\n      }\n      if (bottomSameReader) {\n        readerGen[bottomSlot] = currentReaderGen;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == NULL_ORD;\n          bottomOrd = NULL_ORD;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n          }\n        }\n      }\n      if (bottomSameReader) {\n        readerGen[bottomSlot] = currentReaderGen;\n      }\n    }\n\n","bugFix":null,"bugIntro":["48f0aa4fe522f0c678bb82298c72a3b7b55e24f9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2cb00b9c12554a351efb4c657023c74a6a06734f","date":1289850033,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].PerSegmentComparator#setBottom(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].PerSegmentComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == NULL_ORD;\n          bottomOrd = NULL_ORD;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;\n          }\n          ords[bottomSlot] = bottomOrd;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == NULL_ORD;\n          bottomOrd = NULL_ORD;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n          }\n          ords[bottomSlot] = bottomOrd;\n        }\n      }\n      if (bottomSameReader) {\n        readerGen[bottomSlot] = currentReaderGen;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"48f0aa4fe522f0c678bb82298c72a3b7b55e24f9","date":1289885727,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].PerSegmentComparator#setBottom(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].PerSegmentComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == NULL_ORD;\n          bottomOrd = NULL_ORD;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;\n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == NULL_ORD;\n          bottomOrd = NULL_ORD;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;\n          }\n          ords[bottomSlot] = bottomOrd;\n        }\n      }\n    }\n\n","bugFix":["8fb88f33e6d34835fc7b06b94e2935732ecdfa7f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].PerSegmentComparator#setBottom(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].PerSegmentComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == NULL_ORD;\n          bottomOrd = NULL_ORD;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;\n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == NULL_ORD;\n          bottomOrd = NULL_ORD;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n          }\n        }\n      }\n      if (bottomSameReader) {\n        readerGen[bottomSlot] = currentReaderGen;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].PerSegmentComparator#setBottom(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == NULL_ORD;\n          bottomOrd = NULL_ORD;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;\n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].PerSegmentComparator#setBottom(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].PerSegmentComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == NULL_ORD;\n          bottomOrd = NULL_ORD;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;\n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == NULL_ORD;\n          bottomOrd = NULL_ORD;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;\n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].PerSegmentComparator#setBottom(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].PerSegmentComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == NULL_ORD;\n          bottomOrd = NULL_ORD;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;\n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == NULL_ORD;\n          bottomOrd = NULL_ORD;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;\n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].PerSegmentComparator#setBottom(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].PerSegmentComparator#setBottom(int).mjava","sourceNew":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == NULL_ORD;\n          bottomOrd = NULL_ORD;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;\n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setBottom(final int bottom) {\n      bottomSlot = bottom;\n\n      bottomValue = values[bottomSlot];\n      if (currentReaderGen == readerGen[bottomSlot]) {\n        bottomOrd = ords[bottomSlot];\n        bottomSameReader = true;\n      } else {\n        if (bottomValue == null) {\n          // 0 ord is null for all segments\n          assert ords[bottomSlot] == NULL_ORD;\n          bottomOrd = NULL_ORD;\n          bottomSameReader = true;\n          readerGen[bottomSlot] = currentReaderGen;\n        } else {\n          final int index = binarySearch(tempBR, termsIndex, bottomValue);\n          if (index < 0) {\n            bottomOrd = -index - 2;\n            bottomSameReader = false;\n          } else {\n            bottomOrd = index;\n            // exact value match\n            bottomSameReader = true;\n            readerGen[bottomSlot] = currentReaderGen;\n            ords[bottomSlot] = bottomOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"48f0aa4fe522f0c678bb82298c72a3b7b55e24f9":["2cb00b9c12554a351efb4c657023c74a6a06734f"],"8fb88f33e6d34835fc7b06b94e2935732ecdfa7f":["a05818166782d252a03edc21cda3f0f186170b70"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a05818166782d252a03edc21cda3f0f186170b70","48f0aa4fe522f0c678bb82298c72a3b7b55e24f9"],"a05818166782d252a03edc21cda3f0f186170b70":["0c81a8899ecd6e225389876dfeac34c6873c4516"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["48f0aa4fe522f0c678bb82298c72a3b7b55e24f9"],"c26f00b574427b55127e869b935845554afde1fa":["48f0aa4fe522f0c678bb82298c72a3b7b55e24f9","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"0c81a8899ecd6e225389876dfeac34c6873c4516":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["48f0aa4fe522f0c678bb82298c72a3b7b55e24f9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","48f0aa4fe522f0c678bb82298c72a3b7b55e24f9"],"2cb00b9c12554a351efb4c657023c74a6a06734f":["8fb88f33e6d34835fc7b06b94e2935732ecdfa7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"48f0aa4fe522f0c678bb82298c72a3b7b55e24f9":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"8fb88f33e6d34835fc7b06b94e2935732ecdfa7f":["2cb00b9c12554a351efb4c657023c74a6a06734f"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"a05818166782d252a03edc21cda3f0f186170b70":["8fb88f33e6d34835fc7b06b94e2935732ecdfa7f","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0c81a8899ecd6e225389876dfeac34c6873c4516":["a05818166782d252a03edc21cda3f0f186170b70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0c81a8899ecd6e225389876dfeac34c6873c4516","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"2cb00b9c12554a351efb4c657023c74a6a06734f":["48f0aa4fe522f0c678bb82298c72a3b7b55e24f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}