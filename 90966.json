{"path":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField],Map[String,Collection[String]]).mjava","commits":[{"id":"577e41641d2fc8a834d2709dc76cc424b2936e19","date":1373292023,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField],Map[String,Collection[String]]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public IndexSchema addFields(Collection<SchemaField> newFields, Map<String, Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      while ( ! success) { // optimistic concurrency\n        // even though fields is volatile, we need to synchronize to avoid two addFields\n        // happening concurrently (and ending up missing one of them)\n        synchronized (getSchemaUpdateLock()) {\n          newSchema = shallowCopy(true);\n\n          for (SchemaField newField : newFields) {\n            if (null != newSchema.getFieldOrNull(newField.getName())) {\n              String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n              throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n            }\n            newSchema.fields.put(newField.getName(), newField);\n\n            if (null != newField.getDefaultValue()) {\n              log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n              newSchema.fieldsWithDefaultValue.add(newField);\n            }\n            if (newField.isRequired()) {\n              log.debug(\"{} is required in this schema\", newField.getName());\n              newSchema.requiredFields.add(newField);\n            }\n            Collection<String> copyFields = copyFieldNames.get(newField.getName());\n            if (copyFields != null) {\n              for (String copyField : copyFields) {\n                newSchema.registerCopyField(newField.getName(), copyField);\n              }\n            }\n          }\n          // Run the callbacks on SchemaAware now that everything else is done\n          for (SchemaAware aware : newSchema.schemaAware) {\n            aware.inform(newSchema);\n          }\n          newSchema.refreshAnalyzers();\n          success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n          if (success) {\n            log.debug(\"Added field(s): {}\", newFields);\n          }\n        }\n        // release the lock between tries to allow the schema reader to update the schema & schemaZkVersion\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01257aab3074127b72c3b53a508f396bb968019c","date":1373336679,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField],Map[String,Collection[String]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField],Map[String,Collection[String]]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields, Map<String, Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      while ( ! success) { // optimistic concurrency\n        // even though fields is volatile, we need to synchronize to avoid two addFields\n        // happening concurrently (and ending up missing one of them)\n        synchronized (getSchemaUpdateLock()) {\n          newSchema = shallowCopy(true);\n\n          for (SchemaField newField : newFields) {\n            if (null != newSchema.getFieldOrNull(newField.getName())) {\n              String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n              throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n            }\n            newSchema.fields.put(newField.getName(), newField);\n\n            if (null != newField.getDefaultValue()) {\n              log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n              newSchema.fieldsWithDefaultValue.add(newField);\n            }\n            if (newField.isRequired()) {\n              log.debug(\"{} is required in this schema\", newField.getName());\n              newSchema.requiredFields.add(newField);\n            }\n            Collection<String> copyFields = copyFieldNames.get(newField.getName());\n            if (copyFields != null) {\n              for (String copyField : copyFields) {\n                newSchema.registerCopyField(newField.getName(), copyField);\n              }\n            }\n          }\n          // Run the callbacks on SchemaAware now that everything else is done\n          for (SchemaAware aware : newSchema.schemaAware) {\n            aware.inform(newSchema);\n          }\n          newSchema.refreshAnalyzers();\n          success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n          if (success) {\n            log.debug(\"Added field(s): {}\", newFields);\n          }\n        }\n        // release the lock between tries to allow the schema reader to update the schema & schemaZkVersion\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public IndexSchema addFields(Collection<SchemaField> newFields, Map<String, Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      while ( ! success) { // optimistic concurrency\n        // even though fields is volatile, we need to synchronize to avoid two addFields\n        // happening concurrently (and ending up missing one of them)\n        synchronized (getSchemaUpdateLock()) {\n          newSchema = shallowCopy(true);\n\n          for (SchemaField newField : newFields) {\n            if (null != newSchema.getFieldOrNull(newField.getName())) {\n              String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n              throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n            }\n            newSchema.fields.put(newField.getName(), newField);\n\n            if (null != newField.getDefaultValue()) {\n              log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n              newSchema.fieldsWithDefaultValue.add(newField);\n            }\n            if (newField.isRequired()) {\n              log.debug(\"{} is required in this schema\", newField.getName());\n              newSchema.requiredFields.add(newField);\n            }\n            Collection<String> copyFields = copyFieldNames.get(newField.getName());\n            if (copyFields != null) {\n              for (String copyField : copyFields) {\n                newSchema.registerCopyField(newField.getName(), copyField);\n              }\n            }\n          }\n          // Run the callbacks on SchemaAware now that everything else is done\n          for (SchemaAware aware : newSchema.schemaAware) {\n            aware.inform(newSchema);\n          }\n          newSchema.refreshAnalyzers();\n          success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n          if (success) {\n            log.debug(\"Added field(s): {}\", newFields);\n          }\n        }\n        // release the lock between tries to allow the schema reader to update the schema & schemaZkVersion\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField],Map[String,Collection[String]]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields, Map<String, Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      while ( ! success) { // optimistic concurrency\n        // even though fields is volatile, we need to synchronize to avoid two addFields\n        // happening concurrently (and ending up missing one of them)\n        synchronized (getSchemaUpdateLock()) {\n          newSchema = shallowCopy(true);\n\n          for (SchemaField newField : newFields) {\n            if (null != newSchema.getFieldOrNull(newField.getName())) {\n              String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n              throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n            }\n            newSchema.fields.put(newField.getName(), newField);\n\n            if (null != newField.getDefaultValue()) {\n              log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n              newSchema.fieldsWithDefaultValue.add(newField);\n            }\n            if (newField.isRequired()) {\n              log.debug(\"{} is required in this schema\", newField.getName());\n              newSchema.requiredFields.add(newField);\n            }\n            Collection<String> copyFields = copyFieldNames.get(newField.getName());\n            if (copyFields != null) {\n              for (String copyField : copyFields) {\n                newSchema.registerCopyField(newField.getName(), copyField);\n              }\n            }\n          }\n          // Run the callbacks on SchemaAware now that everything else is done\n          for (SchemaAware aware : newSchema.schemaAware) {\n            aware.inform(newSchema);\n          }\n          newSchema.refreshAnalyzers();\n          success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n          if (success) {\n            log.debug(\"Added field(s): {}\", newFields);\n          }\n        }\n        // release the lock between tries to allow the schema reader to update the schema & schemaZkVersion\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec756ece2bfff759a9615a1d8f833e4f5f26e96b","date":1402433820,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField],Map[String,Collection[String]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField],Map[String,Collection[String]]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields, Map<String, Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      // even though fields is volatile, we need to synchronize to avoid two addFields\n      // happening concurrently (and ending up missing one of them)\n      synchronized (getSchemaUpdateLock()) {\n        newSchema = shallowCopy(true);\n\n        for (SchemaField newField : newFields) {\n          if (null != newSchema.getFieldOrNull(newField.getName())) {\n            String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n            throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n          }\n          newSchema.fields.put(newField.getName(), newField);\n\n          if (null != newField.getDefaultValue()) {\n            log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n            newSchema.fieldsWithDefaultValue.add(newField);\n          }\n          if (newField.isRequired()) {\n            log.debug(\"{} is required in this schema\", newField.getName());\n            newSchema.requiredFields.add(newField);\n          }\n          Collection<String> copyFields = copyFieldNames.get(newField.getName());\n          if (copyFields != null) {\n            for (String copyField : copyFields) {\n              newSchema.registerCopyField(newField.getName(), copyField);\n            }\n          }\n        }\n        // Run the callbacks on SchemaAware now that everything else is done\n        for (SchemaAware aware : newSchema.schemaAware) {\n          aware.inform(newSchema);\n        }\n        newSchema.refreshAnalyzers();\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added field(s): {}\", newFields);\n        } else {\n          log.error(\"Failed to add field(s): {}\", newFields);\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields, Map<String, Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      while ( ! success) { // optimistic concurrency\n        // even though fields is volatile, we need to synchronize to avoid two addFields\n        // happening concurrently (and ending up missing one of them)\n        synchronized (getSchemaUpdateLock()) {\n          newSchema = shallowCopy(true);\n\n          for (SchemaField newField : newFields) {\n            if (null != newSchema.getFieldOrNull(newField.getName())) {\n              String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n              throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n            }\n            newSchema.fields.put(newField.getName(), newField);\n\n            if (null != newField.getDefaultValue()) {\n              log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n              newSchema.fieldsWithDefaultValue.add(newField);\n            }\n            if (newField.isRequired()) {\n              log.debug(\"{} is required in this schema\", newField.getName());\n              newSchema.requiredFields.add(newField);\n            }\n            Collection<String> copyFields = copyFieldNames.get(newField.getName());\n            if (copyFields != null) {\n              for (String copyField : copyFields) {\n                newSchema.registerCopyField(newField.getName(), copyField);\n              }\n            }\n          }\n          // Run the callbacks on SchemaAware now that everything else is done\n          for (SchemaAware aware : newSchema.schemaAware) {\n            aware.inform(newSchema);\n          }\n          newSchema.refreshAnalyzers();\n          success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n          if (success) {\n            log.debug(\"Added field(s): {}\", newFields);\n          }\n        }\n        // release the lock between tries to allow the schema reader to update the schema & schemaZkVersion\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a54972b2387f87fdd92600308f9a0d477b1f53b0","date":1404789654,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField],Map[String,Collection[String]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField],Map[String,Collection[String]]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields, Map<String, Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newField : newFields) {\n        if (null != newSchema.getFieldOrNull(newField.getName())) {\n          String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        newSchema.fields.put(newField.getName(), newField);\n\n        if (null != newField.getDefaultValue()) {\n          log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n          newSchema.fieldsWithDefaultValue.add(newField);\n        }\n        if (newField.isRequired()) {\n          log.debug(\"{} is required in this schema\", newField.getName());\n          newSchema.requiredFields.add(newField);\n        }\n        Collection<String> copyFields = copyFieldNames.get(newField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newField.getName(), copyField);\n          }\n        }\n\n        // Run the callbacks on SchemaAware now that everything else is done\n        for (SchemaAware aware : newSchema.schemaAware) {\n          aware.inform(newSchema);\n        }\n        newSchema.refreshAnalyzers();\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added field(s): {}\", newFields);\n        } else {\n          log.error(\"Failed to add field(s): {}\", newFields);\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields, Map<String, Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      // even though fields is volatile, we need to synchronize to avoid two addFields\n      // happening concurrently (and ending up missing one of them)\n      synchronized (getSchemaUpdateLock()) {\n        newSchema = shallowCopy(true);\n\n        for (SchemaField newField : newFields) {\n          if (null != newSchema.getFieldOrNull(newField.getName())) {\n            String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n            throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n          }\n          newSchema.fields.put(newField.getName(), newField);\n\n          if (null != newField.getDefaultValue()) {\n            log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n            newSchema.fieldsWithDefaultValue.add(newField);\n          }\n          if (newField.isRequired()) {\n            log.debug(\"{} is required in this schema\", newField.getName());\n            newSchema.requiredFields.add(newField);\n          }\n          Collection<String> copyFields = copyFieldNames.get(newField.getName());\n          if (copyFields != null) {\n            for (String copyField : copyFields) {\n              newSchema.registerCopyField(newField.getName(), copyField);\n            }\n          }\n        }\n        // Run the callbacks on SchemaAware now that everything else is done\n        for (SchemaAware aware : newSchema.schemaAware) {\n          aware.inform(newSchema);\n        }\n        newSchema.refreshAnalyzers();\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added field(s): {}\", newFields);\n        } else {\n          log.error(\"Failed to add field(s): {}\", newFields);\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","bugFix":["ec756ece2bfff759a9615a1d8f833e4f5f26e96b","577e41641d2fc8a834d2709dc76cc424b2936e19"],"bugIntro":["3642a1e71318f071e91df80740f6a5a853db1935","3642a1e71318f071e91df80740f6a5a853db1935"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37e5b631c49de2fb88f245c36ecf87650cfa4a24","date":1409693105,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField],Map[String,Collection[String]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField],Map[String,Collection[String]]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields, Map<String, Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newField : newFields) {\n        if (null != newSchema.getFieldOrNull(newField.getName())) {\n          String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        newSchema.fields.put(newField.getName(), newField);\n\n        if (null != newField.getDefaultValue()) {\n          log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n          newSchema.fieldsWithDefaultValue.add(newField);\n        }\n        if (newField.isRequired()) {\n          log.debug(\"{} is required in this schema\", newField.getName());\n          newSchema.requiredFields.add(newField);\n        }\n        Collection<String> copyFields = copyFieldNames.get(newField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newField.getName(), copyField);\n          }\n        }\n      }\n\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n      if (success) {\n        log.debug(\"Added field(s): {}\", newFields);\n      } else {\n        log.error(\"Failed to add field(s): {}\", newFields);\n        newSchema = null;\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields, Map<String, Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newField : newFields) {\n        if (null != newSchema.getFieldOrNull(newField.getName())) {\n          String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        newSchema.fields.put(newField.getName(), newField);\n\n        if (null != newField.getDefaultValue()) {\n          log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n          newSchema.fieldsWithDefaultValue.add(newField);\n        }\n        if (newField.isRequired()) {\n          log.debug(\"{} is required in this schema\", newField.getName());\n          newSchema.requiredFields.add(newField);\n        }\n        Collection<String> copyFields = copyFieldNames.get(newField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newField.getName(), copyField);\n          }\n        }\n\n        // Run the callbacks on SchemaAware now that everything else is done\n        for (SchemaAware aware : newSchema.schemaAware) {\n          aware.inform(newSchema);\n        }\n        newSchema.refreshAnalyzers();\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added field(s): {}\", newFields);\n        } else {\n          log.error(\"Failed to add field(s): {}\", newFields);\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":["9d62f72d1c60d2be239222de52d5e7b516da5f6f","9d62f72d1c60d2be239222de52d5e7b516da5f6f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a54d9ede1b7f2f026639186eb07f3f314d87d9a","date":1412176848,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField],Map[String,Collection[String]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField],Map[String,Collection[String]]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields,\n                                      Map<String, Collection<String>> copyFieldNames,\n                                      boolean persist) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newField : newFields) {\n        if (null != newSchema.getFieldOrNull(newField.getName())) {\n          String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        newSchema.fields.put(newField.getName(), newField);\n\n        if (null != newField.getDefaultValue()) {\n          log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n          newSchema.fieldsWithDefaultValue.add(newField);\n        }\n        if (newField.isRequired()) {\n          log.debug(\"{} is required in this schema\", newField.getName());\n          newSchema.requiredFields.add(newField);\n        }\n        Collection<String> copyFields = copyFieldNames.get(newField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newField.getName(), copyField);\n          }\n        }\n      }\n\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added field(s): {}\", newFields);\n        } else {\n          log.error(\"Failed to add field(s): {}\", newFields);\n          newSchema = null;\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields, Map<String, Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newField : newFields) {\n        if (null != newSchema.getFieldOrNull(newField.getName())) {\n          String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        newSchema.fields.put(newField.getName(), newField);\n\n        if (null != newField.getDefaultValue()) {\n          log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n          newSchema.fieldsWithDefaultValue.add(newField);\n        }\n        if (newField.isRequired()) {\n          log.debug(\"{} is required in this schema\", newField.getName());\n          newSchema.requiredFields.add(newField);\n        }\n        Collection<String> copyFields = copyFieldNames.get(newField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newField.getName(), copyField);\n          }\n        }\n      }\n\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n      if (success) {\n        log.debug(\"Added field(s): {}\", newFields);\n      } else {\n        log.error(\"Failed to add field(s): {}\", newFields);\n        newSchema = null;\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField],Map[String,Collection[String]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField],Map[String,Collection[String]]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields,\n                                      Map<String, Collection<String>> copyFieldNames,\n                                      boolean persist) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newField : newFields) {\n        if (null != newSchema.getFieldOrNull(newField.getName())) {\n          String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        newSchema.fields.put(newField.getName(), newField);\n\n        if (null != newField.getDefaultValue()) {\n          log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n          newSchema.fieldsWithDefaultValue.add(newField);\n        }\n        if (newField.isRequired()) {\n          log.debug(\"{} is required in this schema\", newField.getName());\n          newSchema.requiredFields.add(newField);\n        }\n        Collection<String> copyFields = copyFieldNames.get(newField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newField.getName(), copyField);\n          }\n        }\n      }\n\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added field(s): {}\", newFields);\n        } else {\n          log.error(\"Failed to add field(s): {}\", newFields);\n          newSchema = null;\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields, Map<String, Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newField : newFields) {\n        if (null != newSchema.getFieldOrNull(newField.getName())) {\n          String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        newSchema.fields.put(newField.getName(), newField);\n\n        if (null != newField.getDefaultValue()) {\n          log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n          newSchema.fieldsWithDefaultValue.add(newField);\n        }\n        if (newField.isRequired()) {\n          log.debug(\"{} is required in this schema\", newField.getName());\n          newSchema.requiredFields.add(newField);\n        }\n        Collection<String> copyFields = copyFieldNames.get(newField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newField.getName(), copyField);\n          }\n        }\n      }\n\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n      if (success) {\n        log.debug(\"Added field(s): {}\", newFields);\n      } else {\n        log.error(\"Failed to add field(s): {}\", newFields);\n        newSchema = null;\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec756ece2bfff759a9615a1d8f833e4f5f26e96b":["01257aab3074127b72c3b53a508f396bb968019c"],"577e41641d2fc8a834d2709dc76cc424b2936e19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"01257aab3074127b72c3b53a508f396bb968019c":["577e41641d2fc8a834d2709dc76cc424b2936e19"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","01257aab3074127b72c3b53a508f396bb968019c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["37e5b631c49de2fb88f245c36ecf87650cfa4a24"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["37e5b631c49de2fb88f245c36ecf87650cfa4a24","4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"37e5b631c49de2fb88f245c36ecf87650cfa4a24":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"a54972b2387f87fdd92600308f9a0d477b1f53b0":["ec756ece2bfff759a9615a1d8f833e4f5f26e96b"]},"commit2Childs":{"ec756ece2bfff759a9615a1d8f833e4f5f26e96b":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"577e41641d2fc8a834d2709dc76cc424b2936e19":["01257aab3074127b72c3b53a508f396bb968019c"],"01257aab3074127b72c3b53a508f396bb968019c":["ec756ece2bfff759a9615a1d8f833e4f5f26e96b","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["577e41641d2fc8a834d2709dc76cc424b2936e19","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"37e5b631c49de2fb88f245c36ecf87650cfa4a24":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"a54972b2387f87fdd92600308f9a0d477b1f53b0":["37e5b631c49de2fb88f245c36ecf87650cfa4a24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}