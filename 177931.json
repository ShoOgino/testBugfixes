{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog.LogReplayer#execute(UpdateCommand,OrderedExecutor,AtomicInteger,UpdateRequestProcessor,AtomicReference[SolrException]).mjava","commits":[{"id":"defa11d88d50ec356d5e7428f1ebc89623e840ac","date":1527653148,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog.LogReplayer#execute(UpdateCommand,OrderedExecutor,AtomicInteger,UpdateRequestProcessor,AtomicReference[SolrException]).mjava","pathOld":"/dev/null","sourceNew":"    private void execute(UpdateCommand cmd, OrderedExecutor executor,\n                         AtomicInteger pendingTasks, UpdateRequestProcessor proc,\n                         AtomicReference<SolrException> exceptionHolder) {\n      assert cmd instanceof AddUpdateCommand || cmd instanceof DeleteUpdateCommand;\n\n      if (executor != null) {\n        // by using the same hash as DUP, independent updates can avoid waiting for same bucket\n        executor.execute(getBucketHash(cmd), () -> {\n          try {\n            // fail fast\n            if (exceptionHolder.get() != null) return;\n            if (cmd instanceof AddUpdateCommand) {\n              proc.processAdd((AddUpdateCommand) cmd);\n            } else {\n              proc.processDelete((DeleteUpdateCommand) cmd);\n            }\n          } catch (IOException e) {\n            recoveryInfo.errors++;\n            loglog.warn(\"REPLAY_ERR: IOException reading log\", e);\n            // could be caused by an incomplete flush if recovering from log\n          } catch (SolrException e) {\n            if (e.code() == ErrorCode.SERVICE_UNAVAILABLE.code) {\n              exceptionHolder.compareAndSet(null, e);\n              return;\n            }\n            recoveryInfo.errors++;\n            loglog.warn(\"REPLAY_ERR: IOException reading log\", e);\n          } finally {\n            pendingTasks.decrementAndGet();\n          }\n        });\n        pendingTasks.incrementAndGet();\n      } else {\n        try {\n          if (cmd instanceof AddUpdateCommand) {\n            proc.processAdd((AddUpdateCommand) cmd);\n          } else {\n            proc.processDelete((DeleteUpdateCommand) cmd);\n          }\n        } catch (IOException e) {\n          recoveryInfo.errors++;\n          loglog.warn(\"REPLAY_ERR: IOException replaying log\", e);\n          // could be caused by an incomplete flush if recovering from log\n        } catch (SolrException e) {\n          if (e.code() == ErrorCode.SERVICE_UNAVAILABLE.code) {\n            throw e;\n          }\n          recoveryInfo.errors++;\n          loglog.warn(\"REPLAY_ERR: IOException replaying log\", e);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"defa11d88d50ec356d5e7428f1ebc89623e840ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["defa11d88d50ec356d5e7428f1ebc89623e840ac"]},"commit2Childs":{"defa11d88d50ec356d5e7428f1ebc89623e840ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["defa11d88d50ec356d5e7428f1ebc89623e840ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}