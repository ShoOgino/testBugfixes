{"path":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandom(int,int,int,Directory,boolean).mjava","commits":[{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandom(int,int,int,Directory,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandom(int,int,int,Directory,int,boolean).mjava","sourceNew":"  public Map<String,Document> indexRandom(int nThreads, int iterations, int range, Directory dir,\n                                          boolean doReaderPooling) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<>();\n    IndexWriter w = RandomIndexWriter.mockIndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n             .setOpenMode(OpenMode.CREATE)\n             .setRAMBufferSizeMB(0.1)\n             .setMaxBufferedDocs(maxBufferedDocs)\n             .setReaderPooling(doReaderPooling)\n             .setMergePolicy(newLogMergePolicy()), random());\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setNoCFSRatio(0.0);\n    lmp.setMergeFactor(mergeFactor);\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    //w.forceMerge(1);\n    w.close();\n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    //System.out.println(\"TEST: checkindex\");\n    TestUtil.checkIndex(dir);\n\n    return docs;\n  }\n\n","sourceOld":"  public Map<String,Document> indexRandom(int nThreads, int iterations, int range, Directory dir, int maxThreadStates,\n                                          boolean doReaderPooling) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<>();\n    IndexWriter w = RandomIndexWriter.mockIndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n             .setOpenMode(OpenMode.CREATE)\n             .setRAMBufferSizeMB(0.1)\n             .setMaxBufferedDocs(maxBufferedDocs)\n             .setIndexerThreadPool(new DocumentsWriterPerThreadPool(maxThreadStates))\n             .setReaderPooling(doReaderPooling)\n             .setMergePolicy(newLogMergePolicy()), random());\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setNoCFSRatio(0.0);\n    lmp.setMergeFactor(mergeFactor);\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    //w.forceMerge(1);\n    w.close();\n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    //System.out.println(\"TEST: checkindex\");\n    TestUtil.checkIndex(dir);\n\n    return docs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c02b804ab16489b95429791a2d8fb0e0728354d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}