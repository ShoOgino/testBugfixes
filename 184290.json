{"path":"lucene/core/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","sourceNew":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings(\"unchecked\") final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<T>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","sourceOld":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings(\"unchecked\") final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<T>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","sourceNew":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<T>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","sourceOld":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings(\"unchecked\") final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<T>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","sourceNew":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<T>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","sourceOld":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings(\"unchecked\") final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<T>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","sourceNew":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","sourceOld":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<T>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f","date":1464187721,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","sourceNew":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        final Arc<T>[] newArcs = ArrayUtil.grow(arcs, numArcs+1);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","sourceOld":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","sourceNew":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        final Arc<T>[] newArcs = ArrayUtil.grow(arcs, numArcs+1);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","sourceOld":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","sourceNew":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        final Arc<T>[] newArcs = ArrayUtil.grow(arcs, numArcs+1);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","sourceOld":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","sourceNew":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        final Arc<T>[] newArcs = ArrayUtil.grow(arcs, numArcs+1);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","sourceOld":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4acba908070284f009e1e92d3963f4ef3c81390","date":1555948338,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","sourceNew":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[numArcs-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        final Arc<T>[] newArcs = ArrayUtil.grow(arcs, numArcs+1);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","sourceOld":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        final Arc<T>[] newArcs = ArrayUtil.grow(arcs, numArcs+1);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":5,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTCompiler.UnCompiledNode#addArc(int,Node).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","sourceNew":"    void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[numArcs-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        final Arc<T>[] newArcs = ArrayUtil.grow(arcs, numArcs+1);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","sourceOld":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[numArcs-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        final Arc<T>[] newArcs = ArrayUtil.grow(arcs, numArcs+1);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTCompiler.UnCompiledNode#addArc(int,Node).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","sourceNew":"    void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[numArcs-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        final Arc<T>[] newArcs = ArrayUtil.grow(arcs, numArcs+1);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","sourceOld":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[numArcs-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        final Arc<T>[] newArcs = ArrayUtil.grow(arcs, numArcs+1);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d4acba908070284f009e1e92d3963f4ef3c81390":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","0e121d43b5a10f2df530f406f935102656e9c4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["d4acba908070284f009e1e92d3963f4ef3c81390","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["d4acba908070284f009e1e92d3963f4ef3c81390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d4acba908070284f009e1e92d3963f4ef3c81390":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["d4acba908070284f009e1e92d3963f4ef3c81390","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}