{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens=(getBoost() != 1.0) || (getMinimumNumberShouldMatch()>0) ;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f)\n    {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens=(getBoost() != 1.0) || (getMinimumNumberShouldMatch()>0) ;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f)\n    {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens=(getBoost() != 1.0) || (getMinimumNumberShouldMatch()>0) ;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f)\n    {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens=(getBoost() != 1.0) || (getMinimumNumberShouldMatch()>0) ;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f)\n    {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea","date":1390928346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens= getBoost() != 1.0 || getMinimumNumberShouldMatch() > 0;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      if (c.isProhibited()) {\n        buffer.append(\"-\");\n      } else if (c.isRequired()) {\n        buffer.append(\"+\");\n      }\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1) {\n        buffer.append(\" \");\n      }\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f) {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens=(getBoost() != 1.0) || (getMinimumNumberShouldMatch()>0) ;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f)\n    {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":["91109046a59c58ee0ee5d0d2767b08d1f30d6702","b6bffc7c3c9ddfcefe91b728c0680af2a3a96444","0d1fc81afb0c32e0b7589e656cceb5cf177093fa"],"bugIntro":["9f324d6099b423d2c56da1afe7e9f0c327770175"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f324d6099b423d2c56da1afe7e9f0c327770175","date":1425217948,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens= getBoost() != 1.0 || getMinimumNumberShouldMatch() > 0;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      buffer.append(c.getOccur().toString());\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1) {\n        buffer.append(\" \");\n      }\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f) {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens= getBoost() != 1.0 || getMinimumNumberShouldMatch() > 0;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      if (c.isProhibited()) {\n        buffer.append(\"-\");\n      } else if (c.isRequired()) {\n        buffer.append(\"+\");\n      }\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1) {\n        buffer.append(\" \");\n      }\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f) {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":["df8dadf22de84eeb1294e70792e292ecf8ded564","ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens= getBoost() != 1.0 || getMinimumNumberShouldMatch() > 0;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      buffer.append(c.getOccur().toString());\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1) {\n        buffer.append(\" \");\n      }\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f) {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens= getBoost() != 1.0 || getMinimumNumberShouldMatch() > 0;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      if (c.isProhibited()) {\n        buffer.append(\"-\");\n      } else if (c.isRequired()) {\n        buffer.append(\"+\");\n      }\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1) {\n        buffer.append(\" \");\n      }\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f) {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens= getBoost() != 1.0 || getMinimumNumberShouldMatch() > 0;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    int i = 0;\n    for (BooleanClause c : this) {\n      buffer.append(c.getOccur().toString());\n\n      Query subQuery = c.getQuery();\n      if (subQuery instanceof BooleanQuery) {  // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subQuery.toString(field));\n        buffer.append(\")\");\n      } else {\n        buffer.append(subQuery.toString(field));\n      }\n\n      if (i != clauses.size() - 1) {\n        buffer.append(\" \");\n      }\n      i += 1;\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f) {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens= getBoost() != 1.0 || getMinimumNumberShouldMatch() > 0;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      buffer.append(c.getOccur().toString());\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1) {\n        buffer.append(\" \");\n      }\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f) {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens = getMinimumNumberShouldMatch() > 0;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    int i = 0;\n    for (BooleanClause c : this) {\n      buffer.append(c.getOccur().toString());\n\n      Query subQuery = c.getQuery();\n      if (subQuery instanceof BooleanQuery) {  // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subQuery.toString(field));\n        buffer.append(\")\");\n      } else {\n        buffer.append(subQuery.toString(field));\n      }\n\n      if (i != clauses.size() - 1) {\n        buffer.append(\" \");\n      }\n      i += 1;\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens= getBoost() != 1.0 || getMinimumNumberShouldMatch() > 0;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    int i = 0;\n    for (BooleanClause c : this) {\n      buffer.append(c.getOccur().toString());\n\n      Query subQuery = c.getQuery();\n      if (subQuery instanceof BooleanQuery) {  // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subQuery.toString(field));\n        buffer.append(\")\");\n      } else {\n        buffer.append(subQuery.toString(field));\n      }\n\n      if (i != clauses.size() - 1) {\n        buffer.append(\" \");\n      }\n      i += 1;\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f) {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["9f324d6099b423d2c56da1afe7e9f0c327770175"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea","9f324d6099b423d2c56da1afe7e9f0c327770175"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"9f324d6099b423d2c56da1afe7e9f0c327770175":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9f324d6099b423d2c56da1afe7e9f0c327770175":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9f324d6099b423d2c56da1afe7e9f0c327770175"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}