{"path":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(AtomicReaderContext).mjava","commits":[{"id":"c8fda790e002fff32e201cbd0f7bed4c2b333a64","date":1309401082,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) throws IOException {\n      final int[] values = FieldCache.DEFAULT.getInts(context.reader, INT_FIELD);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= context.reader.maxDoc());\n          return values[doc];\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) throws IOException {\n      final int[] values = FieldCache.DEFAULT.getInts(context.reader, INT_FIELD);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= context.reader.maxDoc());\n          return values[doc];\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) throws IOException {\n      final int[] values = FieldCache.DEFAULT.getInts(context.reader, INT_FIELD);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= context.reader.maxDoc());\n          return values[doc];\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) throws IOException {\n      final int[] values = FieldCache.DEFAULT.getInts(context.reader, INT_FIELD);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= context.reader.maxDoc());\n          return values[doc];\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) throws IOException {\n      final int[] values = FieldCache.DEFAULT.getInts(context.reader, INT_FIELD);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= context.reader.maxDoc());\n          return values[doc];\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) throws IOException {\n      final int[] values = FieldCache.DEFAULT.getInts(context.reader, INT_FIELD);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= context.reader.maxDoc());\n          return values[doc];\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(AtomicReaderContext).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) throws IOException {\n      final int[] values = FieldCache.DEFAULT.getInts(context.reader, INT_FIELD, false);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= context.reader.maxDoc());\n          return values[doc];\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) throws IOException {\n      final int[] values = FieldCache.DEFAULT.getInts(context.reader, INT_FIELD);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= context.reader.maxDoc());\n          return values[doc];\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61e20f33ce8ff701576366fdb03955eded5f209b","date":1327852832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(AtomicReaderContext).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) throws IOException {\n      final int[] values = FieldCache.DEFAULT.getInts(context.reader(), INT_FIELD, false);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= context.reader().maxDoc());\n          return values[doc];\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) throws IOException {\n      final int[] values = FieldCache.DEFAULT.getInts(context.reader, INT_FIELD, false);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= context.reader.maxDoc());\n          return values[doc];\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(AtomicReaderContext).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) throws IOException {\n      final int[] values = FieldCache.DEFAULT.getInts(context.reader(), INT_FIELD, false);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= context.reader().maxDoc());\n          return values[doc];\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) throws IOException {\n      final int[] values = FieldCache.DEFAULT.getInts(context.reader, INT_FIELD, false);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= context.reader.maxDoc());\n          return values[doc];\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(AtomicReaderContext).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) throws IOException {\n      final int[] values = FieldCache.DEFAULT.getInts(context.reader(), INT_FIELD, false);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= context.reader().maxDoc());\n          return values[doc];\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(AtomicReaderContext context) throws IOException {\n      final int[] values = FieldCache.DEFAULT.getInts(context.reader(), INT_FIELD, false);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= context.reader().maxDoc());\n          return values[doc];\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61e20f33ce8ff701576366fdb03955eded5f209b":["382fe3a6ca9745891afebda9b9a57cc158305545"],"382fe3a6ca9745891afebda9b9a57cc158305545":["c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["382fe3a6ca9745891afebda9b9a57cc158305545","61e20f33ce8ff701576366fdb03955eded5f209b"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["382fe3a6ca9745891afebda9b9a57cc158305545","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8fda790e002fff32e201cbd0f7bed4c2b333a64","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"61e20f33ce8ff701576366fdb03955eded5f209b":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"382fe3a6ca9745891afebda9b9a57cc158305545":["61e20f33ce8ff701576366fdb03955eded5f209b","5cab9a86bd67202d20b6adc463008c8e982b070a"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}