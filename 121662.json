{"path":"src/java/org/apache/lucene/util/IndexableBinaryStringTools#getEncodedLength(ByteBuffer).mjava","commits":[{"id":"14f9435cf56ea1dc1185ffc60bcc94728ff9bf03","date":1237412151,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/IndexableBinaryStringTools#getEncodedLength(ByteBuffer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the number of chars required to encode the given byte sequence.\n   * \n   * @param original The byte sequence to be encoded.  Must be backed by an array.\n   * @return The number of chars required to encode the given byte sequence\n   * @throws IllegalArgumentException If the given ByteBuffer is not backed by an array\n   */\n  public static int getEncodedLength(ByteBuffer original) \n    throws IllegalArgumentException {\n    if (original.hasArray()) {\n      // Use long for intermediaries to protect against overflow\n      long length = (long)(original.limit() - original.arrayOffset());\n      return (int)((length * 8L + 14L) / 15L) + 1;\n    } else {\n      throw new IllegalArgumentException(\"original argument must have a backing array\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb6255bc49ccd64debd0b43ca8d2f835df0faa07","date":1262510560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/IndexableBinaryStringTools#getEncodedLength(ByteBuffer).mjava","pathOld":"src/java/org/apache/lucene/util/IndexableBinaryStringTools#getEncodedLength(ByteBuffer).mjava","sourceNew":"  /**\n   * Returns the number of chars required to encode the given byte sequence.\n   * \n   * @param original The byte sequence to be encoded. Must be backed by an\n   *        array.\n   * @return The number of chars required to encode the given byte sequence\n   * @throws IllegalArgumentException If the given ByteBuffer is not backed by\n   *         an array\n   * @deprecated Use {@link #getEncodedLength(byte[], int, int)} instead. This\n   *             method will be removed in Lucene 4.0\n   */\n  @Deprecated\n  public static int getEncodedLength(ByteBuffer original)\n    throws IllegalArgumentException {\n    if (original.hasArray()) {\n      return getEncodedLength(original.array(), original.arrayOffset(),\n          original.limit() - original.arrayOffset());\n    } else {\n      throw new IllegalArgumentException(\"original argument must have a backing array\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the number of chars required to encode the given byte sequence.\n   * \n   * @param original The byte sequence to be encoded.  Must be backed by an array.\n   * @return The number of chars required to encode the given byte sequence\n   * @throws IllegalArgumentException If the given ByteBuffer is not backed by an array\n   */\n  public static int getEncodedLength(ByteBuffer original) \n    throws IllegalArgumentException {\n    if (original.hasArray()) {\n      // Use long for intermediaries to protect against overflow\n      long length = (long)(original.limit() - original.arrayOffset());\n      return (int)((length * 8L + 14L) / 15L) + 1;\n    } else {\n      throw new IllegalArgumentException(\"original argument must have a backing array\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/IndexableBinaryStringTools#getEncodedLength(ByteBuffer).mjava","pathOld":"src/java/org/apache/lucene/util/IndexableBinaryStringTools#getEncodedLength(ByteBuffer).mjava","sourceNew":"  /**\n   * Returns the number of chars required to encode the given byte sequence.\n   * \n   * @param original The byte sequence to be encoded. Must be backed by an\n   *        array.\n   * @return The number of chars required to encode the given byte sequence\n   * @throws IllegalArgumentException If the given ByteBuffer is not backed by\n   *         an array\n   * @deprecated Use {@link #getEncodedLength(byte[], int, int)} instead. This\n   *             method will be removed in Lucene 4.0\n   */\n  @Deprecated\n  public static int getEncodedLength(ByteBuffer original)\n    throws IllegalArgumentException {\n    if (original.hasArray()) {\n      return getEncodedLength(original.array(), original.arrayOffset(),\n          original.limit() - original.arrayOffset());\n    } else {\n      throw new IllegalArgumentException(\"original argument must have a backing array\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the number of chars required to encode the given byte sequence.\n   * \n   * @param original The byte sequence to be encoded. Must be backed by an\n   *        array.\n   * @return The number of chars required to encode the given byte sequence\n   * @throws IllegalArgumentException If the given ByteBuffer is not backed by\n   *         an array\n   * @deprecated Use {@link #getEncodedLength(byte[], int, int)} instead. This\n   *             method will be removed in Lucene 4.0\n   */\n  @Deprecated\n  public static int getEncodedLength(ByteBuffer original)\n    throws IllegalArgumentException {\n    if (original.hasArray()) {\n      return getEncodedLength(original.array(), original.arrayOffset(),\n          original.limit() - original.arrayOffset());\n    } else {\n      throw new IllegalArgumentException(\"original argument must have a backing array\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb6255bc49ccd64debd0b43ca8d2f835df0faa07":["14f9435cf56ea1dc1185ffc60bcc94728ff9bf03"],"14f9435cf56ea1dc1185ffc60bcc94728ff9bf03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fb6255bc49ccd64debd0b43ca8d2f835df0faa07"]},"commit2Childs":{"fb6255bc49ccd64debd0b43ca8d2f835df0faa07":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"14f9435cf56ea1dc1185ffc60bcc94728ff9bf03":["fb6255bc49ccd64debd0b43ca8d2f835df0faa07"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["14f9435cf56ea1dc1185ffc60bcc94728ff9bf03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}