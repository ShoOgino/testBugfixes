{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration.TestLiveNodesListener#onChange(SortedSet[String],SortedSet[String]).mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration.TestLiveNodesListener#onChange(SortedSet[String],SortedSet[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration.TestLiveNodesListener#onChange(SortedSet[String],SortedSet[String]).mjava","sourceNew":"    @Override\n    public void onChange(SortedSet<String> oldLiveNodes, SortedSet<String> newLiveNodes) {\n      onChangeLatch.countDown();\n      Set<String> old = new HashSet<>(oldLiveNodes);\n      old.removeAll(newLiveNodes);\n      if (!old.isEmpty()) {\n        lostNodes.addAll(old);\n      }\n      newLiveNodes.removeAll(oldLiveNodes);\n      if (!newLiveNodes.isEmpty()) {\n        addedNodes.addAll(newLiveNodes);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void onChange(SortedSet<String> oldLiveNodes, SortedSet<String> newLiveNodes) {\n      onChangeLatch.countDown();\n      Set<String> old = new HashSet<>(oldLiveNodes);\n      old.removeAll(newLiveNodes);\n      if (!old.isEmpty()) {\n        lostNodes.addAll(old);\n      }\n      newLiveNodes.removeAll(oldLiveNodes);\n      if (!newLiveNodes.isEmpty()) {\n        addedNodes.addAll(newLiveNodes);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration.TestLiveNodesListener#onChange(SortedSet[String],SortedSet[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration.TestLiveNodesListener#onChange(SortedSet[String],SortedSet[String]).mjava","sourceNew":"    @Override\n    public boolean onChange(SortedSet<String> oldLiveNodes, SortedSet<String> newLiveNodes) {\n      onChangeLatch.countDown();\n      Set<String> old = new HashSet<>(oldLiveNodes);\n      old.removeAll(newLiveNodes);\n      if (!old.isEmpty()) {\n        lostNodes.addAll(old);\n      }\n      newLiveNodes.removeAll(oldLiveNodes);\n      if (!newLiveNodes.isEmpty()) {\n        addedNodes.addAll(newLiveNodes);\n      }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public void onChange(SortedSet<String> oldLiveNodes, SortedSet<String> newLiveNodes) {\n      onChangeLatch.countDown();\n      Set<String> old = new HashSet<>(oldLiveNodes);\n      old.removeAll(newLiveNodes);\n      if (!old.isEmpty()) {\n        lostNodes.addAll(old);\n      }\n      newLiveNodes.removeAll(oldLiveNodes);\n      if (!newLiveNodes.isEmpty()) {\n        addedNodes.addAll(newLiveNodes);\n      }\n    }\n\n","bugFix":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration.TestLiveNodesListener#onChange(SortedSet[String],SortedSet[String]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public boolean onChange(SortedSet<String> oldLiveNodes, SortedSet<String> newLiveNodes) {\n      onChangeLatch.countDown();\n      Set<String> old = new HashSet<>(oldLiveNodes);\n      old.removeAll(newLiveNodes);\n      if (!old.isEmpty()) {\n        lostNodes.addAll(old);\n      }\n      newLiveNodes.removeAll(oldLiveNodes);\n      if (!newLiveNodes.isEmpty()) {\n        addedNodes.addAll(newLiveNodes);\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}