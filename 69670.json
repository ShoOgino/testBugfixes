{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl#escapeChar(CharSequence,Locale).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl#escapeChar(CharSequence,Locale).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl#escapeChar(CharSequence,Locale).mjava","sourceNew":"  private static final CharSequence escapeChar(CharSequence str, Locale locale) {\n    if (str == null || str.length() == 0)\n      return str;\n\n    CharSequence buffer = str;\n\n    // regular escapable Char for terms\n    for (int i = 0; i < escapableTermChars.length; i++) {\n      buffer = replaceIgnoreCase(buffer, escapableTermChars[i].toLowerCase(),\n          \"\\\\\", locale);\n    }\n\n    // First Character of a term as more escaping chars\n    for (int i = 0; i < escapableTermExtraFirstChars.length; i++) {\n      if (buffer.charAt(0) == escapableTermExtraFirstChars[i].charAt(0)) {\n        buffer = \"\\\\\" + buffer.charAt(0)\n            + buffer.subSequence(1, buffer.length());\n        break;\n      }\n    }\n\n    return buffer;\n  }\n\n","sourceOld":"  private static final CharSequence escapeChar(CharSequence str, Locale locale) {\n    if (str == null || str.length() == 0)\n      return str;\n\n    CharSequence buffer = str;\n\n    // regular escapable Char for terms\n    for (int i = 0; i < escapableTermChars.length; i++) {\n      buffer = replaceIgnoreCase(buffer, escapableTermChars[i].toLowerCase(),\n          \"\\\\\", locale);\n    }\n\n    // First Character of a term as more escaping chars\n    for (int i = 0; i < escapableTermExtraFirstChars.length; i++) {\n      if (buffer.charAt(0) == escapableTermExtraFirstChars[i].charAt(0)) {\n        buffer = \"\\\\\" + buffer.charAt(0)\n            + buffer.subSequence(1, buffer.length());\n        break;\n      }\n    }\n\n    return buffer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae81ef60a860c551619f7702a13ba15f7dc024f5","date":1341796635,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl#escapeChar(CharSequence,Locale).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl#escapeChar(CharSequence,Locale).mjava","sourceNew":"  private static final CharSequence escapeChar(CharSequence str, Locale locale) {\n    if (str == null || str.length() == 0)\n      return str;\n\n    CharSequence buffer = str;\n\n    // regular escapable Char for terms\n    for (int i = 0; i < escapableTermChars.length; i++) {\n      buffer = replaceIgnoreCase(buffer, escapableTermChars[i].toLowerCase(locale),\n          \"\\\\\", locale);\n    }\n\n    // First Character of a term as more escaping chars\n    for (int i = 0; i < escapableTermExtraFirstChars.length; i++) {\n      if (buffer.charAt(0) == escapableTermExtraFirstChars[i].charAt(0)) {\n        buffer = \"\\\\\" + buffer.charAt(0)\n            + buffer.subSequence(1, buffer.length());\n        break;\n      }\n    }\n\n    return buffer;\n  }\n\n","sourceOld":"  private static final CharSequence escapeChar(CharSequence str, Locale locale) {\n    if (str == null || str.length() == 0)\n      return str;\n\n    CharSequence buffer = str;\n\n    // regular escapable Char for terms\n    for (int i = 0; i < escapableTermChars.length; i++) {\n      buffer = replaceIgnoreCase(buffer, escapableTermChars[i].toLowerCase(),\n          \"\\\\\", locale);\n    }\n\n    // First Character of a term as more escaping chars\n    for (int i = 0; i < escapableTermExtraFirstChars.length; i++) {\n      if (buffer.charAt(0) == escapableTermExtraFirstChars[i].charAt(0)) {\n        buffer = \"\\\\\" + buffer.charAt(0)\n            + buffer.subSequence(1, buffer.length());\n        break;\n      }\n    }\n\n    return buffer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl#escapeChar(CharSequence,Locale).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl#escapeChar(CharSequence,Locale).mjava","sourceNew":"  private static final CharSequence escapeChar(CharSequence str, Locale locale) {\n    if (str == null || str.length() == 0)\n      return str;\n\n    CharSequence buffer = str;\n\n    // regular escapable Char for terms\n    for (int i = 0; i < escapableTermChars.length; i++) {\n      buffer = replaceIgnoreCase(buffer, escapableTermChars[i].toLowerCase(locale),\n          \"\\\\\", locale);\n    }\n\n    // First Character of a term as more escaping chars\n    for (int i = 0; i < escapableTermExtraFirstChars.length; i++) {\n      if (buffer.charAt(0) == escapableTermExtraFirstChars[i].charAt(0)) {\n        buffer = \"\\\\\" + buffer.charAt(0)\n            + buffer.subSequence(1, buffer.length());\n        break;\n      }\n    }\n\n    return buffer;\n  }\n\n","sourceOld":"  private static final CharSequence escapeChar(CharSequence str, Locale locale) {\n    if (str == null || str.length() == 0)\n      return str;\n\n    CharSequence buffer = str;\n\n    // regular escapable Char for terms\n    for (int i = 0; i < escapableTermChars.length; i++) {\n      buffer = replaceIgnoreCase(buffer, escapableTermChars[i].toLowerCase(),\n          \"\\\\\", locale);\n    }\n\n    // First Character of a term as more escaping chars\n    for (int i = 0; i < escapableTermExtraFirstChars.length; i++) {\n      if (buffer.charAt(0) == escapableTermExtraFirstChars[i].charAt(0)) {\n        buffer = \"\\\\\" + buffer.charAt(0)\n            + buffer.subSequence(1, buffer.length());\n        break;\n      }\n    }\n\n    return buffer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl#escapeChar(CharSequence,Locale).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl#escapeChar(CharSequence,Locale).mjava","sourceNew":"  private static final CharSequence escapeChar(CharSequence str, Locale locale) {\n    if (str == null || str.length() == 0)\n      return str;\n\n    CharSequence buffer = str;\n\n    // regular escapable Char for terms\n    for (int i = 0; i < escapableTermChars.length; i++) {\n      buffer = replaceIgnoreCase(buffer, escapableTermChars[i].toLowerCase(locale),\n          \"\\\\\", locale);\n    }\n\n    // First Character of a term as more escaping chars\n    for (int i = 0; i < escapableTermExtraFirstChars.length; i++) {\n      if (buffer.charAt(0) == escapableTermExtraFirstChars[i].charAt(0)) {\n        buffer = \"\\\\\" + buffer.charAt(0)\n            + buffer.subSequence(1, buffer.length());\n        break;\n      }\n    }\n\n    return buffer;\n  }\n\n","sourceOld":"  private static final CharSequence escapeChar(CharSequence str, Locale locale) {\n    if (str == null || str.length() == 0)\n      return str;\n\n    CharSequence buffer = str;\n\n    // regular escapable Char for terms\n    for (int i = 0; i < escapableTermChars.length; i++) {\n      buffer = replaceIgnoreCase(buffer, escapableTermChars[i].toLowerCase(),\n          \"\\\\\", locale);\n    }\n\n    // First Character of a term as more escaping chars\n    for (int i = 0; i < escapableTermExtraFirstChars.length; i++) {\n      if (buffer.charAt(0) == escapableTermExtraFirstChars[i].charAt(0)) {\n        buffer = \"\\\\\" + buffer.charAt(0)\n            + buffer.subSequence(1, buffer.length());\n        break;\n      }\n    }\n\n    return buffer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl#escapeChar(CharSequence,Locale).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl#escapeChar(CharSequence,Locale).mjava","sourceNew":"  private static final CharSequence escapeChar(CharSequence str, Locale locale) {\n    if (str == null || str.length() == 0)\n      return str;\n\n    CharSequence buffer = str;\n\n    // regular escapable Char for terms\n    for (int i = 0; i < escapableTermChars.length; i++) {\n      buffer = replaceIgnoreCase(buffer, escapableTermChars[i].toLowerCase(locale),\n          \"\\\\\", locale);\n    }\n\n    // First Character of a term as more escaping chars\n    for (int i = 0; i < escapableTermExtraFirstChars.length; i++) {\n      if (buffer.charAt(0) == escapableTermExtraFirstChars[i].charAt(0)) {\n        buffer = \"\\\\\" + buffer.charAt(0)\n            + buffer.subSequence(1, buffer.length());\n        break;\n      }\n    }\n\n    return buffer;\n  }\n\n","sourceOld":"  private static final CharSequence escapeChar(CharSequence str, Locale locale) {\n    if (str == null || str.length() == 0)\n      return str;\n\n    CharSequence buffer = str;\n\n    // regular escapable Char for terms\n    for (int i = 0; i < escapableTermChars.length; i++) {\n      buffer = replaceIgnoreCase(buffer, escapableTermChars[i].toLowerCase(),\n          \"\\\\\", locale);\n    }\n\n    // First Character of a term as more escaping chars\n    for (int i = 0; i < escapableTermExtraFirstChars.length; i++) {\n      if (buffer.charAt(0) == escapableTermExtraFirstChars[i].charAt(0)) {\n        buffer = \"\\\\\" + buffer.charAt(0)\n            + buffer.subSequence(1, buffer.length());\n        break;\n      }\n    }\n\n    return buffer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae81ef60a860c551619f7702a13ba15f7dc024f5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ae81ef60a860c551619f7702a13ba15f7dc024f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2acf500f78aa12b92e371fd89c719291986b6b90"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ae81ef60a860c551619f7702a13ba15f7dc024f5","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"ae81ef60a860c551619f7702a13ba15f7dc024f5":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}