{"path":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testBasicAutomata().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testBasicAutomata().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestAutomatonQuery#testBasicAutomata().mjava","sourceNew":"  /**\n   * Test some very simple automata.\n   */\n  public void testBasicAutomata() throws IOException {\n    assertAutomatonHits(0, BasicAutomata.makeEmpty());\n    assertAutomatonHits(0, BasicAutomata.makeEmptyString());\n    assertAutomatonHits(2, BasicAutomata.makeAnyChar());\n    assertAutomatonHits(3, BasicAutomata.makeAnyString());\n    assertAutomatonHits(2, BasicAutomata.makeString(\"doc\"));\n    assertAutomatonHits(1, BasicAutomata.makeChar('a'));\n    assertAutomatonHits(2, BasicAutomata.makeCharRange('a', 'b'));\n    assertAutomatonHits(2, BasicAutomata.makeInterval(1233, 2346, 0));\n    assertAutomatonHits(1, BasicAutomata.makeInterval(0, 2000, 0));\n    assertAutomatonHits(2, BasicOperations.union(BasicAutomata.makeChar('a'),\n        BasicAutomata.makeChar('b')));\n    assertAutomatonHits(0, BasicOperations.intersection(BasicAutomata\n        .makeChar('a'), BasicAutomata.makeChar('b')));\n    assertAutomatonHits(1, BasicOperations.minus(BasicAutomata.makeCharRange('a', 'b'), \n        BasicAutomata.makeChar('a')));\n  }\n\n","sourceOld":"  /**\n   * Test some very simple automata.\n   */\n  public void testBasicAutomata() throws IOException {\n    assertAutomatonHits(0, BasicAutomata.makeEmpty());\n    assertAutomatonHits(0, BasicAutomata.makeEmptyString());\n    assertAutomatonHits(2, BasicAutomata.makeAnyChar());\n    assertAutomatonHits(3, BasicAutomata.makeAnyString());\n    assertAutomatonHits(2, BasicAutomata.makeString(\"doc\"));\n    assertAutomatonHits(1, BasicAutomata.makeChar('a'));\n    assertAutomatonHits(2, BasicAutomata.makeCharRange('a', 'b'));\n    assertAutomatonHits(2, BasicAutomata.makeInterval(1233, 2346, 0));\n    assertAutomatonHits(1, BasicAutomata.makeInterval(0, 2000, 0));\n    assertAutomatonHits(2, BasicOperations.union(BasicAutomata.makeChar('a'),\n        BasicAutomata.makeChar('b')));\n    assertAutomatonHits(0, BasicOperations.intersection(BasicAutomata\n        .makeChar('a'), BasicAutomata.makeChar('b')));\n    assertAutomatonHits(1, BasicOperations.minus(BasicAutomata.makeCharRange('a', 'b'), \n        BasicAutomata.makeChar('a')));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testBasicAutomata().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testBasicAutomata().mjava","sourceNew":"  /**\n   * Test some very simple automata.\n   */\n  public void testBasicAutomata() throws IOException {\n\n    // nocommit\n    assertAutomatonHits(2, BasicAutomata.makeIntervalLight(1233, 2346, 0));\n\n    assertAutomatonHits(0, BasicAutomata.makeEmptyLight());\n    assertAutomatonHits(0, BasicAutomata.makeEmptyStringLight());\n    assertAutomatonHits(2, BasicAutomata.makeAnyCharLight());\n    assertAutomatonHits(3, BasicAutomata.makeAnyStringLight());\n    assertAutomatonHits(2, BasicAutomata.makeStringLight(\"doc\"));\n    assertAutomatonHits(1, BasicAutomata.makeCharLight('a'));\n    assertAutomatonHits(2, BasicAutomata.makeCharRangeLight('a', 'b'));\n    assertAutomatonHits(2, BasicAutomata.makeIntervalLight(1233, 2346, 0));\n    assertAutomatonHits(1, BasicAutomata.makeIntervalLight(0, 2000, 0));\n    assertAutomatonHits(2, BasicOperations.unionLight(BasicAutomata.makeCharLight('a'),\n        BasicAutomata.makeCharLight('b')));\n    assertAutomatonHits(0, BasicOperations.intersectionLight(BasicAutomata\n        .makeCharLight('a'), BasicAutomata.makeCharLight('b')));\n    assertAutomatonHits(1, BasicOperations.minusLight(BasicAutomata.makeCharRangeLight('a', 'b'), \n        BasicAutomata.makeCharLight('a')));\n  }\n\n","sourceOld":"  /**\n   * Test some very simple automata.\n   */\n  public void testBasicAutomata() throws IOException {\n    assertAutomatonHits(0, BasicAutomata.makeEmpty());\n    assertAutomatonHits(0, BasicAutomata.makeEmptyString());\n    assertAutomatonHits(2, BasicAutomata.makeAnyChar());\n    assertAutomatonHits(3, BasicAutomata.makeAnyString());\n    assertAutomatonHits(2, BasicAutomata.makeString(\"doc\"));\n    assertAutomatonHits(1, BasicAutomata.makeChar('a'));\n    assertAutomatonHits(2, BasicAutomata.makeCharRange('a', 'b'));\n    assertAutomatonHits(2, BasicAutomata.makeInterval(1233, 2346, 0));\n    assertAutomatonHits(1, BasicAutomata.makeInterval(0, 2000, 0));\n    assertAutomatonHits(2, BasicOperations.union(BasicAutomata.makeChar('a'),\n        BasicAutomata.makeChar('b')));\n    assertAutomatonHits(0, BasicOperations.intersection(BasicAutomata\n        .makeChar('a'), BasicAutomata.makeChar('b')));\n    assertAutomatonHits(1, BasicOperations.minus(BasicAutomata.makeCharRange('a', 'b'), \n        BasicAutomata.makeChar('a')));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testBasicAutomata().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testBasicAutomata().mjava","sourceNew":"  /**\n   * Test some very simple automata.\n   */\n  public void testBasicAutomata() throws IOException {\n    assertAutomatonHits(0, BasicAutomata.makeEmptyLight());\n    assertAutomatonHits(0, BasicAutomata.makeEmptyStringLight());\n    assertAutomatonHits(2, BasicAutomata.makeAnyCharLight());\n    assertAutomatonHits(3, BasicAutomata.makeAnyStringLight());\n    assertAutomatonHits(2, BasicAutomata.makeStringLight(\"doc\"));\n    assertAutomatonHits(1, BasicAutomata.makeCharLight('a'));\n    assertAutomatonHits(2, BasicAutomata.makeCharRangeLight('a', 'b'));\n    assertAutomatonHits(2, BasicAutomata.makeIntervalLight(1233, 2346, 0));\n    assertAutomatonHits(1, BasicAutomata.makeIntervalLight(0, 2000, 0));\n    assertAutomatonHits(2, BasicOperations.unionLight(BasicAutomata.makeCharLight('a'),\n        BasicAutomata.makeCharLight('b')));\n    assertAutomatonHits(0, BasicOperations.intersectionLight(BasicAutomata\n        .makeCharLight('a'), BasicAutomata.makeCharLight('b')));\n    assertAutomatonHits(1, BasicOperations.minusLight(BasicAutomata.makeCharRangeLight('a', 'b'), \n        BasicAutomata.makeCharLight('a')));\n  }\n\n","sourceOld":"  /**\n   * Test some very simple automata.\n   */\n  public void testBasicAutomata() throws IOException {\n\n    // nocommit\n    assertAutomatonHits(2, BasicAutomata.makeIntervalLight(1233, 2346, 0));\n\n    assertAutomatonHits(0, BasicAutomata.makeEmptyLight());\n    assertAutomatonHits(0, BasicAutomata.makeEmptyStringLight());\n    assertAutomatonHits(2, BasicAutomata.makeAnyCharLight());\n    assertAutomatonHits(3, BasicAutomata.makeAnyStringLight());\n    assertAutomatonHits(2, BasicAutomata.makeStringLight(\"doc\"));\n    assertAutomatonHits(1, BasicAutomata.makeCharLight('a'));\n    assertAutomatonHits(2, BasicAutomata.makeCharRangeLight('a', 'b'));\n    assertAutomatonHits(2, BasicAutomata.makeIntervalLight(1233, 2346, 0));\n    assertAutomatonHits(1, BasicAutomata.makeIntervalLight(0, 2000, 0));\n    assertAutomatonHits(2, BasicOperations.unionLight(BasicAutomata.makeCharLight('a'),\n        BasicAutomata.makeCharLight('b')));\n    assertAutomatonHits(0, BasicOperations.intersectionLight(BasicAutomata\n        .makeCharLight('a'), BasicAutomata.makeCharLight('b')));\n    assertAutomatonHits(1, BasicOperations.minusLight(BasicAutomata.makeCharRangeLight('a', 'b'), \n        BasicAutomata.makeCharLight('a')));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testBasicAutomata().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test some very simple automata.\n   */\n  public void testBasicAutomata() throws IOException {\n    assertAutomatonHits(0, BasicAutomata.makeEmptyLight());\n    assertAutomatonHits(0, BasicAutomata.makeEmptyStringLight());\n    assertAutomatonHits(2, BasicAutomata.makeAnyCharLight());\n    assertAutomatonHits(3, BasicAutomata.makeAnyStringLight());\n    assertAutomatonHits(2, BasicAutomata.makeStringLight(\"doc\"));\n    assertAutomatonHits(1, BasicAutomata.makeCharLight('a'));\n    assertAutomatonHits(2, BasicAutomata.makeCharRangeLight('a', 'b'));\n    assertAutomatonHits(2, BasicAutomata.makeIntervalLight(1233, 2346, 0));\n    assertAutomatonHits(1, BasicAutomata.makeIntervalLight(0, 2000, 0));\n    assertAutomatonHits(2, BasicOperations.unionLight(BasicAutomata.makeCharLight('a'),\n        BasicAutomata.makeCharLight('b')));\n    assertAutomatonHits(0, BasicOperations.intersectionLight(BasicAutomata\n        .makeCharLight('a'), BasicAutomata.makeCharLight('b')));\n    assertAutomatonHits(1, BasicOperations.minusLight(BasicAutomata.makeCharRangeLight('a', 'b'), \n        BasicAutomata.makeCharLight('a')));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testBasicAutomata().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test some very simple automata.\n   */\n  public void testBasicAutomata() throws IOException {\n    assertAutomatonHits(0, BasicAutomata.makeEmpty());\n    assertAutomatonHits(0, BasicAutomata.makeEmptyString());\n    assertAutomatonHits(2, BasicAutomata.makeAnyChar());\n    assertAutomatonHits(3, BasicAutomata.makeAnyString());\n    assertAutomatonHits(2, BasicAutomata.makeString(\"doc\"));\n    assertAutomatonHits(1, BasicAutomata.makeChar('a'));\n    assertAutomatonHits(2, BasicAutomata.makeCharRange('a', 'b'));\n    assertAutomatonHits(2, BasicAutomata.makeInterval(1233, 2346, 0));\n    assertAutomatonHits(1, BasicAutomata.makeInterval(0, 2000, 0));\n    assertAutomatonHits(2, BasicOperations.union(BasicAutomata.makeChar('a'),\n        BasicAutomata.makeChar('b')));\n    assertAutomatonHits(0, BasicOperations.intersection(BasicAutomata\n        .makeChar('a'), BasicAutomata.makeChar('b')));\n    assertAutomatonHits(1, BasicOperations.minus(BasicAutomata.makeCharRange('a', 'b'), \n        BasicAutomata.makeChar('a')));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}