{"path":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testBadRequestInSetQuery().mjava","commits":[{"id":"92f8ab19a30ff70981e43b8cc78069cb0941476e","date":1497374252,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testBadRequestInSetQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBadRequestInSetQuery() throws SyntaxError {\n    SolrQueryRequest req = req();\n    QParser qParser;\n    String[] fieldSuffix = new String[] {\n        \"ti\", \"tf\", \"td\", \"tl\",\n        \"i\", \"f\", \"d\", \"l\",\n        \"is\", \"fs\", \"ds\", \"ls\",\n        \"i_dv\", \"f_dv\", \"d_dv\", \"l_dv\",\n        \"is_dv\", \"fs_dv\", \"ds_dv\", \"ls_dv\",\n        \"i_dvo\", \"f_dvo\", \"d_dvo\", \"l_dvo\",\n    };\n    \n    for (String suffix:fieldSuffix) {\n      //Good queries\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 25)\", req);\n      qParser.setIsFilter(true);\n      qParser.getQuery();\n    }\n    \n    for (String suffix:fieldSuffix) {\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 NOT_A_NUMBER)\", req);\n      qParser.setIsFilter(true); // this may change in the future\n      try {\n        qParser.getQuery();\n        fail(\"Expecting exception\");\n      } catch (SolrException e) {\n        assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n        assertTrue(\"Unexpected exception: \" + e.getMessage(), e.getMessage().contains(\"Invalid Number: NOT_A_NUMBER\"));\n      }\n    }\n    \n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testBadRequestInSetQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBadRequestInSetQuery() throws SyntaxError {\n    SolrQueryRequest req = req();\n    QParser qParser;\n    String[] fieldSuffix = new String[] {\n        \"ti\", \"tf\", \"td\", \"tl\",\n        \"i\", \"f\", \"d\", \"l\",\n        \"is\", \"fs\", \"ds\", \"ls\",\n        \"i_dv\", \"f_dv\", \"d_dv\", \"l_dv\",\n        \"is_dv\", \"fs_dv\", \"ds_dv\", \"ls_dv\",\n        \"i_dvo\", \"f_dvo\", \"d_dvo\", \"l_dvo\",\n    };\n    \n    for (String suffix:fieldSuffix) {\n      //Good queries\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 25)\", req);\n      qParser.setIsFilter(true);\n      qParser.getQuery();\n    }\n    \n    for (String suffix:fieldSuffix) {\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 NOT_A_NUMBER)\", req);\n      qParser.setIsFilter(true); // this may change in the future\n      try {\n        qParser.getQuery();\n        fail(\"Expecting exception\");\n      } catch (SolrException e) {\n        assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n        assertTrue(\"Unexpected exception: \" + e.getMessage(), e.getMessage().contains(\"Invalid Number: NOT_A_NUMBER\"));\n      }\n    }\n    \n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testBadRequestInSetQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBadRequestInSetQuery() throws SyntaxError {\n    SolrQueryRequest req = req();\n    QParser qParser;\n    String[] fieldSuffix = new String[] {\n        \"ti\", \"tf\", \"td\", \"tl\",\n        \"i\", \"f\", \"d\", \"l\",\n        \"is\", \"fs\", \"ds\", \"ls\",\n        \"i_dv\", \"f_dv\", \"d_dv\", \"l_dv\",\n        \"is_dv\", \"fs_dv\", \"ds_dv\", \"ls_dv\",\n        \"i_dvo\", \"f_dvo\", \"d_dvo\", \"l_dvo\",\n    };\n    \n    for (String suffix:fieldSuffix) {\n      //Good queries\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 25)\", req);\n      qParser.setIsFilter(true);\n      qParser.getQuery();\n    }\n    \n    for (String suffix:fieldSuffix) {\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 NOT_A_NUMBER)\", req);\n      qParser.setIsFilter(true); // this may change in the future\n      try {\n        qParser.getQuery();\n        fail(\"Expecting exception\");\n      } catch (SolrException e) {\n        assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n        assertTrue(\"Unexpected exception: \" + e.getMessage(), e.getMessage().contains(\"Invalid Number: NOT_A_NUMBER\"));\n      }\n    }\n    \n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464e7336798bc8a1281d5cf610c649c5a0784e83","date":1541256496,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testBadRequestInSetQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testBadRequestInSetQuery().mjava","sourceNew":"  @Test\n  public void testBadRequestInSetQuery() throws SyntaxError {\n    SolrQueryRequest req = req();\n    QParser qParser;\n    String[] fieldSuffix = new String[] {\n        \"ti\", \"tf\", \"td\", \"tl\",\n        \"i\", \"f\", \"d\", \"l\",\n        \"is\", \"fs\", \"ds\", \"ls\",\n        \"i_dv\", \"f_dv\", \"d_dv\", \"l_dv\",\n        \"is_dv\", \"fs_dv\", \"ds_dv\", \"ls_dv\",\n        \"i_dvo\", \"f_dvo\", \"d_dvo\", \"l_dvo\",\n    };\n    \n    for (String suffix:fieldSuffix) {\n      //Good queries\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 25)\", req);\n      qParser.setIsFilter(true);\n      qParser.getQuery();\n    }\n    \n    for (String suffix:fieldSuffix) {\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 NOT_A_NUMBER)\", req);\n      qParser.setIsFilter(true); // this may change in the future\n      SolrException e = expectThrows(SolrException.class, \"Expecting exception\", qParser::getQuery);\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(\"Unexpected exception: \" + e.getMessage(), e.getMessage().contains(\"Invalid Number: NOT_A_NUMBER\"));\n    }\n    \n    \n  }\n\n","sourceOld":"  @Test\n  public void testBadRequestInSetQuery() throws SyntaxError {\n    SolrQueryRequest req = req();\n    QParser qParser;\n    String[] fieldSuffix = new String[] {\n        \"ti\", \"tf\", \"td\", \"tl\",\n        \"i\", \"f\", \"d\", \"l\",\n        \"is\", \"fs\", \"ds\", \"ls\",\n        \"i_dv\", \"f_dv\", \"d_dv\", \"l_dv\",\n        \"is_dv\", \"fs_dv\", \"ds_dv\", \"ls_dv\",\n        \"i_dvo\", \"f_dvo\", \"d_dvo\", \"l_dvo\",\n    };\n    \n    for (String suffix:fieldSuffix) {\n      //Good queries\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 25)\", req);\n      qParser.setIsFilter(true);\n      qParser.getQuery();\n    }\n    \n    for (String suffix:fieldSuffix) {\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 NOT_A_NUMBER)\", req);\n      qParser.setIsFilter(true); // this may change in the future\n      try {\n        qParser.getQuery();\n        fail(\"Expecting exception\");\n      } catch (SolrException e) {\n        assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n        assertTrue(\"Unexpected exception: \" + e.getMessage(), e.getMessage().contains(\"Invalid Number: NOT_A_NUMBER\"));\n      }\n    }\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c81907bd971f786e378654d32b80da32b0e950d","date":1578330742,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testBadRequestInSetQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testBadRequestInSetQuery().mjava","sourceNew":"  @Test\n  public void testBadRequestInSetQuery() throws SyntaxError {\n    SolrQueryRequest req = req();\n    QParser qParser;\n    String[] fieldSuffix = new String[] {\n        \"ti\", \"tf\", \"td\", \"tl\",\n        \"i\", \"f\", \"d\", \"l\",\n        \"is\", \"fs\", \"ds\", \"ls\",\n        \"i_dv\", \"f_dv\", \"d_dv\", \"l_dv\",\n        \"is_dv\", \"fs_dv\", \"ds_dv\", \"ls_dv\",\n        \"i_dvo\", \"f_dvo\", \"d_dvo\", \"l_dvo\",\n    };\n\n    for (String suffix:fieldSuffix) {\n      //Good queries\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 25)\", req);\n      qParser.setIsFilter(true);\n      qParser.getQuery();\n    }\n\n    for (String suffix:fieldSuffix) {\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 NOT_A_NUMBER)\", req);\n      qParser.setIsFilter(true); // this may change in the future\n      SolrException e = expectThrows(SolrException.class, \"Expecting exception\", qParser::getQuery);\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(\"Unexpected exception: \" + e.getMessage(), e.getMessage().contains(\"Invalid Number: NOT_A_NUMBER\"));\n    }\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testBadRequestInSetQuery() throws SyntaxError {\n    SolrQueryRequest req = req();\n    QParser qParser;\n    String[] fieldSuffix = new String[] {\n        \"ti\", \"tf\", \"td\", \"tl\",\n        \"i\", \"f\", \"d\", \"l\",\n        \"is\", \"fs\", \"ds\", \"ls\",\n        \"i_dv\", \"f_dv\", \"d_dv\", \"l_dv\",\n        \"is_dv\", \"fs_dv\", \"ds_dv\", \"ls_dv\",\n        \"i_dvo\", \"f_dvo\", \"d_dvo\", \"l_dvo\",\n    };\n    \n    for (String suffix:fieldSuffix) {\n      //Good queries\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 25)\", req);\n      qParser.setIsFilter(true);\n      qParser.getQuery();\n    }\n    \n    for (String suffix:fieldSuffix) {\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 NOT_A_NUMBER)\", req);\n      qParser.setIsFilter(true); // this may change in the future\n      SolrException e = expectThrows(SolrException.class, \"Expecting exception\", qParser::getQuery);\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(\"Unexpected exception: \" + e.getMessage(), e.getMessage().contains(\"Invalid Number: NOT_A_NUMBER\"));\n    }\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testBadRequestInSetQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testBadRequestInSetQuery().mjava","sourceNew":"  @Test\n  public void testBadRequestInSetQuery() throws SyntaxError {\n    SolrQueryRequest req = req();\n    QParser qParser;\n    String[] fieldSuffix = new String[] {\n        \"ti\", \"tf\", \"td\", \"tl\",\n        \"i\", \"f\", \"d\", \"l\",\n        \"is\", \"fs\", \"ds\", \"ls\",\n        \"i_dv\", \"f_dv\", \"d_dv\", \"l_dv\",\n        \"is_dv\", \"fs_dv\", \"ds_dv\", \"ls_dv\",\n        \"i_dvo\", \"f_dvo\", \"d_dvo\", \"l_dvo\",\n    };\n\n    for (String suffix:fieldSuffix) {\n      //Good queries\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 25)\", req);\n      qParser.setIsFilter(true);\n      qParser.getQuery();\n    }\n\n    for (String suffix:fieldSuffix) {\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 NOT_A_NUMBER)\", req);\n      qParser.setIsFilter(true); // this may change in the future\n      SolrException e = expectThrows(SolrException.class, \"Expecting exception\", qParser::getQuery);\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(\"Unexpected exception: \" + e.getMessage(), e.getMessage().contains(\"Invalid Number: NOT_A_NUMBER\"));\n    }\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testBadRequestInSetQuery() throws SyntaxError {\n    SolrQueryRequest req = req();\n    QParser qParser;\n    String[] fieldSuffix = new String[] {\n        \"ti\", \"tf\", \"td\", \"tl\",\n        \"i\", \"f\", \"d\", \"l\",\n        \"is\", \"fs\", \"ds\", \"ls\",\n        \"i_dv\", \"f_dv\", \"d_dv\", \"l_dv\",\n        \"is_dv\", \"fs_dv\", \"ds_dv\", \"ls_dv\",\n        \"i_dvo\", \"f_dvo\", \"d_dvo\", \"l_dvo\",\n    };\n    \n    for (String suffix:fieldSuffix) {\n      //Good queries\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 25)\", req);\n      qParser.setIsFilter(true);\n      qParser.getQuery();\n    }\n    \n    for (String suffix:fieldSuffix) {\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 NOT_A_NUMBER)\", req);\n      qParser.setIsFilter(true); // this may change in the future\n      SolrException e = expectThrows(SolrException.class, \"Expecting exception\", qParser::getQuery);\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(\"Unexpected exception: \" + e.getMessage(), e.getMessage().contains(\"Invalid Number: NOT_A_NUMBER\"));\n    }\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8381df1a98f2a399bf06d747fc8cea1b2a17ae38","date":1578526395,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testBadRequestInSetQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testBadRequestInSetQuery().mjava","sourceNew":"  @Test\n  public void testBadRequestInSetQuery() throws SyntaxError {\n    SolrQueryRequest req = req();\n    QParser qParser;\n    String[] fieldSuffix = new String[] {\n        \"ti\", \"tf\", \"td\", \"tl\",\n        \"i\", \"f\", \"d\", \"l\",\n        \"is\", \"fs\", \"ds\", \"ls\",\n        \"i_dv\", \"f_dv\", \"d_dv\", \"l_dv\",\n        \"is_dv\", \"fs_dv\", \"ds_dv\", \"ls_dv\",\n        \"i_dvo\", \"f_dvo\", \"d_dvo\", \"l_dvo\",\n    };\n    \n    for (String suffix:fieldSuffix) {\n      //Good queries\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 25)\", req);\n      qParser.setIsFilter(true);\n      qParser.getQuery();\n    }\n    \n    for (String suffix:fieldSuffix) {\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 NOT_A_NUMBER)\", req);\n      qParser.setIsFilter(true); // this may change in the future\n      SolrException e = expectThrows(SolrException.class, \"Expecting exception\", qParser::getQuery);\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(\"Unexpected exception: \" + e.getMessage(), e.getMessage().contains(\"Invalid Number: NOT_A_NUMBER\"));\n    }\n    \n    \n  }\n\n","sourceOld":"  @Test\n  public void testBadRequestInSetQuery() throws SyntaxError {\n    SolrQueryRequest req = req();\n    QParser qParser;\n    String[] fieldSuffix = new String[] {\n        \"ti\", \"tf\", \"td\", \"tl\",\n        \"i\", \"f\", \"d\", \"l\",\n        \"is\", \"fs\", \"ds\", \"ls\",\n        \"i_dv\", \"f_dv\", \"d_dv\", \"l_dv\",\n        \"is_dv\", \"fs_dv\", \"ds_dv\", \"ls_dv\",\n        \"i_dvo\", \"f_dvo\", \"d_dvo\", \"l_dvo\",\n    };\n\n    for (String suffix:fieldSuffix) {\n      //Good queries\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 25)\", req);\n      qParser.setIsFilter(true);\n      qParser.getQuery();\n    }\n\n    for (String suffix:fieldSuffix) {\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 NOT_A_NUMBER)\", req);\n      qParser.setIsFilter(true); // this may change in the future\n      SolrException e = expectThrows(SolrException.class, \"Expecting exception\", qParser::getQuery);\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(\"Unexpected exception: \" + e.getMessage(), e.getMessage().contains(\"Invalid Number: NOT_A_NUMBER\"));\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testBadRequestInSetQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testBadRequestInSetQuery().mjava","sourceNew":"  @Test\n  public void testBadRequestInSetQuery() throws SyntaxError {\n    SolrQueryRequest req = req();\n    QParser qParser;\n    String[] fieldSuffix = new String[] {\n        \"ti\", \"tf\", \"td\", \"tl\",\n        \"i\", \"f\", \"d\", \"l\",\n        \"is\", \"fs\", \"ds\", \"ls\",\n        \"i_dv\", \"f_dv\", \"d_dv\", \"l_dv\",\n        \"is_dv\", \"fs_dv\", \"ds_dv\", \"ls_dv\",\n        \"i_dvo\", \"f_dvo\", \"d_dvo\", \"l_dvo\",\n    };\n    \n    for (String suffix:fieldSuffix) {\n      //Good queries\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 25)\", req);\n      qParser.setIsFilter(true);\n      qParser.getQuery();\n    }\n    \n    for (String suffix:fieldSuffix) {\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 NOT_A_NUMBER)\", req);\n      qParser.setIsFilter(true); // this may change in the future\n      SolrException e = expectThrows(SolrException.class, \"Expecting exception\", qParser::getQuery);\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(\"Unexpected exception: \" + e.getMessage(), e.getMessage().contains(\"Invalid Number: NOT_A_NUMBER\"));\n    }\n    \n    \n  }\n\n","sourceOld":"  @Test\n  public void testBadRequestInSetQuery() throws SyntaxError {\n    SolrQueryRequest req = req();\n    QParser qParser;\n    String[] fieldSuffix = new String[] {\n        \"ti\", \"tf\", \"td\", \"tl\",\n        \"i\", \"f\", \"d\", \"l\",\n        \"is\", \"fs\", \"ds\", \"ls\",\n        \"i_dv\", \"f_dv\", \"d_dv\", \"l_dv\",\n        \"is_dv\", \"fs_dv\", \"ds_dv\", \"ls_dv\",\n        \"i_dvo\", \"f_dvo\", \"d_dvo\", \"l_dvo\",\n    };\n\n    for (String suffix:fieldSuffix) {\n      //Good queries\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 25)\", req);\n      qParser.setIsFilter(true);\n      qParser.getQuery();\n    }\n\n    for (String suffix:fieldSuffix) {\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 NOT_A_NUMBER)\", req);\n      qParser.setIsFilter(true); // this may change in the future\n      SolrException e = expectThrows(SolrException.class, \"Expecting exception\", qParser::getQuery);\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(\"Unexpected exception: \" + e.getMessage(), e.getMessage().contains(\"Invalid Number: NOT_A_NUMBER\"));\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c7ba457c7f2595139254fab54362be336c5c355","date":1579734055,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testBadRequestInSetQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testBadRequestInSetQuery().mjava","sourceNew":"  @Test\n  public void testBadRequestInSetQuery() throws SyntaxError {\n    SolrQueryRequest req = req();\n    QParser qParser;\n    String[] fieldSuffix = new String[] {\n        \"ti\", \"tf\", \"td\", \"tl\",\n        \"i\", \"f\", \"d\", \"l\",\n        \"is\", \"fs\", \"ds\", \"ls\",\n        \"i_dv\", \"f_dv\", \"d_dv\", \"l_dv\",\n        \"is_dv\", \"fs_dv\", \"ds_dv\", \"ls_dv\",\n        \"i_dvo\", \"f_dvo\", \"d_dvo\", \"l_dvo\",\n    };\n\n    for (String suffix:fieldSuffix) {\n      //Good queries\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 25)\", req);\n      qParser.setIsFilter(true);\n      qParser.getQuery();\n    }\n\n    for (String suffix:fieldSuffix) {\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 NOT_A_NUMBER)\", req);\n      qParser.setIsFilter(true); // this may change in the future\n      SolrException e = expectThrows(SolrException.class, \"Expecting exception\", qParser::getQuery);\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(\"Unexpected exception: \" + e.getMessage(), e.getMessage().contains(\"Invalid Number: NOT_A_NUMBER\"));\n    }\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testBadRequestInSetQuery() throws SyntaxError {\n    SolrQueryRequest req = req();\n    QParser qParser;\n    String[] fieldSuffix = new String[] {\n        \"ti\", \"tf\", \"td\", \"tl\",\n        \"i\", \"f\", \"d\", \"l\",\n        \"is\", \"fs\", \"ds\", \"ls\",\n        \"i_dv\", \"f_dv\", \"d_dv\", \"l_dv\",\n        \"is_dv\", \"fs_dv\", \"ds_dv\", \"ls_dv\",\n        \"i_dvo\", \"f_dvo\", \"d_dvo\", \"l_dvo\",\n    };\n    \n    for (String suffix:fieldSuffix) {\n      //Good queries\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 25)\", req);\n      qParser.setIsFilter(true);\n      qParser.getQuery();\n    }\n    \n    for (String suffix:fieldSuffix) {\n      qParser = QParser.getParser(\"foo_\" + suffix + \":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 NOT_A_NUMBER)\", req);\n      qParser.setIsFilter(true); // this may change in the future\n      SolrException e = expectThrows(SolrException.class, \"Expecting exception\", qParser::getQuery);\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(\"Unexpected exception: \" + e.getMessage(), e.getMessage().contains(\"Invalid Number: NOT_A_NUMBER\"));\n    }\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["0c81907bd971f786e378654d32b80da32b0e950d"],"0c81907bd971f786e378654d32b80da32b0e950d":["464e7336798bc8a1281d5cf610c649c5a0784e83"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f8ab19a30ff70981e43b8cc78069cb0941476e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1da93834e39ce341a13e42b611d0a83bd3114bba":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"5c7ba457c7f2595139254fab54362be336c5c355":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["464e7336798bc8a1281d5cf610c649c5a0784e83","0c81907bd971f786e378654d32b80da32b0e950d"],"464e7336798bc8a1281d5cf610c649c5a0784e83":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92f8ab19a30ff70981e43b8cc78069cb0941476e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92f8ab19a30ff70981e43b8cc78069cb0941476e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c7ba457c7f2595139254fab54362be336c5c355"]},"commit2Childs":{"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["1da93834e39ce341a13e42b611d0a83bd3114bba","5c7ba457c7f2595139254fab54362be336c5c355"],"0c81907bd971f786e378654d32b80da32b0e950d":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92f8ab19a30ff70981e43b8cc78069cb0941476e","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"92f8ab19a30ff70981e43b8cc78069cb0941476e":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"5c7ba457c7f2595139254fab54362be336c5c355":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["1da93834e39ce341a13e42b611d0a83bd3114bba"],"464e7336798bc8a1281d5cf610c649c5a0784e83":["0c81907bd971f786e378654d32b80da32b0e950d","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"28288370235ed02234a64753cdbf0c6ec096304a":["464e7336798bc8a1281d5cf610c649c5a0784e83"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1da93834e39ce341a13e42b611d0a83bd3114bba","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}