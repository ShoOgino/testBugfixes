{"path":"lucene/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","pathOld":"src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    \n    q.add(qp.parse(\"\\\"w1 w2\\\"~1\"), Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(qp.parse(\"xx\"),\n                                new ItemizedFilter(new int[] {1,3}));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(new ItemizedFilter(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(qp.parse(\"QQ\"));\n    dm.add(qp.parse(\"xx yy -zz\"));\n    dm.add(qp.parse(\"-xx -w1\"));\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(qp.parse(\"w1\"));\n    dm2.add(qp.parse(\"w2\"));\n    dm2.add(qp.parse(\"w3\"));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    \n    q.add(qp.parse(\"\\\"w1 w2\\\"~1\"), Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(qp.parse(\"xx\"),\n                                new ItemizedFilter(new int[] {1,3}));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(new ItemizedFilter(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(qp.parse(\"QQ\"));\n    dm.add(qp.parse(\"xx yy -zz\"));\n    dm.add(qp.parse(\"-xx -w1\"));\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(qp.parse(\"w1\"));\n    dm2.add(qp.parse(\"w2\"));\n    dm2.add(qp.parse(\"w3\"));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112629f1dfd1451722c6047bcf593e6efc96f5f4","date":1309910887,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.setSlop(1);\n    phraseQuery.add(new Term(FIELD, \"w1\"));\n    phraseQuery.add(new Term(FIELD, \"w2\"));\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(new TermQuery(new Term(FIELD, \"xx\")),\n                                new ItemizedFilter(new int[] {1,3}));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(new ItemizedFilter(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery xxYYZZ = new BooleanQuery();\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ);\n\n    BooleanQuery xxW1 = new BooleanQuery();\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1);\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    \n    q.add(qp.parse(\"\\\"w1 w2\\\"~1\"), Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(qp.parse(\"xx\"),\n                                new ItemizedFilter(new int[] {1,3}));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(new ItemizedFilter(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(qp.parse(\"QQ\"));\n    dm.add(qp.parse(\"xx yy -zz\"));\n    dm.add(qp.parse(\"-xx -w1\"));\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(qp.parse(\"w1\"));\n    dm2.add(qp.parse(\"w2\"));\n    dm2.add(qp.parse(\"w3\"));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.setSlop(1);\n    phraseQuery.add(new Term(FIELD, \"w1\"));\n    phraseQuery.add(new Term(FIELD, \"w2\"));\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(new TermQuery(new Term(FIELD, \"xx\")),\n                                new ItemizedFilter(new int[] {1,3}));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(new ItemizedFilter(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery xxYYZZ = new BooleanQuery();\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ);\n\n    BooleanQuery xxW1 = new BooleanQuery();\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1);\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    \n    q.add(qp.parse(\"\\\"w1 w2\\\"~1\"), Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(qp.parse(\"xx\"),\n                                new ItemizedFilter(new int[] {1,3}));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(new ItemizedFilter(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(qp.parse(\"QQ\"));\n    dm.add(qp.parse(\"xx yy -zz\"));\n    dm.add(qp.parse(\"-xx -w1\"));\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(qp.parse(\"w1\"));\n    dm2.add(qp.parse(\"w2\"));\n    dm2.add(qp.parse(\"w3\"));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.setSlop(1);\n    phraseQuery.add(new Term(FIELD, \"w1\"));\n    phraseQuery.add(new Term(FIELD, \"w2\"));\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(new TermQuery(new Term(FIELD, \"xx\")),\n                                new ItemizedFilter(new int[] {1,3}));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(new ItemizedFilter(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery xxYYZZ = new BooleanQuery();\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ);\n\n    BooleanQuery xxW1 = new BooleanQuery();\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1);\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    \n    q.add(qp.parse(\"\\\"w1 w2\\\"~1\"), Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(qp.parse(\"xx\"),\n                                new ItemizedFilter(new int[] {1,3}));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(new ItemizedFilter(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(qp.parse(\"QQ\"));\n    dm.add(qp.parse(\"xx yy -zz\"));\n    dm.add(qp.parse(\"-xx -w1\"));\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(qp.parse(\"w1\"));\n    dm2.add(qp.parse(\"w2\"));\n    dm2.add(qp.parse(\"w3\"));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestComplexExplanations#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.setSlop(1);\n    phraseQuery.add(new Term(FIELD, \"w1\"));\n    phraseQuery.add(new Term(FIELD, \"w2\"));\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(new TermQuery(new Term(FIELD, \"xx\")),\n                                new ItemizedFilter(new int[] {1,3}));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(new ItemizedFilter(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery xxYYZZ = new BooleanQuery();\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ);\n\n    BooleanQuery xxW1 = new BooleanQuery();\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1);\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.setSlop(1);\n    phraseQuery.add(new Term(FIELD, \"w1\"));\n    phraseQuery.add(new Term(FIELD, \"w2\"));\n    q.add(phraseQuery, Occur.MUST);\n    q.add(snear(st(\"w2\"),\n                sor(\"w5\",\"zz\"),\n                4, true),\n          Occur.SHOULD);\n    q.add(snear(sf(\"w3\",2), st(\"w2\"), st(\"w3\"), 5, true),\n          Occur.SHOULD);\n    \n    Query t = new FilteredQuery(new TermQuery(new Term(FIELD, \"xx\")),\n                                new ItemizedFilter(new int[] {1,3}));\n    t.setBoost(1000);\n    q.add(t, Occur.SHOULD);\n    \n    t = new ConstantScoreQuery(new ItemizedFilter(new int[] {0,2}));\n    t.setBoost(-20.0f);\n    q.add(t, Occur.SHOULD);\n    \n    DisjunctionMaxQuery dm = new DisjunctionMaxQuery(0.2f);\n    dm.add(snear(st(\"w2\"),\n                 sor(\"w5\",\"zz\"),\n                 4, true));\n    dm.add(new TermQuery(new Term(FIELD, \"QQ\")));\n\n    BooleanQuery xxYYZZ = new BooleanQuery();\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"yy\")), Occur.SHOULD);\n    xxYYZZ.add(new TermQuery(new Term(FIELD, \"zz\")), Occur.MUST_NOT);\n\n    dm.add(xxYYZZ);\n\n    BooleanQuery xxW1 = new BooleanQuery();\n    xxW1.add(new TermQuery(new Term(FIELD, \"xx\")), Occur.MUST_NOT);\n    xxW1.add(new TermQuery(new Term(FIELD, \"w1\")), Occur.MUST_NOT);\n\n    dm.add(xxW1);\n\n    DisjunctionMaxQuery dm2 = new DisjunctionMaxQuery(0.5f);\n    dm2.add(new TermQuery(new Term(FIELD, \"w1\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w2\")));\n    dm2.add(new TermQuery(new Term(FIELD, \"w3\")));\n    dm.add(dm2);\n\n    q.add(dm, Occur.SHOULD);\n\n    BooleanQuery b = new BooleanQuery();\n    b.setMinimumNumberShouldMatch(2);\n    b.add(snear(\"w1\",\"w2\",1,true), Occur.SHOULD);\n    b.add(snear(\"w2\",\"w3\",1,true), Occur.SHOULD);\n    b.add(snear(\"w1\",\"w3\",3,true), Occur.SHOULD);\n    b.setBoost(0.0f);\n    \n    q.add(b, Occur.SHOULD);\n    \n    qtest(q, new int[] { 0,1,2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["112629f1dfd1451722c6047bcf593e6efc96f5f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["9454a6510e2db155fb01faa5c049b06ece95fab9","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["9454a6510e2db155fb01faa5c049b06ece95fab9","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["112629f1dfd1451722c6047bcf593e6efc96f5f4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}