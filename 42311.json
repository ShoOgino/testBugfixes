{"path":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#doGroupingDvOnly(List[FieldProps],String).mjava","commits":[{"id":"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4","date":1550862271,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#doGroupingDvOnly(List[FieldProps],String).mjava","pathOld":"/dev/null","sourceNew":"  private void doGroupingDvOnly(List<FieldProps> fieldProps, String boolName) throws IOException, SolrServerException {\n\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldProps) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldProps) {\n\n      // Solr 9802\n      if (prop.getName().startsWith(\"date\")) continue;\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", boolName, prop.getName());\n              break;\n            \n            default:\n              if (!prop.getName().equals(\"intGSF\")) { // TODO: this can be 6 or 8 as well\n                fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size() + \" rsp: \" + rsp);\n              }\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","date":1551083645,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#doGroupingDvOnly(List[FieldProps],String).mjava","pathOld":"/dev/null","sourceNew":"  private void doGroupingDvOnly(List<FieldProps> fieldProps, String boolName) throws IOException, SolrServerException {\n\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldProps) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldProps) {\n\n      // Solr 9802\n      if (prop.getName().startsWith(\"date\")) continue;\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", boolName, prop.getName());\n              break;\n            \n            default:\n              if (!prop.getName().equals(\"intGSF\")) { // TODO: this can be 6 or 8 as well\n                fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size() + \" rsp: \" + rsp);\n              }\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1bf90b7e397312bd3e0bdc880c43b1f32ca30cf","date":1555648681,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#doGroupingDvOnly(List[FieldProps],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#doGroupingDvOnly(List[FieldProps],String).mjava","sourceNew":"  private void doGroupingDvOnly(List<FieldProps> fieldProps, String boolName) throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n\n      // Every 7th doc we bump a counter by some random amount\n      for (FieldProps prop : fieldProps) {\n        doc.addField(prop.getName(), prop.getValue((idx % 7) == 0));\n      }\n      docs.add(doc);\n\n      // Every fifth time through we add a doc with no values in any of the \"fields of interest\", so there shoule be\n      // 10 docs with nulls\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    Solr11035BandAid(client, COLLECTION,\"id\", 59, \"*:*\");\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldProps) {\n\n      // Solr 9802\n      if (prop.getName().startsWith(\"date\")) continue;\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\",\n          \"group.sort\", \"id asc\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", boolName, prop.getName());\n              break;\n            \n            default:\n              if (!prop.getName().equals(\"intGSF\")) { // TODO: this can be 6 or 8 as well\n                fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size() + \" rsp: \" + rsp);\n              }\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":"  private void doGroupingDvOnly(List<FieldProps> fieldProps, String boolName) throws IOException, SolrServerException {\n\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldProps) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldProps) {\n\n      // Solr 9802\n      if (prop.getName().startsWith(\"date\")) continue;\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", boolName, prop.getName());\n              break;\n            \n            default:\n              if (!prop.getName().equals(\"intGSF\")) { // TODO: this can be 6 or 8 as well\n                fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size() + \" rsp: \" + rsp);\n              }\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["3821108e77348b1cdb6baf5422727f926ba7af61"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c344401c324a00bc10cacfb90598738235a4decb","date":1556461561,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#doGroupingDvOnly(List[FieldProps],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#doGroupingDvOnly(List[FieldProps],String).mjava","sourceNew":"  private void doGroupingDvOnly(List<FieldProps> fieldProps, String boolName) throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n\n      // Every 7th doc we bump a counter by some random amount\n      for (FieldProps prop : fieldProps) {\n        doc.addField(prop.getName(), prop.getValue((idx % 7) == 0));\n      }\n      docs.add(doc);\n\n      // Every fifth time through we add a doc with no values in any of the \"fields of interest\", so there should be\n      // 10 docs with nulls\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    Solr11035BandAid(client, COLLECTION,\"id\", 59, \"*:*\");\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldProps) {\n\n      // Solr 9802\n      if (prop.getName().startsWith(\"date\")) continue;\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\",\n          \"group.sort\", \"id asc\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", boolName, prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for '\" + prop.getName() + \"' size: '\" + grp.getResult().size()\n                  + \"' GroupValue: '\" + grp.getGroupValue()\n                  + \"' rsp: \" + rsp);\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":"  private void doGroupingDvOnly(List<FieldProps> fieldProps, String boolName) throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n\n      // Every 7th doc we bump a counter by some random amount\n      for (FieldProps prop : fieldProps) {\n        doc.addField(prop.getName(), prop.getValue((idx % 7) == 0));\n      }\n      docs.add(doc);\n\n      // Every fifth time through we add a doc with no values in any of the \"fields of interest\", so there shoule be\n      // 10 docs with nulls\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    Solr11035BandAid(client, COLLECTION,\"id\", 59, \"*:*\");\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldProps) {\n\n      // Solr 9802\n      if (prop.getName().startsWith(\"date\")) continue;\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\",\n          \"group.sort\", \"id asc\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", boolName, prop.getName());\n              break;\n            \n            default:\n              if (!prop.getName().equals(\"intGSF\")) { // TODO: this can be 6 or 8 as well\n                fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size() + \" rsp: \" + rsp);\n              }\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c","date":1557431147,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#doGroupingDvOnly(List[FieldProps],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#doGroupingDvOnly(List[FieldProps],String).mjava","sourceNew":"  private void doGroupingDvOnly(List<FieldProps> fieldProps, String boolName) throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n\n      // Every 7th doc we bump a counter by some random amount\n      for (FieldProps prop : fieldProps) {\n        doc.addField(prop.getName(), prop.getValue((idx % 7) == 0));\n      }\n      docs.add(doc);\n\n      // Every fifth time through we add a doc with no values in any of the \"fields of interest\", so there should be\n      // 10 docs with nulls\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    Solr11035BandAid(client, COLLECTION,\"id\", 59, \"*:*\", \"DocValuesNotINdexedTest.doGroupingDvOnly\");\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldProps) {\n\n      // Solr 9802\n      if (prop.getName().startsWith(\"date\")) continue;\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\",\n          \"group.sort\", \"id asc\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", boolName, prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for '\" + prop.getName() + \"' size: '\" + grp.getResult().size()\n                  + \"' GroupValue: '\" + grp.getGroupValue()\n                  + \"' rsp: \" + rsp);\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":"  private void doGroupingDvOnly(List<FieldProps> fieldProps, String boolName) throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n\n      // Every 7th doc we bump a counter by some random amount\n      for (FieldProps prop : fieldProps) {\n        doc.addField(prop.getName(), prop.getValue((idx % 7) == 0));\n      }\n      docs.add(doc);\n\n      // Every fifth time through we add a doc with no values in any of the \"fields of interest\", so there should be\n      // 10 docs with nulls\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    Solr11035BandAid(client, COLLECTION,\"id\", 59, \"*:*\");\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldProps) {\n\n      // Solr 9802\n      if (prop.getName().startsWith(\"date\")) continue;\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\",\n          \"group.sort\", \"id asc\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", boolName, prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for '\" + prop.getName() + \"' size: '\" + grp.getResult().size()\n                  + \"' GroupValue: '\" + grp.getGroupValue()\n                  + \"' rsp: \" + rsp);\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["3821108e77348b1cdb6baf5422727f926ba7af61"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3821108e77348b1cdb6baf5422727f926ba7af61","date":1582300636,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#doGroupingDvOnly(List[FieldProps],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#doGroupingDvOnly(List[FieldProps],String).mjava","sourceNew":"  private void doGroupingDvOnly(List<FieldProps> fieldProps, String boolName) throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n\n      // Every 7th doc we bump a counter by some random amount\n      for (FieldProps prop : fieldProps) {\n        doc.addField(prop.getName(), prop.getValue((idx % 7) == 0));\n      }\n      docs.add(doc);\n\n      // Every fifth time through we add a doc with no values in any of the \"fields of interest\", so there should be\n      // 10 docs with nulls\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldProps) {\n\n      // Solr 9802\n      if (prop.getName().startsWith(\"date\")) continue;\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\",\n          \"group.sort\", \"id asc\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", boolName, prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for '\" + prop.getName() + \"' size: '\" + grp.getResult().size()\n                  + \"' GroupValue: '\" + grp.getGroupValue()\n                  + \"' rsp: \" + rsp);\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":"  private void doGroupingDvOnly(List<FieldProps> fieldProps, String boolName) throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n\n      // Every 7th doc we bump a counter by some random amount\n      for (FieldProps prop : fieldProps) {\n        doc.addField(prop.getName(), prop.getValue((idx % 7) == 0));\n      }\n      docs.add(doc);\n\n      // Every fifth time through we add a doc with no values in any of the \"fields of interest\", so there should be\n      // 10 docs with nulls\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    Solr11035BandAid(client, COLLECTION,\"id\", 59, \"*:*\", \"DocValuesNotINdexedTest.doGroupingDvOnly\");\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldProps) {\n\n      // Solr 9802\n      if (prop.getName().startsWith(\"date\")) continue;\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\",\n          \"group.sort\", \"id asc\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", boolName, prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for '\" + prop.getName() + \"' size: '\" + grp.getResult().size()\n                  + \"' GroupValue: '\" + grp.getGroupValue()\n                  + \"' rsp: \" + rsp);\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","bugFix":["9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c","b1bf90b7e397312bd3e0bdc880c43b1f32ca30cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3821108e77348b1cdb6baf5422727f926ba7af61":["9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c"],"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1bf90b7e397312bd3e0bdc880c43b1f32ca30cf":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c":["c344401c324a00bc10cacfb90598738235a4decb"],"c344401c324a00bc10cacfb90598738235a4decb":["b1bf90b7e397312bd3e0bdc880c43b1f32ca30cf"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ab3edb4bdcf1695b3c43f8584d7473f9516a34e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3821108e77348b1cdb6baf5422727f926ba7af61"]},"commit2Childs":{"3821108e77348b1cdb6baf5422727f926ba7af61":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"b1bf90b7e397312bd3e0bdc880c43b1f32ca30cf":["c344401c324a00bc10cacfb90598738235a4decb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab3edb4bdcf1695b3c43f8584d7473f9516a34e4","0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c":["3821108e77348b1cdb6baf5422727f926ba7af61"],"c344401c324a00bc10cacfb90598738235a4decb":["9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["b1bf90b7e397312bd3e0bdc880c43b1f32ca30cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}