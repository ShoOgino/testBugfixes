{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper.QPTestFilter#incrementToken().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper.QPTestFilter#incrementToken().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper.QPTestFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        clearAttributes();\n        termAtt.setTermBuffer(\"phrase2\");\n        offsetAtt.setOffset(savedStart, savedEnd);\n        return true;\n      } else\n        while (input.incrementToken()) {\n          if (termAtt.term().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = offsetAtt.startOffset();\n            savedEnd = offsetAtt.endOffset();\n            termAtt.setTermBuffer(\"phrase1\");\n            offsetAtt.setOffset(savedStart, savedEnd);\n            return true;\n          } else if (!termAtt.term().equals(\"stop\"))\n            return true;\n        }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        clearAttributes();\n        termAtt.setTermBuffer(\"phrase2\");\n        offsetAtt.setOffset(savedStart, savedEnd);\n        return true;\n      } else\n        while (input.incrementToken()) {\n          if (termAtt.term().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = offsetAtt.startOffset();\n            savedEnd = offsetAtt.endOffset();\n            termAtt.setTermBuffer(\"phrase1\");\n            offsetAtt.setOffset(savedStart, savedEnd);\n            return true;\n          } else if (!termAtt.term().equals(\"stop\"))\n            return true;\n        }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper.QPTestFilter#incrementToken().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper.QPTestFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        clearAttributes();\n        termAtt.setEmpty().append(\"phrase2\");\n        offsetAtt.setOffset(savedStart, savedEnd);\n        return true;\n      } else\n        while (input.incrementToken()) {\n          if (termAtt.toString().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = offsetAtt.startOffset();\n            savedEnd = offsetAtt.endOffset();\n            termAtt.setEmpty().append(\"phrase1\");\n            offsetAtt.setOffset(savedStart, savedEnd);\n            return true;\n          } else if (!termAtt.toString().equals(\"stop\"))\n            return true;\n        }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        clearAttributes();\n        termAtt.setTermBuffer(\"phrase2\");\n        offsetAtt.setOffset(savedStart, savedEnd);\n        return true;\n      } else\n        while (input.incrementToken()) {\n          if (termAtt.term().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = offsetAtt.startOffset();\n            savedEnd = offsetAtt.endOffset();\n            termAtt.setTermBuffer(\"phrase1\");\n            offsetAtt.setOffset(savedStart, savedEnd);\n            return true;\n          } else if (!termAtt.term().equals(\"stop\"))\n            return true;\n        }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper.QPTestFilter#incrementToken().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper.QPTestFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        clearAttributes();\n        termAtt.setEmpty().append(\"phrase2\");\n        offsetAtt.setOffset(savedStart, savedEnd);\n        return true;\n      } else\n        while (input.incrementToken()) {\n          if (termAtt.toString().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = offsetAtt.startOffset();\n            savedEnd = offsetAtt.endOffset();\n            termAtt.setEmpty().append(\"phrase1\");\n            offsetAtt.setOffset(savedStart, savedEnd);\n            return true;\n          } else if (!termAtt.toString().equals(\"stop\"))\n            return true;\n        }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        clearAttributes();\n        termAtt.setEmpty().append(\"phrase2\");\n        offsetAtt.setOffset(savedStart, savedEnd);\n        return true;\n      } else\n        while (input.incrementToken()) {\n          if (termAtt.toString().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = offsetAtt.startOffset();\n            savedEnd = offsetAtt.endOffset();\n            termAtt.setEmpty().append(\"phrase1\");\n            offsetAtt.setOffset(savedStart, savedEnd);\n            return true;\n          } else if (!termAtt.toString().equals(\"stop\"))\n            return true;\n        }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}