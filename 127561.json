{"path":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSortWithoutScoreTracking().mjava","commits":[{"id":"d603e57f1f1611f73eb5c14ef80a3777cab5f418","date":1360895475,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSortWithoutScoreTracking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testSortWithoutScoreTracking().mjava","sourceNew":"  public void testSortWithoutScoreTracking() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, true, false,\n          false, true);\n      \n      is.search(q, tdc);\n      \n      TopDocs td = tdc.topDocs();\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n      assertTrue(Float.isNaN(td.getMaxScore()));\n    }\n  }\n\n","sourceOld":"  public void testSortWithoutScoreTracking() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, true, false,\n          false, true);\n      \n      full.search(q, tdc);\n      \n      TopDocs td = tdc.topDocs();\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n      assertTrue(Float.isNaN(td.getMaxScore()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSortWithoutScoreTracking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testSortWithoutScoreTracking().mjava","sourceNew":"  public void testSortWithoutScoreTracking() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, true, false,\n          false, true);\n      \n      is.search(q, tdc);\n      \n      TopDocs td = tdc.topDocs();\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n      assertTrue(Float.isNaN(td.getMaxScore()));\n    }\n  }\n\n","sourceOld":"  public void testSortWithoutScoreTracking() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, true, false,\n          false, true);\n      \n      full.search(q, tdc);\n      \n      TopDocs td = tdc.topDocs();\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n      assertTrue(Float.isNaN(td.getMaxScore()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSortWithoutScoreTracking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSortWithoutScoreTracking().mjava","sourceNew":"  public void testSortWithoutScoreTracking() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, true, false,\n          false);\n      \n      is.search(q, tdc);\n      \n      TopDocs td = tdc.topDocs();\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n      assertTrue(Float.isNaN(td.getMaxScore()));\n    }\n  }\n\n","sourceOld":"  public void testSortWithoutScoreTracking() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, true, false,\n          false, true);\n      \n      is.search(q, tdc);\n      \n      TopDocs td = tdc.topDocs();\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n      assertTrue(Float.isNaN(td.getMaxScore()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"404d1ab7f6f396235047017c88d545fec15dafb7","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSortWithoutScoreTracking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSortWithoutScoreTracking().mjava","sourceNew":"  public void testSortWithoutScoreTracking() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, true, false,\n          false, true);\n      \n      is.search(q, tdc);\n      \n      TopDocs td = tdc.topDocs();\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n      assertTrue(Float.isNaN(td.getMaxScore()));\n    }\n  }\n\n","sourceOld":"  public void testSortWithoutScoreTracking() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, true, false,\n          false);\n      \n      is.search(q, tdc);\n      \n      TopDocs td = tdc.topDocs();\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n      assertTrue(Float.isNaN(td.getMaxScore()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSortWithoutScoreTracking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSortWithoutScoreTracking().mjava","sourceNew":"  public void testSortWithoutScoreTracking() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, true, false,\n          false, true);\n      \n      is.search(q, tdc);\n      \n      TopDocs td = tdc.topDocs();\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n      assertTrue(Float.isNaN(td.getMaxScore()));\n    }\n  }\n\n","sourceOld":"  public void testSortWithoutScoreTracking() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, true, false,\n          false);\n      \n      is.search(q, tdc);\n      \n      TopDocs td = tdc.topDocs();\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n      assertTrue(Float.isNaN(td.getMaxScore()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSortWithoutScoreTracking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSortWithoutScoreTracking().mjava","sourceNew":"  public void testSortWithoutScoreTracking() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, true, false,\n          true);\n      \n      is.search(q, tdc);\n      \n      TopDocs td = tdc.topDocs();\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n    }\n  }\n\n","sourceOld":"  public void testSortWithoutScoreTracking() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, true, false,\n          false, true);\n      \n      is.search(q, tdc);\n      \n      TopDocs td = tdc.topDocs();\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n      assertTrue(Float.isNaN(td.getMaxScore()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSortWithoutScoreTracking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSortWithoutScoreTracking().mjava","sourceNew":"  public void testSortWithoutScoreTracking() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, true, false,\n          true);\n      \n      is.search(q, tdc);\n      \n      TopDocs td = tdc.topDocs();\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n    }\n  }\n\n","sourceOld":"  public void testSortWithoutScoreTracking() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, true, false,\n          false, true);\n      \n      is.search(q, tdc);\n      \n      TopDocs td = tdc.topDocs();\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n      assertTrue(Float.isNaN(td.getMaxScore()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSortWithoutScoreTracking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSortWithoutScoreTracking().mjava","sourceNew":"  public void testSortWithoutScoreTracking() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, false,\n          true);\n      \n      is.search(q, tdc);\n      \n      TopDocs td = tdc.topDocs();\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n    }\n  }\n\n","sourceOld":"  public void testSortWithoutScoreTracking() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, true, false,\n          true);\n      \n      is.search(q, tdc);\n      \n      TopDocs td = tdc.topDocs();\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSortWithoutScoreTracking().mjava","sourceNew":"  public void testSort() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, true);\n      \n      is.search(q, tdc);\n      \n      TopDocs td = tdc.topDocs();\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n    }\n  }\n\n","sourceOld":"  public void testSortWithoutScoreTracking() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, false,\n          true);\n      \n      is.search(q, tdc);\n      \n      TopDocs td = tdc.topDocs();\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","404d1ab7f6f396235047017c88d545fec15dafb7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["1aad05eeff7818b0833c02ac6b743aa72054963b","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"d603e57f1f1611f73eb5c14ef80a3777cab5f418":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"404d1ab7f6f396235047017c88d545fec15dafb7":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["d603e57f1f1611f73eb5c14ef80a3777cab5f418"],"3b41f996b22bd5518650f897d050088ff808ec03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d603e57f1f1611f73eb5c14ef80a3777cab5f418"],"04c370507e5521b2eb998530736f1c19b851ed5a":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["04c370507e5521b2eb998530736f1c19b851ed5a"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"d603e57f1f1611f73eb5c14ef80a3777cab5f418":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","3b41f996b22bd5518650f897d050088ff808ec03"],"404d1ab7f6f396235047017c88d545fec15dafb7":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["1aad05eeff7818b0833c02ac6b743aa72054963b","404d1ab7f6f396235047017c88d545fec15dafb7"],"3b41f996b22bd5518650f897d050088ff808ec03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d603e57f1f1611f73eb5c14ef80a3777cab5f418","3b41f996b22bd5518650f897d050088ff808ec03"],"04c370507e5521b2eb998530736f1c19b851ed5a":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","04c370507e5521b2eb998530736f1c19b851ed5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3b41f996b22bd5518650f897d050088ff808ec03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}