{"path":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,Type,String,String,String).mjava","commits":[{"id":"6e2944372726ed00fc05229687367002194c6c81","date":1300969333,"type":1,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,Type,String,String,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,boolean,String,String,String).mjava","sourceNew":"  private void doReadTest(File file, Type fileType, String expTitle,\n                          String expDate, String expBody) throws Exception {\n    InputStream in = new FileInputStream(file);\n    switch(fileType) {\n    \tcase BZIP2:\n    \t\tin = csFactory.createCompressorInputStream(CompressorStreamFactory.BZIP2, in);\n    \t\tbreak;\n    \tcase GZIP:\n    \t\tin = csFactory.createCompressorInputStream(CompressorStreamFactory.GZIP, in);\n    \tcase PLAIN:\n    \t\tbreak; // nothing to do\n    \tdefault:\n    \t\tassertFalse(\"Unknown file type!\",true); //fail, should not happen\n    }\n    BufferedReader br = new BufferedReader(new InputStreamReader(in, \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line);\n      line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      int numExpParts = expBody == null ? 2 : 3;\n      assertEquals(numExpParts, parts.length);\n      assertEquals(expTitle, parts[0]);\n      assertEquals(expDate, parts[1]);\n      if (expBody != null) {\n        assertEquals(expBody, parts[2]);\n      }\n      assertNull(br.readLine());\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":"  private void doReadTest(File file, boolean bz2File, String expTitle,\n                          String expDate, String expBody) throws Exception {\n    InputStream in = new FileInputStream(file);\n    if (bz2File) {\n      in = csFactory.createCompressorInputStream(\"bzip2\", in);\n    }\n    BufferedReader br = new BufferedReader(new InputStreamReader(in, \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line);\n      line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      int numExpParts = expBody == null ? 2 : 3;\n      assertEquals(numExpParts, parts.length);\n      assertEquals(expTitle, parts[0]);\n      assertEquals(expDate, parts[1]);\n      if (expBody != null) {\n        assertEquals(expBody, parts[2]);\n      }\n      assertNull(br.readLine());\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,Type,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void doReadTest(File file, Type fileType, String expTitle,\n                          String expDate, String expBody) throws Exception {\n    InputStream in = new FileInputStream(file);\n    switch(fileType) {\n    \tcase BZIP2:\n    \t\tin = csFactory.createCompressorInputStream(CompressorStreamFactory.BZIP2, in);\n    \t\tbreak;\n    \tcase GZIP:\n    \t\tin = csFactory.createCompressorInputStream(CompressorStreamFactory.GZIP, in);\n    \tcase PLAIN:\n    \t\tbreak; // nothing to do\n    \tdefault:\n    \t\tassertFalse(\"Unknown file type!\",true); //fail, should not happen\n    }\n    BufferedReader br = new BufferedReader(new InputStreamReader(in, \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line);\n      line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      int numExpParts = expBody == null ? 2 : 3;\n      assertEquals(numExpParts, parts.length);\n      assertEquals(expTitle, parts[0]);\n      assertEquals(expDate, parts[1]);\n      if (expBody != null) {\n        assertEquals(expBody, parts[2]);\n      }\n      assertNull(br.readLine());\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,Type,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void doReadTest(File file, Type fileType, String expTitle,\n                          String expDate, String expBody) throws Exception {\n    InputStream in = new FileInputStream(file);\n    switch(fileType) {\n    \tcase BZIP2:\n    \t\tin = csFactory.createCompressorInputStream(CompressorStreamFactory.BZIP2, in);\n    \t\tbreak;\n    \tcase GZIP:\n    \t\tin = csFactory.createCompressorInputStream(CompressorStreamFactory.GZIP, in);\n    \tcase PLAIN:\n    \t\tbreak; // nothing to do\n    \tdefault:\n    \t\tassertFalse(\"Unknown file type!\",true); //fail, should not happen\n    }\n    BufferedReader br = new BufferedReader(new InputStreamReader(in, \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line);\n      line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      int numExpParts = expBody == null ? 2 : 3;\n      assertEquals(numExpParts, parts.length);\n      assertEquals(expTitle, parts[0]);\n      assertEquals(expDate, parts[1]);\n      if (expBody != null) {\n        assertEquals(expBody, parts[2]);\n      }\n      assertNull(br.readLine());\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5bca351f23636b9e5afb4be016e7b4e260905fa","date":1317399804,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,Type,String,String,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,Type,String,String,String).mjava","sourceNew":"  private void doReadTest(File file, Type fileType, String expTitle,\n                          String expDate, String expBody) throws Exception {\n    InputStream in = new FileInputStream(file);\n    switch(fileType) {\n    \tcase BZIP2:\n    \t\tin = csFactory.createCompressorInputStream(CompressorStreamFactory.BZIP2, in);\n    \t\tbreak;\n    \tcase GZIP:\n    \t\tin = csFactory.createCompressorInputStream(CompressorStreamFactory.GZIP, in);\n                break;\n    \tcase PLAIN:\n    \t\tbreak; // nothing to do\n    \tdefault:\n    \t\tassertFalse(\"Unknown file type!\",true); //fail, should not happen\n    }\n    BufferedReader br = new BufferedReader(new InputStreamReader(in, \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line);\n      line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      int numExpParts = expBody == null ? 2 : 3;\n      assertEquals(numExpParts, parts.length);\n      assertEquals(expTitle, parts[0]);\n      assertEquals(expDate, parts[1]);\n      if (expBody != null) {\n        assertEquals(expBody, parts[2]);\n      }\n      assertNull(br.readLine());\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":"  private void doReadTest(File file, Type fileType, String expTitle,\n                          String expDate, String expBody) throws Exception {\n    InputStream in = new FileInputStream(file);\n    switch(fileType) {\n    \tcase BZIP2:\n    \t\tin = csFactory.createCompressorInputStream(CompressorStreamFactory.BZIP2, in);\n    \t\tbreak;\n    \tcase GZIP:\n    \t\tin = csFactory.createCompressorInputStream(CompressorStreamFactory.GZIP, in);\n    \tcase PLAIN:\n    \t\tbreak; // nothing to do\n    \tdefault:\n    \t\tassertFalse(\"Unknown file type!\",true); //fail, should not happen\n    }\n    BufferedReader br = new BufferedReader(new InputStreamReader(in, \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line);\n      line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      int numExpParts = expBody == null ? 2 : 3;\n      assertEquals(numExpParts, parts.length);\n      assertEquals(expTitle, parts[0]);\n      assertEquals(expDate, parts[1]);\n      if (expBody != null) {\n        assertEquals(expBody, parts[2]);\n      }\n      assertNull(br.readLine());\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,Type,String,String,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,Type,String,String,String).mjava","sourceNew":"  private void doReadTest(File file, Type fileType, String expTitle,\n                          String expDate, String expBody) throws Exception {\n    InputStream in = new FileInputStream(file);\n    switch(fileType) {\n    \tcase BZIP2:\n    \t\tin = csFactory.createCompressorInputStream(CompressorStreamFactory.BZIP2, in);\n    \t\tbreak;\n    \tcase GZIP:\n    \t\tin = csFactory.createCompressorInputStream(CompressorStreamFactory.GZIP, in);\n                break;\n    \tcase PLAIN:\n    \t\tbreak; // nothing to do\n    \tdefault:\n    \t\tassertFalse(\"Unknown file type!\",true); //fail, should not happen\n    }\n    BufferedReader br = new BufferedReader(new InputStreamReader(in, \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line);\n      line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      int numExpParts = expBody == null ? 2 : 3;\n      assertEquals(numExpParts, parts.length);\n      assertEquals(expTitle, parts[0]);\n      assertEquals(expDate, parts[1]);\n      if (expBody != null) {\n        assertEquals(expBody, parts[2]);\n      }\n      assertNull(br.readLine());\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":"  private void doReadTest(File file, Type fileType, String expTitle,\n                          String expDate, String expBody) throws Exception {\n    InputStream in = new FileInputStream(file);\n    switch(fileType) {\n    \tcase BZIP2:\n    \t\tin = csFactory.createCompressorInputStream(CompressorStreamFactory.BZIP2, in);\n    \t\tbreak;\n    \tcase GZIP:\n    \t\tin = csFactory.createCompressorInputStream(CompressorStreamFactory.GZIP, in);\n                break;\n    \tcase PLAIN:\n    \t\tbreak; // nothing to do\n    \tdefault:\n    \t\tassertFalse(\"Unknown file type!\",true); //fail, should not happen\n    }\n    BufferedReader br = new BufferedReader(new InputStreamReader(in, \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line);\n      line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      int numExpParts = expBody == null ? 2 : 3;\n      assertEquals(numExpParts, parts.length);\n      assertEquals(expTitle, parts[0]);\n      assertEquals(expDate, parts[1]);\n      if (expBody != null) {\n        assertEquals(expBody, parts[2]);\n      }\n      assertNull(br.readLine());\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b5bca351f23636b9e5afb4be016e7b4e260905fa"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e2944372726ed00fc05229687367002194c6c81"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e2944372726ed00fc05229687367002194c6c81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5bca351f23636b9e5afb4be016e7b4e260905fa":["6e2944372726ed00fc05229687367002194c6c81"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6e2944372726ed00fc05229687367002194c6c81":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","6e2944372726ed00fc05229687367002194c6c81"],"b5bca351f23636b9e5afb4be016e7b4e260905fa":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6e2944372726ed00fc05229687367002194c6c81":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","b5bca351f23636b9e5afb4be016e7b4e260905fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}