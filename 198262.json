{"path":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","commits":[{"id":"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe","date":1430750405,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","pathOld":"/dev/null","sourceNew":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'disk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'disk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'disk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'disk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) ZkStateReader.fromJSON(s.getBytes());\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{disk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{disk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{disk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4532ba8e59acd790546fd70dbf60086b24b2795c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f787cd05db3599da4aebdbe5e239ddb89163d87","date":1430755822,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","sourceNew":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'disk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'disk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'disk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'disk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) ZkStateReader.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{disk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{disk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{disk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","sourceOld":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'disk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'disk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'disk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'disk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) ZkStateReader.fromJSON(s.getBytes());\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{disk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{disk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{disk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4532ba8e59acd790546fd70dbf60086b24b2795c","date":1431009695,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","sourceNew":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) ZkStateReader.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","sourceOld":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'disk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'disk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'disk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'disk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'disk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) ZkStateReader.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{disk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{disk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{disk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","bugFix":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4fc24ecd353171e03bd016c1681cd97476015f","date":1432214672,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","sourceNew":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) ZkStateReader.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","sourceOld":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) ZkStateReader.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","sourceNew":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","sourceOld":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) ZkStateReader.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9db5fcef0c59566ad373ff7844f8a985f0017c","date":1467374856,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","sourceNew":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","sourceOld":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","sourceNew":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","sourceOld":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"969718c368b28ed1b2335ea2deb275c696cddb4f","date":1498803580,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","sourceNew":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<ReplicaPosition, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","sourceOld":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d92226151c91fb4bebcca6d18782d1c84aee2cd","date":1498804792,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","sourceNew":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<ReplicaPosition, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","sourceOld":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<Position, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6397103f7076f0b5ee4edf5b3a63c750a072ff65","date":1510231708,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","sourceNew":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<ReplicaPosition, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.emptyList(),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), new DelegatingCloudManager(null){\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new NodeStateProvider() {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return (Map<String, Object>) MockSnitch.nodeVsTags.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return null;\n          }\n        };\n      }\n    }, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","sourceOld":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<ReplicaPosition, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","sourceNew":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<ReplicaPosition, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.emptyList(),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), new DelegatingCloudManager(null){\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new NodeStateProvider() {\n          @Override\n          public void close() throws IOException { }\n\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return (Map<String, Object>) MockSnitch.nodeVsTags.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return null;\n          }\n        };\n      }\n    }, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","sourceOld":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<ReplicaPosition, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.emptyList(),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), new DelegatingCloudManager(null){\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new NodeStateProvider() {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return (Map<String, Object>) MockSnitch.nodeVsTags.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return null;\n          }\n        };\n      }\n    }, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<ReplicaPosition, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.emptyList(),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), new DelegatingCloudManager(null){\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new NodeStateProvider() {\n          @Override\n          public void close() throws IOException { }\n\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return (Map<String, Object>) MockSnitch.nodeVsTags.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return null;\n          }\n        };\n      }\n    }, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","sourceOld":"  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<ReplicaPosition, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.emptyList(),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), new DelegatingCloudManager(null){\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new NodeStateProvider() {\n          @Override\n          public void close() throws IOException { }\n\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return (Map<String, Object>) MockSnitch.nodeVsTags.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return null;\n          }\n        };\n      }\n    }, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RuleEngineTest#testPlacement3().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<ReplicaPosition, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.emptyList(),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), new DelegatingCloudManager(null){\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new NodeStateProvider() {\n          @Override\n          public void close() throws IOException { }\n\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return (Map<String, Object>) MockSnitch.nodeVsTags.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n            return null;\n          }\n        };\n      }\n    }, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testPlacement3(){\n    String s = \"{\" +\n        \"  '127.0.0.1:49961_':{\" +\n        \"    'node':'127.0.0.1:49961_',\" +\n        \"    'freedisk':992,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49955_':{\" +\n        \"    'node':'127.0.0.1:49955_',\" +\n        \"    'freedisk':995,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.3:49952_':{\" +\n        \"    'node':'127.0.0.1:49952_',\" +\n        \"    'freedisk':990,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.1:49947_':{\" +\n        \"    'node':'127.0.0.1:49947_',\" +\n        \"    'freedisk':980,\" +\n        \"    'cores':1},\" +\n        \"  '127.0.0.2:49958_':{\" +\n        \"    'node':'127.0.0.1:49958_',\" +\n        \"    'freedisk':970,\" +\n        \"    'cores':1}}\";\n    MockSnitch.nodeVsTags = (Map) Utils.fromJSON(s.getBytes(StandardCharsets.UTF_8));\n    //test not\n    List<Rule> rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',node:'*'},\" +\n            \"{node:'!127.0.0.1:49947_'},\" +\n            \"{freedisk:'>1'}]\");\n    Map shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    Map<ReplicaPosition, String> mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.1:49947_\"));\n\n    rules = parseRules(\n         \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',node:'*'},\" +\n            \"{freedisk:'>980~'}]\");\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNotNull(mapping);\n    assertFalse(mapping.containsValue(\"127.0.0.2:49958_\"));\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'*',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, Collections.emptyList(),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), new DelegatingCloudManager(null){\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new NodeStateProvider() {\n          @Override\n          public void close() throws IOException { }\n\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return (Map<String, Object>) MockSnitch.nodeVsTags.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return null;\n          }\n        };\n      }\n    }, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings0();\n    assertNull(mapping);\n\n    rules = parseRules(\n        \"[{cores:'<4'}, \" +\n            \"{replica:'1~',shard:'**',host:'*'}]\"\n            );\n    shardVsReplicaCount = makeMap(\"shard1\", 2, \"shard2\", 2);\n    mapping = new ReplicaAssigner(\n        rules,\n        shardVsReplicaCount, singletonList(MockSnitch.class.getName()),\n        new HashMap(), new ArrayList<>(MockSnitch.nodeVsTags.keySet()), null, null).getNodeMappings();\n    assertNotNull(mapping);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f787cd05db3599da4aebdbe5e239ddb89163d87":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["969718c368b28ed1b2335ea2deb275c696cddb4f"],"ec4fc24ecd353171e03bd016c1681cd97476015f":["4532ba8e59acd790546fd70dbf60086b24b2795c"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["ec4fc24ecd353171e03bd016c1681cd97476015f"],"2e9db5fcef0c59566ad373ff7844f8a985f0017c":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b693a83132c9e45afcd564fd65a25b60ed80388b","2e9db5fcef0c59566ad373ff7844f8a985f0017c"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"969718c368b28ed1b2335ea2deb275c696cddb4f":["2e9db5fcef0c59566ad373ff7844f8a985f0017c"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":["2e9db5fcef0c59566ad373ff7844f8a985f0017c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4532ba8e59acd790546fd70dbf60086b24b2795c":["9f787cd05db3599da4aebdbe5e239ddb89163d87"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"]},"commit2Childs":{"9f787cd05db3599da4aebdbe5e239ddb89163d87":["4532ba8e59acd790546fd70dbf60086b24b2795c"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"ec4fc24ecd353171e03bd016c1681cd97476015f":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["9f787cd05db3599da4aebdbe5e239ddb89163d87"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["2e9db5fcef0c59566ad373ff7844f8a985f0017c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2e9db5fcef0c59566ad373ff7844f8a985f0017c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","969718c368b28ed1b2335ea2deb275c696cddb4f","0d92226151c91fb4bebcca6d18782d1c84aee2cd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"969718c368b28ed1b2335ea2deb275c696cddb4f":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"4532ba8e59acd790546fd70dbf60086b24b2795c":["ec4fc24ecd353171e03bd016c1681cd97476015f"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0d92226151c91fb4bebcca6d18782d1c84aee2cd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}