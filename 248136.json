{"path":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.legacy.LegacyLongField}.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.legacy.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.legacy.LegacyLongField}.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.legacy.LegacyLongField}.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser).mjava","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.solr.legacy.LegacyLongField}.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.legacy.LegacyLongField}.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser).mjava","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.solr.legacy.LegacyLongField}.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.legacy.LegacyLongField}.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser).mjava","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.solr.legacy.LegacyLongField}.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.legacy.LegacyLongField}.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","a178ac3dec643551e66363c457a9074f55545f86"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}