{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#erAndOrEndings().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#erAndOrEndings().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#erAndOrEndings().mjava","sourceNew":"  /*\n   * this routine deals with -er, -or, -ier, and -eer. The -izer ending is\n   * always converted to -ize\n   */\n  private void erAndOrEndings() {\n    int old_k = k;\n    \n    if (word.charAt(k) != 'r') return; // YCS\n    \n    char word_char; /* so we can remember if it was -er or -or */\n    \n    if (endsIn('i', 'z', 'e', 'r')) { /*\n                                       * -ize is very productive, so accept it\n                                       * as the root\n                                       */\n      word.setLength(j + 4);\n      k = j + 3;\n      lookup();\n      return;\n    }\n    \n    if (endsIn('e', 'r') || endsIn('o', 'r')) {\n      word_char = word.charAt(j + 1);\n      if (doubleC(j)) {\n        word.setLength(j);\n        k = j - 1;\n        if (lookup()) return;\n        word.unsafeWrite(word.charAt(j - 1)); /* restore the doubled consonant */\n      }\n      \n      if (word.charAt(j) == 'i') { /* do we have a -ier ending? */\n        word.setCharAt(j, 'y');\n        word.setLength(j + 1);\n        k = j;\n        if (lookup()) /* yes, so check against the dictionary */\n        return;\n        word.setCharAt(j, 'i'); /* restore the endings */\n        word.unsafeWrite('e');\n      }\n      \n      if (word.charAt(j) == 'e') { /* handle -eer */\n        word.setLength(j);\n        k = j - 1;\n        if (lookup()) return;\n        word.unsafeWrite('e');\n      }\n      \n      word.setLength(j + 2); /* remove the -r ending */\n      k = j + 1;\n      if (lookup()) return;\n      word.setLength(j + 1); /* try removing -er/-or */\n      k = j;\n      if (lookup()) return;\n      word.unsafeWrite('e'); /* try removing -or and adding -e */\n      k = j + 1;\n      if (lookup()) return;\n      word.setLength(j + 1);\n      word.unsafeWrite(word_char);\n      word.unsafeWrite('r'); /* restore the word to the way it was */\n      k = old_k;\n      // nolookup()\n    }\n    \n  }\n\n","sourceOld":"  /*\n   * this routine deals with -er, -or, -ier, and -eer. The -izer ending is\n   * always converted to -ize\n   */\n  private void erAndOrEndings() {\n    int old_k = k;\n    \n    if (word.charAt(k) != 'r') return; // YCS\n    \n    char word_char; /* so we can remember if it was -er or -or */\n    \n    if (endsIn('i', 'z', 'e', 'r')) { /*\n                                       * -ize is very productive, so accept it\n                                       * as the root\n                                       */\n      word.setLength(j + 4);\n      k = j + 3;\n      lookup();\n      return;\n    }\n    \n    if (endsIn('e', 'r') || endsIn('o', 'r')) {\n      word_char = word.charAt(j + 1);\n      if (doubleC(j)) {\n        word.setLength(j);\n        k = j - 1;\n        if (lookup()) return;\n        word.unsafeWrite(word.charAt(j - 1)); /* restore the doubled consonant */\n      }\n      \n      if (word.charAt(j) == 'i') { /* do we have a -ier ending? */\n        word.setCharAt(j, 'y');\n        word.setLength(j + 1);\n        k = j;\n        if (lookup()) /* yes, so check against the dictionary */\n        return;\n        word.setCharAt(j, 'i'); /* restore the endings */\n        word.unsafeWrite('e');\n      }\n      \n      if (word.charAt(j) == 'e') { /* handle -eer */\n        word.setLength(j);\n        k = j - 1;\n        if (lookup()) return;\n        word.unsafeWrite('e');\n      }\n      \n      word.setLength(j + 2); /* remove the -r ending */\n      k = j + 1;\n      if (lookup()) return;\n      word.setLength(j + 1); /* try removing -er/-or */\n      k = j;\n      if (lookup()) return;\n      word.unsafeWrite('e'); /* try removing -or and adding -e */\n      k = j + 1;\n      if (lookup()) return;\n      word.setLength(j + 1);\n      word.unsafeWrite(word_char);\n      word.unsafeWrite('r'); /* restore the word to the way it was */\n      k = old_k;\n      // nolookup()\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}