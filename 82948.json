{"path":"src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","commits":[{"id":"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a","date":1240390408,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}