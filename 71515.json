{"path":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, TextField.TYPE_UNSTORED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term), false);\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, TextField.TYPE_UNSTORED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term), false);\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, TextField.TYPE_UNSTORED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term), false);\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, TextField.TYPE_UNSTORED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term), false);\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bfa39296944e5fddc334aa89243d91f9cbb8367","date":1330973284,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n\t  final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n\t    .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n\t    .setMergePolicy(newLogMergePolicy());\n\t  iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n\t  iwc.setMaxBufferedDocs(-1);\n\t  final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\t\n\t  for(int idx=0;idx<NUM_DOCS;idx++) {\n\t    final Document doc = new Document();\n\t    String s = isS1.get(idx) ? s1 : s2;\n\t    final Field f = newField(\"field\", s, TextField.TYPE_UNSTORED);\n\t    final int count = _TestUtil.nextInt(random, 1, 4);\n\t    for(int ct=0;ct<count;ct++) {\n\t      doc.add(f);\n\t    }\n\t    riw.addDocument(doc);\n\t  }\n\t\n\t  r = riw.getReader();\n\t  riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term), false);\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, TextField.TYPE_UNSTORED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term), false);\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n\t  final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n\t    .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n\t    .setMergePolicy(newLogMergePolicy());\n\t  iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n\t  iwc.setMaxBufferedDocs(-1);\n\t  final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\t\n\t  for(int idx=0;idx<NUM_DOCS;idx++) {\n\t    final Document doc = new Document();\n\t    String s = isS1.get(idx) ? s1 : s2;\n\t    final Field f = newField(\"field\", s, TextField.TYPE_UNSTORED);\n\t    final int count = _TestUtil.nextInt(random, 1, 4);\n\t    for(int ct=0;ct<count;ct++) {\n\t      doc.add(f);\n\t    }\n\t    riw.addDocument(doc);\n\t  }\n\t\n\t  r = riw.getReader();\n\t  riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term), false);\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, TextField.TYPE_UNSTORED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term), false);\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n\t  final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n\t    .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n\t    .setMergePolicy(newLogMergePolicy());\n\t  iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n\t  iwc.setMaxBufferedDocs(-1);\n\t  final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\t\n\t  for(int idx=0;idx<NUM_DOCS;idx++) {\n\t    final Document doc = new Document();\n\t    String s = isS1.get(idx) ? s1 : s2;\n\t    final Field f = newField(\"field\", s, TextField.TYPE_UNSTORED);\n\t    final int count = _TestUtil.nextInt(random(), 1, 4);\n\t    for(int ct=0;ct<count;ct++) {\n\t      doc.add(f);\n\t    }\n\t    riw.addDocument(doc);\n\t  }\n\t\n\t  r = riw.getReader();\n\t  riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term), false);\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n\t  final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n\t    .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n\t    .setMergePolicy(newLogMergePolicy());\n\t  iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n\t  iwc.setMaxBufferedDocs(-1);\n\t  final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\t\n\t  for(int idx=0;idx<NUM_DOCS;idx++) {\n\t    final Document doc = new Document();\n\t    String s = isS1.get(idx) ? s1 : s2;\n\t    final Field f = newField(\"field\", s, TextField.TYPE_UNSTORED);\n\t    final int count = _TestUtil.nextInt(random, 1, 4);\n\t    for(int ct=0;ct<count;ct++) {\n\t      doc.add(f);\n\t    }\n\t    riw.addDocument(doc);\n\t  }\n\t\n\t  r = riw.getReader();\n\t  riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term), false);\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n\t  final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n\t    .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n\t    .setMergePolicy(newLogMergePolicy());\n\t  iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n\t  iwc.setMaxBufferedDocs(-1);\n\t  final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\t\n\t  for(int idx=0;idx<NUM_DOCS;idx++) {\n\t    final Document doc = new Document();\n\t    String s = isS1.get(idx) ? s1 : s2;\n\t    final Field f = newTextField(\"field\", s, Field.Store.NO);\n\t    final int count = _TestUtil.nextInt(random(), 1, 4);\n\t    for(int ct=0;ct<count;ct++) {\n\t      doc.add(f);\n\t    }\n\t    riw.addDocument(doc);\n\t  }\n\t\n\t  r = riw.getReader();\n\t  riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term), false);\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n\t  final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n\t    .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n\t    .setMergePolicy(newLogMergePolicy());\n\t  iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n\t  iwc.setMaxBufferedDocs(-1);\n\t  final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\t\n\t  for(int idx=0;idx<NUM_DOCS;idx++) {\n\t    final Document doc = new Document();\n\t    String s = isS1.get(idx) ? s1 : s2;\n\t    final Field f = newField(\"field\", s, TextField.TYPE_UNSTORED);\n\t    final int count = _TestUtil.nextInt(random(), 1, 4);\n\t    for(int ct=0;ct<count;ct++) {\n\t      doc.add(f);\n\t    }\n\t    riw.addDocument(doc);\n\t  }\n\t\n\t  r = riw.getReader();\n\t  riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term), false);\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["8bfa39296944e5fddc334aa89243d91f9cbb8367"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n\t  final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n\t    .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n\t    .setMergePolicy(newLogMergePolicy());\n\t  iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n\t  iwc.setMaxBufferedDocs(-1);\n\t  final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\t\n\t  for(int idx=0;idx<NUM_DOCS;idx++) {\n\t    final Document doc = new Document();\n\t    String s = isS1.get(idx) ? s1 : s2;\n\t    final Field f = newTextField(\"field\", s, Field.Store.NO);\n\t    final int count = _TestUtil.nextInt(random(), 1, 4);\n\t    for(int ct=0;ct<count;ct++) {\n\t      doc.add(f);\n\t    }\n\t    riw.addDocument(doc);\n\t  }\n\t\n\t  r = riw.getReader();\n\t  riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n\t  final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n\t    .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n\t    .setMergePolicy(newLogMergePolicy());\n\t  iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n\t  iwc.setMaxBufferedDocs(-1);\n\t  final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\t\n\t  for(int idx=0;idx<NUM_DOCS;idx++) {\n\t    final Document doc = new Document();\n\t    String s = isS1.get(idx) ? s1 : s2;\n\t    final Field f = newTextField(\"field\", s, Field.Store.NO);\n\t    final int count = _TestUtil.nextInt(random(), 1, 4);\n\t    for(int ct=0;ct<count;ct++) {\n\t      doc.add(f);\n\t    }\n\t    riw.addDocument(doc);\n\t  }\n\t\n\t  r = riw.getReader();\n\t  riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term), false);\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n\t  final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n\t    .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n\t    .setMergePolicy(newLogMergePolicy());\n\t  iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n\t  iwc.setMaxBufferedDocs(-1);\n\t  final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\t\n\t  for(int idx=0;idx<NUM_DOCS;idx++) {\n\t    final Document doc = new Document();\n\t    String s = isS1.get(idx) ? s1 : s2;\n\t    final Field f = newTextField(\"field\", s, Field.Store.NO);\n\t    final int count = _TestUtil.nextInt(random(), 1, 4);\n\t    for(int ct=0;ct<count;ct++) {\n\t      doc.add(f);\n\t    }\n\t    riw.addDocument(doc);\n\t  }\n\t\n\t  r = riw.getReader();\n\t  riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n\t  final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n\t    .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n\t    .setMergePolicy(newLogMergePolicy());\n\t  iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n\t  iwc.setMaxBufferedDocs(-1);\n\t  final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\t\n\t  for(int idx=0;idx<NUM_DOCS;idx++) {\n\t    final Document doc = new Document();\n\t    String s = isS1.get(idx) ? s1 : s2;\n\t    final Field f = newTextField(\"field\", s, Field.Store.NO);\n\t    final int count = _TestUtil.nextInt(random(), 1, 4);\n\t    for(int ct=0;ct<count;ct++) {\n\t      doc.add(f);\n\t    }\n\t    riw.addDocument(doc);\n\t  }\n\t\n\t  r = riw.getReader();\n\t  riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term), false);\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n\t  final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n\t    .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n\t    .setMergePolicy(newLogMergePolicy());\n\t  iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n\t  iwc.setMaxBufferedDocs(-1);\n\t  final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\t\n\t  for(int idx=0;idx<NUM_DOCS;idx++) {\n\t    final Document doc = new Document();\n\t    String s = isS1.get(idx) ? s1 : s2;\n\t    final Field f = newTextField(\"field\", s, Field.Store.NO);\n\t    final int count = _TestUtil.nextInt(random(), 1, 4);\n\t    for(int ct=0;ct<count;ct++) {\n\t      doc.add(f);\n\t    }\n\t    riw.addDocument(doc);\n\t  }\n\t\n\t  r = riw.getReader();\n\t  riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n\t  final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n\t    .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n\t    .setMergePolicy(newLogMergePolicy());\n\t  iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n\t  iwc.setMaxBufferedDocs(-1);\n\t  final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\t\n\t  for(int idx=0;idx<NUM_DOCS;idx++) {\n\t    final Document doc = new Document();\n\t    String s = isS1.get(idx) ? s1 : s2;\n\t    final Field f = newTextField(\"field\", s, Field.Store.NO);\n\t    final int count = _TestUtil.nextInt(random(), 1, 4);\n\t    for(int ct=0;ct<count;ct++) {\n\t      doc.add(f);\n\t    }\n\t    riw.addDocument(doc);\n\t  }\n\t\n\t  r = riw.getReader();\n\t  riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term), false);\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","date":1344797146,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n\t  final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n\t    .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n\t    .setMergePolicy(newLogMergePolicy());\n\t  iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n\t  iwc.setMaxBufferedDocs(-1);\n\t  final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\t\n\t  for(int idx=0;idx<NUM_DOCS;idx++) {\n\t    final Document doc = new Document();\n\t    String s = isS1.get(idx) ? s1 : s2;\n\t    final Field f = newTextField(\"field\", s, Field.Store.NO);\n\t    final int count = _TestUtil.nextInt(random(), 1, 4);\n\t    for(int ct=0;ct<count;ct++) {\n\t      doc.add(f);\n\t    }\n\t    riw.addDocument(doc);\n\t  }\n\t\n\t  r = riw.getReader();\n\t  riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n\t  final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n\t    .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n\t    .setMergePolicy(newLogMergePolicy());\n\t  iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n\t  iwc.setMaxBufferedDocs(-1);\n\t  final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\t\n\t  for(int idx=0;idx<NUM_DOCS;idx++) {\n\t    final Document doc = new Document();\n\t    String s = isS1.get(idx) ? s1 : s2;\n\t    final Field f = newTextField(\"field\", s, Field.Store.NO);\n\t    final int count = _TestUtil.nextInt(random(), 1, 4);\n\t    for(int ct=0;ct<count;ct++) {\n\t      doc.add(f);\n\t    }\n\t    riw.addDocument(doc);\n\t  }\n\t\n\t  r = riw.getReader();\n\t  riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n\t  final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n\t    .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n\t    .setMergePolicy(newLogMergePolicy());\n\t  iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n\t  iwc.setMaxBufferedDocs(-1);\n\t  final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\t\n\t  for(int idx=0;idx<NUM_DOCS;idx++) {\n\t    final Document doc = new Document();\n\t    String s = isS1.get(idx) ? s1 : s2;\n\t    final Field f = newTextField(\"field\", s, Field.Store.NO);\n\t    final int count = _TestUtil.nextInt(random(), 1, 4);\n\t    for(int ct=0;ct<count;ct++) {\n\t      doc.add(f);\n\t    }\n\t    riw.addDocument(doc);\n\t  }\n\t\n\t  r = riw.getReader();\n\t  riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n\t  final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n\t    .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n\t    .setMergePolicy(newLogMergePolicy());\n\t  iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n\t  iwc.setMaxBufferedDocs(-1);\n\t  final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\t\n\t  for(int idx=0;idx<NUM_DOCS;idx++) {\n\t    final Document doc = new Document();\n\t    String s = isS1.get(idx) ? s1 : s2;\n\t    final Field f = newTextField(\"field\", s, Field.Store.NO);\n\t    final int count = _TestUtil.nextInt(random(), 1, 4);\n\t    for(int ct=0;ct<count;ct++) {\n\t      doc.add(f);\n\t    }\n\t    riw.addDocument(doc);\n\t  }\n\t\n\t  r = riw.getReader();\n\t  riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n\t  final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n\t    .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n\t    .setMergePolicy(newLogMergePolicy());\n\t  iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n\t  iwc.setMaxBufferedDocs(-1);\n\t  final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\t\n\t  for(int idx=0;idx<NUM_DOCS;idx++) {\n\t    final Document doc = new Document();\n\t    String s = isS1.get(idx) ? s1 : s2;\n\t    final Field f = newTextField(\"field\", s, Field.Store.NO);\n\t    final int count = _TestUtil.nextInt(random(), 1, 4);\n\t    for(int ct=0;ct<count;ct++) {\n\t      doc.add(f);\n\t    }\n\t    riw.addDocument(doc);\n\t  }\n\t\n\t  r = riw.getReader();\n\t  riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n\t  final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n\t    .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n\t    .setMergePolicy(newLogMergePolicy());\n\t  iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n\t  iwc.setMaxBufferedDocs(-1);\n\t  final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\t\n\t  for(int idx=0;idx<NUM_DOCS;idx++) {\n\t    final Document doc = new Document();\n\t    String s = isS1.get(idx) ? s1 : s2;\n\t    final Field f = newTextField(\"field\", s, Field.Store.NO);\n\t    final int count = _TestUtil.nextInt(random(), 1, 4);\n\t    for(int ct=0;ct<count;ct++) {\n\t      doc.add(f);\n\t    }\n\t    riw.addDocument(doc);\n\t  }\n\t\n\t  r = riw.getReader();\n\t  riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = _TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n\t  final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n\t    .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n\t    .setMergePolicy(newLogMergePolicy());\n\t  iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n\t  iwc.setMaxBufferedDocs(-1);\n\t  final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\t\n\t  for(int idx=0;idx<NUM_DOCS;idx++) {\n\t    final Document doc = new Document();\n\t    String s = isS1.get(idx) ? s1 : s2;\n\t    final Field f = newTextField(\"field\", s, Field.Store.NO);\n\t    final int count = _TestUtil.nextInt(random(), 1, 4);\n\t    for(int ct=0;ct<count;ct++) {\n\t      doc.add(f);\n\t    }\n\t    riw.addDocument(doc);\n\t  }\n\t\n\t  r = riw.getReader();\n\t  riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = _TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = _TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = _TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(TestUtil.createTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(createTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(TestUtil.createTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(createTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(TestUtil.getTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(createTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.shutdown();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(createTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(createTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.shutdown();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(createTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.shutdown();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(createTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(createTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.shutdown();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(createTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final PostingsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(createTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(createTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final PostingsEnum postings = MultiFields.getTermPositionsEnum(r, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(createTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final PostingsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(createTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final PostingsEnum postings = MultiTerms.getTermPostingsEnum(r, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(createTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final PostingsEnum postings = MultiFields.getTermPositionsEnum(r, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(createTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(1000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final PostingsEnum postings = MultiTerms.getTermPostingsEnum(r, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(createTempDir(\"longpostings\" + \".\" + random().nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random().nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    final IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n      .setMergePolicy(newLogMergePolicy());\n    iwc.setRAMBufferSizeMB(16.0 + 16.0 * random().nextDouble());\n    iwc.setMaxBufferedDocs(-1);\n    final RandomIndexWriter riw = new RandomIndexWriter(random(), dir, iwc);\n\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      final Document doc = new Document();\n      String s = isS1.get(idx) ? s1 : s2;\n      final Field f = newTextField(\"field\", s, Field.Store.NO);\n      final int count = TestUtil.nextInt(random(), 1, 4);\n      for(int ct=0;ct<count;ct++) {\n        doc.add(f);\n      }\n      riw.addDocument(doc);\n    }\n\n    r = riw.getReader();\n    riw.close();\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random().nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final PostingsEnum postings = MultiTerms.getTermPostingsEnum(r, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocIdSetIterator.NO_MORE_DOCS) {\n        final int what = random().nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random().nextInt(6) == 3) {\n            if (VERBOSE) {\n              System.out.println(\"    check positions\");\n            }\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random().nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + TestUtil.nextInt(random(), 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random().nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random().nextBoolean()) {\n                postings.getPayload();\n                if (random().nextBoolean()) {\n                  postings.getPayload(); // get it again\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["d6f074e73200c07d54f242d3880a8da5a35ff97b","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"51f5280f31484820499077f41fcdfe92d527d9dc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["04f07771a2a7dd3a395700665ed839c3dae2def2","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["04f07771a2a7dd3a395700665ed839c3dae2def2","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8bfa39296944e5fddc334aa89243d91f9cbb8367"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"]},"commit2Childs":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["322360ac5185a8446d3e0b530b2068bef67cd3d5","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["8bfa39296944e5fddc334aa89243d91f9cbb8367"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"51f5280f31484820499077f41fcdfe92d527d9dc":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["6613659748fe4411a7dcf85266e55db1f95f7315"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}