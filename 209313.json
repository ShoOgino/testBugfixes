{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","pathOld":"/dev/null","sourceNew":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockRAMDirectory();\n      writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      cms = (ConcurrentMergeScheduler) writer2.getMergeScheduler();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","sourceNew":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockRAMDirectory();\n      writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      cms = (ConcurrentMergeScheduler) writer2.getMergeScheduler();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","sourceOld":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockRAMDirectory();\n      writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      cms = (ConcurrentMergeScheduler) writer2.getMergeScheduler();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}