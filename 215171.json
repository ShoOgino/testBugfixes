{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (\"on\".equals(requestParams.get(\"debug\"))) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = \"true\".equals(requestParams.get(\"verbose\"))\n                || \"on\".equals(requestParams.get(\"verbose\"));\n      }\n      syncMode = \"true\".equals(requestParams.get(\"synchronous\"));\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = Boolean.parseBoolean((String) requestParams.get(\"commit\"));\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = Boolean.parseBoolean((String) requestParams.get(\"clean\"));\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = Boolean.parseBoolean((String) requestParams.get(\"optimize\"));\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (\"on\".equals(requestParams.get(\"debug\"))) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = \"true\".equals(requestParams.get(\"verbose\"))\n                || \"on\".equals(requestParams.get(\"verbose\"));\n      }\n      syncMode = \"true\".equals(requestParams.get(\"synchronous\"));\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = Boolean.parseBoolean((String) requestParams.get(\"commit\"));\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = Boolean.parseBoolean((String) requestParams.get(\"clean\"));\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = Boolean.parseBoolean((String) requestParams.get(\"optimize\"));\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","sourceNew":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (\"on\".equals(requestParams.get(\"debug\"))) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = \"true\".equals(requestParams.get(\"verbose\"))\n                || \"on\".equals(requestParams.get(\"verbose\"));\n      }\n      syncMode = \"true\".equals(requestParams.get(\"synchronous\"));\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = Boolean.parseBoolean((String) requestParams.get(\"commit\"));\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = Boolean.parseBoolean((String) requestParams.get(\"clean\"));\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = Boolean.parseBoolean((String) requestParams.get(\"optimize\"));\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","sourceOld":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (\"on\".equals(requestParams.get(\"debug\"))) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = \"true\".equals(requestParams.get(\"verbose\"))\n                || \"on\".equals(requestParams.get(\"verbose\"));\n      }\n      syncMode = \"true\".equals(requestParams.get(\"synchronous\"));\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = Boolean.parseBoolean((String) requestParams.get(\"commit\"));\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = Boolean.parseBoolean((String) requestParams.get(\"clean\"));\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = Boolean.parseBoolean((String) requestParams.get(\"optimize\"));\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (\"on\".equals(requestParams.get(\"debug\"))) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = \"true\".equals(requestParams.get(\"verbose\"))\n                || \"on\".equals(requestParams.get(\"verbose\"));\n      }\n      syncMode = \"true\".equals(requestParams.get(\"synchronous\"));\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = Boolean.parseBoolean((String) requestParams.get(\"commit\"));\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = Boolean.parseBoolean((String) requestParams.get(\"clean\"));\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = Boolean.parseBoolean((String) requestParams.get(\"optimize\"));\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9f9c250dfa2238c6fa2cb7c83894edc84e1c5a8","date":1289183364,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","sourceNew":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (StrUtils.parseBool((String)requestParams.get(\"debug\"),false)) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = StrUtils.parseBool((String)requestParams.get(\"verbose\"),false);\n      }\n      syncMode = StrUtils.parseBool((String)requestParams.get(\"synchronous\"),false);\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = StrUtils.parseBool((String) requestParams.get(\"commit\"),true);\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = StrUtils.parseBool((String) requestParams.get(\"clean\"),true);\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"),true);\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","sourceOld":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (\"on\".equals(requestParams.get(\"debug\"))) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = \"true\".equals(requestParams.get(\"verbose\"))\n                || \"on\".equals(requestParams.get(\"verbose\"));\n      }\n      syncMode = \"true\".equals(requestParams.get(\"synchronous\"));\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = Boolean.parseBoolean((String) requestParams.get(\"commit\"));\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = Boolean.parseBoolean((String) requestParams.get(\"clean\"));\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = Boolean.parseBoolean((String) requestParams.get(\"optimize\"));\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","872f5f5903b61078e3b9da4be3e9f55872f7f4c8"],"bugIntro":["88ce570efa5e16fddc35c34495194cfd8bb828b2","88ce570efa5e16fddc35c34495194cfd8bb828b2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","sourceNew":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (StrUtils.parseBool((String)requestParams.get(\"debug\"),false)) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = StrUtils.parseBool((String)requestParams.get(\"verbose\"),false);\n      }\n      syncMode = StrUtils.parseBool((String)requestParams.get(\"synchronous\"),false);\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = StrUtils.parseBool((String) requestParams.get(\"commit\"),true);\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = StrUtils.parseBool((String) requestParams.get(\"clean\"),true);\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"),true);\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","sourceOld":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (\"on\".equals(requestParams.get(\"debug\"))) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = \"true\".equals(requestParams.get(\"verbose\"))\n                || \"on\".equals(requestParams.get(\"verbose\"));\n      }\n      syncMode = \"true\".equals(requestParams.get(\"synchronous\"));\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = Boolean.parseBoolean((String) requestParams.get(\"commit\"));\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = Boolean.parseBoolean((String) requestParams.get(\"clean\"));\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = Boolean.parseBoolean((String) requestParams.get(\"optimize\"));\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","sourceNew":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (StrUtils.parseBool((String)requestParams.get(\"debug\"),false)) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = StrUtils.parseBool((String)requestParams.get(\"verbose\"),false);\n      }\n      syncMode = StrUtils.parseBool((String)requestParams.get(\"synchronous\"),false);\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = StrUtils.parseBool((String) requestParams.get(\"commit\"),true);\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = StrUtils.parseBool((String) requestParams.get(\"clean\"),true);\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"),true);\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","sourceOld":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (\"on\".equals(requestParams.get(\"debug\"))) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = \"true\".equals(requestParams.get(\"verbose\"))\n                || \"on\".equals(requestParams.get(\"verbose\"));\n      }\n      syncMode = \"true\".equals(requestParams.get(\"synchronous\"));\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = Boolean.parseBoolean((String) requestParams.get(\"commit\"));\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = Boolean.parseBoolean((String) requestParams.get(\"clean\"));\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = Boolean.parseBoolean((String) requestParams.get(\"optimize\"));\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","sourceNew":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (StrUtils.parseBool((String)requestParams.get(\"debug\"),false)) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = StrUtils.parseBool((String)requestParams.get(\"verbose\"),false);\n      }\n      syncMode = StrUtils.parseBool((String)requestParams.get(\"synchronous\"),false);\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = StrUtils.parseBool((String) requestParams.get(\"commit\"),true);\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = StrUtils.parseBool((String) requestParams.get(\"clean\"),true);\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"),true);\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","sourceOld":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (StrUtils.parseBool((String)requestParams.get(\"debug\"),false)) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = StrUtils.parseBool((String)requestParams.get(\"verbose\"),false);\n      }\n      syncMode = StrUtils.parseBool((String)requestParams.get(\"synchronous\"),false);\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = StrUtils.parseBool((String) requestParams.get(\"commit\"),true);\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = StrUtils.parseBool((String) requestParams.get(\"clean\"),true);\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"),true);\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.RequestParams#RequestParams(Map[String,Object]).mjava","sourceNew":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (StrUtils.parseBool((String)requestParams.get(\"debug\"),false)) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = StrUtils.parseBool((String)requestParams.get(\"verbose\"),false);\n      }\n      syncMode = StrUtils.parseBool((String)requestParams.get(\"synchronous\"),false);\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = StrUtils.parseBool((String) requestParams.get(\"commit\"),true);\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = StrUtils.parseBool((String) requestParams.get(\"clean\"),true);\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"),true);\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","sourceOld":"    public RequestParams(Map<String, Object> requestParams) {\n      if (requestParams.containsKey(\"command\"))\n        command = (String) requestParams.get(\"command\");\n\n      if (StrUtils.parseBool((String)requestParams.get(\"debug\"),false)) {\n        debug = true;\n        rows = 10;\n        // Set default values suitable for debug mode\n        commit = false;\n        clean = false;\n        verbose = StrUtils.parseBool((String)requestParams.get(\"verbose\"),false);\n      }\n      syncMode = StrUtils.parseBool((String)requestParams.get(\"synchronous\"),false);\n      if (DELTA_IMPORT_CMD.equals(command) || IMPORT_CMD.equals(command)) {\n        clean = false;\n      }\n      if (requestParams.containsKey(\"commit\"))\n        commit = StrUtils.parseBool((String) requestParams.get(\"commit\"),true);\n      if (requestParams.containsKey(\"start\"))\n        start = Integer.parseInt((String) requestParams.get(\"start\"));\n      if (requestParams.containsKey(\"rows\"))\n        rows = Integer.parseInt((String) requestParams.get(\"rows\"));\n      if (requestParams.containsKey(\"clean\"))\n        clean = StrUtils.parseBool((String) requestParams.get(\"clean\"),true);\n      if (requestParams.containsKey(\"optimize\")) {\n        optimize = StrUtils.parseBool((String) requestParams.get(\"optimize\"),true);\n        if (optimize)\n          commit = true;\n      }\n\n      Object o = requestParams.get(\"entity\");\n\n      if (o != null && o instanceof String) {\n        entities = new ArrayList<String>();\n        entities.add((String) o);\n      } else if (o != null && o instanceof List) {\n        entities = (List<String>) requestParams.get(\"entity\");\n      }\n\n      dataConfig = (String) requestParams.get(\"dataConfig\");\n      if (dataConfig != null && dataConfig.trim().length() == 0) {\n        // Empty data-config param is not valid, change it to null\n        dataConfig = null;\n      }\n\n      this.requestParams = requestParams;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c9f9c250dfa2238c6fa2cb7c83894edc84e1c5a8","c9f9c250dfa2238c6fa2cb7c83894edc84e1c5a8"],"c26f00b574427b55127e869b935845554afde1fa":["c9f9c250dfa2238c6fa2cb7c83894edc84e1c5a8","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"85a883878c0af761245ab048babc63d099f835f3":["1da8d55113b689b06716246649de6f62430f15c0","c9f9c250dfa2238c6fa2cb7c83894edc84e1c5a8"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","c9f9c250dfa2238c6fa2cb7c83894edc84e1c5a8"],"c9f9c250dfa2238c6fa2cb7c83894edc84e1c5a8":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c9f9c250dfa2238c6fa2cb7c83894edc84e1c5a8"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"85a883878c0af761245ab048babc63d099f835f3":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"c9f9c250dfa2238c6fa2cb7c83894edc84e1c5a8":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}