{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriterNoHeader(DataOutput,Format,int,int,int).mjava","commits":[{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriterNoHeader(DataOutput,Format,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Create a packed integer array writer for the given output, format,\n   * value count, and number of bits per value.\n   * </p><p>\n   * The resulting stream will be long-aligned. This means that depending on\n   * the format which is used, up to 63 bits will be wasted. An easy way to\n   * make sure that no space is lost is to always use a <code>valueCount</code>\n   * that is a multiple of 64.\n   * </p><p>\n   * This method does not write any metadata to the stream, meaning that it is\n   * your responsibility to store it somewhere else in order to be able to\n   * recover data from the stream later on:\n   * <ul>\n   *   <li><code>format</code> (using {@link Format#getId()}),</li>\n   *   <li><code>valueCount</code>,</li>\n   *   <li><code>bitsPerValue</code>,</li>\n   *   <li>{@link #VERSION_CURRENT}.</li>\n   * </ul>\n   * </p><p>\n   * It is possible to start writing values without knowing how many of them you\n   * are actually going to write. To do this, just pass <code>-1</code> as\n   * <code>valueCount</code>. On the other hand, for any positive value of\n   * <code>valueCount</code>, the returned writer will make sure that you don't\n   * write more values than expected and pad the end of stream with zeros in\n   * case you have written less than <code>valueCount</code> when calling\n   * {@link Writer#finish()}.\n   * </p><p>\n   * The <code>mem</code> parameter lets you control how much memory can be used\n   * to buffer changes in memory before flushing to disk. High values of\n   * <code>mem</code> are likely to improve throughput. On the other hand, if\n   * speed is not that important to you, a value of <code>0</code> will use as\n   * little memory as possible and should already offer reasonable throughput.\n   *\n   * @param out          the data output\n   * @param format       the format to use to serialize the values\n   * @param valueCount   the number of values\n   * @param bitsPerValue the number of bits per value\n   * @param mem          how much memory (in bytes) can be used to speed up serialization\n   * @return             a Writer\n   * @throws IOException\n   * @see PackedInts#getReaderIteratorNoHeader(DataInput, Format, int, int, int, int)\n   * @see PackedInts#getReaderNoHeader(DataInput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Writer getWriterNoHeader(\n      DataOutput out, Format format, int valueCount, int bitsPerValue, int mem) throws IOException {\n    return new PackedWriter(format, out, valueCount, bitsPerValue, mem);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriterNoHeader(DataOutput,Format,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Create a packed integer array writer for the given output, format,\n   * value count, and number of bits per value.\n   * </p><p>\n   * The resulting stream will be long-aligned. This means that depending on\n   * the format which is used, up to 63 bits will be wasted. An easy way to\n   * make sure that no space is lost is to always use a <code>valueCount</code>\n   * that is a multiple of 64.\n   * </p><p>\n   * This method does not write any metadata to the stream, meaning that it is\n   * your responsibility to store it somewhere else in order to be able to\n   * recover data from the stream later on:\n   * <ul>\n   *   <li><code>format</code> (using {@link Format#getId()}),</li>\n   *   <li><code>valueCount</code>,</li>\n   *   <li><code>bitsPerValue</code>,</li>\n   *   <li>{@link #VERSION_CURRENT}.</li>\n   * </ul>\n   * </p><p>\n   * It is possible to start writing values without knowing how many of them you\n   * are actually going to write. To do this, just pass <code>-1</code> as\n   * <code>valueCount</code>. On the other hand, for any positive value of\n   * <code>valueCount</code>, the returned writer will make sure that you don't\n   * write more values than expected and pad the end of stream with zeros in\n   * case you have written less than <code>valueCount</code> when calling\n   * {@link Writer#finish()}.\n   * </p><p>\n   * The <code>mem</code> parameter lets you control how much memory can be used\n   * to buffer changes in memory before flushing to disk. High values of\n   * <code>mem</code> are likely to improve throughput. On the other hand, if\n   * speed is not that important to you, a value of <code>0</code> will use as\n   * little memory as possible and should already offer reasonable throughput.\n   *\n   * @param out          the data output\n   * @param format       the format to use to serialize the values\n   * @param valueCount   the number of values\n   * @param bitsPerValue the number of bits per value\n   * @param mem          how much memory (in bytes) can be used to speed up serialization\n   * @return             a Writer\n   * @throws IOException\n   * @see PackedInts#getReaderIteratorNoHeader(DataInput, Format, int, int, int, int)\n   * @see PackedInts#getReaderNoHeader(DataInput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Writer getWriterNoHeader(\n      DataOutput out, Format format, int valueCount, int bitsPerValue, int mem) throws IOException {\n    return new PackedWriter(format, out, valueCount, bitsPerValue, mem);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"035130b0c342f404c027af8c8870587c3741cb1e","date":1342898805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriterNoHeader(DataOutput,Format,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriterNoHeader(DataOutput,Format,int,int,int).mjava","sourceNew":"  /**\n   * Expert: Create a packed integer array writer for the given output, format,\n   * value count, and number of bits per value.\n   * </p><p>\n   * The resulting stream will be long-aligned. This means that depending on\n   * the format which is used, up to 63 bits will be wasted. An easy way to\n   * make sure that no space is lost is to always use a <code>valueCount</code>\n   * that is a multiple of 64.\n   * </p><p>\n   * This method does not write any metadata to the stream, meaning that it is\n   * your responsibility to store it somewhere else in order to be able to\n   * recover data from the stream later on:\n   * <ul>\n   *   <li><code>format</code> (using {@link Format#getId()}),</li>\n   *   <li><code>valueCount</code>,</li>\n   *   <li><code>bitsPerValue</code>,</li>\n   *   <li>{@link #VERSION_CURRENT}.</li>\n   * </ul>\n   * </p><p>\n   * It is possible to start writing values without knowing how many of them you\n   * are actually going to write. To do this, just pass <code>-1</code> as\n   * <code>valueCount</code>. On the other hand, for any positive value of\n   * <code>valueCount</code>, the returned writer will make sure that you don't\n   * write more values than expected and pad the end of stream with zeros in\n   * case you have written less than <code>valueCount</code> when calling\n   * {@link Writer#finish()}.\n   * </p><p>\n   * The <code>mem</code> parameter lets you control how much memory can be used\n   * to buffer changes in memory before flushing to disk. High values of\n   * <code>mem</code> are likely to improve throughput. On the other hand, if\n   * speed is not that important to you, a value of <code>0</code> will use as\n   * little memory as possible and should already offer reasonable throughput.\n   *\n   * @param out          the data output\n   * @param format       the format to use to serialize the values\n   * @param valueCount   the number of values\n   * @param bitsPerValue the number of bits per value\n   * @param mem          how much memory (in bytes) can be used to speed up serialization\n   * @return             a Writer\n   * @throws IOException\n   * @see PackedInts#getReaderIteratorNoHeader(DataInput, Format, int, int, int, int)\n   * @see PackedInts#getReaderNoHeader(DataInput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Writer getWriterNoHeader(\n      DataOutput out, Format format, int valueCount, int bitsPerValue, int mem) {\n    return new PackedWriter(format, out, valueCount, bitsPerValue, mem);\n  }\n\n","sourceOld":"  /**\n   * Expert: Create a packed integer array writer for the given output, format,\n   * value count, and number of bits per value.\n   * </p><p>\n   * The resulting stream will be long-aligned. This means that depending on\n   * the format which is used, up to 63 bits will be wasted. An easy way to\n   * make sure that no space is lost is to always use a <code>valueCount</code>\n   * that is a multiple of 64.\n   * </p><p>\n   * This method does not write any metadata to the stream, meaning that it is\n   * your responsibility to store it somewhere else in order to be able to\n   * recover data from the stream later on:\n   * <ul>\n   *   <li><code>format</code> (using {@link Format#getId()}),</li>\n   *   <li><code>valueCount</code>,</li>\n   *   <li><code>bitsPerValue</code>,</li>\n   *   <li>{@link #VERSION_CURRENT}.</li>\n   * </ul>\n   * </p><p>\n   * It is possible to start writing values without knowing how many of them you\n   * are actually going to write. To do this, just pass <code>-1</code> as\n   * <code>valueCount</code>. On the other hand, for any positive value of\n   * <code>valueCount</code>, the returned writer will make sure that you don't\n   * write more values than expected and pad the end of stream with zeros in\n   * case you have written less than <code>valueCount</code> when calling\n   * {@link Writer#finish()}.\n   * </p><p>\n   * The <code>mem</code> parameter lets you control how much memory can be used\n   * to buffer changes in memory before flushing to disk. High values of\n   * <code>mem</code> are likely to improve throughput. On the other hand, if\n   * speed is not that important to you, a value of <code>0</code> will use as\n   * little memory as possible and should already offer reasonable throughput.\n   *\n   * @param out          the data output\n   * @param format       the format to use to serialize the values\n   * @param valueCount   the number of values\n   * @param bitsPerValue the number of bits per value\n   * @param mem          how much memory (in bytes) can be used to speed up serialization\n   * @return             a Writer\n   * @throws IOException\n   * @see PackedInts#getReaderIteratorNoHeader(DataInput, Format, int, int, int, int)\n   * @see PackedInts#getReaderNoHeader(DataInput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Writer getWriterNoHeader(\n      DataOutput out, Format format, int valueCount, int bitsPerValue, int mem) throws IOException {\n    return new PackedWriter(format, out, valueCount, bitsPerValue, mem);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriterNoHeader(DataOutput,Format,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriterNoHeader(DataOutput,Format,int,int,int).mjava","sourceNew":"  /**\n   * Expert: Create a packed integer array writer for the given output, format,\n   * value count, and number of bits per value.\n   * </p><p>\n   * The resulting stream will be long-aligned. This means that depending on\n   * the format which is used, up to 63 bits will be wasted. An easy way to\n   * make sure that no space is lost is to always use a <code>valueCount</code>\n   * that is a multiple of 64.\n   * </p><p>\n   * This method does not write any metadata to the stream, meaning that it is\n   * your responsibility to store it somewhere else in order to be able to\n   * recover data from the stream later on:\n   * <ul>\n   *   <li><code>format</code> (using {@link Format#getId()}),</li>\n   *   <li><code>valueCount</code>,</li>\n   *   <li><code>bitsPerValue</code>,</li>\n   *   <li>{@link #VERSION_CURRENT}.</li>\n   * </ul>\n   * </p><p>\n   * It is possible to start writing values without knowing how many of them you\n   * are actually going to write. To do this, just pass <code>-1</code> as\n   * <code>valueCount</code>. On the other hand, for any positive value of\n   * <code>valueCount</code>, the returned writer will make sure that you don't\n   * write more values than expected and pad the end of stream with zeros in\n   * case you have written less than <code>valueCount</code> when calling\n   * {@link Writer#finish()}.\n   * </p><p>\n   * The <code>mem</code> parameter lets you control how much memory can be used\n   * to buffer changes in memory before flushing to disk. High values of\n   * <code>mem</code> are likely to improve throughput. On the other hand, if\n   * speed is not that important to you, a value of <code>0</code> will use as\n   * little memory as possible and should already offer reasonable throughput.\n   *\n   * @param out          the data output\n   * @param format       the format to use to serialize the values\n   * @param valueCount   the number of values\n   * @param bitsPerValue the number of bits per value\n   * @param mem          how much memory (in bytes) can be used to speed up serialization\n   * @return             a Writer\n   * @throws IOException\n   * @see PackedInts#getReaderIteratorNoHeader(DataInput, Format, int, int, int, int)\n   * @see PackedInts#getReaderNoHeader(DataInput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Writer getWriterNoHeader(\n      DataOutput out, Format format, int valueCount, int bitsPerValue, int mem) {\n    return new PackedWriter(format, out, valueCount, bitsPerValue, mem);\n  }\n\n","sourceOld":"  /**\n   * Expert: Create a packed integer array writer for the given output, format,\n   * value count, and number of bits per value.\n   * </p><p>\n   * The resulting stream will be long-aligned. This means that depending on\n   * the format which is used, up to 63 bits will be wasted. An easy way to\n   * make sure that no space is lost is to always use a <code>valueCount</code>\n   * that is a multiple of 64.\n   * </p><p>\n   * This method does not write any metadata to the stream, meaning that it is\n   * your responsibility to store it somewhere else in order to be able to\n   * recover data from the stream later on:\n   * <ul>\n   *   <li><code>format</code> (using {@link Format#getId()}),</li>\n   *   <li><code>valueCount</code>,</li>\n   *   <li><code>bitsPerValue</code>,</li>\n   *   <li>{@link #VERSION_CURRENT}.</li>\n   * </ul>\n   * </p><p>\n   * It is possible to start writing values without knowing how many of them you\n   * are actually going to write. To do this, just pass <code>-1</code> as\n   * <code>valueCount</code>. On the other hand, for any positive value of\n   * <code>valueCount</code>, the returned writer will make sure that you don't\n   * write more values than expected and pad the end of stream with zeros in\n   * case you have written less than <code>valueCount</code> when calling\n   * {@link Writer#finish()}.\n   * </p><p>\n   * The <code>mem</code> parameter lets you control how much memory can be used\n   * to buffer changes in memory before flushing to disk. High values of\n   * <code>mem</code> are likely to improve throughput. On the other hand, if\n   * speed is not that important to you, a value of <code>0</code> will use as\n   * little memory as possible and should already offer reasonable throughput.\n   *\n   * @param out          the data output\n   * @param format       the format to use to serialize the values\n   * @param valueCount   the number of values\n   * @param bitsPerValue the number of bits per value\n   * @param mem          how much memory (in bytes) can be used to speed up serialization\n   * @return             a Writer\n   * @throws IOException\n   * @see PackedInts#getReaderIteratorNoHeader(DataInput, Format, int, int, int, int)\n   * @see PackedInts#getReaderNoHeader(DataInput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Writer getWriterNoHeader(\n      DataOutput out, Format format, int valueCount, int bitsPerValue, int mem) throws IOException {\n    return new PackedWriter(format, out, valueCount, bitsPerValue, mem);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriterNoHeader(DataOutput,Format,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriterNoHeader(DataOutput,Format,int,int,int).mjava","sourceNew":"  /**\n   * Expert: Create a packed integer array writer for the given output, format,\n   * value count, and number of bits per value.\n   * </p><p>\n   * The resulting stream will be long-aligned. This means that depending on\n   * the format which is used, up to 63 bits will be wasted. An easy way to\n   * make sure that no space is lost is to always use a <code>valueCount</code>\n   * that is a multiple of 64.\n   * </p><p>\n   * This method does not write any metadata to the stream, meaning that it is\n   * your responsibility to store it somewhere else in order to be able to\n   * recover data from the stream later on:\n   * <ul>\n   *   <li><code>format</code> (using {@link Format#getId()}),</li>\n   *   <li><code>valueCount</code>,</li>\n   *   <li><code>bitsPerValue</code>,</li>\n   *   <li>{@link #VERSION_CURRENT}.</li>\n   * </ul>\n   * </p><p>\n   * It is possible to start writing values without knowing how many of them you\n   * are actually going to write. To do this, just pass <code>-1</code> as\n   * <code>valueCount</code>. On the other hand, for any positive value of\n   * <code>valueCount</code>, the returned writer will make sure that you don't\n   * write more values than expected and pad the end of stream with zeros in\n   * case you have written less than <code>valueCount</code> when calling\n   * {@link Writer#finish()}.\n   * </p><p>\n   * The <code>mem</code> parameter lets you control how much memory can be used\n   * to buffer changes in memory before flushing to disk. High values of\n   * <code>mem</code> are likely to improve throughput. On the other hand, if\n   * speed is not that important to you, a value of <code>0</code> will use as\n   * little memory as possible and should already offer reasonable throughput.\n   *\n   * @param out          the data output\n   * @param format       the format to use to serialize the values\n   * @param valueCount   the number of values\n   * @param bitsPerValue the number of bits per value\n   * @param mem          how much memory (in bytes) can be used to speed up serialization\n   * @return             a Writer\n   * @throws IOException\n   * @see PackedInts#getReaderIteratorNoHeader(DataInput, Format, int, int, int, int)\n   * @see PackedInts#getReaderNoHeader(DataInput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Writer getWriterNoHeader(\n      DataOutput out, Format format, int valueCount, int bitsPerValue, int mem) {\n    return new PackedWriter(format, out, valueCount, bitsPerValue, mem);\n  }\n\n","sourceOld":"  /**\n   * Expert: Create a packed integer array writer for the given output, format,\n   * value count, and number of bits per value.\n   * </p><p>\n   * The resulting stream will be long-aligned. This means that depending on\n   * the format which is used, up to 63 bits will be wasted. An easy way to\n   * make sure that no space is lost is to always use a <code>valueCount</code>\n   * that is a multiple of 64.\n   * </p><p>\n   * This method does not write any metadata to the stream, meaning that it is\n   * your responsibility to store it somewhere else in order to be able to\n   * recover data from the stream later on:\n   * <ul>\n   *   <li><code>format</code> (using {@link Format#getId()}),</li>\n   *   <li><code>valueCount</code>,</li>\n   *   <li><code>bitsPerValue</code>,</li>\n   *   <li>{@link #VERSION_CURRENT}.</li>\n   * </ul>\n   * </p><p>\n   * It is possible to start writing values without knowing how many of them you\n   * are actually going to write. To do this, just pass <code>-1</code> as\n   * <code>valueCount</code>. On the other hand, for any positive value of\n   * <code>valueCount</code>, the returned writer will make sure that you don't\n   * write more values than expected and pad the end of stream with zeros in\n   * case you have written less than <code>valueCount</code> when calling\n   * {@link Writer#finish()}.\n   * </p><p>\n   * The <code>mem</code> parameter lets you control how much memory can be used\n   * to buffer changes in memory before flushing to disk. High values of\n   * <code>mem</code> are likely to improve throughput. On the other hand, if\n   * speed is not that important to you, a value of <code>0</code> will use as\n   * little memory as possible and should already offer reasonable throughput.\n   *\n   * @param out          the data output\n   * @param format       the format to use to serialize the values\n   * @param valueCount   the number of values\n   * @param bitsPerValue the number of bits per value\n   * @param mem          how much memory (in bytes) can be used to speed up serialization\n   * @return             a Writer\n   * @throws IOException\n   * @see PackedInts#getReaderIteratorNoHeader(DataInput, Format, int, int, int, int)\n   * @see PackedInts#getReaderNoHeader(DataInput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Writer getWriterNoHeader(\n      DataOutput out, Format format, int valueCount, int bitsPerValue, int mem) throws IOException {\n    return new PackedWriter(format, out, valueCount, bitsPerValue, mem);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb89814ad85fb3340f275e6b76a0bc319a6cc02b","date":1348100270,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriterNoHeader(DataOutput,Format,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriterNoHeader(DataOutput,Format,int,int,int).mjava","sourceNew":"  /**\n   * Expert: Create a packed integer array writer for the given output, format,\n   * value count, and number of bits per value.\n   * </p><p>\n   * The resulting stream will be long-aligned. This means that depending on\n   * the format which is used, up to 63 bits will be wasted. An easy way to\n   * make sure that no space is lost is to always use a <code>valueCount</code>\n   * that is a multiple of 64.\n   * </p><p>\n   * This method does not write any metadata to the stream, meaning that it is\n   * your responsibility to store it somewhere else in order to be able to\n   * recover data from the stream later on:\n   * <ul>\n   *   <li><code>format</code> (using {@link Format#getId()}),</li>\n   *   <li><code>valueCount</code>,</li>\n   *   <li><code>bitsPerValue</code>,</li>\n   *   <li>{@link #VERSION_CURRENT}.</li>\n   * </ul>\n   * </p><p>\n   * It is possible to start writing values without knowing how many of them you\n   * are actually going to write. To do this, just pass <code>-1</code> as\n   * <code>valueCount</code>. On the other hand, for any positive value of\n   * <code>valueCount</code>, the returned writer will make sure that you don't\n   * write more values than expected and pad the end of stream with zeros in\n   * case you have written less than <code>valueCount</code> when calling\n   * {@link Writer#finish()}.\n   * </p><p>\n   * The <code>mem</code> parameter lets you control how much memory can be used\n   * to buffer changes in memory before flushing to disk. High values of\n   * <code>mem</code> are likely to improve throughput. On the other hand, if\n   * speed is not that important to you, a value of <code>0</code> will use as\n   * little memory as possible and should already offer reasonable throughput.\n   *\n   * @param out          the data output\n   * @param format       the format to use to serialize the values\n   * @param valueCount   the number of values\n   * @param bitsPerValue the number of bits per value\n   * @param mem          how much memory (in bytes) can be used to speed up serialization\n   * @return             a Writer\n   * @see PackedInts#getReaderIteratorNoHeader(DataInput, Format, int, int, int, int)\n   * @see PackedInts#getReaderNoHeader(DataInput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Writer getWriterNoHeader(\n      DataOutput out, Format format, int valueCount, int bitsPerValue, int mem) {\n    return new PackedWriter(format, out, valueCount, bitsPerValue, mem);\n  }\n\n","sourceOld":"  /**\n   * Expert: Create a packed integer array writer for the given output, format,\n   * value count, and number of bits per value.\n   * </p><p>\n   * The resulting stream will be long-aligned. This means that depending on\n   * the format which is used, up to 63 bits will be wasted. An easy way to\n   * make sure that no space is lost is to always use a <code>valueCount</code>\n   * that is a multiple of 64.\n   * </p><p>\n   * This method does not write any metadata to the stream, meaning that it is\n   * your responsibility to store it somewhere else in order to be able to\n   * recover data from the stream later on:\n   * <ul>\n   *   <li><code>format</code> (using {@link Format#getId()}),</li>\n   *   <li><code>valueCount</code>,</li>\n   *   <li><code>bitsPerValue</code>,</li>\n   *   <li>{@link #VERSION_CURRENT}.</li>\n   * </ul>\n   * </p><p>\n   * It is possible to start writing values without knowing how many of them you\n   * are actually going to write. To do this, just pass <code>-1</code> as\n   * <code>valueCount</code>. On the other hand, for any positive value of\n   * <code>valueCount</code>, the returned writer will make sure that you don't\n   * write more values than expected and pad the end of stream with zeros in\n   * case you have written less than <code>valueCount</code> when calling\n   * {@link Writer#finish()}.\n   * </p><p>\n   * The <code>mem</code> parameter lets you control how much memory can be used\n   * to buffer changes in memory before flushing to disk. High values of\n   * <code>mem</code> are likely to improve throughput. On the other hand, if\n   * speed is not that important to you, a value of <code>0</code> will use as\n   * little memory as possible and should already offer reasonable throughput.\n   *\n   * @param out          the data output\n   * @param format       the format to use to serialize the values\n   * @param valueCount   the number of values\n   * @param bitsPerValue the number of bits per value\n   * @param mem          how much memory (in bytes) can be used to speed up serialization\n   * @return             a Writer\n   * @throws IOException\n   * @see PackedInts#getReaderIteratorNoHeader(DataInput, Format, int, int, int, int)\n   * @see PackedInts#getReaderNoHeader(DataInput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Writer getWriterNoHeader(\n      DataOutput out, Format format, int valueCount, int bitsPerValue, int mem) {\n    return new PackedWriter(format, out, valueCount, bitsPerValue, mem);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14600834a1fbc7c12faf344466e00cca8cc67de4","date":1423303834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriterNoHeader(DataOutput,Format,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriterNoHeader(DataOutput,Format,int,int,int).mjava","sourceNew":"  /**\n   * Expert: Create a packed integer array writer for the given output, format,\n   * value count, and number of bits per value.\n   * <p>\n   * The resulting stream will be long-aligned. This means that depending on\n   * the format which is used, up to 63 bits will be wasted. An easy way to\n   * make sure that no space is lost is to always use a <code>valueCount</code>\n   * that is a multiple of 64.\n   * <p>\n   * This method does not write any metadata to the stream, meaning that it is\n   * your responsibility to store it somewhere else in order to be able to\n   * recover data from the stream later on:\n   * <ul>\n   *   <li><code>format</code> (using {@link Format#getId()}),</li>\n   *   <li><code>valueCount</code>,</li>\n   *   <li><code>bitsPerValue</code>,</li>\n   *   <li>{@link #VERSION_CURRENT}.</li>\n   * </ul>\n   * <p>\n   * It is possible to start writing values without knowing how many of them you\n   * are actually going to write. To do this, just pass <code>-1</code> as\n   * <code>valueCount</code>. On the other hand, for any positive value of\n   * <code>valueCount</code>, the returned writer will make sure that you don't\n   * write more values than expected and pad the end of stream with zeros in\n   * case you have written less than <code>valueCount</code> when calling\n   * {@link Writer#finish()}.\n   * <p>\n   * The <code>mem</code> parameter lets you control how much memory can be used\n   * to buffer changes in memory before flushing to disk. High values of\n   * <code>mem</code> are likely to improve throughput. On the other hand, if\n   * speed is not that important to you, a value of <code>0</code> will use as\n   * little memory as possible and should already offer reasonable throughput.\n   *\n   * @param out          the data output\n   * @param format       the format to use to serialize the values\n   * @param valueCount   the number of values\n   * @param bitsPerValue the number of bits per value\n   * @param mem          how much memory (in bytes) can be used to speed up serialization\n   * @return             a Writer\n   * @see PackedInts#getReaderIteratorNoHeader(DataInput, Format, int, int, int, int)\n   * @see PackedInts#getReaderNoHeader(DataInput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Writer getWriterNoHeader(\n      DataOutput out, Format format, int valueCount, int bitsPerValue, int mem) {\n    return new PackedWriter(format, out, valueCount, bitsPerValue, mem);\n  }\n\n","sourceOld":"  /**\n   * Expert: Create a packed integer array writer for the given output, format,\n   * value count, and number of bits per value.\n   * </p><p>\n   * The resulting stream will be long-aligned. This means that depending on\n   * the format which is used, up to 63 bits will be wasted. An easy way to\n   * make sure that no space is lost is to always use a <code>valueCount</code>\n   * that is a multiple of 64.\n   * </p><p>\n   * This method does not write any metadata to the stream, meaning that it is\n   * your responsibility to store it somewhere else in order to be able to\n   * recover data from the stream later on:\n   * <ul>\n   *   <li><code>format</code> (using {@link Format#getId()}),</li>\n   *   <li><code>valueCount</code>,</li>\n   *   <li><code>bitsPerValue</code>,</li>\n   *   <li>{@link #VERSION_CURRENT}.</li>\n   * </ul>\n   * </p><p>\n   * It is possible to start writing values without knowing how many of them you\n   * are actually going to write. To do this, just pass <code>-1</code> as\n   * <code>valueCount</code>. On the other hand, for any positive value of\n   * <code>valueCount</code>, the returned writer will make sure that you don't\n   * write more values than expected and pad the end of stream with zeros in\n   * case you have written less than <code>valueCount</code> when calling\n   * {@link Writer#finish()}.\n   * </p><p>\n   * The <code>mem</code> parameter lets you control how much memory can be used\n   * to buffer changes in memory before flushing to disk. High values of\n   * <code>mem</code> are likely to improve throughput. On the other hand, if\n   * speed is not that important to you, a value of <code>0</code> will use as\n   * little memory as possible and should already offer reasonable throughput.\n   *\n   * @param out          the data output\n   * @param format       the format to use to serialize the values\n   * @param valueCount   the number of values\n   * @param bitsPerValue the number of bits per value\n   * @param mem          how much memory (in bytes) can be used to speed up serialization\n   * @return             a Writer\n   * @see PackedInts#getReaderIteratorNoHeader(DataInput, Format, int, int, int, int)\n   * @see PackedInts#getReaderNoHeader(DataInput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Writer getWriterNoHeader(\n      DataOutput out, Format format, int valueCount, int bitsPerValue, int mem) {\n    return new PackedWriter(format, out, valueCount, bitsPerValue, mem);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["55110eb60c5105294fc2ae7912d82b750865aa58","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"cb89814ad85fb3340f275e6b76a0bc319a6cc02b":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"55110eb60c5105294fc2ae7912d82b750865aa58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55110eb60c5105294fc2ae7912d82b750865aa58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"14600834a1fbc7c12faf344466e00cca8cc67de4":["cb89814ad85fb3340f275e6b76a0bc319a6cc02b"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["55110eb60c5105294fc2ae7912d82b750865aa58","035130b0c342f404c027af8c8870587c3741cb1e"],"035130b0c342f404c027af8c8870587c3741cb1e":["fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14600834a1fbc7c12faf344466e00cca8cc67de4"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"cb89814ad85fb3340f275e6b76a0bc319a6cc02b":["14600834a1fbc7c12faf344466e00cca8cc67de4"],"55110eb60c5105294fc2ae7912d82b750865aa58":["001b25b42373b22a52f399dbf072f1224632e8e6","fe33227f6805edab2036cbb80645cc4e2d1fa424","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["035130b0c342f404c027af8c8870587c3741cb1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55110eb60c5105294fc2ae7912d82b750865aa58","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"14600834a1fbc7c12faf344466e00cca8cc67de4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","cb89814ad85fb3340f275e6b76a0bc319a6cc02b"],"035130b0c342f404c027af8c8870587c3741cb1e":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}