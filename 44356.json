{"path":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,IndexDocument).mjava","commits":[{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,IndexDocument).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,Iterable[T]).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Iterable)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final IndexDocument doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues((Document) doc);\n    }\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<IndexDocument>() {\n\n        @Override\n        public Iterator<IndexDocument> iterator() {\n          return new Iterator<IndexDocument>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public IndexDocument next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Iterable)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final Iterable<T> doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues((Document) doc);\n    }\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Iterable<T>>() {\n\n        @Override\n        public Iterator<Iterable<T>> iterator() {\n          return new Iterator<Iterable<T>>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Iterable<T> next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"247f702b944ff0da1ba56a06fc13bd3eeefd2c01","date":1345138682,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,IndexDocument).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,IndexDocument).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, org.apache.lucene.index.IndexDocument)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final IndexDocument doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues((Document) doc);\n    }\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<IndexDocument>() {\n\n        @Override\n        public Iterator<IndexDocument> iterator() {\n          return new Iterator<IndexDocument>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public IndexDocument next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Iterable)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final IndexDocument doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues((Document) doc);\n    }\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<IndexDocument>() {\n\n        @Override\n        public Iterator<IndexDocument> iterator() {\n          return new Iterator<IndexDocument>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public IndexDocument next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,IndexDocument).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,Iterable[T]).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, org.apache.lucene.index.IndexDocument)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final IndexDocument doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues((Document) doc);\n    }\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<IndexDocument>() {\n\n        @Override\n        public Iterator<IndexDocument> iterator() {\n          return new Iterator<IndexDocument>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public IndexDocument next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Iterable)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final Iterable<T> doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues((Document) doc);\n    }\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Iterable<T>>() {\n\n        @Override\n        public Iterator<Iterable<T>> iterator() {\n          return new Iterator<Iterable<T>>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Iterable<T> next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"003dc2cb64b06ce8caea28156505feb3c5059ba2","date":1359688932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,IndexDocument).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,IndexDocument).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, org.apache.lucene.index.IndexDocument)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final IndexDocument doc) throws IOException {\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<IndexDocument>() {\n\n        @Override\n        public Iterator<IndexDocument> iterator() {\n          return new Iterator<IndexDocument>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public IndexDocument next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, org.apache.lucene.index.IndexDocument)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final IndexDocument doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues((Document) doc);\n    }\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<IndexDocument>() {\n\n        @Override\n        public Iterator<IndexDocument> iterator() {\n          return new Iterator<IndexDocument>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public IndexDocument next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,IndexDocument).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,IndexDocument).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, org.apache.lucene.index.IndexDocument)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final IndexDocument doc) throws IOException {\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<IndexDocument>() {\n\n        @Override\n        public Iterator<IndexDocument> iterator() {\n          return new Iterator<IndexDocument>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public IndexDocument next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, org.apache.lucene.index.IndexDocument)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final IndexDocument doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues((Document) doc);\n    }\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<IndexDocument>() {\n\n        @Override\n        public Iterator<IndexDocument> iterator() {\n          return new Iterator<IndexDocument>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public IndexDocument next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","bugFix":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09603b329b773f13c5bc71091a8e683671cbc9ba","date":1399576172,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,IndexDocument).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,IndexDocument).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, org.apache.lucene.index.IndexDocument)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final IndexDocument doc) throws IOException {\n    LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<IndexDocument>() {\n\n        @Override\n        public Iterator<IndexDocument> iterator() {\n          return new Iterator<IndexDocument>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public IndexDocument next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, org.apache.lucene.index.IndexDocument)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final IndexDocument doc) throws IOException {\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<IndexDocument>() {\n\n        @Override\n        public Iterator<IndexDocument> iterator() {\n          return new Iterator<IndexDocument>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public IndexDocument next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c331bf2c0db325b2153017708714a1573f2ce35","date":1447166158,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,IndexDocument).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,IndexDocument).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, org.apache.lucene.index.IndexDocument)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final IndexDocument doc) throws IOException {\n    LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<IndexDocument>() {\n\n        @Override\n        public Iterator<IndexDocument> iterator() {\n          return new Iterator<IndexDocument>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public IndexDocument next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeFlushOrCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, org.apache.lucene.index.IndexDocument)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final IndexDocument doc) throws IOException {\n    LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<IndexDocument>() {\n\n        @Override\n        public Iterator<IndexDocument> iterator() {\n          return new Iterator<IndexDocument>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public IndexDocument next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,Iterable[T]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,IndexDocument).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Iterable)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final Iterable<T> doc) throws IOException {\n    LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Iterable<T>>() {\n\n        @Override\n        public Iterator<Iterable<T>> iterator() {\n          return new Iterator<Iterable<T>>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Iterable<T> next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeFlushOrCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, org.apache.lucene.index.IndexDocument)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final IndexDocument doc) throws IOException {\n    LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<IndexDocument>() {\n\n        @Override\n        public Iterator<IndexDocument> iterator() {\n          return new Iterator<IndexDocument>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public IndexDocument next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeFlushOrCommit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","247f702b944ff0da1ba56a06fc13bd3eeefd2c01"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["1d028314cced5858683a1bb4741423d0f934257b","003dc2cb64b06ce8caea28156505feb3c5059ba2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"003dc2cb64b06ce8caea28156505feb3c5059ba2":["1d028314cced5858683a1bb4741423d0f934257b"],"247f702b944ff0da1ba56a06fc13bd3eeefd2c01":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"1c331bf2c0db325b2153017708714a1573f2ce35":["09603b329b773f13c5bc71091a8e683671cbc9ba"],"09603b329b773f13c5bc71091a8e683671cbc9ba":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1c331bf2c0db325b2153017708714a1573f2ce35"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["247f702b944ff0da1ba56a06fc13bd3eeefd2c01"],"1d028314cced5858683a1bb4741423d0f934257b":["d4d69c535930b5cce125cff868d40f6373dc27d4","003dc2cb64b06ce8caea28156505feb3c5059ba2"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["09603b329b773f13c5bc71091a8e683671cbc9ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"003dc2cb64b06ce8caea28156505feb3c5059ba2":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"247f702b944ff0da1ba56a06fc13bd3eeefd2c01":["1d028314cced5858683a1bb4741423d0f934257b"],"1c331bf2c0db325b2153017708714a1573f2ce35":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"09603b329b773f13c5bc71091a8e683671cbc9ba":["1c331bf2c0db325b2153017708714a1573f2ce35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}