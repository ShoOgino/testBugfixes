{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter.TermsWriter#finish().mjava","commits":[{"id":"c6d238816bcdf9bbe4ec886226d89bd93834eb7e","date":1413925889,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter.TermsWriter#finish().mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter.TermsWriter#finish().mjava","sourceNew":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // Add empty term to force closing of all final blocks:\n        pushTerm(new BytesRef());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // Add empty term to force closing of all final blocks:\n        pushTerm(new BytesRef());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter.TermsWriter#finish().mjava","pathOld":"/dev/null","sourceNew":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // Add empty term to force closing of all final blocks:\n        pushTerm(new BytesRef());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter.TermsWriter#finish().mjava","sourceNew":null,"sourceOld":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        // if (DEBUG) System.out.println(\"BTTW: finish prefixStarts=\" + Arrays.toString(prefixStarts));\n\n        // Add empty term to force closing of all final blocks:\n        pushTerm(new BytesRef());\n\n        // TODO: if pending.size() is already 1 with a non-zero prefix length\n        // we can save writing a \"degenerate\" root block, but we have to\n        // fix all the places that assume the root block's prefix is the empty string:\n        writeBlocks(0, pending.size());\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        /*\n        if (DEBUG) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(root.index, w, false, false);\n          System.out.println(\"SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n        assert firstPendingTerm != null;\n        BytesRef minTerm = new BytesRef(firstPendingTerm.termBytes);\n\n        assert lastPendingTerm != null;\n        BytesRef maxTerm = new BytesRef(lastPendingTerm.termBytes);\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c6d238816bcdf9bbe4ec886226d89bd93834eb7e"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6d238816bcdf9bbe4ec886226d89bd93834eb7e","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}