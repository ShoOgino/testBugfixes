{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#NRTManager(IndexWriter,ExecutorService,SearcherWarmer,boolean).mjava","commits":[{"id":"606baff722a317c76a92b111d183b54b6e6e5741","date":1317974711,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#NRTManager(IndexWriter,ExecutorService,SearcherWarmer,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: just like {@link\n   * #NRTManager(IndexWriter,ExecutorService,SearcherWarmer)},\n   * but you can also specify whether every searcher must\n   * apply deletes.  This is useful for cases where certain\n   * uses can tolerate seeing some deleted docs, since\n   * reopen time is faster if deletes need not be applied. */\n  public NRTManager(IndexWriter writer, ExecutorService es,\n      SearcherWarmer warmer, boolean alwaysApplyDeletes) throws IOException {\n    this.writer = writer;\n    if (alwaysApplyDeletes) {\n      withoutDeletes = withDeletes = new SearcherManagerRef(true, 0,  SearcherManager.open(writer, true, warmer, es));\n    } else {\n      withDeletes = new SearcherManagerRef(true, 0,  SearcherManager.open(writer, true, warmer, es));\n      withoutDeletes = new SearcherManagerRef(false, 0,  SearcherManager.open(writer, false, warmer, es));\n    }\n    indexingGen = new AtomicLong(1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43369d257d14f61a881aa609962ef95e8a334d3a","date":1318786064,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#NRTManager(IndexWriter,ExecutorService,SearcherWarmer,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#NRTManager(IndexWriter,ExecutorService,SearcherWarmer,boolean).mjava","sourceNew":"  /**\n   * Expert: just like {@link\n   * #NRTManager(IndexWriter,ExecutorService,SearcherWarmer)},\n   * but you can also specify whether every searcher must\n   * apply deletes.  This is useful for cases where certain\n   * uses can tolerate seeing some deleted docs, since\n   * reopen time is faster if deletes need not be applied. */\n  public NRTManager(IndexWriter writer, ExecutorService es,\n      SearcherWarmer warmer, boolean alwaysApplyDeletes) throws IOException {\n    this.writer = writer;\n    if (alwaysApplyDeletes) {\n      withoutDeletes = withDeletes = new SearcherManagerRef(true, 0,  new SearcherManager(writer, true, warmer, es));\n    } else {\n      withDeletes = new SearcherManagerRef(true, 0, new SearcherManager(writer, true, warmer, es));\n      withoutDeletes = new SearcherManagerRef(false, 0, new SearcherManager(writer, false, warmer, es));\n    }\n    indexingGen = new AtomicLong(1);\n  }\n\n","sourceOld":"  /**\n   * Expert: just like {@link\n   * #NRTManager(IndexWriter,ExecutorService,SearcherWarmer)},\n   * but you can also specify whether every searcher must\n   * apply deletes.  This is useful for cases where certain\n   * uses can tolerate seeing some deleted docs, since\n   * reopen time is faster if deletes need not be applied. */\n  public NRTManager(IndexWriter writer, ExecutorService es,\n      SearcherWarmer warmer, boolean alwaysApplyDeletes) throws IOException {\n    this.writer = writer;\n    if (alwaysApplyDeletes) {\n      withoutDeletes = withDeletes = new SearcherManagerRef(true, 0,  SearcherManager.open(writer, true, warmer, es));\n    } else {\n      withDeletes = new SearcherManagerRef(true, 0,  SearcherManager.open(writer, true, warmer, es));\n      withoutDeletes = new SearcherManagerRef(false, 0,  SearcherManager.open(writer, false, warmer, es));\n    }\n    indexingGen = new AtomicLong(1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NRTManager#NRTManager(IndexWriter,ExecutorService,SearcherWarmer,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#NRTManager(IndexWriter,ExecutorService,SearcherWarmer,boolean).mjava","sourceNew":"  /**\n   * Expert: just like {@link\n   * #NRTManager(IndexWriter,ExecutorService,SearcherWarmer)},\n   * but you can also specify whether every searcher must\n   * apply deletes.  This is useful for cases where certain\n   * uses can tolerate seeing some deleted docs, since\n   * reopen time is faster if deletes need not be applied. */\n  public NRTManager(IndexWriter writer, ExecutorService es,\n      SearcherWarmer warmer, boolean alwaysApplyDeletes) throws IOException {\n    this.writer = writer;\n    if (alwaysApplyDeletes) {\n      withoutDeletes = withDeletes = new SearcherManagerRef(true, 0,  new SearcherManager(writer, true, warmer, es));\n    } else {\n      withDeletes = new SearcherManagerRef(true, 0, new SearcherManager(writer, true, warmer, es));\n      withoutDeletes = new SearcherManagerRef(false, 0, new SearcherManager(writer, false, warmer, es));\n    }\n    indexingGen = new AtomicLong(1);\n  }\n\n","sourceOld":"  /**\n   * Expert: just like {@link\n   * #NRTManager(IndexWriter,ExecutorService,SearcherWarmer)},\n   * but you can also specify whether every searcher must\n   * apply deletes.  This is useful for cases where certain\n   * uses can tolerate seeing some deleted docs, since\n   * reopen time is faster if deletes need not be applied. */\n  public NRTManager(IndexWriter writer, ExecutorService es,\n      SearcherWarmer warmer, boolean alwaysApplyDeletes) throws IOException {\n    this.writer = writer;\n    if (alwaysApplyDeletes) {\n      withoutDeletes = withDeletes = new SearcherManagerRef(true, 0,  new SearcherManager(writer, true, warmer, es));\n    } else {\n      withDeletes = new SearcherManagerRef(true, 0, new SearcherManager(writer, true, warmer, es));\n      withoutDeletes = new SearcherManagerRef(false, 0, new SearcherManager(writer, false, warmer, es));\n    }\n    indexingGen = new AtomicLong(1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["43369d257d14f61a881aa609962ef95e8a334d3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"43369d257d14f61a881aa609962ef95e8a334d3a":["606baff722a317c76a92b111d183b54b6e6e5741"],"606baff722a317c76a92b111d183b54b6e6e5741":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df16fc2e9b615e0138edac46655ae628f5d098ad"]},"commit2Childs":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["606baff722a317c76a92b111d183b54b6e6e5741"],"43369d257d14f61a881aa609962ef95e8a334d3a":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"606baff722a317c76a92b111d183b54b6e6e5741":["43369d257d14f61a881aa609962ef95e8a334d3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}