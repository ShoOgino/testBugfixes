{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#setDistributedParams(ModifiableSolrParams).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#setDistributedParams(ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#setDistributedParams(ModifiableSolrParams).mjava","sourceNew":"  @Override\n  protected void setDistributedParams(ModifiableSolrParams params) {\n    \n    if (r.nextBoolean()) {\n      // don't set shards, let that be figured out from the cloud state\n    } else {\n      // use shard ids rather than physical locations\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < sliceCount; i++) {\n        if (i > 0) sb.append(',');\n        sb.append(\"shard\" + (i + 1));\n      }\n      params.set(\"shards\", sb.toString());\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void setDistributedParams(ModifiableSolrParams params) {\n    \n    if (r.nextBoolean()) {\n      // don't set shards, let that be figured out from the cloud state\n    } else {\n      // use shard ids rather than physical locations\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < sliceCount; i++) {\n        if (i > 0) sb.append(',');\n        sb.append(\"shard\" + (i + 1));\n      }\n      params.set(\"shards\", sb.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#setDistributedParams(ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#setDistributedParams(ModifiableSolrParams).mjava","sourceNew":"  @Override\n  protected void setDistributedParams(ModifiableSolrParams params) {\n    \n    if (r.nextBoolean()) {\n      // don't set shards, let that be figured out from the cloud state\n    } else {\n      // use shard ids rather than physical locations\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < sliceCount; i++) {\n        if (i > 0) sb.append(',');\n        sb.append(\"shard\" + (i + 1));\n      }\n      params.set(\"shards\", sb.toString());\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void setDistributedParams(ModifiableSolrParams params) {\n    \n    if (r.nextBoolean()) {\n      // don't set shards, let that be figured out from the cloud state\n    } else {\n      // use shard ids rather than physical locations\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < sliceCount; i++) {\n        if (i > 0) sb.append(',');\n        sb.append(\"shard\" + (i + 1));\n      }\n      params.set(\"shards\", sb.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#setDistributedParams(ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#setDistributedParams(ModifiableSolrParams).mjava","sourceNew":"  @Override\n  protected void setDistributedParams(ModifiableSolrParams params) {\n    \n    if (r.nextBoolean()) {\n      // don't set shards, let that be figured out from the cloud state\n    } else {\n      // use shard ids rather than physical locations\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < sliceCount; i++) {\n        if (i > 0) sb.append(',');\n        sb.append(\"shard\" + (i + 1));\n      }\n      params.set(\"shards\", sb.toString());\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void setDistributedParams(ModifiableSolrParams params) {\n    \n    if (r.nextBoolean()) {\n      // don't set shards, let that be figured out from the cloud state\n    } else {\n      // use shard ids rather than physical locations\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < sliceCount; i++) {\n        if (i > 0) sb.append(',');\n        sb.append(\"shard\" + (i + 1));\n      }\n      params.set(\"shards\", sb.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#setDistributedParams(ModifiableSolrParams).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#setDistributedParams(ModifiableSolrParams).mjava","sourceNew":"  @Override\n  protected void setDistributedParams(ModifiableSolrParams params) {\n\n    if (r.nextBoolean()) {\n      // don't set shards, let that be figured out from the cloud state\n    } else {\n      // use shard ids rather than physical locations\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < sliceCount; i++) {\n        if (i > 0) sb.append(',');\n        sb.append(\"shard\" + (i + 1));\n      }\n      params.set(\"shards\", sb.toString());\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void setDistributedParams(ModifiableSolrParams params) {\n    \n    if (r.nextBoolean()) {\n      // don't set shards, let that be figured out from the cloud state\n    } else {\n      // use shard ids rather than physical locations\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < sliceCount; i++) {\n        if (i > 0) sb.append(',');\n        sb.append(\"shard\" + (i + 1));\n      }\n      params.set(\"shards\", sb.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#setDistributedParams(ModifiableSolrParams).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#setDistributedParams(ModifiableSolrParams).mjava","sourceNew":"  @Override\n  protected void setDistributedParams(ModifiableSolrParams params) {\n\n    if (r.nextBoolean()) {\n      // don't set shards, let that be figured out from the cloud state\n    } else {\n      // use shard ids rather than physical locations\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < sliceCount; i++) {\n        if (i > 0) sb.append(',');\n        sb.append(\"shard\").append(i + 1);\n      }\n      params.set(\"shards\", sb.toString());\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void setDistributedParams(ModifiableSolrParams params) {\n\n    if (r.nextBoolean()) {\n      // don't set shards, let that be figured out from the cloud state\n    } else {\n      // use shard ids rather than physical locations\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < sliceCount; i++) {\n        if (i > 0) sb.append(',');\n        sb.append(\"shard\" + (i + 1));\n      }\n      params.set(\"shards\", sb.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ffe681f212e5073c69955b4ad22946794c84940":["abb23fcc2461782ab204e61213240feb77d355aa"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"abb23fcc2461782ab204e61213240feb77d355aa":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ffe681f212e5073c69955b4ad22946794c84940"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2ffe681f212e5073c69955b4ad22946794c84940":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"abb23fcc2461782ab204e61213240feb77d355aa":["2ffe681f212e5073c69955b4ad22946794c84940"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","abb23fcc2461782ab204e61213240feb77d355aa","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}