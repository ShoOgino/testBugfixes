{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","sourceNew":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest)facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a\" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    MutableFacetResultNode trimmedRootNode = MutableFacetResultNode.toImpl(facetResult.getFacetResultNode());\n    trimmedRootNode.trimSubResults(origFrq.getNumResults());\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","sourceOld":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest)facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a\" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    MutableFacetResultNode trimmedRootNode = MutableFacetResultNode.toImpl(facetResult.getFacetResultNode());\n    trimmedRootNode.trimSubResults(origFrq.getNumResults());\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","sourceNew":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest) facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a \" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    MutableFacetResultNode trimmedRootNode = MutableFacetResultNode.toImpl(facetResult.getFacetResultNode());\n    trimmedRootNode.trimSubResults(origFrq.getNumResults());\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","sourceOld":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest)facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a\" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    MutableFacetResultNode trimmedRootNode = MutableFacetResultNode.toImpl(facetResult.getFacetResultNode());\n    trimmedRootNode.trimSubResults(origFrq.getNumResults());\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","sourceNew":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest) facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a \" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    MutableFacetResultNode trimmedRootNode = MutableFacetResultNode.toImpl(facetResult.getFacetResultNode());\n    trimmedRootNode.trimSubResults(origFrq.getNumResults());\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","sourceOld":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest)facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a\" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    MutableFacetResultNode trimmedRootNode = MutableFacetResultNode.toImpl(facetResult.getFacetResultNode());\n    trimmedRootNode.trimSubResults(origFrq.getNumResults());\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","sourceNew":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest) facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a \" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    FacetResultNode trimmedRootNode = facetResult.getFacetResultNode();\n    trimSubResults(trimmedRootNode, origFrq.getNumResults());\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","sourceOld":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest) facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a \" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    MutableFacetResultNode trimmedRootNode = MutableFacetResultNode.toImpl(facetResult.getFacetResultNode());\n    trimmedRootNode.trimSubResults(origFrq.getNumResults());\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","sourceNew":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest) facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a \" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    FacetResultNode trimmedRootNode = facetResult.getFacetResultNode();\n    trimSubResults(trimmedRootNode, origFrq.getNumResults());\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","sourceOld":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest) facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a \" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    MutableFacetResultNode trimmedRootNode = MutableFacetResultNode.toImpl(facetResult.getFacetResultNode());\n    trimmedRootNode.trimSubResults(origFrq.getNumResults());\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","sourceNew":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest) facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a \" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    FacetResultNode trimmedRootNode = facetResult.getFacetResultNode();\n    trimSubResults(trimmedRootNode, origFrq.numResults);\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","sourceOld":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest) facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a \" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    FacetResultNode trimmedRootNode = facetResult.getFacetResultNode();\n    trimSubResults(trimmedRootNode, origFrq.getNumResults());\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/Sampler#trimResult(FacetResult).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimResult(FacetResult).mjava","sourceNew":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest) facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a \" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    FacetResultNode trimmedRootNode = facetResult.getFacetResultNode();\n    trimSubResults(trimmedRootNode, origFrq.numResults);\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","sourceOld":"  /**\n   * Trim the input facet result.<br>\n   * Note: It is only valid to call this method with result obtained for a\n   * facet request created through {@link #overSampledSearchParams(FacetSearchParams)}.\n   * \n   * @throws IllegalArgumentException\n   *             if called with results not obtained for requests created\n   *             through {@link #overSampledSearchParams(FacetSearchParams)}\n   */\n  public FacetResult trimResult(FacetResult facetResult) throws IllegalArgumentException {\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor <= 1) { // no factoring done?\n      return facetResult;\n    }\n    \n    OverSampledFacetRequest sampledFreq = null;\n    \n    try {\n      sampledFreq = (OverSampledFacetRequest) facetResult.getFacetRequest();\n    } catch (ClassCastException e) {\n      throw new IllegalArgumentException(\n          \"It is only valid to call this method with result obtained for a \" +\n          \"facet request created through sampler.overSamlpingSearchParams()\",\n          e);\n    }\n    \n    FacetRequest origFrq = sampledFreq.orig;\n\n    FacetResultNode trimmedRootNode = facetResult.getFacetResultNode();\n    trimSubResults(trimmedRootNode, origFrq.numResults);\n    \n    return new FacetResult(origFrq, trimmedRootNode, facetResult.getNumValidDescendants());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["b89678825b68eccaf09e6ab71675fc0b0af1e099","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["8917bfede3b4ca30f4305c1e391e9218959cd723","811cdb4a80352766eb0c762e48972707a924e5cd"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["811cdb4a80352766eb0c762e48972707a924e5cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"],"811cdb4a80352766eb0c762e48972707a924e5cd":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["42f51b3ab4258ff4623227b0db011b8bb83db5c7","8917bfede3b4ca30f4305c1e391e9218959cd723"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["8917bfede3b4ca30f4305c1e391e9218959cd723","811cdb4a80352766eb0c762e48972707a924e5cd"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["07155cdd910937cdf6877e48884d5782845c8b8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["607428da722dcb3e86bbd11c63de8986e6275c36"],"811cdb4a80352766eb0c762e48972707a924e5cd":["07155cdd910937cdf6877e48884d5782845c8b8b","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}