{"path":"lucene/facet/src/java/org/apache/lucene/util/encoding/NOnesIntEncoder#doEncode(IntsRef,BytesRef,int).mjava","commits":[{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/encoding/NOnesIntEncoder#doEncode(IntsRef,BytesRef,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void doEncode(IntsRef values, BytesRef buf, int upto) {\n    // make sure the internal buffer is large enough\n    if (values.length > internalBuffer.ints.length) {\n      internalBuffer.grow(values.length);\n    }\n    \n    int onesCounter = 0;\n    for (int i = values.offset; i < upto; i++) {\n      int value = values.ints[i];\n      if (value == 1) {\n        // every N 1's should be encoded as '2'\n        if (++onesCounter == n) {\n          internalBuffer.ints[internalBuffer.length++] = 2;\n          onesCounter = 0;\n        }\n      } else {\n        // there might have been 1's that we need to encode\n        while (onesCounter > 0) {\n          --onesCounter;\n          internalBuffer.ints[internalBuffer.length++] = 1;\n        }\n        \n        // encode value as value+1\n        internalBuffer.ints[internalBuffer.length++] = value + 1;\n      }\n    }\n    // there might have been 1's that we need to encode\n    while (onesCounter > 0) {\n      --onesCounter;\n      internalBuffer.ints[internalBuffer.length++] = 1;\n    }\n    super.doEncode(internalBuffer, buf, internalBuffer.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/encoding/NOnesIntEncoder#doEncode(IntsRef,BytesRef,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void doEncode(IntsRef values, BytesRef buf, int upto) {\n    // make sure the internal buffer is large enough\n    if (values.length > internalBuffer.ints.length) {\n      internalBuffer.grow(values.length);\n    }\n    \n    int onesCounter = 0;\n    for (int i = values.offset; i < upto; i++) {\n      int value = values.ints[i];\n      if (value == 1) {\n        // every N 1's should be encoded as '2'\n        if (++onesCounter == n) {\n          internalBuffer.ints[internalBuffer.length++] = 2;\n          onesCounter = 0;\n        }\n      } else {\n        // there might have been 1's that we need to encode\n        while (onesCounter > 0) {\n          --onesCounter;\n          internalBuffer.ints[internalBuffer.length++] = 1;\n        }\n        \n        // encode value as value+1\n        internalBuffer.ints[internalBuffer.length++] = value + 1;\n      }\n    }\n    // there might have been 1's that we need to encode\n    while (onesCounter > 0) {\n      --onesCounter;\n      internalBuffer.ints[internalBuffer.length++] = 1;\n    }\n    super.doEncode(internalBuffer, buf, internalBuffer.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad883775f8b169218a8da5ffeb7ae26459443936","date":1358342713,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/encoding/NOnesIntEncoder#encode(IntsRef,BytesRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/encoding/NOnesIntEncoder#doEncode(IntsRef,BytesRef,int).mjava","sourceNew":"  @Override\n  public void encode(IntsRef values, BytesRef buf) {\n    internalBuffer.length = 0;\n    // make sure the internal buffer is large enough\n    if (values.length > internalBuffer.ints.length) {\n      internalBuffer.grow(values.length);\n    }\n    \n    int onesCounter = 0;\n    int upto = values.offset + values.length;\n    for (int i = values.offset; i < upto; i++) {\n      int value = values.ints[i];\n      if (value == 1) {\n        // every N 1's should be encoded as '2'\n        if (++onesCounter == n) {\n          internalBuffer.ints[internalBuffer.length++] = 2;\n          onesCounter = 0;\n        }\n      } else {\n        // there might have been 1's that we need to encode\n        while (onesCounter > 0) {\n          --onesCounter;\n          internalBuffer.ints[internalBuffer.length++] = 1;\n        }\n        \n        // encode value as value+1\n        internalBuffer.ints[internalBuffer.length++] = value + 1;\n      }\n    }\n    // there might have been 1's that we need to encode\n    while (onesCounter > 0) {\n      --onesCounter;\n      internalBuffer.ints[internalBuffer.length++] = 1;\n    }\n    super.encode(internalBuffer, buf);\n  }\n\n","sourceOld":"  @Override\n  protected void doEncode(IntsRef values, BytesRef buf, int upto) {\n    // make sure the internal buffer is large enough\n    if (values.length > internalBuffer.ints.length) {\n      internalBuffer.grow(values.length);\n    }\n    \n    int onesCounter = 0;\n    for (int i = values.offset; i < upto; i++) {\n      int value = values.ints[i];\n      if (value == 1) {\n        // every N 1's should be encoded as '2'\n        if (++onesCounter == n) {\n          internalBuffer.ints[internalBuffer.length++] = 2;\n          onesCounter = 0;\n        }\n      } else {\n        // there might have been 1's that we need to encode\n        while (onesCounter > 0) {\n          --onesCounter;\n          internalBuffer.ints[internalBuffer.length++] = 1;\n        }\n        \n        // encode value as value+1\n        internalBuffer.ints[internalBuffer.length++] = value + 1;\n      }\n    }\n    // there might have been 1's that we need to encode\n    while (onesCounter > 0) {\n      --onesCounter;\n      internalBuffer.ints[internalBuffer.length++] = 1;\n    }\n    super.doEncode(internalBuffer, buf, internalBuffer.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/encoding/NOnesIntEncoder#encode(IntsRef,BytesRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/encoding/NOnesIntEncoder#doEncode(IntsRef,BytesRef,int).mjava","sourceNew":"  @Override\n  public void encode(IntsRef values, BytesRef buf) {\n    internalBuffer.length = 0;\n    // make sure the internal buffer is large enough\n    if (values.length > internalBuffer.ints.length) {\n      internalBuffer.grow(values.length);\n    }\n    \n    int onesCounter = 0;\n    int upto = values.offset + values.length;\n    for (int i = values.offset; i < upto; i++) {\n      int value = values.ints[i];\n      if (value == 1) {\n        // every N 1's should be encoded as '2'\n        if (++onesCounter == n) {\n          internalBuffer.ints[internalBuffer.length++] = 2;\n          onesCounter = 0;\n        }\n      } else {\n        // there might have been 1's that we need to encode\n        while (onesCounter > 0) {\n          --onesCounter;\n          internalBuffer.ints[internalBuffer.length++] = 1;\n        }\n        \n        // encode value as value+1\n        internalBuffer.ints[internalBuffer.length++] = value + 1;\n      }\n    }\n    // there might have been 1's that we need to encode\n    while (onesCounter > 0) {\n      --onesCounter;\n      internalBuffer.ints[internalBuffer.length++] = 1;\n    }\n    super.encode(internalBuffer, buf);\n  }\n\n","sourceOld":"  @Override\n  protected void doEncode(IntsRef values, BytesRef buf, int upto) {\n    // make sure the internal buffer is large enough\n    if (values.length > internalBuffer.ints.length) {\n      internalBuffer.grow(values.length);\n    }\n    \n    int onesCounter = 0;\n    for (int i = values.offset; i < upto; i++) {\n      int value = values.ints[i];\n      if (value == 1) {\n        // every N 1's should be encoded as '2'\n        if (++onesCounter == n) {\n          internalBuffer.ints[internalBuffer.length++] = 2;\n          onesCounter = 0;\n        }\n      } else {\n        // there might have been 1's that we need to encode\n        while (onesCounter > 0) {\n          --onesCounter;\n          internalBuffer.ints[internalBuffer.length++] = 1;\n        }\n        \n        // encode value as value+1\n        internalBuffer.ints[internalBuffer.length++] = value + 1;\n      }\n    }\n    // there might have been 1's that we need to encode\n    while (onesCounter > 0) {\n      --onesCounter;\n      internalBuffer.ints[internalBuffer.length++] = 1;\n    }\n    super.doEncode(internalBuffer, buf, internalBuffer.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4015cd39dff8d4dec562d909f9766debac53aa6":["4e6354dd7c71fe122926fc53d7d29f715b1283db","ad883775f8b169218a8da5ffeb7ae26459443936"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad883775f8b169218a8da5ffeb7ae26459443936"],"ad883775f8b169218a8da5ffeb7ae26459443936":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"]},"commit2Childs":{"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["4e6354dd7c71fe122926fc53d7d29f715b1283db","ad883775f8b169218a8da5ffeb7ae26459443936"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"ad883775f8b169218a8da5ffeb7ae26459443936":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}