{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,InputStream,Version,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,InputStream,Version,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,InputStream,Version,boolean).mjava","sourceNew":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files\n   *\n   * @param affix InputStream for reading the hunspell affix file\n   * @param dictionary InputStream for reading the hunspell dictionary file\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, InputStream dictionary, Version version, boolean ignoreCase) throws IOException, ParseException {\n    this(affix, Arrays.asList(dictionary), version, ignoreCase);\n  }\n\n","sourceOld":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files\n   *\n   * @param affix InputStream for reading the hunspell affix file\n   * @param dictionary InputStream for reading the hunspell dictionary file\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, InputStream dictionary, Version version, boolean ignoreCase) throws IOException, ParseException {\n    this(affix, Arrays.asList(dictionary), version, ignoreCase);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"558d0b2765fb22e5c20304b1e85c6cc7b9bba359","date":1342503992,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,InputStream,Version,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,InputStream,Version,boolean).mjava","sourceNew":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionary InputStream for reading the hunspell dictionary file (won't be closed).\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, InputStream dictionary, Version version, boolean ignoreCase) throws IOException, ParseException {\n    this(affix, Arrays.asList(dictionary), version, ignoreCase);\n  }\n\n","sourceOld":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files\n   *\n   * @param affix InputStream for reading the hunspell affix file\n   * @param dictionary InputStream for reading the hunspell dictionary file\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, InputStream dictionary, Version version, boolean ignoreCase) throws IOException, ParseException {\n    this(affix, Arrays.asList(dictionary), version, ignoreCase);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,InputStream,Version,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,InputStream,Version,boolean).mjava","sourceNew":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionary InputStream for reading the hunspell dictionary file (won't be closed).\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, InputStream dictionary, Version version, boolean ignoreCase) throws IOException, ParseException {\n    this(affix, Arrays.asList(dictionary), version, ignoreCase);\n  }\n\n","sourceOld":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files\n   *\n   * @param affix InputStream for reading the hunspell affix file\n   * @param dictionary InputStream for reading the hunspell dictionary file\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, InputStream dictionary, Version version, boolean ignoreCase) throws IOException, ParseException {\n    this(affix, Arrays.asList(dictionary), version, ignoreCase);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,InputStream,Version,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,InputStream,Version,boolean).mjava","sourceNew":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionary InputStream for reading the hunspell dictionary file (won't be closed).\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, InputStream dictionary, Version version, boolean ignoreCase) throws IOException, ParseException {\n    this(affix, Arrays.asList(dictionary), version, ignoreCase);\n  }\n\n","sourceOld":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files\n   *\n   * @param affix InputStream for reading the hunspell affix file\n   * @param dictionary InputStream for reading the hunspell dictionary file\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, InputStream dictionary, Version version, boolean ignoreCase) throws IOException, ParseException {\n    this(affix, Arrays.asList(dictionary), version, ignoreCase);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,InputStream,Version,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionary InputStream for reading the hunspell dictionary file (won't be closed).\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, InputStream dictionary, Version version, boolean ignoreCase) throws IOException, ParseException {\n    this(affix, Arrays.asList(dictionary), version, ignoreCase);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,InputStream,Version,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionary InputStream for reading the hunspell dictionary file (won't be closed).\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, InputStream dictionary, Version version, boolean ignoreCase) throws IOException, ParseException {\n    this(affix, Arrays.asList(dictionary), version, ignoreCase);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["b89678825b68eccaf09e6ab71675fc0b0af1e099","558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["558d0b2765fb22e5c20304b1e85c6cc7b9bba359","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"558d0b2765fb22e5c20304b1e85c6cc7b9bba359":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba791bce8103c79e38f957e9c5a53a75871bd918"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ba791bce8103c79e38f957e9c5a53a75871bd918":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"558d0b2765fb22e5c20304b1e85c6cc7b9bba359":["aba371508186796cc6151d8223a5b4e16d02e26e","ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}