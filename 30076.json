{"path":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","commits":[{"id":"4a54d9ede1b7f2f026639186eb07f3f314d87d9a","date":1412176848,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","pathOld":"/dev/null","sourceNew":"  /**Take in a JSON command set and execute them . It tries to capture as many errors\n   * as possible instead of failing at the frst error it encounters\n   * @param rdr The input as a Reader\n   * @return Lis of errors . If the List is empty then the operation is successful.\n   */\n  public List performOperations(Reader rdr)  {\n    List<Operation> ops = null;\n    try {\n      ops = SchemaManager.parse(rdr);\n    } catch (Exception e) {\n      String msg= \"Error parsing schema operations \";\n      log.warn(msg  ,e );\n      return Collections.singletonList(singletonMap(ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = captureErrors(ops);\n    if(!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (!(schema instanceof ManagedIndexSchema)) {\n      return singletonList( singletonMap(ERR_MSGS,\"schema is not editable\"));\n    }\n\n    synchronized (schema.getSchemaUpdateLock()) {\n      return doOperations(ops);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","pathOld":"/dev/null","sourceNew":"  /**Take in a JSON command set and execute them . It tries to capture as many errors\n   * as possible instead of failing at the frst error it encounters\n   * @param rdr The input as a Reader\n   * @return Lis of errors . If the List is empty then the operation is successful.\n   */\n  public List performOperations(Reader rdr)  {\n    List<Operation> ops = null;\n    try {\n      ops = SchemaManager.parse(rdr);\n    } catch (Exception e) {\n      String msg= \"Error parsing schema operations \";\n      log.warn(msg  ,e );\n      return Collections.singletonList(singletonMap(ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = captureErrors(ops);\n    if(!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (!(schema instanceof ManagedIndexSchema)) {\n      return singletonList( singletonMap(ERR_MSGS,\"schema is not editable\"));\n    }\n\n    synchronized (schema.getSchemaUpdateLock()) {\n      return doOperations(ops);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb9af919a17be70cfc512901fc70f1beaf840ca1","date":1413208885,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","sourceNew":"  /**Take in a JSON command set and execute them . It tries to capture as many errors\n   * as possible instead of failing at the frst error it encounters\n   * @param rdr The input as a Reader\n   * @return Lis of errors . If the List is empty then the operation is successful.\n   */\n  public List performOperations(Reader rdr)  {\n    List<CommandOperation> ops = null;\n    try {\n      ops = CommandOperation.parse(rdr);\n    } catch (Exception e) {\n      String msg= \"Error parsing schema operations \";\n      log.warn(msg  ,e );\n      return Collections.singletonList(singletonMap(CommandOperation.ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if(!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (!(schema instanceof ManagedIndexSchema)) {\n      return singletonList( singletonMap(CommandOperation.ERR_MSGS,\"schema is not editable\"));\n    }\n\n    synchronized (schema.getSchemaUpdateLock()) {\n      return doOperations(ops);\n    }\n\n  }\n\n","sourceOld":"  /**Take in a JSON command set and execute them . It tries to capture as many errors\n   * as possible instead of failing at the frst error it encounters\n   * @param rdr The input as a Reader\n   * @return Lis of errors . If the List is empty then the operation is successful.\n   */\n  public List performOperations(Reader rdr)  {\n    List<Operation> ops = null;\n    try {\n      ops = SchemaManager.parse(rdr);\n    } catch (Exception e) {\n      String msg= \"Error parsing schema operations \";\n      log.warn(msg  ,e );\n      return Collections.singletonList(singletonMap(ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = captureErrors(ops);\n    if(!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (!(schema instanceof ManagedIndexSchema)) {\n      return singletonList( singletonMap(ERR_MSGS,\"schema is not editable\"));\n    }\n\n    synchronized (schema.getSchemaUpdateLock()) {\n      return doOperations(ops);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","sourceNew":"  /**Take in a JSON command set and execute them . It tries to capture as many errors\n   * as possible instead of failing at the frst error it encounters\n   * @param rdr The input as a Reader\n   * @return Lis of errors . If the List is empty then the operation is successful.\n   */\n  public List performOperations(Reader rdr)  {\n    List<CommandOperation> ops = null;\n    try {\n      ops = CommandOperation.parse(rdr);\n    } catch (Exception e) {\n      String msg= \"Error parsing schema operations \";\n      log.warn(msg  ,e );\n      return Collections.singletonList(singletonMap(CommandOperation.ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if(!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (!(schema instanceof ManagedIndexSchema)) {\n      return singletonList( singletonMap(CommandOperation.ERR_MSGS,\"schema is not editable\"));\n    }\n\n    synchronized (schema.getSchemaUpdateLock()) {\n      return doOperations(ops);\n    }\n\n  }\n\n","sourceOld":"  /**Take in a JSON command set and execute them . It tries to capture as many errors\n   * as possible instead of failing at the frst error it encounters\n   * @param rdr The input as a Reader\n   * @return Lis of errors . If the List is empty then the operation is successful.\n   */\n  public List performOperations(Reader rdr)  {\n    List<Operation> ops = null;\n    try {\n      ops = SchemaManager.parse(rdr);\n    } catch (Exception e) {\n      String msg= \"Error parsing schema operations \";\n      log.warn(msg  ,e );\n      return Collections.singletonList(singletonMap(ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = captureErrors(ops);\n    if(!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (!(schema instanceof ManagedIndexSchema)) {\n      return singletonList( singletonMap(ERR_MSGS,\"schema is not editable\"));\n    }\n\n    synchronized (schema.getSchemaUpdateLock()) {\n      return doOperations(ops);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d72e80cee24be385c713864a9f1f90be3744482","date":1417420925,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","sourceNew":"  /**Take in a JSON command set and execute them . It tries to capture as many errors\n   * as possible instead of failing at the frst error it encounters\n   * @param rdr The input as a Reader\n   * @return Lis of errors . If the List is empty then the operation is successful.\n   */\n  public List performOperations(Reader rdr) throws Exception {\n    List<CommandOperation> ops = null;\n    try {\n      ops = CommandOperation.parse(rdr);\n    } catch (Exception e) {\n      String msg= \"Error parsing schema operations \";\n      log.warn(msg  ,e );\n      return Collections.singletonList(singletonMap(CommandOperation.ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if(!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (!(schema instanceof ManagedIndexSchema)) {\n      return singletonList( singletonMap(CommandOperation.ERR_MSGS,\"schema is not editable\"));\n    }\n\n    synchronized (schema.getSchemaUpdateLock()) {\n      return doOperations(ops);\n    }\n\n  }\n\n","sourceOld":"  /**Take in a JSON command set and execute them . It tries to capture as many errors\n   * as possible instead of failing at the frst error it encounters\n   * @param rdr The input as a Reader\n   * @return Lis of errors . If the List is empty then the operation is successful.\n   */\n  public List performOperations(Reader rdr)  {\n    List<CommandOperation> ops = null;\n    try {\n      ops = CommandOperation.parse(rdr);\n    } catch (Exception e) {\n      String msg= \"Error parsing schema operations \";\n      log.warn(msg  ,e );\n      return Collections.singletonList(singletonMap(CommandOperation.ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if(!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (!(schema instanceof ManagedIndexSchema)) {\n      return singletonList( singletonMap(CommandOperation.ERR_MSGS,\"schema is not editable\"));\n    }\n\n    synchronized (schema.getSchemaUpdateLock()) {\n      return doOperations(ops);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeeea2295d6355a29e259130a5c48ace73022d7c","date":1426569216,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","sourceNew":"  /**\n   * Take in a JSON command set and execute them. It tries to capture as many errors\n   * as possible instead of failing at the first error it encounters\n   * @param reader The input as a Reader\n   * @return List of errors. If the List is empty then the operation was successful.\n   */\n  public List performOperations(Reader reader) throws Exception {\n    List<CommandOperation> ops;\n    try {\n      ops = CommandOperation.parse(reader);\n    } catch (Exception e) {\n      String msg = \"Error parsing schema operations \";\n      log.warn(msg, e);\n      return Collections.singletonList(singletonMap(CommandOperation.ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (!(schema instanceof ManagedIndexSchema)) {\n      return singletonList(singletonMap(CommandOperation.ERR_MSGS, \"schema is not editable\"));\n    }\n    synchronized (schema.getSchemaUpdateLock()) {\n      return doOperations(ops);\n    }\n  }\n\n","sourceOld":"  /**Take in a JSON command set and execute them . It tries to capture as many errors\n   * as possible instead of failing at the frst error it encounters\n   * @param rdr The input as a Reader\n   * @return Lis of errors . If the List is empty then the operation is successful.\n   */\n  public List performOperations(Reader rdr) throws Exception {\n    List<CommandOperation> ops = null;\n    try {\n      ops = CommandOperation.parse(rdr);\n    } catch (Exception e) {\n      String msg= \"Error parsing schema operations \";\n      log.warn(msg  ,e );\n      return Collections.singletonList(singletonMap(CommandOperation.ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if(!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (!(schema instanceof ManagedIndexSchema)) {\n      return singletonList( singletonMap(CommandOperation.ERR_MSGS,\"schema is not editable\"));\n    }\n\n    synchronized (schema.getSchemaUpdateLock()) {\n      return doOperations(ops);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","sourceNew":"  /**\n   * Take in a JSON command set and execute them. It tries to capture as many errors\n   * as possible instead of failing at the first error it encounters\n   * @param reader The input as a Reader\n   * @return List of errors. If the List is empty then the operation was successful.\n   */\n  public List performOperations(Reader reader) throws Exception {\n    List<CommandOperation> ops;\n    try {\n      ops = CommandOperation.parse(reader);\n    } catch (Exception e) {\n      String msg = \"Error parsing schema operations \";\n      log.warn(msg, e);\n      return Collections.singletonList(singletonMap(CommandOperation.ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (!(schema instanceof ManagedIndexSchema)) {\n      return singletonList(singletonMap(CommandOperation.ERR_MSGS, \"schema is not editable\"));\n    }\n    synchronized (schema.getSchemaUpdateLock()) {\n      return doOperations(ops);\n    }\n  }\n\n","sourceOld":"  /**Take in a JSON command set and execute them . It tries to capture as many errors\n   * as possible instead of failing at the frst error it encounters\n   * @param rdr The input as a Reader\n   * @return Lis of errors . If the List is empty then the operation is successful.\n   */\n  public List performOperations(Reader rdr) throws Exception {\n    List<CommandOperation> ops = null;\n    try {\n      ops = CommandOperation.parse(rdr);\n    } catch (Exception e) {\n      String msg= \"Error parsing schema operations \";\n      log.warn(msg  ,e );\n      return Collections.singletonList(singletonMap(CommandOperation.ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if(!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (!(schema instanceof ManagedIndexSchema)) {\n      return singletonList( singletonMap(CommandOperation.ERR_MSGS,\"schema is not editable\"));\n    }\n\n    synchronized (schema.getSchemaUpdateLock()) {\n      return doOperations(ops);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"484264228e1de4c93d0f9ec7ad2181223b11889a","date":1460910418,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","sourceNew":"  /**\n   * Take in a JSON command set and execute them. It tries to capture as many errors\n   * as possible instead of failing at the first error it encounters\n   * @param reader The input as a Reader\n   * @return List of errors. If the List is empty then the operation was successful.\n   */\n  public List performOperations(Reader reader) throws Exception {\n    List<CommandOperation> ops;\n    try {\n      ops = CommandOperation.parse(reader);\n    } catch (Exception e) {\n      String msg = \"Error parsing schema operations \";\n      log.warn(msg, e);\n      return Collections.singletonList(singletonMap(CommandOperation.ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (schema instanceof ManagedIndexSchema && schema.isMutable()) {\n      synchronized (schema.getSchemaUpdateLock()) {\n        return doOperations(ops);\n      }\n    } else {\n      return singletonList(singletonMap(CommandOperation.ERR_MSGS, \"schema is not editable\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Take in a JSON command set and execute them. It tries to capture as many errors\n   * as possible instead of failing at the first error it encounters\n   * @param reader The input as a Reader\n   * @return List of errors. If the List is empty then the operation was successful.\n   */\n  public List performOperations(Reader reader) throws Exception {\n    List<CommandOperation> ops;\n    try {\n      ops = CommandOperation.parse(reader);\n    } catch (Exception e) {\n      String msg = \"Error parsing schema operations \";\n      log.warn(msg, e);\n      return Collections.singletonList(singletonMap(CommandOperation.ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (!(schema instanceof ManagedIndexSchema)) {\n      return singletonList(singletonMap(CommandOperation.ERR_MSGS, \"schema is not editable\"));\n    }\n    synchronized (schema.getSchemaUpdateLock()) {\n      return doOperations(ops);\n    }\n  }\n\n","bugFix":null,"bugIntro":["6f210f93b33ab0a937f545d5f1cc76211cfac904"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8cb57c50beb99a1245256e866350af8e5ea1f36","date":1460921840,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","sourceNew":"  /**\n   * Take in a JSON command set and execute them. It tries to capture as many errors\n   * as possible instead of failing at the first error it encounters\n   * @param reader The input as a Reader\n   * @return List of errors. If the List is empty then the operation was successful.\n   */\n  public List performOperations(Reader reader) throws Exception {\n    List<CommandOperation> ops;\n    try {\n      ops = CommandOperation.parse(reader);\n    } catch (Exception e) {\n      String msg = \"Error parsing schema operations \";\n      log.warn(msg, e);\n      return Collections.singletonList(singletonMap(CommandOperation.ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (schema instanceof ManagedIndexSchema && schema.isMutable()) {\n      synchronized (schema.getSchemaUpdateLock()) {\n        return doOperations(ops);\n      }\n    } else {\n      return singletonList(singletonMap(CommandOperation.ERR_MSGS, \"schema is not editable\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Take in a JSON command set and execute them. It tries to capture as many errors\n   * as possible instead of failing at the first error it encounters\n   * @param reader The input as a Reader\n   * @return List of errors. If the List is empty then the operation was successful.\n   */\n  public List performOperations(Reader reader) throws Exception {\n    List<CommandOperation> ops;\n    try {\n      ops = CommandOperation.parse(reader);\n    } catch (Exception e) {\n      String msg = \"Error parsing schema operations \";\n      log.warn(msg, e);\n      return Collections.singletonList(singletonMap(CommandOperation.ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (!(schema instanceof ManagedIndexSchema)) {\n      return singletonList(singletonMap(CommandOperation.ERR_MSGS, \"schema is not editable\"));\n    }\n    synchronized (schema.getSchemaUpdateLock()) {\n      return doOperations(ops);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f210f93b33ab0a937f545d5f1cc76211cfac904","date":1482253533,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","sourceNew":"  /**\n   * Take in a JSON command set and execute them. It tries to capture as many errors\n   * as possible instead of failing at the first error it encounters\n   * @param reader The input as a Reader\n   * @return List of errors. If the List is empty then the operation was successful.\n   */\n  public List performOperations(Reader reader) throws Exception {\n    List<CommandOperation> ops;\n    try {\n      ops = CommandOperation.parse(reader);\n    } catch (Exception e) {\n      String msg = \"Error parsing schema operations \";\n      log.warn(msg, e);\n      return Collections.singletonList(singletonMap(CommandOperation.ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (schema instanceof ManagedIndexSchema && schema.isMutable()) {\n      return doOperations(ops);\n    } else {\n      return singletonList(singletonMap(CommandOperation.ERR_MSGS, \"schema is not editable\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Take in a JSON command set and execute them. It tries to capture as many errors\n   * as possible instead of failing at the first error it encounters\n   * @param reader The input as a Reader\n   * @return List of errors. If the List is empty then the operation was successful.\n   */\n  public List performOperations(Reader reader) throws Exception {\n    List<CommandOperation> ops;\n    try {\n      ops = CommandOperation.parse(reader);\n    } catch (Exception e) {\n      String msg = \"Error parsing schema operations \";\n      log.warn(msg, e);\n      return Collections.singletonList(singletonMap(CommandOperation.ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (schema instanceof ManagedIndexSchema && schema.isMutable()) {\n      synchronized (schema.getSchemaUpdateLock()) {\n        return doOperations(ops);\n      }\n    } else {\n      return singletonList(singletonMap(CommandOperation.ERR_MSGS, \"schema is not editable\"));\n    }\n  }\n\n","bugFix":["484264228e1de4c93d0f9ec7ad2181223b11889a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","sourceNew":"  /**\n   * Take in a JSON command set and execute them. It tries to capture as many errors\n   * as possible instead of failing at the first error it encounters\n   * @param reader The input as a Reader\n   * @return List of errors. If the List is empty then the operation was successful.\n   */\n  public List performOperations(Reader reader) throws Exception {\n    List<CommandOperation> ops;\n    try {\n      ops = CommandOperation.parse(reader);\n    } catch (Exception e) {\n      String msg = \"Error parsing schema operations \";\n      log.warn(msg, e);\n      return Collections.singletonList(singletonMap(CommandOperation.ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (schema instanceof ManagedIndexSchema && schema.isMutable()) {\n      return doOperations(ops);\n    } else {\n      return singletonList(singletonMap(CommandOperation.ERR_MSGS, \"schema is not editable\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Take in a JSON command set and execute them. It tries to capture as many errors\n   * as possible instead of failing at the first error it encounters\n   * @param reader The input as a Reader\n   * @return List of errors. If the List is empty then the operation was successful.\n   */\n  public List performOperations(Reader reader) throws Exception {\n    List<CommandOperation> ops;\n    try {\n      ops = CommandOperation.parse(reader);\n    } catch (Exception e) {\n      String msg = \"Error parsing schema operations \";\n      log.warn(msg, e);\n      return Collections.singletonList(singletonMap(CommandOperation.ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (schema instanceof ManagedIndexSchema && schema.isMutable()) {\n      synchronized (schema.getSchemaUpdateLock()) {\n        return doOperations(ops);\n      }\n    } else {\n      return singletonList(singletonMap(CommandOperation.ERR_MSGS, \"schema is not editable\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","sourceNew":"  /**\n   * Take in a JSON command set and execute them. It tries to capture as many errors\n   * as possible instead of failing at the first error it encounters\n   * @return List of errors. If the List is empty then the operation was successful.\n   */\n  public List performOperations() throws Exception {\n    List<CommandOperation> ops = req.getCommands(false);\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (schema instanceof ManagedIndexSchema && schema.isMutable()) {\n      return doOperations(ops);\n    } else {\n      return singletonList(singletonMap(CommandOperation.ERR_MSGS, \"schema is not editable\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Take in a JSON command set and execute them. It tries to capture as many errors\n   * as possible instead of failing at the first error it encounters\n   * @param reader The input as a Reader\n   * @return List of errors. If the List is empty then the operation was successful.\n   */\n  public List performOperations(Reader reader) throws Exception {\n    List<CommandOperation> ops;\n    try {\n      ops = CommandOperation.parse(reader);\n    } catch (Exception e) {\n      String msg = \"Error parsing schema operations \";\n      log.warn(msg, e);\n      return Collections.singletonList(singletonMap(CommandOperation.ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (schema instanceof ManagedIndexSchema && schema.isMutable()) {\n      return doOperations(ops);\n    } else {\n      return singletonList(singletonMap(CommandOperation.ERR_MSGS, \"schema is not editable\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#performOperations(Reader).mjava","sourceNew":"  /**\n   * Take in a JSON command set and execute them. It tries to capture as many errors\n   * as possible instead of failing at the first error it encounters\n   * @return List of errors. If the List is empty then the operation was successful.\n   */\n  public List performOperations() throws Exception {\n    List<CommandOperation> ops = req.getCommands(false);\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (schema instanceof ManagedIndexSchema && schema.isMutable()) {\n      return doOperations(ops);\n    } else {\n      return singletonList(singletonMap(CommandOperation.ERR_MSGS, \"schema is not editable\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Take in a JSON command set and execute them. It tries to capture as many errors\n   * as possible instead of failing at the first error it encounters\n   * @param reader The input as a Reader\n   * @return List of errors. If the List is empty then the operation was successful.\n   */\n  public List performOperations(Reader reader) throws Exception {\n    List<CommandOperation> ops;\n    try {\n      ops = CommandOperation.parse(reader);\n    } catch (Exception e) {\n      String msg = \"Error parsing schema operations \";\n      log.warn(msg, e);\n      return Collections.singletonList(singletonMap(CommandOperation.ERR_MSGS, msg + \":\" + e.getMessage()));\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) return errs;\n\n    IndexSchema schema = req.getCore().getLatestSchema();\n    if (schema instanceof ManagedIndexSchema && schema.isMutable()) {\n      return doOperations(ops);\n    } else {\n      return singletonList(singletonMap(CommandOperation.ERR_MSGS, \"schema is not editable\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cb9af919a17be70cfc512901fc70f1beaf840ca1"],"7d72e80cee24be385c713864a9f1f90be3744482":["cb9af919a17be70cfc512901fc70f1beaf840ca1"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["7d72e80cee24be385c713864a9f1f90be3744482"],"cb9af919a17be70cfc512901fc70f1beaf840ca1":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["6f210f93b33ab0a937f545d5f1cc76211cfac904"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["f03e4bed5023ec3ef93a771b8888cae991cf448d","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["eeeea2295d6355a29e259130a5c48ace73022d7c","484264228e1de4c93d0f9ec7ad2181223b11889a"],"484264228e1de4c93d0f9ec7ad2181223b11889a":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["f8cb57c50beb99a1245256e866350af8e5ea1f36","6f210f93b33ab0a937f545d5f1cc76211cfac904"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["7d72e80cee24be385c713864a9f1f90be3744482","eeeea2295d6355a29e259130a5c48ace73022d7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f210f93b33ab0a937f545d5f1cc76211cfac904":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"7d72e80cee24be385c713864a9f1f90be3744482":["eeeea2295d6355a29e259130a5c48ace73022d7c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["f8cb57c50beb99a1245256e866350af8e5ea1f36","484264228e1de4c93d0f9ec7ad2181223b11889a","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cb9af919a17be70cfc512901fc70f1beaf840ca1":["55980207f1977bd1463465de1659b821347e2fa8","7d72e80cee24be385c713864a9f1f90be3744482"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["55980207f1977bd1463465de1659b821347e2fa8"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["cb9af919a17be70cfc512901fc70f1beaf840ca1","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["f03e4bed5023ec3ef93a771b8888cae991cf448d","6f210f93b33ab0a937f545d5f1cc76211cfac904"],"484264228e1de4c93d0f9ec7ad2181223b11889a":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"6f210f93b33ab0a937f545d5f1cc76211cfac904":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}