{"path":"lucene/core/src/java/org/apache/lucene/geo/Polygon#contains(double,double).mjava","commits":[{"id":"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","date":1459623422,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon#contains(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/Polygon#contains(double,double).mjava","sourceNew":"  /** Returns true if the point is contained within this polygon */\n  public boolean contains(double latitude, double longitude) {\n    // check bounding box\n    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {\n      return false;\n    }\n    /*\n     * simple even-odd point in polygon computation\n     *    1.  Determine if point is contained in the longitudinal range\n     *    2.  Determine whether point crosses the edge by computing the latitudinal delta\n     *        between the end-point of a parallel vector (originating at the point) and the\n     *        y-component of the edge sink\n     *\n     * NOTE: Requires polygon point (x,y) order either clockwise or counter-clockwise\n     */\n    boolean inPoly = false;\n    /*\n     * Note: This is using a euclidean coordinate system which could result in\n     * upwards of 110KM error at the equator.\n     * TODO convert coordinates to cylindrical projection (e.g. mercator)\n     */\n    for (int i = 1; i < polyLats.length; i++) {\n      if (polyLons[i] <= longitude && polyLons[i-1] >= longitude || polyLons[i-1] <= longitude && polyLons[i] >= longitude) {\n        if (polyLats[i] + (longitude - polyLons[i]) / (polyLons[i-1] - polyLons[i]) * (polyLats[i-1] - polyLats[i]) <= latitude) {\n          inPoly = !inPoly;\n        }\n      }\n    }\n    if (inPoly) {\n      for (Polygon hole : holes) {\n        if (hole.contains(latitude, longitude)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Returns true if the point is contained within this polygon */\n  public boolean contains(double latitude, double longitude) {\n    // check bounding box\n    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {\n      return false;\n    }\n    /* \n     * simple even-odd point in polygon computation\n     *    1.  Determine if point is contained in the longitudinal range\n     *    2.  Determine whether point crosses the edge by computing the latitudinal delta\n     *        between the end-point of a parallel vector (originating at the point) and the\n     *        y-component of the edge sink\n     *\n     * NOTE: Requires polygon point (x,y) order either clockwise or counter-clockwise\n     */\n    boolean inPoly = false;\n    /*\n     * Note: This is using a euclidean coordinate system which could result in\n     * upwards of 110KM error at the equator.\n     * TODO convert coordinates to cylindrical projection (e.g. mercator)\n     */\n    for (int i = 1; i < polyLats.length; i++) {\n      if (polyLons[i] <= longitude && polyLons[i-1] >= longitude || polyLons[i-1] <= longitude && polyLons[i] >= longitude) {\n        if (polyLats[i] + (longitude - polyLons[i]) / (polyLons[i-1] - polyLons[i]) * (polyLats[i-1] - polyLats[i]) <= latitude) {\n          inPoly = !inPoly;\n        }\n      }\n    }\n    if (inPoly) {\n      for (Polygon hole : holes) {\n        if (hole.contains(latitude, longitude)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a35a7d0e36dd6f5b4f8053ac085490326734d5e4","date":1460739189,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon#contains(double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon#contains(double,double).mjava","sourceNew":"  /** \n   * Returns true if the point is contained within this polygon.\n   * <p>\n   * See <a href=\"https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\">\n   * https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html</a> for more information.\n   */\n  // ported to java from https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\n  // original code under the BSD license (https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html#License%20to%20Use)\n  //\n  // Copyright (c) 1970-2003, Wm. Randolph Franklin\n  //\n  // Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated \n  // documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation \n  // the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and \n  // to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n  //\n  // 1. Redistributions of source code must retain the above copyright \n  //    notice, this list of conditions and the following disclaimers.\n  // 2. Redistributions in binary form must reproduce the above copyright \n  //    notice in the documentation and/or other materials provided with \n  //    the distribution.\n  // 3. The name of W. Randolph Franklin may not be used to endorse or \n  //    promote products derived from this Software without specific \n  //    prior written permission. \n  //\n  // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED \n  // TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL \n  // THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \n  // CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS \n  // IN THE SOFTWARE. \n  public boolean contains(double latitude, double longitude) {\n    // check bounding box\n    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {\n      return false;\n    }\n    \n    boolean inPoly = false;\n    boolean previous = polyLats[0] > latitude;\n    for (int i = 1; i < polyLats.length; i++) {\n      boolean current = polyLats[i] > latitude;\n      if (current != previous) {\n        if (longitude < (polyLons[i-1] - polyLons[i]) * (latitude - polyLats[i]) / (polyLats[i-1] - polyLats[i]) + polyLons[i]) {\n          inPoly = !inPoly;\n        }\n        previous = current;\n      }\n    }\n    if (inPoly) {\n      for (Polygon hole : holes) {\n        if (hole.contains(latitude, longitude)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Returns true if the point is contained within this polygon */\n  public boolean contains(double latitude, double longitude) {\n    // check bounding box\n    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {\n      return false;\n    }\n    /*\n     * simple even-odd point in polygon computation\n     *    1.  Determine if point is contained in the longitudinal range\n     *    2.  Determine whether point crosses the edge by computing the latitudinal delta\n     *        between the end-point of a parallel vector (originating at the point) and the\n     *        y-component of the edge sink\n     *\n     * NOTE: Requires polygon point (x,y) order either clockwise or counter-clockwise\n     */\n    boolean inPoly = false;\n    /*\n     * Note: This is using a euclidean coordinate system which could result in\n     * upwards of 110KM error at the equator.\n     * TODO convert coordinates to cylindrical projection (e.g. mercator)\n     */\n    for (int i = 1; i < polyLats.length; i++) {\n      if (polyLons[i] <= longitude && polyLons[i-1] >= longitude || polyLons[i-1] <= longitude && polyLons[i] >= longitude) {\n        if (polyLats[i] + (longitude - polyLons[i]) / (polyLons[i-1] - polyLons[i]) * (polyLats[i-1] - polyLats[i]) <= latitude) {\n          inPoly = !inPoly;\n        }\n      }\n    }\n    if (inPoly) {\n      for (Polygon hole : holes) {\n        if (hole.contains(latitude, longitude)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8","546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73457c9372b4f2f962ca916788a5fe9e1f644a9f","date":1460794059,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon#contains(double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon#contains(double,double).mjava","sourceNew":"  /** \n   * Returns true if the point is contained within this polygon.\n   * <p>\n   * See <a href=\"https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\">\n   * https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html</a> for more information.\n   */\n  // ported to java from https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\n  // original code under the BSD license (https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html#License%20to%20Use)\n  //\n  // Copyright (c) 1970-2003, Wm. Randolph Franklin\n  //\n  // Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated \n  // documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation \n  // the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and \n  // to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n  //\n  // 1. Redistributions of source code must retain the above copyright \n  //    notice, this list of conditions and the following disclaimers.\n  // 2. Redistributions in binary form must reproduce the above copyright \n  //    notice in the documentation and/or other materials provided with \n  //    the distribution.\n  // 3. The name of W. Randolph Franklin may not be used to endorse or \n  //    promote products derived from this Software without specific \n  //    prior written permission. \n  //\n  // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED \n  // TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL \n  // THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \n  // CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS \n  // IN THE SOFTWARE. \n  public boolean contains(double latitude, double longitude) {\n    // check bounding box\n    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {\n      return false;\n    }\n    \n    boolean inPoly = false;\n    boolean previous = polyLats[0] > latitude;\n    for (int i = 1; i < polyLats.length; i++) {\n      boolean current = polyLats[i] > latitude;\n      if (current != previous) {\n        if (longitude < (polyLons[i-1] - polyLons[i]) * (latitude - polyLats[i]) / (polyLats[i-1] - polyLats[i]) + polyLons[i]) {\n          inPoly = !inPoly;\n        }\n        previous = current;\n      }\n    }\n    if (inPoly) {\n      for (Polygon hole : holes) {\n        if (hole.contains(latitude, longitude)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Returns true if the point is contained within this polygon */\n  public boolean contains(double latitude, double longitude) {\n    // check bounding box\n    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {\n      return false;\n    }\n    /*\n     * simple even-odd point in polygon computation\n     *    1.  Determine if point is contained in the longitudinal range\n     *    2.  Determine whether point crosses the edge by computing the latitudinal delta\n     *        between the end-point of a parallel vector (originating at the point) and the\n     *        y-component of the edge sink\n     *\n     * NOTE: Requires polygon point (x,y) order either clockwise or counter-clockwise\n     */\n    boolean inPoly = false;\n    /*\n     * Note: This is using a euclidean coordinate system which could result in\n     * upwards of 110KM error at the equator.\n     * TODO convert coordinates to cylindrical projection (e.g. mercator)\n     */\n    for (int i = 1; i < polyLats.length; i++) {\n      if (polyLons[i] <= longitude && polyLons[i-1] >= longitude || polyLons[i-1] <= longitude && polyLons[i] >= longitude) {\n        if (polyLats[i] + (longitude - polyLons[i]) / (polyLons[i-1] - polyLons[i]) * (polyLats[i-1] - polyLats[i]) <= latitude) {\n          inPoly = !inPoly;\n        }\n      }\n    }\n    if (inPoly) {\n      for (Polygon hole : holes) {\n        if (hole.contains(latitude, longitude)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon#contains(double,double).mjava","sourceNew":null,"sourceOld":"  /** \n   * Returns true if the point is contained within this polygon.\n   * <p>\n   * See <a href=\"https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\">\n   * https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html</a> for more information.\n   */\n  // ported to java from https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\n  // original code under the BSD license (https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html#License%20to%20Use)\n  //\n  // Copyright (c) 1970-2003, Wm. Randolph Franklin\n  //\n  // Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated \n  // documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation \n  // the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and \n  // to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n  //\n  // 1. Redistributions of source code must retain the above copyright \n  //    notice, this list of conditions and the following disclaimers.\n  // 2. Redistributions in binary form must reproduce the above copyright \n  //    notice in the documentation and/or other materials provided with \n  //    the distribution.\n  // 3. The name of W. Randolph Franklin may not be used to endorse or \n  //    promote products derived from this Software without specific \n  //    prior written permission. \n  //\n  // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED \n  // TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL \n  // THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \n  // CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS \n  // IN THE SOFTWARE. \n  public boolean contains(double latitude, double longitude) {\n    // check bounding box\n    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {\n      return false;\n    }\n    \n    boolean inPoly = false;\n    boolean previous = polyLats[0] > latitude;\n    for (int i = 1; i < polyLats.length; i++) {\n      boolean current = polyLats[i] > latitude;\n      if (current != previous) {\n        if (longitude < (polyLons[i-1] - polyLons[i]) * (latitude - polyLats[i]) / (polyLats[i-1] - polyLats[i]) + polyLons[i]) {\n          inPoly = !inPoly;\n        }\n        previous = current;\n      }\n    }\n    if (inPoly) {\n      for (Polygon hole : holes) {\n        if (hole.contains(latitude, longitude)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon#contains(double,double).mjava","sourceNew":null,"sourceOld":"  /** \n   * Returns true if the point is contained within this polygon.\n   * <p>\n   * See <a href=\"https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\">\n   * https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html</a> for more information.\n   */\n  // ported to java from https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\n  // original code under the BSD license (https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html#License%20to%20Use)\n  //\n  // Copyright (c) 1970-2003, Wm. Randolph Franklin\n  //\n  // Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated \n  // documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation \n  // the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and \n  // to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n  //\n  // 1. Redistributions of source code must retain the above copyright \n  //    notice, this list of conditions and the following disclaimers.\n  // 2. Redistributions in binary form must reproduce the above copyright \n  //    notice in the documentation and/or other materials provided with \n  //    the distribution.\n  // 3. The name of W. Randolph Franklin may not be used to endorse or \n  //    promote products derived from this Software without specific \n  //    prior written permission. \n  //\n  // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED \n  // TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL \n  // THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \n  // CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS \n  // IN THE SOFTWARE. \n  public boolean contains(double latitude, double longitude) {\n    // check bounding box\n    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {\n      return false;\n    }\n    \n    boolean inPoly = false;\n    boolean previous = polyLats[0] > latitude;\n    for (int i = 1; i < polyLats.length; i++) {\n      boolean current = polyLats[i] > latitude;\n      if (current != previous) {\n        if (longitude < (polyLons[i-1] - polyLons[i]) * (latitude - polyLats[i]) / (polyLats[i-1] - polyLats[i]) + polyLons[i]) {\n          inPoly = !inPoly;\n        }\n        previous = current;\n      }\n    }\n    if (inPoly) {\n      for (Polygon hole : holes) {\n        if (hole.contains(latitude, longitude)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["73457c9372b4f2f962ca916788a5fe9e1f644a9f","925fce43f3bac029d912b9b7de03c789e258a333"],"a35a7d0e36dd6f5b4f8053ac085490326734d5e4":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"73457c9372b4f2f962ca916788a5fe9e1f644a9f":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","a35a7d0e36dd6f5b4f8053ac085490326734d5e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"925fce43f3bac029d912b9b7de03c789e258a333":["73457c9372b4f2f962ca916788a5fe9e1f644a9f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a35a7d0e36dd6f5b4f8053ac085490326734d5e4":["73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["a35a7d0e36dd6f5b4f8053ac085490326734d5e4","73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"73457c9372b4f2f962ca916788a5fe9e1f644a9f":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","925fce43f3bac029d912b9b7de03c789e258a333"],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}