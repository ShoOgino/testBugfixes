{"path":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#calculateLikelihood(String,BytesRef).mjava","commits":[{"id":"b046c3e04315940a761d69bb348c761c11d995d4","date":1347605712,"type":1,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#calculateLikelihood(String,BytesRef).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#calculateLikelihood(String,String).mjava","sourceNew":"  private double calculateLikelihood(String document, BytesRef c) throws IOException {\n    // for each word\n    double result = 1d;\n    for (String word : tokenizeDoc(document)) {\n      // search with text:word AND class:c\n      int hits = getWordFreqForClass(word, c);\n\n      // num : count the no of times the word appears in documents of class c (+1)\n      double num = hits + 1; // +1 is added because of add 1 smoothing\n\n      // den : for the whole dictionary, count the no of times a word appears in documents of class c (+|V|)\n      double den = getTextTermFreqForClass(c) + docsWithClassSize;\n\n      // P(w|c) = num/den\n      double wordProbability = num / den;\n      result *= wordProbability;\n    }\n\n    // P(d|c) = P(w1|c)*...*P(wn|c)\n    return result;\n  }\n\n","sourceOld":"  private Double calculateLikelihood(String document, String c) throws IOException {\n    // for each word\n    Double result = 1d;\n    for (String word : tokenizeDoc(document)) {\n      // search with text:word AND class:c\n      int hits = getWordFreqForClass(word, c);\n\n      // num : count the no of times the word appears in documents of class c (+1)\n      double num = hits + 1; // +1 is added because of add 1 smoothing\n\n      // den : for the whole dictionary, count the no of times a word appears in documents of class c (+|V|)\n      double den = getTextTermFreqForClass(c) + docsWithClassSize;\n\n      // P(w|c) = num/den\n      double wordProbability = num / den;\n      result *= wordProbability;\n    }\n\n    // P(d|c) = P(w1|c)*...*P(wn|c)\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bebf668d6a706a90e62718d210f354e26b2b4d23","date":1354174257,"type":5,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#calculateLikelihood(String[],BytesRef).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#calculateLikelihood(String,BytesRef).mjava","sourceNew":"  private double calculateLikelihood(String[] tokenizedDoc, BytesRef c) throws IOException {\n    // for each word\n    double result = 1d;\n    for (String word : tokenizedDoc) {\n      // search with text:word AND class:c\n      int hits = getWordFreqForClass(word, c);\n\n      // num : count the no of times the word appears in documents of class c (+1)\n      double num = hits + 1; // +1 is added because of add 1 smoothing\n\n      // den : for the whole dictionary, count the no of times a word appears in documents of class c (+|V|)\n      double den = getTextTermFreqForClass(c) + docsWithClassSize;\n\n      // P(w|c) = num/den\n      double wordProbability = num / den;\n      result *= wordProbability;\n    }\n\n    // P(d|c) = P(w1|c)*...*P(wn|c)\n    return result;\n  }\n\n","sourceOld":"  private double calculateLikelihood(String document, BytesRef c) throws IOException {\n    // for each word\n    double result = 1d;\n    for (String word : tokenizeDoc(document)) {\n      // search with text:word AND class:c\n      int hits = getWordFreqForClass(word, c);\n\n      // num : count the no of times the word appears in documents of class c (+1)\n      double num = hits + 1; // +1 is added because of add 1 smoothing\n\n      // den : for the whole dictionary, count the no of times a word appears in documents of class c (+|V|)\n      double den = getTextTermFreqForClass(c) + docsWithClassSize;\n\n      // P(w|c) = num/den\n      double wordProbability = num / den;\n      result *= wordProbability;\n    }\n\n    // P(d|c) = P(w1|c)*...*P(wn|c)\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#calculateLikelihood(String,BytesRef).mjava","sourceNew":null,"sourceOld":"  private double calculateLikelihood(String document, BytesRef c) throws IOException {\n    // for each word\n    double result = 1d;\n    for (String word : tokenizeDoc(document)) {\n      // search with text:word AND class:c\n      int hits = getWordFreqForClass(word, c);\n\n      // num : count the no of times the word appears in documents of class c (+1)\n      double num = hits + 1; // +1 is added because of add 1 smoothing\n\n      // den : for the whole dictionary, count the no of times a word appears in documents of class c (+|V|)\n      double den = getTextTermFreqForClass(c) + docsWithClassSize;\n\n      // P(w|c) = num/den\n      double wordProbability = num / den;\n      result *= wordProbability;\n    }\n\n    // P(d|c) = P(w1|c)*...*P(wn|c)\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bebf668d6a706a90e62718d210f354e26b2b4d23":["b046c3e04315940a761d69bb348c761c11d995d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b046c3e04315940a761d69bb348c761c11d995d4","bebf668d6a706a90e62718d210f354e26b2b4d23"],"b046c3e04315940a761d69bb348c761c11d995d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bebf668d6a706a90e62718d210f354e26b2b4d23"]},"commit2Childs":{"bebf668d6a706a90e62718d210f354e26b2b4d23":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b046c3e04315940a761d69bb348c761c11d995d4"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"b046c3e04315940a761d69bb348c761c11d995d4":["bebf668d6a706a90e62718d210f354e26b2b4d23","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}