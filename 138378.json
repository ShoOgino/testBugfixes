{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#replicaAlreadyExistsOnNode(ClusterState,Collection[Replica],DownReplica,String).mjava","commits":[{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#replicaAlreadyExistsOnNode(ClusterState,Collection[Replica],DownReplica,String).mjava","pathOld":"/dev/null","sourceNew":"  private static boolean replicaAlreadyExistsOnNode(ClusterState clusterState, Collection<Replica> replicas, DownReplica badReplica, String baseUrl) {\n    if (replicas != null) {\n      log.debug(\"check if replica already exists on node using replicas {}\", getNames(replicas));\n      for (Replica replica : replicas) {\n        if (!replica.getName().equals(badReplica.replica.getName()) && replica.getStr(ZkStateReader.BASE_URL_PROP).equals(baseUrl)\n            && clusterState.liveNodesContain(replica.getNodeName())\n            && (replica.getStr(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE)\n                || replica.getStr(ZkStateReader.STATE_PROP).equals(\n                    ZkStateReader.DOWN) || replica.getStr(\n                ZkStateReader.STATE_PROP).equals(ZkStateReader.RECOVERING))) {\n          log.debug(\"replica already exists on node, bad replica={}, existing replica={}, node name={}\", badReplica.replica.getName(), replica.getName(), replica.getNodeName());\n          return true;\n        }\n      }\n    }\n    log.debug(\"replica does not yet exist on node: {}\", baseUrl);\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#replicaAlreadyExistsOnNode(ClusterState,Collection[Replica],DownReplica,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#replicaAlreadyExistsOnNode(ClusterState,Collection[Replica],DownReplica,String).mjava","sourceNew":"  private static boolean replicaAlreadyExistsOnNode(ClusterState clusterState, Collection<Replica> replicas, DownReplica badReplica, String baseUrl) {\n    if (replicas != null) {\n      log.debug(\"check if replica already exists on node using replicas {}\", getNames(replicas));\n      for (Replica replica : replicas) {\n        final Replica.State state = replica.getState();\n        if (!replica.getName().equals(badReplica.replica.getName()) && replica.getStr(ZkStateReader.BASE_URL_PROP).equals(baseUrl)\n            && clusterState.liveNodesContain(replica.getNodeName())\n            && (state == Replica.State.ACTIVE || state == Replica.State.DOWN || state == Replica.State.RECOVERING)) {\n          log.debug(\"replica already exists on node, bad replica={}, existing replica={}, node name={}\", badReplica.replica.getName(), replica.getName(), replica.getNodeName());\n          return true;\n        }\n      }\n    }\n    log.debug(\"replica does not yet exist on node: {}\", baseUrl);\n    return false;\n  }\n\n","sourceOld":"  private static boolean replicaAlreadyExistsOnNode(ClusterState clusterState, Collection<Replica> replicas, DownReplica badReplica, String baseUrl) {\n    if (replicas != null) {\n      log.debug(\"check if replica already exists on node using replicas {}\", getNames(replicas));\n      for (Replica replica : replicas) {\n        if (!replica.getName().equals(badReplica.replica.getName()) && replica.getStr(ZkStateReader.BASE_URL_PROP).equals(baseUrl)\n            && clusterState.liveNodesContain(replica.getNodeName())\n            && (replica.getStr(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE)\n                || replica.getStr(ZkStateReader.STATE_PROP).equals(\n                    ZkStateReader.DOWN) || replica.getStr(\n                ZkStateReader.STATE_PROP).equals(ZkStateReader.RECOVERING))) {\n          log.debug(\"replica already exists on node, bad replica={}, existing replica={}, node name={}\", badReplica.replica.getName(), replica.getName(), replica.getNodeName());\n          return true;\n        }\n      }\n    }\n    log.debug(\"replica does not yet exist on node: {}\", baseUrl);\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3747a28ce6c262c1e27f7c7b30a827bc1a17260b","date":1428529761,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#replicaAlreadyExistsOnNode(ClusterState,Collection[Replica],DownReplica,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#replicaAlreadyExistsOnNode(ClusterState,Collection[Replica],DownReplica,String).mjava","sourceNew":"  private static boolean replicaAlreadyExistsOnNode(ClusterState clusterState, Collection<Replica> replicas, DownReplica badReplica, String baseUrl) {\n    if (replicas != null) {\n      log.debug(\"collection={} check if replica already exists on node using replicas {}\", badReplica.collection.getName(), getNames(replicas));\n      for (Replica replica : replicas) {\n        final Replica.State state = replica.getState();\n        if (!replica.getName().equals(badReplica.replica.getName()) && replica.getStr(ZkStateReader.BASE_URL_PROP).equals(baseUrl)\n            && clusterState.liveNodesContain(replica.getNodeName())\n            && (state == Replica.State.ACTIVE || state == Replica.State.DOWN || state == Replica.State.RECOVERING)) {\n          log.debug(\"collection={} replica already exists on node, bad replica={}, existing replica={}, node name={}\",  badReplica.collection.getName(), badReplica.replica.getName(), replica.getName(), replica.getNodeName());\n          return true;\n        }\n      }\n    }\n    log.debug(\"collection={} replica does not yet exist on node: {}\",  badReplica.collection.getName(), baseUrl);\n    return false;\n  }\n\n","sourceOld":"  private static boolean replicaAlreadyExistsOnNode(ClusterState clusterState, Collection<Replica> replicas, DownReplica badReplica, String baseUrl) {\n    if (replicas != null) {\n      log.debug(\"check if replica already exists on node using replicas {}\", getNames(replicas));\n      for (Replica replica : replicas) {\n        final Replica.State state = replica.getState();\n        if (!replica.getName().equals(badReplica.replica.getName()) && replica.getStr(ZkStateReader.BASE_URL_PROP).equals(baseUrl)\n            && clusterState.liveNodesContain(replica.getNodeName())\n            && (state == Replica.State.ACTIVE || state == Replica.State.DOWN || state == Replica.State.RECOVERING)) {\n          log.debug(\"replica already exists on node, bad replica={}, existing replica={}, node name={}\", badReplica.replica.getName(), replica.getName(), replica.getNodeName());\n          return true;\n        }\n      }\n    }\n    log.debug(\"replica does not yet exist on node: {}\", baseUrl);\n    return false;\n  }\n\n","bugFix":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#replicaAlreadyExistsOnNode(ClusterState,Collection[Replica],DownReplica,String).mjava","sourceNew":null,"sourceOld":"  private static boolean replicaAlreadyExistsOnNode(ClusterState clusterState, Collection<Replica> replicas, DownReplica badReplica, String baseUrl) {\n    if (replicas != null) {\n      log.debug(\"collection={} check if replica already exists on node using replicas {}\", badReplica.collection.getName(), getNames(replicas));\n      for (Replica replica : replicas) {\n        final Replica.State state = replica.getState();\n        if (!replica.getName().equals(badReplica.replica.getName()) && replica.getStr(ZkStateReader.BASE_URL_PROP).equals(baseUrl)\n            && clusterState.liveNodesContain(replica.getNodeName())\n            && (state == Replica.State.ACTIVE || state == Replica.State.DOWN || state == Replica.State.RECOVERING)) {\n          log.debug(\"collection={} replica already exists on node, bad replica={}, existing replica={}, node name={}\",  badReplica.collection.getName(), badReplica.replica.getName(), replica.getName(), replica.getNodeName());\n          return true;\n        }\n      }\n    }\n    log.debug(\"collection={} replica does not yet exist on node: {}\",  badReplica.collection.getName(), baseUrl);\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#replicaAlreadyExistsOnNode(ClusterState,Collection[Replica],DownReplica,String).mjava","sourceNew":null,"sourceOld":"  private static boolean replicaAlreadyExistsOnNode(ClusterState clusterState, Collection<Replica> replicas, DownReplica badReplica, String baseUrl) {\n    if (replicas != null) {\n      log.debug(\"collection={} check if replica already exists on node using replicas {}\", badReplica.collection.getName(), getNames(replicas));\n      for (Replica replica : replicas) {\n        final Replica.State state = replica.getState();\n        if (!replica.getName().equals(badReplica.replica.getName()) && replica.getStr(ZkStateReader.BASE_URL_PROP).equals(baseUrl)\n            && clusterState.liveNodesContain(replica.getNodeName())\n            && (state == Replica.State.ACTIVE || state == Replica.State.DOWN || state == Replica.State.RECOVERING)) {\n          log.debug(\"collection={} replica already exists on node, bad replica={}, existing replica={}, node name={}\",  badReplica.collection.getName(), badReplica.replica.getName(), replica.getName(), replica.getNodeName());\n          return true;\n        }\n      }\n    }\n    log.debug(\"collection={} replica does not yet exist on node: {}\",  badReplica.collection.getName(), baseUrl);\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#replicaAlreadyExistsOnNode(ClusterState,Collection[Replica],DownReplica,String).mjava","sourceNew":null,"sourceOld":"  private static boolean replicaAlreadyExistsOnNode(ClusterState clusterState, Collection<Replica> replicas, DownReplica badReplica, String baseUrl) {\n    if (replicas != null) {\n      log.debug(\"collection={} check if replica already exists on node using replicas {}\", badReplica.collection.getName(), getNames(replicas));\n      for (Replica replica : replicas) {\n        final Replica.State state = replica.getState();\n        if (!replica.getName().equals(badReplica.replica.getName()) && replica.getStr(ZkStateReader.BASE_URL_PROP).equals(baseUrl)\n            && clusterState.liveNodesContain(replica.getNodeName())\n            && (state == Replica.State.ACTIVE || state == Replica.State.DOWN || state == Replica.State.RECOVERING)) {\n          log.debug(\"collection={} replica already exists on node, bad replica={}, existing replica={}, node name={}\",  badReplica.collection.getName(), badReplica.replica.getName(), replica.getName(), replica.getNodeName());\n          return true;\n        }\n      }\n    }\n    log.debug(\"collection={} replica does not yet exist on node: {}\",  badReplica.collection.getName(), baseUrl);\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b","717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3747a28ce6c262c1e27f7c7b30a827bc1a17260b":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"560c18d71dad43d675158783c3840f8c80d6d39c":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["560c18d71dad43d675158783c3840f8c80d6d39c"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"3747a28ce6c262c1e27f7c7b30a827bc1a17260b":["c304e97e7c1d472bc70e801b35ee78583916c6cd","717e5ceb2acae36d422ec75e5a4ce9fac40506e1","560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}