{"path":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","pathOld":"solr/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","sourceNew":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","sourceOld":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","pathOld":"solr/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","sourceNew":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","sourceOld":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","pathOld":"solr/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","sourceNew":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","sourceOld":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f428760ced439cc718b16a0355bdb1d33e1e86a5","date":1324133616,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","sourceNew":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circuit out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n      // Test the cause too in case the expected error is wrapped\n      if (-1 != e.getCause().getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n      deleteCore();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","sourceOld":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circut out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","bugFix":null,"bugIntro":["0b7003c9a9780c96f84f429c910f05038ba58b99"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b1605dda5afabdc06fd136fa0dd14ad326e3001","date":1326751633,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","sourceNew":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circuit out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n      // Test the cause too in case the expected error is wrapped\n      if (-1 != e.getCause().getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      deleteCore();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","sourceOld":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circuit out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n      // Test the cause too in case the expected error is wrapped\n      if (-1 != e.getCause().getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      SolrConfig.severeErrors.clear();\n      deleteCore();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0b7003c9a9780c96f84f429c910f05038ba58b99","date":1338589218,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","sourceNew":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circuit out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n      // Test the cause too in case the expected error is wrapped\n      if (null != e.getCause() && \n          -1 != e.getCause().getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      deleteCore();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","sourceOld":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circuit out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n      // Test the cause too in case the expected error is wrapped\n      if (-1 != e.getCause().getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      deleteCore();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","bugFix":["f428760ced439cc718b16a0355bdb1d33e1e86a5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d061c6ac0252e445714563a37eb8aa9816ce369","date":1341880528,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","sourceNew":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (Exception e) {\n      // short circuit out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n      // Test the cause too in case the expected error is wrapped\n      if (null != e.getCause() && \n          -1 != e.getCause().getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      deleteCore();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","sourceOld":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circuit out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n      // Test the cause too in case the expected error is wrapped\n      if (null != e.getCause() && \n          -1 != e.getCause().getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      deleteCore();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","bugFix":["0aea57ab530d174e645bf6e14d04db1e243e13d7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e2656623e57ced6c16aae473bab02019c951802","date":1342126181,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","sourceNew":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n    assertConfigs(\"solrconfig.xml\", schema, errString);\n  }\n\n","sourceOld":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (Exception e) {\n      // short circuit out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n      // Test the cause too in case the expected error is wrapped\n      if (null != e.getCause() && \n          -1 != e.getCause().getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      deleteCore();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","bugFix":null,"bugIntro":["6e61f8b6e1b607d67d9e0f477d711a92a0dfcde3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","sourceNew":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n    assertConfigs(\"solrconfig.xml\", schema, errString);\n  }\n\n","sourceOld":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circuit out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n      // Test the cause too in case the expected error is wrapped\n      if (null != e.getCause() && \n          -1 != e.getCause().getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      deleteCore();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","sourceNew":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n    assertConfigs(\"solrconfig.xml\", schema, errString);\n  }\n\n","sourceOld":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( \"solrconfig.xml\", schema );\n    } catch (SolrException e) {\n      // short circuit out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n      // Test the cause too in case the expected error is wrapped\n      if (null != e.getCause() && \n          -1 != e.getCause().getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      deleteCore();\n    }\n    fail(\"Did not encounter any exception from: \" + schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e61f8b6e1b607d67d9e0f477d711a92a0dfcde3","date":1364572018,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest#doTest(String,String).mjava","sourceNew":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n    assertConfigs(\"solrconfig-basic.xml\", schema, errString);\n  }\n\n","sourceOld":"  private void doTest(final String schema, final String errString) \n    throws Exception {\n    assertConfigs(\"solrconfig.xml\", schema, errString);\n  }\n\n","bugFix":["9e2656623e57ced6c16aae473bab02019c951802"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9e2656623e57ced6c16aae473bab02019c951802":["6d061c6ac0252e445714563a37eb8aa9816ce369"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"f428760ced439cc718b16a0355bdb1d33e1e86a5":["c26f00b574427b55127e869b935845554afde1fa"],"6e61f8b6e1b607d67d9e0f477d711a92a0dfcde3":["9e2656623e57ced6c16aae473bab02019c951802"],"0b7003c9a9780c96f84f429c910f05038ba58b99":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"aba371508186796cc6151d8223a5b4e16d02e26e":["0b7003c9a9780c96f84f429c910f05038ba58b99","9e2656623e57ced6c16aae473bab02019c951802"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["0b7003c9a9780c96f84f429c910f05038ba58b99","9e2656623e57ced6c16aae473bab02019c951802"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6d061c6ac0252e445714563a37eb8aa9816ce369":["0b7003c9a9780c96f84f429c910f05038ba58b99"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["f428760ced439cc718b16a0355bdb1d33e1e86a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e61f8b6e1b607d67d9e0f477d711a92a0dfcde3"]},"commit2Childs":{"9e2656623e57ced6c16aae473bab02019c951802":["6e61f8b6e1b607d67d9e0f477d711a92a0dfcde3","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c26f00b574427b55127e869b935845554afde1fa":["f428760ced439cc718b16a0355bdb1d33e1e86a5"],"f428760ced439cc718b16a0355bdb1d33e1e86a5":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"6e61f8b6e1b607d67d9e0f477d711a92a0dfcde3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0b7003c9a9780c96f84f429c910f05038ba58b99":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","6d061c6ac0252e445714563a37eb8aa9816ce369"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"6d061c6ac0252e445714563a37eb8aa9816ce369":["9e2656623e57ced6c16aae473bab02019c951802"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["0b7003c9a9780c96f84f429c910f05038ba58b99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}