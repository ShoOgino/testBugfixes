{"path":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkAllReplicasActive().mjava","commits":[{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkAllReplicasActive().mjava","pathOld":"/dev/null","sourceNew":"  // We need to wait around until all replicas are active before expecting rebalancing or distributing shard-unique\n  // properties to work.\n  private void checkAllReplicasActive() throws KeeperException, InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    while (timeout.hasTimedOut() == false) {\n      forceUpdateCollectionStatus();\n      DocCollection docCollection = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME);\n      Set<String> liveNodes = cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes();\n      boolean allActive = true;\n      for (Slice slice : docCollection.getSlices()) {\n        for (Replica rep : slice.getReplicas()) {\n          if (rep.isActive(liveNodes) == false) {\n            allActive = false;\n          }\n        }\n      }\n      if (allActive) {\n        return;\n      }\n      TimeUnit.MILLISECONDS.sleep(100);\n    }\n    fail(\"timed out waiting for all replicas to become active\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkAllReplicasActive().mjava","pathOld":"/dev/null","sourceNew":"  // We need to wait around until all replicas are active before expecting rebalancing or distributing shard-unique\n  // properties to work.\n  private void checkAllReplicasActive() throws KeeperException, InterruptedException {\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    while (timeout.hasTimedOut() == false) {\n      forceUpdateCollectionStatus();\n      DocCollection docCollection = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME);\n      Set<String> liveNodes = cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes();\n      boolean allActive = true;\n      for (Slice slice : docCollection.getSlices()) {\n        for (Replica rep : slice.getReplicas()) {\n          if (rep.isActive(liveNodes) == false) {\n            allActive = false;\n          }\n        }\n      }\n      if (allActive) {\n        return;\n      }\n      TimeUnit.MILLISECONDS.sleep(100);\n    }\n    fail(\"timed out waiting for all replicas to become active\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73fd358e8ec697393d56617f4d9cedaca74dca14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}