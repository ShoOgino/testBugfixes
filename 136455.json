{"path":"src/java/org/apache/lucene/search/RangeQuery#equals(Object).mjava","commits":[{"id":"f81be51430d74c492f81c1491f9eb2806f8e4d9f","date":1113309296,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"    /** Returns true iff <code>o</code> is equal to this. */\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof RangeQuery)) return false;\n\n        final RangeQuery other = (RangeQuery) o;\n        if (this.getBoost() != other.getBoost()) return false;\n        if (this.inclusive != other.inclusive) return false;\n        // one of lowerTerm and upperTerm can be null\n        if (this.lowerTerm != null ? !this.lowerTerm.equals(other.lowerTerm) : other.lowerTerm != null) return false;\n        if (this.upperTerm != null ? !this.upperTerm.equals(other.upperTerm) : other.upperTerm != null) return false;\n        return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b33dc4652df2747e38f9782fde82bd426b77c538","date":1221599001,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#equals(Object).mjava","sourceNew":"    /** Returns true iff <code>o</code> is equal to this. */\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof RangeQuery)) return false;\n\n        final RangeQuery other = (RangeQuery) o;\n        if (this.getBoost() != other.getBoost()) return false;\n        if (this.inclusive != other.inclusive) return false;\n        if (this.collator != null && ! this.collator.equals(other.collator)) \n            return false;\n\n        // one of lowerTerm and upperTerm can be null\n        if (this.lowerTerm != null ? !this.lowerTerm.equals(other.lowerTerm) : other.lowerTerm != null) return false;\n        if (this.upperTerm != null ? !this.upperTerm.equals(other.upperTerm) : other.upperTerm != null) return false;\n        return true;\n    }\n\n","sourceOld":"    /** Returns true iff <code>o</code> is equal to this. */\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof RangeQuery)) return false;\n\n        final RangeQuery other = (RangeQuery) o;\n        if (this.getBoost() != other.getBoost()) return false;\n        if (this.inclusive != other.inclusive) return false;\n        // one of lowerTerm and upperTerm can be null\n        if (this.lowerTerm != null ? !this.lowerTerm.equals(other.lowerTerm) : other.lowerTerm != null) return false;\n        if (this.upperTerm != null ? !this.upperTerm.equals(other.upperTerm) : other.upperTerm != null) return false;\n        return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#equals(Object).mjava","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof RangeQuery)) return false;\n    RangeQuery other = (RangeQuery) o;\n\n    if (this.field != other.field  // interned comparison\n        || this.includeLower != other.includeLower\n        || this.includeUpper != other.includeUpper\n        || (this.collator != null && ! this.collator.equals(other.collator))\n       ) { return false; }\n    String lowerVal = this.lowerTerm == null ? null : lowerTerm.text();\n    String upperVal = this.upperTerm == null ? null : upperTerm.text();\n    String olowerText = other.lowerTerm == null ? null : other.lowerTerm.text();\n    String oupperText = other.upperTerm == null ? null : other.upperTerm.text();\n    if (lowerVal != null ? !lowerVal.equals(olowerText) : olowerText != null) return false;\n    if (upperVal != null ? !upperVal.equals(oupperText) : oupperText != null) return false;\n    return this.getBoost() == other.getBoost();\n  }\n\n","sourceOld":"    /** Returns true iff <code>o</code> is equal to this. */\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof RangeQuery)) return false;\n\n        final RangeQuery other = (RangeQuery) o;\n        if (this.getBoost() != other.getBoost()) return false;\n        if (this.inclusive != other.inclusive) return false;\n        if (this.collator != null && ! this.collator.equals(other.collator)) \n            return false;\n\n        // one of lowerTerm and upperTerm can be null\n        if (this.lowerTerm != null ? !this.lowerTerm.equals(other.lowerTerm) : other.lowerTerm != null) return false;\n        if (this.upperTerm != null ? !this.upperTerm.equals(other.upperTerm) : other.upperTerm != null) return false;\n        return true;\n    }\n\n","bugFix":null,"bugIntro":["7a42d54cb6fd51d6c22cda75f08efaee58d31ac3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a42d54cb6fd51d6c22cda75f08efaee58d31ac3","date":1239324031,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#equals(Object).mjava","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof RangeQuery)) return false;\n    RangeQuery other = (RangeQuery) o;\n\n    if (this.field != other.field  // interned comparison\n        || this.includeLower != other.includeLower\n        || this.includeUpper != other.includeUpper\n        || (this.collator != null && ! this.collator.equals(other.collator) || (this.collator == null && other.collator != null))\n       ) { return false; }\n    String lowerVal = this.lowerTerm == null ? null : lowerTerm.text();\n    String upperVal = this.upperTerm == null ? null : upperTerm.text();\n    String olowerText = other.lowerTerm == null ? null : other.lowerTerm.text();\n    String oupperText = other.upperTerm == null ? null : other.upperTerm.text();\n    if (lowerVal != null ? !lowerVal.equals(olowerText) : olowerText != null) return false;\n    if (upperVal != null ? !upperVal.equals(oupperText) : oupperText != null) return false;\n    return this.getBoost() == other.getBoost();\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof RangeQuery)) return false;\n    RangeQuery other = (RangeQuery) o;\n\n    if (this.field != other.field  // interned comparison\n        || this.includeLower != other.includeLower\n        || this.includeUpper != other.includeUpper\n        || (this.collator != null && ! this.collator.equals(other.collator))\n       ) { return false; }\n    String lowerVal = this.lowerTerm == null ? null : lowerTerm.text();\n    String upperVal = this.upperTerm == null ? null : upperTerm.text();\n    String olowerText = other.lowerTerm == null ? null : other.lowerTerm.text();\n    String oupperText = other.upperTerm == null ? null : other.upperTerm.text();\n    if (lowerVal != null ? !lowerVal.equals(olowerText) : olowerText != null) return false;\n    if (upperVal != null ? !upperVal.equals(oupperText) : oupperText != null) return false;\n    return this.getBoost() == other.getBoost();\n  }\n\n","bugFix":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d0a32bc578c175fa42d65d95f21290d3473d84","date":1241610125,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#equals(Object).mjava","sourceNew":"  //@Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    RangeQuery other = (RangeQuery) obj;\n    if (collator == null) {\n      if (other.collator != null)\n        return false;\n    } else if (!collator.equals(other.collator))\n      return false;\n    if (field == null) {\n      if (other.field != null)\n        return false;\n    } else if (!field.equals(other.field))\n      return false;\n    if (includeLower != other.includeLower)\n      return false;\n    if (includeUpper != other.includeUpper)\n      return false;\n    if (lowerTerm == null) {\n      if (other.lowerTerm != null)\n        return false;\n    } else if (!lowerTerm.equals(other.lowerTerm))\n      return false;\n    if (upperTerm == null) {\n      if (other.upperTerm != null)\n        return false;\n    } else if (!upperTerm.equals(other.upperTerm))\n      return false;\n    return true;\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof RangeQuery)) return false;\n    RangeQuery other = (RangeQuery) o;\n\n    if (this.field != other.field  // interned comparison\n        || this.includeLower != other.includeLower\n        || this.includeUpper != other.includeUpper\n        || (this.collator != null && ! this.collator.equals(other.collator) || (this.collator == null && other.collator != null))\n       ) { return false; }\n    String lowerVal = this.lowerTerm == null ? null : lowerTerm.text();\n    String upperVal = this.upperTerm == null ? null : upperTerm.text();\n    String olowerText = other.lowerTerm == null ? null : other.lowerTerm.text();\n    String oupperText = other.upperTerm == null ? null : other.upperTerm.text();\n    if (lowerVal != null ? !lowerVal.equals(olowerText) : olowerText != null) return false;\n    if (upperVal != null ? !upperVal.equals(oupperText) : oupperText != null) return false;\n    return this.getBoost() == other.getBoost();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermRangeQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#equals(Object).mjava","sourceNew":"  //@Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    TermRangeQuery other = (TermRangeQuery) obj;\n    if (collator == null) {\n      if (other.collator != null)\n        return false;\n    } else if (!collator.equals(other.collator))\n      return false;\n    if (field == null) {\n      if (other.field != null)\n        return false;\n    } else if (!field.equals(other.field))\n      return false;\n    if (includeLower != other.includeLower)\n      return false;\n    if (includeUpper != other.includeUpper)\n      return false;\n    if (lowerTerm == null) {\n      if (other.lowerTerm != null)\n        return false;\n    } else if (!lowerTerm.equals(other.lowerTerm))\n      return false;\n    if (upperTerm == null) {\n      if (other.upperTerm != null)\n        return false;\n    } else if (!upperTerm.equals(other.upperTerm))\n      return false;\n    return true;\n  }\n\n","sourceOld":"  //@Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    RangeQuery other = (RangeQuery) obj;\n    if (collator == null) {\n      if (other.collator != null)\n        return false;\n    } else if (!collator.equals(other.collator))\n      return false;\n    if (field == null) {\n      if (other.field != null)\n        return false;\n    } else if (!field.equals(other.field))\n      return false;\n    if (includeLower != other.includeLower)\n      return false;\n    if (includeUpper != other.includeUpper)\n      return false;\n    if (lowerTerm == null) {\n      if (other.lowerTerm != null)\n        return false;\n    } else if (!lowerTerm.equals(other.lowerTerm))\n      return false;\n    if (upperTerm == null) {\n      if (other.upperTerm != null)\n        return false;\n    } else if (!upperTerm.equals(other.upperTerm))\n      return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c","date":1246738520,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof RangeQuery)) return false;\n\n    final RangeQuery other = (RangeQuery) o;\n    return this.delegate.equals(other.delegate);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da","date":1255296547,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/RangeQuery#equals(Object).mjava","sourceNew":null,"sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof RangeQuery)) return false;\n\n    final RangeQuery other = (RangeQuery) o;\n    return this.delegate.equals(other.delegate);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58d0a32bc578c175fa42d65d95f21290d3473d84":["7a42d54cb6fd51d6c22cda75f08efaee58d31ac3"],"f81be51430d74c492f81c1491f9eb2806f8e4d9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["58d0a32bc578c175fa42d65d95f21290d3473d84"],"b33dc4652df2747e38f9782fde82bd426b77c538":["f81be51430d74c492f81c1491f9eb2806f8e4d9f"],"7a42d54cb6fd51d6c22cda75f08efaee58d31ac3":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["b33dc4652df2747e38f9782fde82bd426b77c538"]},"commit2Childs":{"58d0a32bc578c175fa42d65d95f21290d3473d84":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"f81be51430d74c492f81c1491f9eb2806f8e4d9f":["b33dc4652df2747e38f9782fde82bd426b77c538"],"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c"],"b33dc4652df2747e38f9782fde82bd426b77c538":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"7a42d54cb6fd51d6c22cda75f08efaee58d31ac3":["58d0a32bc578c175fa42d65d95f21290d3473d84"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f81be51430d74c492f81c1491f9eb2806f8e4d9f"],"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["7a42d54cb6fd51d6c22cda75f08efaee58d31ac3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}