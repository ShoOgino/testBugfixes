{"path":"lucene/contrib/misc/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery#testComplexPhrases().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery#testComplexPhrases().mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery#testComplexPhrases().mjava","sourceNew":"  public void testComplexPhrases() throws Exception {\n    checkMatches(\"\\\"john smith\\\"\", \"1\"); // Simple multi-term still works\n    checkMatches(\"\\\"j*   smyth~\\\"\", \"1,2\"); // wildcards and fuzzies are OK in\n    // phrases\n    checkMatches(\"\\\"(jo* -john)  smith\\\"\", \"2\"); // boolean logic works\n    checkMatches(\"\\\"jo*  smith\\\"~2\", \"1,2,3\"); // position logic works.\n    checkMatches(\"\\\"jo* [sma TO smZ]\\\" \", \"1,2\"); // range queries supported\n    checkMatches(\"\\\"john\\\"\", \"1,3\"); // Simple single-term still works\n    checkMatches(\"\\\"(john OR johathon)  smith\\\"\", \"1,2\"); // boolean logic with\n    // brackets works.\n    checkMatches(\"\\\"(jo* -john) smyth~\\\"\", \"2\"); // boolean logic with\n    // brackets works.\n\n    // checkMatches(\"\\\"john -percival\\\"\", \"1\"); // not logic doesn't work\n    // currently :(.\n\n    checkMatches(\"\\\"john  nosuchword*\\\"\", \"\"); // phrases with clauses producing\n    // empty sets\n\n    checkBadQuery(\"\\\"jo*  id:1 smith\\\"\"); // mixing fields in a phrase is bad\n    checkBadQuery(\"\\\"jo* \\\"smith\\\" \\\"\"); // phrases inside phrases is bad\n  }\n\n","sourceOld":"  public void testComplexPhrases() throws Exception {\n    checkMatches(\"\\\"john smith\\\"\", \"1\"); // Simple multi-term still works\n    checkMatches(\"\\\"j*   smyth~\\\"\", \"1,2\"); // wildcards and fuzzies are OK in\n    // phrases\n    checkMatches(\"\\\"(jo* -john)  smith\\\"\", \"2\"); // boolean logic works\n    checkMatches(\"\\\"jo*  smith\\\"~2\", \"1,2,3\"); // position logic works.\n    checkMatches(\"\\\"jo* [sma TO smZ]\\\" \", \"1,2\"); // range queries supported\n    checkMatches(\"\\\"john\\\"\", \"1,3\"); // Simple single-term still works\n    checkMatches(\"\\\"(john OR johathon)  smith\\\"\", \"1,2\"); // boolean logic with\n    // brackets works.\n    checkMatches(\"\\\"(jo* -john) smyth~\\\"\", \"2\"); // boolean logic with\n    // brackets works.\n\n    // checkMatches(\"\\\"john -percival\\\"\", \"1\"); // not logic doesn't work\n    // currently :(.\n\n    checkMatches(\"\\\"john  nosuchword*\\\"\", \"\"); // phrases with clauses producing\n    // empty sets\n\n    checkBadQuery(\"\\\"jo*  id:1 smith\\\"\"); // mixing fields in a phrase is bad\n    checkBadQuery(\"\\\"jo* \\\"smith\\\" \\\"\"); // phrases inside phrases is bad\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery#testComplexPhrases().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery#testComplexPhrases().mjava","sourceNew":"  public void testComplexPhrases() throws Exception {\n    checkMatches(\"\\\"john smith\\\"\", \"1\"); // Simple multi-term still works\n    checkMatches(\"\\\"j*   smyth~\\\"\", \"1,2\"); // wildcards and fuzzies are OK in\n    // phrases\n    checkMatches(\"\\\"(jo* -john)  smith\\\"\", \"2\"); // boolean logic works\n    checkMatches(\"\\\"jo*  smith\\\"~2\", \"1,2,3\"); // position logic works.\n    checkMatches(\"\\\"jo* [sma TO smZ]\\\" \", \"1,2\"); // range queries supported\n    checkMatches(\"\\\"john\\\"\", \"1,3\"); // Simple single-term still works\n    checkMatches(\"\\\"(john OR johathon)  smith\\\"\", \"1,2\"); // boolean logic with\n    // brackets works.\n    checkMatches(\"\\\"(jo* -john) smyth~\\\"\", \"2\"); // boolean logic with\n    // brackets works.\n\n    // checkMatches(\"\\\"john -percival\\\"\", \"1\"); // not logic doesn't work\n    // currently :(.\n\n    checkMatches(\"\\\"john  nosuchword*\\\"\", \"\"); // phrases with clauses producing\n    // empty sets\n\n    checkBadQuery(\"\\\"jo*  id:1 smith\\\"\"); // mixing fields in a phrase is bad\n    checkBadQuery(\"\\\"jo* \\\"smith\\\" \\\"\"); // phrases inside phrases is bad\n  }\n\n","sourceOld":"  public void testComplexPhrases() throws Exception {\n    checkMatches(\"\\\"john smith\\\"\", \"1\"); // Simple multi-term still works\n    checkMatches(\"\\\"j*   smyth~\\\"\", \"1,2\"); // wildcards and fuzzies are OK in\n    // phrases\n    checkMatches(\"\\\"(jo* -john)  smith\\\"\", \"2\"); // boolean logic works\n    checkMatches(\"\\\"jo*  smith\\\"~2\", \"1,2,3\"); // position logic works.\n    checkMatches(\"\\\"jo* [sma TO smZ]\\\" \", \"1,2\"); // range queries supported\n    checkMatches(\"\\\"john\\\"\", \"1,3\"); // Simple single-term still works\n    checkMatches(\"\\\"(john OR johathon)  smith\\\"\", \"1,2\"); // boolean logic with\n    // brackets works.\n    checkMatches(\"\\\"(jo* -john) smyth~\\\"\", \"2\"); // boolean logic with\n    // brackets works.\n\n    // checkMatches(\"\\\"john -percival\\\"\", \"1\"); // not logic doesn't work\n    // currently :(.\n\n    checkMatches(\"\\\"john  nosuchword*\\\"\", \"\"); // phrases with clauses producing\n    // empty sets\n\n    checkBadQuery(\"\\\"jo*  id:1 smith\\\"\"); // mixing fields in a phrase is bad\n    checkBadQuery(\"\\\"jo* \\\"smith\\\" \\\"\"); // phrases inside phrases is bad\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}