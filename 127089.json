{"path":"solr/core/src/java/org/apache/solr/core/IndexReaderFactory#newReader(Directory,SolrCore).mjava","commits":[{"id":"a15c58cbe3d17e9fb301c7863878f51718e2d60e","date":1334073993,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexReaderFactory#newReader(Directory,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexReaderFactory#newReader(Directory).mjava","sourceNew":"  /**\n   * Creates a new IndexReader instance using the given Directory.\n   * \n   * @param indexDir indexDir index location\n   * @param core {@link SolrCore} instance where this reader will be used. NOTE:\n   * this SolrCore instance may not be fully configured yet, but basic things like\n   * {@link SolrCore#getCoreDescriptor()}, {@link SolrCore#getSchema()} and\n   * {@link SolrCore#getSolrConfig()} are valid.\n   * @return An IndexReader instance\n   * @throws IOException\n   */\n  public abstract DirectoryReader newReader(Directory indexDir, SolrCore core)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Creates a new IndexReader instance using the given Directory.\n   * \n   * @param indexDir indexDir index location\n   * @return An IndexReader instance\n   * @throws IOException\n   */\n  public abstract DirectoryReader newReader(Directory indexDir)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexReaderFactory#newReader(Directory,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexReaderFactory#newReader(Directory).mjava","sourceNew":"  /**\n   * Creates a new IndexReader instance using the given Directory.\n   * \n   * @param indexDir indexDir index location\n   * @param core {@link SolrCore} instance where this reader will be used. NOTE:\n   * this SolrCore instance may not be fully configured yet, but basic things like\n   * {@link SolrCore#getCoreDescriptor()}, {@link SolrCore#getSchema()} and\n   * {@link SolrCore#getSolrConfig()} are valid.\n   * @return An IndexReader instance\n   * @throws IOException\n   */\n  public abstract DirectoryReader newReader(Directory indexDir, SolrCore core)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Creates a new IndexReader instance using the given Directory.\n   * \n   * @param indexDir indexDir index location\n   * @return An IndexReader instance\n   * @throws IOException\n   */\n  public abstract DirectoryReader newReader(Directory indexDir)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexReaderFactory#newReader(Directory,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexReaderFactory#newReader(Directory,SolrCore).mjava","sourceNew":"  /**\n   * Creates a new IndexReader instance using the given Directory.\n   * \n   * @param indexDir indexDir index location\n   * @param core {@link SolrCore} instance where this reader will be used. NOTE:\n   * this SolrCore instance may not be fully configured yet, but basic things like\n   * {@link SolrCore#getCoreDescriptor()}, {@link SolrCore#getSchema()} and\n   * {@link SolrCore#getSolrConfig()} are valid.\n   * @return An IndexReader instance\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract DirectoryReader newReader(Directory indexDir, SolrCore core)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Creates a new IndexReader instance using the given Directory.\n   * \n   * @param indexDir indexDir index location\n   * @param core {@link SolrCore} instance where this reader will be used. NOTE:\n   * this SolrCore instance may not be fully configured yet, but basic things like\n   * {@link SolrCore#getCoreDescriptor()}, {@link SolrCore#getSchema()} and\n   * {@link SolrCore#getSolrConfig()} are valid.\n   * @return An IndexReader instance\n   * @throws IOException\n   */\n  public abstract DirectoryReader newReader(Directory indexDir, SolrCore core)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexReaderFactory#newReader(Directory,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexReaderFactory#newReader(Directory,SolrCore).mjava","sourceNew":"  /**\n   * Creates a new IndexReader instance using the given Directory.\n   * \n   * @param indexDir indexDir index location\n   * @param core {@link SolrCore} instance where this reader will be used. NOTE:\n   * this SolrCore instance may not be fully configured yet, but basic things like\n   * {@link SolrCore#getCoreDescriptor()}, {@link SolrCore#getLatestSchema()} and\n   * {@link SolrCore#getSolrConfig()} are valid.\n   * @return An IndexReader instance\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract DirectoryReader newReader(Directory indexDir, SolrCore core)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Creates a new IndexReader instance using the given Directory.\n   * \n   * @param indexDir indexDir index location\n   * @param core {@link SolrCore} instance where this reader will be used. NOTE:\n   * this SolrCore instance may not be fully configured yet, but basic things like\n   * {@link SolrCore#getCoreDescriptor()}, {@link SolrCore#getSchema()} and\n   * {@link SolrCore#getSolrConfig()} are valid.\n   * @return An IndexReader instance\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract DirectoryReader newReader(Directory indexDir, SolrCore core)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["a15c58cbe3d17e9fb301c7863878f51718e2d60e"],"5a238fc456663f685a9db1ed8d680e348bb45171":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a15c58cbe3d17e9fb301c7863878f51718e2d60e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a15c58cbe3d17e9fb301c7863878f51718e2d60e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["08970e5b8411182a29412c177eff67ec1110095b"],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a238fc456663f685a9db1ed8d680e348bb45171","a15c58cbe3d17e9fb301c7863878f51718e2d60e"],"a15c58cbe3d17e9fb301c7863878f51718e2d60e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","5a238fc456663f685a9db1ed8d680e348bb45171"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"08970e5b8411182a29412c177eff67ec1110095b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["5a238fc456663f685a9db1ed8d680e348bb45171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}