{"path":"src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(TermFreqVector[],int).mjava","commits":[{"id":"9e98927024757b7944e3ab5bf88134d5f7f30600","date":1097059223,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(TermFreqVector[],int).mjava","pathOld":"/dev/null","sourceNew":"\tprivate void verifyVectors(TermFreqVector[] vectors, int num) {\n\t\tStringBuffer temp = new StringBuffer();\n\t\tString[] terms = null;\n\t\tfor (int i = 0; i < vectors.length; i++) {\n\t\t\tterms = vectors[i].getTerms();\n\t\t\tfor (int z = 0; z < terms.length; z++) {\n\t\t\t\ttemp.append(terms[z]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!English.intToEnglish(num).trim().equals(temp.toString().trim()))\n\t\t\t\tSystem.out.println(\"worng term result\");\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde91cb86cf36b45603c6dfa1c27379a591a17e7","date":1166314240,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(TermFreqVector[],int).mjava","pathOld":"src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(TermFreqVector[],int).mjava","sourceNew":"  private void verifyVectors(TermFreqVector[] vectors, int num) {\n    StringBuffer temp = new StringBuffer();\n    String[] terms = null;\n    for (int i = 0; i < vectors.length; i++) {\n      terms = vectors[i].getTerms();\n      for (int z = 0; z < terms.length; z++) {\n        temp.append(terms[z]);\n      }\n    }\n    \n    if (!English.intToEnglish(num).trim().equals(temp.toString().trim()))\n        System.out.println(\"wrong term result\");\n  }\n\n","sourceOld":"\tprivate void verifyVectors(TermFreqVector[] vectors, int num) {\n\t\tStringBuffer temp = new StringBuffer();\n\t\tString[] terms = null;\n\t\tfor (int i = 0; i < vectors.length; i++) {\n\t\t\tterms = vectors[i].getTerms();\n\t\t\tfor (int z = 0; z < terms.length; z++) {\n\t\t\t\ttemp.append(terms[z]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!English.intToEnglish(num).trim().equals(temp.toString().trim()))\n\t\t\t\tSystem.out.println(\"worng term result\");\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(TermFreqVector[],int).mjava","pathOld":"src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(TermFreqVector[],int).mjava","sourceNew":"  private void verifyVectors(TermFreqVector[] vectors, int num) {\n    StringBuilder temp = new StringBuilder();\n    String[] terms = null;\n    for (int i = 0; i < vectors.length; i++) {\n      terms = vectors[i].getTerms();\n      for (int z = 0; z < terms.length; z++) {\n        temp.append(terms[z]);\n      }\n    }\n    \n    if (!English.intToEnglish(num).trim().equals(temp.toString().trim()))\n        System.out.println(\"wrong term result\");\n  }\n\n","sourceOld":"  private void verifyVectors(TermFreqVector[] vectors, int num) {\n    StringBuffer temp = new StringBuffer();\n    String[] terms = null;\n    for (int i = 0; i < vectors.length; i++) {\n      terms = vectors[i].getTerms();\n      for (int z = 0; z < terms.length; z++) {\n        temp.append(terms[z]);\n      }\n    }\n    \n    if (!English.intToEnglish(num).trim().equals(temp.toString().trim()))\n        System.out.println(\"wrong term result\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(TermFreqVector[],int).mjava","pathOld":"src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVectors(TermFreqVector[],int).mjava","sourceNew":"  private void verifyVectors(TermFreqVector[] vectors, int num) {\n    StringBuilder temp = new StringBuilder();\n    String[] terms = null;\n    for (int i = 0; i < vectors.length; i++) {\n      terms = vectors[i].getTerms();\n      for (int z = 0; z < terms.length; z++) {\n        temp.append(terms[z]);\n      }\n    }\n    \n    if (!English.intToEnglish(num).trim().equals(temp.toString().trim()))\n        System.out.println(\"wrong term result\");\n  }\n\n","sourceOld":"  private void verifyVectors(TermFreqVector[] vectors, int num) {\n    StringBuilder temp = new StringBuilder();\n    String[] terms = null;\n    for (int i = 0; i < vectors.length; i++) {\n      terms = vectors[i].getTerms();\n      for (int z = 0; z < terms.length; z++) {\n        temp.append(terms[z]);\n      }\n    }\n    \n    if (!English.intToEnglish(num).trim().equals(temp.toString().trim()))\n        System.out.println(\"wrong term result\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bde91cb86cf36b45603c6dfa1c27379a591a17e7":["9e98927024757b7944e3ab5bf88134d5f7f30600"],"9e98927024757b7944e3ab5bf88134d5f7f30600":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["bde91cb86cf36b45603c6dfa1c27379a591a17e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"]},"commit2Childs":{"bde91cb86cf36b45603c6dfa1c27379a591a17e7":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"9e98927024757b7944e3ab5bf88134d5f7f30600":["bde91cb86cf36b45603c6dfa1c27379a591a17e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e98927024757b7944e3ab5bf88134d5f7f30600"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}