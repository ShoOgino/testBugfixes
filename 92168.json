{"path":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","sourceNew":"  // Document instance is re-used per-thread\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","sourceOld":"  // Document instance is re-used per-thread\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"  // Document instance is re-used per-thread\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d","date":1298208351,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","sourceNew":"  /** Note: Document instance is re-used per-thread */\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","sourceOld":"  // Document instance is re-used per-thread\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","sourceNew":"  /** Note: Document instance is re-used per-thread */\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","sourceOld":"  // Document instance is re-used per-thread\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","sourceNew":"  // Document instance is re-used per-thread\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","sourceOld":"  // Document instance is re-used per-thread\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a32e313633383bfadd3bbf8b933611c6a07c7c","date":1303945298,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","sourceNew":"  /** Note: Document instance is re-used per-thread */\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","sourceOld":"  // Document instance is re-used per-thread\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","sourceNew":"  /** Note: Document instance is re-used per-thread */\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","sourceOld":"  /** Note: Document instance is re-used per-thread */\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d"],"0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"70a32e313633383bfadd3bbf8b933611c6a07c7c":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d":["7b91922b55d15444d554721b352861d028eb8278","f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"70a32e313633383bfadd3bbf8b933611c6a07c7c":[],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["70a32e313633383bfadd3bbf8b933611c6a07c7c"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d","29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70a32e313633383bfadd3bbf8b933611c6a07c7c","f1bdbf92da222965b46c0a942c3857ba56e5c638","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}