{"path":"solr/core/src/java/org/apache/solr/util/SuggestMissingFactories#main(String[]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SuggestMissingFactories#main(String[]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SuggestMissingFactories#main(String[]).mjava","sourceNew":"    public static void main(String[] args) throws ClassNotFoundException, IOException, NoSuchMethodException {\n\n        final File[] files = new File[args.length];\n        for (int i = 0; i < args.length; i++) {\n            files[i] = new File(args[i]);\n        }\n        final FindClasses finder = new FindClasses(files);\n        final ClassLoader cl = finder.getClassLoader();\n\n        final Class TOKENSTREAM\n            = cl.loadClass(\"org.apache.lucene.analysis.TokenStream\");\n        final Class TOKENIZER\n            = cl.loadClass(\"org.apache.lucene.analysis.Tokenizer\");\n        final Class TOKENFILTER\n            = cl.loadClass(\"org.apache.lucene.analysis.TokenFilter\");\n        final Class TOKENIZERFACTORY\n            = cl.loadClass(\"org.apache.solr.analysis.TokenizerFactory\");\n        final Class TOKENFILTERFACTORY\n            = cl.loadClass(\"org.apache.solr.analysis.TokenFilterFactory\");\n        \n        \n        final HashSet<Class> result\n            = new HashSet<Class>(finder.findExtends(TOKENIZER));\n        result.addAll(finder.findExtends(TOKENFILTER));\n        \n        result.removeAll(finder.findMethodReturns\n                         (finder.findExtends(TOKENIZERFACTORY),\n                          \"create\",\n                          Reader.class).values());\n        result.removeAll(finder.findMethodReturns\n                         (finder.findExtends(TOKENFILTERFACTORY),\n                          \"create\",\n                          TOKENSTREAM).values());\n        \n        for (final Class c : result) {\n            System.out.println(c.getName());\n        }\n    }\n\n","sourceOld":"    public static void main(String[] args) throws ClassNotFoundException, IOException, NoSuchMethodException {\n\n        final File[] files = new File[args.length];\n        for (int i = 0; i < args.length; i++) {\n            files[i] = new File(args[i]);\n        }\n        final FindClasses finder = new FindClasses(files);\n        final ClassLoader cl = finder.getClassLoader();\n\n        final Class TOKENSTREAM\n            = cl.loadClass(\"org.apache.lucene.analysis.TokenStream\");\n        final Class TOKENIZER\n            = cl.loadClass(\"org.apache.lucene.analysis.Tokenizer\");\n        final Class TOKENFILTER\n            = cl.loadClass(\"org.apache.lucene.analysis.TokenFilter\");\n        final Class TOKENIZERFACTORY\n            = cl.loadClass(\"org.apache.solr.analysis.TokenizerFactory\");\n        final Class TOKENFILTERFACTORY\n            = cl.loadClass(\"org.apache.solr.analysis.TokenFilterFactory\");\n        \n        \n        final HashSet<Class> result\n            = new HashSet<Class>(finder.findExtends(TOKENIZER));\n        result.addAll(finder.findExtends(TOKENFILTER));\n        \n        result.removeAll(finder.findMethodReturns\n                         (finder.findExtends(TOKENIZERFACTORY),\n                          \"create\",\n                          Reader.class).values());\n        result.removeAll(finder.findMethodReturns\n                         (finder.findExtends(TOKENFILTERFACTORY),\n                          \"create\",\n                          TOKENSTREAM).values());\n        \n        for (final Class c : result) {\n            System.out.println(c.getName());\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SuggestMissingFactories#main(String[]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SuggestMissingFactories#main(String[]).mjava","sourceNew":"    public static void main(String[] args) throws ClassNotFoundException, IOException, NoSuchMethodException {\n\n        final File[] files = new File[args.length];\n        for (int i = 0; i < args.length; i++) {\n            files[i] = new File(args[i]);\n        }\n        final FindClasses finder = new FindClasses(files);\n        final ClassLoader cl = finder.getClassLoader();\n\n        final Class TOKENSTREAM\n            = cl.loadClass(\"org.apache.lucene.analysis.TokenStream\");\n        final Class TOKENIZER\n            = cl.loadClass(\"org.apache.lucene.analysis.Tokenizer\");\n        final Class TOKENFILTER\n            = cl.loadClass(\"org.apache.lucene.analysis.TokenFilter\");\n        final Class TOKENIZERFACTORY\n            = cl.loadClass(\"org.apache.solr.analysis.TokenizerFactory\");\n        final Class TOKENFILTERFACTORY\n            = cl.loadClass(\"org.apache.solr.analysis.TokenFilterFactory\");\n        \n        \n        final HashSet<Class> result\n            = new HashSet<Class>(finder.findExtends(TOKENIZER));\n        result.addAll(finder.findExtends(TOKENFILTER));\n        \n        result.removeAll(finder.findMethodReturns\n                         (finder.findExtends(TOKENIZERFACTORY),\n                          \"create\",\n                          Reader.class).values());\n        result.removeAll(finder.findMethodReturns\n                         (finder.findExtends(TOKENFILTERFACTORY),\n                          \"create\",\n                          TOKENSTREAM).values());\n        \n        for (final Class c : result) {\n            System.out.println(c.getName());\n        }\n    }\n\n","sourceOld":"    public static void main(String[] args) throws ClassNotFoundException, IOException, NoSuchMethodException {\n\n        final File[] files = new File[args.length];\n        for (int i = 0; i < args.length; i++) {\n            files[i] = new File(args[i]);\n        }\n        final FindClasses finder = new FindClasses(files);\n        final ClassLoader cl = finder.getClassLoader();\n\n        final Class TOKENSTREAM\n            = cl.loadClass(\"org.apache.lucene.analysis.TokenStream\");\n        final Class TOKENIZER\n            = cl.loadClass(\"org.apache.lucene.analysis.Tokenizer\");\n        final Class TOKENFILTER\n            = cl.loadClass(\"org.apache.lucene.analysis.TokenFilter\");\n        final Class TOKENIZERFACTORY\n            = cl.loadClass(\"org.apache.solr.analysis.TokenizerFactory\");\n        final Class TOKENFILTERFACTORY\n            = cl.loadClass(\"org.apache.solr.analysis.TokenFilterFactory\");\n        \n        \n        final HashSet<Class> result\n            = new HashSet<Class>(finder.findExtends(TOKENIZER));\n        result.addAll(finder.findExtends(TOKENFILTER));\n        \n        result.removeAll(finder.findMethodReturns\n                         (finder.findExtends(TOKENIZERFACTORY),\n                          \"create\",\n                          Reader.class).values());\n        result.removeAll(finder.findMethodReturns\n                         (finder.findExtends(TOKENFILTERFACTORY),\n                          \"create\",\n                          TOKENSTREAM).values());\n        \n        for (final Class c : result) {\n            System.out.println(c.getName());\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SuggestMissingFactories#main(String[]).mjava","pathOld":"solr/src/java/org/apache/solr/util/SuggestMissingFactories#main(String[]).mjava","sourceNew":"    public static void main(String[] args) throws ClassNotFoundException, IOException, NoSuchMethodException {\n\n        final File[] files = new File[args.length];\n        for (int i = 0; i < args.length; i++) {\n            files[i] = new File(args[i]);\n        }\n        final FindClasses finder = new FindClasses(files);\n        final ClassLoader cl = finder.getClassLoader();\n\n        final Class TOKENSTREAM\n            = cl.loadClass(\"org.apache.lucene.analysis.TokenStream\");\n        final Class TOKENIZER\n            = cl.loadClass(\"org.apache.lucene.analysis.Tokenizer\");\n        final Class TOKENFILTER\n            = cl.loadClass(\"org.apache.lucene.analysis.TokenFilter\");\n        final Class TOKENIZERFACTORY\n            = cl.loadClass(\"org.apache.solr.analysis.TokenizerFactory\");\n        final Class TOKENFILTERFACTORY\n            = cl.loadClass(\"org.apache.solr.analysis.TokenFilterFactory\");\n        \n        \n        final HashSet<Class> result\n            = new HashSet<Class>(finder.findExtends(TOKENIZER));\n        result.addAll(finder.findExtends(TOKENFILTER));\n        \n        result.removeAll(finder.findMethodReturns\n                         (finder.findExtends(TOKENIZERFACTORY),\n                          \"create\",\n                          Reader.class).values());\n        result.removeAll(finder.findMethodReturns\n                         (finder.findExtends(TOKENFILTERFACTORY),\n                          \"create\",\n                          TOKENSTREAM).values());\n        \n        for (final Class c : result) {\n            System.out.println(c.getName());\n        }\n    }\n\n","sourceOld":"    public static void main(String[] args) throws ClassNotFoundException, IOException, NoSuchMethodException {\n\n        final File[] files = new File[args.length];\n        for (int i = 0; i < args.length; i++) {\n            files[i] = new File(args[i]);\n        }\n        final FindClasses finder = new FindClasses(files);\n        final ClassLoader cl = finder.getClassLoader();\n\n        final Class TOKENSTREAM\n            = cl.loadClass(\"org.apache.lucene.analysis.TokenStream\");\n        final Class TOKENIZER\n            = cl.loadClass(\"org.apache.lucene.analysis.Tokenizer\");\n        final Class TOKENFILTER\n            = cl.loadClass(\"org.apache.lucene.analysis.TokenFilter\");\n        final Class TOKENIZERFACTORY\n            = cl.loadClass(\"org.apache.solr.analysis.TokenizerFactory\");\n        final Class TOKENFILTERFACTORY\n            = cl.loadClass(\"org.apache.solr.analysis.TokenFilterFactory\");\n        \n        \n        final HashSet<Class> result\n            = new HashSet<Class>(finder.findExtends(TOKENIZER));\n        result.addAll(finder.findExtends(TOKENFILTER));\n        \n        result.removeAll(finder.findMethodReturns\n                         (finder.findExtends(TOKENIZERFACTORY),\n                          \"create\",\n                          Reader.class).values());\n        result.removeAll(finder.findMethodReturns\n                         (finder.findExtends(TOKENFILTERFACTORY),\n                          \"create\",\n                          TOKENSTREAM).values());\n        \n        for (final Class c : result) {\n            System.out.println(c.getName());\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"526993a97dd5c8baeb16d8277b1f540184326a7c","date":1348621912,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/SuggestMissingFactories#main(String[]).mjava","sourceNew":null,"sourceOld":"    public static void main(String[] args) throws ClassNotFoundException, IOException, NoSuchMethodException {\n\n        final File[] files = new File[args.length];\n        for (int i = 0; i < args.length; i++) {\n            files[i] = new File(args[i]);\n        }\n        final FindClasses finder = new FindClasses(files);\n        final ClassLoader cl = finder.getClassLoader();\n\n        final Class TOKENSTREAM\n            = cl.loadClass(\"org.apache.lucene.analysis.TokenStream\");\n        final Class TOKENIZER\n            = cl.loadClass(\"org.apache.lucene.analysis.Tokenizer\");\n        final Class TOKENFILTER\n            = cl.loadClass(\"org.apache.lucene.analysis.TokenFilter\");\n        final Class TOKENIZERFACTORY\n            = cl.loadClass(\"org.apache.solr.analysis.TokenizerFactory\");\n        final Class TOKENFILTERFACTORY\n            = cl.loadClass(\"org.apache.solr.analysis.TokenFilterFactory\");\n        \n        \n        final HashSet<Class> result\n            = new HashSet<Class>(finder.findExtends(TOKENIZER));\n        result.addAll(finder.findExtends(TOKENFILTER));\n        \n        result.removeAll(finder.findMethodReturns\n                         (finder.findExtends(TOKENIZERFACTORY),\n                          \"create\",\n                          Reader.class).values());\n        result.removeAll(finder.findMethodReturns\n                         (finder.findExtends(TOKENFILTERFACTORY),\n                          \"create\",\n                          TOKENSTREAM).values());\n        \n        for (final Class c : result) {\n            System.out.println(c.getName());\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"526993a97dd5c8baeb16d8277b1f540184326a7c":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["526993a97dd5c8baeb16d8277b1f540184326a7c"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["526993a97dd5c8baeb16d8277b1f540184326a7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"526993a97dd5c8baeb16d8277b1f540184326a7c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}