{"path":"lucene/backwards/src/test/org/apache/lucene/search/BaseTestRangeFilter#pad(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/BaseTestRangeFilter#pad(int).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/BaseTestRangeFilter#pad(int).mjava","sourceNew":"    /**\n     * a simple padding function that should work with any int\n     */\n    public static String pad(int n) {\n        StringBuilder b = new StringBuilder(40);\n        String p = \"0\";\n        if (n < 0) {\n            p = \"-\";\n            n = Integer.MAX_VALUE + n + 1;\n        }\n        b.append(p);\n        String s = Integer.toString(n);\n        for (int i = s.length(); i <= intLength; i++) {\n            b.append(\"0\");\n        }\n        b.append(s);\n        \n        return b.toString();\n    }\n\n","sourceOld":"    /**\n     * a simple padding function that should work with any int\n     */\n    public static String pad(int n) {\n        StringBuilder b = new StringBuilder(40);\n        String p = \"0\";\n        if (n < 0) {\n            p = \"-\";\n            n = Integer.MAX_VALUE + n + 1;\n        }\n        b.append(p);\n        String s = Integer.toString(n);\n        for (int i = s.length(); i <= intLength; i++) {\n            b.append(\"0\");\n        }\n        b.append(s);\n        \n        return b.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/BaseTestRangeFilter#pad(int).mjava","sourceNew":null,"sourceOld":"    /**\n     * a simple padding function that should work with any int\n     */\n    public static String pad(int n) {\n        StringBuilder b = new StringBuilder(40);\n        String p = \"0\";\n        if (n < 0) {\n            p = \"-\";\n            n = Integer.MAX_VALUE + n + 1;\n        }\n        b.append(p);\n        String s = Integer.toString(n);\n        for (int i = s.length(); i <= intLength; i++) {\n            b.append(\"0\");\n        }\n        b.append(s);\n        \n        return b.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}