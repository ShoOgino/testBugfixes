{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#doDistribDeleteById(DeleteUpdateCommand).mjava","commits":[{"id":"9d70e774cb25c8a8d2c3e5e84200f235f9168d87","date":1553016391,"type":0,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#doDistribDeleteById(DeleteUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void doDistribDeleteById(DeleteUpdateCommand cmd) throws IOException {\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getId(), null);\n      // the list<node> will actually have only one element for an add request\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, null, null);\n      }\n\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getId(), null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, null, null);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString()\n              : DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        // TODO: Kept for rolling upgrades only. Remove in Solr 9\n        params.add(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n      cmdDistrib.distribDelete(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88922bf68f0b509aba218f1b9e7ef5981b4d13bc","date":1570820823,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#doDistribDeleteById(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#doDistribDeleteById(DeleteUpdateCommand).mjava","sourceNew":"  @Override\n  protected void doDistribDeleteById(DeleteUpdateCommand cmd) throws IOException {\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = clusterState.getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getId(), null);\n      // the list<node> will actually have only one element for an add request\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, null, null);\n      }\n\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(clusterState, coll, cmd.getId(), null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, null, null);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString()\n              : DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        // TODO: Kept for rolling upgrades only. Remove in Solr 9\n        params.add(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n      cmdDistrib.distribDelete(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doDistribDeleteById(DeleteUpdateCommand cmd) throws IOException {\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getId(), null);\n      // the list<node> will actually have only one element for an add request\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, null, null);\n      }\n\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getId(), null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, null, null);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString()\n              : DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        // TODO: Kept for rolling upgrades only. Remove in Solr 9\n        params.add(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n      cmdDistrib.distribDelete(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#doDistribDeleteById(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#doDistribDeleteById(DeleteUpdateCommand).mjava","sourceNew":"  @Override\n  protected void doDistribDeleteById(DeleteUpdateCommand cmd) throws IOException {\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = clusterState.getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getId(), null);\n      // the list<node> will actually have only one element for an add request\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, null, null);\n      }\n\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(clusterState, coll, cmd.getId(), null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, null, null);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString()\n              : DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        // TODO: Kept for rolling upgrades only. Remove in Solr 9\n        params.add(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n      cmdDistrib.distribDelete(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doDistribDeleteById(DeleteUpdateCommand cmd) throws IOException {\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getId(), null);\n      // the list<node> will actually have only one element for an add request\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, null, null);\n      }\n\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getId(), null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, null, null);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString()\n              : DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        // TODO: Kept for rolling upgrades only. Remove in Solr 9\n        params.add(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n      cmdDistrib.distribDelete(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"88922bf68f0b509aba218f1b9e7ef5981b4d13bc":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88922bf68f0b509aba218f1b9e7ef5981b4d13bc"],"b0b597c65628ca9e73913a07e81691f8229bae35":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87","88922bf68f0b509aba218f1b9e7ef5981b4d13bc"]},"commit2Childs":{"88922bf68f0b509aba218f1b9e7ef5981b4d13bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["88922bf68f0b509aba218f1b9e7ef5981b4d13bc","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}