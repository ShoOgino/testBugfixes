{"path":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#randomAutomaton(Random).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#randomAutomaton(Random).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/AutomatonTestUtil#randomAutomaton(Random).mjava","sourceNew":"  /** return a random NFA/DFA for testing */\n  public static Automaton randomAutomaton(Random random) {\n    // get two random Automata from regexps\n    Automaton a1 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean())\n      a1 = BasicOperations.complement(a1);\n    \n    Automaton a2 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean()) \n      a2 = BasicOperations.complement(a2);\n    \n    // combine them in random ways\n    switch(random.nextInt(4)) {\n      case 0: return BasicOperations.concatenate(a1, a2);\n      case 1: return BasicOperations.union(a1, a2);\n      case 2: return BasicOperations.intersection(a1, a2);\n      default: return BasicOperations.minus(a1, a2);\n    }\n  }\n\n","sourceOld":"  /** return a random NFA/DFA for testing */\n  public static Automaton randomAutomaton(Random random) {\n    // get two random Automata from regexps\n    Automaton a1 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean())\n      a1 = BasicOperations.complement(a1);\n    \n    Automaton a2 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean()) \n      a2 = BasicOperations.complement(a2);\n    \n    // combine them in random ways\n    switch(random.nextInt(4)) {\n      case 0: return BasicOperations.concatenate(a1, a2);\n      case 1: return BasicOperations.union(a1, a2);\n      case 2: return BasicOperations.intersection(a1, a2);\n      default: return BasicOperations.minus(a1, a2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#randomAutomaton(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#randomAutomaton(Random).mjava","sourceNew":"  /** return a random NFA/DFA for testing */\n  public static LightAutomaton randomAutomaton(Random random) {\n    // get two random Automata from regexps\n    LightAutomaton a1 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toLightAutomaton();\n    if (random.nextBoolean()) {\n      a1 = BasicOperations.complementLight(a1);\n    }\n    \n    LightAutomaton a2 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toLightAutomaton();\n    if (random.nextBoolean()) {\n      a2 = BasicOperations.complementLight(a2);\n    }\n\n    // combine them in random ways\n    switch (random.nextInt(4)) {\n      case 0: return BasicOperations.concatenateLight(a1, a2);\n      case 1: return BasicOperations.unionLight(a1, a2);\n      case 2: return BasicOperations.intersectionLight(a1, a2);\n      default: return BasicOperations.minusLight(a1, a2);\n    }\n  }\n\n","sourceOld":"  /** return a random NFA/DFA for testing */\n  public static Automaton randomAutomaton(Random random) {\n    // get two random Automata from regexps\n    Automaton a1 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean())\n      a1 = BasicOperations.complement(a1);\n    \n    Automaton a2 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean()) \n      a2 = BasicOperations.complement(a2);\n    \n    // combine them in random ways\n    switch(random.nextInt(4)) {\n      case 0: return BasicOperations.concatenate(a1, a2);\n      case 1: return BasicOperations.union(a1, a2);\n      case 2: return BasicOperations.intersection(a1, a2);\n      default: return BasicOperations.minus(a1, a2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#randomAutomaton(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#randomAutomaton(Random).mjava","sourceNew":"  /** return a random NFA/DFA for testing */\n  public static Automaton randomAutomaton(Random random) {\n    // get two random Automata from regexps\n    Automaton a1 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean()) {\n      a1 = Operations.complement(a1);\n    }\n    \n    Automaton a2 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean()) {\n      a2 = Operations.complement(a2);\n    }\n\n    // combine them in random ways\n    switch (random.nextInt(4)) {\n      case 0: return Operations.concatenate(a1, a2);\n      case 1: return Operations.union(a1, a2);\n      case 2: return Operations.intersection(a1, a2);\n      default: return Operations.minus(a1, a2);\n    }\n  }\n\n","sourceOld":"  /** return a random NFA/DFA for testing */\n  public static LightAutomaton randomAutomaton(Random random) {\n    // get two random Automata from regexps\n    LightAutomaton a1 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toLightAutomaton();\n    if (random.nextBoolean()) {\n      a1 = BasicOperations.complementLight(a1);\n    }\n    \n    LightAutomaton a2 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toLightAutomaton();\n    if (random.nextBoolean()) {\n      a2 = BasicOperations.complementLight(a2);\n    }\n\n    // combine them in random ways\n    switch (random.nextInt(4)) {\n      case 0: return BasicOperations.concatenateLight(a1, a2);\n      case 1: return BasicOperations.unionLight(a1, a2);\n      case 2: return BasicOperations.intersectionLight(a1, a2);\n      default: return BasicOperations.minusLight(a1, a2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#randomAutomaton(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#randomAutomaton(Random).mjava","sourceNew":"  /** return a random NFA/DFA for testing */\n  public static Automaton randomAutomaton(Random random) {\n    // get two random Automata from regexps\n    Automaton a1 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean()) {\n      a1 = Operations.complement(a1);\n    }\n    \n    Automaton a2 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean()) {\n      a2 = Operations.complement(a2);\n    }\n\n    // combine them in random ways\n    switch (random.nextInt(4)) {\n      case 0: return Operations.concatenate(a1, a2);\n      case 1: return Operations.union(a1, a2);\n      case 2: return Operations.intersection(a1, a2);\n      default: return Operations.minus(a1, a2);\n    }\n  }\n\n","sourceOld":"  /** return a random NFA/DFA for testing */\n  public static Automaton randomAutomaton(Random random) {\n    // get two random Automata from regexps\n    Automaton a1 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean())\n      a1 = BasicOperations.complement(a1);\n    \n    Automaton a2 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean()) \n      a2 = BasicOperations.complement(a2);\n    \n    // combine them in random ways\n    switch(random.nextInt(4)) {\n      case 0: return BasicOperations.concatenate(a1, a2);\n      case 1: return BasicOperations.union(a1, a2);\n      case 2: return BasicOperations.intersection(a1, a2);\n      default: return BasicOperations.minus(a1, a2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#randomAutomaton(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#randomAutomaton(Random).mjava","sourceNew":"  /** return a random NFA/DFA for testing */\n  public static Automaton randomAutomaton(Random random) {\n    // get two random Automata from regexps\n    Automaton a1 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean()) {\n      a1 = Operations.complement(a1, DEFAULT_MAX_DETERMINIZED_STATES);\n    }\n    \n    Automaton a2 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean()) {\n      a2 = Operations.complement(a2, DEFAULT_MAX_DETERMINIZED_STATES);\n    }\n\n    // combine them in random ways\n    switch (random.nextInt(4)) {\n      case 0: return Operations.concatenate(a1, a2);\n      case 1: return Operations.union(a1, a2);\n      case 2: return Operations.intersection(a1, a2);\n      default: return Operations.minus(a1, a2, DEFAULT_MAX_DETERMINIZED_STATES);\n    }\n  }\n\n","sourceOld":"  /** return a random NFA/DFA for testing */\n  public static Automaton randomAutomaton(Random random) {\n    // get two random Automata from regexps\n    Automaton a1 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean()) {\n      a1 = Operations.complement(a1);\n    }\n    \n    Automaton a2 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean()) {\n      a2 = Operations.complement(a2);\n    }\n\n    // combine them in random ways\n    switch (random.nextInt(4)) {\n      case 0: return Operations.concatenate(a1, a2);\n      case 1: return Operations.union(a1, a2);\n      case 2: return Operations.intersection(a1, a2);\n      default: return Operations.minus(a1, a2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00016f314ffb9f72554cae447ed0bdc3711397e8","date":1441099964,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#randomAutomaton(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#randomAutomaton(Random).mjava","sourceNew":"  /** return a random NFA/DFA for testing */\n  public static Automaton randomAutomaton(Random random) {\n    // get two random Automata from regexps\n    Automaton a1 = randomSingleAutomaton(random);\n    Automaton a2 = randomSingleAutomaton(random);\n\n    // combine them in random ways\n    switch (random.nextInt(4)) {\n      case 0: return Operations.concatenate(a1, a2);\n      case 1: return Operations.union(a1, a2);\n      case 2: return Operations.intersection(a1, a2);\n      default: return Operations.minus(a1, a2, DEFAULT_MAX_DETERMINIZED_STATES);\n    }\n  }\n\n","sourceOld":"  /** return a random NFA/DFA for testing */\n  public static Automaton randomAutomaton(Random random) {\n    // get two random Automata from regexps\n    Automaton a1 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean()) {\n      a1 = Operations.complement(a1, DEFAULT_MAX_DETERMINIZED_STATES);\n    }\n    \n    Automaton a2 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean()) {\n      a2 = Operations.complement(a2, DEFAULT_MAX_DETERMINIZED_STATES);\n    }\n\n    // combine them in random ways\n    switch (random.nextInt(4)) {\n      case 0: return Operations.concatenate(a1, a2);\n      case 1: return Operations.union(a1, a2);\n      case 2: return Operations.intersection(a1, a2);\n      default: return Operations.minus(a1, a2, DEFAULT_MAX_DETERMINIZED_STATES);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"00016f314ffb9f72554cae447ed0bdc3711397e8":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["00016f314ffb9f72554cae447ed0bdc3711397e8"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"00016f314ffb9f72554cae447ed0bdc3711397e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["00016f314ffb9f72554cae447ed0bdc3711397e8"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}