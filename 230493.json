{"path":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],TextField.TYPE_UNSTORED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],TextField.TYPE_UNSTORED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],TextField.TYPE_UNSTORED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],TextField.TYPE_UNSTORED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],TextField.TYPE_UNSTORED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],TextField.TYPE_UNSTORED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(field, docs[i], Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(field,docs[i],TextField.TYPE_UNSTORED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(field, docs[i], Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(field, docs[i], Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(field, docs[i], Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(field, docs[i], Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(field, docs[i], Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    iw.shutdown();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(field, docs[i], Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and vice-versa.\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(field, docs[i], Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    iw.shutdown();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(field, docs[i], Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    iw.shutdown();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and vice-versa.\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(field, docs[i], Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    iw.shutdown();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(field, docs[i], Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    iw.shutdown();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and vice-versa.\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(field, docs[i], Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    iw.shutdown();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and vice-versa.\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(field, docs[i], Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    iw.shutdown();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and vice-versa.\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(field, docs[i], Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and vice-versa.\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(field, docs[i], Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    iw.shutdown();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and vice-versa.\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(field, docs[i], Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and vice-versa.\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n\n    // queries that should find all docs\n    Query matchAll[] = {\n        new WildcardQuery(new Term(field, \"*\")),\n        new WildcardQuery(new Term(field, \"*1\")),\n        new WildcardQuery(new Term(field, \"**1\")),\n        new WildcardQuery(new Term(field, \"*?\")),\n        new WildcardQuery(new Term(field, \"*?1\")),\n        new WildcardQuery(new Term(field, \"?*1\")),\n        new WildcardQuery(new Term(field, \"**\")),\n        new WildcardQuery(new Term(field, \"***\")),\n        new WildcardQuery(new Term(field, \"\\\\\\\\*\"))\n    };\n\n    // queries that should find no docs\n    Query matchNone[] = {\n        new WildcardQuery(new Term(field, \"a*h\")),\n        new WildcardQuery(new Term(field, \"a?h\")),\n        new WildcardQuery(new Term(field, \"*a*h\")),\n        new WildcardQuery(new Term(field, \"?a\")),\n        new WildcardQuery(new Term(field, \"a?\"))\n    };\n\n    PrefixQuery matchOneDocPrefix[][] = {\n        {new PrefixQuery(new Term(field, \"a\")),\n         new PrefixQuery(new Term(field, \"ab\")),\n         new PrefixQuery(new Term(field, \"abc\"))}, // these should find only doc 0\n\n        {new PrefixQuery(new Term(field, \"h\")),\n         new PrefixQuery(new Term(field, \"hi\")),\n         new PrefixQuery(new Term(field, \"hij\")),\n         new PrefixQuery(new Term(field, \"\\\\7\"))}, // these should find only doc 1\n\n        {new PrefixQuery(new Term(field, \"o\")),\n         new PrefixQuery(new Term(field, \"op\")),\n         new PrefixQuery(new Term(field, \"opq\")),\n         new PrefixQuery(new Term(field, \"\\\\\\\\\"))}, // these should find only doc 2\n    };\n\n    WildcardQuery matchOneDocWild[][] = {\n\n        {new WildcardQuery(new Term(field, \"*a*\")), // these should find only doc 0\n            new WildcardQuery(new Term(field, \"*ab*\")),\n            new WildcardQuery(new Term(field, \"*abc**\")),\n            new WildcardQuery(new Term(field, \"ab*e*\")),\n            new WildcardQuery(new Term(field, \"*g?\")),\n            new WildcardQuery(new Term(field, \"*f?1\"))},\n\n        {new WildcardQuery(new Term(field, \"*h*\")), // these should find only doc 1\n            new WildcardQuery(new Term(field, \"*hi*\")),\n            new WildcardQuery(new Term(field, \"*hij**\")),\n            new WildcardQuery(new Term(field, \"hi*k*\")),\n            new WildcardQuery(new Term(field, \"*n?\")),\n            new WildcardQuery(new Term(field, \"*m?1\")),\n            new WildcardQuery(new Term(field, \"hij**\"))},\n\n        {new WildcardQuery(new Term(field, \"*o*\")), // these should find only doc 2\n            new WildcardQuery(new Term(field, \"*op*\")),\n            new WildcardQuery(new Term(field, \"*opq**\")),\n            new WildcardQuery(new Term(field, \"op*q*\")),\n            new WildcardQuery(new Term(field, \"*u?\")),\n            new WildcardQuery(new Term(field, \"*t?1\")),\n            new WildcardQuery(new Term(field, \"opq**\"))}\n    };\n\n    // prepare the index\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(field, docs[i], Field.Store.NO));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // test queries that must find all\n    for (Query q : matchAll) {\n      if (VERBOSE) System.out.println(\"matchAll: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length, hits.length);\n    }\n    \n    // test queries that must find none\n    for (Query q : matchNone) {\n      if (VERBOSE) System.out.println(\"matchNone: q=\" + q + \" \" + q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n    }\n\n    // thest the prefi queries find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        Query q = matchOneDocPrefix[i][j];\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test the wildcard queries find only one doc\n    for (int i = 0; i < matchOneDocWild.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        Query q = matchOneDocWild[i][j];\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" q=\"+q+\" \"+q.getClass().getName());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["5c84485629d80d203608e8975a1139de9933cc38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"5c84485629d80d203608e8975a1139de9933cc38":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["5c84485629d80d203608e8975a1139de9933cc38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}