{"path":"src/test-deprecated/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","commits":[{"id":"5b5461affe637a07375542c763a4805300802be8","date":1102270918,"type":0,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test-deprecated/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"/dev/null","sourceNew":"    public void testDocCount()\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        try {\n            writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n            // add 100 documents\n            for (i = 0; i < 100; i++) {\n                addDoc(writer);\n            }\n            assertEquals(100, writer.docCount());\n            writer.close();\n\n            // delete 40 documents\n            reader = IndexReader.open(dir);\n            for (i = 0; i < 40; i++) {\n                reader.delete(i);\n            }\n            reader.close();\n\n            // test doc count before segments are merged/index is optimized\n            writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n            assertEquals(100, writer.docCount());\n            writer.close();\n\n            reader = IndexReader.open(dir);\n            assertEquals(100, reader.maxDoc());\n            assertEquals(60, reader.numDocs());\n            reader.close();\n\n            // optimize the index and check that the new doc count is correct\n            writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n            writer.optimize();\n            assertEquals(60, writer.docCount());\n            writer.close();\n\n            // check that the index reader gives the same numbers.\n            reader = IndexReader.open(dir);\n            assertEquals(60, reader.maxDoc());\n            assertEquals(60, reader.numDocs());\n            reader.close();\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test-deprecated/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":null,"sourceOld":"    public void testDocCount()\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        try {\n            writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n            // add 100 documents\n            for (i = 0; i < 100; i++) {\n                addDoc(writer);\n            }\n            assertEquals(100, writer.docCount());\n            writer.close();\n\n            // delete 40 documents\n            reader = IndexReader.open(dir);\n            for (i = 0; i < 40; i++) {\n                reader.delete(i);\n            }\n            reader.close();\n\n            // test doc count before segments are merged/index is optimized\n            writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n            assertEquals(100, writer.docCount());\n            writer.close();\n\n            reader = IndexReader.open(dir);\n            assertEquals(100, reader.maxDoc());\n            assertEquals(60, reader.numDocs());\n            reader.close();\n\n            // optimize the index and check that the new doc count is correct\n            writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n            writer.optimize();\n            assertEquals(60, writer.docCount());\n            writer.close();\n\n            // check that the index reader gives the same numbers.\n            reader = IndexReader.open(dir);\n            assertEquals(60, reader.maxDoc());\n            assertEquals(60, reader.numDocs());\n            reader.close();\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b5461affe637a07375542c763a4805300802be8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["5b5461affe637a07375542c763a4805300802be8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"5b5461affe637a07375542c763a4805300802be8":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b5461affe637a07375542c763a4805300802be8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}