{"path":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyQueryDeletes(Iterable[QueryAndLimit],SegmentState).mjava","commits":[{"id":"7e4c214a1f904dde76f5611b56d4081533055b3b","date":1421938451,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyQueryDeletes(Iterable[QueryAndLimit],SegmentState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyQueryDeletes(Iterable[QueryAndLimit],ReadersAndUpdates,SegmentReader).mjava","sourceNew":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, SegmentState segState) throws IOException {\n    long delCount = 0;\n    final LeafReaderContext readerContext = segState.reader.getContext();\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final DocIdSet docs = new QueryWrapperFilter(query).getDocIdSet(readerContext, segState.reader.getLiveDocs());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          while (true)  {\n            int doc = it.nextDoc();\n            if (doc >= limit) {\n              break;\n            }\n\n            if (!segState.any) {\n              segState.rld.initWritableLiveDocs();\n              segState.any = true;\n            }\n            if (segState.rld.delete(doc)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","sourceOld":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, ReadersAndUpdates rld, final SegmentReader reader) throws IOException {\n    long delCount = 0;\n    final LeafReaderContext readerContext = reader.getContext();\n    boolean any = false;\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final DocIdSet docs = new QueryWrapperFilter(query).getDocIdSet(readerContext, reader.getLiveDocs());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          while(true)  {\n            int doc = it.nextDoc();\n            if (doc >= limit) {\n              break;\n            }\n\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n\n            if (rld.delete(doc)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cca04944b950dcad5598e4d203d89a03c84552a8","date":1437984674,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyQueryDeletes(Iterable[QueryAndLimit],SegmentState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyQueryDeletes(Iterable[QueryAndLimit],SegmentState).mjava","sourceNew":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, SegmentState segState) throws IOException {\n    long delCount = 0;\n    final LeafReaderContext readerContext = segState.reader.getContext();\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final IndexSearcher searcher = new IndexSearcher(readerContext.reader());\n      searcher.setQueryCache(null);\n      final Weight weight = searcher.createNormalizedWeight(query, false);\n      final DocIdSetIterator it = weight.scorer(readerContext);\n      if (it != null) {\n        final Bits liveDocs = readerContext.reader().getLiveDocs();\n        while (true)  {\n          int doc = it.nextDoc();\n          if (doc >= limit) {\n            break;\n          }\n          if (liveDocs != null && liveDocs.get(doc) == false) {\n            continue;\n          }\n\n          if (!segState.any) {\n            segState.rld.initWritableLiveDocs();\n            segState.any = true;\n          }\n          if (segState.rld.delete(doc)) {\n            delCount++;\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","sourceOld":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, SegmentState segState) throws IOException {\n    long delCount = 0;\n    final LeafReaderContext readerContext = segState.reader.getContext();\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final DocIdSet docs = new QueryWrapperFilter(query).getDocIdSet(readerContext, segState.reader.getLiveDocs());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          while (true)  {\n            int doc = it.nextDoc();\n            if (doc >= limit) {\n              break;\n            }\n\n            if (!segState.any) {\n              segState.rld.initWritableLiveDocs();\n              segState.any = true;\n            }\n            if (segState.rld.delete(doc)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyQueryDeletes(Iterable[QueryAndLimit],SegmentState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyQueryDeletes(Iterable[QueryAndLimit],SegmentState).mjava","sourceNew":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, SegmentState segState) throws IOException {\n    long delCount = 0;\n    final LeafReaderContext readerContext = segState.reader.getContext();\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final IndexSearcher searcher = new IndexSearcher(readerContext.reader());\n      searcher.setQueryCache(null);\n      final Weight weight = searcher.createNormalizedWeight(query, false);\n      final Scorer scorer = weight.scorer(readerContext);\n      if (scorer != null) {\n        final DocIdSetIterator it = scorer.iterator();\n        final Bits liveDocs = readerContext.reader().getLiveDocs();\n        while (true)  {\n          int doc = it.nextDoc();\n          if (doc >= limit) {\n            break;\n          }\n          if (liveDocs != null && liveDocs.get(doc) == false) {\n            continue;\n          }\n\n          if (!segState.any) {\n            segState.rld.initWritableLiveDocs();\n            segState.any = true;\n          }\n          if (segState.rld.delete(doc)) {\n            delCount++;\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","sourceOld":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, SegmentState segState) throws IOException {\n    long delCount = 0;\n    final LeafReaderContext readerContext = segState.reader.getContext();\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final IndexSearcher searcher = new IndexSearcher(readerContext.reader());\n      searcher.setQueryCache(null);\n      final Weight weight = searcher.createNormalizedWeight(query, false);\n      final DocIdSetIterator it = weight.scorer(readerContext);\n      if (it != null) {\n        final Bits liveDocs = readerContext.reader().getLiveDocs();\n        while (true)  {\n          int doc = it.nextDoc();\n          if (doc >= limit) {\n            break;\n          }\n          if (liveDocs != null && liveDocs.get(doc) == false) {\n            continue;\n          }\n\n          if (!segState.any) {\n            segState.rld.initWritableLiveDocs();\n            segState.any = true;\n          }\n          if (segState.rld.delete(doc)) {\n            delCount++;\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyQueryDeletes(Iterable[QueryAndLimit],SegmentState).mjava","sourceNew":null,"sourceOld":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, SegmentState segState) throws IOException {\n    long delCount = 0;\n    final LeafReaderContext readerContext = segState.reader.getContext();\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final IndexSearcher searcher = new IndexSearcher(readerContext.reader());\n      searcher.setQueryCache(null);\n      final Weight weight = searcher.createNormalizedWeight(query, false);\n      final Scorer scorer = weight.scorer(readerContext);\n      if (scorer != null) {\n        final DocIdSetIterator it = scorer.iterator();\n        final Bits liveDocs = readerContext.reader().getLiveDocs();\n        while (true)  {\n          int doc = it.nextDoc();\n          if (doc >= limit) {\n            break;\n          }\n          if (liveDocs != null && liveDocs.get(doc) == false) {\n            continue;\n          }\n\n          if (!segState.any) {\n            segState.rld.initWritableLiveDocs();\n            segState.any = true;\n          }\n          if (segState.rld.delete(doc)) {\n            delCount++;\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyQueryDeletes(Iterable[QueryAndLimit],SegmentState).mjava","sourceNew":null,"sourceOld":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, SegmentState segState) throws IOException {\n    long delCount = 0;\n    final LeafReaderContext readerContext = segState.reader.getContext();\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final IndexSearcher searcher = new IndexSearcher(readerContext.reader());\n      searcher.setQueryCache(null);\n      final Weight weight = searcher.createNormalizedWeight(query, false);\n      final Scorer scorer = weight.scorer(readerContext);\n      if (scorer != null) {\n        final DocIdSetIterator it = scorer.iterator();\n        final Bits liveDocs = readerContext.reader().getLiveDocs();\n        while (true)  {\n          int doc = it.nextDoc();\n          if (doc >= limit) {\n            break;\n          }\n          if (liveDocs != null && liveDocs.get(doc) == false) {\n            continue;\n          }\n\n          if (!segState.any) {\n            segState.rld.initWritableLiveDocs();\n            segState.any = true;\n          }\n          if (segState.rld.delete(doc)) {\n            delCount++;\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyQueryDeletes(Iterable[QueryAndLimit],SegmentState).mjava","sourceNew":null,"sourceOld":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, SegmentState segState) throws IOException {\n    long delCount = 0;\n    final LeafReaderContext readerContext = segState.reader.getContext();\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final IndexSearcher searcher = new IndexSearcher(readerContext.reader());\n      searcher.setQueryCache(null);\n      final Weight weight = searcher.createNormalizedWeight(query, false);\n      final Scorer scorer = weight.scorer(readerContext);\n      if (scorer != null) {\n        final DocIdSetIterator it = scorer.iterator();\n        final Bits liveDocs = readerContext.reader().getLiveDocs();\n        while (true)  {\n          int doc = it.nextDoc();\n          if (doc >= limit) {\n            break;\n          }\n          if (liveDocs != null && liveDocs.get(doc) == false) {\n            continue;\n          }\n\n          if (!segState.any) {\n            segState.rld.initWritableLiveDocs();\n            segState.any = true;\n          }\n          if (segState.rld.delete(doc)) {\n            delCount++;\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cca04944b950dcad5598e4d203d89a03c84552a8":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7e4c214a1f904dde76f5611b56d4081533055b3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cca04944b950dcad5598e4d203d89a03c84552a8"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["7dd748bb245633a8195281556bb0e68a6ea97d18","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["7dd748bb245633a8195281556bb0e68a6ea97d18","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"cca04944b950dcad5598e4d203d89a03c84552a8":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"7e4c214a1f904dde76f5611b56d4081533055b3b":["cca04944b950dcad5598e4d203d89a03c84552a8"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}