{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#read().mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ReducerStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n\n    List<Map> maps = new ArrayList();\n    while(true) {\n      Tuple t = tupleStream.read();\n\n      if(t.EOF) {\n       if(maps.size() > 0) {\n         tupleStream.pushBack(t);\n         Map map1 = maps.get(0);\n         Map map2 = new HashMap();\n         map2.putAll(map1);\n         Tuple groupHead = new Tuple(map2);\n         groupHead.setMaps(maps);\n         return groupHead;\n       } else {\n         return t;\n       }\n      }\n\n      if(currentGroupHead == null) {\n        currentGroupHead = t;\n        maps.add(t.getMap());\n      } else {\n        if(comp.compare(currentGroupHead, t) == 0) {\n          maps.add(t.getMap());\n        } else {\n          Tuple groupHead = currentGroupHead.clone();\n          tupleStream.pushBack(t);\n          currentGroupHead = null;\n          groupHead.setMaps(maps);\n          return groupHead;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n\n    List<Map> maps = new ArrayList();\n    while(true) {\n      Tuple t = tupleStream.read();\n\n      if(t.EOF) {\n       if(maps.size() > 0) {\n         tupleStream.pushBack(t);\n         Map map1 = maps.get(0);\n         Map map2 = new HashMap();\n         map2.putAll(map1);\n         Tuple groupHead = new Tuple(map2);\n         groupHead.setMaps(maps);\n         return groupHead;\n       } else {\n         return t;\n       }\n      }\n\n      if(currentGroupHead == null) {\n        currentGroupHead = t;\n        maps.add(t.getMap());\n      } else {\n        if(comp.compare(currentGroupHead, t) == 0) {\n          maps.add(t.getMap());\n        } else {\n          Tuple groupHead = currentGroupHead.clone();\n          tupleStream.pushBack(t);\n          currentGroupHead = null;\n          groupHead.setMaps(maps);\n          return groupHead;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0891a6931fc352fc7e61f2752ef9add758d3fb89","date":1435151229,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n\n    List<Map> maps = new ArrayList();\n    while(true) {\n      Tuple t = stream.read();\n\n      if(t.EOF) {\n       if(maps.size() > 0) {\n         stream.pushBack(t);\n         Map map1 = maps.get(0);\n         Map map2 = new HashMap();\n         map2.putAll(map1);\n         Tuple groupHead = new Tuple(map2);\n         groupHead.setMaps(maps);\n         return groupHead;\n       } else {\n         return t;\n       }\n      }\n\n      if(currentGroupHead == null) {\n        currentGroupHead = t;\n        maps.add(t.getMap());\n      } else {\n        if(comp.compare(currentGroupHead, t) == 0) {\n          maps.add(t.getMap());\n        } else {\n          Tuple groupHead = currentGroupHead.clone();\n          stream.pushBack(t);\n          currentGroupHead = null;\n          groupHead.setMaps(maps);\n          return groupHead;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n\n    List<Map> maps = new ArrayList();\n    while(true) {\n      Tuple t = tupleStream.read();\n\n      if(t.EOF) {\n       if(maps.size() > 0) {\n         tupleStream.pushBack(t);\n         Map map1 = maps.get(0);\n         Map map2 = new HashMap();\n         map2.putAll(map1);\n         Tuple groupHead = new Tuple(map2);\n         groupHead.setMaps(maps);\n         return groupHead;\n       } else {\n         return t;\n       }\n      }\n\n      if(currentGroupHead == null) {\n        currentGroupHead = t;\n        maps.add(t.getMap());\n      } else {\n        if(comp.compare(currentGroupHead, t) == 0) {\n          maps.add(t.getMap());\n        } else {\n          Tuple groupHead = currentGroupHead.clone();\n          tupleStream.pushBack(t);\n          currentGroupHead = null;\n          groupHead.setMaps(maps);\n          return groupHead;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1833f6d07cc5000544dfe89f26c81e2eb8afb4c","date":1446951913,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n\n    List<Map> maps = new ArrayList();\n    while(true) {\n      Tuple t = stream.read();\n\n      if(t.EOF) {\n       if(maps.size() > 0) {\n         stream.pushBack(t);\n         Map map1 = maps.get(0);\n         Map map2 = new HashMap();\n         map2.putAll(map1);\n         Tuple groupHead = new Tuple(map2);\n         groupHead.setMaps(maps);\n         return groupHead;\n       } else {\n         return t;\n       }\n      }\n\n      if(currentGroupHead == null) {\n        currentGroupHead = t;\n        maps.add(t.getMap());\n      } else {\n        if(eq.test(currentGroupHead, t)) {\n          maps.add(t.getMap());\n        } else {\n          Tuple groupHead = currentGroupHead.clone();\n          stream.pushBack(t);\n          currentGroupHead = null;\n          groupHead.setMaps(maps);\n          return groupHead;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n\n    List<Map> maps = new ArrayList();\n    while(true) {\n      Tuple t = stream.read();\n\n      if(t.EOF) {\n       if(maps.size() > 0) {\n         stream.pushBack(t);\n         Map map1 = maps.get(0);\n         Map map2 = new HashMap();\n         map2.putAll(map1);\n         Tuple groupHead = new Tuple(map2);\n         groupHead.setMaps(maps);\n         return groupHead;\n       } else {\n         return t;\n       }\n      }\n\n      if(currentGroupHead == null) {\n        currentGroupHead = t;\n        maps.add(t.getMap());\n      } else {\n        if(comp.compare(currentGroupHead, t) == 0) {\n          maps.add(t.getMap());\n        } else {\n          Tuple groupHead = currentGroupHead.clone();\n          stream.pushBack(t);\n          currentGroupHead = null;\n          groupHead.setMaps(maps);\n          return groupHead;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7","date":1449800905,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n\n    while(true) {\n      Tuple t = stream.read();\n\n      if(t.EOF) {\n       if(needsReduce) {\n         stream.pushBack(t);\n         needsReduce = false;\n         return op.reduce();\n       } else {\n         return t;\n       }\n      }\n\n      if(currentGroupHead == null) {\n        currentGroupHead = t;\n        op.operate(t);\n        needsReduce = true;\n      } else {\n        if(eq.test(currentGroupHead, t)) {\n          op.operate(t);\n          needsReduce = true;\n        } else {\n          stream.pushBack(t);\n          currentGroupHead = null;\n          needsReduce = false;\n          return op.reduce();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n\n    List<Map> maps = new ArrayList();\n    while(true) {\n      Tuple t = stream.read();\n\n      if(t.EOF) {\n       if(maps.size() > 0) {\n         stream.pushBack(t);\n         Map map1 = maps.get(0);\n         Map map2 = new HashMap();\n         map2.putAll(map1);\n         Tuple groupHead = new Tuple(map2);\n         groupHead.setMaps(maps);\n         return groupHead;\n       } else {\n         return t;\n       }\n      }\n\n      if(currentGroupHead == null) {\n        currentGroupHead = t;\n        maps.add(t.getMap());\n      } else {\n        if(eq.test(currentGroupHead, t)) {\n          maps.add(t.getMap());\n        } else {\n          Tuple groupHead = currentGroupHead.clone();\n          stream.pushBack(t);\n          currentGroupHead = null;\n          groupHead.setMaps(maps);\n          return groupHead;\n        }\n      }\n    }\n  }\n\n","bugFix":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1833f6d07cc5000544dfe89f26c81e2eb8afb4c":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["c1833f6d07cc5000544dfe89f26c81e2eb8afb4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"c1833f6d07cc5000544dfe89f26c81e2eb8afb4c":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["c1833f6d07cc5000544dfe89f26c81e2eb8afb4c"],"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}