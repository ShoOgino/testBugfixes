{"path":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testValidation().mjava","commits":[{"id":"e6f2000c32e050b40aa63fb677b9d8b41744f2ee","date":1407253160,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testValidation().mjava","pathOld":"/dev/null","sourceNew":"  public void testValidation() {\n    try {\n      new FuzzyQuery(new Term(\"field\", \"foo\"), -1, 0, 1, false);\n      fail(\"Expected error for illegal max edits value\");\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"maxEdits\"));\n    }\n\n    try {\n      new FuzzyQuery(new Term(\"field\", \"foo\"), LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE + 1, 0, 1, false);\n      fail(\"Expected error for illegal max edits value\");\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"maxEdits must be between\"));\n    }\n\n    try {\n      new FuzzyQuery(new Term(\"field\", \"foo\"), 1, -1, 1, false);\n      fail(\"Expected error for illegal prefix length value\");\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"prefixLength cannot be negative\"));\n    }\n\n    try {\n      new FuzzyQuery(new Term(\"field\", \"foo\"), 1, 0, -1, false);\n      fail(\"Expected error for illegal max expansions value\");\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"maxExpansions must be positive\"));\n    }\n\n    try {\n      new FuzzyQuery(new Term(\"field\", \"foo\"), 1, 0, -1, false);\n      fail(\"Expected error for illegal max expansions value\");\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"maxExpansions must be positive\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testValidation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testValidation().mjava","sourceNew":"  public void testValidation() {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      new FuzzyQuery(new Term(\"field\", \"foo\"), -1, 0, 1, false);\n    });\n    assertTrue(expected.getMessage().contains(\"maxEdits\"));\n\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      new FuzzyQuery(new Term(\"field\", \"foo\"), LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE + 1, 0, 1, false);\n    });\n    assertTrue(expected.getMessage().contains(\"maxEdits must be between\"));\n\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      new FuzzyQuery(new Term(\"field\", \"foo\"), 1, -1, 1, false);\n    });\n    assertTrue(expected.getMessage().contains(\"prefixLength cannot be negative\"));\n\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      new FuzzyQuery(new Term(\"field\", \"foo\"), 1, 0, -1, false);\n    });\n    assertTrue(expected.getMessage().contains(\"maxExpansions must be positive\"));\n\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      new FuzzyQuery(new Term(\"field\", \"foo\"), 1, 0, -1, false);\n    });\n    assertTrue(expected.getMessage().contains(\"maxExpansions must be positive\"));\n  }\n\n","sourceOld":"  public void testValidation() {\n    try {\n      new FuzzyQuery(new Term(\"field\", \"foo\"), -1, 0, 1, false);\n      fail(\"Expected error for illegal max edits value\");\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"maxEdits\"));\n    }\n\n    try {\n      new FuzzyQuery(new Term(\"field\", \"foo\"), LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE + 1, 0, 1, false);\n      fail(\"Expected error for illegal max edits value\");\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"maxEdits must be between\"));\n    }\n\n    try {\n      new FuzzyQuery(new Term(\"field\", \"foo\"), 1, -1, 1, false);\n      fail(\"Expected error for illegal prefix length value\");\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"prefixLength cannot be negative\"));\n    }\n\n    try {\n      new FuzzyQuery(new Term(\"field\", \"foo\"), 1, 0, -1, false);\n      fail(\"Expected error for illegal max expansions value\");\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"maxExpansions must be positive\"));\n    }\n\n    try {\n      new FuzzyQuery(new Term(\"field\", \"foo\"), 1, 0, -1, false);\n      fail(\"Expected error for illegal max expansions value\");\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"maxExpansions must be positive\"));\n    }\n  }\n\n","bugFix":["e6f2000c32e050b40aa63fb677b9d8b41744f2ee"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["e6f2000c32e050b40aa63fb677b9d8b41744f2ee"],"e6f2000c32e050b40aa63fb677b9d8b41744f2ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6f2000c32e050b40aa63fb677b9d8b41744f2ee"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6f2000c32e050b40aa63fb677b9d8b41744f2ee":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}