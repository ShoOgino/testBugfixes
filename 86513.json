{"path":"contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeFilter#testRandomTrieAndClassicRangeQuery(int).mjava","commits":[{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":2,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeFilter#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRandomTrieAndClassicRangeQuery(TrieUtils).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\r\n    final Random rnd=newRandom();\r\n    String field=\"field\"+precisionStep;\r\n    // 50 random tests, the tests may also return 0 results, if min>max, but this is ok\r\n    for (int i=0; i<50; i++) {\r\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\r\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\r\n      // test inclusive range\r\n      Query tq=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), true, true).asQuery();\r\n      RangeQuery cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), true, true);\r\n      cq.setConstantScoreRewrite(true);\r\n      TopDocs tTopDocs = searcher.search(tq, 1);\r\n      TopDocs cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      // test exclusive range\r\n      tq=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), false, false).asQuery();\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), false, false);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tq, 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      // test left exclusive range\r\n      tq=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), false, true).asQuery();\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), false, true);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tq, 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      // test right exclusive range\r\n      tq=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), true, false).asQuery();\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), true, false);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tq, 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n    }\r\n  }\r\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(final TrieUtils variant) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+variant.TRIE_BITS;\n    // 50 random tests, the tests may also return 0 results, if min>max, but this is ok\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L*distance);\n      long upper=(long)(rnd.nextDouble()*10000L*distance);\n      // test inclusive range\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      RangeQuery cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), true, true);\n      cq.setConstantScoreRewrite(true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n      // test exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, false, variant);\n      cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), false, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n      // test left exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, true, variant);\n      cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), false, true);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n      // test right exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, false, variant);\n      cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), true, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1","date":1239104855,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeFilter#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeFilter#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\r\n    final Random rnd=newRandom();\r\n    String field=\"field\"+precisionStep;\r\n    int termCount=0;\r\n    for (int i=0; i<50; i++) {\r\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\r\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\r\n      if (lower>upper) {\r\n        int a=lower; lower=upper; upper=a;\r\n      }\r\n      // test inclusive range\r\n      IntTrieRangeFilter tf=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), true, true);\r\n      RangeQuery cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), true, true);\r\n      cq.setConstantScoreRewrite(true);\r\n      TopDocs tTopDocs = searcher.search(tf.asQuery(), 1);\r\n      TopDocs cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      termCount += tf.getLastNumberOfTerms();\r\n      // test exclusive range\r\n      tf=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), false, false);\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), false, false);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tf.asQuery(), 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      termCount += tf.getLastNumberOfTerms();\r\n      // test left exclusive range\r\n      tf=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), false, true);\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), false, true);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tf.asQuery(), 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      termCount += tf.getLastNumberOfTerms();\r\n      // test right exclusive range\r\n      tf=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), true, false);\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), true, false);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tf.asQuery(), 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      termCount += tf.getLastNumberOfTerms();\r\n    }\r\n    System.out.println(\"Average number of terms during random search: \" + (((double)termCount)/(50*4)));\r\n  }\r\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\r\n    final Random rnd=newRandom();\r\n    String field=\"field\"+precisionStep;\r\n    // 50 random tests, the tests may also return 0 results, if min>max, but this is ok\r\n    for (int i=0; i<50; i++) {\r\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\r\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\r\n      // test inclusive range\r\n      Query tq=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), true, true).asQuery();\r\n      RangeQuery cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), true, true);\r\n      cq.setConstantScoreRewrite(true);\r\n      TopDocs tTopDocs = searcher.search(tq, 1);\r\n      TopDocs cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      // test exclusive range\r\n      tq=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), false, false).asQuery();\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), false, false);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tq, 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      // test left exclusive range\r\n      tq=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), false, true).asQuery();\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), false, true);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tq, 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      // test right exclusive range\r\n      tq=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), true, false).asQuery();\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), true, false);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tq, 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b388b60a23f200d8bbef85324a3ce48e475f8651","date":1239305502,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeFilter#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeFilter#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\r\n    final Random rnd=newRandom();\r\n    String field=\"field\"+precisionStep;\r\n    int termCount=0;\r\n    for (int i=0; i<50; i++) {\r\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\r\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\r\n      if (lower>upper) {\r\n        int a=lower; lower=upper; upper=a;\r\n      }\r\n      // test inclusive range\r\n      IntTrieRangeFilter tf=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), true, true);\r\n      RangeQuery cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), true, true);\r\n      cq.setConstantScoreRewrite(true);\r\n      TopDocs tTopDocs = searcher.search(tf.asQuery(), 1);\r\n      TopDocs cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      termCount += tf.getLastNumberOfTerms();\r\n      // test exclusive range\r\n      tf=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), false, false);\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), false, false);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tf.asQuery(), 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      termCount += tf.getLastNumberOfTerms();\r\n      // test left exclusive range\r\n      tf=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), false, true);\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), false, true);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tf.asQuery(), 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      termCount += tf.getLastNumberOfTerms();\r\n      // test right exclusive range\r\n      tf=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), true, false);\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), true, false);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tf.asQuery(), 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      termCount += tf.getLastNumberOfTerms();\r\n    }\r\n    System.out.println(\"Average number of terms during random search on '\" + field + \"': \" + (((double)termCount)/(50*4)));\r\n  }\r\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\r\n    final Random rnd=newRandom();\r\n    String field=\"field\"+precisionStep;\r\n    int termCount=0;\r\n    for (int i=0; i<50; i++) {\r\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\r\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\r\n      if (lower>upper) {\r\n        int a=lower; lower=upper; upper=a;\r\n      }\r\n      // test inclusive range\r\n      IntTrieRangeFilter tf=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), true, true);\r\n      RangeQuery cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), true, true);\r\n      cq.setConstantScoreRewrite(true);\r\n      TopDocs tTopDocs = searcher.search(tf.asQuery(), 1);\r\n      TopDocs cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      termCount += tf.getLastNumberOfTerms();\r\n      // test exclusive range\r\n      tf=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), false, false);\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), false, false);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tf.asQuery(), 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      termCount += tf.getLastNumberOfTerms();\r\n      // test left exclusive range\r\n      tf=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), false, true);\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), false, true);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tf.asQuery(), 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      termCount += tf.getLastNumberOfTerms();\r\n      // test right exclusive range\r\n      tf=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), true, false);\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), true, false);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tf.asQuery(), 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      termCount += tf.getLastNumberOfTerms();\r\n    }\r\n    System.out.println(\"Average number of terms during random search: \" + (((double)termCount)/(50*4)));\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc","date":1239886708,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeQuery#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeFilter#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    int termCountT=0,termCountC=0;\n    for (int i=0; i<50; i++) {\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      IntTrieRangeQuery tq=new IntTrieRangeQuery(field, precisionStep, new Integer(lower), new Integer(upper), true, true);\n      RangeQuery cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), true, true);\n      cq.setConstantScoreRewrite(true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for IntTrieRangeQuery and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test exclusive range\n      tq=new IntTrieRangeQuery(field, precisionStep, new Integer(lower), new Integer(upper), false, false);\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), false, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for IntTrieRangeQuery and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test left exclusive range\n      tq=new IntTrieRangeQuery(field, precisionStep, new Integer(lower), new Integer(upper), false, true);\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), false, true);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for IntTrieRangeQuery and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n      // test right exclusive range\n      tq=new IntTrieRangeQuery(field, precisionStep, new Integer(lower), new Integer(upper), true, false);\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), true, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for IntTrieRangeQuery and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      termCountT += tq.getTotalNumberOfTerms();\n      termCountC += cq.getTotalNumberOfTerms();\n    }\n    System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n    System.out.println(\" Trie query: \" + (((double)termCountT)/(50*4)));\n    System.out.println(\" Classical query: \" + (((double)termCountC)/(50*4)));\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\r\n    final Random rnd=newRandom();\r\n    String field=\"field\"+precisionStep;\r\n    int termCount=0;\r\n    for (int i=0; i<50; i++) {\r\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\r\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\r\n      if (lower>upper) {\r\n        int a=lower; lower=upper; upper=a;\r\n      }\r\n      // test inclusive range\r\n      IntTrieRangeFilter tf=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), true, true);\r\n      RangeQuery cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), true, true);\r\n      cq.setConstantScoreRewrite(true);\r\n      TopDocs tTopDocs = searcher.search(tf.asQuery(), 1);\r\n      TopDocs cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      termCount += tf.getLastNumberOfTerms();\r\n      // test exclusive range\r\n      tf=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), false, false);\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), false, false);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tf.asQuery(), 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      termCount += tf.getLastNumberOfTerms();\r\n      // test left exclusive range\r\n      tf=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), false, true);\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), false, true);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tf.asQuery(), 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      termCount += tf.getLastNumberOfTerms();\r\n      // test right exclusive range\r\n      tf=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), true, false);\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), true, false);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tf.asQuery(), 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      termCount += tf.getLastNumberOfTerms();\r\n    }\r\n    System.out.println(\"Average number of terms during random search on '\" + field + \"': \" + (((double)termCount)/(50*4)));\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["b388b60a23f200d8bbef85324a3ce48e475f8651"],"b388b60a23f200d8bbef85324a3ce48e475f8651":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"]},"commit2Childs":{"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["b388b60a23f200d8bbef85324a3ce48e475f8651"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b388b60a23f200d8bbef85324a3ce48e475f8651":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}