{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","date":1342989037,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    CloudState cloudState = coreContainer.getZkController().getCloudState();\n    \n    ZkNodeProps leaderProps = cloudState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n    reqSyncShard.setCollection(collection);\n    reqSyncShard.setShard(shard);\n    reqSyncShard.setCoreName(nodeProps.getCoreName());\n    server.request(reqSyncShard);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    CloudState cloudState = coreContainer.getZkController().getCloudState();\n    \n    ZkNodeProps leaderProps = cloudState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n    reqSyncShard.setCollection(collection);\n    reqSyncShard.setShard(shard);\n    reqSyncShard.setCoreName(nodeProps.getCoreName());\n    server.request(reqSyncShard);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    CloudState cloudState = coreContainer.getZkController().getCloudState();\n    \n    ZkNodeProps leaderProps = cloudState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n    reqSyncShard.setCollection(collection);\n    reqSyncShard.setShard(shard);\n    reqSyncShard.setCoreName(nodeProps.getCoreName());\n    server.request(reqSyncShard);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    \n    ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n    reqSyncShard.setCollection(collection);\n    reqSyncShard.setShard(shard);\n    reqSyncShard.setCoreName(nodeProps.getCoreName());\n    server.request(reqSyncShard);\n  }\n\n","sourceOld":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    CloudState cloudState = coreContainer.getZkController().getCloudState();\n    \n    ZkNodeProps leaderProps = cloudState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n    reqSyncShard.setCollection(collection);\n    reqSyncShard.setShard(shard);\n    reqSyncShard.setCoreName(nodeProps.getCoreName());\n    server.request(reqSyncShard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    \n    ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n    reqSyncShard.setCollection(collection);\n    reqSyncShard.setShard(shard);\n    reqSyncShard.setCoreName(nodeProps.getCoreName());\n    server.request(reqSyncShard);\n  }\n\n","sourceOld":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    CloudState cloudState = coreContainer.getZkController().getCloudState();\n    \n    ZkNodeProps leaderProps = cloudState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n    reqSyncShard.setCollection(collection);\n    reqSyncShard.setShard(shard);\n    reqSyncShard.setCoreName(nodeProps.getCoreName());\n    server.request(reqSyncShard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    \n    ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n    reqSyncShard.setCollection(collection);\n    reqSyncShard.setShard(shard);\n    reqSyncShard.setCoreName(nodeProps.getCoreName());\n    server.request(reqSyncShard);\n  }\n\n","sourceOld":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    CloudState cloudState = coreContainer.getZkController().getCloudState();\n    \n    ZkNodeProps leaderProps = cloudState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n    reqSyncShard.setCollection(collection);\n    reqSyncShard.setShard(shard);\n    reqSyncShard.setCoreName(nodeProps.getCoreName());\n    server.request(reqSyncShard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69439d0df009e0bb0038d1e427159f449dd670d","date":1355704683,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    \n    ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n    reqSyncShard.setCollection(collection);\n    reqSyncShard.setShard(shard);\n    reqSyncShard.setCoreName(nodeProps.getCoreName());\n    server.request(reqSyncShard);\n  }\n\n","sourceOld":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    \n    ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n    reqSyncShard.setCollection(collection);\n    reqSyncShard.setShard(shard);\n    reqSyncShard.setCoreName(nodeProps.getCoreName());\n    server.request(reqSyncShard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    \n    ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n    reqSyncShard.setCollection(collection);\n    reqSyncShard.setShard(shard);\n    reqSyncShard.setCoreName(nodeProps.getCoreName());\n    server.request(reqSyncShard);\n  }\n\n","sourceOld":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    \n    ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n    reqSyncShard.setCollection(collection);\n    reqSyncShard.setShard(shard);\n    reqSyncShard.setCoreName(nodeProps.getCoreName());\n    server.request(reqSyncShard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c3e46d3417c353d7be14509cfab11b315927fe","date":1382292560,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    \n    ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n    reqSyncShard.setCollection(collection);\n    reqSyncShard.setShard(shard);\n    reqSyncShard.setCoreName(nodeProps.getCoreName());\n    server.request(reqSyncShard);\n  }\n\n","sourceOld":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    \n    ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n    reqSyncShard.setCollection(collection);\n    reqSyncShard.setShard(shard);\n    reqSyncShard.setCoreName(nodeProps.getCoreName());\n    server.request(reqSyncShard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d750082a4223c20902ef11ff6a9831d55738ea4","date":1382309916,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    \n    ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    try {\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(60000);\n      RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n      reqSyncShard.setCollection(collection);\n      reqSyncShard.setShard(shard);\n      reqSyncShard.setCoreName(nodeProps.getCoreName());\n      server.request(reqSyncShard);\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    \n    ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n    reqSyncShard.setCollection(collection);\n    reqSyncShard.setShard(shard);\n    reqSyncShard.setCoreName(nodeProps.getCoreName());\n    server.request(reqSyncShard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n\n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n\n    ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n\n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    try {\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(60000);\n      RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n      reqSyncShard.setCollection(collection);\n      reqSyncShard.setShard(shard);\n      reqSyncShard.setCoreName(nodeProps.getCoreName());\n      server.request(reqSyncShard);\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    \n    ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    try {\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(60000);\n      RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n      reqSyncShard.setCollection(collection);\n      reqSyncShard.setShard(shard);\n      reqSyncShard.setCoreName(nodeProps.getCoreName());\n      server.request(reqSyncShard);\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    \n    ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    try {\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(60000);\n      RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n      reqSyncShard.setCollection(collection);\n      reqSyncShard.setShard(shard);\n      reqSyncShard.setCoreName(nodeProps.getCoreName());\n      server.request(reqSyncShard);\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n\n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n\n    ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n\n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    try {\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(60000);\n      RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n      reqSyncShard.setCollection(collection);\n      reqSyncShard.setShard(shard);\n      reqSyncShard.setCoreName(nodeProps.getCoreName());\n      server.request(reqSyncShard);\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    \n    ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrClient server = new HttpSolrClient(nodeProps.getBaseUrl());\n    try {\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(60000);\n      RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n      reqSyncShard.setCollection(collection);\n      reqSyncShard.setShard(shard);\n      reqSyncShard.setCoreName(nodeProps.getCoreName());\n      server.request(reqSyncShard);\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    \n    ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrServer server = new HttpSolrServer(nodeProps.getBaseUrl());\n    try {\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(60000);\n      RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n      reqSyncShard.setCollection(collection);\n      reqSyncShard.setShard(shard);\n      reqSyncShard.setCoreName(nodeProps.getCoreName());\n      server.request(reqSyncShard);\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    \n    ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    ;\n    try (HttpSolrClient client = new HttpSolrClient(nodeProps.getBaseUrl())) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n      reqSyncShard.setCollection(collection);\n      reqSyncShard.setShard(shard);\n      reqSyncShard.setCoreName(nodeProps.getCoreName());\n      client.request(reqSyncShard);\n    }\n  }\n\n","sourceOld":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    \n    ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    HttpSolrClient server = new HttpSolrClient(nodeProps.getBaseUrl());\n    try {\n      server.setConnectionTimeout(15000);\n      server.setSoTimeout(60000);\n      RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n      reqSyncShard.setCollection(collection);\n      reqSyncShard.setShard(shard);\n      reqSyncShard.setCoreName(nodeProps.getCoreName());\n      server.request(reqSyncShard);\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ebd3a557326ef3eab85b73a8cff781f7d801248","date":1431620752,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleSyncShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  private void handleSyncShardAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException, SolrServerException, IOException {\n    log.info(\"Syncing shard : \" + req.getParamString());\n    String collection = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    ClusterState clusterState = coreContainer.getZkController().getClusterState();\n    \n    ZkNodeProps leaderProps = clusterState.getLeader(collection, shard);\n    ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(leaderProps);\n    \n    ;\n    try (HttpSolrClient client = new HttpSolrClient(nodeProps.getBaseUrl())) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      RequestSyncShard reqSyncShard = new CoreAdminRequest.RequestSyncShard();\n      reqSyncShard.setCollection(collection);\n      reqSyncShard.setShard(shard);\n      reqSyncShard.setCoreName(nodeProps.getCoreName());\n      client.request(reqSyncShard);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3f767f8c99eaedb984df754fe61f21c5de260f94","a69439d0df009e0bb0038d1e427159f449dd670d"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a69439d0df009e0bb0038d1e427159f449dd670d":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"bafca15d8e408346a67f4282ad1143b88023893b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","3f767f8c99eaedb984df754fe61f21c5de260f94"],"a3c3e46d3417c353d7be14509cfab11b315927fe":["a69439d0df009e0bb0038d1e427159f449dd670d"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["2d750082a4223c20902ef11ff6a9831d55738ea4"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","3f767f8c99eaedb984df754fe61f21c5de260f94"],"2d750082a4223c20902ef11ff6a9831d55738ea4":["a3c3e46d3417c353d7be14509cfab11b315927fe"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ebd3a557326ef3eab85b73a8cff781f7d801248"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["bafca15d8e408346a67f4282ad1143b88023893b"],"a69439d0df009e0bb0038d1e427159f449dd670d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a3c3e46d3417c353d7be14509cfab11b315927fe"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"a3c3e46d3417c353d7be14509cfab11b315927fe":["2d750082a4223c20902ef11ff6a9831d55738ea4"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a69439d0df009e0bb0038d1e427159f449dd670d","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["3f767f8c99eaedb984df754fe61f21c5de260f94","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2d750082a4223c20902ef11ff6a9831d55738ea4":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}