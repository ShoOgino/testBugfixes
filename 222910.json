{"path":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testReaderClosedListener(boolean,int).mjava","commits":[{"id":"5f6279d779b4584858af04f499e8aac0ae132c29","date":1432729989,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testReaderClosedListener(boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  private void testReaderClosedListener(boolean closeSubReaders, int wrapMultiReaderType) throws IOException {\n    final Directory dir1 = getDir1(random());\n    final CompositeReader ir2, ir1 = DirectoryReader.open(dir1);\n    switch (wrapMultiReaderType) {\n      case 0:\n        ir2 = ir1;\n        break;\n      case 1:\n        // default case, does close subreaders:\n        ir2 = new MultiReader(ir1); break;\n      case 2:\n        ir2 = new MultiReader(new CompositeReader[] {ir1}, false); break;\n      default:\n        throw new AssertionError();\n    }\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(closeSubReaders,\n     new CompositeReader[] {ir2},\n     new CompositeReader[] {ir2});\n\n    final int[] listenerClosedCount = new int[1];\n\n    assertEquals(3, pr.leaves().size());\n\n    for(LeafReaderContext cxt : pr.leaves()) {\n      cxt.reader().addReaderClosedListener(reader -> listenerClosedCount[0]++);\n    }\n    pr.close();\n    if (!closeSubReaders) {\n      ir1.close();\n    }\n    assertEquals(3, listenerClosedCount[0]);\n    \n    // We have to close the extra MultiReader, because it will not close its own subreaders:\n    if (wrapMultiReaderType == 2) {\n      ir2.close();\n    }\n    dir1.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testReaderClosedListener1(boolean,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testReaderClosedListener(boolean,int).mjava","sourceNew":"  private void testReaderClosedListener1(boolean closeSubReaders, int wrapMultiReaderType) throws IOException {\n    final Directory dir1 = getDir1(random());\n    final CompositeReader ir2, ir1 = DirectoryReader.open(dir1);\n    switch (wrapMultiReaderType) {\n      case 0:\n        ir2 = ir1;\n        break;\n      case 1:\n        // default case, does close subreaders:\n        ir2 = new MultiReader(ir1); break;\n      case 2:\n        ir2 = new MultiReader(new CompositeReader[] {ir1}, false); break;\n      default:\n        throw new AssertionError();\n    }\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(closeSubReaders,\n     new CompositeReader[] {ir2},\n     new CompositeReader[] {ir2});\n\n    assertEquals(3, pr.leaves().size());\n    assertEquals(ir1.getReaderCacheHelper(), pr.getReaderCacheHelper());\n\n    int i = 0;\n    for(LeafReaderContext cxt : pr.leaves()) {\n      LeafReader originalLeaf = ir1.leaves().get(i++).reader();\n      assertEquals(originalLeaf.getCoreCacheHelper(), cxt.reader().getCoreCacheHelper());\n      assertEquals(originalLeaf.getReaderCacheHelper(), cxt.reader().getReaderCacheHelper());\n    }\n    pr.close();\n    if (!closeSubReaders) {\n      ir1.close();\n    }\n    \n    // We have to close the extra MultiReader, because it will not close its own subreaders:\n    if (wrapMultiReaderType == 2) {\n      ir2.close();\n    }\n    dir1.close();\n  }\n\n","sourceOld":"  private void testReaderClosedListener(boolean closeSubReaders, int wrapMultiReaderType) throws IOException {\n    final Directory dir1 = getDir1(random());\n    final CompositeReader ir2, ir1 = DirectoryReader.open(dir1);\n    switch (wrapMultiReaderType) {\n      case 0:\n        ir2 = ir1;\n        break;\n      case 1:\n        // default case, does close subreaders:\n        ir2 = new MultiReader(ir1); break;\n      case 2:\n        ir2 = new MultiReader(new CompositeReader[] {ir1}, false); break;\n      default:\n        throw new AssertionError();\n    }\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(closeSubReaders,\n     new CompositeReader[] {ir2},\n     new CompositeReader[] {ir2});\n\n    final int[] listenerClosedCount = new int[1];\n\n    assertEquals(3, pr.leaves().size());\n\n    for(LeafReaderContext cxt : pr.leaves()) {\n      cxt.reader().addReaderClosedListener(reader -> listenerClosedCount[0]++);\n    }\n    pr.close();\n    if (!closeSubReaders) {\n      ir1.close();\n    }\n    assertEquals(3, listenerClosedCount[0]);\n    \n    // We have to close the extra MultiReader, because it will not close its own subreaders:\n    if (wrapMultiReaderType == 2) {\n      ir2.close();\n    }\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d211216c83f01894810543d1c107160a9ae3650b":["5f6279d779b4584858af04f499e8aac0ae132c29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6279d779b4584858af04f499e8aac0ae132c29":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d211216c83f01894810543d1c107160a9ae3650b"]},"commit2Childs":{"d211216c83f01894810543d1c107160a9ae3650b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f6279d779b4584858af04f499e8aac0ae132c29"],"5f6279d779b4584858af04f499e8aac0ae132c29":["d211216c83f01894810543d1c107160a9ae3650b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}