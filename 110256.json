{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testRenameCollection().mjava","commits":[{"id":"59bad1cc1e7f90125a140496e79b06afcedb68ec","date":1554915399,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testRenameCollection().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRenameCollection() throws Exception {\n    String collectionName1 = \"testRename_collection1\";\n    String collectionName2 = \"testRename_collection2\";\n    CollectionAdminRequest.createCollection(collectionName1, \"conf\", 1, 1).setAlias(\"col1\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collectionName2, \"conf\", 1, 1).setAlias(\"col2\").process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(collectionName1, 1, 1);\n    cluster.waitForActiveCollection(collectionName2, 1, 1);\n\n    waitForState(\"Expected collection1 to be created with 1 shard and 1 replica\", collectionName1, clusterShape(1, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", collectionName2, clusterShape(1, 1));\n\n    CollectionAdminRequest.createAlias(\"compoundAlias\", \"col1,col2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"simpleAlias\", \"col1\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createCategoryRoutedAlias(\"catAlias\", \"field1\", 100,\n        CollectionAdminRequest.createCollection(\"_unused_\", \"conf\", 1, 1)).process(cluster.getSolrClient());\n\n    CollectionAdminRequest.renameCollection(\"col1\", \"foo\").process(cluster.getSolrClient());\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    zkStateReader.aliasesManager.update();\n\n    Aliases aliases = zkStateReader.getAliases();\n    assertEquals(aliases.getCollectionAliasListMap().toString(), collectionName1, aliases.resolveSimpleAlias(\"foo\"));\n    assertEquals(aliases.getCollectionAliasListMap().toString(), collectionName1, aliases.resolveSimpleAlias(\"simpleAlias\"));\n    List<String> compoundAliases = aliases.resolveAliases(\"compoundAlias\");\n    assertEquals(compoundAliases.toString(), 2, compoundAliases.size());\n    assertTrue(compoundAliases.toString(), compoundAliases.contains(collectionName1));\n    assertTrue(compoundAliases.toString(), compoundAliases.contains(collectionName2));\n\n    CollectionAdminRequest.renameCollection(collectionName1, collectionName2).process(cluster.getSolrClient());\n    zkStateReader.aliasesManager.update();\n\n    aliases = zkStateReader.getAliases();\n    assertEquals(aliases.getCollectionAliasListMap().toString(), collectionName2, aliases.resolveSimpleAlias(\"foo\"));\n    assertEquals(aliases.getCollectionAliasListMap().toString(), collectionName2, aliases.resolveSimpleAlias(\"simpleAlias\"));\n    assertEquals(aliases.getCollectionAliasListMap().toString(), collectionName2, aliases.resolveSimpleAlias(collectionName1));\n    // we renamed col1 -> col2 so the compound alias contains only \"col2,col2\" which is reduced to col2\n    compoundAliases = aliases.resolveAliases(\"compoundAlias\");\n    assertEquals(compoundAliases.toString(), 1, compoundAliases.size());\n    assertTrue(compoundAliases.toString(), compoundAliases.contains(collectionName2));\n\n    try {\n      CollectionAdminRequest.renameCollection(\"catAlias\", \"bar\").process(cluster.getSolrClient());\n      fail(\"category-based alias renaming should fail\");\n    } catch (Exception e) {\n      assertTrue(e.toString().contains(\"is a routed alias\"));\n    }\n\n    try {\n      CollectionAdminRequest.renameCollection(\"col2\", \"foo\").process(cluster.getSolrClient());\n      fail(\"shuold fail because 'foo' already exists\");\n    } catch (Exception e) {\n      assertTrue(e.toString().contains(\"exists\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c","date":1562161956,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testRenameCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testRenameCollection().mjava","sourceNew":"  @Test\n  public void testRenameCollection() throws Exception {\n    doTestRenameCollection(true);\n    CollectionAdminRequest.deleteAlias(\"col1\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"col2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"foo\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"simpleAlias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"catAlias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"compoundAlias\").process(cluster.getSolrClient());\n    cluster.getSolrClient().getZkStateReader().aliasesManager.update();\n    doTestRenameCollection(false);\n  }\n\n","sourceOld":"  @Test\n  public void testRenameCollection() throws Exception {\n    String collectionName1 = \"testRename_collection1\";\n    String collectionName2 = \"testRename_collection2\";\n    CollectionAdminRequest.createCollection(collectionName1, \"conf\", 1, 1).setAlias(\"col1\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(collectionName2, \"conf\", 1, 1).setAlias(\"col2\").process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(collectionName1, 1, 1);\n    cluster.waitForActiveCollection(collectionName2, 1, 1);\n\n    waitForState(\"Expected collection1 to be created with 1 shard and 1 replica\", collectionName1, clusterShape(1, 1));\n    waitForState(\"Expected collection2 to be created with 1 shard and 1 replica\", collectionName2, clusterShape(1, 1));\n\n    CollectionAdminRequest.createAlias(\"compoundAlias\", \"col1,col2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"simpleAlias\", \"col1\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createCategoryRoutedAlias(\"catAlias\", \"field1\", 100,\n        CollectionAdminRequest.createCollection(\"_unused_\", \"conf\", 1, 1)).process(cluster.getSolrClient());\n\n    CollectionAdminRequest.renameCollection(\"col1\", \"foo\").process(cluster.getSolrClient());\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    zkStateReader.aliasesManager.update();\n\n    Aliases aliases = zkStateReader.getAliases();\n    assertEquals(aliases.getCollectionAliasListMap().toString(), collectionName1, aliases.resolveSimpleAlias(\"foo\"));\n    assertEquals(aliases.getCollectionAliasListMap().toString(), collectionName1, aliases.resolveSimpleAlias(\"simpleAlias\"));\n    List<String> compoundAliases = aliases.resolveAliases(\"compoundAlias\");\n    assertEquals(compoundAliases.toString(), 2, compoundAliases.size());\n    assertTrue(compoundAliases.toString(), compoundAliases.contains(collectionName1));\n    assertTrue(compoundAliases.toString(), compoundAliases.contains(collectionName2));\n\n    CollectionAdminRequest.renameCollection(collectionName1, collectionName2).process(cluster.getSolrClient());\n    zkStateReader.aliasesManager.update();\n\n    aliases = zkStateReader.getAliases();\n    assertEquals(aliases.getCollectionAliasListMap().toString(), collectionName2, aliases.resolveSimpleAlias(\"foo\"));\n    assertEquals(aliases.getCollectionAliasListMap().toString(), collectionName2, aliases.resolveSimpleAlias(\"simpleAlias\"));\n    assertEquals(aliases.getCollectionAliasListMap().toString(), collectionName2, aliases.resolveSimpleAlias(collectionName1));\n    // we renamed col1 -> col2 so the compound alias contains only \"col2,col2\" which is reduced to col2\n    compoundAliases = aliases.resolveAliases(\"compoundAlias\");\n    assertEquals(compoundAliases.toString(), 1, compoundAliases.size());\n    assertTrue(compoundAliases.toString(), compoundAliases.contains(collectionName2));\n\n    try {\n      CollectionAdminRequest.renameCollection(\"catAlias\", \"bar\").process(cluster.getSolrClient());\n      fail(\"category-based alias renaming should fail\");\n    } catch (Exception e) {\n      assertTrue(e.toString().contains(\"is a routed alias\"));\n    }\n\n    try {\n      CollectionAdminRequest.renameCollection(\"col2\", \"foo\").process(cluster.getSolrClient());\n      fail(\"shuold fail because 'foo' already exists\");\n    } catch (Exception e) {\n      assertTrue(e.toString().contains(\"exists\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59bad1cc1e7f90125a140496e79b06afcedb68ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c":["59bad1cc1e7f90125a140496e79b06afcedb68ec"]},"commit2Childs":{"59bad1cc1e7f90125a140496e79b06afcedb68ec":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}