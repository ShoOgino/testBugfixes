{"path":"solr/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","commits":[{"id":"785c5e6bc8889b740445ed7f2b278a442ad92f7f","date":1307558822,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = \"localhost:\"+port+context+\"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = \"localhost:\"+port+context+\"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = \"localhost:\"+port+context+\"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","sourceNew":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = \"localhost:\"+port+context+\"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = \"localhost:\"+port+context+\"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","sourceNew":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = \"localhost:\"+port+context+\"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = \"localhost:\"+port+context+\"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","sourceNew":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = \"localhost:\"+port+context+\"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = \"localhost:\"+port+context+\"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","785c5e6bc8889b740445ed7f2b278a442ad92f7f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"c26f00b574427b55127e869b935845554afde1fa":["785c5e6bc8889b740445ed7f2b278a442ad92f7f","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","785c5e6bc8889b740445ed7f2b278a442ad92f7f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["785c5e6bc8889b740445ed7f2b278a442ad92f7f"],"785c5e6bc8889b740445ed7f2b278a442ad92f7f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","785c5e6bc8889b740445ed7f2b278a442ad92f7f"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"785c5e6bc8889b740445ed7f2b278a442ad92f7f":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c26f00b574427b55127e869b935845554afde1fa","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}