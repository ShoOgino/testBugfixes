{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","sourceNew":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    for (FacetRequest facetRequest : searchParams.getFacetRequests()) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(\n          isUsingComplements, facetArrays, indexReader,  taxonomyReader);\n\n      CategoryListIterator cli = \n        facetRequest.createCategoryListIterator(indexReader, taxonomyReader, searchParams, partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        // TODO (Facet): create a more meaningful RE class, and throw it.\n        throw new RuntimeException(\n        \"Overriding existing category list with different aggregator. THAT'S A NO NO!\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","sourceOld":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    for (FacetRequest facetRequest : searchParams.getFacetRequests()) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(\n          isUsingComplements, facetArrays, indexReader,  taxonomyReader);\n\n      CategoryListIterator cli = \n        facetRequest.createCategoryListIterator(indexReader, taxonomyReader, searchParams, partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        // TODO (Facet): create a more meaningful RE class, and throw it.\n        throw new RuntimeException(\n        \"Overriding existing category list with different aggregator. THAT'S A NO NO!\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","sourceNew":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    for (FacetRequest facetRequest : searchParams.getFacetRequests()) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(\n          isUsingComplements, facetArrays, taxonomyReader);\n\n      CategoryListIterator cli = facetRequest.createCategoryListIterator(taxonomyReader, searchParams, partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        // TODO (Facet): create a more meaningful RE class, and throw it.\n        throw new RuntimeException(\n        \"Overriding existing category list with different aggregator. THAT'S A NO NO!\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","sourceOld":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    for (FacetRequest facetRequest : searchParams.getFacetRequests()) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(\n          isUsingComplements, facetArrays, indexReader,  taxonomyReader);\n\n      CategoryListIterator cli = \n        facetRequest.createCategoryListIterator(indexReader, taxonomyReader, searchParams, partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        // TODO (Facet): create a more meaningful RE class, and throw it.\n        throw new RuntimeException(\n        \"Overriding existing category list with different aggregator. THAT'S A NO NO!\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","sourceNew":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    for (FacetRequest facetRequest : searchParams.getFacetRequests()) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(\n          isUsingComplements, facetArrays, taxonomyReader);\n\n      CategoryListIterator cli = facetRequest.createCategoryListIterator(taxonomyReader, searchParams, partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        // TODO (Facet): create a more meaningful RE class, and throw it.\n        throw new RuntimeException(\n        \"Overriding existing category list with different aggregator. THAT'S A NO NO!\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","sourceOld":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    for (FacetRequest facetRequest : searchParams.getFacetRequests()) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(\n          isUsingComplements, facetArrays, indexReader,  taxonomyReader);\n\n      CategoryListIterator cli = \n        facetRequest.createCategoryListIterator(indexReader, taxonomyReader, searchParams, partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        // TODO (Facet): create a more meaningful RE class, and throw it.\n        throw new RuntimeException(\n        \"Overriding existing category list with different aggregator. THAT'S A NO NO!\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","sourceNew":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    FacetIndexingParams indexingParams = searchParams.getFacetIndexingParams();\n    for (FacetRequest facetRequest : searchParams.getFacetRequests()) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(isUsingComplements, facetArrays, taxonomyReader);\n\n      CategoryListIterator cli = indexingParams.getCategoryListParams(facetRequest.categoryPath).createCategoryListIterator(partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        throw new RuntimeException(\"Overriding existing category list with different aggregator\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","sourceOld":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    for (FacetRequest facetRequest : searchParams.getFacetRequests()) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(\n          isUsingComplements, facetArrays, taxonomyReader);\n\n      CategoryListIterator cli = facetRequest.createCategoryListIterator(taxonomyReader, searchParams, partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        // TODO (Facet): create a more meaningful RE class, and throw it.\n        throw new RuntimeException(\n        \"Overriding existing category list with different aggregator. THAT'S A NO NO!\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","sourceNew":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    FacetIndexingParams indexingParams = searchParams.getFacetIndexingParams();\n    for (FacetRequest facetRequest : searchParams.getFacetRequests()) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(isUsingComplements, facetArrays, taxonomyReader);\n\n      CategoryListIterator cli = indexingParams.getCategoryListParams(facetRequest.categoryPath).createCategoryListIterator(partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        throw new RuntimeException(\"Overriding existing category list with different aggregator\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","sourceOld":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    for (FacetRequest facetRequest : searchParams.getFacetRequests()) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(\n          isUsingComplements, facetArrays, taxonomyReader);\n\n      CategoryListIterator cli = facetRequest.createCategoryListIterator(taxonomyReader, searchParams, partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        // TODO (Facet): create a more meaningful RE class, and throw it.\n        throw new RuntimeException(\n        \"Overriding existing category list with different aggregator. THAT'S A NO NO!\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","sourceNew":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    FacetIndexingParams indexingParams = searchParams.indexingParams;\n    for (FacetRequest facetRequest : searchParams.facetRequests) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(isUsingComplements, facetArrays, taxonomyReader);\n\n      CategoryListIterator cli = indexingParams.getCategoryListParams(facetRequest.categoryPath).createCategoryListIterator(partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        throw new RuntimeException(\"Overriding existing category list with different aggregator\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","sourceOld":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    FacetIndexingParams indexingParams = searchParams.getFacetIndexingParams();\n    for (FacetRequest facetRequest : searchParams.getFacetRequests()) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(isUsingComplements, facetArrays, taxonomyReader);\n\n      CategoryListIterator cli = indexingParams.getCategoryListParams(facetRequest.categoryPath).createCategoryListIterator(partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        throw new RuntimeException(\"Overriding existing category list with different aggregator\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","sourceNew":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    FacetIndexingParams indexingParams = searchParams.indexingParams;\n    for (FacetRequest facetRequest : searchParams.facetRequests) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(isUsingComplements, facetArrays, taxonomyReader);\n\n      CategoryListIterator cli = indexingParams.getCategoryListParams(facetRequest.categoryPath).createCategoryListIterator(partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        throw new RuntimeException(\"Overriding existing category list with different aggregator\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","sourceOld":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    FacetIndexingParams indexingParams = searchParams.getFacetIndexingParams();\n    for (FacetRequest facetRequest : searchParams.getFacetRequests()) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(isUsingComplements, facetArrays, taxonomyReader);\n\n      CategoryListIterator cli = indexingParams.getCategoryListParams(facetRequest.categoryPath).createCategoryListIterator(partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        throw new RuntimeException(\"Overriding existing category list with different aggregator\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","sourceNew":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    FacetIndexingParams indexingParams = searchParams.indexingParams;\n    for (FacetRequest facetRequest : searchParams.facetRequests) {\n      Aggregator categoryAggregator = createAggregator(facetRequest, facetArrays); // nocommit remove! facetRequest.createAggregator(isUsingComplements, facetArrays, taxonomyReader);\n\n      CategoryListIterator cli = indexingParams.getCategoryListParams(facetRequest.categoryPath).createCategoryListIterator(partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        throw new RuntimeException(\"Overriding existing category list with different aggregator\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","sourceOld":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    FacetIndexingParams indexingParams = searchParams.indexingParams;\n    for (FacetRequest facetRequest : searchParams.facetRequests) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(isUsingComplements, facetArrays, taxonomyReader);\n\n      CategoryListIterator cli = indexingParams.getCategoryListParams(facetRequest.categoryPath).createCategoryListIterator(partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        throw new RuntimeException(\"Overriding existing category list with different aggregator\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","sourceNew":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    FacetIndexingParams indexingParams = searchParams.indexingParams;\n    for (FacetRequest facetRequest : searchParams.facetRequests) {\n      Aggregator categoryAggregator = createAggregator(facetRequest, facetArrays);\n\n      CategoryListIterator cli = indexingParams.getCategoryListParams(facetRequest.categoryPath).createCategoryListIterator(partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        throw new RuntimeException(\"Overriding existing category list with different aggregator\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","sourceOld":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    FacetIndexingParams indexingParams = searchParams.indexingParams;\n    for (FacetRequest facetRequest : searchParams.facetRequests) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(isUsingComplements, facetArrays, taxonomyReader);\n\n      CategoryListIterator cli = indexingParams.getCategoryListParams(facetRequest.categoryPath).createCategoryListIterator(partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        throw new RuntimeException(\"Overriding existing category list with different aggregator\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["8917bfede3b4ca30f4305c1e391e9218959cd723","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["b89678825b68eccaf09e6ab71675fc0b0af1e099","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"07155cdd910937cdf6877e48884d5782845c8b8b":["c4015cd39dff8d4dec562d909f9766debac53aa6","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","07155cdd910937cdf6877e48884d5782845c8b8b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["42f51b3ab4258ff4623227b0db011b8bb83db5c7","8917bfede3b4ca30f4305c1e391e9218959cd723"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["8917bfede3b4ca30f4305c1e391e9218959cd723","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["07155cdd910937cdf6877e48884d5782845c8b8b"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","c4015cd39dff8d4dec562d909f9766debac53aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}