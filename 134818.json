{"path":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,Class[#-extends-Scorer]).mjava","commits":[{"id":"a7f94ff172f40ff68a926d112e25b96bc38e5a27","date":1431002360,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,Class[#-extends-Scorer]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,String,String).mjava","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final Class<? extends Scorer> innerScorerClass) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        if (innerScorerClass != null) {\n          final FilterScorer innerScorer = (FilterScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClass, innerScorer.in.getClass());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final String scorerClassName, final String innerScorerClassName) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", scorerClassName, scorer.getClass().getName());\n        if (innerScorerClassName != null && scorer instanceof ConstantScoreQuery.ConstantScoreScorer) {\n          final ConstantScoreQuery.ConstantScoreScorer innerScorer = (ConstantScoreQuery.ConstantScoreScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClassName, innerScorer.in.getClass().getName());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,Class[#-extends-Scorer]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,Class[#-extends-Scorer]).mjava","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final Class<? extends Scorer> innerScorerClass) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        if (innerScorerClass != null) {\n          final FilterScorer innerScorer = (FilterScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClass, innerScorer.in.getClass());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final Class<? extends Scorer> innerScorerClass) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        if (innerScorerClass != null) {\n          final FilterScorer innerScorer = (FilterScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClass, innerScorer.in.getClass());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,Class[#-extends-Scorer]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,Class[#-extends-Scorer]).mjava","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final Class<? extends Scorer> innerScorerClass) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        if (innerScorerClass != null) {\n          final FilterScorer innerScorer = (FilterScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClass, innerScorer.in.getClass());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final Class<? extends Scorer> innerScorerClass) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        if (innerScorerClass != null) {\n          final FilterScorer innerScorer = (FilterScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClass, innerScorer.in.getClass());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,Class[#-extends-Scorer]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,Class[#-extends-Scorer]).mjava","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final Class<? extends Scorer> innerScorerClass) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorable scorer;\n    \n      @Override\n      public void setScorer(Scorable scorer) {\n        this.scorer = scorer;\n        if (innerScorerClass != null) {\n          Scorable innerScorer = rootScorer(scorer);\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClass, innerScorer.getClass());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final Class<? extends Scorer> innerScorerClass) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n        if (innerScorerClass != null) {\n          final FilterScorer innerScorer = (FilterScorer) scorer;\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClass, innerScorer.in.getClass());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,Class[#-extends-Scorable]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#checkHits(IndexSearcher,Query,float,Class[#-extends-Scorer]).mjava","sourceNew":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final Class<? extends Scorable> innerScorerClass) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorable scorer;\n    \n      @Override\n      public void setScorer(Scorable scorer) {\n        this.scorer = scorer;\n        if (innerScorerClass != null) {\n          Scorable innerScorer = rootScorer(scorer);\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClass, innerScorer.getClass());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","sourceOld":"  private void checkHits(IndexSearcher searcher, Query q, final float expectedScore, final Class<? extends Scorer> innerScorerClass) throws IOException {\n    final int[] count = new int[1];\n    searcher.search(q, new SimpleCollector() {\n      private Scorable scorer;\n    \n      @Override\n      public void setScorer(Scorable scorer) {\n        this.scorer = scorer;\n        if (innerScorerClass != null) {\n          Scorable innerScorer = rootScorer(scorer);\n          assertEquals(\"inner Scorer is implemented by wrong class\", innerScorerClass, innerScorer.getClass());\n        }\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"Score differs from expected\", expectedScore, this.scorer.score(), 0);\n        count[0]++;\n      }\n      \n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    });\n    assertEquals(\"invalid number of results\", 1, count[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a7f94ff172f40ff68a926d112e25b96bc38e5a27","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}