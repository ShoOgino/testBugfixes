{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWSegmentInfosWriter#write(SegmentInfo,FieldInfos).mjava","commits":[{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWSegmentInfosWriter#write(SegmentInfo,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(SegmentInfo si, FieldInfos fis) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfosFormat.SI_EXTENSION);\n\n    // nocommit what IOCtx\n    boolean success = false;\n\n    IndexOutput output = si.dir.createOutput(fileName, new IOContext(new FlushInfo(0, 0)));\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeString(si.name);\n      output.writeInt(si.docCount);\n      output.writeLong(si.getDelGen());\n\n      output.writeInt(si.getDocStoreOffset());\n      if (si.getDocStoreOffset() != -1) {\n        output.writeString(si.getDocStoreSegment());\n        output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n      }\n      // pre-4.0 indexes write a byte if there is a single norms file\n      output.writeByte((byte) 1);\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeInt(si.getDelCount());\n      // hasProx:\n      output.writeByte((byte) 1);\n      output.writeStringStringMap(si.getDiagnostics());\n      // hasVectors:\n      output.writeByte((byte) 1);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"352763be0465236f8e2ac188aa1b761cb3e1c9ee","date":1337516554,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWSegmentInfosWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWSegmentInfosWriter#write(SegmentInfo,FieldInfos).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir ,SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfosFormat.SI_EXTENSION);\n\n    boolean success = false;\n\n    IndexOutput output = dir.createOutput(fileName, ioContext);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeString(si.name);\n      output.writeInt(si.docCount);\n      output.writeLong(si.getDelGen());\n\n      output.writeInt(si.getDocStoreOffset());\n      if (si.getDocStoreOffset() != -1) {\n        output.writeString(si.getDocStoreSegment());\n        output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n      }\n      // pre-4.0 indexes write a byte if there is a single norms file\n      output.writeByte((byte) 1);\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeInt(si.getDelCount());\n      // hasProx:\n      output.writeByte((byte) 1);\n      output.writeStringStringMap(si.getDiagnostics());\n      // hasVectors:\n      output.writeByte((byte) 1);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(SegmentInfo si, FieldInfos fis) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfosFormat.SI_EXTENSION);\n\n    // nocommit what IOCtx\n    boolean success = false;\n\n    IndexOutput output = si.dir.createOutput(fileName, new IOContext(new FlushInfo(0, 0)));\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeString(si.name);\n      output.writeInt(si.docCount);\n      output.writeLong(si.getDelGen());\n\n      output.writeInt(si.getDocStoreOffset());\n      if (si.getDocStoreOffset() != -1) {\n        output.writeString(si.getDocStoreSegment());\n        output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n      }\n      // pre-4.0 indexes write a byte if there is a single norms file\n      output.writeByte((byte) 1);\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeInt(si.getDelCount());\n      // hasProx:\n      output.writeByte((byte) 1);\n      output.writeStringStringMap(si.getDiagnostics());\n      // hasVectors:\n      output.writeByte((byte) 1);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4356000e349e38c9fb48034695b7c309abd54557":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"352763be0465236f8e2ac188aa1b761cb3e1c9ee":["4356000e349e38c9fb48034695b7c309abd54557"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4356000e349e38c9fb48034695b7c309abd54557":["352763be0465236f8e2ac188aa1b761cb3e1c9ee"],"352763be0465236f8e2ac188aa1b761cb3e1c9ee":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4356000e349e38c9fb48034695b7c309abd54557","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["352763be0465236f8e2ac188aa1b761cb3e1c9ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}