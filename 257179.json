{"path":"lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanWeight#AssertingSpanWeight(IndexSearcher,SpanWeight).mjava","commits":[{"id":"d4b6308fa66dc96de36abfae5d3e7c92c805e227","date":1432916588,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanWeight#AssertingSpanWeight(IndexSearcher,SpanWeight).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanWeight#AssertingSpanWeight(SpanWeight).mjava","sourceNew":"  /**\n   * Create an AssertingSpanWeight\n   * @param in the SpanWeight to wrap\n   * @throws IOException on error\n   */\n  public AssertingSpanWeight(IndexSearcher searcher, SpanWeight in) throws IOException {\n    super((SpanQuery) in.getQuery(), searcher, null, in.collectorFactory);\n    this.in = in;\n  }\n\n","sourceOld":"  /**\n   * Create an AssertingSpanWeight\n   * @param in the SpanWeight to wrap\n   * @throws IOException on error\n   */\n  public AssertingSpanWeight(SpanWeight in) throws IOException {\n    super((SpanQuery) in.getQuery(), in.similarity, in.collectorFactory);\n    this.in = in;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanWeight#AssertingSpanWeight(IndexSearcher,SpanWeight).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanWeight#AssertingSpanWeight(IndexSearcher,SpanWeight).mjava","sourceNew":"  /**\n   * Create an AssertingSpanWeight\n   * @param in the SpanWeight to wrap\n   * @throws IOException on error\n   */\n  public AssertingSpanWeight(IndexSearcher searcher, SpanWeight in) throws IOException {\n    super((SpanQuery) in.getQuery(), searcher, null);\n    this.in = in;\n  }\n\n","sourceOld":"  /**\n   * Create an AssertingSpanWeight\n   * @param in the SpanWeight to wrap\n   * @throws IOException on error\n   */\n  public AssertingSpanWeight(IndexSearcher searcher, SpanWeight in) throws IOException {\n    super((SpanQuery) in.getQuery(), searcher, null, in.collectorFactory);\n    this.in = in;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanWeight#AssertingSpanWeight(IndexSearcher,SpanWeight).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanWeight#AssertingSpanWeight(IndexSearcher,SpanWeight).mjava","sourceNew":"  /**\n   * Create an AssertingSpanWeight\n   * @param in the SpanWeight to wrap\n   * @throws IOException on error\n   */\n  public AssertingSpanWeight(IndexSearcher searcher, SpanWeight in) throws IOException {\n    super((SpanQuery) in.getQuery(), searcher, null, 1f);\n    this.in = in;\n  }\n\n","sourceOld":"  /**\n   * Create an AssertingSpanWeight\n   * @param in the SpanWeight to wrap\n   * @throws IOException on error\n   */\n  public AssertingSpanWeight(IndexSearcher searcher, SpanWeight in) throws IOException {\n    super((SpanQuery) in.getQuery(), searcher, null);\n    this.in = in;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanWeight#AssertingSpanWeight(IndexSearcher,SpanWeight).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/spans/AssertingSpanWeight#AssertingSpanWeight(IndexSearcher,SpanWeight).mjava","sourceNew":"  /**\n   * Create an AssertingSpanWeight\n   * @param in the SpanWeight to wrap\n   * @throws IOException on error\n   */\n  public AssertingSpanWeight(IndexSearcher searcher, SpanWeight in) throws IOException {\n    super((SpanQuery) in.getQuery(), searcher, null, 1f);\n    this.in = in;\n  }\n\n","sourceOld":"  /**\n   * Create an AssertingSpanWeight\n   * @param in the SpanWeight to wrap\n   * @throws IOException on error\n   */\n  public AssertingSpanWeight(IndexSearcher searcher, SpanWeight in) throws IOException {\n    super((SpanQuery) in.getQuery(), searcher, null);\n    this.in = in;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29aea3139c4326c0501d75d51059855463220279":["d4b6308fa66dc96de36abfae5d3e7c92c805e227"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["29aea3139c4326c0501d75d51059855463220279"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["29aea3139c4326c0501d75d51059855463220279","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"d4b6308fa66dc96de36abfae5d3e7c92c805e227":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"29aea3139c4326c0501d75d51059855463220279":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4b6308fa66dc96de36abfae5d3e7c92c805e227"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d4b6308fa66dc96de36abfae5d3e7c92c805e227":["29aea3139c4326c0501d75d51059855463220279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}