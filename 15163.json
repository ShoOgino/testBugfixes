{"path":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,MockRAMDirectory,Analyzer).mjava","commits":[{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,MockRAMDirectory,Analyzer).mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,RAMDirectory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, MockRAMDirectory ramdir, Analyzer analyzer) throws Exception {\n    IndexSearcher ram = new IndexSearcher(ramdir);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, RAMDirectory ramdir, Analyzer analyzer) throws Exception {\n    IndexSearcher ram = new IndexSearcher(ramdir);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,MockRAMDirectory,Analyzer).mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,MockRAMDirectory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, MockRAMDirectory ramdir, Analyzer analyzer) throws Exception {\n    IndexSearcher ram = new IndexSearcher(ramdir);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    ram.close();\n    mem.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, MockRAMDirectory ramdir, Analyzer analyzer) throws Exception {\n    IndexSearcher ram = new IndexSearcher(ramdir);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,MockRAMDirectory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexSearcher ram = new IndexSearcher(ramdir);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    ram.close();\n    mem.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, MockRAMDirectory ramdir, Analyzer analyzer) throws Exception {\n    IndexSearcher ram = new IndexSearcher(ramdir);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    ram.close();\n    mem.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a05409176bd65129d67a785ee70e881e238a9aef"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"a05409176bd65129d67a785ee70e881e238a9aef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}