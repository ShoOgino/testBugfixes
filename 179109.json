{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase#setup().mjava","commits":[{"id":"3337b86edd36607f0208321f1deee79c55e5fd21","date":1321266471,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase#setup().mjava","pathOld":"/dev/null","sourceNew":"\t@Before\n\tpublic void setup() {\n\t\ttry {\n\t\t\tAPPLE = new SerialClob(new String(\"Apples grow on trees and they are good to eat.\").toCharArray());\n\t\t} catch (SQLException sqe) {\n\t\t\tAssert.fail(\"Could not Set up Test\");\n\t\t}\n\n\t\t// The first row needs to have all non-null fields,\n\t\t// otherwise we would have to always send the fieldTypes & fieldNames as CacheProperties when building.\n\t\tdata = new ArrayList<ControlData>();\n\t\tdata.add(new ControlData(new Object[] { new Integer(1), new BigDecimal(Math.PI), \"A\", \"Apple\", new Float(1.11), Feb21_2011, APPLE }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(2), new BigDecimal(Math.PI), \"B\", \"Ball\", new Float(2.22), Feb21_2011, null }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Dog\", new Float(4.44), Feb21_2011, null }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(3), new BigDecimal(Math.PI), \"C\", \"Cookie\", new Float(3.33), Feb21_2011, null }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Daisy\", new Float(4.44), Feb21_2011, null }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Drawing\", new Float(4.44), Feb21_2011, null }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(5), new BigDecimal(Math.PI), \"E\",\n\t\t\t\tArrays.asList(new String[] { \"Eggplant\", \"Ear\", \"Elephant\", \"Engine\" }), new Float(5.55), Feb21_2011, null }));\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fae06511695f4be0bce5337deb3b3f813d0c3e7c","date":1323890147,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase#setup().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase#setup().mjava","sourceNew":"\t@Before\n\tpublic void setup() {\n\t\ttry {\n\t\t\tAPPLE = new SerialClob(new String(\"Apples grow on trees and they are good to eat.\").toCharArray());\n\t\t} catch (SQLException sqe) {\n\t\t\tAssert.fail(\"Could not Set up Test\");\n\t\t}\n\n\t\t// The first row needs to have all non-null fields,\n\t\t// otherwise we would have to always send the fieldTypes & fieldNames as CacheProperties when building.\n\t\tdata = new ArrayList<ControlData>();\n\t\tdata.add(new ControlData(new Object[] { new Integer(1), new BigDecimal(Math.PI), \"A\", \"Apple\", new Float(1.11), Feb21_2011, APPLE }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(2), new BigDecimal(Math.PI), \"B\", \"Ball\", new Float(2.22), Feb21_2011, null }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Dog\", new Float(4.44), Feb21_2011, null }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(3), new BigDecimal(Math.PI), \"C\", \"Cookie\", new Float(3.33), Feb21_2011, null }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Daisy\", new Float(4.44), Feb21_2011, null }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Drawing\", new Float(4.44), Feb21_2011, null }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(5), new BigDecimal(Math.PI), \"E\",\n\t\t\t\tArrays.asList(\"Eggplant\", \"Ear\", \"Elephant\", \"Engine\"), new Float(5.55), Feb21_2011, null }));\n\t}\n\n","sourceOld":"\t@Before\n\tpublic void setup() {\n\t\ttry {\n\t\t\tAPPLE = new SerialClob(new String(\"Apples grow on trees and they are good to eat.\").toCharArray());\n\t\t} catch (SQLException sqe) {\n\t\t\tAssert.fail(\"Could not Set up Test\");\n\t\t}\n\n\t\t// The first row needs to have all non-null fields,\n\t\t// otherwise we would have to always send the fieldTypes & fieldNames as CacheProperties when building.\n\t\tdata = new ArrayList<ControlData>();\n\t\tdata.add(new ControlData(new Object[] { new Integer(1), new BigDecimal(Math.PI), \"A\", \"Apple\", new Float(1.11), Feb21_2011, APPLE }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(2), new BigDecimal(Math.PI), \"B\", \"Ball\", new Float(2.22), Feb21_2011, null }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Dog\", new Float(4.44), Feb21_2011, null }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(3), new BigDecimal(Math.PI), \"C\", \"Cookie\", new Float(3.33), Feb21_2011, null }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Daisy\", new Float(4.44), Feb21_2011, null }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Drawing\", new Float(4.44), Feb21_2011, null }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(5), new BigDecimal(Math.PI), \"E\",\n\t\t\t\tArrays.asList(new String[] { \"Eggplant\", \"Ear\", \"Elephant\", \"Engine\" }), new Float(5.55), Feb21_2011, null }));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase#setup().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase#setup().mjava","sourceNew":"  @Before\n  public void setup() {\n    try {\n      APPLE = new SerialClob(new String(\"Apples grow on trees and they are good to eat.\").toCharArray());\n    } catch (SQLException sqe) {\n      Assert.fail(\"Could not Set up Test\");\n    }\n\n    // The first row needs to have all non-null fields,\n    // otherwise we would have to always send the fieldTypes & fieldNames as CacheProperties when building.\n    data = new ArrayList<ControlData>();\n    data.add(new ControlData(new Object[] { new Integer(1), new BigDecimal(Math.PI), \"A\", \"Apple\", new Float(1.11), Feb21_2011, APPLE }));\n    data.add(new ControlData(new Object[] { new Integer(2), new BigDecimal(Math.PI), \"B\", \"Ball\", new Float(2.22), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Dog\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(3), new BigDecimal(Math.PI), \"C\", \"Cookie\", new Float(3.33), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Daisy\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Drawing\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(5), new BigDecimal(Math.PI), \"E\",\n        Arrays.asList(\"Eggplant\", \"Ear\", \"Elephant\", \"Engine\"), new Float(5.55), Feb21_2011, null }));\n  }\n\n","sourceOld":"\t@Before\n\tpublic void setup() {\n\t\ttry {\n\t\t\tAPPLE = new SerialClob(new String(\"Apples grow on trees and they are good to eat.\").toCharArray());\n\t\t} catch (SQLException sqe) {\n\t\t\tAssert.fail(\"Could not Set up Test\");\n\t\t}\n\n\t\t// The first row needs to have all non-null fields,\n\t\t// otherwise we would have to always send the fieldTypes & fieldNames as CacheProperties when building.\n\t\tdata = new ArrayList<ControlData>();\n\t\tdata.add(new ControlData(new Object[] { new Integer(1), new BigDecimal(Math.PI), \"A\", \"Apple\", new Float(1.11), Feb21_2011, APPLE }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(2), new BigDecimal(Math.PI), \"B\", \"Ball\", new Float(2.22), Feb21_2011, null }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Dog\", new Float(4.44), Feb21_2011, null }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(3), new BigDecimal(Math.PI), \"C\", \"Cookie\", new Float(3.33), Feb21_2011, null }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Daisy\", new Float(4.44), Feb21_2011, null }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Drawing\", new Float(4.44), Feb21_2011, null }));\n\t\tdata.add(new ControlData(new Object[] { new Integer(5), new BigDecimal(Math.PI), \"E\",\n\t\t\t\tArrays.asList(\"Eggplant\", \"Ear\", \"Elephant\", \"Engine\"), new Float(5.55), Feb21_2011, null }));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase#setup().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase#setup().mjava","sourceNew":"  @Before\n  public void setup() {\n    try {\n      APPLE = new SerialClob(new String(\"Apples grow on trees and they are good to eat.\").toCharArray());\n    } catch (SQLException sqe) {\n      Assert.fail(\"Could not Set up Test\");\n    }\n\n    // The first row needs to have all non-null fields,\n    // otherwise we would have to always send the fieldTypes & fieldNames as CacheProperties when building.\n    data = new ArrayList<>();\n    data.add(new ControlData(new Object[] { new Integer(1), new BigDecimal(Math.PI), \"A\", \"Apple\", new Float(1.11), Feb21_2011, APPLE }));\n    data.add(new ControlData(new Object[] { new Integer(2), new BigDecimal(Math.PI), \"B\", \"Ball\", new Float(2.22), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Dog\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(3), new BigDecimal(Math.PI), \"C\", \"Cookie\", new Float(3.33), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Daisy\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Drawing\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(5), new BigDecimal(Math.PI), \"E\",\n        Arrays.asList(\"Eggplant\", \"Ear\", \"Elephant\", \"Engine\"), new Float(5.55), Feb21_2011, null }));\n  }\n\n","sourceOld":"  @Before\n  public void setup() {\n    try {\n      APPLE = new SerialClob(new String(\"Apples grow on trees and they are good to eat.\").toCharArray());\n    } catch (SQLException sqe) {\n      Assert.fail(\"Could not Set up Test\");\n    }\n\n    // The first row needs to have all non-null fields,\n    // otherwise we would have to always send the fieldTypes & fieldNames as CacheProperties when building.\n    data = new ArrayList<ControlData>();\n    data.add(new ControlData(new Object[] { new Integer(1), new BigDecimal(Math.PI), \"A\", \"Apple\", new Float(1.11), Feb21_2011, APPLE }));\n    data.add(new ControlData(new Object[] { new Integer(2), new BigDecimal(Math.PI), \"B\", \"Ball\", new Float(2.22), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Dog\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(3), new BigDecimal(Math.PI), \"C\", \"Cookie\", new Float(3.33), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Daisy\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Drawing\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(5), new BigDecimal(Math.PI), \"E\",\n        Arrays.asList(\"Eggplant\", \"Ear\", \"Elephant\", \"Engine\"), new Float(5.55), Feb21_2011, null }));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d72c1db036e3e6c3a62f3b82bbba46870c7e3c7","date":1490708104,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase#setup().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase#setup().mjava","sourceNew":"  @Before\n  public void setup() {\n    try {\n      APPLE = new SerialClob(\"Apples grow on trees and they are good to eat.\".toCharArray());\n    } catch (SQLException sqe) {\n      Assert.fail(\"Could not Set up Test\");\n    }\n\n    // The first row needs to have all non-null fields,\n    // otherwise we would have to always send the fieldTypes & fieldNames as CacheProperties when building.\n    data = new ArrayList<>();\n    data.add(new ControlData(new Object[] { new Integer(1), new BigDecimal(Math.PI), \"A\", \"Apple\", new Float(1.11), Feb21_2011, APPLE }));\n    data.add(new ControlData(new Object[] { new Integer(2), new BigDecimal(Math.PI), \"B\", \"Ball\", new Float(2.22), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Dog\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(3), new BigDecimal(Math.PI), \"C\", \"Cookie\", new Float(3.33), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Daisy\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Drawing\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(5), new BigDecimal(Math.PI), \"E\",\n        Arrays.asList(\"Eggplant\", \"Ear\", \"Elephant\", \"Engine\"), new Float(5.55), Feb21_2011, null }));\n  }\n\n","sourceOld":"  @Before\n  public void setup() {\n    try {\n      APPLE = new SerialClob(new String(\"Apples grow on trees and they are good to eat.\").toCharArray());\n    } catch (SQLException sqe) {\n      Assert.fail(\"Could not Set up Test\");\n    }\n\n    // The first row needs to have all non-null fields,\n    // otherwise we would have to always send the fieldTypes & fieldNames as CacheProperties when building.\n    data = new ArrayList<>();\n    data.add(new ControlData(new Object[] { new Integer(1), new BigDecimal(Math.PI), \"A\", \"Apple\", new Float(1.11), Feb21_2011, APPLE }));\n    data.add(new ControlData(new Object[] { new Integer(2), new BigDecimal(Math.PI), \"B\", \"Ball\", new Float(2.22), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Dog\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(3), new BigDecimal(Math.PI), \"C\", \"Cookie\", new Float(3.33), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Daisy\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Drawing\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(5), new BigDecimal(Math.PI), \"E\",\n        Arrays.asList(\"Eggplant\", \"Ear\", \"Elephant\", \"Engine\"), new Float(5.55), Feb21_2011, null }));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57df4f31144a04dc0e8382aed10ebfa82ef71a4d","date":1490873945,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase#setup().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase#setup().mjava","sourceNew":"  @Before\n  public void setup() {\n    try {\n      APPLE = new SerialClob(\"Apples grow on trees and they are good to eat.\".toCharArray());\n    } catch (SQLException sqe) {\n      Assert.fail(\"Could not Set up Test\");\n    }\n\n    // The first row needs to have all non-null fields,\n    // otherwise we would have to always send the fieldTypes & fieldNames as CacheProperties when building.\n    data = new ArrayList<>();\n    data.add(new ControlData(new Object[] { new Integer(1), new BigDecimal(Math.PI), \"A\", \"Apple\", new Float(1.11), Feb21_2011, APPLE }));\n    data.add(new ControlData(new Object[] { new Integer(2), new BigDecimal(Math.PI), \"B\", \"Ball\", new Float(2.22), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Dog\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(3), new BigDecimal(Math.PI), \"C\", \"Cookie\", new Float(3.33), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Daisy\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Drawing\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(5), new BigDecimal(Math.PI), \"E\",\n        Arrays.asList(\"Eggplant\", \"Ear\", \"Elephant\", \"Engine\"), new Float(5.55), Feb21_2011, null }));\n  }\n\n","sourceOld":"  @Before\n  public void setup() {\n    try {\n      APPLE = new SerialClob(new String(\"Apples grow on trees and they are good to eat.\").toCharArray());\n    } catch (SQLException sqe) {\n      Assert.fail(\"Could not Set up Test\");\n    }\n\n    // The first row needs to have all non-null fields,\n    // otherwise we would have to always send the fieldTypes & fieldNames as CacheProperties when building.\n    data = new ArrayList<>();\n    data.add(new ControlData(new Object[] { new Integer(1), new BigDecimal(Math.PI), \"A\", \"Apple\", new Float(1.11), Feb21_2011, APPLE }));\n    data.add(new ControlData(new Object[] { new Integer(2), new BigDecimal(Math.PI), \"B\", \"Ball\", new Float(2.22), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Dog\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(3), new BigDecimal(Math.PI), \"C\", \"Cookie\", new Float(3.33), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Daisy\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Drawing\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(5), new BigDecimal(Math.PI), \"E\",\n        Arrays.asList(\"Eggplant\", \"Ear\", \"Elephant\", \"Engine\"), new Float(5.55), Feb21_2011, null }));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase#setup().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase#setup().mjava","sourceNew":"  @Before\n  public void setup() {\n    try {\n      APPLE = new SerialClob(\"Apples grow on trees and they are good to eat.\".toCharArray());\n    } catch (SQLException sqe) {\n      Assert.fail(\"Could not Set up Test\");\n    }\n\n    // The first row needs to have all non-null fields,\n    // otherwise we would have to always send the fieldTypes & fieldNames as CacheProperties when building.\n    data = new ArrayList<>();\n    data.add(new ControlData(new Object[] {1, new BigDecimal(Math.PI), \"A\", \"Apple\", 1.11f, Feb21_2011, APPLE }));\n    data.add(new ControlData(new Object[] {2, new BigDecimal(Math.PI), \"B\", \"Ball\", 2.22f, Feb21_2011, null }));\n    data.add(new ControlData(new Object[] {4, new BigDecimal(Math.PI), \"D\", \"Dog\", 4.44f, Feb21_2011, null }));\n    data.add(new ControlData(new Object[] {3, new BigDecimal(Math.PI), \"C\", \"Cookie\", 3.33f, Feb21_2011, null }));\n    data.add(new ControlData(new Object[] {4, new BigDecimal(Math.PI), \"D\", \"Daisy\", 4.44f, Feb21_2011, null }));\n    data.add(new ControlData(new Object[] {4, new BigDecimal(Math.PI), \"D\", \"Drawing\", 4.44f, Feb21_2011, null }));\n    data.add(new ControlData(new Object[] {5, new BigDecimal(Math.PI), \"E\",\n        Arrays.asList(\"Eggplant\", \"Ear\", \"Elephant\", \"Engine\"), 5.55f, Feb21_2011, null }));\n  }\n\n","sourceOld":"  @Before\n  public void setup() {\n    try {\n      APPLE = new SerialClob(\"Apples grow on trees and they are good to eat.\".toCharArray());\n    } catch (SQLException sqe) {\n      Assert.fail(\"Could not Set up Test\");\n    }\n\n    // The first row needs to have all non-null fields,\n    // otherwise we would have to always send the fieldTypes & fieldNames as CacheProperties when building.\n    data = new ArrayList<>();\n    data.add(new ControlData(new Object[] { new Integer(1), new BigDecimal(Math.PI), \"A\", \"Apple\", new Float(1.11), Feb21_2011, APPLE }));\n    data.add(new ControlData(new Object[] { new Integer(2), new BigDecimal(Math.PI), \"B\", \"Ball\", new Float(2.22), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Dog\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(3), new BigDecimal(Math.PI), \"C\", \"Cookie\", new Float(3.33), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Daisy\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Drawing\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(5), new BigDecimal(Math.PI), \"E\",\n        Arrays.asList(\"Eggplant\", \"Ear\", \"Elephant\", \"Engine\"), new Float(5.55), Feb21_2011, null }));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase#setup().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase#setup().mjava","sourceNew":"  @Before\n  public void setup() {\n    try {\n      APPLE = new SerialClob(\"Apples grow on trees and they are good to eat.\".toCharArray());\n    } catch (SQLException sqe) {\n      Assert.fail(\"Could not Set up Test\");\n    }\n\n    // The first row needs to have all non-null fields,\n    // otherwise we would have to always send the fieldTypes & fieldNames as CacheProperties when building.\n    data = new ArrayList<>();\n    data.add(new ControlData(new Object[] {1, new BigDecimal(Math.PI), \"A\", \"Apple\", 1.11f, Feb21_2011, APPLE }));\n    data.add(new ControlData(new Object[] {2, new BigDecimal(Math.PI), \"B\", \"Ball\", 2.22f, Feb21_2011, null }));\n    data.add(new ControlData(new Object[] {4, new BigDecimal(Math.PI), \"D\", \"Dog\", 4.44f, Feb21_2011, null }));\n    data.add(new ControlData(new Object[] {3, new BigDecimal(Math.PI), \"C\", \"Cookie\", 3.33f, Feb21_2011, null }));\n    data.add(new ControlData(new Object[] {4, new BigDecimal(Math.PI), \"D\", \"Daisy\", 4.44f, Feb21_2011, null }));\n    data.add(new ControlData(new Object[] {4, new BigDecimal(Math.PI), \"D\", \"Drawing\", 4.44f, Feb21_2011, null }));\n    data.add(new ControlData(new Object[] {5, new BigDecimal(Math.PI), \"E\",\n        Arrays.asList(\"Eggplant\", \"Ear\", \"Elephant\", \"Engine\"), 5.55f, Feb21_2011, null }));\n  }\n\n","sourceOld":"  @Before\n  public void setup() {\n    try {\n      APPLE = new SerialClob(\"Apples grow on trees and they are good to eat.\".toCharArray());\n    } catch (SQLException sqe) {\n      Assert.fail(\"Could not Set up Test\");\n    }\n\n    // The first row needs to have all non-null fields,\n    // otherwise we would have to always send the fieldTypes & fieldNames as CacheProperties when building.\n    data = new ArrayList<>();\n    data.add(new ControlData(new Object[] { new Integer(1), new BigDecimal(Math.PI), \"A\", \"Apple\", new Float(1.11), Feb21_2011, APPLE }));\n    data.add(new ControlData(new Object[] { new Integer(2), new BigDecimal(Math.PI), \"B\", \"Ball\", new Float(2.22), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Dog\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(3), new BigDecimal(Math.PI), \"C\", \"Cookie\", new Float(3.33), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Daisy\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Drawing\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(5), new BigDecimal(Math.PI), \"E\",\n        Arrays.asList(\"Eggplant\", \"Ear\", \"Elephant\", \"Engine\"), new Float(5.55), Feb21_2011, null }));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase#setup().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase#setup().mjava","sourceNew":"  @Before\n  public void setup() {\n    try {\n      APPLE = new SerialClob(\"Apples grow on trees and they are good to eat.\".toCharArray());\n    } catch (SQLException sqe) {\n      Assert.fail(\"Could not Set up Test\");\n    }\n\n    // The first row needs to have all non-null fields,\n    // otherwise we would have to always send the fieldTypes & fieldNames as CacheProperties when building.\n    data = new ArrayList<>();\n    data.add(new ControlData(new Object[] {1, new BigDecimal(Math.PI), \"A\", \"Apple\", 1.11f, Feb21_2011, APPLE }));\n    data.add(new ControlData(new Object[] {2, new BigDecimal(Math.PI), \"B\", \"Ball\", 2.22f, Feb21_2011, null }));\n    data.add(new ControlData(new Object[] {4, new BigDecimal(Math.PI), \"D\", \"Dog\", 4.44f, Feb21_2011, null }));\n    data.add(new ControlData(new Object[] {3, new BigDecimal(Math.PI), \"C\", \"Cookie\", 3.33f, Feb21_2011, null }));\n    data.add(new ControlData(new Object[] {4, new BigDecimal(Math.PI), \"D\", \"Daisy\", 4.44f, Feb21_2011, null }));\n    data.add(new ControlData(new Object[] {4, new BigDecimal(Math.PI), \"D\", \"Drawing\", 4.44f, Feb21_2011, null }));\n    data.add(new ControlData(new Object[] {5, new BigDecimal(Math.PI), \"E\",\n        Arrays.asList(\"Eggplant\", \"Ear\", \"Elephant\", \"Engine\"), 5.55f, Feb21_2011, null }));\n  }\n\n","sourceOld":"  @Before\n  public void setup() {\n    try {\n      APPLE = new SerialClob(\"Apples grow on trees and they are good to eat.\".toCharArray());\n    } catch (SQLException sqe) {\n      Assert.fail(\"Could not Set up Test\");\n    }\n\n    // The first row needs to have all non-null fields,\n    // otherwise we would have to always send the fieldTypes & fieldNames as CacheProperties when building.\n    data = new ArrayList<>();\n    data.add(new ControlData(new Object[] { new Integer(1), new BigDecimal(Math.PI), \"A\", \"Apple\", new Float(1.11), Feb21_2011, APPLE }));\n    data.add(new ControlData(new Object[] { new Integer(2), new BigDecimal(Math.PI), \"B\", \"Ball\", new Float(2.22), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Dog\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(3), new BigDecimal(Math.PI), \"C\", \"Cookie\", new Float(3.33), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Daisy\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(4), new BigDecimal(Math.PI), \"D\", \"Drawing\", new Float(4.44), Feb21_2011, null }));\n    data.add(new ControlData(new Object[] { new Integer(5), new BigDecimal(Math.PI), \"E\",\n        Arrays.asList(\"Eggplant\", \"Ear\", \"Elephant\", \"Engine\"), new Float(5.55), Feb21_2011, null }));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase#setup().mjava","sourceNew":null,"sourceOld":"  @Before\n  public void setup() {\n    try {\n      APPLE = new SerialClob(\"Apples grow on trees and they are good to eat.\".toCharArray());\n    } catch (SQLException sqe) {\n      Assert.fail(\"Could not Set up Test\");\n    }\n\n    // The first row needs to have all non-null fields,\n    // otherwise we would have to always send the fieldTypes & fieldNames as CacheProperties when building.\n    data = new ArrayList<>();\n    data.add(new ControlData(new Object[] {1, new BigDecimal(Math.PI), \"A\", \"Apple\", 1.11f, Feb21_2011, APPLE }));\n    data.add(new ControlData(new Object[] {2, new BigDecimal(Math.PI), \"B\", \"Ball\", 2.22f, Feb21_2011, null }));\n    data.add(new ControlData(new Object[] {4, new BigDecimal(Math.PI), \"D\", \"Dog\", 4.44f, Feb21_2011, null }));\n    data.add(new ControlData(new Object[] {3, new BigDecimal(Math.PI), \"C\", \"Cookie\", 3.33f, Feb21_2011, null }));\n    data.add(new ControlData(new Object[] {4, new BigDecimal(Math.PI), \"D\", \"Daisy\", 4.44f, Feb21_2011, null }));\n    data.add(new ControlData(new Object[] {4, new BigDecimal(Math.PI), \"D\", \"Drawing\", 4.44f, Feb21_2011, null }));\n    data.add(new ControlData(new Object[] {5, new BigDecimal(Math.PI), \"E\",\n        Arrays.asList(\"Eggplant\", \"Ear\", \"Elephant\", \"Engine\"), 5.55f, Feb21_2011, null }));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["2d72c1db036e3e6c3a62f3b82bbba46870c7e3c7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["2d72c1db036e3e6c3a62f3b82bbba46870c7e3c7","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"3337b86edd36607f0208321f1deee79c55e5fd21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57df4f31144a04dc0e8382aed10ebfa82ef71a4d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"fae06511695f4be0bce5337deb3b3f813d0c3e7c":["3337b86edd36607f0208321f1deee79c55e5fd21"],"2d72c1db036e3e6c3a62f3b82bbba46870c7e3c7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["2d72c1db036e3e6c3a62f3b82bbba46870c7e3c7","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["fae06511695f4be0bce5337deb3b3f813d0c3e7c"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["57df4f31144a04dc0e8382aed10ebfa82ef71a4d","2d72c1db036e3e6c3a62f3b82bbba46870c7e3c7"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3337b86edd36607f0208321f1deee79c55e5fd21":["fae06511695f4be0bce5337deb3b3f813d0c3e7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3337b86edd36607f0208321f1deee79c55e5fd21"],"57df4f31144a04dc0e8382aed10ebfa82ef71a4d":[],"fae06511695f4be0bce5337deb3b3f813d0c3e7c":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"2d72c1db036e3e6c3a62f3b82bbba46870c7e3c7":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","57df4f31144a04dc0e8382aed10ebfa82ef71a4d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}