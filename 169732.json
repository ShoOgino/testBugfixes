{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testPeekElements().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testPeekElements().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPeekElements() throws Exception {\n    String dqZNode = \"/distqueue/test4\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // Populate with data.\n    dq.offer(data);\n    dq.offer(data);\n    dq.offer(data);\n\n    Predicate<String> alwaysTrue = s -> true;\n    Predicate<String> alwaysFalse = s -> false;\n\n    // Should be able to get 0, 1, 2, or 3 instantly\n    for (int i = 0; i <= 3; ++i) {\n      assertEquals(i, dq.peekElements(i, 0, alwaysTrue).size());\n    }\n\n    // Asking for more should return only 3.\n    assertEquals(3, dq.peekElements(4, 0, alwaysTrue).size());\n\n    // If we filter everything out, we should block for the full time.\n    long start = System.nanoTime();\n    assertEquals(0, dq.peekElements(4, 1000, alwaysFalse).size());\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(500));\n\n    // If someone adds a new matching element while we're waiting, we should return immediately.\n    executor.submit(() -> {\n      try {\n        Thread.sleep(500);\n        dq.offer(data);\n      } catch (Exception e) {\n        // ignore\n      }\n    });\n    start = System.nanoTime();\n    assertEquals(1, dq.peekElements(4, 2000, child -> {\n      // The 4th element in the queue will end with a \"3\".\n      return child.endsWith(\"3\");\n    }).size());\n    long elapsed = System.nanoTime() - start;\n    assertTrue(elapsed < TimeUnit.MILLISECONDS.toNanos(1000));\n    assertTrue(elapsed >= TimeUnit.MILLISECONDS.toNanos(250));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testPeekElements().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testPeekElements() throws Exception {\n    String dqZNode = \"/distqueue/test4\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // Populate with data.\n    dq.offer(data);\n    dq.offer(data);\n    dq.offer(data);\n\n    Predicate<String> alwaysTrue = s -> true;\n    Predicate<String> alwaysFalse = s -> false;\n\n    // Should be able to get 0, 1, 2, or 3 instantly\n    for (int i = 0; i <= 3; ++i) {\n      assertEquals(i, dq.peekElements(i, 0, alwaysTrue).size());\n    }\n\n    // Asking for more should return only 3.\n    assertEquals(3, dq.peekElements(4, 0, alwaysTrue).size());\n\n    // If we filter everything out, we should block for the full time.\n    long start = System.nanoTime();\n    assertEquals(0, dq.peekElements(4, 1000, alwaysFalse).size());\n    assertTrue(System.nanoTime() - start >= TimeUnit.MILLISECONDS.toNanos(500));\n\n    // If someone adds a new matching element while we're waiting, we should return immediately.\n    executor.submit(() -> {\n      try {\n        Thread.sleep(500);\n        dq.offer(data);\n      } catch (Exception e) {\n        // ignore\n      }\n    });\n    start = System.nanoTime();\n    assertEquals(1, dq.peekElements(4, 2000, child -> {\n      // The 4th element in the queue will end with a \"3\".\n      return child.endsWith(\"3\");\n    }).size());\n    long elapsed = System.nanoTime() - start;\n    assertTrue(elapsed < TimeUnit.MILLISECONDS.toNanos(1000));\n    assertTrue(elapsed >= TimeUnit.MILLISECONDS.toNanos(250));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}