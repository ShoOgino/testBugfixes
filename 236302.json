{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#testSomeSameSomeDifferent().mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#testSomeSameSomeDifferent().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestMultipleIndexFields#testSomeSameSomeDifferent().mjava","sourceNew":"  @Test\n  public void testSomeSameSomeDifferent() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    FacetsConfig config = getConfig(tw);\n    config.setIndexFieldName(\"Band\", \"$music\");\n    config.setIndexFieldName(\"Composer\", \"$music\");\n    config.setIndexFieldName(\"Author\", \"$literature\");\n    seedIndex(iw, config);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector sfc = performSearch(tr, ir, searcher);\n\n    Map<String,Facets> facetsMap = new HashMap<String,Facets>();\n    Facets facets2 = getTaxonomyFacetCounts(tr, config, sfc, \"$music\");\n    facetsMap.put(\"Band\", facets2);\n    facetsMap.put(\"Composer\", facets2);\n    facetsMap.put(\"Author\", getTaxonomyFacetCounts(tr, config, sfc, \"$literature\"));\n    Facets facets = new MultiFacets(facetsMap, getTaxonomyFacetCounts(tr, config, sfc));\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facets);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$literature\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSomeSameSomeDifferent() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    FacetsConfig config = getConfig(tw);\n    config.setIndexFieldName(\"Band\", \"$music\");\n    config.setIndexFieldName(\"Composer\", \"$music\");\n    config.setIndexFieldName(\"Author\", \"$literature\");\n    seedIndex(iw, config);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    SimpleFacetsCollector sfc = performSearch(tr, ir, searcher);\n\n    Map<String,Facets> facetsMap = new HashMap<String,Facets>();\n    Facets facets2 = getTaxonomyFacetCounts(tr, config, sfc, \"$music\");\n    facetsMap.put(\"Band\", facets2);\n    facetsMap.put(\"Composer\", facets2);\n    facetsMap.put(\"Author\", getTaxonomyFacetCounts(tr, config, sfc, \"$literature\"));\n    Facets facets = new MultiFacets(facetsMap, getTaxonomyFacetCounts(tr, config, sfc));\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facets);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$literature\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#testSomeSameSomeDifferent().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#testSomeSameSomeDifferent().mjava","sourceNew":"  @Test\n  public void testSomeSameSomeDifferent() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    FacetsConfig config = getConfig();\n    config.setIndexFieldName(\"Band\", \"$music\");\n    config.setIndexFieldName(\"Composer\", \"$music\");\n    config.setIndexFieldName(\"Author\", \"$literature\");\n    seedIndex(tw, iw, config);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector sfc = performSearch(tr, ir, searcher);\n\n    Map<String,Facets> facetsMap = new HashMap<String,Facets>();\n    Facets facets2 = getTaxonomyFacetCounts(tr, config, sfc, \"$music\");\n    facetsMap.put(\"Band\", facets2);\n    facetsMap.put(\"Composer\", facets2);\n    facetsMap.put(\"Author\", getTaxonomyFacetCounts(tr, config, sfc, \"$literature\"));\n    Facets facets = new MultiFacets(facetsMap, getTaxonomyFacetCounts(tr, config, sfc));\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facets);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$literature\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSomeSameSomeDifferent() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    FacetsConfig config = getConfig(tw);\n    config.setIndexFieldName(\"Band\", \"$music\");\n    config.setIndexFieldName(\"Composer\", \"$music\");\n    config.setIndexFieldName(\"Author\", \"$literature\");\n    seedIndex(iw, config);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector sfc = performSearch(tr, ir, searcher);\n\n    Map<String,Facets> facetsMap = new HashMap<String,Facets>();\n    Facets facets2 = getTaxonomyFacetCounts(tr, config, sfc, \"$music\");\n    facetsMap.put(\"Band\", facets2);\n    facetsMap.put(\"Composer\", facets2);\n    facetsMap.put(\"Author\", getTaxonomyFacetCounts(tr, config, sfc, \"$literature\"));\n    Facets facets = new MultiFacets(facetsMap, getTaxonomyFacetCounts(tr, config, sfc));\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facets);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$literature\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#testSomeSameSomeDifferent().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSomeSameSomeDifferent() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    FacetsConfig config = getConfig();\n    config.setIndexFieldName(\"Band\", \"$music\");\n    config.setIndexFieldName(\"Composer\", \"$music\");\n    config.setIndexFieldName(\"Author\", \"$literature\");\n    seedIndex(tw, iw, config);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector sfc = performSearch(tr, ir, searcher);\n\n    Map<String,Facets> facetsMap = new HashMap<String,Facets>();\n    Facets facets2 = getTaxonomyFacetCounts(tr, config, sfc, \"$music\");\n    facetsMap.put(\"Band\", facets2);\n    facetsMap.put(\"Composer\", facets2);\n    facetsMap.put(\"Author\", getTaxonomyFacetCounts(tr, config, sfc, \"$literature\"));\n    Facets facets = new MultiFacets(facetsMap, getTaxonomyFacetCounts(tr, config, sfc));\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facets);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$literature\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#testSomeSameSomeDifferent().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#testSomeSameSomeDifferent().mjava","sourceNew":"  @Test\n  public void testSomeSameSomeDifferent() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    FacetsConfig config = getConfig();\n    config.setIndexFieldName(\"Band\", \"$music\");\n    config.setIndexFieldName(\"Composer\", \"$music\");\n    config.setIndexFieldName(\"Author\", \"$literature\");\n    seedIndex(tw, iw, config);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector sfc = performSearch(tr, ir, searcher);\n\n    Map<String,Facets> facetsMap = new HashMap<>();\n    Facets facets2 = getTaxonomyFacetCounts(tr, config, sfc, \"$music\");\n    facetsMap.put(\"Band\", facets2);\n    facetsMap.put(\"Composer\", facets2);\n    facetsMap.put(\"Author\", getTaxonomyFacetCounts(tr, config, sfc, \"$literature\"));\n    Facets facets = new MultiFacets(facetsMap, getTaxonomyFacetCounts(tr, config, sfc));\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facets);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$literature\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSomeSameSomeDifferent() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    FacetsConfig config = getConfig();\n    config.setIndexFieldName(\"Band\", \"$music\");\n    config.setIndexFieldName(\"Composer\", \"$music\");\n    config.setIndexFieldName(\"Author\", \"$literature\");\n    seedIndex(tw, iw, config);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector sfc = performSearch(tr, ir, searcher);\n\n    Map<String,Facets> facetsMap = new HashMap<String,Facets>();\n    Facets facets2 = getTaxonomyFacetCounts(tr, config, sfc, \"$music\");\n    facetsMap.put(\"Band\", facets2);\n    facetsMap.put(\"Composer\", facets2);\n    facetsMap.put(\"Author\", getTaxonomyFacetCounts(tr, config, sfc, \"$literature\"));\n    Facets facets = new MultiFacets(facetsMap, getTaxonomyFacetCounts(tr, config, sfc));\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facets);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$literature\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#testSomeSameSomeDifferent().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#testSomeSameSomeDifferent().mjava","sourceNew":"  @Test\n  public void testSomeSameSomeDifferent() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    FacetsConfig config = getConfig();\n    config.setIndexFieldName(\"Band\", \"$music\");\n    config.setIndexFieldName(\"Composer\", \"$music\");\n    config.setIndexFieldName(\"Author\", \"$literature\");\n    seedIndex(tw, iw, config);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector sfc = performSearch(tr, ir, searcher);\n\n    Map<String,Facets> facetsMap = new HashMap<>();\n    Facets facets2 = getTaxonomyFacetCounts(tr, config, sfc, \"$music\");\n    facetsMap.put(\"Band\", facets2);\n    facetsMap.put(\"Composer\", facets2);\n    facetsMap.put(\"Author\", getTaxonomyFacetCounts(tr, config, sfc, \"$literature\"));\n    Facets facets = new MultiFacets(facetsMap, getTaxonomyFacetCounts(tr, config, sfc));\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facets);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$literature\", ir);\n\n    iw.shutdown();\n    IOUtils.close(tr, ir, iw, tw, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSomeSameSomeDifferent() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    FacetsConfig config = getConfig();\n    config.setIndexFieldName(\"Band\", \"$music\");\n    config.setIndexFieldName(\"Composer\", \"$music\");\n    config.setIndexFieldName(\"Author\", \"$literature\");\n    seedIndex(tw, iw, config);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector sfc = performSearch(tr, ir, searcher);\n\n    Map<String,Facets> facetsMap = new HashMap<>();\n    Facets facets2 = getTaxonomyFacetCounts(tr, config, sfc, \"$music\");\n    facetsMap.put(\"Band\", facets2);\n    facetsMap.put(\"Composer\", facets2);\n    facetsMap.put(\"Author\", getTaxonomyFacetCounts(tr, config, sfc, \"$literature\"));\n    Facets facets = new MultiFacets(facetsMap, getTaxonomyFacetCounts(tr, config, sfc));\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facets);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$literature\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#testSomeSameSomeDifferent().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#testSomeSameSomeDifferent().mjava","sourceNew":"  @Test\n  public void testSomeSameSomeDifferent() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    FacetsConfig config = getConfig();\n    config.setIndexFieldName(\"Band\", \"$music\");\n    config.setIndexFieldName(\"Composer\", \"$music\");\n    config.setIndexFieldName(\"Author\", \"$literature\");\n    seedIndex(tw, iw, config);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector sfc = performSearch(tr, ir, searcher);\n\n    Map<String,Facets> facetsMap = new HashMap<>();\n    Facets facets2 = getTaxonomyFacetCounts(tr, config, sfc, \"$music\");\n    facetsMap.put(\"Band\", facets2);\n    facetsMap.put(\"Composer\", facets2);\n    facetsMap.put(\"Author\", getTaxonomyFacetCounts(tr, config, sfc, \"$literature\"));\n    Facets facets = new MultiFacets(facetsMap, getTaxonomyFacetCounts(tr, config, sfc));\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facets);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$literature\", ir);\n\n    iw.shutdown();\n    IOUtils.close(tr, ir, iw, tw, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSomeSameSomeDifferent() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    FacetsConfig config = getConfig();\n    config.setIndexFieldName(\"Band\", \"$music\");\n    config.setIndexFieldName(\"Composer\", \"$music\");\n    config.setIndexFieldName(\"Author\", \"$literature\");\n    seedIndex(tw, iw, config);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector sfc = performSearch(tr, ir, searcher);\n\n    Map<String,Facets> facetsMap = new HashMap<>();\n    Facets facets2 = getTaxonomyFacetCounts(tr, config, sfc, \"$music\");\n    facetsMap.put(\"Band\", facets2);\n    facetsMap.put(\"Composer\", facets2);\n    facetsMap.put(\"Author\", getTaxonomyFacetCounts(tr, config, sfc, \"$literature\"));\n    Facets facets = new MultiFacets(facetsMap, getTaxonomyFacetCounts(tr, config, sfc));\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facets);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$literature\", ir);\n\n    iw.shutdown();\n    IOUtils.close(tr, ir, iw, tw, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#testSomeSameSomeDifferent().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#testSomeSameSomeDifferent().mjava","sourceNew":"  @Test\n  public void testSomeSameSomeDifferent() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    FacetsConfig config = getConfig();\n    config.setIndexFieldName(\"Band\", \"$music\");\n    config.setIndexFieldName(\"Composer\", \"$music\");\n    config.setIndexFieldName(\"Author\", \"$literature\");\n    seedIndex(tw, iw, config);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector sfc = performSearch(tr, ir, searcher);\n\n    Map<String,Facets> facetsMap = new HashMap<>();\n    Facets facets2 = getTaxonomyFacetCounts(tr, config, sfc, \"$music\");\n    facetsMap.put(\"Band\", facets2);\n    facetsMap.put(\"Composer\", facets2);\n    facetsMap.put(\"Author\", getTaxonomyFacetCounts(tr, config, sfc, \"$literature\"));\n    Facets facets = new MultiFacets(facetsMap, getTaxonomyFacetCounts(tr, config, sfc));\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facets);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$literature\", ir);\n\n    iw.close();\n    IOUtils.close(tr, ir, iw, tw, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSomeSameSomeDifferent() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    FacetsConfig config = getConfig();\n    config.setIndexFieldName(\"Band\", \"$music\");\n    config.setIndexFieldName(\"Composer\", \"$music\");\n    config.setIndexFieldName(\"Author\", \"$literature\");\n    seedIndex(tw, iw, config);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector sfc = performSearch(tr, ir, searcher);\n\n    Map<String,Facets> facetsMap = new HashMap<>();\n    Facets facets2 = getTaxonomyFacetCounts(tr, config, sfc, \"$music\");\n    facetsMap.put(\"Band\", facets2);\n    facetsMap.put(\"Composer\", facets2);\n    facetsMap.put(\"Author\", getTaxonomyFacetCounts(tr, config, sfc, \"$literature\"));\n    Facets facets = new MultiFacets(facetsMap, getTaxonomyFacetCounts(tr, config, sfc));\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facets);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$literature\", ir);\n\n    iw.shutdown();\n    IOUtils.close(tr, ir, iw, tw, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["21d36d0db865f7b84026b447bec653469a6e66df"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd83550e4b0bdd36e7d9dca9273264100782440b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}