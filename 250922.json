{"path":"solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() ); \n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase() ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase() ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() ); \n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase() ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase() ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() ); \n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase() ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase() ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() ); \n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase() ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase() ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() ); \n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase() ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase() ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b375ac28473e1310fa9ea99d95e9c6001e3719d5","date":1274116690,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() ); \n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() ); \n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase() ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase() ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6da674254994fc11839b3f6ad511ef8871a94f7","date":1293591321,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() ); \n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() ); \n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() ); \n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b6da674254994fc11839b3f6ad511ef8871a94f7":["b375ac28473e1310fa9ea99d95e9c6001e3719d5"],"70ad682703b8585f5d0a637efec044d57ec05efb":["b375ac28473e1310fa9ea99d95e9c6001e3719d5","b6da674254994fc11839b3f6ad511ef8871a94f7"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["b6da674254994fc11839b3f6ad511ef8871a94f7","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["b375ac28473e1310fa9ea99d95e9c6001e3719d5","b6da674254994fc11839b3f6ad511ef8871a94f7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["b6da674254994fc11839b3f6ad511ef8871a94f7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b375ac28473e1310fa9ea99d95e9c6001e3719d5":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b6da674254994fc11839b3f6ad511ef8871a94f7"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"b6da674254994fc11839b3f6ad511ef8871a94f7":["70ad682703b8585f5d0a637efec044d57ec05efb","c26f00b574427b55127e869b935845554afde1fa","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["b375ac28473e1310fa9ea99d95e9c6001e3719d5"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"b375ac28473e1310fa9ea99d95e9c6001e3719d5":["b6da674254994fc11839b3f6ad511ef8871a94f7","70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}