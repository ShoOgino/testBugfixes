{"path":"src/java/org/apache/lucene/index/IndexReader#indexExists(String).mjava","commits":[{"id":"5e316f9ea0ab451f736a2a2b65103c3910bfad8e","date":1009307680,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#indexExists(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * <code>false</code> is returned.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   */\n  public static boolean indexExists(String directory) {\n    return (new File(directory, \"segments\")).exists();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd6eb8b1d71f36e7d134adc278a3d27c2559414c","date":1118080332,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#indexExists(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#indexExists(String).mjava","sourceNew":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * <code>false</code> is returned.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   */\n  public static boolean indexExists(String directory) {\n    return (new File(directory, Constants.INDEX_SEGMENTS_FILENAME)).exists();\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * <code>false</code> is returned.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   */\n  public static boolean indexExists(String directory) {\n    return (new File(directory, \"segments\")).exists();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24157515079eea65faeec4e1dbb01fea58444c8e","date":1118343636,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#indexExists(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#indexExists(String).mjava","sourceNew":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * <code>false</code> is returned.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   */\n  public static boolean indexExists(String directory) {\n    return (new File(directory, IndexFileNames.SEGMENTS)).exists();\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * <code>false</code> is returned.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   */\n  public static boolean indexExists(String directory) {\n    return (new File(directory, Constants.INDEX_SEGMENTS_FILENAME)).exists();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#indexExists(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#indexExists(String).mjava","sourceNew":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * <code>false</code> is returned.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   */\n  public static boolean indexExists(String directory) {\n    return indexExists(new File(directory));\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * <code>false</code> is returned.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   */\n  public static boolean indexExists(String directory) {\n    return (new File(directory, IndexFileNames.SEGMENTS)).exists();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba712167ee848727018d8b77aa0c273839fbe15c","date":1244411561,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#indexExists(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#indexExists(String).mjava","sourceNew":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * <code>false</code> is returned.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #indexExists(Directory)} instead\n   */\n  public static boolean indexExists(String directory) {\n    return indexExists(new File(directory));\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * <code>false</code> is returned.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   */\n  public static boolean indexExists(String directory) {\n    return indexExists(new File(directory));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"082ab1b8bb93767e8e870fda3638b79d67035d3f","date":1251223359,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#indexExists(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#indexExists(String).mjava","sourceNew":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * <code>false</code> is returned.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @deprecated Use {@link #indexExists(Directory)} instead\n   *             This method will be removed in the 3.0 release.\n   * \n   */\n  public static boolean indexExists(String directory) {\n    return indexExists(new File(directory));\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * <code>false</code> is returned.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #indexExists(Directory)} instead\n   */\n  public static boolean indexExists(String directory) {\n    return indexExists(new File(directory));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexReader#indexExists(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * <code>false</code> is returned.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @deprecated Use {@link #indexExists(Directory)} instead\n   *             This method will be removed in the 3.0 release.\n   * \n   */\n  public static boolean indexExists(String directory) {\n    return indexExists(new File(directory));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["082ab1b8bb93767e8e870fda3638b79d67035d3f"],"fd6eb8b1d71f36e7d134adc278a3d27c2559414c":["5e316f9ea0ab451f736a2a2b65103c3910bfad8e"],"24157515079eea65faeec4e1dbb01fea58444c8e":["fd6eb8b1d71f36e7d134adc278a3d27c2559414c"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["24157515079eea65faeec4e1dbb01fea58444c8e"],"082ab1b8bb93767e8e870fda3638b79d67035d3f":["ba712167ee848727018d8b77aa0c273839fbe15c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5e316f9ea0ab451f736a2a2b65103c3910bfad8e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"ba712167ee848727018d8b77aa0c273839fbe15c":["284c1d3c8b19931bf6f312fae7470487f5d9e580"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fd6eb8b1d71f36e7d134adc278a3d27c2559414c":["24157515079eea65faeec4e1dbb01fea58444c8e"],"24157515079eea65faeec4e1dbb01fea58444c8e":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["ba712167ee848727018d8b77aa0c273839fbe15c"],"082ab1b8bb93767e8e870fda3638b79d67035d3f":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e316f9ea0ab451f736a2a2b65103c3910bfad8e"],"5e316f9ea0ab451f736a2a2b65103c3910bfad8e":["fd6eb8b1d71f36e7d134adc278a3d27c2559414c"],"ba712167ee848727018d8b77aa0c273839fbe15c":["082ab1b8bb93767e8e870fda3638b79d67035d3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}