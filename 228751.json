{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","commits":[{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Directory,String,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","sourceOld":"  public static void createIndex(Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, LuceneTestCaseJ4.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, LuceneTestCaseJ4.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00743482822ec0841b0344a37944b666e6a0228d","date":1313588663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(DocHelper.createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(DocHelper.createDocument(i, indexName, 4));\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(DocHelper.createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(DocHelper.createDocument(i, indexName, 4));\n    }\n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    w.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(DocHelper.createDocument(i, indexName, 4));\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Random,Directory,String,boolean).mjava","sourceNew":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(DocHelper.createDocument(i, indexName, 4));\n    }\n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    w.close();\n  }\n\n","sourceOld":"  public static void createIndex(Random random, Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, LuceneTestCase.newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(new LogDocMergePolicy()));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(DocHelper.createDocument(i, indexName, 4));\n    }\n    if (!multiSegment) {\n      w.forceMerge(1);\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["43b04c27924fe393e38e9f0986e32c634f261859","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"00743482822ec0841b0344a37944b666e6a0228d":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43b04c27924fe393e38e9f0986e32c634f261859"],"43b04c27924fe393e38e9f0986e32c634f261859":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["43b04c27924fe393e38e9f0986e32c634f261859"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a3776dccca01c11e7046323cfad46a3b4a471233":["43b04c27924fe393e38e9f0986e32c634f261859","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["00743482822ec0841b0344a37944b666e6a0228d"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"00743482822ec0841b0344a37944b666e6a0228d":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"43b04c27924fe393e38e9f0986e32c634f261859":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","00743482822ec0841b0344a37944b666e6a0228d","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["43b04c27924fe393e38e9f0986e32c634f261859"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}