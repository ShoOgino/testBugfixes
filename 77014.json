{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomy#dotest(int,int).mjava","commits":[{"id":"0cebe7d662ef6b6c677383085b295b9878ba1795","date":1337155300,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomy#dotest(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void dotest(int ncats, int range) throws Exception {\n    Directory dirs[] = new Directory[2];\n    Random random = random();\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[i]);\n      for (int j = 0; j < ncats; j++) {\n        String cat = Integer.toString(random.nextInt(range));\n        tw.addCategory(new CategoryPath(\"a\", cat));\n      }\n      tw.close();\n    }\n\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0]);\n    OrdinalMap map = randomOrdinalMap();\n    tw.addTaxonomy(dirs[1], map);\n    tw.close();\n    \n    validate(dirs[0], dirs[1], map);\n    \n    IOUtils.close(dirs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"533890d1266aa8169162ec556395d0c5d0377566","date":1337173867,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomy#dotest(int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomy#dotest(int,int).mjava","sourceNew":"  private void dotest(int ncats, final int range) throws Exception {\n    final AtomicInteger numCats = new AtomicInteger(ncats);\n    Directory dirs[] = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[i]);\n      Thread[] addThreads = new Thread[4];\n      for (int j = 0; j < addThreads.length; j++) {\n        addThreads[j] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();\n            while (numCats.decrementAndGet() > 0) {\n              String cat = Integer.toString(random.nextInt(range));\n              try {\n                tw.addCategory(new CategoryPath(\"a\", cat));\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n      }\n      \n      for (Thread t : addThreads) t.start();\n      for (Thread t : addThreads) t.join();\n      tw.close();\n    }\n\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0]);\n    OrdinalMap map = randomOrdinalMap();\n    tw.addTaxonomy(dirs[1], map);\n    tw.close();\n    \n    validate(dirs[0], dirs[1], map);\n    \n    IOUtils.close(dirs);\n  }\n\n","sourceOld":"  private void dotest(int ncats, int range) throws Exception {\n    Directory dirs[] = new Directory[2];\n    Random random = random();\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[i]);\n      for (int j = 0; j < ncats; j++) {\n        String cat = Integer.toString(random.nextInt(range));\n        tw.addCategory(new CategoryPath(\"a\", cat));\n      }\n      tw.close();\n    }\n\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0]);\n    OrdinalMap map = randomOrdinalMap();\n    tw.addTaxonomy(dirs[1], map);\n    tw.close();\n    \n    validate(dirs[0], dirs[1], map);\n    \n    IOUtils.close(dirs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomy#dotest(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void dotest(int ncats, final int range) throws Exception {\n    final AtomicInteger numCats = new AtomicInteger(ncats);\n    Directory dirs[] = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[i]);\n      Thread[] addThreads = new Thread[4];\n      for (int j = 0; j < addThreads.length; j++) {\n        addThreads[j] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();\n            while (numCats.decrementAndGet() > 0) {\n              String cat = Integer.toString(random.nextInt(range));\n              try {\n                tw.addCategory(new CategoryPath(\"a\", cat));\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n      }\n      \n      for (Thread t : addThreads) t.start();\n      for (Thread t : addThreads) t.join();\n      tw.close();\n    }\n\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0]);\n    OrdinalMap map = randomOrdinalMap();\n    tw.addTaxonomy(dirs[1], map);\n    tw.close();\n    \n    validate(dirs[0], dirs[1], map);\n    \n    IOUtils.close(dirs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomy#dotest(int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomy#dotest(int,int).mjava","sourceNew":"  private void dotest(int ncats, final int range) throws Exception {\n    final AtomicInteger numCats = new AtomicInteger(ncats);\n    Directory dirs[] = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[i]);\n      Thread[] addThreads = new Thread[4];\n      for (int j = 0; j < addThreads.length; j++) {\n        addThreads[j] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();\n            while (numCats.decrementAndGet() > 0) {\n              String cat = Integer.toString(random.nextInt(range));\n              try {\n                tw.addCategory(new FacetLabel(\"a\", cat));\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n      }\n      \n      for (Thread t : addThreads) t.start();\n      for (Thread t : addThreads) t.join();\n      tw.close();\n    }\n\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0]);\n    OrdinalMap map = randomOrdinalMap();\n    tw.addTaxonomy(dirs[1], map);\n    tw.close();\n    \n    validate(dirs[0], dirs[1], map);\n    \n    IOUtils.close(dirs);\n  }\n\n","sourceOld":"  private void dotest(int ncats, final int range) throws Exception {\n    final AtomicInteger numCats = new AtomicInteger(ncats);\n    Directory dirs[] = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[i]);\n      Thread[] addThreads = new Thread[4];\n      for (int j = 0; j < addThreads.length; j++) {\n        addThreads[j] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();\n            while (numCats.decrementAndGet() > 0) {\n              String cat = Integer.toString(random.nextInt(range));\n              try {\n                tw.addCategory(new CategoryPath(\"a\", cat));\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n      }\n      \n      for (Thread t : addThreads) t.start();\n      for (Thread t : addThreads) t.join();\n      tw.close();\n    }\n\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0]);\n    OrdinalMap map = randomOrdinalMap();\n    tw.addTaxonomy(dirs[1], map);\n    tw.close();\n    \n    validate(dirs[0], dirs[1], map);\n    \n    IOUtils.close(dirs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomy#dotest(int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomy#dotest(int,int).mjava","sourceNew":"  private void dotest(int ncats, final int range) throws Exception {\n    final AtomicInteger numCats = new AtomicInteger(ncats);\n    Directory dirs[] = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[i]);\n      Thread[] addThreads = new Thread[4];\n      for (int j = 0; j < addThreads.length; j++) {\n        addThreads[j] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();\n            while (numCats.decrementAndGet() > 0) {\n              String cat = Integer.toString(random.nextInt(range));\n              try {\n                tw.addCategory(new FacetLabel(\"a\", cat));\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n      }\n      \n      for (Thread t : addThreads) t.start();\n      for (Thread t : addThreads) t.join();\n      tw.close();\n    }\n\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0]);\n    OrdinalMap map = randomOrdinalMap();\n    tw.addTaxonomy(dirs[1], map);\n    tw.close();\n    \n    validate(dirs[0], dirs[1], map);\n    \n    IOUtils.close(dirs);\n  }\n\n","sourceOld":"  private void dotest(int ncats, final int range) throws Exception {\n    final AtomicInteger numCats = new AtomicInteger(ncats);\n    Directory dirs[] = new Directory[2];\n    for (int i = 0; i < dirs.length; i++) {\n      dirs[i] = newDirectory();\n      final DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[i]);\n      Thread[] addThreads = new Thread[4];\n      for (int j = 0; j < addThreads.length; j++) {\n        addThreads[j] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();\n            while (numCats.decrementAndGet() > 0) {\n              String cat = Integer.toString(random.nextInt(range));\n              try {\n                tw.addCategory(new CategoryPath(\"a\", cat));\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n      }\n      \n      for (Thread t : addThreads) t.start();\n      for (Thread t : addThreads) t.join();\n      tw.close();\n    }\n\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(dirs[0]);\n    OrdinalMap map = randomOrdinalMap();\n    tw.addTaxonomy(dirs[1], map);\n    tw.close();\n    \n    validate(dirs[0], dirs[1], map);\n    \n    IOUtils.close(dirs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0cebe7d662ef6b6c677383085b295b9878ba1795":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["533890d1266aa8169162ec556395d0c5d0377566","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"533890d1266aa8169162ec556395d0c5d0377566":["0cebe7d662ef6b6c677383085b295b9878ba1795"],"ef0d8a69209261514c5739c770bba706c2308450":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","533890d1266aa8169162ec556395d0c5d0377566"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["533890d1266aa8169162ec556395d0c5d0377566"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cebe7d662ef6b6c677383085b295b9878ba1795","ef0d8a69209261514c5739c770bba706c2308450"],"0cebe7d662ef6b6c677383085b295b9878ba1795":["533890d1266aa8169162ec556395d0c5d0377566"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"533890d1266aa8169162ec556395d0c5d0377566":["3cc728b07df73b197e6d940d27f9b08b63918f13","ef0d8a69209261514c5739c770bba706c2308450","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"ef0d8a69209261514c5739c770bba706c2308450":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}