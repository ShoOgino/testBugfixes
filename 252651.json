{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private Object readfromRegExp(String reStr, String value, String columnName, String gNames) {\n    String[] groupNames = null;\n    if(gNames != null && gNames.trim().length() >0){\n      groupNames =  gNames.split(\",\");\n    }\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = null;\n        Map<String ,String > map = null;\n        if(groupNames == null){\n          l = new ArrayList();\n        } else {\n          map =  new HashMap<String, String>();\n        }\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            if(l != null){\n              l.add(m.group(i));\n            } else if (map != null ){\n              if(i <= groupNames.length){\n                String nameOfGroup = groupNames[i-1];\n                if(nameOfGroup != null && nameOfGroup.trim().length() >0){\n                  map.put(nameOfGroup, m.group(i));\n                }\n              }\n            }\n          } catch (Exception e) {\n            LOG.warn(\"Parsing failed for field : \" + columnName, e);\n          }\n        }\n        return l == null ? map: l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private Object readfromRegExp(String reStr, String value, String columnName, String gNames) {\n    String[] groupNames = null;\n    if(gNames != null && gNames.trim().length() >0){\n      groupNames =  gNames.split(\",\");\n    }\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = null;\n        Map<String ,String > map = null;\n        if(groupNames == null){\n          l = new ArrayList();\n        } else {\n          map =  new HashMap<String, String>();\n        }\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            if(l != null){\n              l.add(m.group(i));\n            } else if (map != null ){\n              if(i <= groupNames.length){\n                String nameOfGroup = groupNames[i-1];\n                if(nameOfGroup != null && nameOfGroup.trim().length() >0){\n                  map.put(nameOfGroup, m.group(i));\n                }\n              }\n            }\n          } catch (Exception e) {\n            LOG.warn(\"Parsing failed for field : \" + columnName, e);\n          }\n        }\n        return l == null ? map: l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private Object readfromRegExp(String reStr, String value, String columnName, String gNames) {\n    String[] groupNames = null;\n    if(gNames != null && gNames.trim().length() >0){\n      groupNames =  gNames.split(\",\");\n    }\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = null;\n        Map<String ,String > map = null;\n        if(groupNames == null){\n          l = new ArrayList();\n        } else {\n          map =  new HashMap<String, String>();\n        }\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            if(l != null){\n              l.add(m.group(i));\n            } else if (map != null ){\n              if(i <= groupNames.length){\n                String nameOfGroup = groupNames[i-1];\n                if(nameOfGroup != null && nameOfGroup.trim().length() >0){\n                  map.put(nameOfGroup, m.group(i));\n                }\n              }\n            }\n          } catch (Exception e) {\n            LOG.warn(\"Parsing failed for field : \" + columnName, e);\n          }\n        }\n        return l == null ? map: l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private Object readfromRegExp(String reStr, String value, String columnName, String gNames) {\n    String[] groupNames = null;\n    if(gNames != null && gNames.trim().length() >0){\n      groupNames =  gNames.split(\",\");\n    }\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = null;\n        Map<String ,String > map = null;\n        if(groupNames == null){\n          l = new ArrayList();\n        } else {\n          map =  new HashMap<String, String>();\n        }\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            if(l != null){\n              l.add(m.group(i));\n            } else if (map != null ){\n              if(i <= groupNames.length){\n                String nameOfGroup = groupNames[i-1];\n                if(nameOfGroup != null && nameOfGroup.trim().length() >0){\n                  map.put(nameOfGroup, m.group(i));\n                }\n              }\n            }\n          } catch (Exception e) {\n            LOG.warn(\"Parsing failed for field : \" + columnName, e);\n          }\n        }\n        return l == null ? map: l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private Object readfromRegExp(String reStr, String value, String columnName, String gNames) {\n    String[] groupNames = null;\n    if(gNames != null && gNames.trim().length() >0){\n      groupNames =  gNames.split(\",\");\n    }\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = null;\n        Map<String ,String > map = null;\n        if(groupNames == null){\n          l = new ArrayList();\n        } else {\n          map =  new HashMap<>();\n        }\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            if(l != null){\n              l.add(m.group(i));\n            } else if (map != null ){\n              if(i <= groupNames.length){\n                String nameOfGroup = groupNames[i-1];\n                if(nameOfGroup != null && nameOfGroup.trim().length() >0){\n                  map.put(nameOfGroup, m.group(i));\n                }\n              }\n            }\n          } catch (Exception e) {\n            LOG.warn(\"Parsing failed for field : \" + columnName, e);\n          }\n        }\n        return l == null ? map: l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private Object readfromRegExp(String reStr, String value, String columnName, String gNames) {\n    String[] groupNames = null;\n    if(gNames != null && gNames.trim().length() >0){\n      groupNames =  gNames.split(\",\");\n    }\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = null;\n        Map<String ,String > map = null;\n        if(groupNames == null){\n          l = new ArrayList();\n        } else {\n          map =  new HashMap<String, String>();\n        }\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            if(l != null){\n              l.add(m.group(i));\n            } else if (map != null ){\n              if(i <= groupNames.length){\n                String nameOfGroup = groupNames[i-1];\n                if(nameOfGroup != null && nameOfGroup.trim().length() >0){\n                  map.put(nameOfGroup, m.group(i));\n                }\n              }\n            }\n          } catch (Exception e) {\n            LOG.warn(\"Parsing failed for field : \" + columnName, e);\n          }\n        }\n        return l == null ? map: l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private Object readfromRegExp(String reStr, String value, String columnName, String gNames) {\n    String[] groupNames = null;\n    if(gNames != null && gNames.trim().length() >0){\n      groupNames =  gNames.split(\",\");\n    }\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = null;\n        Map<String ,String > map = null;\n        if(groupNames == null){\n          l = new ArrayList();\n        } else {\n          map =  new HashMap<>();\n        }\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            if(l != null){\n              l.add(m.group(i));\n            } else if (map != null ){\n              if(i <= groupNames.length){\n                String nameOfGroup = groupNames[i-1];\n                if(nameOfGroup != null && nameOfGroup.trim().length() >0){\n                  map.put(nameOfGroup, m.group(i));\n                }\n              }\n            }\n          } catch (Exception e) {\n            log.warn(\"Parsing failed for field : \" + columnName, e);\n          }\n        }\n        return l == null ? map: l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private Object readfromRegExp(String reStr, String value, String columnName, String gNames) {\n    String[] groupNames = null;\n    if(gNames != null && gNames.trim().length() >0){\n      groupNames =  gNames.split(\",\");\n    }\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = null;\n        Map<String ,String > map = null;\n        if(groupNames == null){\n          l = new ArrayList();\n        } else {\n          map =  new HashMap<>();\n        }\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            if(l != null){\n              l.add(m.group(i));\n            } else if (map != null ){\n              if(i <= groupNames.length){\n                String nameOfGroup = groupNames[i-1];\n                if(nameOfGroup != null && nameOfGroup.trim().length() >0){\n                  map.put(nameOfGroup, m.group(i));\n                }\n              }\n            }\n          } catch (Exception e) {\n            LOG.warn(\"Parsing failed for field : \" + columnName, e);\n          }\n        }\n        return l == null ? map: l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private Object readfromRegExp(String reStr, String value, String columnName, String gNames) {\n    String[] groupNames = null;\n    if(gNames != null && gNames.trim().length() >0){\n      groupNames =  gNames.split(\",\");\n    }\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = null;\n        Map<String ,String > map = null;\n        if(groupNames == null){\n          l = new ArrayList();\n        } else {\n          map =  new HashMap<>();\n        }\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            if(l != null){\n              l.add(m.group(i));\n            } else if (map != null ){\n              if(i <= groupNames.length){\n                String nameOfGroup = groupNames[i-1];\n                if(nameOfGroup != null && nameOfGroup.trim().length() >0){\n                  map.put(nameOfGroup, m.group(i));\n                }\n              }\n            }\n          } catch (Exception e) {\n            log.warn(\"Parsing failed for field : \" + columnName, e);\n          }\n        }\n        return l == null ? map: l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private Object readfromRegExp(String reStr, String value, String columnName, String gNames) {\n    String[] groupNames = null;\n    if(gNames != null && gNames.trim().length() >0){\n      groupNames =  gNames.split(\",\");\n    }\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = null;\n        Map<String ,String > map = null;\n        if(groupNames == null){\n          l = new ArrayList();\n        } else {\n          map =  new HashMap<>();\n        }\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            if(l != null){\n              l.add(m.group(i));\n            } else if (map != null ){\n              if(i <= groupNames.length){\n                String nameOfGroup = groupNames[i-1];\n                if(nameOfGroup != null && nameOfGroup.trim().length() >0){\n                  map.put(nameOfGroup, m.group(i));\n                }\n              }\n            }\n          } catch (Exception e) {\n            log.warn(\"Parsing failed for field : \" + columnName, e);\n          }\n        }\n        return l == null ? map: l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private Object readfromRegExp(String reStr, String value, String columnName, String gNames) {\n    String[] groupNames = null;\n    if(gNames != null && gNames.trim().length() >0){\n      groupNames =  gNames.split(\",\");\n    }\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = null;\n        Map<String ,String > map = null;\n        if(groupNames == null){\n          l = new ArrayList();\n        } else {\n          map =  new HashMap<>();\n        }\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            if(l != null){\n              l.add(m.group(i));\n            } else if (map != null ){\n              if(i <= groupNames.length){\n                String nameOfGroup = groupNames[i-1];\n                if(nameOfGroup != null && nameOfGroup.trim().length() >0){\n                  map.put(nameOfGroup, m.group(i));\n                }\n              }\n            }\n          } catch (Exception e) {\n            log.warn(\"Parsing failed for field : \" + columnName, e);\n          }\n        }\n        return l == null ? map: l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private Object readfromRegExp(String reStr, String value, String columnName, String gNames) {\n    String[] groupNames = null;\n    if(gNames != null && gNames.trim().length() >0){\n      groupNames =  gNames.split(\",\");\n    }\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = null;\n        Map<String ,String > map = null;\n        if(groupNames == null){\n          l = new ArrayList();\n        } else {\n          map =  new HashMap<>();\n        }\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            if(l != null){\n              l.add(m.group(i));\n            } else if (map != null ){\n              if(i <= groupNames.length){\n                String nameOfGroup = groupNames[i-1];\n                if(nameOfGroup != null && nameOfGroup.trim().length() >0){\n                  map.put(nameOfGroup, m.group(i));\n                }\n              }\n            }\n          } catch (Exception e) {\n            log.warn(\"Parsing failed for field : \" + columnName, e);\n          }\n        }\n        return l == null ? map: l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private Object readfromRegExp(String reStr, String value, String columnName, String gNames) {\n    String[] groupNames = null;\n    if(gNames != null && gNames.trim().length() >0){\n      groupNames =  gNames.split(\",\");\n    }\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = null;\n        Map<String ,String > map = null;\n        if(groupNames == null){\n          l = new ArrayList();\n        } else {\n          map =  new HashMap<>();\n        }\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            if(l != null){\n              l.add(m.group(i));\n            } else if (map != null ){\n              if(i <= groupNames.length){\n                String nameOfGroup = groupNames[i-1];\n                if(nameOfGroup != null && nameOfGroup.trim().length() >0){\n                  map.put(nameOfGroup, m.group(i));\n                }\n              }\n            }\n          } catch (Exception e) {\n            log.warn(\"Parsing failed for field : {}\", columnName, e);\n          }\n        }\n        return l == null ? map: l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private Object readfromRegExp(String reStr, String value, String columnName, String gNames) {\n    String[] groupNames = null;\n    if(gNames != null && gNames.trim().length() >0){\n      groupNames =  gNames.split(\",\");\n    }\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = null;\n        Map<String ,String > map = null;\n        if(groupNames == null){\n          l = new ArrayList();\n        } else {\n          map =  new HashMap<>();\n        }\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            if(l != null){\n              l.add(m.group(i));\n            } else if (map != null ){\n              if(i <= groupNames.length){\n                String nameOfGroup = groupNames[i-1];\n                if(nameOfGroup != null && nameOfGroup.trim().length() >0){\n                  map.put(nameOfGroup, m.group(i));\n                }\n              }\n            }\n          } catch (Exception e) {\n            log.warn(\"Parsing failed for field : \" + columnName, e);\n          }\n        }\n        return l == null ? map: l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private Object readfromRegExp(String reStr, String value, String columnName, String gNames) {\n    String[] groupNames = null;\n    if(gNames != null && gNames.trim().length() >0){\n      groupNames =  gNames.split(\",\");\n    }\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = null;\n        Map<String ,String > map = null;\n        if(groupNames == null){\n          l = new ArrayList();\n        } else {\n          map =  new HashMap<>();\n        }\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            if(l != null){\n              l.add(m.group(i));\n            } else if (map != null ){\n              if(i <= groupNames.length){\n                String nameOfGroup = groupNames[i-1];\n                if(nameOfGroup != null && nameOfGroup.trim().length() >0){\n                  map.put(nameOfGroup, m.group(i));\n                }\n              }\n            }\n          } catch (Exception e) {\n            log.warn(\"Parsing failed for field : {}\", columnName, e);\n          }\n        }\n        return l == null ? map: l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private Object readfromRegExp(String reStr, String value, String columnName, String gNames) {\n    String[] groupNames = null;\n    if(gNames != null && gNames.trim().length() >0){\n      groupNames =  gNames.split(\",\");\n    }\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = null;\n        Map<String ,String > map = null;\n        if(groupNames == null){\n          l = new ArrayList();\n        } else {\n          map =  new HashMap<>();\n        }\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            if(l != null){\n              l.add(m.group(i));\n            } else if (map != null ){\n              if(i <= groupNames.length){\n                String nameOfGroup = groupNames[i-1];\n                if(nameOfGroup != null && nameOfGroup.trim().length() >0){\n                  map.put(nameOfGroup, m.group(i));\n                }\n              }\n            }\n          } catch (Exception e) {\n            log.warn(\"Parsing failed for field : {}\", columnName, e);\n          }\n        }\n        return l == null ? map: l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/RegexTransformer#readfromRegExp(String,String,String,String).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private Object readfromRegExp(String reStr, String value, String columnName, String gNames) {\n    String[] groupNames = null;\n    if(gNames != null && gNames.trim().length() >0){\n      groupNames =  gNames.split(\",\");\n    }\n    Pattern regexp = getPattern(reStr);\n    Matcher m = regexp.matcher(value);\n    if (m.find() && m.groupCount() > 0) {\n      if (m.groupCount() > 1) {\n        List l = null;\n        Map<String ,String > map = null;\n        if(groupNames == null){\n          l = new ArrayList();\n        } else {\n          map =  new HashMap<>();\n        }\n        for (int i = 1; i <= m.groupCount(); i++) {\n          try {\n            if(l != null){\n              l.add(m.group(i));\n            } else if (map != null ){\n              if(i <= groupNames.length){\n                String nameOfGroup = groupNames[i-1];\n                if(nameOfGroup != null && nameOfGroup.trim().length() >0){\n                  map.put(nameOfGroup, m.group(i));\n                }\n              }\n            }\n          } catch (Exception e) {\n            log.warn(\"Parsing failed for field : {}\", columnName, e);\n          }\n        }\n        return l == null ? map: l;\n      } else {\n        return m.group(1);\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"024e13388acbf5562fcbb77a129620982a5e2d79":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}