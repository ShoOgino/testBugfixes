{"path":"contrib/miscellaneous/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testHyperbolicSweetSpot().mjava","commits":[{"id":"6f9cbf33fc4a562e686c8dc8f92b7856f051b90a","date":1148592089,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/miscellaneous/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testHyperbolicSweetSpot().mjava","pathOld":"/dev/null","sourceNew":"  public void testHyperbolicSweetSpot() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity() {\n        public float tf(int freq) {\n          return hyperbolicTf(freq);\n        }\n      };\n    ss.setHyperbolicTfFactors(3.3f, 7.7f, Math.E, 5.0f);\n    \n    Similarity s = ss;\n\n    for (int i = 1; i <=1000; i++) {\n      assertTrue(\"MIN tf: i=\"+i+\" : s=\"+s.tf(i),\n                 3.3f <= s.tf(i));\n      assertTrue(\"MAX tf: i=\"+i+\" : s=\"+s.tf(i),\n                 s.tf(i) <= 7.7f);\n    }\n    assertEquals(\"MID tf\", 3.3f+(7.7f - 3.3f)/2.0f, s.tf(5), 0.00001f);\n    \n    // stupidity\n    assertEquals(\"tf zero\", 0.0f, s.tf(0), 0.0f);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b799defcfda6d303cbb180917bf1e749089adf42"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testHyperbolicSweetSpot().mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testHyperbolicSweetSpot().mjava","sourceNew":"  public void testHyperbolicSweetSpot() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity() {\n        public float tf(int freq) {\n          return hyperbolicTf(freq);\n        }\n      };\n    ss.setHyperbolicTfFactors(3.3f, 7.7f, Math.E, 5.0f);\n    \n    Similarity s = ss;\n\n    for (int i = 1; i <=1000; i++) {\n      assertTrue(\"MIN tf: i=\"+i+\" : s=\"+s.tf(i),\n                 3.3f <= s.tf(i));\n      assertTrue(\"MAX tf: i=\"+i+\" : s=\"+s.tf(i),\n                 s.tf(i) <= 7.7f);\n    }\n    assertEquals(\"MID tf\", 3.3f+(7.7f - 3.3f)/2.0f, s.tf(5), 0.00001f);\n    \n    // stupidity\n    assertEquals(\"tf zero\", 0.0f, s.tf(0), 0.0f);\n    \n  }\n\n","sourceOld":"  public void testHyperbolicSweetSpot() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity() {\n        public float tf(int freq) {\n          return hyperbolicTf(freq);\n        }\n      };\n    ss.setHyperbolicTfFactors(3.3f, 7.7f, Math.E, 5.0f);\n    \n    Similarity s = ss;\n\n    for (int i = 1; i <=1000; i++) {\n      assertTrue(\"MIN tf: i=\"+i+\" : s=\"+s.tf(i),\n                 3.3f <= s.tf(i));\n      assertTrue(\"MAX tf: i=\"+i+\" : s=\"+s.tf(i),\n                 s.tf(i) <= 7.7f);\n    }\n    assertEquals(\"MID tf\", 3.3f+(7.7f - 3.3f)/2.0f, s.tf(5), 0.00001f);\n    \n    // stupidity\n    assertEquals(\"tf zero\", 0.0f, s.tf(0), 0.0f);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["6f9cbf33fc4a562e686c8dc8f92b7856f051b90a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f9cbf33fc4a562e686c8dc8f92b7856f051b90a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f9cbf33fc4a562e686c8dc8f92b7856f051b90a"],"6f9cbf33fc4a562e686c8dc8f92b7856f051b90a":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}