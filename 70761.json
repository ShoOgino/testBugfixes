{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testChildrenArraysInvariants().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testChildrenArraysInvariants().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testChildrenArraysInvariants().mjava","sourceNew":"  /**\n   * Similar to testChildrenArrays, except rather than look at\n   * expected results, we test for several \"invariants\" that the results\n   * should uphold, e.g., that a child of a category indeed has this category\n   * as its parent. This sort of test can more easily be extended to larger\n   * example taxonomies, because we do not need to build the expected list\n   * of categories like we did in the above test.\n   */\n  @Test\n  public void testChildrenArraysInvariants() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    ChildrenArrays ca = tr.getChildrenArrays();\n    int[] youngestChildArray = ca.getYoungestChildArray();\n    assertEquals(tr.getSize(), youngestChildArray.length);\n    int[] olderSiblingArray = ca.getOlderSiblingArray();\n    assertEquals(tr.getSize(), olderSiblingArray.length);\n        \n    // test that the \"youngest child\" of every category is indeed a child:\n    for (int i=0; i<tr.getSize(); i++) {\n      int youngestChild = youngestChildArray[i];\n      if (youngestChild != TaxonomyReader.INVALID_ORDINAL) {\n        assertEquals(i, tr.getParent(youngestChild));\n      }\n    }\n        \n    // test that the \"older sibling\" of every category is indeed older (lower)\n    // (it can also be INVALID_ORDINAL, which is lower than any ordinal)\n    for (int i=0; i<tr.getSize(); i++) {\n      assertTrue(\"olderSiblingArray[\"+i+\"] should be <\"+i, olderSiblingArray[i] < i);\n    }\n    \n    // test that the \"older sibling\" of every category is indeed a sibling\n    // (they share the same parent)\n    for (int i=0; i<tr.getSize(); i++) {\n      int sibling = olderSiblingArray[i];\n      if (sibling == TaxonomyReader.INVALID_ORDINAL) {\n        continue;\n      }\n      assertEquals(tr.getParent(i), tr.getParent(sibling));\n    }\n    \n    // And now for slightly more complex (and less \"invariant-like\"...)\n    // tests:\n    \n    // test that the \"youngest child\" is indeed the youngest (so we don't\n    // miss the first children in the chain)\n    for (int i=0; i<tr.getSize(); i++) {\n      // Find the really youngest child:\n      int j;\n      for (j=tr.getSize()-1; j>i; j--) {\n        if (tr.getParent(j)==i) {\n          break; // found youngest child\n        }\n      }\n      if (j==i) { // no child found\n        j=TaxonomyReader.INVALID_ORDINAL;\n      }\n      assertEquals(j, youngestChildArray[i]);\n    }\n\n    // test that the \"older sibling\" is indeed the least oldest one - and\n    // not a too old one or -1 (so we didn't miss some children in the\n    // middle or the end of the chain).\n    for (int i=0; i<tr.getSize(); i++) {\n      // Find the youngest older sibling:\n      int j;\n      for (j=i-1; j>=0; j--) {\n        if (tr.getParent(j)==tr.getParent(i)) {\n          break; // found youngest older sibling\n        }\n      }\n      if (j<0) { // no sibling found\n        j=TaxonomyReader.INVALID_ORDINAL;\n      }\n      assertEquals(j, olderSiblingArray[i]);\n    }\n  \n    tr.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**\n   * Similar to testChildrenArrays, except rather than look at\n   * expected results, we test for several \"invariants\" that the results\n   * should uphold, e.g., that a child of a category indeed has this category\n   * as its parent. This sort of test can more easily be extended to larger\n   * example taxonomies, because we do not need to build the expected list\n   * of categories like we did in the above test.\n   */\n  @Test\n  public void testChildrenArraysInvariants() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    ChildrenArrays ca = tr.getChildrenArrays();\n    int[] youngestChildArray = ca.getYoungestChildArray();\n    assertEquals(tr.getSize(), youngestChildArray.length);\n    int[] olderSiblingArray = ca.getOlderSiblingArray();\n    assertEquals(tr.getSize(), olderSiblingArray.length);\n        \n    // test that the \"youngest child\" of every category is indeed a child:\n    for (int i=0; i<tr.getSize(); i++) {\n      int youngestChild = youngestChildArray[i];\n      if (youngestChild != TaxonomyReader.INVALID_ORDINAL) {\n        assertEquals(i, tr.getParent(youngestChild));\n      }\n    }\n        \n    // test that the \"older sibling\" of every category is indeed older (lower)\n    // (it can also be INVALID_ORDINAL, which is lower than any ordinal)\n    for (int i=0; i<tr.getSize(); i++) {\n      assertTrue(\"olderSiblingArray[\"+i+\"] should be <\"+i, olderSiblingArray[i] < i);\n    }\n    \n    // test that the \"older sibling\" of every category is indeed a sibling\n    // (they share the same parent)\n    for (int i=0; i<tr.getSize(); i++) {\n      int sibling = olderSiblingArray[i];\n      if (sibling == TaxonomyReader.INVALID_ORDINAL) {\n        continue;\n      }\n      assertEquals(tr.getParent(i), tr.getParent(sibling));\n    }\n    \n    // And now for slightly more complex (and less \"invariant-like\"...)\n    // tests:\n    \n    // test that the \"youngest child\" is indeed the youngest (so we don't\n    // miss the first children in the chain)\n    for (int i=0; i<tr.getSize(); i++) {\n      // Find the really youngest child:\n      int j;\n      for (j=tr.getSize()-1; j>i; j--) {\n        if (tr.getParent(j)==i) {\n          break; // found youngest child\n        }\n      }\n      if (j==i) { // no child found\n        j=TaxonomyReader.INVALID_ORDINAL;\n      }\n      assertEquals(j, youngestChildArray[i]);\n    }\n\n    // test that the \"older sibling\" is indeed the least oldest one - and\n    // not a too old one or -1 (so we didn't miss some children in the\n    // middle or the end of the chain).\n    for (int i=0; i<tr.getSize(); i++) {\n      // Find the youngest older sibling:\n      int j;\n      for (j=i-1; j>=0; j--) {\n        if (tr.getParent(j)==tr.getParent(i)) {\n          break; // found youngest older sibling\n        }\n      }\n      if (j<0) { // no sibling found\n        j=TaxonomyReader.INVALID_ORDINAL;\n      }\n      assertEquals(j, olderSiblingArray[i]);\n    }\n  \n    tr.close();\n    indexDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d58d08788c3fd51172ba34474cca42499d6391b","date":1354802133,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testChildrenArraysInvariants().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testChildrenArraysInvariants().mjava","sourceNew":"  /**\n   * Similar to testChildrenArrays, except rather than look at\n   * expected results, we test for several \"invariants\" that the results\n   * should uphold, e.g., that a child of a category indeed has this category\n   * as its parent. This sort of test can more easily be extended to larger\n   * example taxonomies, because we do not need to build the expected list\n   * of categories like we did in the above test.\n   */\n  @Test\n  public void testChildrenArraysInvariants() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    ParallelTaxonomyArrays ca = tr.getParallelTaxonomyArrays();\n    int[] children = ca.children();\n    assertEquals(tr.getSize(), children.length);\n    int[] olderSiblingArray = ca.siblings();\n    assertEquals(tr.getSize(), olderSiblingArray.length);\n        \n    // test that the \"youngest child\" of every category is indeed a child:\n    for (int i=0; i<tr.getSize(); i++) {\n      int youngestChild = children[i];\n      if (youngestChild != TaxonomyReader.INVALID_ORDINAL) {\n        assertEquals(i, tr.getParent(youngestChild));\n      }\n    }\n        \n    // test that the \"older sibling\" of every category is indeed older (lower)\n    // (it can also be INVALID_ORDINAL, which is lower than any ordinal)\n    for (int i=0; i<tr.getSize(); i++) {\n      assertTrue(\"olderSiblingArray[\"+i+\"] should be <\"+i, olderSiblingArray[i] < i);\n    }\n    \n    // test that the \"older sibling\" of every category is indeed a sibling\n    // (they share the same parent)\n    for (int i=0; i<tr.getSize(); i++) {\n      int sibling = olderSiblingArray[i];\n      if (sibling == TaxonomyReader.INVALID_ORDINAL) {\n        continue;\n      }\n      assertEquals(tr.getParent(i), tr.getParent(sibling));\n    }\n    \n    // And now for slightly more complex (and less \"invariant-like\"...)\n    // tests:\n    \n    // test that the \"youngest child\" is indeed the youngest (so we don't\n    // miss the first children in the chain)\n    for (int i=0; i<tr.getSize(); i++) {\n      // Find the really youngest child:\n      int j;\n      for (j=tr.getSize()-1; j>i; j--) {\n        if (tr.getParent(j)==i) {\n          break; // found youngest child\n        }\n      }\n      if (j==i) { // no child found\n        j=TaxonomyReader.INVALID_ORDINAL;\n      }\n      assertEquals(j, children[i]);\n    }\n\n    // test that the \"older sibling\" is indeed the least oldest one - and\n    // not a too old one or -1 (so we didn't miss some children in the\n    // middle or the end of the chain).\n    for (int i=0; i<tr.getSize(); i++) {\n      // Find the youngest older sibling:\n      int j;\n      for (j=i-1; j>=0; j--) {\n        if (tr.getParent(j)==tr.getParent(i)) {\n          break; // found youngest older sibling\n        }\n      }\n      if (j<0) { // no sibling found\n        j=TaxonomyReader.INVALID_ORDINAL;\n      }\n      assertEquals(j, olderSiblingArray[i]);\n    }\n  \n    tr.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**\n   * Similar to testChildrenArrays, except rather than look at\n   * expected results, we test for several \"invariants\" that the results\n   * should uphold, e.g., that a child of a category indeed has this category\n   * as its parent. This sort of test can more easily be extended to larger\n   * example taxonomies, because we do not need to build the expected list\n   * of categories like we did in the above test.\n   */\n  @Test\n  public void testChildrenArraysInvariants() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    ChildrenArrays ca = tr.getChildrenArrays();\n    int[] youngestChildArray = ca.getYoungestChildArray();\n    assertEquals(tr.getSize(), youngestChildArray.length);\n    int[] olderSiblingArray = ca.getOlderSiblingArray();\n    assertEquals(tr.getSize(), olderSiblingArray.length);\n        \n    // test that the \"youngest child\" of every category is indeed a child:\n    for (int i=0; i<tr.getSize(); i++) {\n      int youngestChild = youngestChildArray[i];\n      if (youngestChild != TaxonomyReader.INVALID_ORDINAL) {\n        assertEquals(i, tr.getParent(youngestChild));\n      }\n    }\n        \n    // test that the \"older sibling\" of every category is indeed older (lower)\n    // (it can also be INVALID_ORDINAL, which is lower than any ordinal)\n    for (int i=0; i<tr.getSize(); i++) {\n      assertTrue(\"olderSiblingArray[\"+i+\"] should be <\"+i, olderSiblingArray[i] < i);\n    }\n    \n    // test that the \"older sibling\" of every category is indeed a sibling\n    // (they share the same parent)\n    for (int i=0; i<tr.getSize(); i++) {\n      int sibling = olderSiblingArray[i];\n      if (sibling == TaxonomyReader.INVALID_ORDINAL) {\n        continue;\n      }\n      assertEquals(tr.getParent(i), tr.getParent(sibling));\n    }\n    \n    // And now for slightly more complex (and less \"invariant-like\"...)\n    // tests:\n    \n    // test that the \"youngest child\" is indeed the youngest (so we don't\n    // miss the first children in the chain)\n    for (int i=0; i<tr.getSize(); i++) {\n      // Find the really youngest child:\n      int j;\n      for (j=tr.getSize()-1; j>i; j--) {\n        if (tr.getParent(j)==i) {\n          break; // found youngest child\n        }\n      }\n      if (j==i) { // no child found\n        j=TaxonomyReader.INVALID_ORDINAL;\n      }\n      assertEquals(j, youngestChildArray[i]);\n    }\n\n    // test that the \"older sibling\" is indeed the least oldest one - and\n    // not a too old one or -1 (so we didn't miss some children in the\n    // middle or the end of the chain).\n    for (int i=0; i<tr.getSize(); i++) {\n      // Find the youngest older sibling:\n      int j;\n      for (j=i-1; j>=0; j--) {\n        if (tr.getParent(j)==tr.getParent(i)) {\n          break; // found youngest older sibling\n        }\n      }\n      if (j<0) { // no sibling found\n        j=TaxonomyReader.INVALID_ORDINAL;\n      }\n      assertEquals(j, olderSiblingArray[i]);\n    }\n  \n    tr.close();\n    indexDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testChildrenArraysInvariants().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testChildrenArraysInvariants().mjava","sourceNew":"  /**\n   * Similar to testChildrenArrays, except rather than look at\n   * expected results, we test for several \"invariants\" that the results\n   * should uphold, e.g., that a child of a category indeed has this category\n   * as its parent. This sort of test can more easily be extended to larger\n   * example taxonomies, because we do not need to build the expected list\n   * of categories like we did in the above test.\n   */\n  @Test\n  public void testChildrenArraysInvariants() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    ParallelTaxonomyArrays ca = tr.getParallelTaxonomyArrays();\n    int[] children = ca.children();\n    assertEquals(tr.getSize(), children.length);\n    int[] olderSiblingArray = ca.siblings();\n    assertEquals(tr.getSize(), olderSiblingArray.length);\n        \n    // test that the \"youngest child\" of every category is indeed a child:\n    for (int i=0; i<tr.getSize(); i++) {\n      int youngestChild = children[i];\n      if (youngestChild != TaxonomyReader.INVALID_ORDINAL) {\n        assertEquals(i, tr.getParent(youngestChild));\n      }\n    }\n        \n    // test that the \"older sibling\" of every category is indeed older (lower)\n    // (it can also be INVALID_ORDINAL, which is lower than any ordinal)\n    for (int i=0; i<tr.getSize(); i++) {\n      assertTrue(\"olderSiblingArray[\"+i+\"] should be <\"+i, olderSiblingArray[i] < i);\n    }\n    \n    // test that the \"older sibling\" of every category is indeed a sibling\n    // (they share the same parent)\n    for (int i=0; i<tr.getSize(); i++) {\n      int sibling = olderSiblingArray[i];\n      if (sibling == TaxonomyReader.INVALID_ORDINAL) {\n        continue;\n      }\n      assertEquals(tr.getParent(i), tr.getParent(sibling));\n    }\n    \n    // And now for slightly more complex (and less \"invariant-like\"...)\n    // tests:\n    \n    // test that the \"youngest child\" is indeed the youngest (so we don't\n    // miss the first children in the chain)\n    for (int i=0; i<tr.getSize(); i++) {\n      // Find the really youngest child:\n      int j;\n      for (j=tr.getSize()-1; j>i; j--) {\n        if (tr.getParent(j)==i) {\n          break; // found youngest child\n        }\n      }\n      if (j==i) { // no child found\n        j=TaxonomyReader.INVALID_ORDINAL;\n      }\n      assertEquals(j, children[i]);\n    }\n\n    // test that the \"older sibling\" is indeed the least oldest one - and\n    // not a too old one or -1 (so we didn't miss some children in the\n    // middle or the end of the chain).\n    for (int i=0; i<tr.getSize(); i++) {\n      // Find the youngest older sibling:\n      int j;\n      for (j=i-1; j>=0; j--) {\n        if (tr.getParent(j)==tr.getParent(i)) {\n          break; // found youngest older sibling\n        }\n      }\n      if (j<0) { // no sibling found\n        j=TaxonomyReader.INVALID_ORDINAL;\n      }\n      assertEquals(j, olderSiblingArray[i]);\n    }\n  \n    tr.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**\n   * Similar to testChildrenArrays, except rather than look at\n   * expected results, we test for several \"invariants\" that the results\n   * should uphold, e.g., that a child of a category indeed has this category\n   * as its parent. This sort of test can more easily be extended to larger\n   * example taxonomies, because we do not need to build the expected list\n   * of categories like we did in the above test.\n   */\n  @Test\n  public void testChildrenArraysInvariants() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    ChildrenArrays ca = tr.getChildrenArrays();\n    int[] youngestChildArray = ca.getYoungestChildArray();\n    assertEquals(tr.getSize(), youngestChildArray.length);\n    int[] olderSiblingArray = ca.getOlderSiblingArray();\n    assertEquals(tr.getSize(), olderSiblingArray.length);\n        \n    // test that the \"youngest child\" of every category is indeed a child:\n    for (int i=0; i<tr.getSize(); i++) {\n      int youngestChild = youngestChildArray[i];\n      if (youngestChild != TaxonomyReader.INVALID_ORDINAL) {\n        assertEquals(i, tr.getParent(youngestChild));\n      }\n    }\n        \n    // test that the \"older sibling\" of every category is indeed older (lower)\n    // (it can also be INVALID_ORDINAL, which is lower than any ordinal)\n    for (int i=0; i<tr.getSize(); i++) {\n      assertTrue(\"olderSiblingArray[\"+i+\"] should be <\"+i, olderSiblingArray[i] < i);\n    }\n    \n    // test that the \"older sibling\" of every category is indeed a sibling\n    // (they share the same parent)\n    for (int i=0; i<tr.getSize(); i++) {\n      int sibling = olderSiblingArray[i];\n      if (sibling == TaxonomyReader.INVALID_ORDINAL) {\n        continue;\n      }\n      assertEquals(tr.getParent(i), tr.getParent(sibling));\n    }\n    \n    // And now for slightly more complex (and less \"invariant-like\"...)\n    // tests:\n    \n    // test that the \"youngest child\" is indeed the youngest (so we don't\n    // miss the first children in the chain)\n    for (int i=0; i<tr.getSize(); i++) {\n      // Find the really youngest child:\n      int j;\n      for (j=tr.getSize()-1; j>i; j--) {\n        if (tr.getParent(j)==i) {\n          break; // found youngest child\n        }\n      }\n      if (j==i) { // no child found\n        j=TaxonomyReader.INVALID_ORDINAL;\n      }\n      assertEquals(j, youngestChildArray[i]);\n    }\n\n    // test that the \"older sibling\" is indeed the least oldest one - and\n    // not a too old one or -1 (so we didn't miss some children in the\n    // middle or the end of the chain).\n    for (int i=0; i<tr.getSize(); i++) {\n      // Find the youngest older sibling:\n      int j;\n      for (j=i-1; j>=0; j--) {\n        if (tr.getParent(j)==tr.getParent(i)) {\n          break; // found youngest older sibling\n        }\n      }\n      if (j<0) { // no sibling found\n        j=TaxonomyReader.INVALID_ORDINAL;\n      }\n      assertEquals(j, olderSiblingArray[i]);\n    }\n  \n    tr.close();\n    indexDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29e1a91414f603bce5a59a5cb61fa8603997de87","date":1363597288,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testChildrenArraysInvariants().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testChildrenArraysInvariants().mjava","sourceNew":"  /**\n   * Similar to testChildrenArrays, except rather than look at\n   * expected results, we test for several \"invariants\" that the results\n   * should uphold, e.g., that a child of a category indeed has this category\n   * as its parent. This sort of test can more easily be extended to larger\n   * example taxonomies, because we do not need to build the expected list\n   * of categories like we did in the above test.\n   */\n  @Test\n  public void testChildrenArraysInvariants() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    ParallelTaxonomyArrays ca = tr.getParallelTaxonomyArrays();\n    int[] children = ca.children();\n    assertEquals(tr.getSize(), children.length);\n    int[] olderSiblingArray = ca.siblings();\n    assertEquals(tr.getSize(), olderSiblingArray.length);\n        \n    // test that the \"youngest child\" of every category is indeed a child:\n    int[] parents = tr.getParallelTaxonomyArrays().parents();\n    for (int i=0; i<tr.getSize(); i++) {\n      int youngestChild = children[i];\n      if (youngestChild != TaxonomyReader.INVALID_ORDINAL) {\n        assertEquals(i, parents[youngestChild]);\n      }\n    }\n        \n    // test that the \"older sibling\" of every category is indeed older (lower)\n    // (it can also be INVALID_ORDINAL, which is lower than any ordinal)\n    for (int i=0; i<tr.getSize(); i++) {\n      assertTrue(\"olderSiblingArray[\"+i+\"] should be <\"+i, olderSiblingArray[i] < i);\n    }\n    \n    // test that the \"older sibling\" of every category is indeed a sibling\n    // (they share the same parent)\n    for (int i=0; i<tr.getSize(); i++) {\n      int sibling = olderSiblingArray[i];\n      if (sibling == TaxonomyReader.INVALID_ORDINAL) {\n        continue;\n      }\n      assertEquals(parents[i], parents[sibling]);\n    }\n    \n    // And now for slightly more complex (and less \"invariant-like\"...)\n    // tests:\n    \n    // test that the \"youngest child\" is indeed the youngest (so we don't\n    // miss the first children in the chain)\n    for (int i=0; i<tr.getSize(); i++) {\n      // Find the really youngest child:\n      int j;\n      for (j=tr.getSize()-1; j>i; j--) {\n        if (parents[j]==i) {\n          break; // found youngest child\n        }\n      }\n      if (j==i) { // no child found\n        j=TaxonomyReader.INVALID_ORDINAL;\n      }\n      assertEquals(j, children[i]);\n    }\n\n    // test that the \"older sibling\" is indeed the least oldest one - and\n    // not a too old one or -1 (so we didn't miss some children in the\n    // middle or the end of the chain).\n    for (int i=0; i<tr.getSize(); i++) {\n      // Find the youngest older sibling:\n      int j;\n      for (j=i-1; j>=0; j--) {\n        if (parents[j]==parents[i]) {\n          break; // found youngest older sibling\n        }\n      }\n      if (j<0) { // no sibling found\n        j=TaxonomyReader.INVALID_ORDINAL;\n      }\n      assertEquals(j, olderSiblingArray[i]);\n    }\n  \n    tr.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**\n   * Similar to testChildrenArrays, except rather than look at\n   * expected results, we test for several \"invariants\" that the results\n   * should uphold, e.g., that a child of a category indeed has this category\n   * as its parent. This sort of test can more easily be extended to larger\n   * example taxonomies, because we do not need to build the expected list\n   * of categories like we did in the above test.\n   */\n  @Test\n  public void testChildrenArraysInvariants() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    ParallelTaxonomyArrays ca = tr.getParallelTaxonomyArrays();\n    int[] children = ca.children();\n    assertEquals(tr.getSize(), children.length);\n    int[] olderSiblingArray = ca.siblings();\n    assertEquals(tr.getSize(), olderSiblingArray.length);\n        \n    // test that the \"youngest child\" of every category is indeed a child:\n    for (int i=0; i<tr.getSize(); i++) {\n      int youngestChild = children[i];\n      if (youngestChild != TaxonomyReader.INVALID_ORDINAL) {\n        assertEquals(i, tr.getParent(youngestChild));\n      }\n    }\n        \n    // test that the \"older sibling\" of every category is indeed older (lower)\n    // (it can also be INVALID_ORDINAL, which is lower than any ordinal)\n    for (int i=0; i<tr.getSize(); i++) {\n      assertTrue(\"olderSiblingArray[\"+i+\"] should be <\"+i, olderSiblingArray[i] < i);\n    }\n    \n    // test that the \"older sibling\" of every category is indeed a sibling\n    // (they share the same parent)\n    for (int i=0; i<tr.getSize(); i++) {\n      int sibling = olderSiblingArray[i];\n      if (sibling == TaxonomyReader.INVALID_ORDINAL) {\n        continue;\n      }\n      assertEquals(tr.getParent(i), tr.getParent(sibling));\n    }\n    \n    // And now for slightly more complex (and less \"invariant-like\"...)\n    // tests:\n    \n    // test that the \"youngest child\" is indeed the youngest (so we don't\n    // miss the first children in the chain)\n    for (int i=0; i<tr.getSize(); i++) {\n      // Find the really youngest child:\n      int j;\n      for (j=tr.getSize()-1; j>i; j--) {\n        if (tr.getParent(j)==i) {\n          break; // found youngest child\n        }\n      }\n      if (j==i) { // no child found\n        j=TaxonomyReader.INVALID_ORDINAL;\n      }\n      assertEquals(j, children[i]);\n    }\n\n    // test that the \"older sibling\" is indeed the least oldest one - and\n    // not a too old one or -1 (so we didn't miss some children in the\n    // middle or the end of the chain).\n    for (int i=0; i<tr.getSize(); i++) {\n      // Find the youngest older sibling:\n      int j;\n      for (j=i-1; j>=0; j--) {\n        if (tr.getParent(j)==tr.getParent(i)) {\n          break; // found youngest older sibling\n        }\n      }\n      if (j<0) { // no sibling found\n        j=TaxonomyReader.INVALID_ORDINAL;\n      }\n      assertEquals(j, olderSiblingArray[i]);\n    }\n  \n    tr.close();\n    indexDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","3d58d08788c3fd51172ba34474cca42499d6391b"],"3d58d08788c3fd51172ba34474cca42499d6391b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"29e1a91414f603bce5a59a5cb61fa8603997de87":["3d58d08788c3fd51172ba34474cca42499d6391b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["29e1a91414f603bce5a59a5cb61fa8603997de87"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["407687e67faf6e1f02a211ca078d8e3eed631027","3d58d08788c3fd51172ba34474cca42499d6391b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3d58d08788c3fd51172ba34474cca42499d6391b":["407687e67faf6e1f02a211ca078d8e3eed631027","29e1a91414f603bce5a59a5cb61fa8603997de87"],"29e1a91414f603bce5a59a5cb61fa8603997de87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}