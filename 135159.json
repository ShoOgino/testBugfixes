{"path":"src/java/org/apache/lucene/util/IndexableBinaryStringTools#decode(CharBuffer,ByteBuffer).mjava","commits":[{"id":"14f9435cf56ea1dc1185ffc60bcc94728ff9bf03","date":1237412151,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/IndexableBinaryStringTools#decode(CharBuffer,ByteBuffer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Decodes the input char sequence into the output byte sequence.  Before\n   * calling this method, ensure that the output ByteBuffer has sufficient\n   * capacity by calling {@link #getDecodedLength(java.nio.CharBuffer)}.\n   * \n   * @param input The char sequence to decode\n   * @param output Where the byte sequence decoding result will go.  The limit\n   *  is set to one past the position of the final char.\n   * @throws IllegalArgumentException If either the input or the output buffer\n   *  is not backed by an array\n   */\n  public static void decode(CharBuffer input, ByteBuffer output) {\n    if (input.hasArray() && output.hasArray()) {\n      int numInputChars = input.limit() - input.arrayOffset() - 1;\n      int numOutputBytes = getDecodedLength(input);\n      output.limit(numOutputBytes + output.arrayOffset()); // Set output final pos + 1\n      output.position(0);\n      byte[] outputArray = output.array();\n      char[] inputArray = input.array();\n      if (numOutputBytes > 0) {\n        int caseNum = 0;\n        int outputByteNum = output.arrayOffset();\n        int inputCharNum = input.arrayOffset();\n        short inputChar;\n        CodingCase codingCase;\n        for ( ; inputCharNum < numInputChars - 1 ; ++inputCharNum) {\n          codingCase = CODING_CASES[caseNum];\n          inputChar = (short)inputArray[inputCharNum];\n          if (2 == codingCase.numBytes) {\n            if (0 == caseNum) {\n              outputArray[outputByteNum] = (byte)(inputChar >>> codingCase.initialShift);\n            } else {\n              outputArray[outputByteNum] += (byte)(inputChar >>> codingCase.initialShift);\n            }\n            outputArray[outputByteNum + 1] = (byte)((inputChar & codingCase.finalMask) \n                                                    << codingCase.finalShift);\n          } else { // numBytes is 3\n            outputArray[outputByteNum] += (byte)(inputChar >>> codingCase.initialShift);\n            outputArray[outputByteNum + 1] = (byte)((inputChar & codingCase.middleMask)\n                                                    >>> codingCase.middleShift);\n            outputArray[outputByteNum + 2] = (byte)((inputChar & codingCase.finalMask) \n                                                    << codingCase.finalShift);\n          }\n          outputByteNum += codingCase.advanceBytes;\n          if (++caseNum == CODING_CASES.length) {\n            caseNum = 0;\n          }\n        }\n        // Handle final char\n        inputChar = (short)inputArray[inputCharNum];\n        codingCase = CODING_CASES[caseNum];\n        if (0 == caseNum) {\n          outputArray[outputByteNum] = 0;\n        }\n        outputArray[outputByteNum] += (byte)(inputChar >>> codingCase.initialShift);\n        int bytesLeft = numOutputBytes - outputByteNum;\n        if (bytesLeft > 1) {\n          if (2 == codingCase.numBytes) {\n            outputArray[outputByteNum + 1] = (byte)((inputChar & codingCase.finalMask) \n                                                    >>> codingCase.finalShift);\n          } else { // numBytes is 3\n            outputArray[outputByteNum + 1] = (byte)((inputChar & codingCase.middleMask)\n                                                    >>> codingCase.middleShift);\n            if (bytesLeft > 2) {\n              outputArray[outputByteNum + 2] = (byte)((inputChar & codingCase.finalMask) \n                                                      << codingCase.finalShift);\n            }\n          }\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Arguments must have backing arrays\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb6255bc49ccd64debd0b43ca8d2f835df0faa07","date":1262510560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/IndexableBinaryStringTools#decode(CharBuffer,ByteBuffer).mjava","pathOld":"src/java/org/apache/lucene/util/IndexableBinaryStringTools#decode(CharBuffer,ByteBuffer).mjava","sourceNew":"  /**\n   * Decodes the input char sequence into the output byte sequence. Before\n   * calling this method, ensure that the output ByteBuffer has sufficient\n   * capacity by calling {@link #getDecodedLength(java.nio.CharBuffer)}.\n   * \n   * @param input The char sequence to decode\n   * @param output Where the byte sequence decoding result will go. The limit is\n   *        set to one past the position of the final char.\n   * @throws IllegalArgumentException If either the input or the output buffer\n   *         is not backed by an array\n   * @deprecated Use {@link #decode(char[], int, int, byte[], int, int)}\n   *             instead. This method will be removed in Lucene 4.0\n   */\n  @Deprecated\n  public static void decode(CharBuffer input, ByteBuffer output) {\n    if (input.hasArray() && output.hasArray()) {\n      final int inputOffset = input.arrayOffset();\n      final int inputLength = input.limit() - inputOffset;\n      final int outputOffset = output.arrayOffset();\n      final int outputLength = getDecodedLength(input.array(), inputOffset,\n          inputLength);\n      output.limit(outputLength + outputOffset);\n      output.position(0);\n      decode(input.array(), inputOffset, inputLength, output.array(),\n          outputOffset, outputLength);\n    } else {\n      throw new IllegalArgumentException(\"Arguments must have backing arrays\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Decodes the input char sequence into the output byte sequence.  Before\n   * calling this method, ensure that the output ByteBuffer has sufficient\n   * capacity by calling {@link #getDecodedLength(java.nio.CharBuffer)}.\n   * \n   * @param input The char sequence to decode\n   * @param output Where the byte sequence decoding result will go.  The limit\n   *  is set to one past the position of the final char.\n   * @throws IllegalArgumentException If either the input or the output buffer\n   *  is not backed by an array\n   */\n  public static void decode(CharBuffer input, ByteBuffer output) {\n    if (input.hasArray() && output.hasArray()) {\n      int numInputChars = input.limit() - input.arrayOffset() - 1;\n      int numOutputBytes = getDecodedLength(input);\n      output.limit(numOutputBytes + output.arrayOffset()); // Set output final pos + 1\n      output.position(0);\n      byte[] outputArray = output.array();\n      char[] inputArray = input.array();\n      if (numOutputBytes > 0) {\n        int caseNum = 0;\n        int outputByteNum = output.arrayOffset();\n        int inputCharNum = input.arrayOffset();\n        short inputChar;\n        CodingCase codingCase;\n        for ( ; inputCharNum < numInputChars - 1 ; ++inputCharNum) {\n          codingCase = CODING_CASES[caseNum];\n          inputChar = (short)inputArray[inputCharNum];\n          if (2 == codingCase.numBytes) {\n            if (0 == caseNum) {\n              outputArray[outputByteNum] = (byte)(inputChar >>> codingCase.initialShift);\n            } else {\n              outputArray[outputByteNum] += (byte)(inputChar >>> codingCase.initialShift);\n            }\n            outputArray[outputByteNum + 1] = (byte)((inputChar & codingCase.finalMask) \n                                                    << codingCase.finalShift);\n          } else { // numBytes is 3\n            outputArray[outputByteNum] += (byte)(inputChar >>> codingCase.initialShift);\n            outputArray[outputByteNum + 1] = (byte)((inputChar & codingCase.middleMask)\n                                                    >>> codingCase.middleShift);\n            outputArray[outputByteNum + 2] = (byte)((inputChar & codingCase.finalMask) \n                                                    << codingCase.finalShift);\n          }\n          outputByteNum += codingCase.advanceBytes;\n          if (++caseNum == CODING_CASES.length) {\n            caseNum = 0;\n          }\n        }\n        // Handle final char\n        inputChar = (short)inputArray[inputCharNum];\n        codingCase = CODING_CASES[caseNum];\n        if (0 == caseNum) {\n          outputArray[outputByteNum] = 0;\n        }\n        outputArray[outputByteNum] += (byte)(inputChar >>> codingCase.initialShift);\n        int bytesLeft = numOutputBytes - outputByteNum;\n        if (bytesLeft > 1) {\n          if (2 == codingCase.numBytes) {\n            outputArray[outputByteNum + 1] = (byte)((inputChar & codingCase.finalMask) \n                                                    >>> codingCase.finalShift);\n          } else { // numBytes is 3\n            outputArray[outputByteNum + 1] = (byte)((inputChar & codingCase.middleMask)\n                                                    >>> codingCase.middleShift);\n            if (bytesLeft > 2) {\n              outputArray[outputByteNum + 2] = (byte)((inputChar & codingCase.finalMask) \n                                                      << codingCase.finalShift);\n            }\n          }\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Arguments must have backing arrays\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/IndexableBinaryStringTools#decode(CharBuffer,ByteBuffer).mjava","pathOld":"src/java/org/apache/lucene/util/IndexableBinaryStringTools#decode(CharBuffer,ByteBuffer).mjava","sourceNew":"  /**\n   * Decodes the input char sequence into the output byte sequence. Before\n   * calling this method, ensure that the output ByteBuffer has sufficient\n   * capacity by calling {@link #getDecodedLength(java.nio.CharBuffer)}.\n   * \n   * @param input The char sequence to decode\n   * @param output Where the byte sequence decoding result will go. The limit is\n   *        set to one past the position of the final char.\n   * @throws IllegalArgumentException If either the input or the output buffer\n   *         is not backed by an array\n   * @deprecated Use {@link #decode(char[], int, int, byte[], int, int)}\n   *             instead. This method will be removed in Lucene 4.0\n   */\n  @Deprecated\n  public static void decode(CharBuffer input, ByteBuffer output) {\n    if (input.hasArray() && output.hasArray()) {\n      final int inputOffset = input.arrayOffset();\n      final int inputLength = input.limit() - inputOffset;\n      final int outputOffset = output.arrayOffset();\n      final int outputLength = getDecodedLength(input.array(), inputOffset,\n          inputLength);\n      output.limit(outputLength + outputOffset);\n      output.position(0);\n      decode(input.array(), inputOffset, inputLength, output.array(),\n          outputOffset, outputLength);\n    } else {\n      throw new IllegalArgumentException(\"Arguments must have backing arrays\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Decodes the input char sequence into the output byte sequence. Before\n   * calling this method, ensure that the output ByteBuffer has sufficient\n   * capacity by calling {@link #getDecodedLength(java.nio.CharBuffer)}.\n   * \n   * @param input The char sequence to decode\n   * @param output Where the byte sequence decoding result will go. The limit is\n   *        set to one past the position of the final char.\n   * @throws IllegalArgumentException If either the input or the output buffer\n   *         is not backed by an array\n   * @deprecated Use {@link #decode(char[], int, int, byte[], int, int)}\n   *             instead. This method will be removed in Lucene 4.0\n   */\n  @Deprecated\n  public static void decode(CharBuffer input, ByteBuffer output) {\n    if (input.hasArray() && output.hasArray()) {\n      final int inputOffset = input.arrayOffset();\n      final int inputLength = input.limit() - inputOffset;\n      final int outputOffset = output.arrayOffset();\n      final int outputLength = getDecodedLength(input.array(), inputOffset,\n          inputLength);\n      output.limit(outputLength + outputOffset);\n      output.position(0);\n      decode(input.array(), inputOffset, inputLength, output.array(),\n          outputOffset, outputLength);\n    } else {\n      throw new IllegalArgumentException(\"Arguments must have backing arrays\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb6255bc49ccd64debd0b43ca8d2f835df0faa07":["14f9435cf56ea1dc1185ffc60bcc94728ff9bf03"],"14f9435cf56ea1dc1185ffc60bcc94728ff9bf03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fb6255bc49ccd64debd0b43ca8d2f835df0faa07"]},"commit2Childs":{"fb6255bc49ccd64debd0b43ca8d2f835df0faa07":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"14f9435cf56ea1dc1185ffc60bcc94728ff9bf03":["fb6255bc49ccd64debd0b43ca8d2f835df0faa07"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["14f9435cf56ea1dc1185ffc60bcc94728ff9bf03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}