{"path":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite(SegmentInfo).mjava","commits":[{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite(SegmentInfo).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite().mjava","sourceNew":"    private void reWrite(SegmentInfo si) throws IOException {\n      // NOTE: norms are re-written in regular directory, not cfs\n\n      String oldFileName = si.getNormFileName(this.number);\n      if (oldFileName != null) {\n        // Mark this file for deletion.  Note that we don't\n        // actually try to delete it until the new segments files is\n        // successfully written:\n        deleter.addPendingFile(oldFileName);\n      }\n\n      si.advanceNormGen(this.number);\n      IndexOutput out = directory().createOutput(si.getNormFileName(this.number));\n      try {\n        out.writeBytes(bytes, maxDoc());\n      } finally {\n        out.close();\n      }\n      this.dirty = false;\n    }\n\n","sourceOld":"    private void reWrite() throws IOException {\n      // NOTE: norms are re-written in regular directory, not cfs\n      IndexOutput out = directory().createOutput(segment + \".tmp\");\n      try {\n        out.writeBytes(bytes, maxDoc());\n      } finally {\n        out.close();\n      }\n      String fileName;\n      if(cfsReader == null)\n          fileName = segment + \".f\" + number;\n      else{\n          // use a different file name if we have compound format\n          fileName = segment + \".s\" + number;\n      }\n      directory().renameFile(segment + \".tmp\", fileName);\n      this.dirty = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8969a184df55d25d61e85be785987fbf830d4028","date":1168143561,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite(SegmentInfo).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite(SegmentInfo).mjava","sourceNew":"    private void reWrite(SegmentInfo si) throws IOException {\n      // NOTE: norms are re-written in regular directory, not cfs\n\n      String oldFileName = si.getNormFileName(this.number);\n      if (oldFileName != null && !oldFileName.endsWith(\".\" + IndexFileNames.NORMS_EXTENSION)) {\n        // Mark this file for deletion.  Note that we don't\n        // actually try to delete it until the new segments files is\n        // successfully written:\n        deleter.addPendingFile(oldFileName);\n      }\n\n      si.advanceNormGen(this.number);\n      IndexOutput out = directory().createOutput(si.getNormFileName(this.number));\n      try {\n        out.writeBytes(bytes, maxDoc());\n      } finally {\n        out.close();\n      }\n      this.dirty = false;\n    }\n\n","sourceOld":"    private void reWrite(SegmentInfo si) throws IOException {\n      // NOTE: norms are re-written in regular directory, not cfs\n\n      String oldFileName = si.getNormFileName(this.number);\n      if (oldFileName != null) {\n        // Mark this file for deletion.  Note that we don't\n        // actually try to delete it until the new segments files is\n        // successfully written:\n        deleter.addPendingFile(oldFileName);\n      }\n\n      si.advanceNormGen(this.number);\n      IndexOutput out = directory().createOutput(si.getNormFileName(this.number));\n      try {\n        out.writeBytes(bytes, maxDoc());\n      } finally {\n        out.close();\n      }\n      this.dirty = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite(SegmentInfo).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite(SegmentInfo).mjava","sourceNew":"    private void reWrite(SegmentInfo si) throws IOException {\n      // NOTE: norms are re-written in regular directory, not cfs\n      si.advanceNormGen(this.number);\n      IndexOutput out = directory().createOutput(si.getNormFileName(this.number));\n      try {\n        out.writeBytes(bytes, maxDoc());\n      } finally {\n        out.close();\n      }\n      this.dirty = false;\n    }\n\n","sourceOld":"    private void reWrite(SegmentInfo si) throws IOException {\n      // NOTE: norms are re-written in regular directory, not cfs\n\n      String oldFileName = si.getNormFileName(this.number);\n      if (oldFileName != null && !oldFileName.endsWith(\".\" + IndexFileNames.NORMS_EXTENSION)) {\n        // Mark this file for deletion.  Note that we don't\n        // actually try to delete it until the new segments files is\n        // successfully written:\n        deleter.addPendingFile(oldFileName);\n      }\n\n      si.advanceNormGen(this.number);\n      IndexOutput out = directory().createOutput(si.getNormFileName(this.number));\n      try {\n        out.writeBytes(bytes, maxDoc());\n      } finally {\n        out.close();\n      }\n      this.dirty = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite(SegmentInfo).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite(SegmentInfo).mjava","sourceNew":"    // Flush all pending changes to the next generation\n    // separate norms file.\n    public void reWrite(SegmentInfo si) throws IOException {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n      // NOTE: norms are re-written in regular directory, not cfs\n      si.advanceNormGen(this.number);\n      IndexOutput out = directory().createOutput(si.getNormFileName(this.number));\n      try {\n        out.writeBytes(bytes, maxDoc());\n      } finally {\n        out.close();\n      }\n      this.dirty = false;\n    }\n\n","sourceOld":"    private void reWrite(SegmentInfo si) throws IOException {\n      // NOTE: norms are re-written in regular directory, not cfs\n      si.advanceNormGen(this.number);\n      IndexOutput out = directory().createOutput(si.getNormFileName(this.number));\n      try {\n        out.writeBytes(bytes, maxDoc());\n      } finally {\n        out.close();\n      }\n      this.dirty = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite(SegmentInfo).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.Norm#reWrite(SegmentInfo).mjava","sourceNew":"    // Flush all pending changes to the next generation\n    // separate norms file.\n    public void reWrite(SegmentInfo si) throws IOException {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n      // NOTE: norms are re-written in regular directory, not cfs\n      si.advanceNormGen(this.number);\n      IndexOutput out = directory().createOutput(si.getNormFileName(this.number));\n      try {\n        out.writeBytes(bytes, maxDoc());\n      } finally {\n        out.close();\n      }\n      this.dirty = false;\n    }\n\n","sourceOld":"    // Flush all pending changes to the next generation\n    // separate norms file.\n    public void reWrite(SegmentInfo si) throws IOException {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n      // NOTE: norms are re-written in regular directory, not cfs\n      si.advanceNormGen(this.number);\n      IndexOutput out = directory().createOutput(si.getNormFileName(this.number));\n      try {\n        out.writeBytes(bytes, maxDoc());\n      } finally {\n        out.close();\n      }\n      this.dirty = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["8b6187898fc4413ccd18229711786550a280383c"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b6187898fc4413ccd18229711786550a280383c":["8969a184df55d25d61e85be785987fbf830d4028"],"8969a184df55d25d61e85be785987fbf830d4028":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6db660b56f04fdb2853d25cdee8ee0d36559a521"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["8969a184df55d25d61e85be785987fbf830d4028"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"8b6187898fc4413ccd18229711786550a280383c":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"8969a184df55d25d61e85be785987fbf830d4028":["8b6187898fc4413ccd18229711786550a280383c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}