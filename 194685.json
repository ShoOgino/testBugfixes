{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","commits":[{"id":"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","date":1532604765,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","pathOld":"/dev/null","sourceNew":"  public void testEqualOnNonNode() {\n    String state = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String metaData =\n        \"  {'nodeValues':{\" +\n            \"    'node1':{'cores' : 3, 'freedisk' : 700, 'totaldisk' :1000, 'sysprop.zone' : 'east'},\" +\n            \"    'node2':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone' : 'west'},\" +\n            \"    'node3':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone': 'east'},\" +\n            \"    'node4':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone': 'west'}\" +\n            \"  },\" +\n            \"  'replicaValues':[\" +\n            \"    {'INDEX.sizeInGB': 100, core : r1},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r2},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r3},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r4},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r5},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r6}]}\";\n\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: [east,west] } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(state, metaData));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52316373036b9f161a08896e7c9ebf4389790a47","date":1533187246,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","sourceNew":"  public void testEqualOnNonNode() {\n    String state = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String metaData =\n        \"  {'nodeValues':{\" +\n            \"    'node1':{'cores' : 3, 'freedisk' : 700, 'totaldisk' :1000, 'sysprop.zone' : 'east'},\" +\n            \"    'node2':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone' : 'west'},\" +\n            \"    'node3':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone': 'east'},\" +\n            \"    'node4':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone': 'west'},\" +\n            \"    'node5':{'cores' : 0, 'freedisk' : 1000, 'totaldisk' :1000, 'sysprop.zone': 'west'}\" +\n            \"  },\" +\n            \"  'replicaValues':[\" +\n            \"    {'INDEX.sizeInGB': 100, core : r1},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r2},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r3},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r4},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r5},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r6}]}\";\n\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: [east,west] } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(state, metaData));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    List<Suggester.SuggestionInfo> suggestions = null;\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n    }\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))\n        , createCloudManager(state, metaData));\n    assertEquals(1, suggestions.size());\n    String repName = (String) Utils.getObjectByPath(suggestions.get(0).operation, true, \"command/move-replica/replica\");\n\n    AtomicBoolean found = new AtomicBoolean(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(repName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { cores : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if(violation.node.equals(\"node5\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n\n    }\n\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        createCloudManager(state, metaData));\n    assertEquals(1, suggestions.size());\n    assertEquals(\"node5\", Utils.getObjectByPath(suggestions.get(0).operation, true, \"command/move-replica/targetNode\"));\n\n    String rName = (String) Utils.getObjectByPath(suggestions.get(0).operation, true, \"command/move-replica/replica\");\n\n    found.set(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(rName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n  }\n\n","sourceOld":"  public void testEqualOnNonNode() {\n    String state = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String metaData =\n        \"  {'nodeValues':{\" +\n            \"    'node1':{'cores' : 3, 'freedisk' : 700, 'totaldisk' :1000, 'sysprop.zone' : 'east'},\" +\n            \"    'node2':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone' : 'west'},\" +\n            \"    'node3':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone': 'east'},\" +\n            \"    'node4':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone': 'west'}\" +\n            \"  },\" +\n            \"  'replicaValues':[\" +\n            \"    {'INDEX.sizeInGB': 100, core : r1},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r2},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r3},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r4},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r5},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r6}]}\";\n\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: [east,west] } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(state, metaData));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee5183ac042828ef74f90f0874eaba7daeb409bd","date":1536546264,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","sourceNew":"  public void testEqualOnNonNode() {\n    String state = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +//east\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r2': {\" +//west\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +//east\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r4': {\" +//west\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +//east\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +//east\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String metaData =\n        \"  {'nodeValues':{\" +\n            \"    'node1':{'cores' : 3, 'freedisk' : 700, 'totaldisk' :1000, 'sysprop.zone' : 'east'},\" +\n            \"    'node2':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone' : 'west'},\" +\n            \"    'node3':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone': 'east'},\" +\n            \"    'node4':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone': 'west'},\" +\n            \"    'node5':{'cores' : 0, 'freedisk' : 1000, 'totaldisk' :1000, 'sysprop.zone': 'west'}\" +\n            \"  },\" +\n            \"  'replicaValues':[\" +\n            \"    {'INDEX.sizeInGB': 100, core : r1},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r2},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r3},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r4},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r5},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r6}]}\";\n\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: [east,west] } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(state, metaData));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    List<Suggester.SuggestionInfo> suggestions = null;\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n    }\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))\n        , createCloudManager(state, metaData));\n    assertEquals(1, suggestions.size());\n    String repName = (String) Utils.getObjectByPath(suggestions.get(0).operation, true, \"command/move-replica/replica\");\n\n    AtomicBoolean found = new AtomicBoolean(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(repName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { cores : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if(violation.node.equals(\"node5\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n\n    }\n\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        createCloudManager(state, metaData));\n    assertEquals(1, suggestions.size());\n    assertEquals(\"node5\", Utils.getObjectByPath(suggestions.get(0).operation, true, \"command/move-replica/targetNode\"));\n\n    String rName = (String) Utils.getObjectByPath(suggestions.get(0).operation, true, \"command/move-replica/replica\");\n\n    found.set(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(rName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n  }\n\n","sourceOld":"  public void testEqualOnNonNode() {\n    String state = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String metaData =\n        \"  {'nodeValues':{\" +\n            \"    'node1':{'cores' : 3, 'freedisk' : 700, 'totaldisk' :1000, 'sysprop.zone' : 'east'},\" +\n            \"    'node2':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone' : 'west'},\" +\n            \"    'node3':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone': 'east'},\" +\n            \"    'node4':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone': 'west'},\" +\n            \"    'node5':{'cores' : 0, 'freedisk' : 1000, 'totaldisk' :1000, 'sysprop.zone': 'west'}\" +\n            \"  },\" +\n            \"  'replicaValues':[\" +\n            \"    {'INDEX.sizeInGB': 100, core : r1},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r2},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r3},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r4},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r5},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r6}]}\";\n\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: [east,west] } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(state, metaData));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(4, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    List<Suggester.SuggestionInfo> suggestions = null;\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n    }\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))\n        , createCloudManager(state, metaData));\n    assertEquals(1, suggestions.size());\n    String repName = (String) Utils.getObjectByPath(suggestions.get(0).operation, true, \"command/move-replica/replica\");\n\n    AtomicBoolean found = new AtomicBoolean(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(repName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { cores : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if(violation.node.equals(\"node5\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n\n    }\n\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        createCloudManager(state, metaData));\n    assertEquals(1, suggestions.size());\n    assertEquals(\"node5\", Utils.getObjectByPath(suggestions.get(0).operation, true, \"command/move-replica/targetNode\"));\n\n    String rName = (String) Utils.getObjectByPath(suggestions.get(0).operation, true, \"command/move-replica/replica\");\n\n    found.set(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(rName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"986a3b20441337c17126faebcbab4e2248154bdf","date":1537886823,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","sourceNew":"  public void testEqualOnNonNode() {\n    String state = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +//east\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r2': {\" +//west\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +//east\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r4': {\" +//west\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +//east\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +//east\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String metaData =\n        \"  {'nodeValues':{\" +\n            \"    'node1':{'cores' : 3, 'freedisk' : 700, 'totaldisk' :1000, 'sysprop.zone' : 'east'},\" +\n            \"    'node2':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone' : 'west'},\" +\n            \"    'node3':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone': 'east'},\" +\n            \"    'node4':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone': 'west'},\" +\n            \"    'node5':{'cores' : 0, 'freedisk' : 1000, 'totaldisk' :1000, 'sysprop.zone': 'west'}\" +\n            \"  },\" +\n            \"  'replicaValues':[\" +\n            \"    {'INDEX.sizeInGB': 100, core : r1},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r2},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r3},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r4},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r5},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r6}]}\";\n\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: [east,west] } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(state, metaData));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    List<Suggester.SuggestionInfo> suggestions = null;\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n    }\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))\n        , createCloudManager(state, metaData));\n    assertEquals(1, suggestions.size());\n    String repName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    AtomicBoolean found = new AtomicBoolean(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(repName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { cores : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if(violation.node.equals(\"node5\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n\n    }\n\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        createCloudManager(state, metaData));\n    assertEquals(1, suggestions.size());\n    assertEquals(\"node5\", Utils.getObjectByPath(suggestions.get(0).operation, true, \"command/move-replica/targetNode\"));\n\n    String rName = (String) Utils.getObjectByPath(suggestions.get(0).operation, true, \"command/move-replica/replica\");\n\n    found.set(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(rName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n  }\n\n","sourceOld":"  public void testEqualOnNonNode() {\n    String state = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +//east\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r2': {\" +//west\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +//east\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r4': {\" +//west\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +//east\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +//east\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String metaData =\n        \"  {'nodeValues':{\" +\n            \"    'node1':{'cores' : 3, 'freedisk' : 700, 'totaldisk' :1000, 'sysprop.zone' : 'east'},\" +\n            \"    'node2':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone' : 'west'},\" +\n            \"    'node3':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone': 'east'},\" +\n            \"    'node4':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone': 'west'},\" +\n            \"    'node5':{'cores' : 0, 'freedisk' : 1000, 'totaldisk' :1000, 'sysprop.zone': 'west'}\" +\n            \"  },\" +\n            \"  'replicaValues':[\" +\n            \"    {'INDEX.sizeInGB': 100, core : r1},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r2},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r3},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r4},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r5},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r6}]}\";\n\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: [east,west] } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(state, metaData));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    List<Suggester.SuggestionInfo> suggestions = null;\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n    }\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))\n        , createCloudManager(state, metaData));\n    assertEquals(1, suggestions.size());\n    String repName = (String) Utils.getObjectByPath(suggestions.get(0).operation, true, \"command/move-replica/replica\");\n\n    AtomicBoolean found = new AtomicBoolean(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(repName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { cores : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if(violation.node.equals(\"node5\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n\n    }\n\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        createCloudManager(state, metaData));\n    assertEquals(1, suggestions.size());\n    assertEquals(\"node5\", Utils.getObjectByPath(suggestions.get(0).operation, true, \"command/move-replica/targetNode\"));\n\n    String rName = (String) Utils.getObjectByPath(suggestions.get(0).operation, true, \"command/move-replica/replica\");\n\n    found.set(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(rName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"536bafb7a33a91ae703a78de9f6bd5c7e32471d9","date":1538395209,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","sourceNew":"  public void testEqualOnNonNode() {\n    String state = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +//east\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r2': {\" +//west\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +//east\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r4': {\" +//west\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +//east\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +//east\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String metaData =\n        \"  {'nodeValues':{\" +\n            \"    'node1':{'cores' : 3, 'freedisk' : 700, 'totaldisk' :1000, 'sysprop.zone' : 'east'},\" +\n            \"    'node2':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone' : 'west'},\" +\n            \"    'node3':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone': 'east'},\" +\n            \"    'node4':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone': 'west'},\" +\n            \"    'node5':{'cores' : 0, 'freedisk' : 1000, 'totaldisk' :1000, 'sysprop.zone': 'west'}\" +\n            \"  },\" +\n            \"  'replicaValues':[\" +\n            \"    {'INDEX.sizeInGB': 100, core : r1},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r2},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r3},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r4},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r5},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r6}]}\";\n\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: [east,west] } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(state, metaData));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    List<Suggester.SuggestionInfo> suggestions = null;\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n    }\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))\n        , createCloudManager(state, metaData));\n    assertEquals(1, suggestions.size());\n    String repName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    AtomicBoolean found = new AtomicBoolean(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(repName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { cores : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if(violation.node.equals(\"node5\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n\n    }\n\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        createCloudManager(state, metaData));\n    assertEquals(1, suggestions.size());\n    assertEquals(\"node5\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    String rName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    found.set(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(rName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n  }\n\n","sourceOld":"  public void testEqualOnNonNode() {\n    String state = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +//east\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r2': {\" +//west\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +//east\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r4': {\" +//west\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +//east\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +//east\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String metaData =\n        \"  {'nodeValues':{\" +\n            \"    'node1':{'cores' : 3, 'freedisk' : 700, 'totaldisk' :1000, 'sysprop.zone' : 'east'},\" +\n            \"    'node2':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone' : 'west'},\" +\n            \"    'node3':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone': 'east'},\" +\n            \"    'node4':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone': 'west'},\" +\n            \"    'node5':{'cores' : 0, 'freedisk' : 1000, 'totaldisk' :1000, 'sysprop.zone': 'west'}\" +\n            \"  },\" +\n            \"  'replicaValues':[\" +\n            \"    {'INDEX.sizeInGB': 100, core : r1},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r2},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r3},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r4},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r5},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r6}]}\";\n\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: [east,west] } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(state, metaData));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    List<Suggester.SuggestionInfo> suggestions = null;\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n    }\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))\n        , createCloudManager(state, metaData));\n    assertEquals(1, suggestions.size());\n    String repName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    AtomicBoolean found = new AtomicBoolean(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(repName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { cores : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if(violation.node.equals(\"node5\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n\n    }\n\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        createCloudManager(state, metaData));\n    assertEquals(1, suggestions.size());\n    assertEquals(\"node5\", Utils.getObjectByPath(suggestions.get(0).operation, true, \"command/move-replica/targetNode\"));\n\n    String rName = (String) Utils.getObjectByPath(suggestions.get(0).operation, true, \"command/move-replica/replica\");\n\n    found.set(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(rName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5a27e78e3d29dee02bab19ded25336471e96882","date":1539677468,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","sourceNew":"  public void testEqualOnNonNode() {\n    List<Map> l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: [east,west] } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    List<Suggester.SuggestionInfo> suggestions = null;\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))\n        , createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    String repName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    AtomicBoolean found = new AtomicBoolean(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(repName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { cores : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if(violation.node.equals(\"node5\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    assertEquals(\"node5\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    String rName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    found.set(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(rName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n  }\n\n","sourceOld":"  public void testEqualOnNonNode() {\n    String state = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +//east\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r2': {\" +//west\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +//east\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r4': {\" +//west\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +//east\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +//east\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    String metaData =\n        \"  {'nodeValues':{\" +\n            \"    'node1':{'cores' : 3, 'freedisk' : 700, 'totaldisk' :1000, 'sysprop.zone' : 'east'},\" +\n            \"    'node2':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone' : 'west'},\" +\n            \"    'node3':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone': 'east'},\" +\n            \"    'node4':{'cores' : 1, 'freedisk' : 900, 'totaldisk' :1000, 'sysprop.zone': 'west'},\" +\n            \"    'node5':{'cores' : 0, 'freedisk' : 1000, 'totaldisk' :1000, 'sysprop.zone': 'west'}\" +\n            \"  },\" +\n            \"  'replicaValues':[\" +\n            \"    {'INDEX.sizeInGB': 100, core : r1},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r2},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r3},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r4},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r5},\" +\n            \"    {'INDEX.sizeInGB': 100, core : r6}]}\";\n\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: [east,west] } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(state, metaData));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    List<Suggester.SuggestionInfo> suggestions = null;\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n    }\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))\n        , createCloudManager(state, metaData));\n    assertEquals(1, suggestions.size());\n    String repName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    AtomicBoolean found = new AtomicBoolean(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(repName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { cores : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(state, metaData));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if(violation.node.equals(\"node5\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n\n    }\n\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        createCloudManager(state, metaData));\n    assertEquals(1, suggestions.size());\n    assertEquals(\"node5\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    String rName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    found.set(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(rName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","sourceNew":"  public void testEqualOnNonNode() {\n    List<Map> l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: [east,west] } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    if(useNodeset){\n      autoScalingjson = \"{cluster-policy:[\" +\n          \"    { replica : '<3' , shard : '#EACH', nodeset:{ sysprop.zone: [east,west] }} ],\" +\n          \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n      \n    }\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    if(useNodeset){\n      autoScalingjson = \"{cluster-policy:[\" +\n          \"    { replica : '<3' , shard : '#EACH', nodeset:{sysprop.zone: '#EACH'} } ],\" +\n          \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    }\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    List<Suggester.SuggestionInfo> suggestions = null;\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))\n        , createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    String repName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    AtomicBoolean found = new AtomicBoolean(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(repName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { cores : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if(violation.node.equals(\"node5\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    assertEquals(\"node5\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    String rName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    found.set(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(rName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n  }\n\n","sourceOld":"  public void testEqualOnNonNode() {\n    List<Map> l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: [east,west] } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    List<Suggester.SuggestionInfo> suggestions = null;\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))\n        , createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    String repName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    AtomicBoolean found = new AtomicBoolean(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(repName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { cores : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if(violation.node.equals(\"node5\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    assertEquals(\"node5\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    String rName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    found.set(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(rName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","sourceNew":"  public void testEqualOnNonNode() {\n    List<Map> l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: [east,west] } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    if(useNodeset){\n      autoScalingjson = \"{cluster-policy:[\" +\n          \"    { replica : '<3' , shard : '#EACH', nodeset:{ sysprop.zone: [east,west] }} ],\" +\n          \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n      \n    }\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    if(useNodeset){\n      autoScalingjson = \"{cluster-policy:[\" +\n          \"    { replica : '<3' , shard : '#EACH', nodeset:{sysprop.zone: '#EACH'} } ],\" +\n          \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    }\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    List<Suggester.SuggestionInfo> suggestions = null;\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))\n        , createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    String repName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    AtomicBoolean found = new AtomicBoolean(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(repName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { cores : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if(violation.node.equals(\"node5\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    assertEquals(\"node5\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    String rName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    found.set(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(rName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n  }\n\n","sourceOld":"  public void testEqualOnNonNode() {\n    List<Map> l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: [east,west] } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    List<Suggester.SuggestionInfo> suggestions = null;\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))\n        , createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    String repName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    AtomicBoolean found = new AtomicBoolean(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(repName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { cores : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if(violation.node.equals(\"node5\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    assertEquals(\"node5\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    String rName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    found.set(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(rName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3501ebc2bbcfa61e7fc22e7d18f68d83b367093","date":1559465668,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","sourceNew":"  public void testEqualOnNonNode() {\n    List<Map> l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: [east,west] } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    if(useNodeset){\n      autoScalingjson = \"{cluster-policy:[\" +\n          \"    { replica : '<3' , shard : '#EACH', nodeset:{ sysprop.zone: [east,west] }} ],\" +\n          \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n      \n    }\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    if(useNodeset){\n      autoScalingjson = \"{cluster-policy:[\" +\n          \"    { replica : '<3' , shard : '#EACH', nodeset:{sysprop.zone: [east , west]} } ],\" +\n          \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    }\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    List<Suggester.SuggestionInfo> suggestions = null;\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))\n        , createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    String repName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    AtomicBoolean found = new AtomicBoolean(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(repName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { cores : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if(violation.node.equals(\"node5\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    assertEquals(\"node5\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    String rName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    found.set(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(rName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n  }\n\n","sourceOld":"  public void testEqualOnNonNode() {\n    List<Map> l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: [east,west] } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    if(useNodeset){\n      autoScalingjson = \"{cluster-policy:[\" +\n          \"    { replica : '<3' , shard : '#EACH', nodeset:{ sysprop.zone: [east,west] }} ],\" +\n          \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n      \n    }\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    if(useNodeset){\n      autoScalingjson = \"{cluster-policy:[\" +\n          \"    { replica : '<3' , shard : '#EACH', nodeset:{sysprop.zone: '#EACH'} } ],\" +\n          \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    }\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    List<Suggester.SuggestionInfo> suggestions = null;\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))\n        , createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    String repName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    AtomicBoolean found = new AtomicBoolean(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(repName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { cores : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if(violation.node.equals(\"node5\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    assertEquals(\"node5\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    String rName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    found.set(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(rName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7194afdfe9b45ca331c1cd5001cd9766688688b","date":1560867417,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","sourceNew":"  public void testEqualOnNonNode() {\n    List<Map> l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: east},\" +\n        \"{ replica : '<3' , shard : '#EACH', sysprop.zone: west} ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    if(useNodeset){\n      autoScalingjson = \"{cluster-policy:[\" +\n          \"{ replica : '<3' , shard : '#EACH', nodeset:{ sysprop.zone: east}},\" +\n          \"{ replica : '<3' , shard : '#EACH', nodeset:{ sysprop.zone: west}} ],\" +\n          \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n      \n    }\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    if(useNodeset){\n      autoScalingjson = \"{cluster-policy:[\" +\n          \"{ replica : '<3' , shard : '#EACH', nodeset:{sysprop.zone: east}} , \" +\n          \"{ replica : '<3' , shard : '#EACH', nodeset:{sysprop.zone: west}}  ],\" +\n          \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    }\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    List<Suggester.SuggestionInfo> suggestions = null;\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))\n        , createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    String repName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    AtomicBoolean found = new AtomicBoolean(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(repName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { cores : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if(violation.node.equals(\"node5\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    assertEquals(\"node5\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    String rName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    found.set(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(rName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n  }\n\n","sourceOld":"  public void testEqualOnNonNode() {\n    List<Map> l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: [east,west] } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    if(useNodeset){\n      autoScalingjson = \"{cluster-policy:[\" +\n          \"    { replica : '<3' , shard : '#EACH', nodeset:{ sysprop.zone: [east,west] }} ],\" +\n          \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n      \n    }\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    if(useNodeset){\n      autoScalingjson = \"{cluster-policy:[\" +\n          \"    { replica : '<3' , shard : '#EACH', nodeset:{sysprop.zone: [east , west]} } ],\" +\n          \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    }\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    List<Suggester.SuggestionInfo> suggestions = null;\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))\n        , createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    String repName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    AtomicBoolean found = new AtomicBoolean(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(repName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { cores : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if(violation.node.equals(\"node5\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    assertEquals(\"node5\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    String rName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    found.set(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(rName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testEqualOnNonNode() {\n    List<Map> l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: east},\" +\n        \"{ replica : '<3' , shard : '#EACH', sysprop.zone: west} ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    if(useNodeset){\n      autoScalingjson = \"{cluster-policy:[\" +\n          \"{ replica : '<3' , shard : '#EACH', nodeset:{ sysprop.zone: east}},\" +\n          \"{ replica : '<3' , shard : '#EACH', nodeset:{ sysprop.zone: west}} ],\" +\n          \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n      \n    }\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    if(useNodeset){\n      autoScalingjson = \"{cluster-policy:[\" +\n          \"{ replica : '<3' , shard : '#EACH', nodeset:{sysprop.zone: east}} , \" +\n          \"{ replica : '<3' , shard : '#EACH', nodeset:{sysprop.zone: west}}  ],\" +\n          \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    }\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    List<Suggester.SuggestionInfo> suggestions = null;\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))\n        , createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    String repName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    AtomicBoolean found = new AtomicBoolean(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(repName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { cores : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if(violation.node.equals(\"node5\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    assertEquals(\"node5\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    String rName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    found.set(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(rName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n  }\n\n","sourceOld":"  public void testEqualOnNonNode() {\n    List<Map> l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: east},\" +\n        \"{ replica : '<3' , shard : '#EACH', sysprop.zone: west} ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    if(useNodeset){\n      autoScalingjson = \"{cluster-policy:[\" +\n          \"{ replica : '<3' , shard : '#EACH', nodeset:{ sysprop.zone: east}},\" +\n          \"{ replica : '<3' , shard : '#EACH', nodeset:{ sysprop.zone: west}} ],\" +\n          \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n      \n    }\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    if(useNodeset){\n      autoScalingjson = \"{cluster-policy:[\" +\n          \"{ replica : '<3' , shard : '#EACH', nodeset:{sysprop.zone: east}} , \" +\n          \"{ replica : '<3' , shard : '#EACH', nodeset:{sysprop.zone: west}}  ],\" +\n          \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    }\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    List<Suggester.SuggestionInfo> suggestions = null;\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))\n        , createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    String repName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    AtomicBoolean found = new AtomicBoolean(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(repName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { cores : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if(violation.node.equals(\"node5\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    assertEquals(\"node5\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    String rName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    found.set(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(rName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testEqualOnNonNode().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testEqualOnNonNode() {\n    List<Map> l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    String autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: east},\" +\n        \"{ replica : '<3' , shard : '#EACH', sysprop.zone: west} ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    if(useNodeset){\n      autoScalingjson = \"{cluster-policy:[\" +\n          \"{ replica : '<3' , shard : '#EACH', nodeset:{ sysprop.zone: east}},\" +\n          \"{ replica : '<3' , shard : '#EACH', nodeset:{ sysprop.zone: west}} ],\" +\n          \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n      \n    }\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    if(useNodeset){\n      autoScalingjson = \"{cluster-policy:[\" +\n          \"{ replica : '<3' , shard : '#EACH', nodeset:{sysprop.zone: east}} , \" +\n          \"{ replica : '<3' , shard : '#EACH', nodeset:{sysprop.zone: west}}  ],\" +\n          \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    }\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(3, violations.get(0).getViolatingReplicas().size());\n    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);\n    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {\n      assertEquals(\"shard2\", r.replicaInfo.getShard());\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { replica : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    List<Suggester.SuggestionInfo> suggestions = null;\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))\n        , createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    String repName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    AtomicBoolean found = new AtomicBoolean(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(repName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    autoScalingjson = \"{cluster-policy:[\" +\n        \"    { cores : '#EQUAL' , node: '#ANY' } ],\" +\n        \"  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}\";\n    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"node1\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(3, violation.getViolatingReplicas().size());\n      } else if(violation.node.equals(\"node5\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);\n        assertEquals(0, violation.getViolatingReplicas().size());\n      } else {\n        fail();\n      }\n\n    }\n    l = (List<Map>) loadFromResource(\"testEqualOnNonNode.json\");\n    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),\n        createCloudManager(l.get(0), l.get(1)));\n    assertEquals(1, suggestions.size());\n    assertEquals(\"node5\", suggestions.get(0)._get(\"operation/command/move-replica/targetNode\", null));\n\n    String rName = (String) suggestions.get(0)._get(\"operation/command/move-replica/replica\", null);\n\n    found.set(false);\n    session.getNode(\"node1\").forEachReplica(replicaInfo -> {\n      if (replicaInfo.getName().equals(rName)) {\n        found.set(true);\n      }\n    });\n    assertTrue(found.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["a7194afdfe9b45ca331c1cd5001cd9766688688b"],"a7194afdfe9b45ca331c1cd5001cd9766688688b":["d3501ebc2bbcfa61e7fc22e7d18f68d83b367093"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["986a3b20441337c17126faebcbab4e2248154bdf"],"52316373036b9f161a08896e7c9ebf4389790a47":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["f5a27e78e3d29dee02bab19ded25336471e96882","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["f5a27e78e3d29dee02bab19ded25336471e96882"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["52316373036b9f161a08896e7c9ebf4389790a47"],"d3501ebc2bbcfa61e7fc22e7d18f68d83b367093":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"f5a27e78e3d29dee02bab19ded25336471e96882":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"986a3b20441337c17126faebcbab4e2248154bdf":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"a7194afdfe9b45ca331c1cd5001cd9766688688b":["9ba1b632c041956c93c41aa1143d16a567014891"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["f5a27e78e3d29dee02bab19ded25336471e96882"],"52316373036b9f161a08896e7c9ebf4389790a47":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["52316373036b9f161a08896e7c9ebf4389790a47"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","d3501ebc2bbcfa61e7fc22e7d18f68d83b367093"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["986a3b20441337c17126faebcbab4e2248154bdf"],"d3501ebc2bbcfa61e7fc22e7d18f68d83b367093":["a7194afdfe9b45ca331c1cd5001cd9766688688b"],"f5a27e78e3d29dee02bab19ded25336471e96882":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"986a3b20441337c17126faebcbab4e2248154bdf":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}