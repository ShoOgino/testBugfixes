{"path":"solr/core/src/java/org/apache/solr/security/MultiDestinationAuditLogger#init(Map[String,Object]).mjava","commits":[{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/MultiDestinationAuditLogger#init(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initialize the plugin from security.json\n   * @param pluginConfig the config for the plugin\n   */\n  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    pluginConfig.put(PARAM_ASYNC, false); // Force the multi plugin to synchronous operation\n    super.init(pluginConfig);\n    if (!pluginConfig.containsKey(PARAM_PLUGINS)) {\n      log.warn(\"No plugins configured\");\n    } else {\n      @SuppressWarnings(\"unchecked\")\n      List<Map<String, Object>> pluginList = (List<Map<String, Object>>) pluginConfig.get(PARAM_PLUGINS);\n      pluginList.forEach(pluginConf -> plugins.add(createPlugin(pluginConf)));\n      pluginConfig.remove(PARAM_PLUGINS);\n      pluginNames = plugins.stream().map(AuditLoggerPlugin::getName).collect(Collectors.toList());\n    }\n    if (pluginConfig.size() > 0) {\n      log.error(\"Plugin config was not fully consumed. Remaining parameters are {}\", pluginConfig);\n    }\n    log.info(\"Initialized {} audit plugins: {}\", plugins.size(), pluginNames);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/MultiDestinationAuditLogger#init(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/MultiDestinationAuditLogger#init(Map[String,Object]).mjava","sourceNew":"  /**\n   * Initialize the plugin from security.json\n   * @param pluginConfig the config for the plugin\n   */\n  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    pluginConfig.put(PARAM_ASYNC, false); // Force the multi plugin to synchronous operation\n    super.init(pluginConfig);\n    if (!pluginConfig.containsKey(PARAM_PLUGINS)) {\n      log.warn(\"No plugins configured\");\n    } else {\n      @SuppressWarnings(\"unchecked\")\n      List<Map<String, Object>> pluginList = (List<Map<String, Object>>) pluginConfig.get(PARAM_PLUGINS);\n      pluginList.forEach(pluginConf -> plugins.add(createPlugin(pluginConf)));\n      pluginConfig.remove(PARAM_PLUGINS);\n      pluginNames = plugins.stream().map(AuditLoggerPlugin::getName).collect(Collectors.toList());\n    }\n    if (pluginConfig.size() > 0) {\n      log.error(\"Plugin config was not fully consumed. Remaining parameters are {}\", pluginConfig);\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Initialized {} audit plugins: {}\", plugins.size(), pluginNames);\n    }\n  }\n\n","sourceOld":"  /**\n   * Initialize the plugin from security.json\n   * @param pluginConfig the config for the plugin\n   */\n  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    pluginConfig.put(PARAM_ASYNC, false); // Force the multi plugin to synchronous operation\n    super.init(pluginConfig);\n    if (!pluginConfig.containsKey(PARAM_PLUGINS)) {\n      log.warn(\"No plugins configured\");\n    } else {\n      @SuppressWarnings(\"unchecked\")\n      List<Map<String, Object>> pluginList = (List<Map<String, Object>>) pluginConfig.get(PARAM_PLUGINS);\n      pluginList.forEach(pluginConf -> plugins.add(createPlugin(pluginConf)));\n      pluginConfig.remove(PARAM_PLUGINS);\n      pluginNames = plugins.stream().map(AuditLoggerPlugin::getName).collect(Collectors.toList());\n    }\n    if (pluginConfig.size() > 0) {\n      log.error(\"Plugin config was not fully consumed. Remaining parameters are {}\", pluginConfig);\n    }\n    log.info(\"Initialized {} audit plugins: {}\", plugins.size(), pluginNames);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}