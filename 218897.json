{"path":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+random.nextInt(10);\n    boolean doReaderPooling = random.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(random, docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+random.nextInt(10);\n    boolean doReaderPooling = random.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(random, docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+random().nextInt(10);\n    boolean doReaderPooling = random().nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(random(), docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+random.nextInt(10);\n    boolean doReaderPooling = random.nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(random, docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    boolean doReaderPooling = random().nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, doReaderPooling);\n    indexSerial(random(), docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+random().nextInt(10);\n    boolean doReaderPooling = random().nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, maxThreadStates, doReaderPooling);\n    indexSerial(random(), docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6105d385afcbf42689e171e9bcea48d0c9ff6c","date":1454692764,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    Directory dir1 = newMaybeVirusCheckingDirectory();\n    Directory dir2 = newMaybeVirusCheckingDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    boolean doReaderPooling = random().nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, doReaderPooling);\n    indexSerial(random(), docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    boolean doReaderPooling = random().nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, doReaderPooling);\n    indexSerial(random(), docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    Directory dir1 = newMaybeVirusCheckingDirectory();\n    Directory dir2 = newMaybeVirusCheckingDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    boolean doReaderPooling = random().nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, doReaderPooling);\n    indexSerial(random(), docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    boolean doReaderPooling = random().nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, doReaderPooling);\n    indexSerial(random(), docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    Directory dir1 = newMaybeVirusCheckingDirectory();\n    Directory dir2 = newMaybeVirusCheckingDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    boolean doReaderPooling = random().nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, doReaderPooling);\n    indexSerial(random(), docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    boolean doReaderPooling = random().nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, doReaderPooling);\n    indexSerial(random(), docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    Directory dir1 = newMaybeVirusCheckingDirectory();\n    Directory dir2 = newMaybeVirusCheckingDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    boolean doReaderPooling = random().nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, doReaderPooling);\n    indexSerial(random(), docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    Directory dir1 = newDirectory();\n    Directory dir2 = newDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    boolean doReaderPooling = random().nextBoolean();\n    Map<String,Document> docs = indexRandom(5, 3, 100, dir1, doReaderPooling);\n    indexSerial(random(), docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e6105d385afcbf42689e171e9bcea48d0c9ff6c":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["c02b804ab16489b95429791a2d8fb0e0728354d4","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["c02b804ab16489b95429791a2d8fb0e0728354d4","1e6105d385afcbf42689e171e9bcea48d0c9ff6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["c02b804ab16489b95429791a2d8fb0e0728354d4","b470f36a9372c97283360b1304eacbde22df6c0d"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"1e6105d385afcbf42689e171e9bcea48d0c9ff6c":["b470f36a9372c97283360b1304eacbde22df6c0d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["1e6105d385afcbf42689e171e9bcea48d0c9ff6c","5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}