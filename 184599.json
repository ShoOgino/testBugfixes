{"path":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n      d.add(newField(\"contents\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n      d.add(newField(\"contents\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n      d.add(newField(\"contents\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n      d.add(newField(\"contents\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n      d.add(newField(\"contents\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = DirectoryReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n      d.add(newField(\"contents\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newStringField(\"id\", Integer.toString(i), Field.Store.YES));\n      d.add(newTextField(\"contents\", English.intToEnglish(i), Field.Store.NO));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = DirectoryReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newField(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n      d.add(newField(\"contents\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = DirectoryReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"978de4e2d23054c6624dd5928ddeb734dca68eec","date":1370592803,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = RandomIndexWriter.mockIndexWriter(directory, conf, random());\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newStringField(\"id\", Integer.toString(i), Field.Store.YES));\n      d.add(newTextField(\"contents\", English.intToEnglish(i), Field.Store.NO));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = DirectoryReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = new MockIndexWriter(directory, conf);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newStringField(\"id\", Integer.toString(i), Field.Store.YES));\n      d.add(newTextField(\"contents\", English.intToEnglish(i), Field.Store.NO));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = DirectoryReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = RandomIndexWriter.mockIndexWriter(directory, conf, random());\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newStringField(\"id\", Integer.toString(i), Field.Store.YES));\n      d.add(newTextField(\"contents\", English.intToEnglish(i), Field.Store.NO));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = DirectoryReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.shutdown();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = RandomIndexWriter.mockIndexWriter(directory, conf, random());\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newStringField(\"id\", Integer.toString(i), Field.Store.YES));\n      d.add(newTextField(\"contents\", English.intToEnglish(i), Field.Store.NO));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = DirectoryReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = RandomIndexWriter.mockIndexWriter(directory, conf, random());\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newStringField(\"id\", Integer.toString(i), Field.Store.YES));\n      d.add(newTextField(\"contents\", English.intToEnglish(i), Field.Store.NO));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = DirectoryReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = RandomIndexWriter.mockIndexWriter(directory, conf, random());\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newStringField(\"id\", Integer.toString(i), Field.Store.YES));\n      d.add(newTextField(\"contents\", English.intToEnglish(i), Field.Store.NO));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = DirectoryReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.shutdown();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n   * Run N indexer and N searchers against single index as\n   * stress test.\n   */\n  public void runTest(Directory directory) throws Exception {\n    int indexThreads = TEST_NIGHTLY ? 2 : 1;\n    int searchThreads = TEST_NIGHTLY ? 2 : 1;\n    int indexIterations = TEST_NIGHTLY ? 10 : 1;\n    int searchIterations = TEST_NIGHTLY ? 10 : 1;\n\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = RandomIndexWriter.mockIndexWriter(directory, conf, random());\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newStringField(\"id\", Integer.toString(i), Field.Store.YES));\n      d.add(newTextField(\"contents\", English.intToEnglish(i), Field.Store.NO));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = DirectoryReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    List<TimedThread> threads = new ArrayList<>();\n    for (int i = 0; i < indexThreads; i++) {\n      threads.add(new IndexerThread(writer, indexIterations));\n    }\n    for (int i = 0; i < searchThreads; i++) {\n      threads.add(new SearcherThread(directory, searchIterations));\n    }\n    for (TimedThread thread : threads) {\n      thread.start();\n    }\n    for (TimedThread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    \n    for (TimedThread thread : threads) {\n      if (thread.failure != null) {\n        throw new RuntimeException(\"hit exception from \" + thread, thread.failure);\n      }\n    }\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(7);\n    ((TieredMergePolicy) conf.getMergePolicy()).setMaxMergeAtOnce(3);\n    IndexWriter writer = RandomIndexWriter.mockIndexWriter(directory, conf, random());\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(newStringField(\"id\", Integer.toString(i), Field.Store.YES));\n      d.add(newTextField(\"contents\", English.intToEnglish(i), Field.Store.NO));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = DirectoryReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"978de4e2d23054c6624dd5928ddeb734dca68eec":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["978de4e2d23054c6624dd5928ddeb734dca68eec"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["978de4e2d23054c6624dd5928ddeb734dca68eec"],"978de4e2d23054c6624dd5928ddeb734dca68eec":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}