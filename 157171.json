{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","commits":[{"id":"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1","date":1383143016,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.number);\n    final SortedSetEntry entry = sortedSets.get(field.number);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      sortedSetInstances.put(field.number, instance);\n    }\n\n    final NumericDocValues docToOrdAddress = instance.docToOrdAddress;\n    final NumericDocValues ords = instance.ords;\n    final BinaryDocValues values = instance.values;\n\n    // Must make a new instance since the iterator has state:\n    return new SortedSetDocValues() {\n      int ordUpto;\n      int ordLimit;\n\n      @Override\n      public long nextOrd() {\n        if (ordUpto == ordLimit) {\n          return NO_MORE_ORDS;\n        } else {\n          return ords.get(ordUpto++);\n        }\n      }\n      \n      @Override\n      public void setDocument(int docID) {\n        ordUpto = (int) docToOrdAddress.get(docID);\n        ordLimit = (int) docToOrdAddress.get(docID+1);\n      }\n\n      @Override\n      public void lookupOrd(long ord, BytesRef result) {\n        values.get((int) ord, result);\n      }\n\n      @Override\n      public long getValueCount() {\n        return entry.values.count;\n      }\n\n      // Leave lookupTerm to super's binary search\n\n      // Leave termsEnum to super\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc45495cddab770758da8a7fe79f01747b83c9ee","date":1392859277,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.number);\n    final SortedSetEntry entry = sortedSets.get(field.number);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      sortedSetInstances.put(field.number, instance);\n    }\n\n    final NumericDocValues docToOrdAddress = instance.docToOrdAddress;\n    final NumericDocValues ords = instance.ords;\n    final BinaryDocValues values = instance.values;\n\n    // Must make a new instance since the iterator has state:\n    return new RandomAccessOrds() {\n      int ordStart;\n      int ordUpto;\n      int ordLimit;\n\n      @Override\n      public long nextOrd() {\n        if (ordUpto == ordLimit) {\n          return NO_MORE_ORDS;\n        } else {\n          return ords.get(ordUpto++);\n        }\n      }\n      \n      @Override\n      public void setDocument(int docID) {\n        ordStart = ordUpto = (int) docToOrdAddress.get(docID);\n        ordLimit = (int) docToOrdAddress.get(docID+1);\n      }\n\n      @Override\n      public void lookupOrd(long ord, BytesRef result) {\n        values.get((int) ord, result);\n      }\n\n      @Override\n      public long getValueCount() {\n        return entry.values.count;\n      }\n\n      @Override\n      public long ordAt(int index) {\n        return ords.get(ordStart + index);\n      }\n\n      @Override\n      public int cardinality() {\n        return ordLimit - ordStart;\n      }\n\n      // Leave lookupTerm to super's binary search\n\n      // Leave termsEnum to super\n    };\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.number);\n    final SortedSetEntry entry = sortedSets.get(field.number);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      sortedSetInstances.put(field.number, instance);\n    }\n\n    final NumericDocValues docToOrdAddress = instance.docToOrdAddress;\n    final NumericDocValues ords = instance.ords;\n    final BinaryDocValues values = instance.values;\n\n    // Must make a new instance since the iterator has state:\n    return new SortedSetDocValues() {\n      int ordUpto;\n      int ordLimit;\n\n      @Override\n      public long nextOrd() {\n        if (ordUpto == ordLimit) {\n          return NO_MORE_ORDS;\n        } else {\n          return ords.get(ordUpto++);\n        }\n      }\n      \n      @Override\n      public void setDocument(int docID) {\n        ordUpto = (int) docToOrdAddress.get(docID);\n        ordLimit = (int) docToOrdAddress.get(docID+1);\n      }\n\n      @Override\n      public void lookupOrd(long ord, BytesRef result) {\n        values.get((int) ord, result);\n      }\n\n      @Override\n      public long getValueCount() {\n        return entry.values.count;\n      }\n\n      // Leave lookupTerm to super's binary search\n\n      // Leave termsEnum to super\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.number);\n    final SortedSetEntry entry = sortedSets.get(field.number);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      sortedSetInstances.put(field.number, instance);\n    }\n\n    final NumericDocValues docToOrdAddress = instance.docToOrdAddress;\n    final NumericDocValues ords = instance.ords;\n    final BinaryDocValues values = getBinary(field);\n\n    // Must make a new instance since the iterator has state:\n    return new RandomAccessOrds() {\n      int ordStart;\n      int ordUpto;\n      int ordLimit;\n\n      @Override\n      public long nextOrd() {\n        if (ordUpto == ordLimit) {\n          return NO_MORE_ORDS;\n        } else {\n          return ords.get(ordUpto++);\n        }\n      }\n      \n      @Override\n      public void setDocument(int docID) {\n        ordStart = ordUpto = (int) docToOrdAddress.get(docID);\n        ordLimit = (int) docToOrdAddress.get(docID+1);\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) {\n        return values.get((int) ord);\n      }\n\n      @Override\n      public long getValueCount() {\n        return entry.values.count;\n      }\n\n      @Override\n      public long ordAt(int index) {\n        return ords.get(ordStart + index);\n      }\n\n      @Override\n      public int cardinality() {\n        return ordLimit - ordStart;\n      }\n\n      // Leave lookupTerm to super's binary search\n\n      // Leave termsEnum to super\n    };\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.number);\n    final SortedSetEntry entry = sortedSets.get(field.number);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      sortedSetInstances.put(field.number, instance);\n    }\n\n    final NumericDocValues docToOrdAddress = instance.docToOrdAddress;\n    final NumericDocValues ords = instance.ords;\n    final BinaryDocValues values = instance.values;\n\n    // Must make a new instance since the iterator has state:\n    return new RandomAccessOrds() {\n      int ordStart;\n      int ordUpto;\n      int ordLimit;\n\n      @Override\n      public long nextOrd() {\n        if (ordUpto == ordLimit) {\n          return NO_MORE_ORDS;\n        } else {\n          return ords.get(ordUpto++);\n        }\n      }\n      \n      @Override\n      public void setDocument(int docID) {\n        ordStart = ordUpto = (int) docToOrdAddress.get(docID);\n        ordLimit = (int) docToOrdAddress.get(docID+1);\n      }\n\n      @Override\n      public void lookupOrd(long ord, BytesRef result) {\n        values.get((int) ord, result);\n      }\n\n      @Override\n      public long getValueCount() {\n        return entry.values.count;\n      }\n\n      @Override\n      public long ordAt(int index) {\n        return ords.get(ordStart + index);\n      }\n\n      @Override\n      public int cardinality() {\n        return ordLimit - ordStart;\n      }\n\n      // Leave lookupTerm to super's binary search\n\n      // Leave termsEnum to super\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.number);\n    final SortedSetEntry entry = sortedSets.get(field.number);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      sortedSetInstances.put(field.number, instance);\n    }\n\n    if (instance.docToOrdAddress == null) {\n      SortedDocValues sorted = newSortedInstance(instance.ords, getBinary(field), entry.values.count);\n      return DocValues.singleton(sorted);\n    } else {\n      final NumericDocValues docToOrdAddress = instance.docToOrdAddress;\n      final NumericDocValues ords = instance.ords;\n      final BinaryDocValues values = getBinary(field);\n      \n      // Must make a new instance since the iterator has state:\n      return new RandomAccessOrds() {\n        int ordStart;\n        int ordUpto;\n        int ordLimit;\n        \n        @Override\n        public long nextOrd() {\n          if (ordUpto == ordLimit) {\n            return NO_MORE_ORDS;\n          } else {\n            return ords.get(ordUpto++);\n          }\n        }\n        \n        @Override\n        public void setDocument(int docID) {\n          ordStart = ordUpto = (int) docToOrdAddress.get(docID);\n          ordLimit = (int) docToOrdAddress.get(docID+1);\n        }\n        \n        @Override\n        public BytesRef lookupOrd(long ord) {\n          return values.get((int) ord);\n        }\n        \n        @Override\n        public long getValueCount() {\n          return entry.values.count;\n        }\n        \n        @Override\n        public long ordAt(int index) {\n          return ords.get(ordStart + index);\n        }\n        \n        @Override\n        public int cardinality() {\n          return ordLimit - ordStart;\n        }\n        \n        // Leave lookupTerm to super's binary search\n        \n        // Leave termsEnum to super\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.number);\n    final SortedSetEntry entry = sortedSets.get(field.number);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      sortedSetInstances.put(field.number, instance);\n    }\n\n    final NumericDocValues docToOrdAddress = instance.docToOrdAddress;\n    final NumericDocValues ords = instance.ords;\n    final BinaryDocValues values = getBinary(field);\n\n    // Must make a new instance since the iterator has state:\n    return new RandomAccessOrds() {\n      int ordStart;\n      int ordUpto;\n      int ordLimit;\n\n      @Override\n      public long nextOrd() {\n        if (ordUpto == ordLimit) {\n          return NO_MORE_ORDS;\n        } else {\n          return ords.get(ordUpto++);\n        }\n      }\n      \n      @Override\n      public void setDocument(int docID) {\n        ordStart = ordUpto = (int) docToOrdAddress.get(docID);\n        ordLimit = (int) docToOrdAddress.get(docID+1);\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) {\n        return values.get((int) ord);\n      }\n\n      @Override\n      public long getValueCount() {\n        return entry.values.count;\n      }\n\n      @Override\n      public long ordAt(int index) {\n        return ords.get(ordStart + index);\n      }\n\n      @Override\n      public int cardinality() {\n        return ordLimit - ordStart;\n      }\n\n      // Leave lookupTerm to super's binary search\n\n      // Leave termsEnum to super\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.number);\n    final SortedSetEntry entry = sortedSets.get(field.number);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      sortedSetInstances.put(field.number, instance);\n    }\n\n    if (instance.docToOrdAddress == null) {\n      SortedDocValues sorted = newSortedInstance(instance.ords, getBinary(field), entry.values.count);\n      return DocValues.singleton(sorted);\n    } else {\n      final NumericDocValues docToOrdAddress = instance.docToOrdAddress;\n      final NumericDocValues ords = instance.ords;\n      final BinaryDocValues values = getBinary(field);\n      \n      // Must make a new instance since the iterator has state:\n      return new RandomAccessOrds() {\n        int ordStart;\n        int ordUpto;\n        int ordLimit;\n        \n        @Override\n        public long nextOrd() {\n          if (ordUpto == ordLimit) {\n            return NO_MORE_ORDS;\n          } else {\n            return ords.get(ordUpto++);\n          }\n        }\n        \n        @Override\n        public void setDocument(int docID) {\n          ordStart = ordUpto = (int) docToOrdAddress.get(docID);\n          ordLimit = (int) docToOrdAddress.get(docID+1);\n        }\n        \n        @Override\n        public BytesRef lookupOrd(long ord) {\n          return values.get((int) ord);\n        }\n        \n        @Override\n        public long getValueCount() {\n          return entry.values.count;\n        }\n        \n        @Override\n        public long ordAt(int index) {\n          return ords.get(ordStart + index);\n        }\n        \n        @Override\n        public int cardinality() {\n          return ordLimit - ordStart;\n        }\n        \n        // Leave lookupTerm to super's binary search\n        \n        // Leave termsEnum to super\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.number);\n    final SortedSetEntry entry = sortedSets.get(field.number);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      sortedSetInstances.put(field.number, instance);\n    }\n\n    final NumericDocValues docToOrdAddress = instance.docToOrdAddress;\n    final NumericDocValues ords = instance.ords;\n    final BinaryDocValues values = getBinary(field);\n\n    // Must make a new instance since the iterator has state:\n    return new RandomAccessOrds() {\n      int ordStart;\n      int ordUpto;\n      int ordLimit;\n\n      @Override\n      public long nextOrd() {\n        if (ordUpto == ordLimit) {\n          return NO_MORE_ORDS;\n        } else {\n          return ords.get(ordUpto++);\n        }\n      }\n      \n      @Override\n      public void setDocument(int docID) {\n        ordStart = ordUpto = (int) docToOrdAddress.get(docID);\n        ordLimit = (int) docToOrdAddress.get(docID+1);\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) {\n        return values.get((int) ord);\n      }\n\n      @Override\n      public long getValueCount() {\n        return entry.values.count;\n      }\n\n      @Override\n      public long ordAt(int index) {\n        return ords.get(ordStart + index);\n      }\n\n      @Override\n      public int cardinality() {\n        return ordLimit - ordStart;\n      }\n\n      // Leave lookupTerm to super's binary search\n\n      // Leave termsEnum to super\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.name);\n    final SortedSetEntry entry = sortedSets.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      sortedSetInstances.put(field.name, instance);\n    }\n\n    if (instance.docToOrdAddress == null) {\n      SortedDocValues sorted = newSortedInstance(instance.ords.numerics, getBinary(field), entry.values.count);\n      return DocValues.singleton(sorted);\n    } else {\n      final NumericDocValues docToOrdAddress = instance.docToOrdAddress.numerics;\n      final NumericDocValues ords = instance.ords.numerics;\n      final BinaryDocValues values = getBinary(field);\n      \n      // Must make a new instance since the iterator has state:\n      return new RandomAccessOrds() {\n        int ordStart;\n        int ordUpto;\n        int ordLimit;\n        \n        @Override\n        public long nextOrd() {\n          if (ordUpto == ordLimit) {\n            return NO_MORE_ORDS;\n          } else {\n            return ords.get(ordUpto++);\n          }\n        }\n        \n        @Override\n        public void setDocument(int docID) {\n          ordStart = ordUpto = (int) docToOrdAddress.get(docID);\n          ordLimit = (int) docToOrdAddress.get(docID+1);\n        }\n        \n        @Override\n        public BytesRef lookupOrd(long ord) {\n          return values.get((int) ord);\n        }\n        \n        @Override\n        public long getValueCount() {\n          return entry.values.count;\n        }\n        \n        @Override\n        public long ordAt(int index) {\n          return ords.get(ordStart + index);\n        }\n        \n        @Override\n        public int cardinality() {\n          return ordLimit - ordStart;\n        }\n        \n        // Leave lookupTerm to super's binary search\n        \n        // Leave termsEnum to super\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.number);\n    final SortedSetEntry entry = sortedSets.get(field.number);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      sortedSetInstances.put(field.number, instance);\n    }\n\n    if (instance.docToOrdAddress == null) {\n      SortedDocValues sorted = newSortedInstance(instance.ords, getBinary(field), entry.values.count);\n      return DocValues.singleton(sorted);\n    } else {\n      final NumericDocValues docToOrdAddress = instance.docToOrdAddress;\n      final NumericDocValues ords = instance.ords;\n      final BinaryDocValues values = getBinary(field);\n      \n      // Must make a new instance since the iterator has state:\n      return new RandomAccessOrds() {\n        int ordStart;\n        int ordUpto;\n        int ordLimit;\n        \n        @Override\n        public long nextOrd() {\n          if (ordUpto == ordLimit) {\n            return NO_MORE_ORDS;\n          } else {\n            return ords.get(ordUpto++);\n          }\n        }\n        \n        @Override\n        public void setDocument(int docID) {\n          ordStart = ordUpto = (int) docToOrdAddress.get(docID);\n          ordLimit = (int) docToOrdAddress.get(docID+1);\n        }\n        \n        @Override\n        public BytesRef lookupOrd(long ord) {\n          return values.get((int) ord);\n        }\n        \n        @Override\n        public long getValueCount() {\n          return entry.values.count;\n        }\n        \n        @Override\n        public long ordAt(int index) {\n          return ords.get(ordStart + index);\n        }\n        \n        @Override\n        public int cardinality() {\n          return ordLimit - ordStart;\n        }\n        \n        // Leave lookupTerm to super's binary search\n        \n        // Leave termsEnum to super\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.name);\n    final SortedSetEntry entry = sortedSets.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      if (!merging) {\n        sortedSetInstances.put(field.name, instance);\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n      }\n    }\n\n    if (instance.docToOrdAddress == null) {\n      SortedDocValues sorted = newSortedInstance(instance.ords.numerics, getBinary(field), entry.values.count);\n      return DocValues.singleton(sorted);\n    } else {\n      final NumericDocValues docToOrdAddress = instance.docToOrdAddress.numerics;\n      final NumericDocValues ords = instance.ords.numerics;\n      final BinaryDocValues values = getBinary(field);\n      \n      // Must make a new instance since the iterator has state:\n      return new RandomAccessOrds() {\n        int ordStart;\n        int ordUpto;\n        int ordLimit;\n        \n        @Override\n        public long nextOrd() {\n          if (ordUpto == ordLimit) {\n            return NO_MORE_ORDS;\n          } else {\n            return ords.get(ordUpto++);\n          }\n        }\n        \n        @Override\n        public void setDocument(int docID) {\n          ordStart = ordUpto = (int) docToOrdAddress.get(docID);\n          ordLimit = (int) docToOrdAddress.get(docID+1);\n        }\n        \n        @Override\n        public BytesRef lookupOrd(long ord) {\n          return values.get((int) ord);\n        }\n        \n        @Override\n        public long getValueCount() {\n          return entry.values.count;\n        }\n        \n        @Override\n        public long ordAt(int index) {\n          return ords.get(ordStart + index);\n        }\n        \n        @Override\n        public int cardinality() {\n          return ordLimit - ordStart;\n        }\n        \n        // Leave lookupTerm to super's binary search\n        \n        // Leave termsEnum to super\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.name);\n    final SortedSetEntry entry = sortedSets.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      sortedSetInstances.put(field.name, instance);\n    }\n\n    if (instance.docToOrdAddress == null) {\n      SortedDocValues sorted = newSortedInstance(instance.ords.numerics, getBinary(field), entry.values.count);\n      return DocValues.singleton(sorted);\n    } else {\n      final NumericDocValues docToOrdAddress = instance.docToOrdAddress.numerics;\n      final NumericDocValues ords = instance.ords.numerics;\n      final BinaryDocValues values = getBinary(field);\n      \n      // Must make a new instance since the iterator has state:\n      return new RandomAccessOrds() {\n        int ordStart;\n        int ordUpto;\n        int ordLimit;\n        \n        @Override\n        public long nextOrd() {\n          if (ordUpto == ordLimit) {\n            return NO_MORE_ORDS;\n          } else {\n            return ords.get(ordUpto++);\n          }\n        }\n        \n        @Override\n        public void setDocument(int docID) {\n          ordStart = ordUpto = (int) docToOrdAddress.get(docID);\n          ordLimit = (int) docToOrdAddress.get(docID+1);\n        }\n        \n        @Override\n        public BytesRef lookupOrd(long ord) {\n          return values.get((int) ord);\n        }\n        \n        @Override\n        public long getValueCount() {\n          return entry.values.count;\n        }\n        \n        @Override\n        public long ordAt(int index) {\n          return ords.get(ordStart + index);\n        }\n        \n        @Override\n        public int cardinality() {\n          return ordLimit - ordStart;\n        }\n        \n        // Leave lookupTerm to super's binary search\n        \n        // Leave termsEnum to super\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.name);\n    final SortedSetEntry entry = sortedSets.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      if (!merging) {\n        sortedSetInstances.put(field.name, instance);\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n      }\n    }\n\n    if (instance.docToOrdAddress == null) {\n      SortedDocValues sorted = newSortedInstance(instance.ords.numerics, getBinary(field), entry.values.count);\n      return DocValues.singleton(sorted);\n    } else {\n      final NumericDocValues docToOrdAddress = instance.docToOrdAddress.numerics;\n      final NumericDocValues ords = instance.ords.numerics;\n      final BinaryDocValues values = getBinary(field);\n      \n      // Must make a new instance since the iterator has state:\n      return new RandomAccessOrds() {\n        int ordStart;\n        int ordUpto;\n        int ordLimit;\n        \n        @Override\n        public long nextOrd() {\n          if (ordUpto == ordLimit) {\n            return NO_MORE_ORDS;\n          } else {\n            return ords.get(ordUpto++);\n          }\n        }\n        \n        @Override\n        public void setDocument(int docID) {\n          ordStart = ordUpto = (int) docToOrdAddress.get(docID);\n          ordLimit = (int) docToOrdAddress.get(docID+1);\n        }\n        \n        @Override\n        public BytesRef lookupOrd(long ord) {\n          return values.get((int) ord);\n        }\n        \n        @Override\n        public long getValueCount() {\n          return entry.values.count;\n        }\n        \n        @Override\n        public long ordAt(int index) {\n          return ords.get(ordStart + index);\n        }\n        \n        @Override\n        public int cardinality() {\n          return ordLimit - ordStart;\n        }\n        \n        // Leave lookupTerm to super's binary search\n        \n        // Leave termsEnum to super\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.name);\n    final SortedSetEntry entry = sortedSets.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      sortedSetInstances.put(field.name, instance);\n    }\n\n    if (instance.docToOrdAddress == null) {\n      SortedDocValues sorted = newSortedInstance(instance.ords.numerics, getBinary(field), entry.values.count);\n      return DocValues.singleton(sorted);\n    } else {\n      final NumericDocValues docToOrdAddress = instance.docToOrdAddress.numerics;\n      final NumericDocValues ords = instance.ords.numerics;\n      final BinaryDocValues values = getBinary(field);\n      \n      // Must make a new instance since the iterator has state:\n      return new RandomAccessOrds() {\n        int ordStart;\n        int ordUpto;\n        int ordLimit;\n        \n        @Override\n        public long nextOrd() {\n          if (ordUpto == ordLimit) {\n            return NO_MORE_ORDS;\n          } else {\n            return ords.get(ordUpto++);\n          }\n        }\n        \n        @Override\n        public void setDocument(int docID) {\n          ordStart = ordUpto = (int) docToOrdAddress.get(docID);\n          ordLimit = (int) docToOrdAddress.get(docID+1);\n        }\n        \n        @Override\n        public BytesRef lookupOrd(long ord) {\n          return values.get((int) ord);\n        }\n        \n        @Override\n        public long getValueCount() {\n          return entry.values.count;\n        }\n        \n        @Override\n        public long ordAt(int index) {\n          return ords.get(ordStart + index);\n        }\n        \n        @Override\n        public int cardinality() {\n          return ordLimit - ordStart;\n        }\n        \n        // Leave lookupTerm to super's binary search\n        \n        // Leave termsEnum to super\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.name);\n    final SortedSetEntry entry = sortedSets.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      if (!merging) {\n        sortedSetInstances.put(field.name, instance);\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n      }\n    }\n\n    if (instance.docToOrdAddress == null) {\n      LegacySortedDocValues sorted = newSortedInstance(instance.ords.numerics, getLegacyBinary(field), entry.values.count);\n      return DocValues.singleton(new LegacySortedDocValuesWrapper(sorted, maxDoc));\n    } else {\n      final LegacyNumericDocValues docToOrdAddress = instance.docToOrdAddress.numerics;\n      final LegacyNumericDocValues ords = instance.ords.numerics;\n      final LegacyBinaryDocValues values = getLegacyBinary(field);\n      \n      // Must make a new instance since the iterator has state:\n      return new LegacySortedSetDocValuesWrapper(new LegacySortedSetDocValues() {\n        int ordStart;\n        int ordUpto;\n        int ordLimit;\n        \n        @Override\n        public long nextOrd() {\n          if (ordUpto == ordLimit) {\n            return NO_MORE_ORDS;\n          } else {\n            return ords.get(ordUpto++);\n          }\n        }\n        \n        @Override\n        public void setDocument(int docID) {\n          ordStart = ordUpto = (int) docToOrdAddress.get(docID);\n          ordLimit = (int) docToOrdAddress.get(docID+1);\n        }\n        \n        @Override\n        public BytesRef lookupOrd(long ord) {\n          return values.get((int) ord);\n        }\n        \n        @Override\n        public long getValueCount() {\n          return entry.values.count;\n        }\n        \n        // Leave lookupTerm to super's binary search\n        \n        // Leave termsEnum to super\n        }, maxDoc);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.name);\n    final SortedSetEntry entry = sortedSets.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      if (!merging) {\n        sortedSetInstances.put(field.name, instance);\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n      }\n    }\n\n    if (instance.docToOrdAddress == null) {\n      SortedDocValues sorted = newSortedInstance(instance.ords.numerics, getBinary(field), entry.values.count);\n      return DocValues.singleton(sorted);\n    } else {\n      final NumericDocValues docToOrdAddress = instance.docToOrdAddress.numerics;\n      final NumericDocValues ords = instance.ords.numerics;\n      final BinaryDocValues values = getBinary(field);\n      \n      // Must make a new instance since the iterator has state:\n      return new RandomAccessOrds() {\n        int ordStart;\n        int ordUpto;\n        int ordLimit;\n        \n        @Override\n        public long nextOrd() {\n          if (ordUpto == ordLimit) {\n            return NO_MORE_ORDS;\n          } else {\n            return ords.get(ordUpto++);\n          }\n        }\n        \n        @Override\n        public void setDocument(int docID) {\n          ordStart = ordUpto = (int) docToOrdAddress.get(docID);\n          ordLimit = (int) docToOrdAddress.get(docID+1);\n        }\n        \n        @Override\n        public BytesRef lookupOrd(long ord) {\n          return values.get((int) ord);\n        }\n        \n        @Override\n        public long getValueCount() {\n          return entry.values.count;\n        }\n        \n        @Override\n        public long ordAt(int index) {\n          return ords.get(ordStart + index);\n        }\n        \n        @Override\n        public int cardinality() {\n          return ordLimit - ordStart;\n        }\n        \n        // Leave lookupTerm to super's binary search\n        \n        // Leave termsEnum to super\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.name);\n    final SortedSetEntry entry = sortedSets.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      if (!merging) {\n        sortedSetInstances.put(field.name, instance);\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n      }\n    }\n\n    if (instance.docToOrdAddress == null) {\n      LegacySortedDocValues sorted = newSortedInstance(instance.ords.numerics, getLegacyBinary(field), entry.values.count);\n      return DocValues.singleton(new LegacySortedDocValuesWrapper(sorted, maxDoc));\n    } else {\n      final LegacyNumericDocValues docToOrdAddress = instance.docToOrdAddress.numerics;\n      final LegacyNumericDocValues ords = instance.ords.numerics;\n      final LegacyBinaryDocValues values = getLegacyBinary(field);\n      \n      // Must make a new instance since the iterator has state:\n      return new LegacySortedSetDocValuesWrapper(new LegacySortedSetDocValues() {\n        int ordStart;\n        int ordUpto;\n        int ordLimit;\n        \n        @Override\n        public long nextOrd() {\n          if (ordUpto == ordLimit) {\n            return NO_MORE_ORDS;\n          } else {\n            return ords.get(ordUpto++);\n          }\n        }\n        \n        @Override\n        public void setDocument(int docID) {\n          ordStart = ordUpto = (int) docToOrdAddress.get(docID);\n          ordLimit = (int) docToOrdAddress.get(docID+1);\n        }\n        \n        @Override\n        public BytesRef lookupOrd(long ord) {\n          return values.get((int) ord);\n        }\n        \n        @Override\n        public long getValueCount() {\n          return entry.values.count;\n        }\n        \n        // Leave lookupTerm to super's binary search\n        \n        // Leave termsEnum to super\n        }, maxDoc);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.name);\n    final SortedSetEntry entry = sortedSets.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      if (!merging) {\n        sortedSetInstances.put(field.name, instance);\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n      }\n    }\n\n    if (instance.docToOrdAddress == null) {\n      SortedDocValues sorted = newSortedInstance(instance.ords.numerics, getBinary(field), entry.values.count);\n      return DocValues.singleton(sorted);\n    } else {\n      final NumericDocValues docToOrdAddress = instance.docToOrdAddress.numerics;\n      final NumericDocValues ords = instance.ords.numerics;\n      final BinaryDocValues values = getBinary(field);\n      \n      // Must make a new instance since the iterator has state:\n      return new RandomAccessOrds() {\n        int ordStart;\n        int ordUpto;\n        int ordLimit;\n        \n        @Override\n        public long nextOrd() {\n          if (ordUpto == ordLimit) {\n            return NO_MORE_ORDS;\n          } else {\n            return ords.get(ordUpto++);\n          }\n        }\n        \n        @Override\n        public void setDocument(int docID) {\n          ordStart = ordUpto = (int) docToOrdAddress.get(docID);\n          ordLimit = (int) docToOrdAddress.get(docID+1);\n        }\n        \n        @Override\n        public BytesRef lookupOrd(long ord) {\n          return values.get((int) ord);\n        }\n        \n        @Override\n        public long getValueCount() {\n          return entry.values.count;\n        }\n        \n        @Override\n        public long ordAt(int index) {\n          return ords.get(ordStart + index);\n        }\n        \n        @Override\n        public int cardinality() {\n          return ordLimit - ordStart;\n        }\n        \n        // Leave lookupTerm to super's binary search\n        \n        // Leave termsEnum to super\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.name);\n    final SortedSetEntry entry = sortedSets.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      if (!merging) {\n        sortedSetInstances.put(field.name, instance);\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n      }\n    }\n\n    if (instance.docToOrdAddress == null) {\n      LegacySortedDocValues sorted = newSortedInstance(instance.ords.numerics, getLegacyBinary(field), entry.values.count);\n      return DocValues.singleton(new LegacySortedDocValuesWrapper(sorted, maxDoc));\n    } else {\n      final LegacyNumericDocValues docToOrdAddress = instance.docToOrdAddress.numerics;\n      final LegacyNumericDocValues ords = instance.ords.numerics;\n      final LegacyBinaryDocValues values = getLegacyBinary(field);\n      \n      // Must make a new instance since the iterator has state:\n      return new LegacySortedSetDocValuesWrapper(new LegacySortedSetDocValues() {\n        int ordStart;\n        int ordUpto;\n        int ordLimit;\n        \n        @Override\n        public long nextOrd() {\n          if (ordUpto == ordLimit) {\n            return NO_MORE_ORDS;\n          } else {\n            return ords.get(ordUpto++);\n          }\n        }\n        \n        @Override\n        public void setDocument(int docID) {\n          ordStart = ordUpto = (int) docToOrdAddress.get(docID);\n          ordLimit = (int) docToOrdAddress.get(docID+1);\n        }\n        \n        @Override\n        public BytesRef lookupOrd(long ord) {\n          return values.get((int) ord);\n        }\n        \n        @Override\n        public long getValueCount() {\n          return entry.values.count;\n        }\n        \n        // Leave lookupTerm to super's binary search\n        \n        // Leave termsEnum to super\n        }, maxDoc);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.name);\n    final SortedSetEntry entry = sortedSets.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      if (!merging) {\n        sortedSetInstances.put(field.name, instance);\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n      }\n    }\n\n    if (instance.docToOrdAddress == null) {\n      SortedDocValues sorted = newSortedInstance(instance.ords.numerics, getBinary(field), entry.values.count);\n      return DocValues.singleton(sorted);\n    } else {\n      final NumericDocValues docToOrdAddress = instance.docToOrdAddress.numerics;\n      final NumericDocValues ords = instance.ords.numerics;\n      final BinaryDocValues values = getBinary(field);\n      \n      // Must make a new instance since the iterator has state:\n      return new RandomAccessOrds() {\n        int ordStart;\n        int ordUpto;\n        int ordLimit;\n        \n        @Override\n        public long nextOrd() {\n          if (ordUpto == ordLimit) {\n            return NO_MORE_ORDS;\n          } else {\n            return ords.get(ordUpto++);\n          }\n        }\n        \n        @Override\n        public void setDocument(int docID) {\n          ordStart = ordUpto = (int) docToOrdAddress.get(docID);\n          ordLimit = (int) docToOrdAddress.get(docID+1);\n        }\n        \n        @Override\n        public BytesRef lookupOrd(long ord) {\n          return values.get((int) ord);\n        }\n        \n        @Override\n        public long getValueCount() {\n          return entry.values.count;\n        }\n        \n        @Override\n        public long ordAt(int index) {\n          return ords.get(ordStart + index);\n        }\n        \n        @Override\n        public int cardinality() {\n          return ordLimit - ordStart;\n        }\n        \n        // Leave lookupTerm to super's binary search\n        \n        // Leave termsEnum to super\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f18fb78980c55a781fd9fdc505634171059b1d","date":1567674462,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getSortedSet(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    SortedSetRawValues instance = sortedSetInstances.get(field.name);\n    final SortedSetEntry entry = sortedSets.get(field.name);\n    if (instance == null) {\n      // Lazy load\n      instance = loadSortedSet(entry);\n      if (!merging) {\n        sortedSetInstances.put(field.name, instance);\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n      }\n    }\n\n    if (instance.docToOrdAddress == null) {\n      LegacySortedDocValues sorted = newSortedInstance(instance.ords.numerics, getLegacyBinary(field), entry.values.count);\n      return DocValues.singleton(new LegacySortedDocValuesWrapper(sorted, maxDoc));\n    } else {\n      final LegacyNumericDocValues docToOrdAddress = instance.docToOrdAddress.numerics;\n      final LegacyNumericDocValues ords = instance.ords.numerics;\n      final LegacyBinaryDocValues values = getLegacyBinary(field);\n      \n      // Must make a new instance since the iterator has state:\n      return new LegacySortedSetDocValuesWrapper(new LegacySortedSetDocValues() {\n        int ordStart;\n        int ordUpto;\n        int ordLimit;\n        \n        @Override\n        public long nextOrd() {\n          if (ordUpto == ordLimit) {\n            return NO_MORE_ORDS;\n          } else {\n            return ords.get(ordUpto++);\n          }\n        }\n        \n        @Override\n        public void setDocument(int docID) {\n          ordStart = ordUpto = (int) docToOrdAddress.get(docID);\n          ordLimit = (int) docToOrdAddress.get(docID+1);\n        }\n        \n        @Override\n        public BytesRef lookupOrd(long ord) {\n          return values.get((int) ord);\n        }\n        \n        @Override\n        public long getValueCount() {\n          return entry.values.count;\n        }\n        \n        // Leave lookupTerm to super's binary search\n        \n        // Leave termsEnum to super\n        }, maxDoc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["bc45495cddab770758da8a7fe79f01747b83c9ee"],"bc45495cddab770758da8a7fe79f01747b83c9ee":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9bb9a29a5e71a90295f175df8919802993142c9a","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bc8f80fee115148a0e4a0574560be06b494de821":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["0936055c0eed56be3e4ae5c9db5b0e355390736a","bc8f80fee115148a0e4a0574560be06b494de821"],"74f18fb78980c55a781fd9fdc505634171059b1d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9bb9a29a5e71a90295f175df8919802993142c9a","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["9bb9a29a5e71a90295f175df8919802993142c9a"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74f18fb78980c55a781fd9fdc505634171059b1d"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"]},"commit2Childs":{"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"bc45495cddab770758da8a7fe79f01747b83c9ee":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1":["bc45495cddab770758da8a7fe79f01747b83c9ee"],"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","74f18fb78980c55a781fd9fdc505634171059b1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"],"74f18fb78980c55a781fd9fdc505634171059b1d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","0936055c0eed56be3e4ae5c9db5b0e355390736a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}