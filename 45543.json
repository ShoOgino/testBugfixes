{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilderLight#build(Collection[BytesRef]).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilderLight#build(Collection[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Build a minimal, deterministic automaton from a sorted list of {@link BytesRef} representing\n   * strings in UTF-8. These strings must be binary-sorted.\n   */\n  public static LightAutomaton build(Collection<BytesRef> input) {\n    final DaciukMihovAutomatonBuilderLight builder = new DaciukMihovAutomatonBuilderLight();\n    \n    CharsRef scratch = new CharsRef();\n    for (BytesRef b : input) {\n      UnicodeUtil.UTF8toUTF16(b, scratch);\n      builder.add(scratch);\n    }\n    \n    LightAutomaton.Builder a = new LightAutomaton.Builder();\n    convert(a,\n        builder.complete(), \n        new IdentityHashMap<State,Integer>());\n\n    return a.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#build(Collection[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilderLight#build(Collection[BytesRef]).mjava","sourceNew":"  /**\n   * Build a minimal, deterministic automaton from a sorted list of {@link BytesRef} representing\n   * strings in UTF-8. These strings must be binary-sorted.\n   */\n  public static Automaton build(Collection<BytesRef> input) {\n    final DaciukMihovAutomatonBuilder builder = new DaciukMihovAutomatonBuilder();\n    \n    CharsRef scratch = new CharsRef();\n    for (BytesRef b : input) {\n      UnicodeUtil.UTF8toUTF16(b, scratch);\n      builder.add(scratch);\n    }\n    \n    Automaton.Builder a = new Automaton.Builder();\n    convert(a,\n        builder.complete(), \n        new IdentityHashMap<State,Integer>());\n\n    return a.finish();\n  }\n\n","sourceOld":"  /**\n   * Build a minimal, deterministic automaton from a sorted list of {@link BytesRef} representing\n   * strings in UTF-8. These strings must be binary-sorted.\n   */\n  public static LightAutomaton build(Collection<BytesRef> input) {\n    final DaciukMihovAutomatonBuilderLight builder = new DaciukMihovAutomatonBuilderLight();\n    \n    CharsRef scratch = new CharsRef();\n    for (BytesRef b : input) {\n      UnicodeUtil.UTF8toUTF16(b, scratch);\n      builder.add(scratch);\n    }\n    \n    LightAutomaton.Builder a = new LightAutomaton.Builder();\n    convert(a,\n        builder.complete(), \n        new IdentityHashMap<State,Integer>());\n\n    return a.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}