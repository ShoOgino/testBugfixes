{"path":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testIndexingAnalysis().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testIndexingAnalysis().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testIndexingAnalysis().mjava","sourceNew":"  @Test\n  public void testIndexingAnalysis() throws Exception {\n    Analyzer a = schema.getAnalyzer();\n    String text = \"one two three si\\uD834\\uDD1Ex\";\n\n    // field one\n    TokenStream input = a.tokenStream(\"one\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"one\", \"\\u0001owt\", \"two\", \n          \"\\u0001eerht\", \"three\", \"\\u0001x\\uD834\\uDD1Eis\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 0, 4, 4, 8, 8, 14, 14 },\n        new int[] { 3, 3, 7, 7, 13, 13, 19, 19 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1, 0 }\n    );\n    // field two\n    input = a.tokenStream(\"two\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"\\u0001owt\", \n          \"\\u0001eerht\", \"\\u0001x\\uD834\\uDD1Eis\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 },\n        new int[] { 1, 1, 1, 1 }\n    );\n    // field three\n    input = a.tokenStream(\"three\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"one\", \"two\", \"three\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 }\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testIndexingAnalysis() throws Exception {\n    Analyzer a = schema.getAnalyzer();\n    String text = \"one two three si\\uD834\\uDD1Ex\";\n\n    // field one\n    TokenStream input = a.tokenStream(\"one\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"one\", \"\\u0001owt\", \"two\", \n          \"\\u0001eerht\", \"three\", \"\\u0001x\\uD834\\uDD1Eis\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 0, 4, 4, 8, 8, 14, 14 },\n        new int[] { 3, 3, 7, 7, 13, 13, 19, 19 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1, 0 }\n    );\n    // field two\n    input = a.tokenStream(\"two\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"\\u0001owt\", \n          \"\\u0001eerht\", \"\\u0001x\\uD834\\uDD1Eis\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 },\n        new int[] { 1, 1, 1, 1 }\n    );\n    // field three\n    input = a.tokenStream(\"three\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"one\", \"two\", \"three\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testIndexingAnalysis().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testIndexingAnalysis().mjava","sourceNew":"  @Test\n  public void testIndexingAnalysis() throws Exception {\n    Analyzer a = schema.getAnalyzer();\n    String text = \"one two three si\\uD834\\uDD1Ex\";\n\n    // field one\n    TokenStream input = a.tokenStream(\"one\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"one\", \"\\u0001owt\", \"two\", \n          \"\\u0001eerht\", \"three\", \"\\u0001x\\uD834\\uDD1Eis\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 0, 4, 4, 8, 8, 14, 14 },\n        new int[] { 3, 3, 7, 7, 13, 13, 19, 19 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1, 0 }\n    );\n    // field two\n    input = a.tokenStream(\"two\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"\\u0001owt\", \n          \"\\u0001eerht\", \"\\u0001x\\uD834\\uDD1Eis\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 },\n        new int[] { 1, 1, 1, 1 }\n    );\n    // field three\n    input = a.tokenStream(\"three\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"one\", \"two\", \"three\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 }\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testIndexingAnalysis() throws Exception {\n    Analyzer a = schema.getAnalyzer();\n    String text = \"one two three si\\uD834\\uDD1Ex\";\n\n    // field one\n    TokenStream input = a.tokenStream(\"one\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"one\", \"\\u0001owt\", \"two\", \n          \"\\u0001eerht\", \"three\", \"\\u0001x\\uD834\\uDD1Eis\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 0, 4, 4, 8, 8, 14, 14 },\n        new int[] { 3, 3, 7, 7, 13, 13, 19, 19 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1, 0 }\n    );\n    // field two\n    input = a.tokenStream(\"two\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"\\u0001owt\", \n          \"\\u0001eerht\", \"\\u0001x\\uD834\\uDD1Eis\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 },\n        new int[] { 1, 1, 1, 1 }\n    );\n    // field three\n    input = a.tokenStream(\"three\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"one\", \"two\", \"three\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testIndexingAnalysis().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testIndexingAnalysis().mjava","sourceNew":"  @Test\n  public void testIndexingAnalysis() throws Exception {\n    Analyzer a = schema.getAnalyzer();\n    String text = \"one two three si\\uD834\\uDD1Ex\";\n\n    // field one\n    TokenStream input = a.tokenStream(\"one\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"one\", \"\\u0001owt\", \"two\", \n          \"\\u0001eerht\", \"three\", \"\\u0001x\\uD834\\uDD1Eis\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 0, 4, 4, 8, 8, 14, 14 },\n        new int[] { 3, 3, 7, 7, 13, 13, 19, 19 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1, 0 }\n    );\n    // field two\n    input = a.tokenStream(\"two\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"\\u0001owt\", \n          \"\\u0001eerht\", \"\\u0001x\\uD834\\uDD1Eis\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 },\n        new int[] { 1, 1, 1, 1 }\n    );\n    // field three\n    input = a.tokenStream(\"three\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"one\", \"two\", \"three\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 }\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testIndexingAnalysis() throws Exception {\n    Analyzer a = schema.getAnalyzer();\n    String text = \"one two three si\\uD834\\uDD1Ex\";\n\n    // field one\n    TokenStream input = a.tokenStream(\"one\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"one\", \"\\u0001owt\", \"two\", \n          \"\\u0001eerht\", \"three\", \"\\u0001x\\uD834\\uDD1Eis\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 0, 4, 4, 8, 8, 14, 14 },\n        new int[] { 3, 3, 7, 7, 13, 13, 19, 19 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1, 0 }\n    );\n    // field two\n    input = a.tokenStream(\"two\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"\\u0001owt\", \n          \"\\u0001eerht\", \"\\u0001x\\uD834\\uDD1Eis\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 },\n        new int[] { 1, 1, 1, 1 }\n    );\n    // field three\n    input = a.tokenStream(\"three\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"one\", \"two\", \"three\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf7efd82433f3f64684711c16edfd149db6af111","date":1317013128,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testIndexingAnalysis().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testIndexingAnalysis().mjava","sourceNew":"  @Test\n  public void testIndexingAnalysis() throws Exception {\n    Analyzer a = schema.getAnalyzer();\n    String text = \"one two three si\\uD834\\uDD1Ex\";\n\n    // field one\n    TokenStream input = a.reusableTokenStream(\"one\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"one\", \"\\u0001owt\", \"two\", \n          \"\\u0001eerht\", \"three\", \"\\u0001x\\uD834\\uDD1Eis\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 0, 4, 4, 8, 8, 14, 14 },\n        new int[] { 3, 3, 7, 7, 13, 13, 19, 19 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1, 0 }\n    );\n    // field two\n    input = a.reusableTokenStream(\"two\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"\\u0001owt\", \n          \"\\u0001eerht\", \"\\u0001x\\uD834\\uDD1Eis\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 },\n        new int[] { 1, 1, 1, 1 }\n    );\n    // field three\n    input = a.reusableTokenStream(\"three\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"one\", \"two\", \"three\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 }\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testIndexingAnalysis() throws Exception {\n    Analyzer a = schema.getAnalyzer();\n    String text = \"one two three si\\uD834\\uDD1Ex\";\n\n    // field one\n    TokenStream input = a.tokenStream(\"one\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"one\", \"\\u0001owt\", \"two\", \n          \"\\u0001eerht\", \"three\", \"\\u0001x\\uD834\\uDD1Eis\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 0, 4, 4, 8, 8, 14, 14 },\n        new int[] { 3, 3, 7, 7, 13, 13, 19, 19 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1, 0 }\n    );\n    // field two\n    input = a.tokenStream(\"two\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"\\u0001owt\", \n          \"\\u0001eerht\", \"\\u0001x\\uD834\\uDD1Eis\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 },\n        new int[] { 1, 1, 1, 1 }\n    );\n    // field three\n    input = a.tokenStream(\"three\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"one\", \"two\", \"three\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testIndexingAnalysis().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testIndexingAnalysis().mjava","sourceNew":"  @Test\n  public void testIndexingAnalysis() throws Exception {\n    Analyzer a = schema.getAnalyzer();\n    String text = \"one two three si\\uD834\\uDD1Ex\";\n\n    // field one\n    TokenStream input = a.tokenStream(\"one\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"one\", \"\\u0001owt\", \"two\", \n          \"\\u0001eerht\", \"three\", \"\\u0001x\\uD834\\uDD1Eis\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 0, 4, 4, 8, 8, 14, 14 },\n        new int[] { 3, 3, 7, 7, 13, 13, 19, 19 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1, 0 }\n    );\n    // field two\n    input = a.tokenStream(\"two\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"\\u0001owt\", \n          \"\\u0001eerht\", \"\\u0001x\\uD834\\uDD1Eis\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 },\n        new int[] { 1, 1, 1, 1 }\n    );\n    // field three\n    input = a.tokenStream(\"three\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"one\", \"two\", \"three\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 }\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testIndexingAnalysis() throws Exception {\n    Analyzer a = schema.getAnalyzer();\n    String text = \"one two three si\\uD834\\uDD1Ex\";\n\n    // field one\n    TokenStream input = a.reusableTokenStream(\"one\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"one\", \"\\u0001owt\", \"two\", \n          \"\\u0001eerht\", \"three\", \"\\u0001x\\uD834\\uDD1Eis\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 0, 4, 4, 8, 8, 14, 14 },\n        new int[] { 3, 3, 7, 7, 13, 13, 19, 19 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1, 0 }\n    );\n    // field two\n    input = a.reusableTokenStream(\"two\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"\\u0001owt\", \n          \"\\u0001eerht\", \"\\u0001x\\uD834\\uDD1Eis\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 },\n        new int[] { 1, 1, 1, 1 }\n    );\n    // field three\n    input = a.reusableTokenStream(\"three\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"one\", \"two\", \"three\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 }\n    );\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testIndexingAnalysis().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testIndexingAnalysis().mjava","sourceNew":"  @Test\n  public void testIndexingAnalysis() throws Exception {\n    Analyzer a = schema.getAnalyzer();\n    String text = \"one two three si\\uD834\\uDD1Ex\";\n\n    // field one\n    TokenStream input = a.tokenStream(\"one\", text);\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"one\", \"\\u0001owt\", \"two\", \n          \"\\u0001eerht\", \"three\", \"\\u0001x\\uD834\\uDD1Eis\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 0, 4, 4, 8, 8, 14, 14 },\n        new int[] { 3, 3, 7, 7, 13, 13, 19, 19 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1, 0 }\n    );\n    // field two\n    input = a.tokenStream(\"two\", text);\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"\\u0001owt\", \n          \"\\u0001eerht\", \"\\u0001x\\uD834\\uDD1Eis\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 },\n        new int[] { 1, 1, 1, 1 }\n    );\n    // field three\n    input = a.tokenStream(\"three\", text);\n    assertTokenStreamContents(input,\n        new String[] { \"one\", \"two\", \"three\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 }\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testIndexingAnalysis() throws Exception {\n    Analyzer a = schema.getAnalyzer();\n    String text = \"one two three si\\uD834\\uDD1Ex\";\n\n    // field one\n    TokenStream input = a.tokenStream(\"one\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"one\", \"\\u0001owt\", \"two\", \n          \"\\u0001eerht\", \"three\", \"\\u0001x\\uD834\\uDD1Eis\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 0, 4, 4, 8, 8, 14, 14 },\n        new int[] { 3, 3, 7, 7, 13, 13, 19, 19 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1, 0 }\n    );\n    // field two\n    input = a.tokenStream(\"two\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"\\u0001owt\", \n          \"\\u0001eerht\", \"\\u0001x\\uD834\\uDD1Eis\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 },\n        new int[] { 1, 1, 1, 1 }\n    );\n    // field three\n    input = a.tokenStream(\"three\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"one\", \"two\", \"three\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 }\n    );\n  }\n\n","bugFix":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testIndexingAnalysis().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testIndexingAnalysis().mjava","sourceNew":"  @Test\n  public void testIndexingAnalysis() throws Exception {\n    Analyzer a = schema.getAnalyzer();\n    String text = \"one two three si\\uD834\\uDD1Ex\";\n\n    // field one\n    TokenStream input = a.tokenStream(\"one\", text);\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"one\", \"\\u0001owt\", \"two\", \n          \"\\u0001eerht\", \"three\", \"\\u0001x\\uD834\\uDD1Eis\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 0, 4, 4, 8, 8, 14, 14 },\n        new int[] { 3, 3, 7, 7, 13, 13, 19, 19 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1, 0 }\n    );\n    // field two\n    input = a.tokenStream(\"two\", text);\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"\\u0001owt\", \n          \"\\u0001eerht\", \"\\u0001x\\uD834\\uDD1Eis\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 },\n        new int[] { 1, 1, 1, 1 }\n    );\n    // field three\n    input = a.tokenStream(\"three\", text);\n    assertTokenStreamContents(input,\n        new String[] { \"one\", \"two\", \"three\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 }\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testIndexingAnalysis() throws Exception {\n    Analyzer a = schema.getAnalyzer();\n    String text = \"one two three si\\uD834\\uDD1Ex\";\n\n    // field one\n    TokenStream input = a.tokenStream(\"one\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"one\", \"\\u0001owt\", \"two\", \n          \"\\u0001eerht\", \"three\", \"\\u0001x\\uD834\\uDD1Eis\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 0, 4, 4, 8, 8, 14, 14 },\n        new int[] { 3, 3, 7, 7, 13, 13, 19, 19 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1, 0 }\n    );\n    // field two\n    input = a.tokenStream(\"two\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"\\u0001owt\", \n          \"\\u0001eerht\", \"\\u0001x\\uD834\\uDD1Eis\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 },\n        new int[] { 1, 1, 1, 1 }\n    );\n    // field three\n    input = a.tokenStream(\"three\", new StringReader(text));\n    assertTokenStreamContents(input,\n        new String[] { \"one\", \"two\", \"three\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"123698fbe83b595f9e084f0019cd35ab4a01d7f7","date":1399070065,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testIndexingAnalysis().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testIndexingAnalysis().mjava","sourceNew":"  @Test\n  public void testIndexingAnalysis() throws Exception {\n    Analyzer a = schema.getIndexAnalyzer();\n    String text = \"one two three si\\uD834\\uDD1Ex\";\n\n    // field one\n    TokenStream input = a.tokenStream(\"one\", text);\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"one\", \"\\u0001owt\", \"two\", \n          \"\\u0001eerht\", \"three\", \"\\u0001x\\uD834\\uDD1Eis\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 0, 4, 4, 8, 8, 14, 14 },\n        new int[] { 3, 3, 7, 7, 13, 13, 19, 19 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1, 0 }\n    );\n    // field two\n    input = a.tokenStream(\"two\", text);\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"\\u0001owt\", \n          \"\\u0001eerht\", \"\\u0001x\\uD834\\uDD1Eis\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 },\n        new int[] { 1, 1, 1, 1 }\n    );\n    // field three\n    input = a.tokenStream(\"three\", text);\n    assertTokenStreamContents(input,\n        new String[] { \"one\", \"two\", \"three\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 }\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testIndexingAnalysis() throws Exception {\n    Analyzer a = schema.getAnalyzer();\n    String text = \"one two three si\\uD834\\uDD1Ex\";\n\n    // field one\n    TokenStream input = a.tokenStream(\"one\", text);\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"one\", \"\\u0001owt\", \"two\", \n          \"\\u0001eerht\", \"three\", \"\\u0001x\\uD834\\uDD1Eis\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 0, 4, 4, 8, 8, 14, 14 },\n        new int[] { 3, 3, 7, 7, 13, 13, 19, 19 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1, 0 }\n    );\n    // field two\n    input = a.tokenStream(\"two\", text);\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001eno\", \"\\u0001owt\", \n          \"\\u0001eerht\", \"\\u0001x\\uD834\\uDD1Eis\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 },\n        new int[] { 1, 1, 1, 1 }\n    );\n    // field three\n    input = a.tokenStream(\"three\", text);\n    assertTokenStreamContents(input,\n        new String[] { \"one\", \"two\", \"three\", \"si\\uD834\\uDD1Ex\" },\n        new int[] { 0, 4, 8, 14 },\n        new int[] { 3, 7, 13, 19 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["69e043c521d4e8db770cc140c63f5ef51f03426a","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf7efd82433f3f64684711c16edfd149db6af111":["c26f00b574427b55127e869b935845554afde1fa"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["cf7efd82433f3f64684711c16edfd149db6af111"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cf7efd82433f3f64684711c16edfd149db6af111"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cf7efd82433f3f64684711c16edfd149db6af111":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}