{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestExecutePlanAction#testIntegration().mjava","sourceNew":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","sourceNew":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode();\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode();\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode();\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // this test can fail to elect a leader, seems to be common among sim tests\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode();\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode();\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","bugFix":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"374cde0030d329720d59d1c6336d1089bbcd6fd9","date":1544808129,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","sourceNew":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode();\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // this test can fail to elect a leader, seems to be common among sim tests\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode();\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","sourceNew":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode();\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode();\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1","date":1546971158,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","sourceNew":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode();\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode();\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","sourceNew":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudUtil.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode();\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudUtil.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode();\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","sourceNew":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudUtil.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode();\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudUtil.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudUtil.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode();\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudUtil.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","sourceNew":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudUtil.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode();\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudUtil.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudUtil.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode();\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudUtil.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudUtil.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode();\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudUtil.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1":["89948af0461fead48f44ba8fb7866f107ce83f22"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"374cde0030d329720d59d1c6336d1089bbcd6fd9":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["ce85ed088dcf7aa1742105d4a8caa9aab3b491c1"],"89948af0461fead48f44ba8fb7866f107ce83f22":["374cde0030d329720d59d1c6336d1089bbcd6fd9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["374cde0030d329720d59d1c6336d1089bbcd6fd9"],"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"374cde0030d329720d59d1c6336d1089bbcd6fd9":["89948af0461fead48f44ba8fb7866f107ce83f22"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"89948af0461fead48f44ba8fb7866f107ce83f22":["ce85ed088dcf7aa1742105d4a8caa9aab3b491c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}