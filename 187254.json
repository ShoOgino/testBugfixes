{"path":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testWriteBogusCRC().mjava","commits":[{"id":"83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72","date":1434509375,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testWriteBogusCRC().mjava","pathOld":"/dev/null","sourceNew":"  public void testWriteBogusCRC() throws Exception {\n    RAMFile file = new RAMFile();\n    final IndexOutput output = new RAMOutputStream(file, false);\n    AtomicLong fakeChecksum = new AtomicLong();\n    // wrap the index input where we control the checksum for mocking\n    IndexOutput fakeOutput = new IndexOutput(\"fake\") {\n      @Override\n      public void close() throws IOException {\n        output.close();\n      }\n\n      @Override\n      public long getFilePointer() {\n        return output.getFilePointer();\n      }\n\n      @Override\n      public long getChecksum() throws IOException {\n        return fakeChecksum.get();\n      }\n\n      @Override\n      public void writeByte(byte b) throws IOException {\n        output.writeByte(b);\n      }\n\n      @Override\n      public void writeBytes(byte[] b, int offset, int length) throws IOException {\n        output.writeBytes(b, offset, length);\n      }\n    };\n    \n    fakeChecksum.set(-1L); // bad\n    try {\n      CodecUtil.writeCRC(fakeOutput);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      // expected exception\n    }\n    \n    fakeChecksum.set(1L << 32); // bad\n    try {\n      CodecUtil.writeCRC(fakeOutput);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      // expected exception\n    }\n    \n    fakeChecksum.set(-(1L << 32)); // bad\n    try {\n      CodecUtil.writeCRC(fakeOutput);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      // expected exception\n    }\n    \n    fakeChecksum.set((1L << 32) - 1); // ok\n    CodecUtil.writeCRC(fakeOutput);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testWriteBogusCRC().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testWriteBogusCRC().mjava","sourceNew":"  public void testWriteBogusCRC() throws Exception {\n    RAMFile file = new RAMFile();\n    final IndexOutput output = new RAMOutputStream(file, false);\n    AtomicLong fakeChecksum = new AtomicLong();\n    // wrap the index input where we control the checksum for mocking\n    IndexOutput fakeOutput = new IndexOutput(\"fake\", \"fake\") {\n      @Override\n      public void close() throws IOException {\n        output.close();\n      }\n\n      @Override\n      public long getFilePointer() {\n        return output.getFilePointer();\n      }\n\n      @Override\n      public long getChecksum() throws IOException {\n        return fakeChecksum.get();\n      }\n\n      @Override\n      public void writeByte(byte b) throws IOException {\n        output.writeByte(b);\n      }\n\n      @Override\n      public void writeBytes(byte[] b, int offset, int length) throws IOException {\n        output.writeBytes(b, offset, length);\n      }\n    };\n    \n    fakeChecksum.set(-1L); // bad\n    try {\n      CodecUtil.writeCRC(fakeOutput);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      // expected exception\n    }\n    \n    fakeChecksum.set(1L << 32); // bad\n    try {\n      CodecUtil.writeCRC(fakeOutput);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      // expected exception\n    }\n    \n    fakeChecksum.set(-(1L << 32)); // bad\n    try {\n      CodecUtil.writeCRC(fakeOutput);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      // expected exception\n    }\n    \n    fakeChecksum.set((1L << 32) - 1); // ok\n    CodecUtil.writeCRC(fakeOutput);\n  }\n\n","sourceOld":"  public void testWriteBogusCRC() throws Exception {\n    RAMFile file = new RAMFile();\n    final IndexOutput output = new RAMOutputStream(file, false);\n    AtomicLong fakeChecksum = new AtomicLong();\n    // wrap the index input where we control the checksum for mocking\n    IndexOutput fakeOutput = new IndexOutput(\"fake\") {\n      @Override\n      public void close() throws IOException {\n        output.close();\n      }\n\n      @Override\n      public long getFilePointer() {\n        return output.getFilePointer();\n      }\n\n      @Override\n      public long getChecksum() throws IOException {\n        return fakeChecksum.get();\n      }\n\n      @Override\n      public void writeByte(byte b) throws IOException {\n        output.writeByte(b);\n      }\n\n      @Override\n      public void writeBytes(byte[] b, int offset, int length) throws IOException {\n        output.writeBytes(b, offset, length);\n      }\n    };\n    \n    fakeChecksum.set(-1L); // bad\n    try {\n      CodecUtil.writeCRC(fakeOutput);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      // expected exception\n    }\n    \n    fakeChecksum.set(1L << 32); // bad\n    try {\n      CodecUtil.writeCRC(fakeOutput);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      // expected exception\n    }\n    \n    fakeChecksum.set(-(1L << 32)); // bad\n    try {\n      CodecUtil.writeCRC(fakeOutput);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      // expected exception\n    }\n    \n    fakeChecksum.set((1L << 32) - 1); // ok\n    CodecUtil.writeCRC(fakeOutput);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testWriteBogusCRC().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testWriteBogusCRC().mjava","sourceNew":"  public void testWriteBogusCRC() throws Exception {\n    RAMFile file = new RAMFile();\n    final IndexOutput output = new RAMOutputStream(file, false);\n    AtomicLong fakeChecksum = new AtomicLong();\n    // wrap the index input where we control the checksum for mocking\n    IndexOutput fakeOutput = new IndexOutput(\"fake\", \"fake\") {\n      @Override\n      public void close() throws IOException {\n        output.close();\n      }\n\n      @Override\n      public long getFilePointer() {\n        return output.getFilePointer();\n      }\n\n      @Override\n      public long getChecksum() throws IOException {\n        return fakeChecksum.get();\n      }\n\n      @Override\n      public void writeByte(byte b) throws IOException {\n        output.writeByte(b);\n      }\n\n      @Override\n      public void writeBytes(byte[] b, int offset, int length) throws IOException {\n        output.writeBytes(b, offset, length);\n      }\n    };\n    \n    fakeChecksum.set(-1L); // bad\n    expectThrows(IllegalStateException.class, () -> {\n      CodecUtil.writeCRC(fakeOutput);\n    });\n    \n    fakeChecksum.set(1L << 32); // bad\n    expectThrows(IllegalStateException.class, () -> {\n      CodecUtil.writeCRC(fakeOutput);\n    });\n    \n    fakeChecksum.set(-(1L << 32)); // bad\n    expectThrows(IllegalStateException.class, () -> {\n      CodecUtil.writeCRC(fakeOutput);\n    });\n    \n    fakeChecksum.set((1L << 32) - 1); // ok\n    CodecUtil.writeCRC(fakeOutput);\n  }\n\n","sourceOld":"  public void testWriteBogusCRC() throws Exception {\n    RAMFile file = new RAMFile();\n    final IndexOutput output = new RAMOutputStream(file, false);\n    AtomicLong fakeChecksum = new AtomicLong();\n    // wrap the index input where we control the checksum for mocking\n    IndexOutput fakeOutput = new IndexOutput(\"fake\", \"fake\") {\n      @Override\n      public void close() throws IOException {\n        output.close();\n      }\n\n      @Override\n      public long getFilePointer() {\n        return output.getFilePointer();\n      }\n\n      @Override\n      public long getChecksum() throws IOException {\n        return fakeChecksum.get();\n      }\n\n      @Override\n      public void writeByte(byte b) throws IOException {\n        output.writeByte(b);\n      }\n\n      @Override\n      public void writeBytes(byte[] b, int offset, int length) throws IOException {\n        output.writeBytes(b, offset, length);\n      }\n    };\n    \n    fakeChecksum.set(-1L); // bad\n    try {\n      CodecUtil.writeCRC(fakeOutput);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      // expected exception\n    }\n    \n    fakeChecksum.set(1L << 32); // bad\n    try {\n      CodecUtil.writeCRC(fakeOutput);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      // expected exception\n    }\n    \n    fakeChecksum.set(-(1L << 32)); // bad\n    try {\n      CodecUtil.writeCRC(fakeOutput);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      // expected exception\n    }\n    \n    fakeChecksum.set((1L << 32) - 1); // ok\n    CodecUtil.writeCRC(fakeOutput);\n  }\n\n","bugFix":["83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71488d7f5786ae87541276121ecb69705a11a295","date":1465498138,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testWriteBogusCRC().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testWriteBogusCRC().mjava","sourceNew":"  public void testWriteBogusCRC() throws Exception {\n    RAMFile file = new RAMFile();\n    final IndexOutput output = new RAMOutputStream(file, false);\n    AtomicLong fakeChecksum = new AtomicLong();\n    // wrap the index input where we control the checksum for mocking\n    IndexOutput fakeOutput = new IndexOutput(\"fake\", \"fake\") {\n      @Override\n      public void close() throws IOException {\n        output.close();\n      }\n\n      @Override\n      public long getFilePointer() {\n        return output.getFilePointer();\n      }\n\n      @Override\n      public long getChecksum() throws IOException {\n        return fakeChecksum.get();\n      }\n\n      @Override\n      public void writeByte(byte b) throws IOException {\n        output.writeByte(b);\n      }\n\n      @Override\n      public void writeBytes(byte[] b, int offset, int length) throws IOException {\n        output.writeBytes(b, offset, length);\n      }\n    };\n    \n    fakeChecksum.set(-1L); // bad\n    expectThrows(IllegalStateException.class, () -> {\n      CodecUtil.writeCRC(fakeOutput);\n    });\n    \n    fakeChecksum.set(1L << 32); // bad\n    expectThrows(IllegalStateException.class, () -> {\n      CodecUtil.writeCRC(fakeOutput);\n    });\n    \n    fakeChecksum.set(-(1L << 32)); // bad\n    expectThrows(IllegalStateException.class, () -> {\n      CodecUtil.writeCRC(fakeOutput);\n    });\n    \n    fakeChecksum.set((1L << 32) - 1); // ok\n    CodecUtil.writeCRC(fakeOutput);\n  }\n\n","sourceOld":"  public void testWriteBogusCRC() throws Exception {\n    RAMFile file = new RAMFile();\n    final IndexOutput output = new RAMOutputStream(file, false);\n    AtomicLong fakeChecksum = new AtomicLong();\n    // wrap the index input where we control the checksum for mocking\n    IndexOutput fakeOutput = new IndexOutput(\"fake\", \"fake\") {\n      @Override\n      public void close() throws IOException {\n        output.close();\n      }\n\n      @Override\n      public long getFilePointer() {\n        return output.getFilePointer();\n      }\n\n      @Override\n      public long getChecksum() throws IOException {\n        return fakeChecksum.get();\n      }\n\n      @Override\n      public void writeByte(byte b) throws IOException {\n        output.writeByte(b);\n      }\n\n      @Override\n      public void writeBytes(byte[] b, int offset, int length) throws IOException {\n        output.writeBytes(b, offset, length);\n      }\n    };\n    \n    fakeChecksum.set(-1L); // bad\n    expectThrows(IllegalStateException.class, () -> {\n      CodecUtil.writeCRC(fakeOutput);\n    });\n    \n    fakeChecksum.set(1L << 32); // bad\n    expectThrows(IllegalStateException.class, () -> {\n      CodecUtil.writeCRC(fakeOutput);\n    });\n    \n    fakeChecksum.set(-(1L << 32)); // bad\n    expectThrows(IllegalStateException.class, () -> {\n      CodecUtil.writeCRC(fakeOutput);\n    });\n    \n    fakeChecksum.set((1L << 32) - 1); // ok\n    CodecUtil.writeCRC(fakeOutput);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testWriteBogusCRC().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testWriteBogusCRC().mjava","sourceNew":"  public void testWriteBogusCRC() throws Exception {\n    RAMFile file = new RAMFile();\n    final IndexOutput output = new RAMOutputStream(file, false);\n    AtomicLong fakeChecksum = new AtomicLong();\n    // wrap the index input where we control the checksum for mocking\n    IndexOutput fakeOutput = new IndexOutput(\"fake\", \"fake\") {\n      @Override\n      public void close() throws IOException {\n        output.close();\n      }\n\n      @Override\n      public long getFilePointer() {\n        return output.getFilePointer();\n      }\n\n      @Override\n      public long getChecksum() throws IOException {\n        return fakeChecksum.get();\n      }\n\n      @Override\n      public void writeByte(byte b) throws IOException {\n        output.writeByte(b);\n      }\n\n      @Override\n      public void writeBytes(byte[] b, int offset, int length) throws IOException {\n        output.writeBytes(b, offset, length);\n      }\n    };\n    \n    fakeChecksum.set(-1L); // bad\n    expectThrows(IllegalStateException.class, () -> {\n      CodecUtil.writeCRC(fakeOutput);\n    });\n    \n    fakeChecksum.set(1L << 32); // bad\n    expectThrows(IllegalStateException.class, () -> {\n      CodecUtil.writeCRC(fakeOutput);\n    });\n    \n    fakeChecksum.set(-(1L << 32)); // bad\n    expectThrows(IllegalStateException.class, () -> {\n      CodecUtil.writeCRC(fakeOutput);\n    });\n    \n    fakeChecksum.set((1L << 32) - 1); // ok\n    CodecUtil.writeCRC(fakeOutput);\n  }\n\n","sourceOld":"  public void testWriteBogusCRC() throws Exception {\n    RAMFile file = new RAMFile();\n    final IndexOutput output = new RAMOutputStream(file, false);\n    AtomicLong fakeChecksum = new AtomicLong();\n    // wrap the index input where we control the checksum for mocking\n    IndexOutput fakeOutput = new IndexOutput(\"fake\", \"fake\") {\n      @Override\n      public void close() throws IOException {\n        output.close();\n      }\n\n      @Override\n      public long getFilePointer() {\n        return output.getFilePointer();\n      }\n\n      @Override\n      public long getChecksum() throws IOException {\n        return fakeChecksum.get();\n      }\n\n      @Override\n      public void writeByte(byte b) throws IOException {\n        output.writeByte(b);\n      }\n\n      @Override\n      public void writeBytes(byte[] b, int offset, int length) throws IOException {\n        output.writeBytes(b, offset, length);\n      }\n    };\n    \n    fakeChecksum.set(-1L); // bad\n    expectThrows(IllegalStateException.class, () -> {\n      CodecUtil.writeCRC(fakeOutput);\n    });\n    \n    fakeChecksum.set(1L << 32); // bad\n    expectThrows(IllegalStateException.class, () -> {\n      CodecUtil.writeCRC(fakeOutput);\n    });\n    \n    fakeChecksum.set(-(1L << 32)); // bad\n    expectThrows(IllegalStateException.class, () -> {\n      CodecUtil.writeCRC(fakeOutput);\n    });\n    \n    fakeChecksum.set((1L << 32) - 1); // ok\n    CodecUtil.writeCRC(fakeOutput);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"71488d7f5786ae87541276121ecb69705a11a295":["05fe562aa248790944d43cdd478f512572835ba0"],"83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["05fe562aa248790944d43cdd478f512572835ba0","71488d7f5786ae87541276121ecb69705a11a295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71488d7f5786ae87541276121ecb69705a11a295"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72"],"05fe562aa248790944d43cdd478f512572835ba0":["71488d7f5786ae87541276121ecb69705a11a295","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"71488d7f5786ae87541276121ecb69705a11a295":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["05fe562aa248790944d43cdd478f512572835ba0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}