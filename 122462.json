{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetContext fcontext = new FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetContext.IS_SHARD;\n    }\n\n    FacetProcessor fproc = facetState.facetRequest.createFacetProcessor(fcontext);\n    fproc.process();\n    rb.rsp.add(\"facets\", fproc.getResponse());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetContext fcontext = new FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetContext.IS_SHARD;\n    }\n\n    FacetProcessor fproc = facetState.facetRequest.createFacetProcessor(fcontext);\n    fproc.process();\n    rb.rsp.add(\"facets\", fproc.getResponse());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c2faf42ce045d4bd93fa175ef185dc88f4f3bcf","date":1450457061,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetContext fcontext = new FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetContext.IS_SHARD;\n    }\n\n    FacetProcessor fproc = facetState.facetRequest.createFacetProcessor(fcontext);\n    if (rb.isDebug()) {\n      FacetDebugInfo fdebug = new FacetDebugInfo();\n      fcontext.setDebugInfo(fdebug);\n      fdebug.setReqDescription(facetState.facetRequest.getFacetDescription());\n      fdebug.setProcessor(fproc.getClass().getSimpleName());\n     \n      final RTimer timer = new RTimer();\n      fproc.process();\n      long timeElapsed = (long) timer.getTime();\n      fdebug.setElapse(timeElapsed);\n      rb.req.getContext().put(\"FacetDebugInfo\", fdebug);\n    } else {\n      fproc.process();\n    }\n    \n    rb.rsp.add(\"facets\", fproc.getResponse());\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetContext fcontext = new FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetContext.IS_SHARD;\n    }\n\n    FacetProcessor fproc = facetState.facetRequest.createFacetProcessor(fcontext);\n    fproc.process();\n    rb.rsp.add(\"facets\", fproc.getResponse());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1480a9d175b147e15628e77342c4175ad3fc4611","date":1452646257,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetContext fcontext = new FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetContext.IS_SHARD;\n    }\n\n    FacetProcessor fproc = facetState.facetRequest.createFacetProcessor(fcontext);\n    if (rb.isDebug()) {\n      FacetDebugInfo fdebug = new FacetDebugInfo();\n      fcontext.setDebugInfo(fdebug);\n      fdebug.setReqDescription(facetState.facetRequest.getFacetDescription());\n      fdebug.setProcessor(fproc.getClass().getSimpleName());\n     \n      final RTimer timer = new RTimer();\n      fproc.process();\n      long timeElapsed = (long) timer.getTime();\n      fdebug.setElapse(timeElapsed);\n      fdebug.putInfoItem(\"domainSize\", (long)fcontext.base.size());\n      rb.req.getContext().put(\"FacetDebugInfo\", fdebug);\n    } else {\n      fproc.process();\n    }\n    \n    rb.rsp.add(\"facets\", fproc.getResponse());\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetContext fcontext = new FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetContext.IS_SHARD;\n    }\n\n    FacetProcessor fproc = facetState.facetRequest.createFacetProcessor(fcontext);\n    if (rb.isDebug()) {\n      FacetDebugInfo fdebug = new FacetDebugInfo();\n      fcontext.setDebugInfo(fdebug);\n      fdebug.setReqDescription(facetState.facetRequest.getFacetDescription());\n      fdebug.setProcessor(fproc.getClass().getSimpleName());\n     \n      final RTimer timer = new RTimer();\n      fproc.process();\n      long timeElapsed = (long) timer.getTime();\n      fdebug.setElapse(timeElapsed);\n      rb.req.getContext().put(\"FacetDebugInfo\", fdebug);\n    } else {\n      fproc.process();\n    }\n    \n    rb.rsp.add(\"facets\", fproc.getResponse());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8ec805ca8fedc0166461148c7182f1bcbbd18ee1","date":1489767223,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetContext fcontext = new FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetContext.IS_SHARD;\n      fcontext.facetInfo = facetState.facetInfo.isEmpty() ? null : (Map<String,Object>)facetState.facetInfo.get(FACET_REFINE);\n      if (fcontext.facetInfo != null) {\n        fcontext.flags |= FacetContext.IS_REFINEMENT;\n        fcontext.flags |= FacetContext.SKIP_FACET; // the root bucket should have been received from all shards previously\n      }\n    }\n\n    FacetProcessor fproc = facetState.facetRequest.createFacetProcessor(fcontext);\n    if (rb.isDebug()) {\n      FacetDebugInfo fdebug = new FacetDebugInfo();\n      fcontext.setDebugInfo(fdebug);\n      fdebug.setReqDescription(facetState.facetRequest.getFacetDescription());\n      fdebug.setProcessor(fproc.getClass().getSimpleName());\n     \n      final RTimer timer = new RTimer();\n      fproc.process();\n      long timeElapsed = (long) timer.getTime();\n      fdebug.setElapse(timeElapsed);\n      fdebug.putInfoItem(\"domainSize\", (long)fcontext.base.size());\n      rb.req.getContext().put(\"FacetDebugInfo\", fdebug);\n    } else {\n      fproc.process();\n    }\n    \n    rb.rsp.add(\"facets\", fproc.getResponse());\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetContext fcontext = new FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetContext.IS_SHARD;\n    }\n\n    FacetProcessor fproc = facetState.facetRequest.createFacetProcessor(fcontext);\n    if (rb.isDebug()) {\n      FacetDebugInfo fdebug = new FacetDebugInfo();\n      fcontext.setDebugInfo(fdebug);\n      fdebug.setReqDescription(facetState.facetRequest.getFacetDescription());\n      fdebug.setProcessor(fproc.getClass().getSimpleName());\n     \n      final RTimer timer = new RTimer();\n      fproc.process();\n      long timeElapsed = (long) timer.getTime();\n      fdebug.setElapse(timeElapsed);\n      fdebug.putInfoItem(\"domainSize\", (long)fcontext.base.size());\n      rb.req.getContext().put(\"FacetDebugInfo\", fdebug);\n    } else {\n      fproc.process();\n    }\n    \n    rb.rsp.add(\"facets\", fproc.getResponse());\n  }\n\n","bugFix":null,"bugIntro":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11ab475c994c79138885cc8a30b2641d929cdc43","date":1490280010,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetContext fcontext = new FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetContext.IS_SHARD;\n      fcontext.facetInfo = facetState.facetInfo.isEmpty() ? null : (Map<String,Object>)facetState.facetInfo.get(FACET_REFINE);\n      if (fcontext.facetInfo != null) {\n        fcontext.flags |= FacetContext.IS_REFINEMENT;\n        fcontext.flags |= FacetContext.SKIP_FACET; // the root bucket should have been received from all shards previously\n      }\n    }\n\n    FacetProcessor fproc = facetState.facetRequest.createFacetProcessor(fcontext);\n    if (rb.isDebug()) {\n      FacetDebugInfo fdebug = new FacetDebugInfo();\n      fcontext.setDebugInfo(fdebug);\n      fdebug.setReqDescription(facetState.facetRequest.getFacetDescription());\n      fdebug.setProcessor(fproc.getClass().getSimpleName());\n     \n      final RTimer timer = new RTimer();\n      fproc.process();\n      long timeElapsed = (long) timer.getTime();\n      fdebug.setElapse(timeElapsed);\n      fdebug.putInfoItem(\"domainSize\", (long)fcontext.base.size());\n      rb.req.getContext().put(\"FacetDebugInfo\", fdebug);\n    } else {\n      fproc.process();\n    }\n    \n    rb.rsp.add(\"facets\", fproc.getResponse());\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetContext fcontext = new FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetContext.IS_SHARD;\n    }\n\n    FacetProcessor fproc = facetState.facetRequest.createFacetProcessor(fcontext);\n    if (rb.isDebug()) {\n      FacetDebugInfo fdebug = new FacetDebugInfo();\n      fcontext.setDebugInfo(fdebug);\n      fdebug.setReqDescription(facetState.facetRequest.getFacetDescription());\n      fdebug.setProcessor(fproc.getClass().getSimpleName());\n     \n      final RTimer timer = new RTimer();\n      fproc.process();\n      long timeElapsed = (long) timer.getTime();\n      fdebug.setElapse(timeElapsed);\n      fdebug.putInfoItem(\"domainSize\", (long)fcontext.base.size());\n      rb.req.getContext().put(\"FacetDebugInfo\", fdebug);\n    } else {\n      fproc.process();\n    }\n    \n    rb.rsp.add(\"facets\", fproc.getResponse());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ab027bdfe663227636ccbeda13ae82add302939","date":1529980633,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetContext fcontext = new FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetContext.IS_SHARD;\n      fcontext.facetInfo = facetState.facetInfo.isEmpty() ? null : (Map<String,Object>)facetState.facetInfo.get(FACET_REFINE);\n      if (fcontext.facetInfo != null) {\n        fcontext.flags |= FacetContext.IS_REFINEMENT;\n        fcontext.flags |= FacetContext.SKIP_FACET; // the root bucket should have been received from all shards previously\n      }\n    }\n    if (rb.isDebug()) {\n      FacetDebugInfo fdebug = new FacetDebugInfo();\n      fcontext.setDebugInfo(fdebug);\n      rb.req.getContext().put(\"FacetDebugInfo\", fdebug);\n    }\n\n    final Object results = facetState.facetRequest.process(fcontext);\n    rb.rsp.add(\"facets\", results);\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetContext fcontext = new FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetContext.IS_SHARD;\n      fcontext.facetInfo = facetState.facetInfo.isEmpty() ? null : (Map<String,Object>)facetState.facetInfo.get(FACET_REFINE);\n      if (fcontext.facetInfo != null) {\n        fcontext.flags |= FacetContext.IS_REFINEMENT;\n        fcontext.flags |= FacetContext.SKIP_FACET; // the root bucket should have been received from all shards previously\n      }\n    }\n\n    FacetProcessor fproc = facetState.facetRequest.createFacetProcessor(fcontext);\n    if (rb.isDebug()) {\n      FacetDebugInfo fdebug = new FacetDebugInfo();\n      fcontext.setDebugInfo(fdebug);\n      fdebug.setReqDescription(facetState.facetRequest.getFacetDescription());\n      fdebug.setProcessor(fproc.getClass().getSimpleName());\n     \n      final RTimer timer = new RTimer();\n      fproc.process();\n      long timeElapsed = (long) timer.getTime();\n      fdebug.setElapse(timeElapsed);\n      fdebug.putInfoItem(\"domainSize\", (long)fcontext.base.size());\n      rb.req.getContext().put(\"FacetDebugInfo\", fdebug);\n    } else {\n      fproc.process();\n    }\n    \n    rb.rsp.add(\"facets\", fproc.getResponse());\n  }\n\n","bugFix":null,"bugIntro":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetContext fcontext = new FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetContext.IS_SHARD;\n      fcontext.facetInfo = facetState.facetInfo.isEmpty() ? null : (Map<String,Object>)facetState.facetInfo.get(FACET_REFINE);\n      if (fcontext.facetInfo != null) {\n        fcontext.flags |= FacetContext.IS_REFINEMENT;\n        fcontext.flags |= FacetContext.SKIP_FACET; // the root bucket should have been received from all shards previously\n      }\n    }\n    if (rb.isDebug()) {\n      FacetDebugInfo fdebug = new FacetDebugInfo();\n      fcontext.setDebugInfo(fdebug);\n      rb.req.getContext().put(\"FacetDebugInfo\", fdebug);\n    }\n\n    final Object results = facetState.facetRequest.process(fcontext);\n    rb.rsp.add(\"facets\", results);\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetContext fcontext = new FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetContext.IS_SHARD;\n      fcontext.facetInfo = facetState.facetInfo.isEmpty() ? null : (Map<String,Object>)facetState.facetInfo.get(FACET_REFINE);\n      if (fcontext.facetInfo != null) {\n        fcontext.flags |= FacetContext.IS_REFINEMENT;\n        fcontext.flags |= FacetContext.SKIP_FACET; // the root bucket should have been received from all shards previously\n      }\n    }\n\n    FacetProcessor fproc = facetState.facetRequest.createFacetProcessor(fcontext);\n    if (rb.isDebug()) {\n      FacetDebugInfo fdebug = new FacetDebugInfo();\n      fcontext.setDebugInfo(fdebug);\n      fdebug.setReqDescription(facetState.facetRequest.getFacetDescription());\n      fdebug.setProcessor(fproc.getClass().getSimpleName());\n     \n      final RTimer timer = new RTimer();\n      fproc.process();\n      long timeElapsed = (long) timer.getTime();\n      fdebug.setElapse(timeElapsed);\n      fdebug.putInfoItem(\"domainSize\", (long)fcontext.base.size());\n      rb.req.getContext().put(\"FacetDebugInfo\", fdebug);\n    } else {\n      fproc.process();\n    }\n    \n    rb.rsp.add(\"facets\", fproc.getResponse());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetContext fcontext = new FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetContext.IS_SHARD;\n      fcontext.facetInfo = facetState.facetInfo.isEmpty() ? null : (Map<String,Object>)facetState.facetInfo.get(FACET_REFINE);\n      if (fcontext.facetInfo != null) {\n        fcontext.flags |= FacetContext.IS_REFINEMENT;\n        fcontext.flags |= FacetContext.SKIP_FACET; // the root bucket should have been received from all shards previously\n      }\n    }\n    if (rb.isDebug()) {\n      FacetDebugInfo fdebug = new FacetDebugInfo();\n      fcontext.setDebugInfo(fdebug);\n      rb.req.getContext().put(\"FacetDebugInfo\", fdebug);\n    }\n\n    final Object results = facetState.facetRequest.process(fcontext);\n    rb.rsp.add(\"facets\", results);\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetContext fcontext = new FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetContext.IS_SHARD;\n      fcontext.facetInfo = facetState.facetInfo.isEmpty() ? null : (Map<String,Object>)facetState.facetInfo.get(FACET_REFINE);\n      if (fcontext.facetInfo != null) {\n        fcontext.flags |= FacetContext.IS_REFINEMENT;\n        fcontext.flags |= FacetContext.SKIP_FACET; // the root bucket should have been received from all shards previously\n      }\n    }\n\n    FacetProcessor fproc = facetState.facetRequest.createFacetProcessor(fcontext);\n    if (rb.isDebug()) {\n      FacetDebugInfo fdebug = new FacetDebugInfo();\n      fcontext.setDebugInfo(fdebug);\n      fdebug.setReqDescription(facetState.facetRequest.getFacetDescription());\n      fdebug.setProcessor(fproc.getClass().getSimpleName());\n     \n      final RTimer timer = new RTimer();\n      fproc.process();\n      long timeElapsed = (long) timer.getTime();\n      fdebug.setElapse(timeElapsed);\n      fdebug.putInfoItem(\"domainSize\", (long)fcontext.base.size());\n      rb.req.getContext().put(\"FacetDebugInfo\", fdebug);\n    } else {\n      fproc.process();\n    }\n    \n    rb.rsp.add(\"facets\", fproc.getResponse());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3584d3db8b472772e3329d9d95d584b68ae997e","date":1551710517,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetContext fcontext = new FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetContext.IS_SHARD;\n      fcontext.facetInfo = facetState.facetInfo.isEmpty() ? null : (Map<String,Object>)facetState.facetInfo.get(FACET_REFINE);\n      if (fcontext.facetInfo != null) {\n        fcontext.flags |= FacetContext.IS_REFINEMENT;\n        fcontext.flags |= FacetContext.SKIP_FACET; // the root bucket should have been received from all shards previously\n      }\n    }\n    if (rb.isDebug()) {\n      FacetDebugInfo fdebug = new FacetDebugInfo();\n      fcontext.setDebugInfo(fdebug);\n      rb.req.getContext().put(\"FacetDebugInfo\", fdebug);\n    }\n\n    Object results = facetState.facetRequest.process(fcontext);\n    // ExitableDirectory timeout causes absent \"facets\"\n    rb.rsp.add(\"facets\", results);\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetContext fcontext = new FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetContext.IS_SHARD;\n      fcontext.facetInfo = facetState.facetInfo.isEmpty() ? null : (Map<String,Object>)facetState.facetInfo.get(FACET_REFINE);\n      if (fcontext.facetInfo != null) {\n        fcontext.flags |= FacetContext.IS_REFINEMENT;\n        fcontext.flags |= FacetContext.SKIP_FACET; // the root bucket should have been received from all shards previously\n      }\n    }\n    if (rb.isDebug()) {\n      FacetDebugInfo fdebug = new FacetDebugInfo();\n      fcontext.setDebugInfo(fdebug);\n      rb.req.getContext().put(\"FacetDebugInfo\", fdebug);\n    }\n\n    final Object results = facetState.facetRequest.process(fcontext);\n    rb.rsp.add(\"facets\", results);\n  }\n\n","bugFix":["2ab027bdfe663227636ccbeda13ae82add302939"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetRequest.FacetContext fcontext = new FacetRequest.FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetRequest.FacetContext.IS_SHARD;\n      fcontext.facetInfo = facetState.facetInfo.isEmpty() ? null : (Map<String,Object>)facetState.facetInfo.get(FACET_REFINE);\n      if (fcontext.facetInfo != null) {\n        fcontext.flags |= FacetRequest.FacetContext.IS_REFINEMENT;\n        fcontext.flags |= FacetRequest.FacetContext.SKIP_FACET; // the root bucket should have been received from all shards previously\n      }\n    }\n    if (rb.isDebug()) {\n      FacetDebugInfo fdebug = new FacetDebugInfo();\n      fcontext.setDebugInfo(fdebug);\n      rb.req.getContext().put(\"FacetDebugInfo\", fdebug);\n    }\n\n    Object results = facetState.facetRequest.process(fcontext);\n    // ExitableDirectory timeout causes absent \"facets\"\n    rb.rsp.add(\"facets\", results);\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetContext fcontext = new FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetContext.IS_SHARD;\n      fcontext.facetInfo = facetState.facetInfo.isEmpty() ? null : (Map<String,Object>)facetState.facetInfo.get(FACET_REFINE);\n      if (fcontext.facetInfo != null) {\n        fcontext.flags |= FacetContext.IS_REFINEMENT;\n        fcontext.flags |= FacetContext.SKIP_FACET; // the root bucket should have been received from all shards previously\n      }\n    }\n    if (rb.isDebug()) {\n      FacetDebugInfo fdebug = new FacetDebugInfo();\n      fcontext.setDebugInfo(fdebug);\n      rb.req.getContext().put(\"FacetDebugInfo\", fdebug);\n    }\n\n    Object results = facetState.facetRequest.process(fcontext);\n    // ExitableDirectory timeout causes absent \"facets\"\n    rb.rsp.add(\"facets\", results);\n  }\n\n","bugFix":["8ec805ca8fedc0166461148c7182f1bcbbd18ee1","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetModule#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetContext fcontext = new FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetContext.IS_SHARD;\n      fcontext.facetInfo = facetState.facetInfo.isEmpty() ? null : (Map<String, Object>) facetState.facetInfo.get(FACET_REFINE);\n      if (fcontext.facetInfo != null) {\n        fcontext.flags |= FacetContext.IS_REFINEMENT;\n        fcontext.flags |= FacetContext.SKIP_FACET; // the root bucket should have been received from all shards previously\n      }\n    }\n    if (rb.isDebug()) {\n      FacetDebugInfo fdebug = new FacetDebugInfo();\n      fcontext.setDebugInfo(fdebug);\n      rb.req.getContext().put(\"FacetDebugInfo\", fdebug);\n    }\n\n    Object results = facetState.facetRequest.process(fcontext);\n    // ExitableDirectory timeout causes absent \"facets\"\n    rb.rsp.add(\"facets\", results);\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    // if this is null, faceting is not enabled\n    FacetComponentState facetState = getFacetComponentState(rb);\n    if (facetState == null) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n\n    FacetRequest.FacetContext fcontext = new FacetRequest.FacetContext();\n    fcontext.base = rb.getResults().docSet;\n    fcontext.req = rb.req;\n    fcontext.searcher = rb.req.getSearcher();\n    fcontext.qcontext = QueryContext.newContext(fcontext.searcher);\n    if (isShard) {\n      fcontext.flags |= FacetRequest.FacetContext.IS_SHARD;\n      fcontext.facetInfo = facetState.facetInfo.isEmpty() ? null : (Map<String,Object>)facetState.facetInfo.get(FACET_REFINE);\n      if (fcontext.facetInfo != null) {\n        fcontext.flags |= FacetRequest.FacetContext.IS_REFINEMENT;\n        fcontext.flags |= FacetRequest.FacetContext.SKIP_FACET; // the root bucket should have been received from all shards previously\n      }\n    }\n    if (rb.isDebug()) {\n      FacetDebugInfo fdebug = new FacetDebugInfo();\n      fcontext.setDebugInfo(fdebug);\n      rb.req.getContext().put(\"FacetDebugInfo\", fdebug);\n    }\n\n    Object results = facetState.facetRequest.process(fcontext);\n    // ExitableDirectory timeout causes absent \"facets\"\n    rb.rsp.add(\"facets\", results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ab027bdfe663227636ccbeda13ae82add302939":["8ec805ca8fedc0166461148c7182f1bcbbd18ee1"],"1480a9d175b147e15628e77342c4175ad3fc4611":["7c2faf42ce045d4bd93fa175ef185dc88f4f3bcf"],"a3584d3db8b472772e3329d9d95d584b68ae997e":["2ab027bdfe663227636ccbeda13ae82add302939"],"8ec805ca8fedc0166461148c7182f1bcbbd18ee1":["1480a9d175b147e15628e77342c4175ad3fc4611"],"7c2faf42ce045d4bd93fa175ef185dc88f4f3bcf":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["8ec805ca8fedc0166461148c7182f1bcbbd18ee1","2ab027bdfe663227636ccbeda13ae82add302939"],"11ab475c994c79138885cc8a30b2641d929cdc43":["1480a9d175b147e15628e77342c4175ad3fc4611"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["8ec805ca8fedc0166461148c7182f1bcbbd18ee1","2ab027bdfe663227636ccbeda13ae82add302939"]},"commit2Childs":{"2ab027bdfe663227636ccbeda13ae82add302939":["a3584d3db8b472772e3329d9d95d584b68ae997e","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1480a9d175b147e15628e77342c4175ad3fc4611":["8ec805ca8fedc0166461148c7182f1bcbbd18ee1","11ab475c994c79138885cc8a30b2641d929cdc43"],"a3584d3db8b472772e3329d9d95d584b68ae997e":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"8ec805ca8fedc0166461148c7182f1bcbbd18ee1":["2ab027bdfe663227636ccbeda13ae82add302939","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"7c2faf42ce045d4bd93fa175ef185dc88f4f3bcf":["1480a9d175b147e15628e77342c4175ad3fc4611"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"11ab475c994c79138885cc8a30b2641d929cdc43":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["7c2faf42ce045d4bd93fa175ef185dc88f4f3bcf","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","11ab475c994c79138885cc8a30b2641d929cdc43","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}