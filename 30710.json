{"path":"src/java/org/apache/lucene/util/AttributeSource#restoreState(AttributeSource).mjava","commits":[{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/AttributeSource#restoreState(AttributeSource).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Restores this state by copying the values of all attributes \n   * that this state contains into the attributes of the targetStream.\n   * The targetStream must contain a corresponding instance for each argument\n   * contained in this state.\n   * <p>\n   * Note that this method does not affect attributes of the targetStream\n   * that are not contained in this state. In other words, if for example\n   * the targetStream contains an OffsetAttribute, but this state doesn't, then\n   * the value of the OffsetAttribute remains unchanged. It might be desirable to\n   * reset its value to the default, in which case the caller should first\n   * call {@link TokenStream#clearAttributes()} on the targetStream.   \n   */\n  public void restoreState(AttributeSource target) {\n    Iterator it = getAttributesIterator();\n    while (it.hasNext()) {\n      Attribute att = (Attribute) it.next();\n      Attribute targetAtt = target.getAttribute(att.getClass());\n      att.copyTo(targetAtt);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/AttributeSource#restoreState(State).mjava","pathOld":"src/java/org/apache/lucene/util/AttributeSource#restoreState(AttributeSource).mjava","sourceNew":"  /**\n   * Restores this state by copying the values of all attribute implementations\n   * that this state contains into the attributes implementations of the targetStream.\n   * The targetStream must contain a corresponding instance for each argument\n   * contained in this state (e.g. it is not possible to restore the state of\n   * an AttributeSource containing a TermAttribute into a AttributeSource using\n   * a Token instance as implementation).\n   * <p>\n   * Note that this method does not affect attributes of the targetStream\n   * that are not contained in this state. In other words, if for example\n   * the targetStream contains an OffsetAttribute, but this state doesn't, then\n   * the value of the OffsetAttribute remains unchanged. It might be desirable to\n   * reset its value to the default, in which case the caller should first\n   * call {@link TokenStream#clearAttributes()} on the targetStream.   \n   */\n  public void restoreState(State state) {\n    if (state == null)  return;\n    \n    do {\n      AttributeImpl targetImpl = (AttributeImpl) attributeImpls.get(state.attribute.getClass());\n      if (targetImpl == null)\n        throw new IllegalArgumentException(\"State contains an AttributeImpl that is not in this AttributeSource\");\n      state.attribute.copyTo(targetImpl);\n      state = state.next;\n    } while (state != null);\n  }\n\n","sourceOld":"  /**\n   * Restores this state by copying the values of all attributes \n   * that this state contains into the attributes of the targetStream.\n   * The targetStream must contain a corresponding instance for each argument\n   * contained in this state.\n   * <p>\n   * Note that this method does not affect attributes of the targetStream\n   * that are not contained in this state. In other words, if for example\n   * the targetStream contains an OffsetAttribute, but this state doesn't, then\n   * the value of the OffsetAttribute remains unchanged. It might be desirable to\n   * reset its value to the default, in which case the caller should first\n   * call {@link TokenStream#clearAttributes()} on the targetStream.   \n   */\n  public void restoreState(AttributeSource target) {\n    Iterator it = getAttributesIterator();\n    while (it.hasNext()) {\n      Attribute att = (Attribute) it.next();\n      Attribute targetAtt = target.getAttribute(att.getClass());\n      att.copyTo(targetAtt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"]},"commit2Childs":{"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}