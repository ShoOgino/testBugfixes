{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestSparseDISI#doTestRandom(Directory).mjava","commits":[{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestSparseDISI#doTestRandom(Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestRandom(Directory dir) throws IOException {\n    List<Integer> docs = new ArrayList<>();\n    final int maxStep = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 2, 10));\n    final int numDocs = TestUtil.nextInt(random(), 1, 1000);\n    for (int doc = -1, i = 0; i < numDocs; ++i) {\n      doc += TestUtil.nextInt(random(), 1, maxStep);\n      docs.add(doc);\n    }\n    final int maxDoc = docs.get(docs.size() - 1) + TestUtil.nextInt(random(), 1, 100);\n\n    FixedBitSet set = new FixedBitSet(maxDoc);\n    for (int doc : docs) {\n      set.set(doc);\n    }\n\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      SparseDISI.writeBitSet(new BitSetIterator(set, docs.size()), maxDoc, out);\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      SparseDISI disi = new SparseDISI(maxDoc, in, 0L, docs.size());\n      BitSetIterator disi2 = new BitSetIterator(set, docs.size());\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 20, maxStep, maxStep * 10}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        SparseDISI disi = new SparseDISI(maxDoc, in, 0L, docs.size());\n        BitSetIterator disi2 = new BitSetIterator(set, docs.size());\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc = disi2.advance(target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          int index = Collections.binarySearch(docs, doc);\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feec55b6e9aaab41be57a5001b31fa14c3925ae4","date":1476170434,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestSparseDISI#doTestRandom(Directory).mjava","sourceNew":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    long length;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int index = -1;\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc;\n          do {\n            doc = disi2.nextDoc();\n            index++;\n          } while (doc < target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","sourceOld":"  private void doTestRandom(Directory dir) throws IOException {\n    List<Integer> docs = new ArrayList<>();\n    final int maxStep = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 2, 10));\n    final int numDocs = TestUtil.nextInt(random(), 1, 1000);\n    for (int doc = -1, i = 0; i < numDocs; ++i) {\n      doc += TestUtil.nextInt(random(), 1, maxStep);\n      docs.add(doc);\n    }\n    final int maxDoc = docs.get(docs.size() - 1) + TestUtil.nextInt(random(), 1, 100);\n\n    FixedBitSet set = new FixedBitSet(maxDoc);\n    for (int doc : docs) {\n      set.set(doc);\n    }\n\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      SparseDISI.writeBitSet(new BitSetIterator(set, docs.size()), maxDoc, out);\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      SparseDISI disi = new SparseDISI(maxDoc, in, 0L, docs.size());\n      BitSetIterator disi2 = new BitSetIterator(set, docs.size());\n      int i = 0;\n      for (int doc = disi2.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = disi2.nextDoc()) {\n        assertEquals(doc, disi.nextDoc());\n        assertEquals(i++, disi.index());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, disi.nextDoc());\n    }\n\n    for (int step : new int[] {1, 20, maxStep, maxStep * 10}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        SparseDISI disi = new SparseDISI(maxDoc, in, 0L, docs.size());\n        BitSetIterator disi2 = new BitSetIterator(set, docs.size());\n        while (true) {\n          int target = disi2.docID() + step;\n          int doc = disi2.advance(target);\n          assertEquals(doc, disi.advance(target));\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          int index = Collections.binarySearch(docs, doc);\n          assertEquals(index, disi.index());\n        }\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"feec55b6e9aaab41be57a5001b31fa14c3925ae4":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["feec55b6e9aaab41be57a5001b31fa14c3925ae4"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["feec55b6e9aaab41be57a5001b31fa14c3925ae4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"feec55b6e9aaab41be57a5001b31fa14c3925ae4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}