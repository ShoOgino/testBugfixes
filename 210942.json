{"path":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#lookup(char[],int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#lookup(char[],int,int).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#lookup(char[],int,int).mjava","sourceNew":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<Integer, int[]>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    FST.Arc<Long> arc = new FST.Arc<Long>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[finalOutput]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","sourceOld":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<Integer, int[]>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    FST.Arc<Long> arc = new FST.Arc<Long>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[finalOutput]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82557a475db3e0849171dc0be5b02e3ae0745ddb","date":1358195918,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#lookup(char[],int,int).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#lookup(char[],int,int).mjava","sourceNew":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<Integer, int[]>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    FST.Arc<Long> arc = new FST.Arc<Long>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[finalOutput]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","sourceOld":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<Integer, int[]>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    FST.Arc<Long> arc = new FST.Arc<Long>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[finalOutput]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#lookup(char[],int,int).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#lookup(char[],int,int).mjava","sourceNew":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<Integer, int[]>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    FST.Arc<Long> arc = new FST.Arc<Long>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[finalOutput]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","sourceOld":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<Integer, int[]>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    FST.Arc<Long> arc = new FST.Arc<Long>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[finalOutput]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#lookup(char[],int,int).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#lookup(char[],int,int).mjava","sourceNew":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    FST.Arc<Long> arc = new FST.Arc<>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[finalOutput]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","sourceOld":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<Integer, int[]>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    FST.Arc<Long> arc = new FST.Arc<Long>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[finalOutput]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#lookup(char[],int,int).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#lookup(char[],int,int).mjava","sourceNew":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    FST.Arc<Long> arc = new FST.Arc<>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output().intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput().intValue();\n          result.put(startOffset-off, segmentations[finalOutput]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","sourceOld":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    FST.Arc<Long> arc = new FST.Arc<>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[finalOutput]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#lookup(char[],int,int).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#lookup(char[],int,int).mjava","sourceNew":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    FST.Arc<Long> arc = new FST.Arc<>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output().intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput().intValue();\n          result.put(startOffset-off, segmentations[finalOutput]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","sourceOld":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    FST.Arc<Long> arc = new FST.Arc<>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[finalOutput]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["82557a475db3e0849171dc0be5b02e3ae0745ddb"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","82557a475db3e0849171dc0be5b02e3ae0745ddb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","c4015cd39dff8d4dec562d909f9766debac53aa6"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["82557a475db3e0849171dc0be5b02e3ae0745ddb","c4015cd39dff8d4dec562d909f9766debac53aa6"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}