{"path":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}