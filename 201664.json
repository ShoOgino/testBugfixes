{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterDataProvider,String).mjava","commits":[{"id":"d2e1fb1b46fffdd00b6f31596d6eee00b71015fc","date":1495616754,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterDataProvider,String).mjava","pathOld":"/dev/null","sourceNew":"    private void addClausesForCollection(ClusterDataProvider dataProvider, String c) {\n      String p = dataProvider.getPolicy(c);\n      if (p != null) {\n        List<Clause> perCollPolicy = policies.get(p);\n        if (perCollPolicy == null)\n          throw new RuntimeException(StrUtils.formatString(\"Policy for collection {0} is {1} . It does not exist\", c, p));\n      }\n      expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa61ea06d4d27acb465d77e15f20aae84531d73","date":1495784617,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterDataProvider,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterDataProvider,String).mjava","sourceNew":"    private void addClausesForCollection(ClusterDataProvider dataProvider, String c) {\n      String p = dataProvider.getPolicyNameByCollection(c);\n      if (p != null) {\n        List<Clause> perCollPolicy = policies.get(p);\n        if (perCollPolicy == null)\n          throw new RuntimeException(StrUtils.formatString(\"Policy for collection {0} is {1} . It does not exist\", c, p));\n      }\n      expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n    }\n\n","sourceOld":"    private void addClausesForCollection(ClusterDataProvider dataProvider, String c) {\n      String p = dataProvider.getPolicy(c);\n      if (p != null) {\n        List<Clause> perCollPolicy = policies.get(p);\n        if (perCollPolicy == null)\n          throw new RuntimeException(StrUtils.formatString(\"Policy for collection {0} is {1} . It does not exist\", c, p));\n      }\n      expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterDataProvider,String).mjava","pathOld":"/dev/null","sourceNew":"    private void addClausesForCollection(ClusterDataProvider dataProvider, String c) {\n      String p = dataProvider.getPolicyNameByCollection(c);\n      if (p != null) {\n        List<Clause> perCollPolicy = policies.get(p);\n        if (perCollPolicy == null)\n          throw new RuntimeException(StrUtils.formatString(\"Policy for collection {0} is {1} . It does not exist\", c, p));\n      }\n      expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterDataProvider,String).mjava","pathOld":"/dev/null","sourceNew":"    private void addClausesForCollection(ClusterDataProvider dataProvider, String c) {\n      String p = dataProvider.getPolicyNameByCollection(c);\n      if (p != null) {\n        List<Clause> perCollPolicy = policies.get(p);\n        if (perCollPolicy == null)\n          throw new RuntimeException(StrUtils.formatString(\"Policy for collection {0} is {1} . It does not exist\", c, p));\n      }\n      expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterDataProvider,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterDataProvider,String).mjava","sourceNew":"    private void addClausesForCollection(ClusterDataProvider dataProvider, String c) {\n      String p = dataProvider.getPolicyNameByCollection(c);\n      if (p != null) {\n        List<Clause> perCollPolicy = policies.get(p);\n        if (perCollPolicy == null)\n          throw new RuntimeException(StrUtils.formatString(\"Policy for collection {0} is {1} . It does not exist\", c, p));\n      }\n      expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n    }\n\n","sourceOld":"    private void addClausesForCollection(ClusterDataProvider dataProvider, String c) {\n      String p = dataProvider.getPolicyNameByCollection(c);\n      if (p != null) {\n        List<Clause> perCollPolicy = policies.get(p);\n        if (perCollPolicy == null)\n          throw new RuntimeException(StrUtils.formatString(\"Policy for collection {0} is {1} . It does not exist\", c, p));\n      }\n      expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterDataProvider,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterDataProvider,String).mjava","sourceNew":"    private void addClausesForCollection(ClusterDataProvider dataProvider, String c) {\n      String p = dataProvider.getPolicyNameByCollection(c);\n      if (p != null) {\n        List<Clause> perCollPolicy = policies.get(p);\n        if (perCollPolicy == null)\n          throw new RuntimeException(StrUtils.formatString(\"Policy for collection {0} is {1} . It does not exist\", c, p));\n      }\n      expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n    }\n\n","sourceOld":"    private void addClausesForCollection(ClusterDataProvider dataProvider, String c) {\n      String p = dataProvider.getPolicyNameByCollection(c);\n      if (p != null) {\n        List<Clause> perCollPolicy = policies.get(p);\n        if (perCollPolicy == null)\n          throw new RuntimeException(StrUtils.formatString(\"Policy for collection {0} is {1} . It does not exist\", c, p));\n      }\n      expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["d2e1fb1b46fffdd00b6f31596d6eee00b71015fc"],"d2e1fb1b46fffdd00b6f31596d6eee00b71015fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"98f11c416d30e556e0004a9a84960702d12d35b1":["8aa61ea06d4d27acb465d77e15f20aae84531d73","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["98f11c416d30e556e0004a9a84960702d12d35b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","d2e1fb1b46fffdd00b6f31596d6eee00b71015fc","a513b6a92751e54c76fb5447948c9e7d437163a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["98f11c416d30e556e0004a9a84960702d12d35b1"],"d2e1fb1b46fffdd00b6f31596d6eee00b71015fc":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}