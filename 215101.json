{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#bootstrapConf().mjava","commits":[{"id":"9896f063d7e42373599b68eb61b173bdb11411c5","date":1330354201,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#bootstrapConf().mjava","pathOld":"/dev/null","sourceNew":"  private void bootstrapConf() throws IOException,\n      KeeperException, InterruptedException {\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.getAttr(node, \"name\", null);\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.getAttr(node, \"collection\", null);\n      if (confName == null) {\n        confName = rawName;\n      }\n\n      zkController.uploadConfigDir(new File(idir, \"conf\"), confName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#bootstrapConf().mjava","pathOld":"/dev/null","sourceNew":"  private void bootstrapConf() throws IOException,\n      KeeperException, InterruptedException {\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.getAttr(node, \"name\", null);\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.getAttr(node, \"collection\", null);\n      if (confName == null) {\n        confName = rawName;\n      }\n\n      zkController.uploadConfigDir(new File(idir, \"conf\"), confName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d51faece9593d2e9be4f2b6e603d96e5bcb2d1","date":1337273259,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,Config,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#bootstrapConf().mjava","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   * \n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, Config cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n    \n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.getAttr(node, \"name\", null);\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.getAttr(node, \"collection\", null);\n      if (confName == null) {\n        confName = rawName;\n      }\n\n      ZkController.uploadConfigDir(zkClient, new File(idir, \"conf\"), confName);\n    }\n  }\n\n","sourceOld":"  private void bootstrapConf() throws IOException,\n      KeeperException, InterruptedException {\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.getAttr(node, \"name\", null);\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.getAttr(node, \"collection\", null);\n      if (confName == null) {\n        confName = rawName;\n      }\n\n      zkController.uploadConfigDir(new File(idir, \"conf\"), confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,Config,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#bootstrapConf().mjava","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   * \n   * @throws IOException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, Config cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n    \n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.getAttr(node, \"name\", null);\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.getAttr(node, \"collection\", null);\n      if (confName == null) {\n        confName = rawName;\n      }\n\n      ZkController.uploadConfigDir(zkClient, new File(idir, \"conf\"), confName);\n    }\n  }\n\n","sourceOld":"  private void bootstrapConf() throws IOException,\n      KeeperException, InterruptedException {\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.getAttr(node, \"name\", null);\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.getAttr(node, \"collection\", null);\n      if (confName == null) {\n        confName = rawName;\n      }\n\n      zkController.uploadConfigDir(new File(idir, \"conf\"), confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9896f063d7e42373599b68eb61b173bdb11411c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9896f063d7e42373599b68eb61b173bdb11411c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef0d8a69209261514c5739c770bba706c2308450":["9896f063d7e42373599b68eb61b173bdb11411c5","70d51faece9593d2e9be4f2b6e603d96e5bcb2d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70d51faece9593d2e9be4f2b6e603d96e5bcb2d1"],"70d51faece9593d2e9be4f2b6e603d96e5bcb2d1":["9896f063d7e42373599b68eb61b173bdb11411c5"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","9896f063d7e42373599b68eb61b173bdb11411c5"],"9896f063d7e42373599b68eb61b173bdb11411c5":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ef0d8a69209261514c5739c770bba706c2308450","70d51faece9593d2e9be4f2b6e603d96e5bcb2d1"],"ef0d8a69209261514c5739c770bba706c2308450":[],"70d51faece9593d2e9be4f2b6e603d96e5bcb2d1":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}