{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesTypeCompatibility#testIncompatibleTypesBytes().mjava","commits":[{"id":"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18","date":1339188570,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesTypeCompatibility#testIncompatibleTypesBytes().mjava","pathOld":"/dev/null","sourceNew":"  public void testIncompatibleTypesBytes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    int numDocs = atLeast(100);\n\n    iwc.setMaxBufferedDocs(numDocs); // make sure we hit the same DWPT\n    iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setRAMPerThreadHardLimitMB(2000);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    \n    int numDocsIndexed = 0;\n    for (int j = 1; j < numDocs; j++) {\n      try {\n        addDoc(writer, getRandomIndexableDVField());\n        numDocsIndexed++;\n      } catch (IllegalArgumentException e) {\n        assertTrue(e.getMessage().startsWith(\"Incompatible DocValues type:\"));\n      }\n    }\n    \n    writer.commit();\n    DirectoryReader open = DirectoryReader.open(dir);\n    assertEquals(numDocsIndexed, open.numDocs());\n    open.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2893fd5349134af382d33ccc3d84840394c6c1","date":1353682567,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesTypeCompatibility#testIncompatibleTypesBytes().mjava","sourceNew":null,"sourceOld":"  public void testIncompatibleTypesBytes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    int numDocs = atLeast(100);\n\n    iwc.setMaxBufferedDocs(numDocs); // make sure we hit the same DWPT\n    iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setRAMPerThreadHardLimitMB(2000);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    \n    int numDocsIndexed = 0;\n    for (int j = 1; j < numDocs; j++) {\n      try {\n        addDoc(writer, getRandomIndexableDVField());\n        numDocsIndexed++;\n      } catch (IllegalArgumentException e) {\n        assertTrue(e.getMessage().startsWith(\"Incompatible DocValues type:\"));\n      }\n    }\n    \n    writer.commit();\n    DirectoryReader open = DirectoryReader.open(dir);\n    assertEquals(numDocsIndexed, open.numDocs());\n    open.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesTypeCompatibility#testIncompatibleTypesBytes().mjava","sourceNew":null,"sourceOld":"  public void testIncompatibleTypesBytes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    int numDocs = atLeast(100);\n\n    iwc.setMaxBufferedDocs(numDocs); // make sure we hit the same DWPT\n    iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setRAMPerThreadHardLimitMB(2000);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    \n    int numDocsIndexed = 0;\n    for (int j = 1; j < numDocs; j++) {\n      try {\n        addDoc(writer, getRandomIndexableDVField());\n        numDocsIndexed++;\n      } catch (IllegalArgumentException e) {\n        assertTrue(e.getMessage().startsWith(\"Incompatible DocValues type:\"));\n      }\n    }\n    \n    writer.commit();\n    DirectoryReader open = DirectoryReader.open(dir);\n    assertEquals(numDocsIndexed, open.numDocs());\n    open.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18","6e2893fd5349134af382d33ccc3d84840394c6c1"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18":["d4d69c535930b5cce125cff868d40f6373dc27d4","6e2893fd5349134af382d33ccc3d84840394c6c1"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}