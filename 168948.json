{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testQueryVisitor().mjava","commits":[{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testQueryVisitor().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testExtractTerms().mjava","sourceNew":"  public void testQueryVisitor() throws IOException {\n    Term a = new Term(\"f\", \"a\");\n    Term b = new Term(\"f\", \"b\");\n    Term c = new Term(\"f\", \"c\");\n    Term d = new Term(\"f\", \"d\");\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(a), Occur.SHOULD);\n    bqBuilder.add(new TermQuery(b), Occur.MUST);\n    bqBuilder.add(new TermQuery(c), Occur.FILTER);\n    bqBuilder.add(new TermQuery(d), Occur.MUST_NOT);\n    BooleanQuery bq = bqBuilder.build();\n\n    bq.visit(new QueryVisitor() {\n\n      Term expected;\n\n      @Override\n      public QueryVisitor getSubVisitor(Occur occur, Query parent) {\n        switch (occur) {\n          case SHOULD:\n            expected = a;\n            break;\n          case MUST:\n            expected = b;\n            break;\n          case FILTER:\n            expected = c;\n            break;\n          case MUST_NOT:\n            expected = d;\n            break;\n          default:\n            throw new IllegalStateException();\n        }\n        return this;\n      }\n\n      @Override\n      public void consumeTerms(Query query, Term... terms) {\n        assertEquals(expected, terms[0]);\n      }\n    });\n  }\n\n","sourceOld":"  public void testExtractTerms() throws IOException {\n    Term a = new Term(\"f\", \"a\");\n    Term b = new Term(\"f\", \"b\");\n    Term c = new Term(\"f\", \"c\");\n    Term d = new Term(\"f\", \"d\");\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(a), Occur.SHOULD);\n    bqBuilder.add(new TermQuery(b), Occur.MUST);\n    bqBuilder.add(new TermQuery(c), Occur.FILTER);\n    bqBuilder.add(new TermQuery(d), Occur.MUST_NOT);\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    BooleanQuery bq = bqBuilder.build();\n\n    Set<Term> scoringTerms = new HashSet<>();\n    searcher.createWeight(searcher.rewrite(bq), ScoreMode.COMPLETE, 1).extractTerms(scoringTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b)), scoringTerms);\n\n    Set<Term> matchingTerms = new HashSet<>();\n    searcher.createWeight(searcher.rewrite(bq), ScoreMode.COMPLETE_NO_SCORES, 1).extractTerms(matchingTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b, c)), matchingTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}