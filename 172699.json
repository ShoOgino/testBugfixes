{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/ConfigParseUtil#verifyWithSchema(DataImporter,Map[String,EntityField]).mjava","commits":[{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/ConfigParseUtil#verifyWithSchema(DataImporter,Map[String,EntityField]).mjava","pathOld":"/dev/null","sourceNew":"  public static void verifyWithSchema(DataImporter di, Map<String,EntityField> fields) {\n    Map<String,SchemaField> schemaFields = null;\n    if (di.getSchema() == null) {\n      schemaFields = Collections.emptyMap();\n    } else {\n      schemaFields = di.getSchema().getFields();\n    }\n    for (Map.Entry<String,SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n              .info(sf.getName()\n                  + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String,EntityField> entry : fields.entrySet()) {\n      EntityField fld = entry.getValue();\n      SchemaField field = di.getSchemaField(fld.getName());\n      if (field == null) {\n        LOG\n            .info(\"The field :\"\n                + fld.getName()\n                + \" present in DataConfig does not have a counterpart in Solr Schema\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#verifyWithSchema(Map[String,EntityField]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/ConfigParseUtil#verifyWithSchema(DataImporter,Map[String,EntityField]).mjava","sourceNew":"  private void verifyWithSchema(Map<String,EntityField> fields) {\n    Map<String,SchemaField> schemaFields = null;\n    if (schema == null) {\n      schemaFields = Collections.emptyMap();\n    } else {\n      schemaFields = schema.getFields();\n    }\n    for (Map.Entry<String,SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG.info(sf.getName() + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String,EntityField> entry : fields.entrySet()) {\n      EntityField fld = entry.getValue();\n      SchemaField field = getSchemaField(fld.getName());\n      if (field == null) {\n        LOG.info(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyWithSchema(DataImporter di, Map<String,EntityField> fields) {\n    Map<String,SchemaField> schemaFields = null;\n    if (di.getSchema() == null) {\n      schemaFields = Collections.emptyMap();\n    } else {\n      schemaFields = di.getSchema().getFields();\n    }\n    for (Map.Entry<String,SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n              .info(sf.getName()\n                  + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String,EntityField> entry : fields.entrySet()) {\n      EntityField fld = entry.getValue();\n      SchemaField field = di.getSchemaField(fld.getName());\n      if (field == null) {\n        LOG\n            .info(\"The field :\"\n                + fld.getName()\n                + \" present in DataConfig does not have a counterpart in Solr Schema\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["1b604003611eabbb4d3f0fb1f89d3b6a017f8faa"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"]},"commit2Childs":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"08970e5b8411182a29412c177eff67ec1110095b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}