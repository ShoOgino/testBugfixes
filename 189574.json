{"path":"solr/core/src/test/org/apache/solr/search/TestFiltering#rangeStr(String,boolean,int,int,boolean,int,boolean).mjava","commits":[{"id":"16b25963ad38ed289ebf0f7af31269fa1ce80a11","date":1442083896,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#rangeStr(String,boolean,int,int,boolean,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  String rangeStr(String field, boolean negative, int l, int u, boolean cache, int cost, boolean exclude) {\n    String topLev=\"\";\n    if (!cache || exclude) {\n      topLev = \"{!\" + (cache || random().nextBoolean() ? \" cache=\" + cache : \"\")\n          + (cost != 0 ? \" cost=\" + cost : \"\")\n          + ((exclude) ? \" tag=t\" : \"\") + \"}\";\n    }\n\n    String q = field + \":\";\n    String q2 = q;\n\n    String lower1 = \"[\" + f_s(l);\n    String lower2 = l<=0 ? lower1 : (\"{\" + f_s(l-1));\n    String upper1 = f_s(u) + \"]\";\n    String upper2 = f_s(u+1) + \"}\";\n\n    if (random().nextBoolean()) {\n      q += lower1;\n      q2 += lower2;\n    } else {\n      q += lower2;\n      q2 += lower1;\n    }\n\n    q += \" TO \";\n    q2 += \" TO \";\n\n    if (random().nextBoolean()) {\n      q += upper1;\n      q2 += upper2;\n    } else {\n      q += upper2;\n      q2 += upper1;\n    }\n\n\n    // String q = field + \":[\" + f_s(l) + \" TO \" + f_s(u) + \"]\";\n\n    if (negative) {\n      q = \"-_query_:\\\"\" + q + \"\\\"\";\n      // q = \"-\" + q; // TODO: need to be encapsulated for some reason?\n    } else {\n      if (random().nextBoolean()) {\n        // try some different query structures - important for testing different code paths\n        switch (random().nextInt(5)) {\n          case 0:\n            q = q + \" OR id:RAND\"+random().nextInt();\n            break;\n          case 1:\n            q = \"id:RAND\"+random().nextInt() + \" OR \" + q;\n            break;\n          case 2:\n            q = \"*:* AND \" + q;\n            break;\n          case 3:\n            q = q + \" AND \" + q2;\n            break;\n          case 4:\n            q = q + \" OR \" + q2;\n            break;\n        }\n      }\n    }\n    return topLev + q;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"16b25963ad38ed289ebf0f7af31269fa1ce80a11":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["16b25963ad38ed289ebf0f7af31269fa1ce80a11"]},"commit2Childs":{"16b25963ad38ed289ebf0f7af31269fa1ce80a11":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16b25963ad38ed289ebf0f7af31269fa1ce80a11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}