{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#writeRecursively(DataOutputStream,TernaryTreeNode).mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#writeRecursively(DataOutputStream,TernaryTreeNode).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/tst/TSTLookup#writeRecursively(DataOutputStream,TernaryTreeNode).mjava","sourceNew":"  // pre-order traversal\n  private void writeRecursively(DataOutputStream out, TernaryTreeNode node) throws IOException {\n    // write out the current node\n    out.writeChar(node.splitchar);\n    // prepare a mask of kids\n    byte mask = 0;\n    if (node.eqKid != null) mask |= EQ_KID;\n    if (node.loKid != null) mask |= LO_KID;\n    if (node.hiKid != null) mask |= HI_KID;\n    if (node.token != null) mask |= HAS_TOKEN;\n    if (node.val != null) mask |= HAS_VALUE;\n    out.writeByte(mask);\n    if (node.token != null) out.writeUTF(node.token);\n    if (node.val != null) out.writeFloat((Float)node.val);\n    // recurse and write kids\n    if (node.loKid != null) {\n      writeRecursively(out, node.loKid);\n    }\n    if (node.eqKid != null) {\n      writeRecursively(out, node.eqKid);\n    }\n    if (node.hiKid != null) {\n      writeRecursively(out, node.hiKid);\n    }\n  }\n\n","sourceOld":"  // pre-order traversal\n  private void writeRecursively(DataOutputStream out, TernaryTreeNode node) throws IOException {\n    // write out the current node\n    out.writeChar(node.splitchar);\n    // prepare a mask of kids\n    byte mask = 0;\n    if (node.eqKid != null) mask |= EQ_KID;\n    if (node.loKid != null) mask |= LO_KID;\n    if (node.hiKid != null) mask |= HI_KID;\n    if (node.token != null) mask |= HAS_TOKEN;\n    if (node.val != null) mask |= HAS_VALUE;\n    out.writeByte(mask);\n    if (node.token != null) out.writeUTF(node.token);\n    if (node.val != null) out.writeFloat((Float)node.val);\n    // recurse and write kids\n    if (node.loKid != null) {\n      writeRecursively(out, node.loKid);\n    }\n    if (node.eqKid != null) {\n      writeRecursively(out, node.eqKid);\n    }\n    if (node.hiKid != null) {\n      writeRecursively(out, node.hiKid);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#writeRecursively(DataOutputStream,TernaryTreeNode).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/tst/TSTLookup#writeRecursively(DataOutputStream,TernaryTreeNode).mjava","sourceNew":"  // pre-order traversal\n  private void writeRecursively(DataOutputStream out, TernaryTreeNode node) throws IOException {\n    // write out the current node\n    out.writeChar(node.splitchar);\n    // prepare a mask of kids\n    byte mask = 0;\n    if (node.eqKid != null) mask |= EQ_KID;\n    if (node.loKid != null) mask |= LO_KID;\n    if (node.hiKid != null) mask |= HI_KID;\n    if (node.token != null) mask |= HAS_TOKEN;\n    if (node.val != null) mask |= HAS_VALUE;\n    out.writeByte(mask);\n    if (node.token != null) out.writeUTF(node.token);\n    if (node.val != null) out.writeFloat((Float)node.val);\n    // recurse and write kids\n    if (node.loKid != null) {\n      writeRecursively(out, node.loKid);\n    }\n    if (node.eqKid != null) {\n      writeRecursively(out, node.eqKid);\n    }\n    if (node.hiKid != null) {\n      writeRecursively(out, node.hiKid);\n    }\n  }\n\n","sourceOld":"  // pre-order traversal\n  private void writeRecursively(DataOutputStream out, TernaryTreeNode node) throws IOException {\n    // write out the current node\n    out.writeChar(node.splitchar);\n    // prepare a mask of kids\n    byte mask = 0;\n    if (node.eqKid != null) mask |= EQ_KID;\n    if (node.loKid != null) mask |= LO_KID;\n    if (node.hiKid != null) mask |= HI_KID;\n    if (node.token != null) mask |= HAS_TOKEN;\n    if (node.val != null) mask |= HAS_VALUE;\n    out.writeByte(mask);\n    if (node.token != null) out.writeUTF(node.token);\n    if (node.val != null) out.writeFloat((Float)node.val);\n    // recurse and write kids\n    if (node.loKid != null) {\n      writeRecursively(out, node.loKid);\n    }\n    if (node.eqKid != null) {\n      writeRecursively(out, node.eqKid);\n    }\n    if (node.hiKid != null) {\n      writeRecursively(out, node.hiKid);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#writeRecursively(DataOutputStream,TernaryTreeNode).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/tst/TSTLookup#writeRecursively(DataOutputStream,TernaryTreeNode).mjava","sourceNew":"  // pre-order traversal\n  private void writeRecursively(DataOutputStream out, TernaryTreeNode node) throws IOException {\n    // write out the current node\n    out.writeChar(node.splitchar);\n    // prepare a mask of kids\n    byte mask = 0;\n    if (node.eqKid != null) mask |= EQ_KID;\n    if (node.loKid != null) mask |= LO_KID;\n    if (node.hiKid != null) mask |= HI_KID;\n    if (node.token != null) mask |= HAS_TOKEN;\n    if (node.val != null) mask |= HAS_VALUE;\n    out.writeByte(mask);\n    if (node.token != null) out.writeUTF(node.token);\n    if (node.val != null) out.writeFloat((Float)node.val);\n    // recurse and write kids\n    if (node.loKid != null) {\n      writeRecursively(out, node.loKid);\n    }\n    if (node.eqKid != null) {\n      writeRecursively(out, node.eqKid);\n    }\n    if (node.hiKid != null) {\n      writeRecursively(out, node.hiKid);\n    }\n  }\n\n","sourceOld":"  // pre-order traversal\n  private void writeRecursively(DataOutputStream out, TernaryTreeNode node) throws IOException {\n    // write out the current node\n    out.writeChar(node.splitchar);\n    // prepare a mask of kids\n    byte mask = 0;\n    if (node.eqKid != null) mask |= EQ_KID;\n    if (node.loKid != null) mask |= LO_KID;\n    if (node.hiKid != null) mask |= HI_KID;\n    if (node.token != null) mask |= HAS_TOKEN;\n    if (node.val != null) mask |= HAS_VALUE;\n    out.writeByte(mask);\n    if (node.token != null) out.writeUTF(node.token);\n    if (node.val != null) out.writeFloat((Float)node.val);\n    // recurse and write kids\n    if (node.loKid != null) {\n      writeRecursively(out, node.loKid);\n    }\n    if (node.eqKid != null) {\n      writeRecursively(out, node.eqKid);\n    }\n    if (node.hiKid != null) {\n      writeRecursively(out, node.hiKid);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#writeRecursively(DataOutputStream,TernaryTreeNode).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#writeRecursively(DataOutputStream,TernaryTreeNode).mjava","sourceNew":"  // pre-order traversal\n  private void writeRecursively(DataOutputStream out, TernaryTreeNode node) throws IOException {\n    // write out the current node\n    out.writeChar(node.splitchar);\n    // prepare a mask of kids\n    byte mask = 0;\n    if (node.eqKid != null) mask |= EQ_KID;\n    if (node.loKid != null) mask |= LO_KID;\n    if (node.hiKid != null) mask |= HI_KID;\n    if (node.token != null) mask |= HAS_TOKEN;\n    if (node.val != null) mask |= HAS_VALUE;\n    out.writeByte(mask);\n    if (node.token != null) out.writeUTF(node.token);\n    if (node.val != null) out.writeLong(((Number)node.val).longValue());\n    // recurse and write kids\n    if (node.loKid != null) {\n      writeRecursively(out, node.loKid);\n    }\n    if (node.eqKid != null) {\n      writeRecursively(out, node.eqKid);\n    }\n    if (node.hiKid != null) {\n      writeRecursively(out, node.hiKid);\n    }\n  }\n\n","sourceOld":"  // pre-order traversal\n  private void writeRecursively(DataOutputStream out, TernaryTreeNode node) throws IOException {\n    // write out the current node\n    out.writeChar(node.splitchar);\n    // prepare a mask of kids\n    byte mask = 0;\n    if (node.eqKid != null) mask |= EQ_KID;\n    if (node.loKid != null) mask |= LO_KID;\n    if (node.hiKid != null) mask |= HI_KID;\n    if (node.token != null) mask |= HAS_TOKEN;\n    if (node.val != null) mask |= HAS_VALUE;\n    out.writeByte(mask);\n    if (node.token != null) out.writeUTF(node.token);\n    if (node.val != null) out.writeFloat((Float)node.val);\n    // recurse and write kids\n    if (node.loKid != null) {\n      writeRecursively(out, node.loKid);\n    }\n    if (node.eqKid != null) {\n      writeRecursively(out, node.eqKid);\n    }\n    if (node.hiKid != null) {\n      writeRecursively(out, node.hiKid);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#writeRecursively(DataOutputStream,TernaryTreeNode).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#writeRecursively(DataOutputStream,TernaryTreeNode).mjava","sourceNew":"  // pre-order traversal\n  private void writeRecursively(DataOutputStream out, TernaryTreeNode node) throws IOException {\n    // write out the current node\n    out.writeChar(node.splitchar);\n    // prepare a mask of kids\n    byte mask = 0;\n    if (node.eqKid != null) mask |= EQ_KID;\n    if (node.loKid != null) mask |= LO_KID;\n    if (node.hiKid != null) mask |= HI_KID;\n    if (node.token != null) mask |= HAS_TOKEN;\n    if (node.val != null) mask |= HAS_VALUE;\n    out.writeByte(mask);\n    if (node.token != null) out.writeUTF(node.token);\n    if (node.val != null) out.writeLong(((Number)node.val).longValue());\n    // recurse and write kids\n    if (node.loKid != null) {\n      writeRecursively(out, node.loKid);\n    }\n    if (node.eqKid != null) {\n      writeRecursively(out, node.eqKid);\n    }\n    if (node.hiKid != null) {\n      writeRecursively(out, node.hiKid);\n    }\n  }\n\n","sourceOld":"  // pre-order traversal\n  private void writeRecursively(DataOutputStream out, TernaryTreeNode node) throws IOException {\n    // write out the current node\n    out.writeChar(node.splitchar);\n    // prepare a mask of kids\n    byte mask = 0;\n    if (node.eqKid != null) mask |= EQ_KID;\n    if (node.loKid != null) mask |= LO_KID;\n    if (node.hiKid != null) mask |= HI_KID;\n    if (node.token != null) mask |= HAS_TOKEN;\n    if (node.val != null) mask |= HAS_VALUE;\n    out.writeByte(mask);\n    if (node.token != null) out.writeUTF(node.token);\n    if (node.val != null) out.writeFloat((Float)node.val);\n    // recurse and write kids\n    if (node.loKid != null) {\n      writeRecursively(out, node.loKid);\n    }\n    if (node.eqKid != null) {\n      writeRecursively(out, node.eqKid);\n    }\n    if (node.hiKid != null) {\n      writeRecursively(out, node.hiKid);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#writeRecursively(DataOutputStream,TernaryTreeNode).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#writeRecursively(DataOutputStream,TernaryTreeNode).mjava","sourceNew":"  // pre-order traversal\n  private void writeRecursively(DataOutputStream out, TernaryTreeNode node) throws IOException {\n    // write out the current node\n    out.writeChar(node.splitchar);\n    // prepare a mask of kids\n    byte mask = 0;\n    if (node.eqKid != null) mask |= EQ_KID;\n    if (node.loKid != null) mask |= LO_KID;\n    if (node.hiKid != null) mask |= HI_KID;\n    if (node.token != null) mask |= HAS_TOKEN;\n    if (node.val != null) mask |= HAS_VALUE;\n    out.writeByte(mask);\n    if (node.token != null) out.writeUTF(node.token);\n    if (node.val != null) out.writeLong(((Number)node.val).longValue());\n    // recurse and write kids\n    if (node.loKid != null) {\n      writeRecursively(out, node.loKid);\n    }\n    if (node.eqKid != null) {\n      writeRecursively(out, node.eqKid);\n    }\n    if (node.hiKid != null) {\n      writeRecursively(out, node.hiKid);\n    }\n  }\n\n","sourceOld":"  // pre-order traversal\n  private void writeRecursively(DataOutputStream out, TernaryTreeNode node) throws IOException {\n    // write out the current node\n    out.writeChar(node.splitchar);\n    // prepare a mask of kids\n    byte mask = 0;\n    if (node.eqKid != null) mask |= EQ_KID;\n    if (node.loKid != null) mask |= LO_KID;\n    if (node.hiKid != null) mask |= HI_KID;\n    if (node.token != null) mask |= HAS_TOKEN;\n    if (node.val != null) mask |= HAS_VALUE;\n    out.writeByte(mask);\n    if (node.token != null) out.writeUTF(node.token);\n    if (node.val != null) out.writeLong(((Number)node.val).longValue());\n    // recurse and write kids\n    if (node.loKid != null) {\n      writeRecursively(out, node.loKid);\n    }\n    if (node.eqKid != null) {\n      writeRecursively(out, node.eqKid);\n    }\n    if (node.hiKid != null) {\n      writeRecursively(out, node.hiKid);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["e230a61047bc041516c811baa08a7174d6f8322a","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["e230a61047bc041516c811baa08a7174d6f8322a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"e230a61047bc041516c811baa08a7174d6f8322a":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","dc3c850c5222a1ce7d619563f67bf047a11b32b6","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}