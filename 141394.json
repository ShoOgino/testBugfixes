{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#discardEscapeChar(String).mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#discardEscapeChar(String).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#discardEscapeChar(String).mjava","sourceNew":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   */\n  private String discardEscapeChar(String input) {\n    char[] caSource = input.toCharArray();\n    char[] caDest = new char[caSource.length];\n    int j = 0;\n    for (int i = 0; i < caSource.length; i++) {\n      if ((caSource[i] != '\\\\') || (i > 0 && caSource[i-1] == '\\\\')) {\n        caDest[j++]=caSource[i];\n      }\n    }\n    return new String(caDest, 0, j);\n  }\n\n","sourceOld":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   */\n  private String discardEscapeChar(String input) {\n    char[] caSource = input.toCharArray();\n    char[] caDest = new char[caSource.length];\n    int j = 0;\n    for (int i = 0; i < caSource.length; i++) {\n      if ((caSource[i] != '\\\\') || (i > 0 && caSource[i-1] == '\\\\')) {\n        caDest[j++]=caSource[i];\n      }\n    }\n    return new String(caDest, 0, j);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecaea79e307d83311c31273b0ea89b9fdb0c5a32","date":1287584790,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#discardEscapeChar(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   */\n  private String discardEscapeChar(String input) {\n    char[] caSource = input.toCharArray();\n    char[] caDest = new char[caSource.length];\n    int j = 0;\n    for (int i = 0; i < caSource.length; i++) {\n      if ((caSource[i] != '\\\\') || (i > 0 && caSource[i-1] == '\\\\')) {\n        caDest[j++]=caSource[i];\n      }\n    }\n    return new String(caDest, 0, j);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8017ab6544f30f93b106e419e7298173bad77f69","date":1287608126,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#discardEscapeChar(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   */\n  private String discardEscapeChar(String input) {\n    char[] caSource = input.toCharArray();\n    char[] caDest = new char[caSource.length];\n    int j = 0;\n    for (int i = 0; i < caSource.length; i++) {\n      if ((caSource[i] != '\\\\') || (i > 0 && caSource[i-1] == '\\\\')) {\n        caDest[j++]=caSource[i];\n      }\n    }\n    return new String(caDest, 0, j);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#discardEscapeChar(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   */\n  private String discardEscapeChar(String input) {\n    char[] caSource = input.toCharArray();\n    char[] caDest = new char[caSource.length];\n    int j = 0;\n    for (int i = 0; i < caSource.length; i++) {\n      if ((caSource[i] != '\\\\') || (i > 0 && caSource[i-1] == '\\\\')) {\n        caDest[j++]=caSource[i];\n      }\n    }\n    return new String(caDest, 0, j);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8017ab6544f30f93b106e419e7298173bad77f69":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32"]},"commit2Childs":{"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32","8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"8017ab6544f30f93b106e419e7298173bad77f69":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}