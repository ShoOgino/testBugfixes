{"path":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(reader, field, (FieldCache.ByteParser) parser);\n        // we only request the usage of termDocs, if the range contains 0\n        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(reader, field, (FieldCache.ByteParser) parser);\n        // we only request the usage of termDocs, if the range contains 0\n        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(reader, field, (FieldCache.ByteParser) parser);\n        // we only respect deleted docs if the range contains 0\n        return new FieldCacheDocIdSet(reader, !(inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(reader, field, (FieldCache.ByteParser) parser);\n        // we only request the usage of termDocs, if the range contains 0\n        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(ReaderContext context) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader, field, (FieldCache.ByteParser) parser);\n        // we only respect deleted docs if the range contains 0\n        return new FieldCacheDocIdSet(context.reader, !(inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(reader, field, (FieldCache.ByteParser) parser);\n        // we only respect deleted docs if the range contains 0\n        return new FieldCacheDocIdSet(reader, !(inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader, field, (FieldCache.ByteParser) parser);\n        // we only respect deleted docs if the range contains 0\n        return new FieldCacheDocIdSet(context.reader, !(inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(ReaderContext context) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader, field, (FieldCache.ByteParser) parser);\n        // we only respect deleted docs if the range contains 0\n        return new FieldCacheDocIdSet(context.reader, !(inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader, field, (FieldCache.ByteParser) parser);\n        // we only respect deleted docs if the range contains 0\n        return new FieldCacheDocIdSet(context.reader, !(inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(reader, field, (FieldCache.ByteParser) parser);\n        // we only respect deleted docs if the range contains 0\n        return new FieldCacheDocIdSet(reader, !(inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader, field, (FieldCache.ByteParser) parser);\n        // we only respect deleted docs if the range contains 0\n        return new FieldCacheDocIdSet(context.reader, !(inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(reader, field, (FieldCache.ByteParser) parser);\n        // we only respect deleted docs if the range contains 0\n        return new FieldCacheDocIdSet(reader, !(inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader, field, (FieldCache.ByteParser) parser);\n        return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader, field, (FieldCache.ByteParser) parser);\n        // we only respect deleted docs if the range contains 0\n        return new FieldCacheDocIdSet(context.reader, !(inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader, field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader, field, (FieldCache.ByteParser) parser);\n        return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d55536a3153c541924af58559781c36228d25420","date":1322184113,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader, field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader, field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n          @Override\n          boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader(), field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader, field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fad1351342e15571fed2a68feaed0a8a3a18e5da","date":1327959908,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(AtomicReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader(), field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader(), field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(AtomicReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader(), field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader, field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newByteRange(String,FieldCache.ByteParser,Byte,Byte,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(AtomicReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader(), field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getBytes(AtomicReader,String,FieldCache.ByteParser,boolean)}. This works with all\n   * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Byte> newByteRange(String field, FieldCache.ByteParser parser, Byte lowerVal, Byte upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Byte>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final byte inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          final byte i = lowerVal.byteValue();\n          if (!includeLower && i == Byte.MAX_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveLowerPoint = (byte) (includeLower ?  i : (i + 1));\n        } else {\n          inclusiveLowerPoint = Byte.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          final byte i = upperVal.byteValue();\n          if (!includeUpper && i == Byte.MIN_VALUE)\n            return DocIdSet.EMPTY_DOCIDSET;\n          inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));\n        } else {\n          inclusiveUpperPoint = Byte.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        final byte[] values = FieldCache.DEFAULT.getBytes(context.reader(), field, (FieldCache.ByteParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["d55536a3153c541924af58559781c36228d25420"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"382fe3a6ca9745891afebda9b9a57cc158305545":["6620df8541b174097b1133a4fc370adb2e570524"],"d55536a3153c541924af58559781c36228d25420":["382fe3a6ca9745891afebda9b9a57cc158305545"],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d55536a3153c541924af58559781c36228d25420","fad1351342e15571fed2a68feaed0a8a3a18e5da"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["382fe3a6ca9745891afebda9b9a57cc158305545"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["fad1351342e15571fed2a68feaed0a8a3a18e5da"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"382fe3a6ca9745891afebda9b9a57cc158305545":["d55536a3153c541924af58559781c36228d25420"],"d55536a3153c541924af58559781c36228d25420":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["6620df8541b174097b1133a4fc370adb2e570524","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}