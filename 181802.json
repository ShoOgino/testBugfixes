{"path":"solr/core/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","sourceNew":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    } else if (!luceneMatchVersion.onOrAfter(Version.LUCENE_40)) {\n      log.warn(getClass().getSimpleName() + \" is using deprecated \" + luceneMatchVersion + \n        \" emulation. You should at some point declare and reindex to at least 4.0, because \" +\n        \"3.x emulation is deprecated and will be removed in 5.0\");\n    }\n  }\n\n","sourceOld":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    } else if (!luceneMatchVersion.onOrAfter(Version.LUCENE_40)) {\n      log.warn(getClass().getSimpleName() + \" is using deprecated \" + luceneMatchVersion + \n        \" emulation. You should at some point declare and reindex to at least 4.0, because \" +\n        \"3.x emulation is deprecated and will be removed in 5.0\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","sourceNew":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    } else if (!luceneMatchVersion.onOrAfter(Version.LUCENE_40)) {\n      log.warn(getClass().getSimpleName() + \" is using deprecated \" + luceneMatchVersion + \n        \" emulation. You should at some point declare and reindex to at least 4.0, because \" +\n        \"3.x emulation is deprecated and will be removed in 5.0\");\n    }\n  }\n\n","sourceOld":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    } else if (!luceneMatchVersion.onOrAfter(Version.LUCENE_40)) {\n      log.warn(getClass().getSimpleName() + \" is using deprecated \" + luceneMatchVersion + \n        \" emulation. You should at some point declare and reindex to at least 4.0, because \" +\n        \"3.x emulation is deprecated and will be removed in 5.0\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","sourceNew":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    } else if (!luceneMatchVersion.onOrAfter(Version.LUCENE_40)) {\n      log.warn(getClass().getSimpleName() + \" is using deprecated \" + luceneMatchVersion + \n        \" emulation. You should at some point declare and reindex to at least 4.0, because \" +\n        \"3.x emulation is deprecated and will be removed in 5.0\");\n    }\n  }\n\n","sourceOld":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    } else if (!luceneMatchVersion.onOrAfter(Version.LUCENE_40)) {\n      log.warn(getClass().getSimpleName() + \" is using deprecated \" + luceneMatchVersion + \n        \" emulation. You should at some point declare and reindex to at least 4.0, because \" +\n        \"3.x emulation is deprecated and will be removed in 5.0\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39d25aba1848c644c6d22b943d3d66f661445ac7","date":1335238294,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","sourceNew":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new InitializationException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    } else if (!luceneMatchVersion.onOrAfter(Version.LUCENE_40)) {\n      log.warn(getClass().getSimpleName() + \" is using deprecated \" + luceneMatchVersion + \n        \" emulation. You should at some point declare and reindex to at least 4.0, because \" +\n        \"3.x emulation is deprecated and will be removed in 5.0\");\n    }\n  }\n\n","sourceOld":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    } else if (!luceneMatchVersion.onOrAfter(Version.LUCENE_40)) {\n      log.warn(getClass().getSimpleName() + \" is using deprecated \" + luceneMatchVersion + \n        \" emulation. You should at some point declare and reindex to at least 4.0, because \" +\n        \"3.x emulation is deprecated and will be removed in 5.0\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6d3ad4230a9094e97925f9395cf6db4729284d9","date":1335503918,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","sourceNew":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new InitializationException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    }\n  }\n\n","sourceOld":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new InitializationException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    } else if (!luceneMatchVersion.onOrAfter(Version.LUCENE_40)) {\n      log.warn(getClass().getSimpleName() + \" is using deprecated \" + luceneMatchVersion + \n        \" emulation. You should at some point declare and reindex to at least 4.0, because \" +\n        \"3.x emulation is deprecated and will be removed in 5.0\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"687e86054415a85f912c6eaa38f995038e5c1cd8","date":1336447427,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory#assureMatchVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","sourceNew":"   /** this method can be called in the {@link org.apache.lucene.analysis.util.TokenizerFactory#create(java.io.Reader)}\n   * or {@link org.apache.lucene.analysis.util.TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new InitializationException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    }\n  }\n\n","sourceOld":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new InitializationException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d6d3ad4230a9094e97925f9395cf6db4729284d9":["39d25aba1848c644c6d22b943d3d66f661445ac7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"687e86054415a85f912c6eaa38f995038e5c1cd8":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"39d25aba1848c644c6d22b943d3d66f661445ac7":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["687e86054415a85f912c6eaa38f995038e5c1cd8"]},"commit2Childs":{"d6d3ad4230a9094e97925f9395cf6db4729284d9":["687e86054415a85f912c6eaa38f995038e5c1cd8"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["39d25aba1848c644c6d22b943d3d66f661445ac7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"687e86054415a85f912c6eaa38f995038e5c1cd8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"39d25aba1848c644c6d22b943d3d66f661445ac7":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}