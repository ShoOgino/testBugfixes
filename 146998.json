{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","commits":[{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.number);\n    if (entry.singleton) {\n      NumericDocValues values = getNumeric(field);\n      NumericEntry ne = numerics.get(field.number);\n      Bits docsWithField = getMissingBits(field.number, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(values, docsWithField);\n    } else {\n      final NumericDocValues values = getNumeric(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.number);\n        if (res == null) {\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          addresses.put(field.number, res);\n        }\n        addr = res;\n      }\n      if (values instanceof LongValues) {\n        // probably not the greatest codec choice for this situation, but we support it\n        final LongValues longValues = (LongValues) values;\n        return new SortedNumericDocValues() {\n          long startOffset;\n          long endOffset;\n          \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1L);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return longValues.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (int) (endOffset - startOffset);\n          }\n        };\n      } else {\n        return new SortedNumericDocValues() {\n          int startOffset;\n          int endOffset;\n        \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return values.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (endOffset - startOffset);\n          }\n        };\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.number);\n    if (entry.singleton) {\n      NumericDocValues values = getNumeric(field);\n      NumericEntry ne = numerics.get(field.number);\n      Bits docsWithField = getMissingBits(field.number, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(values, docsWithField);\n    } else {\n      final NumericDocValues values = getNumeric(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.number);\n        if (res == null) {\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          addresses.put(field.number, res);\n        }\n        addr = res;\n      }\n      if (values instanceof LongValues) {\n        // probably not the greatest codec choice for this situation, but we support it\n        final LongValues longValues = (LongValues) values;\n        return new SortedNumericDocValues() {\n          long startOffset;\n          long endOffset;\n          \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1L);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return longValues.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (int) (endOffset - startOffset);\n          }\n        };\n      } else {\n        return new SortedNumericDocValues() {\n          int startOffset;\n          int endOffset;\n        \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return values.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (endOffset - startOffset);\n          }\n        };\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.singleton) {\n      NumericDocValues values = getNumeric(field);\n      NumericEntry ne = numerics.get(field.name);\n      Bits docsWithField = getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(values, docsWithField);\n    } else {\n      final NumericDocValues values = getNumeric(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.name);\n        if (res == null) {\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          addresses.put(field.name, res);\n        }\n        addr = res;\n      }\n      if (values instanceof LongValues) {\n        // probably not the greatest codec choice for this situation, but we support it\n        final LongValues longValues = (LongValues) values;\n        return new SortedNumericDocValues() {\n          long startOffset;\n          long endOffset;\n          \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1L);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return longValues.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (int) (endOffset - startOffset);\n          }\n        };\n      } else {\n        return new SortedNumericDocValues() {\n          int startOffset;\n          int endOffset;\n        \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return values.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (endOffset - startOffset);\n          }\n        };\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.number);\n    if (entry.singleton) {\n      NumericDocValues values = getNumeric(field);\n      NumericEntry ne = numerics.get(field.number);\n      Bits docsWithField = getMissingBits(field.number, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(values, docsWithField);\n    } else {\n      final NumericDocValues values = getNumeric(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.number);\n        if (res == null) {\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          addresses.put(field.number, res);\n        }\n        addr = res;\n      }\n      if (values instanceof LongValues) {\n        // probably not the greatest codec choice for this situation, but we support it\n        final LongValues longValues = (LongValues) values;\n        return new SortedNumericDocValues() {\n          long startOffset;\n          long endOffset;\n          \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1L);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return longValues.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (int) (endOffset - startOffset);\n          }\n        };\n      } else {\n        return new SortedNumericDocValues() {\n          int startOffset;\n          int endOffset;\n        \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return values.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (endOffset - startOffset);\n          }\n        };\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.singleton) {\n      NumericDocValues values = getNumeric(field);\n      NumericEntry ne = numerics.get(field.name);\n      Bits docsWithField = getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(values, docsWithField);\n    } else {\n      final NumericDocValues values = getNumeric(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.name);\n        if (res == null) {\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          if (!merging) {\n            addresses.put(field.name, res);\n            ramBytesUsed.addAndGet(res.ramBytesUsed());\n          }\n        }\n        addr = res;\n      }\n      if (values instanceof LongValues) {\n        // probably not the greatest codec choice for this situation, but we support it\n        final LongValues longValues = (LongValues) values;\n        return new SortedNumericDocValues() {\n          long startOffset;\n          long endOffset;\n          \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1L);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return longValues.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (int) (endOffset - startOffset);\n          }\n        };\n      } else {\n        return new SortedNumericDocValues() {\n          int startOffset;\n          int endOffset;\n        \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return values.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (endOffset - startOffset);\n          }\n        };\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.singleton) {\n      NumericDocValues values = getNumeric(field);\n      NumericEntry ne = numerics.get(field.name);\n      Bits docsWithField = getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(values, docsWithField);\n    } else {\n      final NumericDocValues values = getNumeric(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.name);\n        if (res == null) {\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          addresses.put(field.name, res);\n        }\n        addr = res;\n      }\n      if (values instanceof LongValues) {\n        // probably not the greatest codec choice for this situation, but we support it\n        final LongValues longValues = (LongValues) values;\n        return new SortedNumericDocValues() {\n          long startOffset;\n          long endOffset;\n          \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1L);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return longValues.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (int) (endOffset - startOffset);\n          }\n        };\n      } else {\n        return new SortedNumericDocValues() {\n          int startOffset;\n          int endOffset;\n        \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return values.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (endOffset - startOffset);\n          }\n        };\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.singleton) {\n      NumericDocValues values = getNumeric(field);\n      NumericEntry ne = numerics.get(field.name);\n      Bits docsWithField = getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(values, docsWithField);\n    } else {\n      final NumericDocValues values = getNumeric(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.name);\n        if (res == null) {\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          if (!merging) {\n            addresses.put(field.name, res);\n            ramBytesUsed.addAndGet(res.ramBytesUsed());\n          }\n        }\n        addr = res;\n      }\n      if (values instanceof LongValues) {\n        // probably not the greatest codec choice for this situation, but we support it\n        final LongValues longValues = (LongValues) values;\n        return new SortedNumericDocValues() {\n          long startOffset;\n          long endOffset;\n          \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1L);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return longValues.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (int) (endOffset - startOffset);\n          }\n        };\n      } else {\n        return new SortedNumericDocValues() {\n          int startOffset;\n          int endOffset;\n        \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return values.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (endOffset - startOffset);\n          }\n        };\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.singleton) {\n      NumericDocValues values = getNumeric(field);\n      NumericEntry ne = numerics.get(field.name);\n      Bits docsWithField = getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(values, docsWithField);\n    } else {\n      final NumericDocValues values = getNumeric(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.name);\n        if (res == null) {\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          addresses.put(field.name, res);\n        }\n        addr = res;\n      }\n      if (values instanceof LongValues) {\n        // probably not the greatest codec choice for this situation, but we support it\n        final LongValues longValues = (LongValues) values;\n        return new SortedNumericDocValues() {\n          long startOffset;\n          long endOffset;\n          \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1L);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return longValues.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (int) (endOffset - startOffset);\n          }\n        };\n      } else {\n        return new SortedNumericDocValues() {\n          int startOffset;\n          int endOffset;\n        \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return values.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (endOffset - startOffset);\n          }\n        };\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e1de7ca6cb231a67006f9dc4842722d219629fb","date":1453654393,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.singleton) {\n      NumericDocValues values = getNumeric(field);\n      NumericEntry ne = numerics.get(field.name);\n      Bits docsWithField = getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(values, docsWithField);\n    } else {\n      final NumericDocValues values = getNumeric(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.name);\n        if (res == null) {\n          IndexInput data = this.data.clone();\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          if (!merging) {\n            addresses.put(field.name, res);\n            ramBytesUsed.addAndGet(res.ramBytesUsed());\n          }\n        }\n        addr = res;\n      }\n      if (values instanceof LongValues) {\n        // probably not the greatest codec choice for this situation, but we support it\n        final LongValues longValues = (LongValues) values;\n        return new SortedNumericDocValues() {\n          long startOffset;\n          long endOffset;\n          \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1L);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return longValues.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (int) (endOffset - startOffset);\n          }\n        };\n      } else {\n        return new SortedNumericDocValues() {\n          int startOffset;\n          int endOffset;\n        \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return values.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (endOffset - startOffset);\n          }\n        };\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.singleton) {\n      NumericDocValues values = getNumeric(field);\n      NumericEntry ne = numerics.get(field.name);\n      Bits docsWithField = getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(values, docsWithField);\n    } else {\n      final NumericDocValues values = getNumeric(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.name);\n        if (res == null) {\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          if (!merging) {\n            addresses.put(field.name, res);\n            ramBytesUsed.addAndGet(res.ramBytesUsed());\n          }\n        }\n        addr = res;\n      }\n      if (values instanceof LongValues) {\n        // probably not the greatest codec choice for this situation, but we support it\n        final LongValues longValues = (LongValues) values;\n        return new SortedNumericDocValues() {\n          long startOffset;\n          long endOffset;\n          \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1L);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return longValues.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (int) (endOffset - startOffset);\n          }\n        };\n      } else {\n        return new SortedNumericDocValues() {\n          int startOffset;\n          int endOffset;\n        \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return values.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (endOffset - startOffset);\n          }\n        };\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.singleton) {\n      LegacyNumericDocValues values = getNumericNonIterator(field);\n      NumericEntry ne = numerics.get(field.name);\n      Bits docsWithField = getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(new LegacyNumericDocValuesWrapper(docsWithField, values));\n    } else {\n      final LegacyNumericDocValues values = getNumericNonIterator(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.name);\n        if (res == null) {\n          IndexInput data = this.data.clone();\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          if (!merging) {\n            addresses.put(field.name, res);\n            ramBytesUsed.addAndGet(res.ramBytesUsed());\n          }\n        }\n        addr = res;\n      }\n      if (values instanceof LongValues) {\n        // probably not the greatest codec choice for this situation, but we support it\n        final LongValues longValues = (LongValues) values;\n        return new LegacySortedNumericDocValuesWrapper(new LegacySortedNumericDocValues() {\n          long startOffset;\n          long endOffset;\n          \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1L);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return longValues.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (int) (endOffset - startOffset);\n          }\n          }, maxDoc);\n      } else {\n        return new LegacySortedNumericDocValuesWrapper(new LegacySortedNumericDocValues() {\n          int startOffset;\n          int endOffset;\n        \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return values.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (endOffset - startOffset);\n          }\n          }, maxDoc);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.singleton) {\n      NumericDocValues values = getNumeric(field);\n      NumericEntry ne = numerics.get(field.name);\n      Bits docsWithField = getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(values, docsWithField);\n    } else {\n      final NumericDocValues values = getNumeric(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.name);\n        if (res == null) {\n          IndexInput data = this.data.clone();\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          if (!merging) {\n            addresses.put(field.name, res);\n            ramBytesUsed.addAndGet(res.ramBytesUsed());\n          }\n        }\n        addr = res;\n      }\n      if (values instanceof LongValues) {\n        // probably not the greatest codec choice for this situation, but we support it\n        final LongValues longValues = (LongValues) values;\n        return new SortedNumericDocValues() {\n          long startOffset;\n          long endOffset;\n          \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1L);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return longValues.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (int) (endOffset - startOffset);\n          }\n        };\n      } else {\n        return new SortedNumericDocValues() {\n          int startOffset;\n          int endOffset;\n        \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return values.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (endOffset - startOffset);\n          }\n        };\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.singleton) {\n      LegacyNumericDocValues values = getNumericNonIterator(field);\n      NumericEntry ne = numerics.get(field.name);\n      Bits docsWithField = getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(new LegacyNumericDocValuesWrapper(docsWithField, values));\n    } else {\n      final LegacyNumericDocValues values = getNumericNonIterator(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.name);\n        if (res == null) {\n          IndexInput data = this.data.clone();\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          if (!merging) {\n            addresses.put(field.name, res);\n            ramBytesUsed.addAndGet(res.ramBytesUsed());\n          }\n        }\n        addr = res;\n      }\n      if (values instanceof LongValues) {\n        // probably not the greatest codec choice for this situation, but we support it\n        final LongValues longValues = (LongValues) values;\n        return new LegacySortedNumericDocValuesWrapper(new LegacySortedNumericDocValues() {\n          long startOffset;\n          long endOffset;\n          \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1L);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return longValues.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (int) (endOffset - startOffset);\n          }\n          }, maxDoc);\n      } else {\n        return new LegacySortedNumericDocValuesWrapper(new LegacySortedNumericDocValues() {\n          int startOffset;\n          int endOffset;\n        \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return values.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (endOffset - startOffset);\n          }\n          }, maxDoc);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.singleton) {\n      NumericDocValues values = getNumeric(field);\n      NumericEntry ne = numerics.get(field.name);\n      Bits docsWithField = getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(values, docsWithField);\n    } else {\n      final NumericDocValues values = getNumeric(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.name);\n        if (res == null) {\n          IndexInput data = this.data.clone();\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          if (!merging) {\n            addresses.put(field.name, res);\n            ramBytesUsed.addAndGet(res.ramBytesUsed());\n          }\n        }\n        addr = res;\n      }\n      if (values instanceof LongValues) {\n        // probably not the greatest codec choice for this situation, but we support it\n        final LongValues longValues = (LongValues) values;\n        return new SortedNumericDocValues() {\n          long startOffset;\n          long endOffset;\n          \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1L);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return longValues.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (int) (endOffset - startOffset);\n          }\n        };\n      } else {\n        return new SortedNumericDocValues() {\n          int startOffset;\n          int endOffset;\n        \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return values.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (endOffset - startOffset);\n          }\n        };\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"340c74377cb6e5e48360c014b3fc076221746443","date":1476809457,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.singleton) {\n      LegacyNumericDocValues values = getNumericNonIterator(field);\n      NumericEntry ne = numerics.get(field.name);\n      Bits docsWithField = getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(new LegacyNumericDocValuesWrapper(docsWithField, values));\n    } else {\n      final LegacyNumericDocValues values = getNumericNonIterator(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.name);\n        if (res == null) {\n          IndexInput data = this.data.clone();\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          if (!merging) {\n            addresses.put(field.name, res);\n            ramBytesUsed.addAndGet(res.ramBytesUsed());\n          }\n        }\n        addr = res;\n      }\n      return new LegacySortedNumericDocValuesWrapper(new LegacySortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n      \n        @Override\n        public void setDocument(int doc) {\n          startOffset = (int) addr.get(doc);\n          endOffset = (int) addr.get(doc+1);\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return values.get(startOffset + index);\n        }\n\n        @Override\n        public int count() {\n          return (endOffset - startOffset);\n        }\n        }, maxDoc);\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.singleton) {\n      LegacyNumericDocValues values = getNumericNonIterator(field);\n      NumericEntry ne = numerics.get(field.name);\n      Bits docsWithField = getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(new LegacyNumericDocValuesWrapper(docsWithField, values));\n    } else {\n      final LegacyNumericDocValues values = getNumericNonIterator(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.name);\n        if (res == null) {\n          IndexInput data = this.data.clone();\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          if (!merging) {\n            addresses.put(field.name, res);\n            ramBytesUsed.addAndGet(res.ramBytesUsed());\n          }\n        }\n        addr = res;\n      }\n      if (values instanceof LongValues) {\n        // probably not the greatest codec choice for this situation, but we support it\n        final LongValues longValues = (LongValues) values;\n        return new LegacySortedNumericDocValuesWrapper(new LegacySortedNumericDocValues() {\n          long startOffset;\n          long endOffset;\n          \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1L);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return longValues.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (int) (endOffset - startOffset);\n          }\n          }, maxDoc);\n      } else {\n        return new LegacySortedNumericDocValuesWrapper(new LegacySortedNumericDocValues() {\n          int startOffset;\n          int endOffset;\n        \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return values.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (endOffset - startOffset);\n          }\n          }, maxDoc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad214b6ec1400de3c40b6c120126abe89d51a9ce","date":1476818670,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.singleton) {\n      LegacyNumericDocValues values = getNumericNonIterator(field);\n      NumericEntry ne = numerics.get(field.name);\n      Bits docsWithField = getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(new LegacyNumericDocValuesWrapper(docsWithField, values));\n    } else {\n      final LegacyNumericDocValues values = getNumericNonIterator(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.name);\n        if (res == null) {\n          IndexInput data = this.data.clone();\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          if (!merging) {\n            addresses.put(field.name, res);\n            ramBytesUsed.addAndGet(res.ramBytesUsed());\n          }\n        }\n        addr = res;\n      }\n      return new LegacySortedNumericDocValuesWrapper(new LegacySortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n      \n        @Override\n        public void setDocument(int doc) {\n          startOffset = (int) addr.get(doc);\n          endOffset = (int) addr.get(doc+1);\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return values.get(startOffset + index);\n        }\n\n        @Override\n        public int count() {\n          return (endOffset - startOffset);\n        }\n        }, maxDoc);\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.singleton) {\n      LegacyNumericDocValues values = getNumericNonIterator(field);\n      NumericEntry ne = numerics.get(field.name);\n      Bits docsWithField = getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(new LegacyNumericDocValuesWrapper(docsWithField, values));\n    } else {\n      final LegacyNumericDocValues values = getNumericNonIterator(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.name);\n        if (res == null) {\n          IndexInput data = this.data.clone();\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          if (!merging) {\n            addresses.put(field.name, res);\n            ramBytesUsed.addAndGet(res.ramBytesUsed());\n          }\n        }\n        addr = res;\n      }\n      if (values instanceof LongValues) {\n        // probably not the greatest codec choice for this situation, but we support it\n        final LongValues longValues = (LongValues) values;\n        return new LegacySortedNumericDocValuesWrapper(new LegacySortedNumericDocValues() {\n          long startOffset;\n          long endOffset;\n          \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1L);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return longValues.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (int) (endOffset - startOffset);\n          }\n          }, maxDoc);\n      } else {\n        return new LegacySortedNumericDocValuesWrapper(new LegacySortedNumericDocValues() {\n          int startOffset;\n          int endOffset;\n        \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return values.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (endOffset - startOffset);\n          }\n          }, maxDoc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.singleton) {\n      LegacyNumericDocValues values = getNumericNonIterator(field);\n      NumericEntry ne = numerics.get(field.name);\n      Bits docsWithField = getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(new LegacyNumericDocValuesWrapper(docsWithField, values));\n    } else {\n      final LegacyNumericDocValues values = getNumericNonIterator(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.name);\n        if (res == null) {\n          IndexInput data = this.data.clone();\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          if (!merging) {\n            addresses.put(field.name, res);\n            ramBytesUsed.addAndGet(res.ramBytesUsed());\n          }\n        }\n        addr = res;\n      }\n      return new LegacySortedNumericDocValuesWrapper(new LegacySortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n      \n        @Override\n        public void setDocument(int doc) {\n          startOffset = (int) addr.get(doc);\n          endOffset = (int) addr.get(doc+1);\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return values.get(startOffset + index);\n        }\n\n        @Override\n        public int count() {\n          return (endOffset - startOffset);\n        }\n        }, maxDoc);\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.singleton) {\n      NumericDocValues values = getNumeric(field);\n      NumericEntry ne = numerics.get(field.name);\n      Bits docsWithField = getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(values, docsWithField);\n    } else {\n      final NumericDocValues values = getNumeric(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.name);\n        if (res == null) {\n          IndexInput data = this.data.clone();\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          if (!merging) {\n            addresses.put(field.name, res);\n            ramBytesUsed.addAndGet(res.ramBytesUsed());\n          }\n        }\n        addr = res;\n      }\n      if (values instanceof LongValues) {\n        // probably not the greatest codec choice for this situation, but we support it\n        final LongValues longValues = (LongValues) values;\n        return new SortedNumericDocValues() {\n          long startOffset;\n          long endOffset;\n          \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1L);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return longValues.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (int) (endOffset - startOffset);\n          }\n        };\n      } else {\n        return new SortedNumericDocValues() {\n          int startOffset;\n          int endOffset;\n        \n          @Override\n          public void setDocument(int doc) {\n            startOffset = (int) addr.get(doc);\n            endOffset = (int) addr.get(doc+1);\n          }\n\n          @Override\n          public long valueAt(int index) {\n            return values.get(startOffset + index);\n          }\n\n          @Override\n          public int count() {\n            return (endOffset - startOffset);\n          }\n        };\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.singleton) {\n      LegacyNumericDocValues values = getNumericNonIterator(field);\n      NumericEntry ne = numerics.get(field.name);\n      Bits docsWithField = getMissingBits(field, ne.missingOffset, ne.missingBytes);\n      return DocValues.singleton(new LegacyNumericDocValuesWrapper(docsWithField, values));\n    } else {\n      final LegacyNumericDocValues values = getNumericNonIterator(field);\n      final MonotonicBlockPackedReader addr;\n      synchronized (this) {\n        MonotonicBlockPackedReader res = addresses.get(field.name);\n        if (res == null) {\n          IndexInput data = this.data.clone();\n          data.seek(entry.addressOffset);\n          res = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.valueCount, false);\n          if (!merging) {\n            addresses.put(field.name, res);\n            ramBytesUsed.addAndGet(res.ramBytesUsed());\n          }\n        }\n        addr = res;\n      }\n      return new LegacySortedNumericDocValuesWrapper(new LegacySortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n      \n        @Override\n        public void setDocument(int doc) {\n          startOffset = (int) addr.get(doc);\n          endOffset = (int) addr.get(doc+1);\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return values.get(startOffset + index);\n        }\n\n        @Override\n        public int count() {\n          return (endOffset - startOffset);\n        }\n        }, maxDoc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"340c74377cb6e5e48360c014b3fc076221746443":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3e1de7ca6cb231a67006f9dc4842722d219629fb","ad214b6ec1400de3c40b6c120126abe89d51a9ce"],"ad214b6ec1400de3c40b6c120126abe89d51a9ce":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","340c74377cb6e5e48360c014b3fc076221746443"],"bc8f80fee115148a0e4a0574560be06b494de821":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"24f89e8a6aac05753cde4c83d62a74356098200d":["ad214b6ec1400de3c40b6c120126abe89d51a9ce"],"9bb9a29a5e71a90295f175df8919802993142c9a":["0936055c0eed56be3e4ae5c9db5b0e355390736a","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["3e1de7ca6cb231a67006f9dc4842722d219629fb","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["3e1de7ca6cb231a67006f9dc4842722d219629fb"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"3e1de7ca6cb231a67006f9dc4842722d219629fb":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"340c74377cb6e5e48360c014b3fc076221746443":["ad214b6ec1400de3c40b6c120126abe89d51a9ce"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"ad214b6ec1400de3c40b6c120126abe89d51a9ce":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","24f89e8a6aac05753cde4c83d62a74356098200d"],"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9bb9a29a5e71a90295f175df8919802993142c9a":["3e1de7ca6cb231a67006f9dc4842722d219629fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["340c74377cb6e5e48360c014b3fc076221746443","ad214b6ec1400de3c40b6c120126abe89d51a9ce"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"3e1de7ca6cb231a67006f9dc4842722d219629fb":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","0936055c0eed56be3e4ae5c9db5b0e355390736a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}