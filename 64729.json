{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","sourceNew":"  @Test\n  public void testWithBinaryBean()throws Exception{\n    CommonsHttpSolrServer commonsHttpSolrServer = (CommonsHttpSolrServer) getSolrServer();\n    commonsHttpSolrServer.setRequestWriter(new BinaryRequestWriter());\n    commonsHttpSolrServer.deleteByQuery( \"*:*\" ); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.addBeans(new Iterator<Bean>() {\n\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      public void remove() {\n        //do nothing\n      }\n    });\n    commonsHttpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testWithBinaryBean()throws Exception{\n    CommonsHttpSolrServer commonsHttpSolrServer = (CommonsHttpSolrServer) getSolrServer();\n    commonsHttpSolrServer.setRequestWriter(new BinaryRequestWriter());\n    commonsHttpSolrServer.deleteByQuery( \"*:*\" ); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.addBeans(new Iterator<Bean>() {\n\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      public void remove() {\n        //do nothing\n      }\n    });\n    commonsHttpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","sourceNew":"  @Test\n  public void testWithBinaryBean()throws Exception{\n    CommonsHttpSolrServer commonsHttpSolrServer = (CommonsHttpSolrServer) getSolrServer();\n    commonsHttpSolrServer.setRequestWriter(new BinaryRequestWriter());\n    commonsHttpSolrServer.deleteByQuery( \"*:*\" ); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.addBeans(new Iterator<Bean>() {\n\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      public void remove() {\n        //do nothing\n      }\n    });\n    commonsHttpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testWithBinaryBean()throws Exception{\n    CommonsHttpSolrServer commonsHttpSolrServer = (CommonsHttpSolrServer) getSolrServer();\n    commonsHttpSolrServer.setRequestWriter(new BinaryRequestWriter());\n    commonsHttpSolrServer.deleteByQuery( \"*:*\" ); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.addBeans(new Iterator<Bean>() {\n\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      public void remove() {\n        //do nothing\n      }\n    });\n    commonsHttpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","sourceNew":"  @Test\n  public void testWithBinaryBean()throws Exception{\n    CommonsHttpSolrServer commonsHttpSolrServer = (CommonsHttpSolrServer) getSolrServer();\n    commonsHttpSolrServer.setRequestWriter(new BinaryRequestWriter());\n    commonsHttpSolrServer.deleteByQuery( \"*:*\" ); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.addBeans(new Iterator<Bean>() {\n\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      public void remove() {\n        //do nothing\n      }\n    });\n    commonsHttpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testWithBinaryBean()throws Exception{\n    CommonsHttpSolrServer commonsHttpSolrServer = (CommonsHttpSolrServer) getSolrServer();\n    commonsHttpSolrServer.setRequestWriter(new BinaryRequestWriter());\n    commonsHttpSolrServer.deleteByQuery( \"*:*\" ); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.addBeans(new Iterator<Bean>() {\n\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      public void remove() {\n        //do nothing\n      }\n    });\n    commonsHttpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","sourceNew":"  @Test\n  public void testWithBinaryBean()throws Exception{\n    HttpSolrServer commonsHttpSolrServer = (HttpSolrServer) getSolrServer();\n    commonsHttpSolrServer.setRequestWriter(new BinaryRequestWriter());\n    commonsHttpSolrServer.deleteByQuery( \"*:*\" ); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.addBeans(new Iterator<Bean>() {\n\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      public void remove() {\n        //do nothing\n      }\n    });\n    commonsHttpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testWithBinaryBean()throws Exception{\n    CommonsHttpSolrServer commonsHttpSolrServer = (CommonsHttpSolrServer) getSolrServer();\n    commonsHttpSolrServer.setRequestWriter(new BinaryRequestWriter());\n    commonsHttpSolrServer.deleteByQuery( \"*:*\" ); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.addBeans(new Iterator<Bean>() {\n\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      public void remove() {\n        //do nothing\n      }\n    });\n    commonsHttpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","sourceNew":"  @Test\n  public void testWithBinaryBean()throws Exception{\n    HttpSolrServer commonsHttpSolrServer = (HttpSolrServer) getSolrServer();\n    commonsHttpSolrServer.setRequestWriter(new BinaryRequestWriter());\n    commonsHttpSolrServer.deleteByQuery( \"*:*\" ); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.addBeans(new Iterator<Bean>() {\n\n      @Override\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      @Override\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      @Override\n      public void remove() {\n        //do nothing\n      }\n    });\n    commonsHttpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testWithBinaryBean()throws Exception{\n    HttpSolrServer commonsHttpSolrServer = (HttpSolrServer) getSolrServer();\n    commonsHttpSolrServer.setRequestWriter(new BinaryRequestWriter());\n    commonsHttpSolrServer.deleteByQuery( \"*:*\" ); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.addBeans(new Iterator<Bean>() {\n\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      public void remove() {\n        //do nothing\n      }\n    });\n    commonsHttpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","sourceNew":"  @Test\n  public void testWithBinaryBean()throws Exception{\n    HttpSolrServer commonsHttpSolrServer = (HttpSolrServer) getSolrServer();\n    commonsHttpSolrServer.setRequestWriter(new BinaryRequestWriter());\n    commonsHttpSolrServer.deleteByQuery( \"*:*\" ); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.addBeans(new Iterator<Bean>() {\n\n      @Override\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      @Override\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      @Override\n      public void remove() {\n        //do nothing\n      }\n    });\n    commonsHttpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testWithBinaryBean()throws Exception{\n    HttpSolrServer commonsHttpSolrServer = (HttpSolrServer) getSolrServer();\n    commonsHttpSolrServer.setRequestWriter(new BinaryRequestWriter());\n    commonsHttpSolrServer.deleteByQuery( \"*:*\" ); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.addBeans(new Iterator<Bean>() {\n\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      public void remove() {\n        //do nothing\n      }\n    });\n    commonsHttpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a018990398b6f88e3770ee15e67c5ec6b1bb0b23","date":1398614730,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","sourceNew":"  @Test\n  public void testWithBinaryBean()throws Exception{\n    HttpSolrServer httpSolrServer = (HttpSolrServer) getSolrServer();\n    httpSolrServer.setRequestWriter(new BinaryRequestWriter());\n    httpSolrServer.deleteByQuery( \"*:*\" ); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    httpSolrServer.addBeans(new Iterator<Bean>() {\n\n      @Override\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      @Override\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      @Override\n      public void remove() {\n        //do nothing\n      }\n    });\n    httpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = httpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testWithBinaryBean()throws Exception{\n    HttpSolrServer commonsHttpSolrServer = (HttpSolrServer) getSolrServer();\n    commonsHttpSolrServer.setRequestWriter(new BinaryRequestWriter());\n    commonsHttpSolrServer.deleteByQuery( \"*:*\" ); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.addBeans(new Iterator<Bean>() {\n\n      @Override\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      @Override\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      @Override\n      public void remove() {\n        //do nothing\n      }\n    });\n    commonsHttpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","sourceNew":"  @Test\n  public void testWithBinaryBean()throws Exception{\n    HttpSolrServer httpSolrServer = (HttpSolrServer) getSolrServer();\n    httpSolrServer.setRequestWriter(new BinaryRequestWriter());\n    httpSolrServer.deleteByQuery( \"*:*\" ); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    httpSolrServer.addBeans(new Iterator<Bean>() {\n\n      @Override\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      @Override\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      @Override\n      public void remove() {\n        //do nothing\n      }\n    });\n    httpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = httpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testWithBinaryBean()throws Exception{\n    HttpSolrServer commonsHttpSolrServer = (HttpSolrServer) getSolrServer();\n    commonsHttpSolrServer.setRequestWriter(new BinaryRequestWriter());\n    commonsHttpSolrServer.deleteByQuery( \"*:*\" ); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.addBeans(new Iterator<Bean>() {\n\n      @Override\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      @Override\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      @Override\n      public void remove() {\n        //do nothing\n      }\n    });\n    commonsHttpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestBatchUpdate#testWithBinaryBean().mjava","sourceNew":"  @Test\n  public void testWithBinaryBean()throws Exception{\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.setRequestWriter(new BinaryRequestWriter());\n    client.deleteByQuery(\"*:*\"); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    client.addBeans(new Iterator<Bean>() {\n\n      @Override\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      @Override\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      @Override\n      public void remove() {\n        //do nothing\n      }\n    });\n    client.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = client.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testWithBinaryBean()throws Exception{\n    HttpSolrServer httpSolrServer = (HttpSolrServer) getSolrServer();\n    httpSolrServer.setRequestWriter(new BinaryRequestWriter());\n    httpSolrServer.deleteByQuery( \"*:*\" ); // delete everything!\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    httpSolrServer.addBeans(new Iterator<Bean>() {\n\n      @Override\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      @Override\n      public Bean next() {\n        Bean bean = new Bean();\n        bean.id = \"\" + (++counter[0]);\n        bean.cat = \"foocat\";\n        return bean;\n      }\n\n      @Override\n      public void remove() {\n        //do nothing\n      }\n    });\n    httpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = httpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","7530de27b87b961b51f01bd1299b7004d46e8823"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["7530de27b87b961b51f01bd1299b7004d46e8823","a018990398b6f88e3770ee15e67c5ec6b1bb0b23"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["c26f00b574427b55127e869b935845554afde1fa"],"bafca15d8e408346a67f4282ad1143b88023893b":["a018990398b6f88e3770ee15e67c5ec6b1bb0b23"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"],"a018990398b6f88e3770ee15e67c5ec6b1bb0b23":["7530de27b87b961b51f01bd1299b7004d46e8823"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","a018990398b6f88e3770ee15e67c5ec6b1bb0b23"],"a018990398b6f88e3770ee15e67c5ec6b1bb0b23":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}