{"path":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map[Object,Object]).mjava","commits":[{"id":"92d79904976c4035739e5d1e0048d727d7cc5c16","date":1269105502,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map[Object,Object]).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map).mjava","sourceNew":"  /**\n   * writes a Map in the same format as a NamedList, using the\n   * stringification of the key Object when it's non-null.\n   *\n   * @param name\n   * @param map\n   * @throws IOException\n   * @see http://lucene.apache.org/solr/api/org/apache/solr/response/SolrQueryResponse.html#returnable_data\n   */\n  public void writeMap(String name, Map<Object,Object> map) throws IOException {\n    int sz = map.size();\n    startTag(\"lst\", name, sz<=0);\n    incLevel();\n    for (Map.Entry<Object,Object> entry : map.entrySet()) {\n      Object k = entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal( null == k ? null : k.toString(), v);\n    }\n    decLevel();\n    if (sz > 0) {\n      if (doIndent) indent();\n      writer.write(\"</lst>\");\n    }\n  }\n\n","sourceOld":"  //A map is currently represented as a named list\n  public void writeMap(String name, Map val) throws IOException {\n    Map map = val;\n    int sz = map.size();\n    startTag(\"lst\", name, sz<=0);\n    incLevel();\n    for (Map.Entry entry : (Set<Map.Entry>)map.entrySet()) {\n      // possible class-cast exception here...\n      String k = (String)entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal(k,v);\n    }\n    decLevel();\n    if (sz > 0) {\n      if (doIndent) indent();\n      writer.write(\"</lst>\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"131617a6350a994cc3a7260cad7488da397110c5","date":1286136892,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map[Object,Object]).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map[Object,Object]).mjava","sourceNew":"  /**\n   * writes a Map in the same format as a NamedList, using the\n   * stringification of the key Object when it's non-null.\n   *\n   * @param name\n   * @param map\n   * @throws IOException\n   * @see SolrQueryResponse Note on Returnable Data\n   */\n  public void writeMap(String name, Map<Object,Object> map) throws IOException {\n    int sz = map.size();\n    startTag(\"lst\", name, sz<=0);\n    incLevel();\n    for (Map.Entry<Object,Object> entry : map.entrySet()) {\n      Object k = entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal( null == k ? null : k.toString(), v);\n    }\n    decLevel();\n    if (sz > 0) {\n      if (doIndent) indent();\n      writer.write(\"</lst>\");\n    }\n  }\n\n","sourceOld":"  /**\n   * writes a Map in the same format as a NamedList, using the\n   * stringification of the key Object when it's non-null.\n   *\n   * @param name\n   * @param map\n   * @throws IOException\n   * @see http://lucene.apache.org/solr/api/org/apache/solr/response/SolrQueryResponse.html#returnable_data\n   */\n  public void writeMap(String name, Map<Object,Object> map) throws IOException {\n    int sz = map.size();\n    startTag(\"lst\", name, sz<=0);\n    incLevel();\n    for (Map.Entry<Object,Object> entry : map.entrySet()) {\n      Object k = entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal( null == k ? null : k.toString(), v);\n    }\n    decLevel();\n    if (sz > 0) {\n      if (doIndent) indent();\n      writer.write(\"</lst>\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map[Object,Object]).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map[Object,Object]).mjava","sourceNew":"  /**\n   * writes a Map in the same format as a NamedList, using the\n   * stringification of the key Object when it's non-null.\n   *\n   * @param name\n   * @param map\n   * @throws IOException\n   * @see SolrQueryResponse Note on Returnable Data\n   */\n  public void writeMap(String name, Map<Object,Object> map) throws IOException {\n    int sz = map.size();\n    startTag(\"lst\", name, sz<=0);\n    incLevel();\n    for (Map.Entry<Object,Object> entry : map.entrySet()) {\n      Object k = entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal( null == k ? null : k.toString(), v);\n    }\n    decLevel();\n    if (sz > 0) {\n      if (doIndent) indent();\n      writer.write(\"</lst>\");\n    }\n  }\n\n","sourceOld":"  /**\n   * writes a Map in the same format as a NamedList, using the\n   * stringification of the key Object when it's non-null.\n   *\n   * @param name\n   * @param map\n   * @throws IOException\n   * @see http://lucene.apache.org/solr/api/org/apache/solr/response/SolrQueryResponse.html#returnable_data\n   */\n  public void writeMap(String name, Map<Object,Object> map) throws IOException {\n    int sz = map.size();\n    startTag(\"lst\", name, sz<=0);\n    incLevel();\n    for (Map.Entry<Object,Object> entry : map.entrySet()) {\n      Object k = entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal( null == k ? null : k.toString(), v);\n    }\n    decLevel();\n    if (sz > 0) {\n      if (doIndent) indent();\n      writer.write(\"</lst>\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2","date":1293213108,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map[Object,Object]).mjava","sourceNew":null,"sourceOld":"  /**\n   * writes a Map in the same format as a NamedList, using the\n   * stringification of the key Object when it's non-null.\n   *\n   * @param name\n   * @param map\n   * @throws IOException\n   * @see SolrQueryResponse Note on Returnable Data\n   */\n  public void writeMap(String name, Map<Object,Object> map) throws IOException {\n    int sz = map.size();\n    startTag(\"lst\", name, sz<=0);\n    incLevel();\n    for (Map.Entry<Object,Object> entry : map.entrySet()) {\n      Object k = entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal( null == k ? null : k.toString(), v);\n    }\n    decLevel();\n    if (sz > 0) {\n      if (doIndent) indent();\n      writer.write(\"</lst>\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map[Object,Object]).mjava","sourceNew":null,"sourceOld":"  /**\n   * writes a Map in the same format as a NamedList, using the\n   * stringification of the key Object when it's non-null.\n   *\n   * @param name\n   * @param map\n   * @throws IOException\n   * @see SolrQueryResponse Note on Returnable Data\n   */\n  public void writeMap(String name, Map<Object,Object> map) throws IOException {\n    int sz = map.size();\n    startTag(\"lst\", name, sz<=0);\n    incLevel();\n    for (Map.Entry<Object,Object> entry : map.entrySet()) {\n      Object k = entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal( null == k ? null : k.toString(), v);\n    }\n    decLevel();\n    if (sz > 0) {\n      if (doIndent) indent();\n      writer.write(\"</lst>\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeMap(String,Map[Object,Object]).mjava","sourceNew":null,"sourceOld":"  /**\n   * writes a Map in the same format as a NamedList, using the\n   * stringification of the key Object when it's non-null.\n   *\n   * @param name\n   * @param map\n   * @throws IOException\n   * @see SolrQueryResponse Note on Returnable Data\n   */\n  public void writeMap(String name, Map<Object,Object> map) throws IOException {\n    int sz = map.size();\n    startTag(\"lst\", name, sz<=0);\n    incLevel();\n    for (Map.Entry<Object,Object> entry : map.entrySet()) {\n      Object k = entry.getKey();\n      Object v = entry.getValue();\n      // if (sz<indentThreshold) indent();\n      writeVal( null == k ? null : k.toString(), v);\n    }\n    decLevel();\n    if (sz > 0) {\n      if (doIndent) indent();\n      writer.write(\"</lst>\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["131617a6350a994cc3a7260cad7488da397110c5","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2":["131617a6350a994cc3a7260cad7488da397110c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"131617a6350a994cc3a7260cad7488da397110c5":["92d79904976c4035739e5d1e0048d727d7cc5c16"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["92d79904976c4035739e5d1e0048d727d7cc5c16","131617a6350a994cc3a7260cad7488da397110c5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"92d79904976c4035739e5d1e0048d727d7cc5c16":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92d79904976c4035739e5d1e0048d727d7cc5c16"],"131617a6350a994cc3a7260cad7488da397110c5":["70ad682703b8585f5d0a637efec044d57ec05efb","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"92d79904976c4035739e5d1e0048d727d7cc5c16":["131617a6350a994cc3a7260cad7488da397110c5","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}