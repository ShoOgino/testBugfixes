{"path":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","sourceNew":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","sourceOld":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","sourceNew":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","sourceOld":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","sourceNew":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","sourceOld":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae2cc9c0968d7f98c987726279617b99c53129ed","date":1319936406,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","sourceNew":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","sourceOld":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"76cc9b4f652f477b113ac4dcf7593e1414108fcc","date":1336271018,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","sourceNew":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init( args );\n    assertEquals(2,((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","sourceOld":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","bugFix":["ccea5bb6cc45a411fd349ce24ab5a37b343f1d7f"],"bugIntro":["2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","sourceNew":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init( args );\n    assertEquals(2,((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","sourceOld":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init( args );\n    assertEquals(2,((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","sourceNew":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init( args );\n    assertEquals(2,((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","sourceOld":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init( args );\n    assertEquals(2,((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","sourceNew":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init( args );\n    assertEquals(2,((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","sourceOld":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init( args );\n    assertEquals(2,((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","sourceNew":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init( args );\n    assertEquals(2,((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","sourceOld":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init( args );\n    assertEquals(2,((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["76cc9b4f652f477b113ac4dcf7593e1414108fcc","5a1a22b1ad88b436661458df567f3fdb446392a4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae2cc9c0968d7f98c987726279617b99c53129ed":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["76cc9b4f652f477b113ac4dcf7593e1414108fcc","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"76cc9b4f652f477b113ac4dcf7593e1414108fcc":["ae2cc9c0968d7f98c987726279617b99c53129ed"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["76cc9b4f652f477b113ac4dcf7593e1414108fcc","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["76cc9b4f652f477b113ac4dcf7593e1414108fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"ae2cc9c0968d7f98c987726279617b99c53129ed":["76cc9b4f652f477b113ac4dcf7593e1414108fcc"],"c26f00b574427b55127e869b935845554afde1fa":["ae2cc9c0968d7f98c987726279617b99c53129ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"76cc9b4f652f477b113ac4dcf7593e1414108fcc":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}