{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#setIfNewer(Aliases).mjava","commits":[{"id":"215e40821821b2df2e69355e208532c05ef095a5","date":1510858642,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#setIfNewer(Aliases).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Update the internal aliases reference with a new one, provided that its ZK version has increased.\n     *\n     * @param newAliases the potentially newer version of Aliases\n     */\n    private boolean setIfNewer(Aliases newAliases) {\n      synchronized (this) {\n        int cmp = Integer.compare(aliases.getZNodeVersion(), newAliases.getZNodeVersion());\n        if (cmp < 0) {\n          LOG.debug(\"Aliases: cmp={}, new definition is: {}\", cmp, newAliases);\n          aliases = newAliases;\n          this.notifyAll();\n          return true;\n        } else {\n          LOG.debug(\"Aliases: cmp={}, not overwriting ZK version.\", cmp);\n          assert cmp != 0 || Arrays.equals(aliases.toJSON(), newAliases.toJSON()) : aliases + \" != \" + newAliases;\n          return false;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3de3780a0f74036499aad4df2a73159b14fbad2","date":1529604012,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#setIfNewer(Aliases).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#setIfNewer(Aliases).mjava","sourceNew":"    /**\n     * Update the internal aliases reference with a new one, provided that its ZK version has increased.\n     *\n     * @param newAliases the potentially newer version of Aliases\n     */\n    private boolean setIfNewer(Aliases newAliases) {\n      assert newAliases.getZNodeVersion() >= 0;\n      synchronized (this) {\n        int cmp = Integer.compare(aliases.getZNodeVersion(), newAliases.getZNodeVersion());\n        if (cmp < 0) {\n          LOG.debug(\"Aliases: cmp={}, new definition is: {}\", cmp, newAliases);\n          aliases = newAliases;\n          this.notifyAll();\n          return true;\n        } else {\n          LOG.debug(\"Aliases: cmp={}, not overwriting ZK version.\", cmp);\n          assert cmp != 0 || Arrays.equals(aliases.toJSON(), newAliases.toJSON()) : aliases + \" != \" + newAliases;\n          return false;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Update the internal aliases reference with a new one, provided that its ZK version has increased.\n     *\n     * @param newAliases the potentially newer version of Aliases\n     */\n    private boolean setIfNewer(Aliases newAliases) {\n      synchronized (this) {\n        int cmp = Integer.compare(aliases.getZNodeVersion(), newAliases.getZNodeVersion());\n        if (cmp < 0) {\n          LOG.debug(\"Aliases: cmp={}, new definition is: {}\", cmp, newAliases);\n          aliases = newAliases;\n          this.notifyAll();\n          return true;\n        } else {\n          LOG.debug(\"Aliases: cmp={}, not overwriting ZK version.\", cmp);\n          assert cmp != 0 || Arrays.equals(aliases.toJSON(), newAliases.toJSON()) : aliases + \" != \" + newAliases;\n          return false;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe736fc2dca4bb2af36fa478366c29db9e31a1f9","date":1529608800,"type":3,"author":"Chris Hostetter","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#setIfNewer(Aliases).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#setIfNewer(Aliases).mjava","sourceNew":"    /**\n     * Update the internal aliases reference with a new one, provided that its ZK version has increased.\n     *\n     * @param newAliases the potentially newer version of Aliases\n     */\n    private boolean setIfNewer(Aliases newAliases) {\n      assert newAliases.getZNodeVersion() >= 0;\n      synchronized (this) {\n        int cmp = Integer.compare(aliases.getZNodeVersion(), newAliases.getZNodeVersion());\n        if (cmp < 0) {\n          LOG.debug(\"Aliases: cmp={}, new definition is: {}\", cmp, newAliases);\n          aliases = newAliases;\n          this.notifyAll();\n          return true;\n        } else {\n          LOG.debug(\"Aliases: cmp={}, not overwriting ZK version.\", cmp);\n          assert cmp != 0 || Arrays.equals(aliases.toJSON(), newAliases.toJSON()) : aliases + \" != \" + newAliases;\n          return false;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Update the internal aliases reference with a new one, provided that its ZK version has increased.\n     *\n     * @param newAliases the potentially newer version of Aliases\n     */\n    private boolean setIfNewer(Aliases newAliases) {\n      synchronized (this) {\n        int cmp = Integer.compare(aliases.getZNodeVersion(), newAliases.getZNodeVersion());\n        if (cmp < 0) {\n          LOG.debug(\"Aliases: cmp={}, new definition is: {}\", cmp, newAliases);\n          aliases = newAliases;\n          this.notifyAll();\n          return true;\n        } else {\n          LOG.debug(\"Aliases: cmp={}, not overwriting ZK version.\", cmp);\n          assert cmp != 0 || Arrays.equals(aliases.toJSON(), newAliases.toJSON()) : aliases + \" != \" + newAliases;\n          return false;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#setIfNewer(Aliases).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#setIfNewer(Aliases).mjava","sourceNew":"    /**\n     * Update the internal aliases reference with a new one, provided that its ZK version has increased.\n     *\n     * @param newAliases the potentially newer version of Aliases\n     */\n    private boolean setIfNewer(Aliases newAliases) {\n      assert newAliases.getZNodeVersion() >= 0;\n      synchronized (this) {\n        int cmp = Integer.compare(aliases.getZNodeVersion(), newAliases.getZNodeVersion());\n        if (cmp < 0) {\n          LOG.debug(\"Aliases: cmp={}, new definition is: {}\", cmp, newAliases);\n          aliases = newAliases;\n          this.notifyAll();\n          return true;\n        } else {\n          LOG.debug(\"Aliases: cmp={}, not overwriting ZK version.\", cmp);\n          assert cmp != 0 || Arrays.equals(aliases.toJSON(), newAliases.toJSON()) : aliases + \" != \" + newAliases;\n          return false;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Update the internal aliases reference with a new one, provided that its ZK version has increased.\n     *\n     * @param newAliases the potentially newer version of Aliases\n     */\n    private boolean setIfNewer(Aliases newAliases) {\n      synchronized (this) {\n        int cmp = Integer.compare(aliases.getZNodeVersion(), newAliases.getZNodeVersion());\n        if (cmp < 0) {\n          LOG.debug(\"Aliases: cmp={}, new definition is: {}\", cmp, newAliases);\n          aliases = newAliases;\n          this.notifyAll();\n          return true;\n        } else {\n          LOG.debug(\"Aliases: cmp={}, not overwriting ZK version.\", cmp);\n          assert cmp != 0 || Arrays.equals(aliases.toJSON(), newAliases.toJSON()) : aliases + \" != \" + newAliases;\n          return false;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#setIfNewer(Aliases).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#setIfNewer(Aliases).mjava","sourceNew":"    /**\n     * Update the internal aliases reference with a new one, provided that its ZK version has increased.\n     *\n     * @param newAliases the potentially newer version of Aliases\n     */\n    private boolean setIfNewer(Aliases newAliases) {\n      assert newAliases.getZNodeVersion() >= 0;\n      synchronized (this) {\n        int cmp = Integer.compare(aliases.getZNodeVersion(), newAliases.getZNodeVersion());\n        if (cmp < 0) {\n          LOG.debug(\"Aliases: cmp={}, new definition is: {}\", cmp, newAliases);\n          aliases = newAliases;\n          this.notifyAll();\n          return true;\n        } else {\n          LOG.debug(\"Aliases: cmp={}, not overwriting ZK version.\", cmp);\n          assert cmp != 0 || Arrays.equals(aliases.toJSON(), newAliases.toJSON()) : aliases + \" != \" + newAliases;\n          return false;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Update the internal aliases reference with a new one, provided that its ZK version has increased.\n     *\n     * @param newAliases the potentially newer version of Aliases\n     */\n    private boolean setIfNewer(Aliases newAliases) {\n      synchronized (this) {\n        int cmp = Integer.compare(aliases.getZNodeVersion(), newAliases.getZNodeVersion());\n        if (cmp < 0) {\n          LOG.debug(\"Aliases: cmp={}, new definition is: {}\", cmp, newAliases);\n          aliases = newAliases;\n          this.notifyAll();\n          return true;\n        } else {\n          LOG.debug(\"Aliases: cmp={}, not overwriting ZK version.\", cmp);\n          assert cmp != 0 || Arrays.equals(aliases.toJSON(), newAliases.toJSON()) : aliases + \" != \" + newAliases;\n          return false;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#setIfNewer(Aliases).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#setIfNewer(Aliases).mjava","sourceNew":"    /**\n     * Update the internal aliases reference with a new one, provided that its ZK version has increased.\n     *\n     * @param newAliases the potentially newer version of Aliases\n     */\n    private boolean setIfNewer(Aliases newAliases) {\n      assert newAliases.getZNodeVersion() >= 0;\n      synchronized (this) {\n        int cmp = Integer.compare(aliases.getZNodeVersion(), newAliases.getZNodeVersion());\n        if (cmp < 0) {\n          log.debug(\"Aliases: cmp={}, new definition is: {}\", cmp, newAliases);\n          aliases = newAliases;\n          this.notifyAll();\n          return true;\n        } else {\n          log.debug(\"Aliases: cmp={}, not overwriting ZK version.\", cmp);\n          assert cmp != 0 || Arrays.equals(aliases.toJSON(), newAliases.toJSON()) : aliases + \" != \" + newAliases;\n          return false;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Update the internal aliases reference with a new one, provided that its ZK version has increased.\n     *\n     * @param newAliases the potentially newer version of Aliases\n     */\n    private boolean setIfNewer(Aliases newAliases) {\n      assert newAliases.getZNodeVersion() >= 0;\n      synchronized (this) {\n        int cmp = Integer.compare(aliases.getZNodeVersion(), newAliases.getZNodeVersion());\n        if (cmp < 0) {\n          LOG.debug(\"Aliases: cmp={}, new definition is: {}\", cmp, newAliases);\n          aliases = newAliases;\n          this.notifyAll();\n          return true;\n        } else {\n          LOG.debug(\"Aliases: cmp={}, not overwriting ZK version.\", cmp);\n          assert cmp != 0 || Arrays.equals(aliases.toJSON(), newAliases.toJSON()) : aliases + \" != \" + newAliases;\n          return false;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc21266829f9cffb210032f5808ce3a630780ab3","date":1560248034,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#setIfNewer(Aliases).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.AliasesManager#setIfNewer(Aliases).mjava","sourceNew":"    /**\n     * Update the internal aliases reference with a new one, provided that its ZK version has increased.\n     *\n     * @param newAliases the potentially newer version of Aliases\n     * @return true if aliases have been updated to a new version, false otherwise\n     */\n    private boolean setIfNewer(Aliases newAliases) {\n      assert newAliases.getZNodeVersion() >= 0;\n      synchronized (this) {\n        int cmp = Integer.compare(aliases.getZNodeVersion(), newAliases.getZNodeVersion());\n        if (cmp < 0) {\n          log.debug(\"Aliases: cmp={}, new definition is: {}\", cmp, newAliases);\n          aliases = newAliases;\n          this.notifyAll();\n          return true;\n        } else {\n          log.debug(\"Aliases: cmp={}, not overwriting ZK version.\", cmp);\n          assert cmp != 0 || Arrays.equals(aliases.toJSON(), newAliases.toJSON()) : aliases + \" != \" + newAliases;\n          return false;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Update the internal aliases reference with a new one, provided that its ZK version has increased.\n     *\n     * @param newAliases the potentially newer version of Aliases\n     */\n    private boolean setIfNewer(Aliases newAliases) {\n      assert newAliases.getZNodeVersion() >= 0;\n      synchronized (this) {\n        int cmp = Integer.compare(aliases.getZNodeVersion(), newAliases.getZNodeVersion());\n        if (cmp < 0) {\n          log.debug(\"Aliases: cmp={}, new definition is: {}\", cmp, newAliases);\n          aliases = newAliases;\n          this.notifyAll();\n          return true;\n        } else {\n          log.debug(\"Aliases: cmp={}, not overwriting ZK version.\", cmp);\n          assert cmp != 0 || Arrays.equals(aliases.toJSON(), newAliases.toJSON()) : aliases + \" != \" + newAliases;\n          return false;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe736fc2dca4bb2af36fa478366c29db9e31a1f9":["215e40821821b2df2e69355e208532c05ef095a5","d3de3780a0f74036499aad4df2a73159b14fbad2"],"d3de3780a0f74036499aad4df2a73159b14fbad2":["215e40821821b2df2e69355e208532c05ef095a5"],"215e40821821b2df2e69355e208532c05ef095a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["215e40821821b2df2e69355e208532c05ef095a5","fe736fc2dca4bb2af36fa478366c29db9e31a1f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fc21266829f9cffb210032f5808ce3a630780ab3":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc21266829f9cffb210032f5808ce3a630780ab3"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["fe736fc2dca4bb2af36fa478366c29db9e31a1f9"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["215e40821821b2df2e69355e208532c05ef095a5","fe736fc2dca4bb2af36fa478366c29db9e31a1f9"]},"commit2Childs":{"fe736fc2dca4bb2af36fa478366c29db9e31a1f9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"d3de3780a0f74036499aad4df2a73159b14fbad2":["fe736fc2dca4bb2af36fa478366c29db9e31a1f9"],"215e40821821b2df2e69355e208532c05ef095a5":["fe736fc2dca4bb2af36fa478366c29db9e31a1f9","d3de3780a0f74036499aad4df2a73159b14fbad2","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["215e40821821b2df2e69355e208532c05ef095a5"],"fc21266829f9cffb210032f5808ce3a630780ab3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["fc21266829f9cffb210032f5808ce3a630780ab3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}