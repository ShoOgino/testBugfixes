{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testScoreNodesFacetStream().mjava","commits":[{"id":"cda901ebf604e61588e415a44a713882e11dac43","date":1474654111,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testScoreNodesFacetStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testScoreNodesFacetStream() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_ss\", \"product1\", \"product_ss\", \"product3\", \"product_ss\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_ss\", \"product1\", \"product_ss\", \"product6\", \"product_ss\", \"product7\", \"price_f\", \"1\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_ss\", \"product4\",  \"product_ss\",\"product3\", \"product_ss\",\"product1\", \"price_f\", \"1\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_ss\", \"product4\", \"product_ss\", \"product3\", \"product_ss\", \"product1\",\"price_f\", \"1\")\n        .add(id, \"12\", \"basket_s\", \"basket5\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"13\", \"basket_s\", \"basket6\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"14\", \"basket_s\", \"basket7\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"15\", \"basket_s\", \"basket4\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    TupleStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"sort(by=\\\"nodeScore desc\\\",scoreNodes(facet(collection1, q=\\\"product_ss:product3\\\", buckets=\\\"product_ss\\\", bucketSorts=\\\"count(*) desc\\\", bucketSizeLimit=100, count(*))))\";\n\n    stream = factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    //The highest scoring tuple will be the product searched for.\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getString(\"node\").equals(\"product3\"));\n    assert(tuple.getLong(\"docFreq\") == 3);\n    assert(tuple.getLong(\"count(*)\") == 3);\n\n    Tuple tuple0 = tuples.get(1);\n    assert(tuple0.getString(\"node\").equals(\"product4\"));\n    assert(tuple0.getLong(\"docFreq\") == 2);\n    assert(tuple0.getLong(\"count(*)\") == 2);\n\n    Tuple tuple1 = tuples.get(2);\n    assert(tuple1.getString(\"node\").equals(\"product1\"));\n    assert(tuple1.getLong(\"docFreq\") == 8);\n    assert(tuple1.getLong(\"count(*)\") == 3);\n\n    Tuple tuple2 = tuples.get(3);\n    assert(tuple2.getString(\"node\").equals(\"product5\"));\n    assert(tuple2.getLong(\"docFreq\") == 1);\n    assert(tuple2.getLong(\"count(*)\") == 1);\n\n\n    cache.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testScoreNodesFacetStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testScoreNodesFacetStream() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_ss\", \"product1\", \"product_ss\", \"product3\", \"product_ss\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_ss\", \"product1\", \"product_ss\", \"product6\", \"product_ss\", \"product7\", \"price_f\", \"1\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_ss\", \"product4\",  \"product_ss\",\"product3\", \"product_ss\",\"product1\", \"price_f\", \"1\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_ss\", \"product4\", \"product_ss\", \"product3\", \"product_ss\", \"product1\",\"price_f\", \"1\")\n        .add(id, \"12\", \"basket_s\", \"basket5\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"13\", \"basket_s\", \"basket6\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"14\", \"basket_s\", \"basket7\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"15\", \"basket_s\", \"basket4\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    TupleStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"sort(by=\\\"nodeScore desc\\\",scoreNodes(facet(collection1, q=\\\"product_ss:product3\\\", buckets=\\\"product_ss\\\", bucketSorts=\\\"count(*) desc\\\", bucketSizeLimit=100, count(*))))\";\n\n    stream = factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    //The highest scoring tuple will be the product searched for.\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getString(\"node\").equals(\"product3\"));\n    assert(tuple.getLong(\"docFreq\") == 3);\n    assert(tuple.getLong(\"count(*)\") == 3);\n\n    Tuple tuple0 = tuples.get(1);\n    assert(tuple0.getString(\"node\").equals(\"product4\"));\n    assert(tuple0.getLong(\"docFreq\") == 2);\n    assert(tuple0.getLong(\"count(*)\") == 2);\n\n    Tuple tuple1 = tuples.get(2);\n    assert(tuple1.getString(\"node\").equals(\"product1\"));\n    assert(tuple1.getLong(\"docFreq\") == 8);\n    assert(tuple1.getLong(\"count(*)\") == 3);\n\n    Tuple tuple2 = tuples.get(3);\n    assert(tuple2.getString(\"node\").equals(\"product5\"));\n    assert(tuple2.getLong(\"docFreq\") == 1);\n    assert(tuple2.getLong(\"count(*)\") == 1);\n\n\n    cache.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testScoreNodesFacetStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testScoreNodesFacetStream() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_ss\", \"product1\", \"product_ss\", \"product3\", \"product_ss\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_ss\", \"product1\", \"product_ss\", \"product6\", \"product_ss\", \"product7\", \"price_f\", \"1\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_ss\", \"product4\",  \"product_ss\",\"product3\", \"product_ss\",\"product1\", \"price_f\", \"1\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_ss\", \"product4\", \"product_ss\", \"product3\", \"product_ss\", \"product1\",\"price_f\", \"1\")\n        .add(id, \"12\", \"basket_s\", \"basket5\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"13\", \"basket_s\", \"basket6\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"14\", \"basket_s\", \"basket7\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"15\", \"basket_s\", \"basket4\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    TupleStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"sort(by=\\\"nodeScore desc\\\",scoreNodes(facet(collection1, q=\\\"product_ss:product3\\\", buckets=\\\"product_ss\\\", bucketSorts=\\\"count(*) desc\\\", bucketSizeLimit=100, count(*))))\";\n\n    stream = factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    //The highest scoring tuple will be the product searched for.\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getString(\"node\").equals(\"product3\"));\n    assert(tuple.getLong(\"docFreq\") == 3);\n    assert(tuple.getLong(\"count(*)\") == 3);\n\n    Tuple tuple0 = tuples.get(1);\n    assert(tuple0.getString(\"node\").equals(\"product4\"));\n    assert(tuple0.getLong(\"docFreq\") == 2);\n    assert(tuple0.getLong(\"count(*)\") == 2);\n\n    Tuple tuple1 = tuples.get(2);\n    assert(tuple1.getString(\"node\").equals(\"product1\"));\n    assert(tuple1.getLong(\"docFreq\") == 8);\n    assert(tuple1.getLong(\"count(*)\") == 3);\n\n    Tuple tuple2 = tuples.get(3);\n    assert(tuple2.getString(\"node\").equals(\"product5\"));\n    assert(tuple2.getLong(\"docFreq\") == 1);\n    assert(tuple2.getLong(\"count(*)\") == 1);\n\n\n    cache.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0083b99694eda9623bc01747fd55949a79af54fa","date":1488215006,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testScoreNodesFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testScoreNodesFacetStream().mjava","sourceNew":"  @Test\n  public void testScoreNodesFacetStream() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_ss\", \"product1\", \"product_ss\", \"product3\", \"product_ss\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_ss\", \"product1\", \"product_ss\", \"product6\", \"product_ss\", \"product7\", \"price_f\", \"1\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_ss\", \"product4\",  \"product_ss\",\"product3\", \"product_ss\",\"product1\", \"price_f\", \"1\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_ss\", \"product4\", \"product_ss\", \"product3\", \"product_ss\", \"product1\",\"price_f\", \"1\")\n        //.add(id, \"12\", \"basket_s\", \"basket5\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        //.add(id, \"13\", \"basket_s\", \"basket6\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        //.add(id, \"14\", \"basket_s\", \"basket7\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        //.add(id, \"15\", \"basket_s\", \"basket4\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    TupleStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"sort(by=\\\"nodeScore desc\\\",scoreNodes(facet(collection1, q=\\\"product_ss:product3\\\", buckets=\\\"product_ss\\\", bucketSorts=\\\"count(*) desc\\\", bucketSizeLimit=100, count(*))))\";\n\n    stream = factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getString(\"node\").equals(\"product3\"));\n    assert(tuple.getLong(\"docFreq\") == 3);\n    assert(tuple.getLong(\"count(*)\") == 3);\n\n    Tuple tuple0 = tuples.get(1);\n    assert(tuple0.getString(\"node\").equals(\"product4\"));\n    assert(tuple0.getLong(\"docFreq\") == 2);\n    assert(tuple0.getLong(\"count(*)\") == 2);\n\n    Tuple tuple1 = tuples.get(2);\n    assert(tuple1.getString(\"node\").equals(\"product1\"));\n    assert(tuple1.getLong(\"docFreq\") == 4);\n    assert(tuple1.getLong(\"count(*)\") == 3);\n\n    Tuple tuple2 = tuples.get(3);\n    assert(tuple2.getString(\"node\").equals(\"product5\"));\n    assert(tuple2.getLong(\"docFreq\") == 1);\n    assert(tuple2.getLong(\"count(*)\") == 1);\n\n\n    cache.close();\n  }\n\n","sourceOld":"  @Test\n  public void testScoreNodesFacetStream() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_ss\", \"product1\", \"product_ss\", \"product3\", \"product_ss\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_ss\", \"product1\", \"product_ss\", \"product6\", \"product_ss\", \"product7\", \"price_f\", \"1\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_ss\", \"product4\",  \"product_ss\",\"product3\", \"product_ss\",\"product1\", \"price_f\", \"1\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_ss\", \"product4\", \"product_ss\", \"product3\", \"product_ss\", \"product1\",\"price_f\", \"1\")\n        .add(id, \"12\", \"basket_s\", \"basket5\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"13\", \"basket_s\", \"basket6\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"14\", \"basket_s\", \"basket7\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"15\", \"basket_s\", \"basket4\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    TupleStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"sort(by=\\\"nodeScore desc\\\",scoreNodes(facet(collection1, q=\\\"product_ss:product3\\\", buckets=\\\"product_ss\\\", bucketSorts=\\\"count(*) desc\\\", bucketSizeLimit=100, count(*))))\";\n\n    stream = factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    //The highest scoring tuple will be the product searched for.\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getString(\"node\").equals(\"product3\"));\n    assert(tuple.getLong(\"docFreq\") == 3);\n    assert(tuple.getLong(\"count(*)\") == 3);\n\n    Tuple tuple0 = tuples.get(1);\n    assert(tuple0.getString(\"node\").equals(\"product4\"));\n    assert(tuple0.getLong(\"docFreq\") == 2);\n    assert(tuple0.getLong(\"count(*)\") == 2);\n\n    Tuple tuple1 = tuples.get(2);\n    assert(tuple1.getString(\"node\").equals(\"product1\"));\n    assert(tuple1.getLong(\"docFreq\") == 8);\n    assert(tuple1.getLong(\"count(*)\") == 3);\n\n    Tuple tuple2 = tuples.get(3);\n    assert(tuple2.getString(\"node\").equals(\"product5\"));\n    assert(tuple2.getLong(\"docFreq\") == 1);\n    assert(tuple2.getLong(\"count(*)\") == 1);\n\n\n    cache.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cda901ebf604e61588e415a44a713882e11dac43":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cda901ebf604e61588e415a44a713882e11dac43"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0083b99694eda9623bc01747fd55949a79af54fa"],"0083b99694eda9623bc01747fd55949a79af54fa":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"cda901ebf604e61588e415a44a713882e11dac43":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cda901ebf604e61588e415a44a713882e11dac43","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0083b99694eda9623bc01747fd55949a79af54fa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0083b99694eda9623bc01747fd55949a79af54fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}