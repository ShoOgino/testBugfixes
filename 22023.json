{"path":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,RAMDirectory,Analyzer).mjava","commits":[{"id":"aedcfb5ebceafe4a0285436fa86269ed6c926442","date":1271441603,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,RAMDirectory,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, RAMDirectory ramdir, Analyzer analyzer) throws Exception {\n    IndexSearcher ram = new IndexSearcher(ramdir);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,MockRAMDirectory,Analyzer).mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,RAMDirectory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, MockRAMDirectory ramdir, Analyzer analyzer) throws Exception {\n    IndexSearcher ram = new IndexSearcher(ramdir);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, RAMDirectory ramdir, Analyzer analyzer) throws Exception {\n    IndexSearcher ram = new IndexSearcher(ramdir);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,RAMDirectory,Analyzer).mjava","sourceNew":null,"sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, RAMDirectory ramdir, Analyzer analyzer) throws Exception {\n    IndexSearcher ram = new IndexSearcher(ramdir);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["aedcfb5ebceafe4a0285436fa86269ed6c926442"],"aedcfb5ebceafe4a0285436fa86269ed6c926442":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["aedcfb5ebceafe4a0285436fa86269ed6c926442","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"]},"commit2Childs":{"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aedcfb5ebceafe4a0285436fa86269ed6c926442":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aedcfb5ebceafe4a0285436fa86269ed6c926442"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}