{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-IndexDocument]).mjava","commits":[{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-IndexDocument]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends IndexDocument> docs) throws IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"247f702b944ff0da1ba56a06fc13bd3eeefd2c01","date":1345138682,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-IndexDocument]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-IndexDocument]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(IndexDocument)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends IndexDocument> docs) throws IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends IndexDocument> docs) throws IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-IndexDocument]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(IndexDocument)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends IndexDocument> docs) throws IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"949847c0040cd70a68222d526cb0da7bf6cbb3c2","date":1410997182,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-IndexDocument]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-IndexDocument]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(IndexDocument)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends IndexDocument> docs) throws IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(IndexDocument)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends IndexDocument> docs) throws IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0","date":1422781929,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-IndexDocument]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-IndexDocument]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(IndexDocument)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends IndexDocument> docs) throws IOException {\n    updateDocuments(null, docs);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(IndexDocument)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends IndexDocument> docs) throws IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-IndexDocument]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    updateDocuments(null, docs);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(IndexDocument)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends IndexDocument> docs) throws IOException {\n    updateDocuments(null, docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","247f702b944ff0da1ba56a06fc13bd3eeefd2c01"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"247f702b944ff0da1ba56a06fc13bd3eeefd2c01":["33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["949847c0040cd70a68222d526cb0da7bf6cbb3c2"]},"commit2Childs":{"1d028314cced5858683a1bb4741423d0f934257b":["949847c0040cd70a68222d526cb0da7bf6cbb3c2"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["247f702b944ff0da1ba56a06fc13bd3eeefd2c01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d028314cced5858683a1bb4741423d0f934257b","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"247f702b944ff0da1ba56a06fc13bd3eeefd2c01":["1d028314cced5858683a1bb4741423d0f934257b"],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}