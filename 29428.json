{"path":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#decodeMetaData().mjava","commits":[{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = 1;\n      state.totalTermFreq = 1;\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = 1;\n      state.totalTermFreq = 1;\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#decodeMetaData().mjava","pathOld":"/dev/null","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = 1;\n      state.totalTermFreq = 1;\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = 1;\n      state.totalTermFreq = 1;\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      // metadata\n      ste.fr.parent.postingsReader.decodeTerm(bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = 1;\n      state.totalTermFreq = 1;\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = 1;\n      state.totalTermFreq = 1;\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = 1;\n      state.totalTermFreq = 1;\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      // metadata\n      ste.fr.parent.postingsReader.decodeTerm(bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = 1;\n      state.totalTermFreq = 1;\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      // metadata\n      ste.fr.parent.postingsReader.decodeTerm(bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    //if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd);\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = 1;\n      state.totalTermFreq = 1;\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","4d637064d608752565d4f9f41b2497dfdfdde50e"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}