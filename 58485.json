{"path":"src/test/org/apache/lucene/util/TestCharacterUtils#testFillNoHighSurrogate().mjava","commits":[{"id":"966b079690131e434b39530d82cc413f5aff4cd5","date":1264751025,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestCharacterUtils#testFillNoHighSurrogate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFillNoHighSurrogate() throws IOException {\n    Version[] versions = new Version[] { Version.LUCENE_30, Version.LUCENE_31 };\n    for (Version version : versions) {\n      CharacterUtils instance = CharacterUtils.getInstance(version);\n      Reader reader = new StringReader(\"helloworld\");\n      CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(6);\n      assertTrue(instance.fill(buffer,reader));\n      assertEquals(0, buffer.getOffset());\n      assertEquals(6, buffer.getLength());\n      assertEquals(\"hellow\", new String(buffer.getBuffer()));\n      assertTrue(instance.fill(buffer,reader));\n      assertEquals(4, buffer.getLength());\n      assertEquals(0, buffer.getOffset());\n\n      assertEquals(\"orld\", new String(buffer.getBuffer(), buffer.getOffset(),\n          buffer.getLength()));\n      assertFalse(instance.fill(buffer,reader));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestCharacterUtils#testFillNoHighSurrogate().mjava","pathOld":"src/test/org/apache/lucene/util/TestCharacterUtils#testFillNoHighSurrogate().mjava","sourceNew":"  @Test\n  public void testFillNoHighSurrogate() throws IOException {\n    Version[] versions = new Version[] { Version.LUCENE_30, TEST_VERSION_CURRENT };\n    for (Version version : versions) {\n      CharacterUtils instance = CharacterUtils.getInstance(version);\n      Reader reader = new StringReader(\"helloworld\");\n      CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(6);\n      assertTrue(instance.fill(buffer,reader));\n      assertEquals(0, buffer.getOffset());\n      assertEquals(6, buffer.getLength());\n      assertEquals(\"hellow\", new String(buffer.getBuffer()));\n      assertTrue(instance.fill(buffer,reader));\n      assertEquals(4, buffer.getLength());\n      assertEquals(0, buffer.getOffset());\n\n      assertEquals(\"orld\", new String(buffer.getBuffer(), buffer.getOffset(),\n          buffer.getLength()));\n      assertFalse(instance.fill(buffer,reader));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFillNoHighSurrogate() throws IOException {\n    Version[] versions = new Version[] { Version.LUCENE_30, Version.LUCENE_31 };\n    for (Version version : versions) {\n      CharacterUtils instance = CharacterUtils.getInstance(version);\n      Reader reader = new StringReader(\"helloworld\");\n      CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(6);\n      assertTrue(instance.fill(buffer,reader));\n      assertEquals(0, buffer.getOffset());\n      assertEquals(6, buffer.getLength());\n      assertEquals(\"hellow\", new String(buffer.getBuffer()));\n      assertTrue(instance.fill(buffer,reader));\n      assertEquals(4, buffer.getLength());\n      assertEquals(0, buffer.getOffset());\n\n      assertEquals(\"orld\", new String(buffer.getBuffer(), buffer.getOffset(),\n          buffer.getLength()));\n      assertFalse(instance.fill(buffer,reader));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestCharacterUtils#testFillNoHighSurrogate().mjava","pathOld":"src/test/org/apache/lucene/util/TestCharacterUtils#testFillNoHighSurrogate().mjava","sourceNew":"  @Test\n  public void testFillNoHighSurrogate() throws IOException {\n    Version[] versions = new Version[] { Version.LUCENE_30, TEST_VERSION_CURRENT };\n    for (Version version : versions) {\n      CharacterUtils instance = CharacterUtils.getInstance(version);\n      Reader reader = new StringReader(\"helloworld\");\n      CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(6);\n      assertTrue(instance.fill(buffer,reader));\n      assertEquals(0, buffer.getOffset());\n      assertEquals(6, buffer.getLength());\n      assertEquals(\"hellow\", new String(buffer.getBuffer()));\n      assertTrue(instance.fill(buffer,reader));\n      assertEquals(4, buffer.getLength());\n      assertEquals(0, buffer.getOffset());\n\n      assertEquals(\"orld\", new String(buffer.getBuffer(), buffer.getOffset(),\n          buffer.getLength()));\n      assertFalse(instance.fill(buffer,reader));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFillNoHighSurrogate() throws IOException {\n    Version[] versions = new Version[] { Version.LUCENE_30, TEST_VERSION_CURRENT };\n    for (Version version : versions) {\n      CharacterUtils instance = CharacterUtils.getInstance(version);\n      Reader reader = new StringReader(\"helloworld\");\n      CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(6);\n      assertTrue(instance.fill(buffer,reader));\n      assertEquals(0, buffer.getOffset());\n      assertEquals(6, buffer.getLength());\n      assertEquals(\"hellow\", new String(buffer.getBuffer()));\n      assertTrue(instance.fill(buffer,reader));\n      assertEquals(4, buffer.getLength());\n      assertEquals(0, buffer.getOffset());\n\n      assertEquals(\"orld\", new String(buffer.getBuffer(), buffer.getOffset(),\n          buffer.getLength()));\n      assertFalse(instance.fill(buffer,reader));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"966b079690131e434b39530d82cc413f5aff4cd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["966b079690131e434b39530d82cc413f5aff4cd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"]},"commit2Childs":{"966b079690131e434b39530d82cc413f5aff4cd5":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["966b079690131e434b39530d82cc413f5aff4cd5"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}