{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","sourceNew":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) throws IOException {\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : tmpconfDir.listFiles()) {\n      File oldFile = new File(confDir, file.getName());\n      if (oldFile.exists()) {\n        File backupFile = new File(confDir, oldFile.getName() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        boolean status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      boolean status = file.renameTo(oldFile);\n      if (status) {\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) throws IOException {\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : tmpconfDir.listFiles()) {\n      File oldFile = new File(confDir, file.getName());\n      if (oldFile.exists()) {\n        File backupFile = new File(confDir, oldFile.getName() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        boolean status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      boolean status = file.renameTo(oldFile);\n      if (status) {\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","sourceNew":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) throws IOException {\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : tmpconfDir.listFiles()) {\n      File oldFile = new File(confDir, file.getName());\n      if (oldFile.exists()) {\n        File backupFile = new File(confDir, oldFile.getName() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        boolean status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      boolean status = file.renameTo(oldFile);\n      if (status) {\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) throws IOException {\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : tmpconfDir.listFiles()) {\n      File oldFile = new File(confDir, file.getName());\n      if (oldFile.exists()) {\n        File backupFile = new File(confDir, oldFile.getName() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        boolean status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      boolean status = file.renameTo(oldFile);\n      if (status) {\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","sourceNew":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) throws IOException {\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : tmpconfDir.listFiles()) {\n      File oldFile = new File(confDir, file.getName());\n      if (oldFile.exists()) {\n        File backupFile = new File(confDir, oldFile.getName() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        boolean status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      boolean status = file.renameTo(oldFile);\n      if (status) {\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) throws IOException {\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : tmpconfDir.listFiles()) {\n      File oldFile = new File(confDir, file.getName());\n      if (oldFile.exists()) {\n        File backupFile = new File(confDir, oldFile.getName() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        boolean status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      boolean status = file.renameTo(oldFile);\n      if (status) {\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","sourceNew":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) {\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : tmpconfDir.listFiles()) {\n      File oldFile = new File(confDir, file.getName());\n      if (oldFile.exists()) {\n        File backupFile = new File(confDir, oldFile.getName() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        boolean status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      boolean status = file.renameTo(oldFile);\n      if (status) {\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) throws IOException {\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : tmpconfDir.listFiles()) {\n      File oldFile = new File(confDir, file.getName());\n      if (oldFile.exists()) {\n        File backupFile = new File(confDir, oldFile.getName() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        boolean status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      boolean status = file.renameTo(oldFile);\n      if (status) {\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","bugFix":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","sourceNew":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) {\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : tmpconfDir.listFiles()) {\n      File oldFile = new File(confDir, file.getName());\n      if (oldFile.exists()) {\n        File backupFile = new File(confDir, oldFile.getName() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        boolean status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      boolean status = file.renameTo(oldFile);\n      if (status) {\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) throws IOException {\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : tmpconfDir.listFiles()) {\n      File oldFile = new File(confDir, file.getName());\n      if (oldFile.exists()) {\n        File backupFile = new File(confDir, oldFile.getName() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        boolean status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      boolean status = file.renameTo(oldFile);\n      if (status) {\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"810829f09a1fb58e6dfea98861c7365e7aa82a05","date":1368187649,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","sourceNew":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) {\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : makeTmpConfDirFileList(tmpconfDir, new ArrayList<File>())) {\n      File oldFile = new File(confDir, file.getPath().substring(tmpconfDir.getPath().length(), file.getPath().length()));\n      if (oldFile.exists()) {\n        File backupFile = new File(oldFile.getPath() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        boolean status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      boolean status = file.renameTo(oldFile);\n      if (status) {\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) {\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : tmpconfDir.listFiles()) {\n      File oldFile = new File(confDir, file.getName());\n      if (oldFile.exists()) {\n        File backupFile = new File(confDir, oldFile.getName() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        boolean status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      boolean status = file.renameTo(oldFile);\n      if (status) {\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02517e808d50cd05432693b76ab9e52f9cf8fc64","date":1368196511,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","sourceNew":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) {\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : tmpconfDir.listFiles()) {\n      File oldFile = new File(confDir, file.getName());\n      if (oldFile.exists()) {\n        File backupFile = new File(confDir, oldFile.getName() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        boolean status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      boolean status = file.renameTo(oldFile);\n      if (status) {\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) {\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : makeTmpConfDirFileList(tmpconfDir, new ArrayList<File>())) {\n      File oldFile = new File(confDir, file.getPath().substring(tmpconfDir.getPath().length(), file.getPath().length()));\n      if (oldFile.exists()) {\n        File backupFile = new File(oldFile.getPath() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        boolean status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      boolean status = file.renameTo(oldFile);\n      if (status) {\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["50ae164f36d6aa5da870a8c60eabf5709b680415"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"50ae164f36d6aa5da870a8c60eabf5709b680415","date":1368750534,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","sourceNew":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) {\n    boolean status = false;\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : makeTmpConfDirFileList(tmpconfDir, new ArrayList<File>())) {\n      File oldFile = new File(confDir, file.getPath().substring(tmpconfDir.getPath().length(), file.getPath().length()));\n      if (!oldFile.getParentFile().exists()) {\n        status = oldFile.getParentFile().mkdirs();\n        if (status) {\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to mkdirs: \" + oldFile.getParentFile());\n        }\n      }\n      if (oldFile.exists()) {\n        File backupFile = new File(oldFile.getPath() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        if (!backupFile.getParentFile().exists()) {\n          status = backupFile.getParentFile().mkdirs();\n          if (status) {\n          } else {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"Unable to mkdirs: \" + backupFile.getParentFile());\n          }\n        }\n        status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      status = file.renameTo(oldFile);\n      if (status) {\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) {\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : tmpconfDir.listFiles()) {\n      File oldFile = new File(confDir, file.getName());\n      if (oldFile.exists()) {\n        File backupFile = new File(confDir, oldFile.getName() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        boolean status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      boolean status = file.renameTo(oldFile);\n      if (status) {\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","bugFix":["02517e808d50cd05432693b76ab9e52f9cf8fc64","aab56102a66ad6123bbc7a10ec65d998b5e6117a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b30ae49569d5dd880f90086bfbe1cbb5d0e218a6","date":1395516887,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","sourceNew":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) {\n    boolean status = false;\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : makeTmpConfDirFileList(tmpconfDir, new ArrayList<File>())) {\n      File oldFile = new File(confDir, file.getPath().substring(tmpconfDir.getPath().length(), file.getPath().length()));\n      if (!oldFile.getParentFile().exists()) {\n        status = oldFile.getParentFile().mkdirs();\n        if (!status) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                  \"Unable to mkdirs: \" + oldFile.getParentFile());\n        }\n      }\n      if (oldFile.exists()) {\n        File backupFile = new File(oldFile.getPath() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        if (!backupFile.getParentFile().exists()) {\n          status = backupFile.getParentFile().mkdirs();\n          if (!status) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                    \"Unable to mkdirs: \" + backupFile.getParentFile());\n          }\n        }\n        status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      status = file.renameTo(oldFile);\n      if (!status) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) {\n    boolean status = false;\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : makeTmpConfDirFileList(tmpconfDir, new ArrayList<File>())) {\n      File oldFile = new File(confDir, file.getPath().substring(tmpconfDir.getPath().length(), file.getPath().length()));\n      if (!oldFile.getParentFile().exists()) {\n        status = oldFile.getParentFile().mkdirs();\n        if (status) {\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to mkdirs: \" + oldFile.getParentFile());\n        }\n      }\n      if (oldFile.exists()) {\n        File backupFile = new File(oldFile.getPath() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        if (!backupFile.getParentFile().exists()) {\n          status = backupFile.getParentFile().mkdirs();\n          if (status) {\n          } else {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"Unable to mkdirs: \" + backupFile.getParentFile());\n          }\n        }\n        status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      status = file.renameTo(oldFile);\n      if (status) {\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dea8e36e8c36d610840396c282a5affe3f722f4e","date":1422297045,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","sourceNew":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) {\n    boolean status = false;\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : makeTmpConfDirFileList(tmpconfDir, new ArrayList<>())) {\n      File oldFile = new File(confDir, file.getPath().substring(tmpconfDir.getPath().length(), file.getPath().length()));\n      if (!oldFile.getParentFile().exists()) {\n        status = oldFile.getParentFile().mkdirs();\n        if (!status) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                  \"Unable to mkdirs: \" + oldFile.getParentFile());\n        }\n      }\n      if (oldFile.exists()) {\n        File backupFile = new File(oldFile.getPath() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        if (!backupFile.getParentFile().exists()) {\n          status = backupFile.getParentFile().mkdirs();\n          if (!status) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                    \"Unable to mkdirs: \" + backupFile.getParentFile());\n          }\n        }\n        status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      status = file.renameTo(oldFile);\n      if (!status) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) {\n    boolean status = false;\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : makeTmpConfDirFileList(tmpconfDir, new ArrayList<File>())) {\n      File oldFile = new File(confDir, file.getPath().substring(tmpconfDir.getPath().length(), file.getPath().length()));\n      if (!oldFile.getParentFile().exists()) {\n        status = oldFile.getParentFile().mkdirs();\n        if (!status) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                  \"Unable to mkdirs: \" + oldFile.getParentFile());\n        }\n      }\n      if (oldFile.exists()) {\n        File backupFile = new File(oldFile.getPath() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        if (!backupFile.getParentFile().exists()) {\n          status = backupFile.getParentFile().mkdirs();\n          if (!status) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                    \"Unable to mkdirs: \" + backupFile.getParentFile());\n          }\n        }\n        status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      status = file.renameTo(oldFile);\n      if (!status) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":5,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#copyTmpConfFiles2Conf(File).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","sourceNew":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) {\n    boolean status = false;\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : makeTmpConfDirFileList(tmpconfDir, new ArrayList<>())) {\n      File oldFile = new File(confDir, file.getPath().substring(tmpconfDir.getPath().length(), file.getPath().length()));\n      if (!oldFile.getParentFile().exists()) {\n        status = oldFile.getParentFile().mkdirs();\n        if (!status) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                  \"Unable to mkdirs: \" + oldFile.getParentFile());\n        }\n      }\n      if (oldFile.exists()) {\n        File backupFile = new File(oldFile.getPath() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        if (!backupFile.getParentFile().exists()) {\n          status = backupFile.getParentFile().mkdirs();\n          if (!status) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                    \"Unable to mkdirs: \" + backupFile.getParentFile());\n          }\n        }\n        status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      status = file.renameTo(oldFile);\n      if (!status) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) {\n    boolean status = false;\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : makeTmpConfDirFileList(tmpconfDir, new ArrayList<>())) {\n      File oldFile = new File(confDir, file.getPath().substring(tmpconfDir.getPath().length(), file.getPath().length()));\n      if (!oldFile.getParentFile().exists()) {\n        status = oldFile.getParentFile().mkdirs();\n        if (!status) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                  \"Unable to mkdirs: \" + oldFile.getParentFile());\n        }\n      }\n      if (oldFile.exists()) {\n        File backupFile = new File(oldFile.getPath() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        if (!backupFile.getParentFile().exists()) {\n          status = backupFile.getParentFile().mkdirs();\n          if (!status) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                    \"Unable to mkdirs: \" + backupFile.getParentFile());\n          }\n        }\n        status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      status = file.renameTo(oldFile);\n      if (!status) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":5,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#copyTmpConfFiles2Conf(File).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyTmpConfFiles2Conf(File).mjava","sourceNew":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) {\n    boolean status = false;\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : makeTmpConfDirFileList(tmpconfDir, new ArrayList<>())) {\n      File oldFile = new File(confDir, file.getPath().substring(tmpconfDir.getPath().length(), file.getPath().length()));\n      if (!oldFile.getParentFile().exists()) {\n        status = oldFile.getParentFile().mkdirs();\n        if (!status) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                  \"Unable to mkdirs: \" + oldFile.getParentFile());\n        }\n      }\n      if (oldFile.exists()) {\n        File backupFile = new File(oldFile.getPath() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        if (!backupFile.getParentFile().exists()) {\n          status = backupFile.getParentFile().mkdirs();\n          if (!status) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                    \"Unable to mkdirs: \" + backupFile.getParentFile());\n          }\n        }\n        status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      status = file.renameTo(oldFile);\n      if (!status) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The conf files are copied to the tmp dir to the conf dir. A backup of the old file is maintained\n   */\n  private void copyTmpConfFiles2Conf(File tmpconfDir) {\n    boolean status = false;\n    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n    for (File file : makeTmpConfDirFileList(tmpconfDir, new ArrayList<>())) {\n      File oldFile = new File(confDir, file.getPath().substring(tmpconfDir.getPath().length(), file.getPath().length()));\n      if (!oldFile.getParentFile().exists()) {\n        status = oldFile.getParentFile().mkdirs();\n        if (!status) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                  \"Unable to mkdirs: \" + oldFile.getParentFile());\n        }\n      }\n      if (oldFile.exists()) {\n        File backupFile = new File(oldFile.getPath() + \".\" + getDateAsStr(new Date(oldFile.lastModified())));\n        if (!backupFile.getParentFile().exists()) {\n          status = backupFile.getParentFile().mkdirs();\n          if (!status) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                    \"Unable to mkdirs: \" + backupFile.getParentFile());\n          }\n        }\n        status = oldFile.renameTo(backupFile);\n        if (!status) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to rename: \" + oldFile + \" to: \" + backupFile);\n        }\n      }\n      status = file.renameTo(oldFile);\n      if (!status) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Unable to rename: \" + file + \" to: \" + oldFile);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b30ae49569d5dd880f90086bfbe1cbb5d0e218a6":["50ae164f36d6aa5da870a8c60eabf5709b680415"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"50ae164f36d6aa5da870a8c60eabf5709b680415":["02517e808d50cd05432693b76ab9e52f9cf8fc64"],"02517e808d50cd05432693b76ab9e52f9cf8fc64":["810829f09a1fb58e6dfea98861c7365e7aa82a05"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["dea8e36e8c36d610840396c282a5affe3f722f4e","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["dea8e36e8c36d610840396c282a5affe3f722f4e"],"810829f09a1fb58e6dfea98861c7365e7aa82a05":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["b30ae49569d5dd880f90086bfbe1cbb5d0e218a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20f6b7cff3771384f27af0f059795d7e64aff6b9"]},"commit2Childs":{"b30ae49569d5dd880f90086bfbe1cbb5d0e218a6":["dea8e36e8c36d610840396c282a5affe3f722f4e"],"c26f00b574427b55127e869b935845554afde1fa":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"50ae164f36d6aa5da870a8c60eabf5709b680415":["b30ae49569d5dd880f90086bfbe1cbb5d0e218a6"],"02517e808d50cd05432693b76ab9e52f9cf8fc64":["50ae164f36d6aa5da870a8c60eabf5709b680415"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"810829f09a1fb58e6dfea98861c7365e7aa82a05":["02517e808d50cd05432693b76ab9e52f9cf8fc64"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["810829f09a1fb58e6dfea98861c7365e7aa82a05","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}