{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerReporter(String,String,String,SolrMetricReporter).mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":2,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerReporter(String,String,String,SolrMetricReporter).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadReporter(String,SolrResourceLoader,PluginInfo).mjava","sourceNew":"  private void registerReporter(String registry, String name, String tag, SolrMetricReporter reporter) throws Exception {\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        throw new Exception(\"Could not obtain lock to modify reporters registry: \" + registry);\n      }\n    } catch (InterruptedException e) {\n      throw new Exception(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        perRegistry = new HashMap<>();\n        reporters.put(registry, perRegistry);\n      }\n      if (tag != null && !tag.isEmpty()) {\n        name = name + \"@\" + tag;\n      }\n      SolrMetricReporter oldReporter = perRegistry.get(name);\n      if (oldReporter != null) { // close it\n        log.info(\"Replacing existing reporter '\" + name + \"' in registry '\" + registry + \"': \" + oldReporter.toString());\n        oldReporter.close();\n      }\n      perRegistry.put(name, reporter);\n\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create and register an instance of {@link SolrMetricReporter}.\n   * @param registry reporter is associated with this registry\n   * @param loader loader to use when creating an instance of the reporter\n   * @param pluginInfo plugin configuration. Plugin \"name\" and \"class\" attributes are required.\n   * @throws Exception if any argument is missing or invalid\n   */\n  public void loadReporter(String registry, SolrResourceLoader loader, PluginInfo pluginInfo) throws Exception {\n    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {\n      throw new IllegalArgumentException(\"loadReporter called with missing arguments: \" +\n          \"registry=\" + registry + \", loader=\" + loader + \", pluginInfo=\" + pluginInfo);\n    }\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    SolrMetricReporter reporter = loader.newInstance(\n        pluginInfo.className,\n        SolrMetricReporter.class,\n        new String[0],\n        new Class[] { SolrMetricManager.class, String.class },\n        new Object[] { this, registry }\n    );\n    try {\n      reporter.init(pluginInfo);\n    } catch (IllegalStateException e) {\n      throw new IllegalArgumentException(\"reporter init failed: \" + pluginInfo, e);\n    }\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        throw new Exception(\"Could not obtain lock to modify reporters registry: \" + registry);\n      }\n    } catch (InterruptedException e) {\n      throw new Exception(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        perRegistry = new HashMap<>();\n        reporters.put(registry, perRegistry);\n      }\n      SolrMetricReporter oldReporter = perRegistry.get(pluginInfo.name);\n      if (oldReporter != null) { // close it\n        log.info(\"Replacing existing reporter '\" + pluginInfo.name + \"' in registry '\" + registry + \"': \" + oldReporter.toString());\n        oldReporter.close();\n      }\n      perRegistry.put(pluginInfo.name, reporter);\n\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerReporter(String,String,String,SolrMetricReporter).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerReporter(String,String,String,SolrMetricReporter).mjava","sourceNew":"  private void registerReporter(String registry, String name, String tag, SolrMetricReporter reporter) throws Exception {\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        throw new Exception(\"Could not obtain lock to modify reporters registry: \" + registry);\n      }\n    } catch (InterruptedException e) {\n      throw new Exception(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        perRegistry = new HashMap<>();\n        reporters.put(registry, perRegistry);\n      }\n      if (tag != null && !tag.isEmpty()) {\n        name = name + \"@\" + tag;\n      }\n      SolrMetricReporter oldReporter = perRegistry.get(name);\n      if (oldReporter != null) { // close it\n        log.info(\"Replacing existing reporter '{}' in registry'{}': {}\", name, registry, oldReporter);\n        oldReporter.close();\n      }\n      perRegistry.put(name, reporter);\n\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","sourceOld":"  private void registerReporter(String registry, String name, String tag, SolrMetricReporter reporter) throws Exception {\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        throw new Exception(\"Could not obtain lock to modify reporters registry: \" + registry);\n      }\n    } catch (InterruptedException e) {\n      throw new Exception(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        perRegistry = new HashMap<>();\n        reporters.put(registry, perRegistry);\n      }\n      if (tag != null && !tag.isEmpty()) {\n        name = name + \"@\" + tag;\n      }\n      SolrMetricReporter oldReporter = perRegistry.get(name);\n      if (oldReporter != null) { // close it\n        log.info(\"Replacing existing reporter '\" + name + \"' in registry '\" + registry + \"': \" + oldReporter.toString());\n        oldReporter.close();\n      }\n      perRegistry.put(name, reporter);\n\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["9df8125ba9193a2e2e285ed92157810b1952a244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}