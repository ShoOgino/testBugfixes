{"path":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#open(Random).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#open(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LineFileDocs#open(Random).mjava","sourceNew":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    final InputStream in = new BufferedInputStream(is, BUFFER_SIZE);\n    reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","sourceOld":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    final InputStream in = new BufferedInputStream(is, BUFFER_SIZE);\n    reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#open(Random).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    final InputStream in = new BufferedInputStream(is, BUFFER_SIZE);\n    reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#open(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LineFileDocs#open(Random).mjava","sourceNew":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    final InputStream in = new BufferedInputStream(is, BUFFER_SIZE);\n    reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","sourceOld":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    final InputStream in = new BufferedInputStream(is, BUFFER_SIZE);\n    reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"261e7e9b1c5f71ac08b45a9f9bf9aeef8038c84b","date":1302173534,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#open(Random).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#open(Random).mjava","sourceNew":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    reader = new BufferedReader(new InputStreamReader(is, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","sourceOld":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    final InputStream in = new BufferedInputStream(is, BUFFER_SIZE);\n    reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#open(Random).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#open(Random).mjava","sourceNew":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    reader = new BufferedReader(new InputStreamReader(is, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","sourceOld":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    final InputStream in = new BufferedInputStream(is, BUFFER_SIZE);\n    reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#open(Random).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#open(Random).mjava","sourceNew":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    reader = new BufferedReader(new InputStreamReader(is, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","sourceOld":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    final InputStream in = new BufferedInputStream(is, BUFFER_SIZE);\n    reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#open(Random).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#open(Random).mjava","sourceNew":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    reader = new BufferedReader(new InputStreamReader(is, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","sourceOld":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    final InputStream in = new BufferedInputStream(is, BUFFER_SIZE);\n    reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LineFileDocs#open(Random).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#open(Random).mjava","sourceNew":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    reader = new BufferedReader(new InputStreamReader(is, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","sourceOld":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    reader = new BufferedReader(new InputStreamReader(is, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["261e7e9b1c5f71ac08b45a9f9bf9aeef8038c84b"],"261e7e9b1c5f71ac08b45a9f9bf9aeef8038c84b":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","261e7e9b1c5f71ac08b45a9f9bf9aeef8038c84b"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","261e7e9b1c5f71ac08b45a9f9bf9aeef8038c84b"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","261e7e9b1c5f71ac08b45a9f9bf9aeef8038c84b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"261e7e9b1c5f71ac08b45a9f9bf9aeef8038c84b":["7b91922b55d15444d554721b352861d028eb8278","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["261e7e9b1c5f71ac08b45a9f9bf9aeef8038c84b","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}