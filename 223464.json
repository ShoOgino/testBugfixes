{"path":"src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(UpdateRequestProcessor,SolrParams,boolean).mjava","commits":[{"id":"6589002090bd74db749eef5befe2f447c0e3dd49","date":1184345280,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(UpdateRequestProcessor,SolrParams,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   */\n  public static boolean handleCommit( UpdateRequestProcessor processor, SolrParams params, boolean force ) throws IOException\n  {\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand( optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      processor.processCommit( cmd );\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61af939f4c10286fd8beaa0124064437b7ac44c5","date":1214514846,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(UpdateRequestProcessor,SolrParams,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(UpdateRequestProcessor,SolrParams,boolean).mjava","sourceNew":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   */\n  public static boolean handleCommit( UpdateRequestProcessor processor, SolrParams params, boolean force ) throws IOException\n  {\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand( optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      processor.processCommit( cmd );\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   */\n  public static boolean handleCommit( UpdateRequestProcessor processor, SolrParams params, boolean force ) throws IOException\n  {\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand( optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      processor.processCommit( cmd );\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"366ee8589b0d5578d8944e35470687383abbcd94","date":1250684482,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(UpdateRequestProcessor,SolrParams,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(UpdateRequestProcessor,SolrParams,boolean).mjava","sourceNew":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   */\n  public static boolean handleCommit( UpdateRequestProcessor processor, SolrParams params, boolean force ) throws IOException\n  {\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand( optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);      \n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      processor.processCommit( cmd );\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   */\n  public static boolean handleCommit( UpdateRequestProcessor processor, SolrParams params, boolean force ) throws IOException\n  {\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand( optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      processor.processCommit( cmd );\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(UpdateRequestProcessor,SolrParams,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/RequestHandlerUtils#handleCommit(UpdateRequestProcessor,SolrParams,boolean).mjava","sourceNew":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   */\n  public static boolean handleCommit( UpdateRequestProcessor processor, SolrParams params, boolean force ) throws IOException\n  {\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand( optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);      \n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      processor.processCommit( cmd );\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Check the request parameters and decide if it should commit or optimize.\n   * If it does, it will check parameters for \"waitFlush\" and \"waitSearcher\"\n   */\n  public static boolean handleCommit( UpdateRequestProcessor processor, SolrParams params, boolean force ) throws IOException\n  {\n    if( params == null ) {\n      params = new MapSolrParams( new HashMap<String, String>() ); \n    }\n    \n    boolean optimize = params.getBool( UpdateParams.OPTIMIZE, false );\n    boolean commit   = params.getBool( UpdateParams.COMMIT,   false );\n    \n    if( optimize || commit || force ) {\n      CommitUpdateCommand cmd = new CommitUpdateCommand( optimize );\n      cmd.waitFlush    = params.getBool( UpdateParams.WAIT_FLUSH,    cmd.waitFlush    );\n      cmd.waitSearcher = params.getBool( UpdateParams.WAIT_SEARCHER, cmd.waitSearcher );\n      cmd.expungeDeletes = params.getBool( UpdateParams.EXPUNGE_DELETES, cmd.expungeDeletes);      \n      cmd.maxOptimizeSegments = params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS, cmd.maxOptimizeSegments);\n      processor.processCommit( cmd );\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"366ee8589b0d5578d8944e35470687383abbcd94":["61af939f4c10286fd8beaa0124064437b7ac44c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"6589002090bd74db749eef5befe2f447c0e3dd49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["366ee8589b0d5578d8944e35470687383abbcd94"],"61af939f4c10286fd8beaa0124064437b7ac44c5":["6589002090bd74db749eef5befe2f447c0e3dd49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"366ee8589b0d5578d8944e35470687383abbcd94":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6589002090bd74db749eef5befe2f447c0e3dd49"],"6589002090bd74db749eef5befe2f447c0e3dd49":["61af939f4c10286fd8beaa0124064437b7ac44c5"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"61af939f4c10286fd8beaa0124064437b7ac44c5":["366ee8589b0d5578d8944e35470687383abbcd94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}