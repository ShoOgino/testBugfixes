{"path":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#mergePartitions(List[File],File).mjava","commits":[{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#mergePartitions(List[File],File).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort#mergePartitions(List[File],File).mjava","sourceNew":"  /** Merge a list of sorted temporary files (partitions) into an output file */\n  void mergePartitions(List<File> merges, File outputFile) throws IOException {\n    long start = System.currentTimeMillis();\n\n    ByteSequencesWriter out = new ByteSequencesWriter(outputFile);\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(merges.size()) {\n      @Override\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current, b.current) < 0;\n      }\n    };\n\n    ByteSequencesReader [] streams = new ByteSequencesReader [merges.size()];\n    try {\n      // Open streams and read the top for each file\n      for (int i = 0; i < merges.size(); i++) {\n        streams[i] = new ByteSequencesReader(merges.get(i));\n        byte line[] = streams[i].read();\n        if (line != null) {\n          queue.insertWithOverflow(new FileAndTop(i, line));\n        }\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        out.write(top.current);\n        if (!streams[top.fd].read(top.current)) {\n          queue.pop();\n        } else {\n          queue.updateTop();\n        }\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      // The logic below is: if an exception occurs in closing out, it has a priority over exceptions\n      // happening in closing streams.\n      try {\n        IOUtils.close(streams);\n      } finally {\n        IOUtils.close(out);\n      }\n    }\n  }\n\n","sourceOld":"  /** Merge a list of sorted temporary files (partitions) into an output file */\n  void mergePartitions(List<File> merges, File outputFile) throws IOException {\n    long start = System.currentTimeMillis();\n\n    ByteSequencesWriter out = new ByteSequencesWriter(outputFile);\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(merges.size()) {\n      @Override\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current, b.current) < 0;\n      }\n    };\n\n    ByteSequencesReader [] streams = new ByteSequencesReader [merges.size()];\n    try {\n      // Open streams and read the top for each file\n      for (int i = 0; i < merges.size(); i++) {\n        streams[i] = new ByteSequencesReader(merges.get(i));\n        byte line[] = streams[i].read();\n        if (line != null) {\n          queue.insertWithOverflow(new FileAndTop(i, line));\n        }\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        out.write(top.current);\n        if (!streams[top.fd].read(top.current)) {\n          queue.pop();\n        } else {\n          queue.updateTop();\n        }\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      // The logic below is: if an exception occurs in closing out, it has a priority over exceptions\n      // happening in closing streams.\n      try {\n        IOUtils.close(streams);\n      } finally {\n        IOUtils.close(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#mergePartitions(List[File],File).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort#mergePartitions(List[File],File).mjava","sourceNew":"  /** Merge a list of sorted temporary files (partitions) into an output file */\n  void mergePartitions(List<File> merges, File outputFile) throws IOException {\n    long start = System.currentTimeMillis();\n\n    ByteSequencesWriter out = new ByteSequencesWriter(outputFile);\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(merges.size()) {\n      @Override\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current, b.current) < 0;\n      }\n    };\n\n    ByteSequencesReader [] streams = new ByteSequencesReader [merges.size()];\n    try {\n      // Open streams and read the top for each file\n      for (int i = 0; i < merges.size(); i++) {\n        streams[i] = new ByteSequencesReader(merges.get(i));\n        byte line[] = streams[i].read();\n        if (line != null) {\n          queue.insertWithOverflow(new FileAndTop(i, line));\n        }\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        out.write(top.current);\n        if (!streams[top.fd].read(top.current)) {\n          queue.pop();\n        } else {\n          queue.updateTop();\n        }\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      // The logic below is: if an exception occurs in closing out, it has a priority over exceptions\n      // happening in closing streams.\n      try {\n        IOUtils.close(streams);\n      } finally {\n        IOUtils.close(out);\n      }\n    }\n  }\n\n","sourceOld":"  /** Merge a list of sorted temporary files (partitions) into an output file */\n  void mergePartitions(List<File> merges, File outputFile) throws IOException {\n    long start = System.currentTimeMillis();\n\n    ByteSequencesWriter out = new ByteSequencesWriter(outputFile);\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(merges.size()) {\n      @Override\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current, b.current) < 0;\n      }\n    };\n\n    ByteSequencesReader [] streams = new ByteSequencesReader [merges.size()];\n    try {\n      // Open streams and read the top for each file\n      for (int i = 0; i < merges.size(); i++) {\n        streams[i] = new ByteSequencesReader(merges.get(i));\n        byte line[] = streams[i].read();\n        if (line != null) {\n          queue.insertWithOverflow(new FileAndTop(i, line));\n        }\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        out.write(top.current);\n        if (!streams[top.fd].read(top.current)) {\n          queue.pop();\n        } else {\n          queue.updateTop();\n        }\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      // The logic below is: if an exception occurs in closing out, it has a priority over exceptions\n      // happening in closing streams.\n      try {\n        IOUtils.close(streams);\n      } finally {\n        IOUtils.close(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#mergePartitions(List[File],File).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#mergePartitions(List[File],File).mjava","sourceNew":"  /** Merge a list of sorted temporary files (partitions) into an output file */\n  void mergePartitions(List<File> merges, File outputFile) throws IOException {\n    long start = System.currentTimeMillis();\n\n    ByteSequencesWriter out = new ByteSequencesWriter(outputFile);\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(merges.size()) {\n      @Override\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current.get(), b.current.get()) < 0;\n      }\n    };\n\n    ByteSequencesReader [] streams = new ByteSequencesReader [merges.size()];\n    try {\n      // Open streams and read the top for each file\n      for (int i = 0; i < merges.size(); i++) {\n        streams[i] = new ByteSequencesReader(merges.get(i));\n        byte line[] = streams[i].read();\n        if (line != null) {\n          queue.insertWithOverflow(new FileAndTop(i, line));\n        }\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        out.write(top.current.bytes(), 0, top.current.length());\n        if (!streams[top.fd].read(top.current)) {\n          queue.pop();\n        } else {\n          queue.updateTop();\n        }\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      // The logic below is: if an exception occurs in closing out, it has a priority over exceptions\n      // happening in closing streams.\n      try {\n        IOUtils.close(streams);\n      } finally {\n        IOUtils.close(out);\n      }\n    }\n  }\n\n","sourceOld":"  /** Merge a list of sorted temporary files (partitions) into an output file */\n  void mergePartitions(List<File> merges, File outputFile) throws IOException {\n    long start = System.currentTimeMillis();\n\n    ByteSequencesWriter out = new ByteSequencesWriter(outputFile);\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(merges.size()) {\n      @Override\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current, b.current) < 0;\n      }\n    };\n\n    ByteSequencesReader [] streams = new ByteSequencesReader [merges.size()];\n    try {\n      // Open streams and read the top for each file\n      for (int i = 0; i < merges.size(); i++) {\n        streams[i] = new ByteSequencesReader(merges.get(i));\n        byte line[] = streams[i].read();\n        if (line != null) {\n          queue.insertWithOverflow(new FileAndTop(i, line));\n        }\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        out.write(top.current);\n        if (!streams[top.fd].read(top.current)) {\n          queue.pop();\n        } else {\n          queue.updateTop();\n        }\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      // The logic below is: if an exception occurs in closing out, it has a priority over exceptions\n      // happening in closing streams.\n      try {\n        IOUtils.close(streams);\n      } finally {\n        IOUtils.close(out);\n      }\n    }\n  }\n\n","bugFix":["7bf07f4ebadc7539de83a531e64678350d78ca26","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#mergePartitions(List[Path],Path).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#mergePartitions(List[File],File).mjava","sourceNew":"  /** Merge a list of sorted temporary files (partitions) into an output file */\n  void mergePartitions(List<Path> merges, Path outputFile) throws IOException {\n    long start = System.currentTimeMillis();\n\n    ByteSequencesWriter out = new ByteSequencesWriter(outputFile);\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(merges.size()) {\n      @Override\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current.get(), b.current.get()) < 0;\n      }\n    };\n\n    ByteSequencesReader [] streams = new ByteSequencesReader [merges.size()];\n    try {\n      // Open streams and read the top for each file\n      for (int i = 0; i < merges.size(); i++) {\n        streams[i] = new ByteSequencesReader(merges.get(i));\n        byte line[] = streams[i].read();\n        if (line != null) {\n          queue.insertWithOverflow(new FileAndTop(i, line));\n        }\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        out.write(top.current.bytes(), 0, top.current.length());\n        if (!streams[top.fd].read(top.current)) {\n          queue.pop();\n        } else {\n          queue.updateTop();\n        }\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      // The logic below is: if an exception occurs in closing out, it has a priority over exceptions\n      // happening in closing streams.\n      try {\n        IOUtils.close(streams);\n      } finally {\n        IOUtils.close(out);\n      }\n    }\n  }\n\n","sourceOld":"  /** Merge a list of sorted temporary files (partitions) into an output file */\n  void mergePartitions(List<File> merges, File outputFile) throws IOException {\n    long start = System.currentTimeMillis();\n\n    ByteSequencesWriter out = new ByteSequencesWriter(outputFile);\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(merges.size()) {\n      @Override\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current.get(), b.current.get()) < 0;\n      }\n    };\n\n    ByteSequencesReader [] streams = new ByteSequencesReader [merges.size()];\n    try {\n      // Open streams and read the top for each file\n      for (int i = 0; i < merges.size(); i++) {\n        streams[i] = new ByteSequencesReader(merges.get(i));\n        byte line[] = streams[i].read();\n        if (line != null) {\n          queue.insertWithOverflow(new FileAndTop(i, line));\n        }\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        out.write(top.current.bytes(), 0, top.current.length());\n        if (!streams[top.fd].read(top.current)) {\n          queue.pop();\n        } else {\n          queue.updateTop();\n        }\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      // The logic below is: if an exception occurs in closing out, it has a priority over exceptions\n      // happening in closing streams.\n      try {\n        IOUtils.close(streams);\n      } finally {\n        IOUtils.close(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","36f5a8c57e16c0f801006a52f87c75378427852e"],"36f5a8c57e16c0f801006a52f87c75378427852e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"f4abec28b874149a7223e32cc7a01704c27790de":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}