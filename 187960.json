{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.FieldReader.SegmentTermsEnum#next().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.FieldReader.SegmentTermsEnum#next().mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n        }\n        \n        if (state.ord >= numTerms-1) {\n          return null;\n        }\n\n        bytesReader.read();\n        state.docFreq = in.readVInt();\n\n        // TODO: would be cleaner, but space-wasting, to\n        // simply record a bit into each index entry as to\n        // whether it's an index entry or not, rather than\n        // re-compute that information... or, possibly store\n        // a \"how many terms until next index entry\" in each\n        // index entry, but that'd require some tricky\n        // lookahead work when writing the index\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                indexReader.isIndexTerm(1+state.ord, state.docFreq, false));\n\n        state.ord++;\n\n        return bytesReader.term;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"552356653fbcba144cd337e76f4abe8885913817","date":1273339661,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.FieldReader.SegmentTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.FieldReader.SegmentTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n        }\n        \n        if (state.ord >= numTerms-1) {\n          return null;\n        }\n\n        bytesReader.read();\n        state.docFreq = in.readVInt();\n\n        // TODO: would be cleaner, but space-wasting, to\n        // simply record a bit into each index entry as to\n        // whether it's an index entry or not, rather than\n        // re-compute that information... or, possibly store\n        // a \"how many terms until next index entry\" in each\n        // index entry, but that'd require some tricky\n        // lookahead work when writing the index\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                fieldIndexReader.isIndexTerm(1+state.ord, state.docFreq, false));\n\n        state.ord++;\n\n        return bytesReader.term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n        }\n        \n        if (state.ord >= numTerms-1) {\n          return null;\n        }\n\n        bytesReader.read();\n        state.docFreq = in.readVInt();\n\n        // TODO: would be cleaner, but space-wasting, to\n        // simply record a bit into each index entry as to\n        // whether it's an index entry or not, rather than\n        // re-compute that information... or, possibly store\n        // a \"how many terms until next index entry\" in each\n        // index entry, but that'd require some tricky\n        // lookahead work when writing the index\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                indexReader.isIndexTerm(1+state.ord, state.docFreq, false));\n\n        state.ord++;\n\n        return bytesReader.term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.FieldReader.SegmentTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n        }\n        \n        if (state.ord >= numTerms-1) {\n          return null;\n        }\n\n        bytesReader.read();\n        state.docFreq = in.readVInt();\n\n        // TODO: would be cleaner, but space-wasting, to\n        // simply record a bit into each index entry as to\n        // whether it's an index entry or not, rather than\n        // re-compute that information... or, possibly store\n        // a \"how many terms until next index entry\" in each\n        // index entry, but that'd require some tricky\n        // lookahead work when writing the index\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                fieldIndexReader.isIndexTerm(1+state.ord, state.docFreq, false));\n\n        state.ord++;\n\n        return bytesReader.term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n        }\n        \n        if (state.ord >= numTerms-1) {\n          return null;\n        }\n\n        bytesReader.read();\n        state.docFreq = in.readVInt();\n\n        // TODO: would be cleaner, but space-wasting, to\n        // simply record a bit into each index entry as to\n        // whether it's an index entry or not, rather than\n        // re-compute that information... or, possibly store\n        // a \"how many terms until next index entry\" in each\n        // index entry, but that'd require some tricky\n        // lookahead work when writing the index\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                fieldIndexReader.isIndexTerm(1+state.ord, state.docFreq, false));\n\n        state.ord++;\n\n        return bytesReader.term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.FieldReader.SegmentTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.FieldReader.SegmentTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n        }\n        \n        if (state.ord >= numTerms-1) {\n          return null;\n        }\n\n        bytesReader.read();\n        state.docFreq = in.readVInt();\n\n        // TODO: would be cleaner, but space-wasting, to\n        // simply record a bit into each index entry as to\n        // whether it's an index entry or not, rather than\n        // re-compute that information... or, possibly store\n        // a \"how many terms until next index entry\" in each\n        // index entry, but that'd require some tricky\n        // lookahead work when writing the index\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                fieldIndexReader.isIndexTerm(1+state.ord, state.docFreq, false));\n\n        state.ord++;\n\n        return bytesReader.term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n\n        if (seekPending) {\n          seekPending = false;\n          in.seek(state.filePointer);\n        }\n        \n        if (state.ord >= numTerms-1) {\n          return null;\n        }\n\n        bytesReader.read();\n        state.docFreq = in.readVInt();\n\n        // TODO: would be cleaner, but space-wasting, to\n        // simply record a bit into each index entry as to\n        // whether it's an index entry or not, rather than\n        // re-compute that information... or, possibly store\n        // a \"how many terms until next index entry\" in each\n        // index entry, but that'd require some tricky\n        // lookahead work when writing the index\n        postingsReader.readTerm(in,\n                                fieldInfo, state,\n                                fieldIndexReader.isIndexTerm(1+state.ord, state.docFreq, false));\n\n        state.ord++;\n\n        return bytesReader.term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"552356653fbcba144cd337e76f4abe8885913817":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["552356653fbcba144cd337e76f4abe8885913817","99cf56f3a650b908f7017a72f9d23940418f8a52"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["552356653fbcba144cd337e76f4abe8885913817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99cf56f3a650b908f7017a72f9d23940418f8a52"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"552356653fbcba144cd337e76f4abe8885913817":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["552356653fbcba144cd337e76f4abe8885913817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}