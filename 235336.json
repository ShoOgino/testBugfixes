{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = TermRangeQuery.newStringRange(field, part1, part2, startInclusive, endInclusive);\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = TermRangeQuery.newStringRange(field, part1, part2, startInclusive, endInclusive);\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = TermRangeQuery.newStringRange(field, part1, part2, startInclusive, endInclusive);\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = TermRangeQuery.newStringRange(field, part1, part2, startInclusive, endInclusive);\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = TermRangeQuery.newStringRange(field, part1, part2, startInclusive, endInclusive);\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = TermRangeQuery.newStringRange(field, part1, part2, startInclusive, endInclusive);\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    RewriteMethod originalRewriteMethod = getMultiTermRewriteMethod();\n    try {\n      if (isPass2ResolvingPhrases) {\n        setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n      }\n      return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n    } finally {\n      setMultiTermRewriteMethod(originalRewriteMethod);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = TermRangeQuery.newStringRange(field, part1, part2, startInclusive, endInclusive);\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    RewriteMethod originalRewriteMethod = getMultiTermRewriteMethod();\n    try {\n      if (isPass2ResolvingPhrases) {\n        setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n      }\n      return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n    } finally {\n      setMultiTermRewriteMethod(originalRewriteMethod);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = TermRangeQuery.newStringRange(field, part1, part2, startInclusive, endInclusive);\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2713584a660051cd646423be682771e3bbd99985"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2713584a660051cd646423be682771e3bbd99985":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea4107f60b9f95623c16025c9c247412ff809092":["2713584a660051cd646423be682771e3bbd99985"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2713584a660051cd646423be682771e3bbd99985","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985"],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}