{"path":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getTextTermFreqForClass(String).mjava","commits":[{"id":"e91746d568843981a68fb96dcecc7f383eb55701","date":1347520198,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getTextTermFreqForClass(String).mjava","pathOld":"/dev/null","sourceNew":"  private double getTextTermFreqForClass(String c) throws IOException {\n    Terms terms = MultiFields.getTerms(atomicReader, textFieldName);\n    long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n    double avgNumberOfUniqueTerms = numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    int docsWithC = atomicReader.docFreq(classFieldName, new BytesRef(c));\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text field per doc * # docs with c\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e81d41dc4e40aa3edd42c5abd8c648b65b9cedec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6a0e3c1c21aac8ecf75706605133012833585c7","date":1347535263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getTextTermFreqForClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getTextTermFreqForClass(String).mjava","sourceNew":"  private double getTextTermFreqForClass(String c) throws IOException {\n    Terms terms = MultiFields.getTerms(atomicReader, textFieldName);\n    long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n    double avgNumberOfUniqueTerms = numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    int docsWithC = atomicReader.docFreq(new Term(classFieldName, c));\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text field per doc * # docs with c\n  }\n\n","sourceOld":"  private double getTextTermFreqForClass(String c) throws IOException {\n    Terms terms = MultiFields.getTerms(atomicReader, textFieldName);\n    long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n    double avgNumberOfUniqueTerms = numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    int docsWithC = atomicReader.docFreq(classFieldName, new BytesRef(c));\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text field per doc * # docs with c\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b046c3e04315940a761d69bb348c761c11d995d4","date":1347605712,"type":5,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getTextTermFreqForClass(BytesRef).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#getTextTermFreqForClass(String).mjava","sourceNew":"  private double getTextTermFreqForClass(BytesRef c) throws IOException {\n    Terms terms = MultiFields.getTerms(atomicReader, textFieldName);\n    long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n    double avgNumberOfUniqueTerms = numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    int docsWithC = atomicReader.docFreq(new Term(classFieldName, c));\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text field per doc * # docs with c\n  }\n\n","sourceOld":"  private double getTextTermFreqForClass(String c) throws IOException {\n    Terms terms = MultiFields.getTerms(atomicReader, textFieldName);\n    long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n    double avgNumberOfUniqueTerms = numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    int docsWithC = atomicReader.docFreq(new Term(classFieldName, c));\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text field per doc * # docs with c\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b046c3e04315940a761d69bb348c761c11d995d4":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["e91746d568843981a68fb96dcecc7f383eb55701"],"e91746d568843981a68fb96dcecc7f383eb55701":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b046c3e04315940a761d69bb348c761c11d995d4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e91746d568843981a68fb96dcecc7f383eb55701"],"b046c3e04315940a761d69bb348c761c11d995d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["b046c3e04315940a761d69bb348c761c11d995d4"],"e91746d568843981a68fb96dcecc7f383eb55701":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}