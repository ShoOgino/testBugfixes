{"path":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processFacetFields(TaxonomyWriter,Map[String,List[FacetField]],List[Field],List[Field]).mjava","commits":[{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processFacetFields(TaxonomyWriter,Map[String,List[FacetField]],List[Field],List[Field]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processFacetFields(Map[String,List[FacetField]],List[Field],List[Field]).mjava","sourceNew":"  private void processFacetFields(TaxonomyWriter taxoWriter, Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = new FacetLabel(facetField.dim, facetField.path);\n\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(cp);\n        if (ordinals.length == ordinals.ints.length) {\n          ordinals.grow(ordinals.length+1);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.length--;\n          }\n        }\n\n        // Drill down:\n        for(int i=1;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","sourceOld":"  private void processFacetFields(Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = FacetLabel.create(facetField.dim, facetField.path);\n\n        checkTaxoWriter();\n        int ordinal = taxoWriter.addCategory(cp);\n        if (ordinals.length == ordinals.ints.length) {\n          ordinals.grow(ordinals.length+1);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.length--;\n          }\n        }\n\n        // Drill down:\n        for(int i=1;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51aa27dcefc9a1be9ba2bb5f1c29d5e357cec4f8","date":1387415264,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processFacetFields(TaxonomyWriter,Map[String,List[FacetField]],List[Field],List[Field]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processFacetFields(TaxonomyWriter,Map[String,List[FacetField]],List[Field],List[Field]).mjava","sourceNew":"  private void processFacetFields(TaxonomyWriter taxoWriter, Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  indexFieldName=\" + indexFieldName + \" fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = new FacetLabel(facetField.dim, facetField.path);\n\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(cp);\n        if (ordinals.length == ordinals.ints.length) {\n          ordinals.grow(ordinals.length+1);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"ords[\" + (ordinals.length-1) + \"]=\" + ordinal);\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          //System.out.println(\"  add parents\");\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.length--;\n          }\n        }\n\n        // Drill down:\n        for(int i=1;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","sourceOld":"  private void processFacetFields(TaxonomyWriter taxoWriter, Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = new FacetLabel(facetField.dim, facetField.path);\n\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(cp);\n        if (ordinals.length == ordinals.ints.length) {\n          ordinals.grow(ordinals.length+1);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.length--;\n          }\n        }\n\n        // Drill down:\n        for(int i=1;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processFacetFields(TaxonomyWriter,Map[String,List[FacetField]],List[Field],List[Field]).mjava","pathOld":"/dev/null","sourceNew":"  private void processFacetFields(TaxonomyWriter taxoWriter, Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  indexFieldName=\" + indexFieldName + \" fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = new FacetLabel(facetField.dim, facetField.path);\n\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(cp);\n        if (ordinals.length == ordinals.ints.length) {\n          ordinals.grow(ordinals.length+1);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"ords[\" + (ordinals.length-1) + \"]=\" + ordinal);\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          //System.out.println(\"  add parents\");\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.length--;\n          }\n        }\n\n        // Drill down:\n        for(int i=1;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"755faee94413f220e729a0b60122d6b24f7a2468","date":1391011756,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processFacetFields(TaxonomyWriter,Map[String,List[FacetField]],Document).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processFacetFields(TaxonomyWriter,Map[String,List[FacetField]],List[Field],List[Field]).mjava","sourceNew":"  private void processFacetFields(TaxonomyWriter taxoWriter, Map<String,List<FacetField>> byField, Document doc) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  indexFieldName=\" + indexFieldName + \" fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = new FacetLabel(facetField.dim, facetField.path);\n\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(cp);\n        if (ordinals.length == ordinals.ints.length) {\n          ordinals.grow(ordinals.length+1);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"ords[\" + (ordinals.length-1) + \"]=\" + ordinal);\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          //System.out.println(\"  add parents\");\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.length--;\n          }\n        }\n\n        // Drill down:\n        for (int i=1;i<=cp.length;i++) {\n          doc.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      doc.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","sourceOld":"  private void processFacetFields(TaxonomyWriter taxoWriter, Map<String,List<FacetField>> byField, List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n\n    for(Map.Entry<String,List<FacetField>> ent : byField.entrySet()) {\n\n      String indexFieldName = ent.getKey();\n      //System.out.println(\"  indexFieldName=\" + indexFieldName + \" fields=\" + ent.getValue());\n\n      IntsRef ordinals = new IntsRef(32);\n      for(FacetField facetField : ent.getValue()) {\n\n        FacetsConfig.DimConfig ft = getDimConfig(facetField.dim);\n        if (facetField.path.length > 1 && ft.hierarchical == false) {\n          throw new IllegalArgumentException(\"dimension \\\"\" + facetField.dim + \"\\\" is not hierarchical yet has \" + facetField.path.length + \" components\");\n        }\n      \n        FacetLabel cp = new FacetLabel(facetField.dim, facetField.path);\n\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(cp);\n        if (ordinals.length == ordinals.ints.length) {\n          ordinals.grow(ordinals.length+1);\n        }\n        ordinals.ints[ordinals.length++] = ordinal;\n        //System.out.println(\"ords[\" + (ordinals.length-1) + \"]=\" + ordinal);\n        //System.out.println(\"  add cp=\" + cp);\n\n        if (ft.multiValued && (ft.hierarchical || ft.requireDimCount)) {\n          //System.out.println(\"  add parents\");\n          // Add all parents too:\n          int parent = taxoWriter.getParent(ordinal);\n          while (parent > 0) {\n            if (ordinals.ints.length == ordinals.length) {\n              ordinals.grow(ordinals.length+1);\n            }\n            ordinals.ints[ordinals.length++] = parent;\n            parent = taxoWriter.getParent(parent);\n          }\n\n          if (ft.requireDimCount == false) {\n            // Remove last (dimension) ord:\n            ordinals.length--;\n          }\n        }\n\n        // Drill down:\n        for(int i=1;i<=cp.length;i++) {\n          addedIndexedFields.add(new StringField(indexFieldName, pathToString(cp.components, i), Field.Store.NO));\n        }\n      }\n\n      // Facet counts:\n      // DocValues are considered stored fields:\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, dedupAndEncode(ordinals)));\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"755faee94413f220e729a0b60122d6b24f7a2468":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd83550e4b0bdd36e7d9dca9273264100782440b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","51aa27dcefc9a1be9ba2bb5f1c29d5e357cec4f8"],"51aa27dcefc9a1be9ba2bb5f1c29d5e357cec4f8":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["755faee94413f220e729a0b60122d6b24f7a2468"]},"commit2Childs":{"755faee94413f220e729a0b60122d6b24f7a2468":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd83550e4b0bdd36e7d9dca9273264100782440b","3cc728b07df73b197e6d940d27f9b08b63918f13"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["51aa27dcefc9a1be9ba2bb5f1c29d5e357cec4f8"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["755faee94413f220e729a0b60122d6b24f7a2468"],"51aa27dcefc9a1be9ba2bb5f1c29d5e357cec4f8":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}