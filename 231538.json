{"path":"solr/core/src/java/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","sourceOld":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","sourceOld":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","sourceOld":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0522cfff00d3b7d3e18129f5658b6e0304b7bc4b","date":1331053459,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"img/solr.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1 style='margin-bottom:5px;'>JDK Log Level Selector</h1>\");\n    out.write(\"<h2 style='color:#AA0000; margin-top:0px;'>This will be removed before Solr 4.0.  See <a href='/#/logging'>logging</a></h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","sourceOld":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"img/solr.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1 style='margin-bottom:5px;'>JDK Log Level Selector</h1>\");\n    out.write(\"<h2 style='color:#AA0000; margin-top:0px;'>This will be removed before Solr 4.0.  See <a href='/#/logging'>logging</a></h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","sourceOld":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1801a5226cf55d1b619c6052e0ffca8940062f0f","date":1333995751,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":null,"sourceOld":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"img/solr.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1 style='margin-bottom:5px;'>JDK Log Level Selector</h1>\");\n    out.write(\"<h2 style='color:#AA0000; margin-top:0px;'>This will be removed before Solr 4.0.  See <a href='/#/logging'>logging</a></h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":null,"sourceOld":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"img/solr.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1 style='margin-bottom:5px;'>JDK Log Level Selector</h1>\");\n    out.write(\"<h2 style='color:#AA0000; margin-top:0px;'>This will be removed before Solr 4.0.  See <a href='/#/logging'>logging</a></h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0522cfff00d3b7d3e18129f5658b6e0304b7bc4b":["c26f00b574427b55127e869b935845554afde1fa"],"1801a5226cf55d1b619c6052e0ffca8940062f0f":["0522cfff00d3b7d3e18129f5658b6e0304b7bc4b"],"5a238fc456663f685a9db1ed8d680e348bb45171":["0522cfff00d3b7d3e18129f5658b6e0304b7bc4b","1801a5226cf55d1b619c6052e0ffca8940062f0f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["c26f00b574427b55127e869b935845554afde1fa","0522cfff00d3b7d3e18129f5658b6e0304b7bc4b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1801a5226cf55d1b619c6052e0ffca8940062f0f"]},"commit2Childs":{"0522cfff00d3b7d3e18129f5658b6e0304b7bc4b":["1801a5226cf55d1b619c6052e0ffca8940062f0f","5a238fc456663f685a9db1ed8d680e348bb45171","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"1801a5226cf55d1b619c6052e0ffca8940062f0f":["5a238fc456663f685a9db1ed8d680e348bb45171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0522cfff00d3b7d3e18129f5658b6e0304b7bc4b","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a238fc456663f685a9db1ed8d680e348bb45171","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}