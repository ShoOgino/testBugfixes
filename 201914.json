{"path":"solr/core/src/test/org/apache/solr/search/SortSpecParsingTest#testBad().mjava","commits":[{"id":"6c8dc56dbae186505066de8a78986cba31525ef0","date":1447876120,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SortSpecParsingTest#testBad().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","sourceNew":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    //test some bad vals\n    try {\n      sort = SortSpecParsing.parseSortSpec(\"weight, desc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = SortSpecParsing.parseSortSpec(\"w\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = SortSpecParsing.parseSortSpec(\"weight desc, bday\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = SortSpecParsing.parseSortSpec(\"pow(weight,,2) desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = SortSpecParsing.parseSortSpec(\"pow() desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = SortSpecParsing.parseSortSpec(\"pow((weight,2) desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSortSpec(\"weight, desc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSortSpec(\"w\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSortSpec(\"weight desc, bday\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSortSpec(\"pow(weight,,2) desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSortSpec(\"pow() desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSortSpec(\"pow((weight,2) desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c72019fa1d825f8209f23a6897c39e6006e3027","date":1448987188,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SortSpecParsingTest#testBad().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/SortSpecParsingTest#testBad().mjava","sourceNew":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    //test some bad vals\n    try {\n      sort = doParseSortSpec(\"weight, desc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = doParseSortSpec(\"w\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = doParseSortSpec(\"weight desc, bday\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = SortSpecParsing.parseSortSpec(\"pow(weight,,2) desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = SortSpecParsing.parseSortSpec(\"pow() desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = SortSpecParsing.parseSortSpec(\"pow((weight,2) desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    //test some bad vals\n    try {\n      sort = SortSpecParsing.parseSortSpec(\"weight, desc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = SortSpecParsing.parseSortSpec(\"w\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = SortSpecParsing.parseSortSpec(\"weight desc, bday\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = SortSpecParsing.parseSortSpec(\"pow(weight,,2) desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = SortSpecParsing.parseSortSpec(\"pow() desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = SortSpecParsing.parseSortSpec(\"pow((weight,2) desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c8dc56dbae186505066de8a78986cba31525ef0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c72019fa1d825f8209f23a6897c39e6006e3027":["6c8dc56dbae186505066de8a78986cba31525ef0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c72019fa1d825f8209f23a6897c39e6006e3027"]},"commit2Childs":{"6c8dc56dbae186505066de8a78986cba31525ef0":["2c72019fa1d825f8209f23a6897c39e6006e3027"],"2c72019fa1d825f8209f23a6897c39e6006e3027":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c8dc56dbae186505066de8a78986cba31525ef0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}