{"path":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery.NoSeekLeafReader#fields().mjava","commits":[{"id":"0ce8de354eb40085752030725cb2bee2b0ae536c","date":1469029371,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery.NoSeekLeafReader#fields().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Fields fields() throws IOException {\n      return new FilterFields(super.fields()) {\n        @Override\n        public Terms terms(String field) throws IOException {\n          return new FilterTerms(super.terms(field)) {\n            @Override\n            public TermsEnum iterator() throws IOException {\n              return new FilterTermsEnum(super.iterator()) {\n                @Override\n                public SeekStatus seekCeil(BytesRef text) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n                @Override\n                public void seekExact(BytesRef term, TermState state) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n                @Override\n                public boolean seekExact(BytesRef text) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n                @Override\n                public void seekExact(long ord) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n              };\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35d7ed691d627802acc5be44a639b67b1360467b","date":1469032270,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery.NoSeekLeafReader#fields().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Fields fields() throws IOException {\n      return new FilterFields(super.fields()) {\n        @Override\n        public Terms terms(String field) throws IOException {\n          return new FilterTerms(super.terms(field)) {\n            @Override\n            public TermsEnum iterator() throws IOException {\n              return new FilterTermsEnum(super.iterator()) {\n                @Override\n                public SeekStatus seekCeil(BytesRef text) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n                @Override\n                public void seekExact(BytesRef term, TermState state) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n                @Override\n                public boolean seekExact(BytesRef text) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n                @Override\n                public void seekExact(long ord) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n              };\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery.NoSeekLeafReader#fields().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Fields fields() throws IOException {\n      return new FilterFields(super.fields()) {\n        @Override\n        public Terms terms(String field) throws IOException {\n          return new FilterTerms(super.terms(field)) {\n            @Override\n            public TermsEnum iterator() throws IOException {\n              return new FilterTermsEnum(super.iterator()) {\n                @Override\n                public SeekStatus seekCeil(BytesRef text) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n                @Override\n                public void seekExact(BytesRef term, TermState state) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n                @Override\n                public boolean seekExact(BytesRef text) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n                @Override\n                public void seekExact(long ord) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n              };\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b6f36bb733c575dd04fdfa785127ebf82b0033f","date":1497502741,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery.NoSeekLeafReader#fields().mjava","sourceNew":null,"sourceOld":"    @Override\n    public Fields fields() throws IOException {\n      return new FilterFields(super.fields()) {\n        @Override\n        public Terms terms(String field) throws IOException {\n          return new FilterTerms(super.terms(field)) {\n            @Override\n            public TermsEnum iterator() throws IOException {\n              return new FilterTermsEnum(super.iterator()) {\n                @Override\n                public SeekStatus seekCeil(BytesRef text) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n                @Override\n                public void seekExact(BytesRef term, TermState state) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n                @Override\n                public boolean seekExact(BytesRef text) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n                @Override\n                public void seekExact(long ord) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n              };\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery.NoSeekLeafReader#fields().mjava","sourceNew":null,"sourceOld":"    @Override\n    public Fields fields() throws IOException {\n      return new FilterFields(super.fields()) {\n        @Override\n        public Terms terms(String field) throws IOException {\n          return new FilterTerms(super.terms(field)) {\n            @Override\n            public TermsEnum iterator() throws IOException {\n              return new FilterTermsEnum(super.iterator()) {\n                @Override\n                public SeekStatus seekCeil(BytesRef text) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n                @Override\n                public void seekExact(BytesRef term, TermState state) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n                @Override\n                public boolean seekExact(BytesRef text) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n                @Override\n                public void seekExact(long ord) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n              };\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery.NoSeekLeafReader#fields().mjava","sourceNew":null,"sourceOld":"    @Override\n    public Fields fields() throws IOException {\n      return new FilterFields(super.fields()) {\n        @Override\n        public Terms terms(String field) throws IOException {\n          return new FilterTerms(super.terms(field)) {\n            @Override\n            public TermsEnum iterator() throws IOException {\n              return new FilterTermsEnum(super.iterator()) {\n                @Override\n                public SeekStatus seekCeil(BytesRef text) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n                @Override\n                public void seekExact(BytesRef term, TermState state) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n                @Override\n                public boolean seekExact(BytesRef text) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n                @Override\n                public void seekExact(long ord) throws IOException {\n                  throw new AssertionError(\"no seek\");\n                }\n              };\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ce8de354eb40085752030725cb2bee2b0ae536c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b6f36bb733c575dd04fdfa785127ebf82b0033f":["35d7ed691d627802acc5be44a639b67b1360467b"],"35d7ed691d627802acc5be44a639b67b1360467b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ce8de354eb40085752030725cb2bee2b0ae536c"],"28288370235ed02234a64753cdbf0c6ec096304a":["35d7ed691d627802acc5be44a639b67b1360467b","2b6f36bb733c575dd04fdfa785127ebf82b0033f"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["35d7ed691d627802acc5be44a639b67b1360467b","2b6f36bb733c575dd04fdfa785127ebf82b0033f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","35d7ed691d627802acc5be44a639b67b1360467b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"0ce8de354eb40085752030725cb2bee2b0ae536c":["35d7ed691d627802acc5be44a639b67b1360467b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ce8de354eb40085752030725cb2bee2b0ae536c","35d7ed691d627802acc5be44a639b67b1360467b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2b6f36bb733c575dd04fdfa785127ebf82b0033f":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"35d7ed691d627802acc5be44a639b67b1360467b":["2b6f36bb733c575dd04fdfa785127ebf82b0033f","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}