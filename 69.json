{"path":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeNamedListAsMap(String,NamedList).mjava","commits":[{"id":"434ff4225627b937a533128f8746eb1e9009fc95","date":1153247240,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeNamedListAsMap(String,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  // Represents a NamedList directly as a JSON Object (essentially a Map)\r\n  // more natural but potentially problematic since order is not maintained and keys\r\n  // can't be repeated.\r\n  protected void writeNamedListAsMap(String name, NamedList val) throws IOException {\r\n    int sz = val.size();\r\n    writer.write('{');\r\n    incLevel();\r\n\r\n    // In JSON objects (maps) we can't have null keys or duplicates...\r\n    // map null to \"\" and append a qualifier to duplicates.\r\n    //\r\n    // a=123,a=456 will be mapped to {a=1,a__1=456}\r\n    // Disad: this is ambiguous since a real key could be called a__1\r\n    //\r\n    // Another possible mapping could aggregate multiple keys to an array:\r\n    // a=123,a=456 maps to a=[123,456]\r\n    // Disad: this is ambiguous with a real single value that happens to be an array\r\n    //\r\n    // Both of these mappings have ambiguities.\r\n    HashMap<String,Integer> repeats = new HashMap<String,Integer>(4);\r\n\r\n    boolean first=true;\r\n    for (int i=0; i<sz; i++) {\r\n      String key = val.getName(i);\r\n      if (key==null) key=\"\";\r\n\r\n      if (first) {\r\n        first=false;\r\n        repeats.put(key,0);\r\n      } else {\r\n        writer.write(',');\r\n\r\n        Integer repeatCount = repeats.get(key);\r\n        if (repeatCount==null) {\r\n          repeats.put(key,0);\r\n        } else {\r\n          String newKey = key;\r\n          int newCount = repeatCount;\r\n          do {  // avoid generated key clashing with a real key\r\n            newKey = key + ' ' + (++newCount);\r\n            repeatCount = repeats.get(newKey);\r\n          } while (repeatCount != null);\r\n\r\n          repeats.put(key,newCount);\r\n          key = newKey;\r\n        }\r\n      }\r\n\r\n      indent();\r\n      writeKey(key, true);\r\n      writeVal(key,val.getVal(i));\r\n    }\r\n\r\n    decLevel();\r\n    writer.write('}');\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c0e301b711811c6aaee90440cc1a7925fdd1a1e","date":1153259525,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeNamedListAsMap(String,NamedList).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeNamedListAsMap(String,NamedList).mjava","sourceNew":"  // Represents a NamedList directly as a JSON Object (essentially a Map)\n  // more natural but potentially problematic since order is not maintained and keys\n  // can't be repeated.\n  protected void writeNamedListAsMap(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writer.write('{');\n    incLevel();\n\n    // In JSON objects (maps) we can't have null keys or duplicates...\n    // map null to \"\" and append a qualifier to duplicates.\n    //\n    // a=123,a=456 will be mapped to {a=1,a__1=456}\n    // Disad: this is ambiguous since a real key could be called a__1\n    //\n    // Another possible mapping could aggregate multiple keys to an array:\n    // a=123,a=456 maps to a=[123,456]\n    // Disad: this is ambiguous with a real single value that happens to be an array\n    //\n    // Both of these mappings have ambiguities.\n    HashMap<String,Integer> repeats = new HashMap<String,Integer>(4);\n\n    boolean first=true;\n    for (int i=0; i<sz; i++) {\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n\n      if (first) {\n        first=false;\n        repeats.put(key,0);\n      } else {\n        writer.write(',');\n\n        Integer repeatCount = repeats.get(key);\n        if (repeatCount==null) {\n          repeats.put(key,0);\n        } else {\n          String newKey = key;\n          int newCount = repeatCount;\n          do {  // avoid generated key clashing with a real key\n            newKey = key + ' ' + (++newCount);\n            repeatCount = repeats.get(newKey);\n          } while (repeatCount != null);\n\n          repeats.put(key,newCount);\n          key = newKey;\n        }\n      }\n\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writer.write('}');\n  }\n\n","sourceOld":"  // Represents a NamedList directly as a JSON Object (essentially a Map)\r\n  // more natural but potentially problematic since order is not maintained and keys\r\n  // can't be repeated.\r\n  protected void writeNamedListAsMap(String name, NamedList val) throws IOException {\r\n    int sz = val.size();\r\n    writer.write('{');\r\n    incLevel();\r\n\r\n    // In JSON objects (maps) we can't have null keys or duplicates...\r\n    // map null to \"\" and append a qualifier to duplicates.\r\n    //\r\n    // a=123,a=456 will be mapped to {a=1,a__1=456}\r\n    // Disad: this is ambiguous since a real key could be called a__1\r\n    //\r\n    // Another possible mapping could aggregate multiple keys to an array:\r\n    // a=123,a=456 maps to a=[123,456]\r\n    // Disad: this is ambiguous with a real single value that happens to be an array\r\n    //\r\n    // Both of these mappings have ambiguities.\r\n    HashMap<String,Integer> repeats = new HashMap<String,Integer>(4);\r\n\r\n    boolean first=true;\r\n    for (int i=0; i<sz; i++) {\r\n      String key = val.getName(i);\r\n      if (key==null) key=\"\";\r\n\r\n      if (first) {\r\n        first=false;\r\n        repeats.put(key,0);\r\n      } else {\r\n        writer.write(',');\r\n\r\n        Integer repeatCount = repeats.get(key);\r\n        if (repeatCount==null) {\r\n          repeats.put(key,0);\r\n        } else {\r\n          String newKey = key;\r\n          int newCount = repeatCount;\r\n          do {  // avoid generated key clashing with a real key\r\n            newKey = key + ' ' + (++newCount);\r\n            repeatCount = repeats.get(newKey);\r\n          } while (repeatCount != null);\r\n\r\n          repeats.put(key,newCount);\r\n          key = newKey;\r\n        }\r\n      }\r\n\r\n      indent();\r\n      writeKey(key, true);\r\n      writeVal(key,val.getVal(i));\r\n    }\r\n\r\n    decLevel();\r\n    writer.write('}');\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4145b7b13874de95211223a6edb648da8794a688","date":1170182192,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeNamedListAsMapMangled(String,NamedList).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeNamedListAsMap(String,NamedList).mjava","sourceNew":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * Map null to \"\" and name mangle any repeated keys to avoid repeats in the\n   * output.\n   */\n  protected void writeNamedListAsMapMangled(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writer.write('{');\n    incLevel();\n\n    // In JSON objects (maps) we can't have null keys or duplicates...\n    // map null to \"\" and append a qualifier to duplicates.\n    //\n    // a=123,a=456 will be mapped to {a=1,a__1=456}\n    // Disad: this is ambiguous since a real key could be called a__1\n    //\n    // Another possible mapping could aggregate multiple keys to an array:\n    // a=123,a=456 maps to a=[123,456]\n    // Disad: this is ambiguous with a real single value that happens to be an array\n    //\n    // Both of these mappings have ambiguities.\n    HashMap<String,Integer> repeats = new HashMap<String,Integer>(4);\n\n    boolean first=true;\n    for (int i=0; i<sz; i++) {\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n\n      if (first) {\n        first=false;\n        repeats.put(key,0);\n      } else {\n        writer.write(',');\n\n        Integer repeatCount = repeats.get(key);\n        if (repeatCount==null) {\n          repeats.put(key,0);\n        } else {\n          String newKey = key;\n          int newCount = repeatCount;\n          do {  // avoid generated key clashing with a real key\n            newKey = key + ' ' + (++newCount);\n            repeatCount = repeats.get(newKey);\n          } while (repeatCount != null);\n\n          repeats.put(key,newCount);\n          key = newKey;\n        }\n      }\n\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writer.write('}');\n  }\n\n","sourceOld":"  // Represents a NamedList directly as a JSON Object (essentially a Map)\n  // more natural but potentially problematic since order is not maintained and keys\n  // can't be repeated.\n  protected void writeNamedListAsMap(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writer.write('{');\n    incLevel();\n\n    // In JSON objects (maps) we can't have null keys or duplicates...\n    // map null to \"\" and append a qualifier to duplicates.\n    //\n    // a=123,a=456 will be mapped to {a=1,a__1=456}\n    // Disad: this is ambiguous since a real key could be called a__1\n    //\n    // Another possible mapping could aggregate multiple keys to an array:\n    // a=123,a=456 maps to a=[123,456]\n    // Disad: this is ambiguous with a real single value that happens to be an array\n    //\n    // Both of these mappings have ambiguities.\n    HashMap<String,Integer> repeats = new HashMap<String,Integer>(4);\n\n    boolean first=true;\n    for (int i=0; i<sz; i++) {\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n\n      if (first) {\n        first=false;\n        repeats.put(key,0);\n      } else {\n        writer.write(',');\n\n        Integer repeatCount = repeats.get(key);\n        if (repeatCount==null) {\n          repeats.put(key,0);\n        } else {\n          String newKey = key;\n          int newCount = repeatCount;\n          do {  // avoid generated key clashing with a real key\n            newKey = key + ' ' + (++newCount);\n            repeatCount = repeats.get(newKey);\n          } while (repeatCount != null);\n\n          repeats.put(key,newCount);\n          key = newKey;\n        }\n      }\n\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writer.write('}');\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c0e301b711811c6aaee90440cc1a7925fdd1a1e":["434ff4225627b937a533128f8746eb1e9009fc95"],"434ff4225627b937a533128f8746eb1e9009fc95":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"4145b7b13874de95211223a6edb648da8794a688":["0c0e301b711811c6aaee90440cc1a7925fdd1a1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c0e301b711811c6aaee90440cc1a7925fdd1a1e":["4145b7b13874de95211223a6edb648da8794a688"],"434ff4225627b937a533128f8746eb1e9009fc95":["0c0e301b711811c6aaee90440cc1a7925fdd1a1e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["434ff4225627b937a533128f8746eb1e9009fc95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4145b7b13874de95211223a6edb648da8794a688":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4145b7b13874de95211223a6edb648da8794a688","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}