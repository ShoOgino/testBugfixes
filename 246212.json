{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","commits":[{"id":"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f","date":1215042831,"type":0,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link org.apache.lucene.analysis.shingle.ShingleMatrixFilter#next(org.apache.lucene.analysis.Token)} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec).mjava","sourceNew":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link org.apache.lucene.analysis.shingle.ShingleMatrixFilter#next(org.apache.lucene.analysis.Token)} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n  }\n\n","sourceOld":"  /**\n   * Creates a shingle filter based on a user defined matrix.\n   *\n   * The filter /will/ delete columns from the input matrix! You will not be able to reset the filter if you used this constructor.\n   * todo: don't touch the matrix! use a boolean, set the input stream to null or something, and keep track of where in the matrix we are at.\n   *\n   * @param matrix the input based for creating shingles. Does not need to contain any information until {@link org.apache.lucene.analysis.shingle.ShingleMatrixFilter#next(org.apache.lucene.analysis.Token)} is called the first time.\n   * @param minimumShingleSize minimum number of tokens in any shingle.\n   * @param maximumShingleSize maximum number of tokens in any shingle.\n   * @param spacerCharacter character to use between texts of the token parts in a shingle. null for none.\n   * @param ignoringSinglePrefixOrSuffixShingle if true, shingles that only contains permutation of the first of the last column will not be produced as shingles. Useful when adding boundary marker tokens such as '^' and '$'.\n   * @param settingsCodec codec used to read input token weight and matrix positioning.\n   */\n  public ShingleMatrixFilter(Matrix matrix, int minimumShingleSize, int maximumShingleSize, Character spacerCharacter, boolean ignoringSinglePrefixOrSuffixShingle, TokenSettingsCodec settingsCodec) {\n    this.matrix = matrix;\n    this.minimumShingleSize = minimumShingleSize;\n    this.maximumShingleSize = maximumShingleSize;\n    this.spacerCharacter = spacerCharacter;\n    this.ignoringSinglePrefixOrSuffixShingle = ignoringSinglePrefixOrSuffixShingle;\n    this.settingsCodec = settingsCodec;\n\n    // set the input to be an empty token stream, we already have the data.\n    this.input = new EmptyTokenStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["660fdd379b3fe276cd3a63d9c5852cef6dd5d54f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["660fdd379b3fe276cd3a63d9c5852cef6dd5d54f"],"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}