{"path":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new MockRAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50* _TestUtil.getRandomMultiplier();\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new MockRAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new MockRAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50* _TestUtil.getRandomMultiplier();\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new MockRAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50* _TestUtil.getRandomMultiplier();\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new MockRAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50* _TestUtil.getRandomMultiplier();\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new MockRAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              assertEquals(tp.getPayload().utf8ToString(), termText);\n            }\n          }\n        }\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50* _TestUtil.getRandomMultiplier();\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new MockRAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d23f03cf52dd089a72908bb7304f12522318b4","date":1276771700,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50* _TestUtil.getRandomMultiplier();\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new MockRAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50* _TestUtil.getRandomMultiplier();\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new MockRAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              assertEquals(tp.getPayload().utf8ToString(), termText);\n            }\n          }\n        }\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50* _TestUtil.getRandomMultiplier();\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new MockRAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50* _TestUtil.getRandomMultiplier();\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new MockRAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new MockRAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50* _TestUtil.getRandomMultiplier();\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new MockRAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new MockRAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50* _TestUtil.getRandomMultiplier();\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new MockRAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new MockRAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(rnd, \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new MockRAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory(rnd);\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(rnd, \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new MockRAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(rnd, \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory(rnd);\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(rnd, \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new MockRAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = 50 * RANDOM_MULTIPLIER;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits liveDocs = MultiFields.getLiveDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(liveDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits liveDocs = MultiFields.getLiveDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(liveDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits liveDocs = MultiFields.getLiveDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(liveDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits delDocs = MultiFields.getDeletedDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(delDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25103c1d49d5f0a252beaa953a1cba3290696d42","date":1311910149,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits liveDocs = MultiFields.getLiveDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(liveDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, payload.utf8ToString());\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits liveDocs = MultiFields.getLiveDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(liveDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, pool.bytesToString(payload.bytes, payload.offset, payload.length));\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new TextField(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits liveDocs = MultiFields.getLiveDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(liveDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, payload.utf8ToString());\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits liveDocs = MultiFields.getLiveDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(liveDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, payload.utf8ToString());\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new TextField(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator(null);\n        Bits liveDocs = MultiFields.getLiveDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(liveDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, payload.utf8ToString());\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new TextField(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator();\n        Bits liveDocs = MultiFields.getLiveDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(liveDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, payload.utf8ToString());\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new TextField(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator(null);\n        Bits liveDocs = MultiFields.getLiveDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(liveDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, payload.utf8ToString());\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new TextField(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator(null);\n        Bits liveDocs = MultiFields.getLiveDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(liveDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, payload.utf8ToString());\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new TextField(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator(null);\n        Bits liveDocs = MultiFields.getLiveDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(liveDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, payload.utf8ToString());\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new TextField(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator(null);\n        Bits liveDocs = MultiFields.getLiveDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(liveDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, payload.utf8ToString());\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new TextField(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator(null);\n        Bits liveDocs = MultiFields.getLiveDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(liveDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, payload.utf8ToString());\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new TextField(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator(null);\n        Bits liveDocs = MultiFields.getLiveDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(liveDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, payload.utf8ToString());\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new TextField(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator(null);\n        Bits liveDocs = MultiFields.getLiveDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(liveDocs, tp, false);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, payload.utf8ToString());\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new TextField(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator(null);\n        Bits liveDocs = MultiFields.getLiveDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(liveDocs, tp);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, payload.utf8ToString());\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new TextField(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator(null);\n        Bits liveDocs = MultiFields.getLiveDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(liveDocs, tp, false);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, payload.utf8ToString());\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        final int numThreads = 5;\n        final int numDocs = atLeast(50);\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = newDirectory();\n        final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( \n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new TextField(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        TermsEnum terms = MultiFields.getFields(reader).terms(field).iterator(null);\n        Bits liveDocs = MultiFields.getLiveDocs(reader);\n        DocsAndPositionsEnum tp = null;\n        while (terms.next() != null) {\n          String termText = terms.term().utf8ToString();\n          tp = terms.docsAndPositions(liveDocs, tp, false);\n          while(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            int freq = tp.freq();\n            for (int i = 0; i < freq; i++) {\n              tp.nextPosition();\n              final BytesRef payload = tp.getPayload();\n              assertEquals(termText, payload.utf8ToString());\n            }\n          }\n        }\n        reader.close();\n        dir.close();\n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["98d23f03cf52dd089a72908bb7304f12522318b4"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"98d23f03cf52dd089a72908bb7304f12522318b4":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["3cc749c053615f5871f3b95715fe292f34e70a53","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3cc749c053615f5871f3b95715fe292f34e70a53"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"25103c1d49d5f0a252beaa953a1cba3290696d42":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["25103c1d49d5f0a252beaa953a1cba3290696d42"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","f83af14a2a8131b14d7aee6274c740334e0363d3"],"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3cc749c053615f5871f3b95715fe292f34e70a53":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"d572389229127c297dd1fa5ce4758e1cec41e799":["2aafd88401639311b0404e67c94e829e123a0e45"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1f653cfcf159baeaafe5d01682a911e95bba4012","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"2aafd88401639311b0404e67c94e829e123a0e45":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","98d23f03cf52dd089a72908bb7304f12522318b4"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f83af14a2a8131b14d7aee6274c740334e0363d3","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","f83af14a2a8131b14d7aee6274c740334e0363d3"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["3cc749c053615f5871f3b95715fe292f34e70a53","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["b21422ff1d1d56499dec481f193b402e5e8def5b","3242a09f703274d3b9283f2064a1a33064b53a1b"],"98d23f03cf52dd089a72908bb7304f12522318b4":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","5f4e87790277826a2aea119328600dfb07761f32"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d083e83f225b11e5fdd900e83d26ddb385b6955c","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["25103c1d49d5f0a252beaa953a1cba3290696d42","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["2aafd88401639311b0404e67c94e829e123a0e45"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"25103c1d49d5f0a252beaa953a1cba3290696d42":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["f83af14a2a8131b14d7aee6274c740334e0363d3","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["98d23f03cf52dd089a72908bb7304f12522318b4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3cc749c053615f5871f3b95715fe292f34e70a53"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","ab5cb6a74aefb78aa0569857970b9151dfe2e787","a3776dccca01c11e7046323cfad46a3b4a471233"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3cc749c053615f5871f3b95715fe292f34e70a53":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d572389229127c297dd1fa5ce4758e1cec41e799":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"2aafd88401639311b0404e67c94e829e123a0e45":["d572389229127c297dd1fa5ce4758e1cec41e799"],"962d04139994fce5193143ef35615499a9a96d78":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","31f025ae60076ae95274433f3fe8e6ace2857a87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}