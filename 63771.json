{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTermsFromBooleanQuery(BooleanQuery,HashSet[WeightedTerm],boolean,String).mjava","commits":[{"id":"ffdf794cee8d43eb612df752c592cef2dc3e75ae","date":1256465578,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTermsFromBooleanQuery(BooleanQuery,HashSet[WeightedTerm],boolean,String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTermsFromBooleanQuery(BooleanQuery,HashSet,boolean,String).mjava","sourceNew":"\t/**\n\t * extractTerms is currently the only query-independent means of introspecting queries but it only reveals\n\t * a list of terms for that query - not the boosts each individual term in that query may or may not have.\n\t * \"Container\" queries such as BooleanQuery should be unwrapped to get at the boost info held\n\t * in each child element. \n\t * Some discussion around this topic here:\n\t * http://www.gossamer-threads.com/lists/lucene/java-dev/34208?search_string=introspection;#34208\n\t * Unfortunately there seemed to be limited interest in requiring all Query objects to implement\n\t * something common which would allow access to child queries so what follows here are query-specific\n\t * implementations for accessing embedded query elements. \n\t */\n\tprivate static final void getTermsFromBooleanQuery(BooleanQuery query, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName)\n\t{\n\t\tBooleanClause[] queryClauses = query.getClauses();\n\t\tfor (int i = 0; i < queryClauses.length; i++)\n\t\t{\n\t\t\tif (prohibited || queryClauses[i].getOccur()!=BooleanClause.Occur.MUST_NOT)\n\t\t\t\tgetTerms(queryClauses[i].getQuery(), terms, prohibited, fieldName);\n\t\t}\n\t}\t\n\n","sourceOld":"\t/**\n\t * extractTerms is currently the only query-independent means of introspecting queries but it only reveals\n\t * a list of terms for that query - not the boosts each individual term in that query may or may not have.\n\t * \"Container\" queries such as BooleanQuery should be unwrapped to get at the boost info held\n\t * in each child element. \n\t * Some discussion around this topic here:\n\t * http://www.gossamer-threads.com/lists/lucene/java-dev/34208?search_string=introspection;#34208\n\t * Unfortunately there seemed to be limited interest in requiring all Query objects to implement\n\t * something common which would allow access to child queries so what follows here are query-specific\n\t * implementations for accessing embedded query elements. \n\t */\n\tprivate static final void getTermsFromBooleanQuery(BooleanQuery query, HashSet terms, boolean prohibited, String fieldName)\n\t{\n\t\tBooleanClause[] queryClauses = query.getClauses();\n\t\tfor (int i = 0; i < queryClauses.length; i++)\n\t\t{\n\t\t\tif (prohibited || queryClauses[i].getOccur()!=BooleanClause.Occur.MUST_NOT)\n\t\t\t\tgetTerms(queryClauses[i].getQuery(), terms, prohibited, fieldName);\n\t\t}\n\t}\t\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTermsFromBooleanQuery(BooleanQuery,HashSet[WeightedTerm],boolean,String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTermsFromBooleanQuery(BooleanQuery,HashSet[WeightedTerm],boolean,String).mjava","sourceNew":"\t/**\n\t * extractTerms is currently the only query-independent means of introspecting queries but it only reveals\n\t * a list of terms for that query - not the boosts each individual term in that query may or may not have.\n\t * \"Container\" queries such as BooleanQuery should be unwrapped to get at the boost info held\n\t * in each child element. \n\t * Some discussion around this topic here:\n\t * http://www.gossamer-threads.com/lists/lucene/java-dev/34208?search_string=introspection;#34208\n\t * Unfortunately there seemed to be limited interest in requiring all Query objects to implement\n\t * something common which would allow access to child queries so what follows here are query-specific\n\t * implementations for accessing embedded query elements. \n\t */\n\tprivate static final void getTermsFromBooleanQuery(BooleanQuery query, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName)\n\t{\n\t\tBooleanClause[] queryClauses = query.getClauses();\n\t\tfor (int i = 0; i < queryClauses.length; i++)\n\t\t{\n\t\t\tif (prohibited || queryClauses[i].getOccur()!=BooleanClause.Occur.MUST_NOT)\n\t\t\t\tgetTerms(queryClauses[i].getQuery(), terms, prohibited, fieldName);\n\t\t}\n\t}\t\n\n","sourceOld":"\t/**\n\t * extractTerms is currently the only query-independent means of introspecting queries but it only reveals\n\t * a list of terms for that query - not the boosts each individual term in that query may or may not have.\n\t * \"Container\" queries such as BooleanQuery should be unwrapped to get at the boost info held\n\t * in each child element. \n\t * Some discussion around this topic here:\n\t * http://www.gossamer-threads.com/lists/lucene/java-dev/34208?search_string=introspection;#34208\n\t * Unfortunately there seemed to be limited interest in requiring all Query objects to implement\n\t * something common which would allow access to child queries so what follows here are query-specific\n\t * implementations for accessing embedded query elements. \n\t */\n\tprivate static final void getTermsFromBooleanQuery(BooleanQuery query, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName)\n\t{\n\t\tBooleanClause[] queryClauses = query.getClauses();\n\t\tfor (int i = 0; i < queryClauses.length; i++)\n\t\t{\n\t\t\tif (prohibited || queryClauses[i].getOccur()!=BooleanClause.Occur.MUST_NOT)\n\t\t\t\tgetTerms(queryClauses[i].getQuery(), terms, prohibited, fieldName);\n\t\t}\n\t}\t\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"]},"commit2Childs":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}