{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesFieldUpdates#testMergeIterator().mjava","commits":[{"id":"7e129bd6cb34a236558a49edf108a49d5c15e0e1","date":1525081316,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesFieldUpdates#testMergeIterator().mjava","pathOld":"/dev/null","sourceNew":"  public void testMergeIterator() {\n    NumericDocValuesFieldUpdates updates1 = new NumericDocValuesFieldUpdates(0, \"test\", 6);\n    NumericDocValuesFieldUpdates updates2 = new NumericDocValuesFieldUpdates(1, \"test\", 6);\n    NumericDocValuesFieldUpdates updates3 = new NumericDocValuesFieldUpdates(2, \"test\", 6);\n    NumericDocValuesFieldUpdates updates4 = new NumericDocValuesFieldUpdates(2, \"test\", 6);\n\n    updates1.add(0, 1);\n    updates1.add(4, 0);\n    updates1.add(1, 4);\n    updates1.add(2, 5);\n    updates1.add(4, 9);\n    assertTrue(updates1.any());\n\n    updates2.add(0, 18);\n    updates2.add(1, 7);\n    updates2.add(2, 19);\n    updates2.add(5, 24);\n    assertTrue(updates2.any());\n\n    updates3.add(2, 42);\n    assertTrue(updates3.any());\n    assertFalse(updates4.any());\n    updates1.finish();\n    updates2.finish();\n    updates3.finish();\n    updates4.finish();\n    List<DocValuesFieldUpdates.Iterator> iterators = Arrays.asList(updates1.iterator(), updates2.iterator(),\n        updates3.iterator(), updates4.iterator());\n    Collections.shuffle(iterators, random());\n    DocValuesFieldUpdates.Iterator iterator = DocValuesFieldUpdates\n        .mergedIterator(iterators.toArray(new DocValuesFieldUpdates.Iterator[0]));\n    assertEquals(0, iterator.nextDoc());\n    assertEquals(18, iterator.longValue());\n    assertEquals(1, iterator.nextDoc());\n    assertEquals(7, iterator.longValue());\n    assertEquals(2, iterator.nextDoc());\n    assertEquals(42, iterator.longValue());\n    assertEquals(4, iterator.nextDoc());\n    assertEquals(9, iterator.longValue());\n    assertEquals(5, iterator.nextDoc());\n    assertEquals(24, iterator.longValue());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iterator.nextDoc());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f42883db49d143abc1a0f176ba47e3388dafb608","date":1525083166,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesFieldUpdates#testMergeIterator().mjava","pathOld":"/dev/null","sourceNew":"  public void testMergeIterator() {\n    NumericDocValuesFieldUpdates updates1 = new NumericDocValuesFieldUpdates(0, \"test\", 6);\n    NumericDocValuesFieldUpdates updates2 = new NumericDocValuesFieldUpdates(1, \"test\", 6);\n    NumericDocValuesFieldUpdates updates3 = new NumericDocValuesFieldUpdates(2, \"test\", 6);\n    NumericDocValuesFieldUpdates updates4 = new NumericDocValuesFieldUpdates(2, \"test\", 6);\n\n    updates1.add(0, 1);\n    updates1.add(4, 0);\n    updates1.add(1, 4);\n    updates1.add(2, 5);\n    updates1.add(4, 9);\n    assertTrue(updates1.any());\n\n    updates2.add(0, 18);\n    updates2.add(1, 7);\n    updates2.add(2, 19);\n    updates2.add(5, 24);\n    assertTrue(updates2.any());\n\n    updates3.add(2, 42);\n    assertTrue(updates3.any());\n    assertFalse(updates4.any());\n    updates1.finish();\n    updates2.finish();\n    updates3.finish();\n    updates4.finish();\n    List<DocValuesFieldUpdates.Iterator> iterators = Arrays.asList(updates1.iterator(), updates2.iterator(),\n        updates3.iterator(), updates4.iterator());\n    Collections.shuffle(iterators, random());\n    DocValuesFieldUpdates.Iterator iterator = DocValuesFieldUpdates\n        .mergedIterator(iterators.toArray(new DocValuesFieldUpdates.Iterator[0]));\n    assertEquals(0, iterator.nextDoc());\n    assertEquals(18, iterator.longValue());\n    assertEquals(1, iterator.nextDoc());\n    assertEquals(7, iterator.longValue());\n    assertEquals(2, iterator.nextDoc());\n    assertEquals(42, iterator.longValue());\n    assertEquals(4, iterator.nextDoc());\n    assertEquals(9, iterator.longValue());\n    assertEquals(5, iterator.nextDoc());\n    assertEquals(24, iterator.longValue());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, iterator.nextDoc());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e129bd6cb34a236558a49edf108a49d5c15e0e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f42883db49d143abc1a0f176ba47e3388dafb608":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7e129bd6cb34a236558a49edf108a49d5c15e0e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f42883db49d143abc1a0f176ba47e3388dafb608"]},"commit2Childs":{"7e129bd6cb34a236558a49edf108a49d5c15e0e1":["f42883db49d143abc1a0f176ba47e3388dafb608"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e129bd6cb34a236558a49edf108a49d5c15e0e1","f42883db49d143abc1a0f176ba47e3388dafb608"],"f42883db49d143abc1a0f176ba47e3388dafb608":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}