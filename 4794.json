{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#finishTerm(BlockTermState).mjava","commits":[{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#finishTerm(BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    SepTermState state = (SepTermState)_state;\n    // TODO: -- wasteful we are counting this in two places?\n    assert state.docFreq > 0;\n    assert state.docFreq == df;\n\n    state.docIndex = docOut.index();\n    state.docIndex.copyFrom(docIndex, false);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      state.freqIndex = freqOut.index();\n      state.freqIndex.copyFrom(freqIndex, false);\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        state.posIndex = posOut.index();\n        state.posIndex.copyFrom(posIndex, false);\n      } else {\n        state.posIndex = null;\n      }\n    } else {\n      state.freqIndex = null;\n      state.posIndex = null;\n    }\n\n    if (df >= skipMinimum) {\n      state.skipFP = skipOut.getFilePointer();\n      //System.out.println(\"  skipFP=\" + skipFP);\n      skipListWriter.writeSkip(skipOut);\n      //System.out.println(\"    numBytes=\" + (skipOut.getFilePointer()-skipFP));\n    } else {\n      state.skipFP = -1;\n    }\n    state.payloadFP = payloadStart;\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    // TODO: -- wasteful we are counting this in two places?\n    assert stats.docFreq > 0;\n    assert stats.docFreq == df;\n\n    final IntIndexOutput.Index docIndexCopy = docOut.index();\n    docIndexCopy.copyFrom(docIndex, false);\n\n    final IntIndexOutput.Index freqIndexCopy;\n    final IntIndexOutput.Index posIndexCopy;\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      freqIndexCopy = freqOut.index();\n      freqIndexCopy.copyFrom(freqIndex, false);\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        posIndexCopy = posOut.index();\n        posIndexCopy.copyFrom(posIndex, false);\n      } else {\n        posIndexCopy = null;\n      }\n    } else {\n      freqIndexCopy = null;\n      posIndexCopy = null;\n    }\n\n    final long skipFP;\n    if (df >= skipMinimum) {\n      skipFP = skipOut.getFilePointer();\n      //System.out.println(\"  skipFP=\" + skipFP);\n      skipListWriter.writeSkip(skipOut);\n      //System.out.println(\"    numBytes=\" + (skipOut.getFilePointer()-skipFP));\n    } else {\n      skipFP = -1;\n    }\n\n    lastDocID = 0;\n    df = 0;\n\n    pendingTerms.add(new PendingTerm(docIndexCopy,\n                                     freqIndexCopy,\n                                     posIndexCopy,\n                                     payloadStart,\n                                     skipFP));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":1,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#finishTerm(BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    SepTermState state = (SepTermState)_state;\n    // TODO: -- wasteful we are counting this in two places?\n    assert state.docFreq > 0;\n    assert state.docFreq == df;\n\n    state.docIndex = docOut.index();\n    state.docIndex.copyFrom(docIndex, false);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      state.freqIndex = freqOut.index();\n      state.freqIndex.copyFrom(freqIndex, false);\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        state.posIndex = posOut.index();\n        state.posIndex.copyFrom(posIndex, false);\n      } else {\n        state.posIndex = null;\n      }\n    } else {\n      state.freqIndex = null;\n      state.posIndex = null;\n    }\n\n    if (df >= skipMinimum) {\n      state.skipFP = skipOut.getFilePointer();\n      //System.out.println(\"  skipFP=\" + skipFP);\n      skipListWriter.writeSkip(skipOut);\n      //System.out.println(\"    numBytes=\" + (skipOut.getFilePointer()-skipFP));\n    } else {\n      state.skipFP = -1;\n    }\n    state.payloadFP = payloadStart;\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    // TODO: -- wasteful we are counting this in two places?\n    assert stats.docFreq > 0;\n    assert stats.docFreq == df;\n\n    final IntIndexOutput.Index docIndexCopy = docOut.index();\n    docIndexCopy.copyFrom(docIndex, false);\n\n    final IntIndexOutput.Index freqIndexCopy;\n    final IntIndexOutput.Index posIndexCopy;\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      freqIndexCopy = freqOut.index();\n      freqIndexCopy.copyFrom(freqIndex, false);\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        posIndexCopy = posOut.index();\n        posIndexCopy.copyFrom(posIndex, false);\n      } else {\n        posIndexCopy = null;\n      }\n    } else {\n      freqIndexCopy = null;\n      posIndexCopy = null;\n    }\n\n    final long skipFP;\n    if (df >= skipMinimum) {\n      skipFP = skipOut.getFilePointer();\n      //System.out.println(\"  skipFP=\" + skipFP);\n      skipListWriter.writeSkip(skipOut);\n      //System.out.println(\"    numBytes=\" + (skipOut.getFilePointer()-skipFP));\n    } else {\n      skipFP = -1;\n    }\n\n    lastDocID = 0;\n    df = 0;\n\n    pendingTerms.add(new PendingTerm(docIndexCopy,\n                                     freqIndexCopy,\n                                     posIndexCopy,\n                                     payloadStart,\n                                     skipFP));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d86ebcdb45ce6a1b2584e2603f76db47523d0a","date":1396466913,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#finishTerm(BlockTermState).mjava","sourceNew":null,"sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    SepTermState state = (SepTermState)_state;\n    // TODO: -- wasteful we are counting this in two places?\n    assert state.docFreq > 0;\n    assert state.docFreq == df;\n\n    state.docIndex = docOut.index();\n    state.docIndex.copyFrom(docIndex, false);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      state.freqIndex = freqOut.index();\n      state.freqIndex.copyFrom(freqIndex, false);\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        state.posIndex = posOut.index();\n        state.posIndex.copyFrom(posIndex, false);\n      } else {\n        state.posIndex = null;\n      }\n    } else {\n      state.freqIndex = null;\n      state.posIndex = null;\n    }\n\n    if (df >= skipMinimum) {\n      state.skipFP = skipOut.getFilePointer();\n      //System.out.println(\"  skipFP=\" + skipFP);\n      skipListWriter.writeSkip(skipOut);\n      //System.out.println(\"    numBytes=\" + (skipOut.getFilePointer()-skipFP));\n    } else {\n      state.skipFP = -1;\n    }\n    state.payloadFP = payloadStart;\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#finishTerm(BlockTermState).mjava","sourceNew":null,"sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    SepTermState state = (SepTermState)_state;\n    // TODO: -- wasteful we are counting this in two places?\n    assert state.docFreq > 0;\n    assert state.docFreq == df;\n\n    state.docIndex = docOut.index();\n    state.docIndex.copyFrom(docIndex, false);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      state.freqIndex = freqOut.index();\n      state.freqIndex.copyFrom(freqIndex, false);\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        state.posIndex = posOut.index();\n        state.posIndex.copyFrom(posIndex, false);\n      } else {\n        state.posIndex = null;\n      }\n    } else {\n      state.freqIndex = null;\n      state.posIndex = null;\n    }\n\n    if (df >= skipMinimum) {\n      state.skipFP = skipOut.getFilePointer();\n      //System.out.println(\"  skipFP=\" + skipFP);\n      skipListWriter.writeSkip(skipOut);\n      //System.out.println(\"    numBytes=\" + (skipOut.getFilePointer()-skipFP));\n    } else {\n      state.skipFP = -1;\n    }\n    state.payloadFP = payloadStart;\n\n    lastDocID = 0;\n    df = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["2f948dd442d23baa6cbb28daf77c8db78b351329","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91d86ebcdb45ce6a1b2584e2603f76db47523d0a"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["5eb2511ababf862ea11e10761c70ee560cd84510","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}