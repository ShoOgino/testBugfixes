{"path":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory).mjava","commits":[{"id":"cca56866c19997e28ef073622656669c15210540","date":1307449014,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED_NO_NORMS));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(merger).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED_NO_NORMS));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(merger).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory).mjava","pathOld":"/dev/null","sourceNew":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED_NO_NORMS));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory).mjava","sourceNew":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      final FieldType customType = new FieldType(StringField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      \n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), customType));\n        d.add(newField(\"contents\", English.intToEnglish(i), customType));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, customType));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), customType));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED_NO_NORMS));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory).mjava","sourceNew":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      final FieldType customType = new FieldType(StringField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      \n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), customType));\n        d.add(newField(\"contents\", English.intToEnglish(i), customType));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, customType));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), customType));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      final FieldType customType = new FieldType(StringField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      \n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), customType));\n        d.add(newField(\"contents\", English.intToEnglish(i), customType));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, customType));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), customType));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedForceMerge#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory).mjava","sourceNew":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      final FieldType customType = new FieldType(StringField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      \n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), customType));\n        d.add(newField(\"contents\", English.intToEnglish(i), customType));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.forceMerge(1, false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, customType));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), customType));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.forceMerge(1);\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals(\"reader=\" + reader, 1, reader.getSequentialSubReaders().length);\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      final FieldType customType = new FieldType(StringField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      \n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), customType));\n        d.add(newField(\"contents\", English.intToEnglish(i), customType));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, customType));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), customType));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cca56866c19997e28ef073622656669c15210540"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cca56866c19997e28ef073622656669c15210540"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cca56866c19997e28ef073622656669c15210540"],"cca56866c19997e28ef073622656669c15210540":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cca56866c19997e28ef073622656669c15210540"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"cca56866c19997e28ef073622656669c15210540":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}