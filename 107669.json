{"path":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","commits":[{"id":"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab","date":1354403647,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","sourceNew":"  public void testDecompress() throws IOException {\n    final byte[] decompressed = randomArray();\n    final byte[] compressed = compress(decompressed);\n    final byte[] restored = decompress(compressed, decompressed.length);\n    assertArrayEquals(decompressed, restored);\n  }\n\n","sourceOld":"  public void testDecompress() throws IOException {\n    final byte[] decompressed = randomArray();\n    final byte[] compressed = compress(decompressed);\n    final byte[] restored = decompress(compressed, decompressed.length);\n    assertArrayEquals(decompressed, restored);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c3c76aa202009a206735eb7501d52a87ccaba79","date":1354660681,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","sourceNew":"  public void testDecompress() throws IOException {\n    final int iterations = atLeast(10);\n    for (int i = 0; i < iterations; ++i) {\n      final byte[] decompressed = randomArray();\n      final byte[] compressed = compress(decompressed);\n      final byte[] restored = decompress(compressed, decompressed.length);\n      assertArrayEquals(decompressed, restored);\n    }\n  }\n\n","sourceOld":"  public void testDecompress() throws IOException {\n    final byte[] decompressed = randomArray();\n    final byte[] compressed = compress(decompressed);\n    final byte[] restored = decompress(compressed, decompressed.length);\n    assertArrayEquals(decompressed, restored);\n  }\n\n","bugFix":null,"bugIntro":["175e4d353e3036fad2ad89ae6815c4418b4c3c8e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","pathOld":"/dev/null","sourceNew":"  public void testDecompress() throws IOException {\n    final int iterations = atLeast(10);\n    for (int i = 0; i < iterations; ++i) {\n      final byte[] decompressed = randomArray();\n      final byte[] compressed = compress(decompressed);\n      final byte[] restored = decompress(compressed, decompressed.length);\n      assertArrayEquals(decompressed, restored);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"175e4d353e3036fad2ad89ae6815c4418b4c3c8e","date":1378375735,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","sourceNew":"  public void testDecompress() throws IOException {\n    final int iterations = atLeast(10);\n    for (int i = 0; i < iterations; ++i) {\n      final byte[] decompressed = randomArray();\n      final int off = random().nextBoolean() ? 0 : _TestUtil.nextInt(random(), 0, decompressed.length);\n      final int len = random().nextBoolean() ? decompressed.length - off : _TestUtil.nextInt(random(), 0, decompressed.length - off);\n      final byte[] compressed = compress(decompressed, off, len);\n      final byte[] restored = decompress(compressed, len);\n      assertArrayEquals(Arrays.copyOfRange(decompressed, off, off+len), restored);\n    }\n  }\n\n","sourceOld":"  public void testDecompress() throws IOException {\n    final int iterations = atLeast(10);\n    for (int i = 0; i < iterations; ++i) {\n      final byte[] decompressed = randomArray();\n      final byte[] compressed = compress(decompressed);\n      final byte[] restored = decompress(compressed, decompressed.length);\n      assertArrayEquals(decompressed, restored);\n    }\n  }\n\n","bugFix":["0c3c76aa202009a206735eb7501d52a87ccaba79"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","sourceNew":"  public void testDecompress() throws IOException {\n    final int iterations = atLeast(10);\n    for (int i = 0; i < iterations; ++i) {\n      final byte[] decompressed = randomArray();\n      final int off = random().nextBoolean() ? 0 : TestUtil.nextInt(random(), 0, decompressed.length);\n      final int len = random().nextBoolean() ? decompressed.length - off : TestUtil.nextInt(random(), 0, decompressed.length - off);\n      final byte[] compressed = compress(decompressed, off, len);\n      final byte[] restored = decompress(compressed, len);\n      assertArrayEquals(Arrays.copyOfRange(decompressed, off, off+len), restored);\n    }\n  }\n\n","sourceOld":"  public void testDecompress() throws IOException {\n    final int iterations = atLeast(10);\n    for (int i = 0; i < iterations; ++i) {\n      final byte[] decompressed = randomArray();\n      final int off = random().nextBoolean() ? 0 : _TestUtil.nextInt(random(), 0, decompressed.length);\n      final int len = random().nextBoolean() ? decompressed.length - off : _TestUtil.nextInt(random(), 0, decompressed.length - off);\n      final byte[] compressed = compress(decompressed, off, len);\n      final byte[] restored = decompress(compressed, len);\n      assertArrayEquals(Arrays.copyOfRange(decompressed, off, off+len), restored);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","sourceNew":"  public void testDecompress() throws IOException {\n    final int iterations = atLeast(10);\n    for (int i = 0; i < iterations; ++i) {\n      final byte[] decompressed = randomArray();\n      final int off = random().nextBoolean() ? 0 : TestUtil.nextInt(random(), 0, decompressed.length);\n      final int len = random().nextBoolean() ? decompressed.length - off : TestUtil.nextInt(random(), 0, decompressed.length - off);\n      final byte[] compressed = compress(decompressed, off, len);\n      final byte[] restored = decompress(compressed, len);\n      assertArrayEquals(ArrayUtil.copyOfSubArray(decompressed, off, off+len), restored);\n    }\n  }\n\n","sourceOld":"  public void testDecompress() throws IOException {\n    final int iterations = atLeast(10);\n    for (int i = 0; i < iterations; ++i) {\n      final byte[] decompressed = randomArray();\n      final int off = random().nextBoolean() ? 0 : TestUtil.nextInt(random(), 0, decompressed.length);\n      final int len = random().nextBoolean() ? decompressed.length - off : TestUtil.nextInt(random(), 0, decompressed.length - off);\n      final byte[] compressed = compress(decompressed, off, len);\n      final byte[] restored = decompress(compressed, len);\n      assertArrayEquals(Arrays.copyOfRange(decompressed, off, off+len), restored);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","sourceNew":"  public void testDecompress() throws IOException {\n    final int iterations = atLeast(10);\n    for (int i = 0; i < iterations; ++i) {\n      final byte[] decompressed = randomArray();\n      final int off = random().nextBoolean() ? 0 : TestUtil.nextInt(random(), 0, decompressed.length);\n      final int len = random().nextBoolean() ? decompressed.length - off : TestUtil.nextInt(random(), 0, decompressed.length - off);\n      final byte[] compressed = compress(decompressed, off, len);\n      final byte[] restored = decompress(compressed, len);\n      assertArrayEquals(ArrayUtil.copyOfSubArray(decompressed, off, off+len), restored);\n    }\n  }\n\n","sourceOld":"  public void testDecompress() throws IOException {\n    final int iterations = atLeast(10);\n    for (int i = 0; i < iterations; ++i) {\n      final byte[] decompressed = randomArray();\n      final int off = random().nextBoolean() ? 0 : TestUtil.nextInt(random(), 0, decompressed.length);\n      final int len = random().nextBoolean() ? decompressed.length - off : TestUtil.nextInt(random(), 0, decompressed.length - off);\n      final byte[] compressed = compress(decompressed, off, len);\n      final byte[] restored = decompress(compressed, len);\n      assertArrayEquals(Arrays.copyOfRange(decompressed, off, off+len), restored);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","sourceNew":"  public void testDecompress() throws IOException {\n    final int iterations = atLeast(10);\n    for (int i = 0; i < iterations; ++i) {\n      final byte[] decompressed = randomArray();\n      final int off = random().nextBoolean() ? 0 : TestUtil.nextInt(random(), 0, decompressed.length);\n      final int len = random().nextBoolean() ? decompressed.length - off : TestUtil.nextInt(random(), 0, decompressed.length - off);\n      final byte[] compressed = compress(decompressed, off, len);\n      final byte[] restored = decompress(compressed, len);\n      assertArrayEquals(ArrayUtil.copyOfSubArray(decompressed, off, off+len), restored);\n    }\n  }\n\n","sourceOld":"  public void testDecompress() throws IOException {\n    final int iterations = atLeast(10);\n    for (int i = 0; i < iterations; ++i) {\n      final byte[] decompressed = randomArray();\n      final int off = random().nextBoolean() ? 0 : TestUtil.nextInt(random(), 0, decompressed.length);\n      final int len = random().nextBoolean() ? decompressed.length - off : TestUtil.nextInt(random(), 0, decompressed.length - off);\n      final byte[] compressed = compress(decompressed, off, len);\n      final byte[] restored = decompress(compressed, len);\n      assertArrayEquals(Arrays.copyOfRange(decompressed, off, off+len), restored);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"617d6d4150e0fb2acef8980ce51e3b8e628fb200","date":1580326292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testDecompress().mjava","sourceNew":"  public void testDecompress() throws IOException {\n    Random random = random();\n    final int iterations = atLeast(random, 3);\n    for (int i = 0; i < iterations; ++i) {\n      final byte[] decompressed = randomArray(random);\n      final int off = random.nextBoolean() ? 0 : TestUtil.nextInt(random, 0, decompressed.length);\n      final int len = random.nextBoolean() ? decompressed.length - off : TestUtil.nextInt(random, 0, decompressed.length - off);\n      final byte[] compressed = compress(decompressed, off, len);\n      final byte[] restored = decompress(compressed, len);\n      assertArrayEquals(ArrayUtil.copyOfSubArray(decompressed, off, off+len), restored);\n    }\n  }\n\n","sourceOld":"  public void testDecompress() throws IOException {\n    final int iterations = atLeast(10);\n    for (int i = 0; i < iterations; ++i) {\n      final byte[] decompressed = randomArray();\n      final int off = random().nextBoolean() ? 0 : TestUtil.nextInt(random(), 0, decompressed.length);\n      final int len = random().nextBoolean() ? decompressed.length - off : TestUtil.nextInt(random(), 0, decompressed.length - off);\n      final byte[] compressed = compress(decompressed, off, len);\n      final byte[] restored = decompress(compressed, len);\n      assertArrayEquals(ArrayUtil.copyOfSubArray(decompressed, off, off+len), restored);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"175e4d353e3036fad2ad89ae6815c4418b4c3c8e":["0c3c76aa202009a206735eb7501d52a87ccaba79"],"6613659748fe4411a7dcf85266e55db1f95f7315":["175e4d353e3036fad2ad89ae6815c4418b4c3c8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["6613659748fe4411a7dcf85266e55db1f95f7315","9798d0818e7a880546802b509792d3f3d57babd2"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0c3c76aa202009a206735eb7501d52a87ccaba79"],"0c3c76aa202009a206735eb7501d52a87ccaba79":["1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["9798d0818e7a880546802b509792d3f3d57babd2"],"9798d0818e7a880546802b509792d3f3d57babd2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["6613659748fe4411a7dcf85266e55db1f95f7315","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"175e4d353e3036fad2ad89ae6815c4418b4c3c8e":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"0c3c76aa202009a206735eb7501d52a87ccaba79":["175e4d353e3036fad2ad89ae6815c4418b4c3c8e","407687e67faf6e1f02a211ca078d8e3eed631027"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","617d6d4150e0fb2acef8980ce51e3b8e628fb200","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["0c3c76aa202009a206735eb7501d52a87ccaba79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}