{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog).mjava","pathOld":"/dev/null","sourceNew":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing it's reference and dropping it.\n   */\n  private void addOldLog(TransactionLog oldLog) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog).mjava","pathOld":"/dev/null","sourceNew":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing it's reference and dropping it.\n   */\n  private void addOldLog(TransactionLog oldLog) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog).mjava","pathOld":"/dev/null","sourceNew":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing it's reference and dropping it.\n   */\n  private void addOldLog(TransactionLog oldLog) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a9e81d464930e5664da049442e2630d4b9b00d5","date":1330726364,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog).mjava","sourceNew":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing it's reference and dropping it.\n   */\n  private void addOldLog(TransactionLog oldLog, boolean removeOld) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (removeOld && logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","sourceOld":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing it's reference and dropping it.\n   */\n  private void addOldLog(TransactionLog oldLog) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#addOldLog(TransactionLog).mjava","sourceNew":null,"sourceOld":"  /* Takes over ownership of the log, keeping it until no longer needed\n     and then decrementing it's reference and dropping it.\n   */\n  private void addOldLog(TransactionLog oldLog) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog &&  tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        currRecords -= nrec;\n        numOldRecords -= nrec;\n        logs.removeLast().decref();  // dereference so it will be deleted when no longer in use\n        continue;\n      }\n\n      break;\n    }\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","1a9e81d464930e5664da049442e2630d4b9b00d5"],"1a9e81d464930e5664da049442e2630d4b9b00d5":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a9e81d464930e5664da049442e2630d4b9b00d5"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"1a9e81d464930e5664da049442e2630d4b9b00d5":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","1a9e81d464930e5664da049442e2630d4b9b00d5","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}