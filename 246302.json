{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n\n    // Make sure any deletes that must be resolved before we commit the merge are complete:\n    bufferedUpdatesStream.waitApplyForMerge(merge.segments);\n\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n\n    // Make sure any deletes that must be resolved before we commit the merge are complete:\n    bufferedUpdatesStream.waitApplyForMerge(merge.segments);\n\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n\n    // Make sure any deletes that must be resolved before we commit the merge are complete:\n    bufferedUpdatesStream.waitApplyForMerge(merge.segments);\n\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final synchronized void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7","date":1524496660,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#mergeInit(MergePolicy.OneMerge).mjava","sourceNew":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n    assert Thread.holdsLock(this) == false;\n    // Make sure any deletes that must be resolved before we commit the merge are complete:\n    bufferedUpdatesStream.waitApplyForMerge(merge.segments, this);\n\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does initial setup for a merge, which is fast but holds\n   *  the synchronized lock on IndexWriter instance.  */\n  final void mergeInit(MergePolicy.OneMerge merge) throws IOException {\n\n    // Make sure any deletes that must be resolved before we commit the merge are complete:\n    bufferedUpdatesStream.waitApplyForMerge(merge.segments);\n\n    boolean success = false;\n    try {\n      _mergeInit(merge);\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"hit exception in mergeInit\");\n        }\n        mergeFinish(merge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["28288370235ed02234a64753cdbf0c6ec096304a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"]},"commit2Childs":{"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}