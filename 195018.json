{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuditloggerPlugin(Map[String,Object]).mjava","commits":[{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuditloggerPlugin(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    //Initialize the Auditlog module\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(auditConf)) {\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: \" + klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(readVersion(auditConf),\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9095feae302a6e075ef3af4bd81b4cea22c5c71c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9095feae302a6e075ef3af4bd81b4cea22c5c71c","date":1555355370,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuditloggerPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuditloggerPlugin(Map[String,Object]).mjava","sourceNew":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    int newVersion = readVersion(auditConf);\n    //Initialize the Auditlog module\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Auditlogger config not modified\");\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: \" + klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }    \n  }\n\n","sourceOld":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    //Initialize the Auditlog module\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(auditConf)) {\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: \" + klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(readVersion(auditConf),\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }    \n  }\n\n","bugFix":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuditloggerPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuditloggerPlugin(Map[String,Object]).mjava","sourceNew":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    int newVersion = readVersion(auditConf);\n    //Initialize the Auditlog module\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Auditlogger config not modified\");\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: \" + klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }\n  }\n\n","sourceOld":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    int newVersion = readVersion(auditConf);\n    //Initialize the Auditlog module\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Auditlogger config not modified\");\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: \" + klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f912f3dd0ef8a72704a10ac2fddbae91f4db66de","date":1566155934,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuditloggerPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuditloggerPlugin(Map[String,Object]).mjava","sourceNew":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    int newVersion = readVersion(auditConf);\n    //Initialize the Auditlog module\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Auditlogger config not modified\");\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: \" + klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n      newAuditloggerPlugin.plugin.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), metricTag, \"/auditlogging\");\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }\n  }\n\n","sourceOld":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    int newVersion = readVersion(auditConf);\n    //Initialize the Auditlog module\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Auditlogger config not modified\");\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: \" + klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuditloggerPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuditloggerPlugin(Map[String,Object]).mjava","sourceNew":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    int newVersion = readVersion(auditConf);\n    //Initialize the Auditlog module\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Auditlogger config not modified\");\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: \" + klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n      newAuditloggerPlugin.plugin.initializeMetrics(solrMetricsContext, \"/auditlogging\");\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }\n  }\n\n","sourceOld":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    int newVersion = readVersion(auditConf);\n    //Initialize the Auditlog module\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Auditlogger config not modified\");\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: \" + klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n      newAuditloggerPlugin.plugin.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), metricTag, \"/auditlogging\");\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuditloggerPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuditloggerPlugin(Map[String,Object]).mjava","sourceNew":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    int newVersion = readVersion(auditConf);\n    //Initialize the Auditlog module\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Auditlogger config not modified\");\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: {}\", klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n      newAuditloggerPlugin.plugin.initializeMetrics(solrMetricsContext, \"/auditlogging\");\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }\n  }\n\n","sourceOld":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    int newVersion = readVersion(auditConf);\n    //Initialize the Auditlog module\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Auditlogger config not modified\");\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: \" + klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n      newAuditloggerPlugin.plugin.initializeMetrics(solrMetricsContext, \"/auditlogging\");\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuditloggerPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuditloggerPlugin(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    int newVersion = readVersion(auditConf);\n    //Initialize the Auditlog module\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Auditlogger config not modified\");\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: {}\", klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n      newAuditloggerPlugin.plugin.initializeMetrics(solrMetricsContext, \"/auditlogging\");\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }\n  }\n\n","sourceOld":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    int newVersion = readVersion(auditConf);\n    //Initialize the Auditlog module\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Auditlogger config not modified\");\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: {}\", klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n      newAuditloggerPlugin.plugin.initializeMetrics(solrMetricsContext, \"/auditlogging\");\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["140be51d03394488536f4aacedace29f9b318347"],"f912f3dd0ef8a72704a10ac2fddbae91f4db66de":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["9095feae302a6e075ef3af4bd81b4cea22c5c71c"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["f912f3dd0ef8a72704a10ac2fddbae91f4db66de"],"140be51d03394488536f4aacedace29f9b318347":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9095feae302a6e075ef3af4bd81b4cea22c5c71c":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75237075d8425856bf4bbf52a6be4f9162b8187d"]},"commit2Childs":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f912f3dd0ef8a72704a10ac2fddbae91f4db66de":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["9095feae302a6e075ef3af4bd81b4cea22c5c71c"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["f912f3dd0ef8a72704a10ac2fddbae91f4db66de"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["140be51d03394488536f4aacedace29f9b318347"],"140be51d03394488536f4aacedace29f9b318347":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"9095feae302a6e075ef3af4bd81b4cea22c5c71c":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}