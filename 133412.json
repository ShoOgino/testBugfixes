{"path":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzzinessLong().mjava","commits":[{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzzinessLong().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","sourceNew":"  public void testFuzzinessLong() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query;\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), 0.5f, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzzinessLong() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), 0.5f, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzzinessLong().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzzinessLong().mjava","sourceNew":"  public void testFuzzinessLong() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.shutdown();\n\n    SlowFuzzyQuery query;\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), 0.5f, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzzinessLong() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query;\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), 0.5f, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzzinessLong().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzzinessLong().mjava","sourceNew":"  public void testFuzzinessLong() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query;\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), 0.5f, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzzinessLong() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.shutdown();\n\n    SlowFuzzyQuery query;\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), 0.5f, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzzinessLong().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzzinessLong().mjava","sourceNew":"  public void testFuzzinessLong() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query;\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), 0.5f, 0);   \n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzzinessLong() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query;\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), 0.5f, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzzinessLong().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzzinessLong().mjava","sourceNew":"  public void testFuzzinessLong() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query;\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), 0.5f, 0);   \n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      new SlowFuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      new SlowFuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n    });\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzzinessLong() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query;\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), 0.5f, 0);   \n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    try {\n      query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["d374631bb6f5665bd5907a6186a9bb283a315f7d","c16787e95e3c32c394cf5195e223e39ff5cbda3a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9c5c0e8e826d8fd169840564bcf8606cf81d15b","date":1473715404,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzzinessLong().mjava","sourceNew":null,"sourceOld":"  public void testFuzzinessLong() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query;\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), 0.5f, 0);   \n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      new SlowFuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      new SlowFuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n    });\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzzinessLong().mjava","sourceNew":null,"sourceOld":"  public void testFuzzinessLong() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query;\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), 0.5f, 0);   \n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      new SlowFuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      new SlowFuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n    });\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzzinessLong().mjava","sourceNew":null,"sourceOld":"  public void testFuzzinessLong() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query;\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), 0.5f, 0);   \n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      new SlowFuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      new SlowFuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n    });\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testFuzzinessLong().mjava","sourceNew":null,"sourceOld":"  public void testFuzzinessLong() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    SlowFuzzyQuery query;\n    // not similar enough:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"xxxxx\"), 0.5f, 0);   \n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 4);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaaaa\"));\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaaaccc\"), 0.5f, 5);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // no match, more than half of the characters is wrong:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"aaacccc\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // now with prefix\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 1);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new SlowFuzzyQuery(new Term(\"field\", \"stellent\"), 0.5f, 2);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new SlowFuzzyQuery(new Term(\"field\", \"student\"), 0.6f, 0);   \n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      new SlowFuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      new SlowFuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n    });\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["05fe562aa248790944d43cdd478f512572835ba0","89424def13674ea17829b41c5883c54ecc31a132"],"05fe562aa248790944d43cdd478f512572835ba0":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["05fe562aa248790944d43cdd478f512572835ba0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["05fe562aa248790944d43cdd478f512572835ba0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["05fe562aa248790944d43cdd478f512572835ba0","b9c5c0e8e826d8fd169840564bcf8606cf81d15b"]},"commit2Childs":{"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"05fe562aa248790944d43cdd478f512572835ba0":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","b9c5c0e8e826d8fd169840564bcf8606cf81d15b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}