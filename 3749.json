{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#assertHits(IndexSearcher,Query,String,String[],float[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#assertHits(IndexSearcher,Query,String,String[],float[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#assertHits(IndexSearcher,Query,String,String[],float[]).mjava","sourceNew":"  /**\n   * Checks to see if the hits are what we expected.\n   * \n   * @param query the query to execute\n   * @param description the description of the search\n   * @param expectedIds the expected document ids of the hits\n   * @param expectedScores the expected scores of the hits\n   * \n   * @throws IOException\n   */\n  protected static void assertHits(IndexSearcher s, Query query,\n      final String description, final String[] expectedIds,\n      final float[] expectedScores) throws IOException {\n    QueryUtils.check(random, query, s);\n    \n    final float tolerance = 1e-5f;\n    \n    // Hits hits = searcher.search(query);\n    // hits normalizes and throws things off if one score is greater than 1.0\n    TopDocs topdocs = s.search(query, null, 10000);\n    \n    /*****\n     * // display the hits System.out.println(hits.length() +\n     * \" hits for search: \\\"\" + description + '\\\"'); for (int i = 0; i <\n     * hits.length(); i++) { System.out.println(\"  \" + FIELD_ID + ':' +\n     * hits.doc(i).get(FIELD_ID) + \" (score:\" + hits.score(i) + ')'); }\n     *****/\n    \n    // did we get the hits we expected\n    assertEquals(expectedIds.length, topdocs.totalHits);\n    for (int i = 0; i < topdocs.totalHits; i++) {\n      // System.out.println(i + \" exp: \" + expectedIds[i]);\n      // System.out.println(i + \" field: \" + hits.doc(i).get(FIELD_ID));\n      \n      int id = topdocs.scoreDocs[i].doc;\n      float score = topdocs.scoreDocs[i].score;\n      Document doc = s.doc(id);\n      assertEquals(expectedIds[i], doc.get(FIELD_ID));\n      boolean scoreEq = Math.abs(expectedScores[i] - score) < tolerance;\n      if (!scoreEq) {\n        System.out.println(i + \" warning, expected score: \" + expectedScores[i]\n            + \", actual \" + score);\n        System.out.println(s.explain(query, id));\n      }\n      assertEquals(expectedScores[i], score, tolerance);\n      assertEquals(s.explain(query, id).getValue(), score, tolerance);\n    }\n  }\n\n","sourceOld":"  /**\n   * Checks to see if the hits are what we expected.\n   * \n   * @param query the query to execute\n   * @param description the description of the search\n   * @param expectedIds the expected document ids of the hits\n   * @param expectedScores the expected scores of the hits\n   * \n   * @throws IOException\n   */\n  protected static void assertHits(IndexSearcher s, Query query,\n      final String description, final String[] expectedIds,\n      final float[] expectedScores) throws IOException {\n    QueryUtils.check(random, query, s);\n    \n    final float tolerance = 1e-5f;\n    \n    // Hits hits = searcher.search(query);\n    // hits normalizes and throws things off if one score is greater than 1.0\n    TopDocs topdocs = s.search(query, null, 10000);\n    \n    /*****\n     * // display the hits System.out.println(hits.length() +\n     * \" hits for search: \\\"\" + description + '\\\"'); for (int i = 0; i <\n     * hits.length(); i++) { System.out.println(\"  \" + FIELD_ID + ':' +\n     * hits.doc(i).get(FIELD_ID) + \" (score:\" + hits.score(i) + ')'); }\n     *****/\n    \n    // did we get the hits we expected\n    assertEquals(expectedIds.length, topdocs.totalHits);\n    for (int i = 0; i < topdocs.totalHits; i++) {\n      // System.out.println(i + \" exp: \" + expectedIds[i]);\n      // System.out.println(i + \" field: \" + hits.doc(i).get(FIELD_ID));\n      \n      int id = topdocs.scoreDocs[i].doc;\n      float score = topdocs.scoreDocs[i].score;\n      Document doc = s.doc(id);\n      assertEquals(expectedIds[i], doc.get(FIELD_ID));\n      boolean scoreEq = Math.abs(expectedScores[i] - score) < tolerance;\n      if (!scoreEq) {\n        System.out.println(i + \" warning, expected score: \" + expectedScores[i]\n            + \", actual \" + score);\n        System.out.println(s.explain(query, id));\n      }\n      assertEquals(expectedScores[i], score, tolerance);\n      assertEquals(s.explain(query, id).getValue(), score, tolerance);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#assertHits(IndexSearcher,Query,String,String[],float[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#assertHits(IndexSearcher,Query,String,String[],float[]).mjava","sourceNew":"  /**\n   * Checks to see if the hits are what we expected.\n   * \n   * @param query the query to execute\n   * @param description the description of the search\n   * @param expectedIds the expected document ids of the hits\n   * @param expectedScores the expected scores of the hits\n   * \n   * @throws IOException\n   */\n  protected static void assertHits(IndexSearcher s, Query query,\n      final String description, final String[] expectedIds,\n      final float[] expectedScores) throws IOException {\n    QueryUtils.check(random(), query, s);\n    \n    final float tolerance = 1e-5f;\n    \n    // Hits hits = searcher.search(query);\n    // hits normalizes and throws things off if one score is greater than 1.0\n    TopDocs topdocs = s.search(query, null, 10000);\n    \n    /*****\n     * // display the hits System.out.println(hits.length() +\n     * \" hits for search: \\\"\" + description + '\\\"'); for (int i = 0; i <\n     * hits.length(); i++) { System.out.println(\"  \" + FIELD_ID + ':' +\n     * hits.doc(i).get(FIELD_ID) + \" (score:\" + hits.score(i) + ')'); }\n     *****/\n    \n    // did we get the hits we expected\n    assertEquals(expectedIds.length, topdocs.totalHits);\n    for (int i = 0; i < topdocs.totalHits; i++) {\n      // System.out.println(i + \" exp: \" + expectedIds[i]);\n      // System.out.println(i + \" field: \" + hits.doc(i).get(FIELD_ID));\n      \n      int id = topdocs.scoreDocs[i].doc;\n      float score = topdocs.scoreDocs[i].score;\n      Document doc = s.doc(id);\n      assertEquals(expectedIds[i], doc.get(FIELD_ID));\n      boolean scoreEq = Math.abs(expectedScores[i] - score) < tolerance;\n      if (!scoreEq) {\n        System.out.println(i + \" warning, expected score: \" + expectedScores[i]\n            + \", actual \" + score);\n        System.out.println(s.explain(query, id));\n      }\n      assertEquals(expectedScores[i], score, tolerance);\n      assertEquals(s.explain(query, id).getValue(), score, tolerance);\n    }\n  }\n\n","sourceOld":"  /**\n   * Checks to see if the hits are what we expected.\n   * \n   * @param query the query to execute\n   * @param description the description of the search\n   * @param expectedIds the expected document ids of the hits\n   * @param expectedScores the expected scores of the hits\n   * \n   * @throws IOException\n   */\n  protected static void assertHits(IndexSearcher s, Query query,\n      final String description, final String[] expectedIds,\n      final float[] expectedScores) throws IOException {\n    QueryUtils.check(random, query, s);\n    \n    final float tolerance = 1e-5f;\n    \n    // Hits hits = searcher.search(query);\n    // hits normalizes and throws things off if one score is greater than 1.0\n    TopDocs topdocs = s.search(query, null, 10000);\n    \n    /*****\n     * // display the hits System.out.println(hits.length() +\n     * \" hits for search: \\\"\" + description + '\\\"'); for (int i = 0; i <\n     * hits.length(); i++) { System.out.println(\"  \" + FIELD_ID + ':' +\n     * hits.doc(i).get(FIELD_ID) + \" (score:\" + hits.score(i) + ')'); }\n     *****/\n    \n    // did we get the hits we expected\n    assertEquals(expectedIds.length, topdocs.totalHits);\n    for (int i = 0; i < topdocs.totalHits; i++) {\n      // System.out.println(i + \" exp: \" + expectedIds[i]);\n      // System.out.println(i + \" field: \" + hits.doc(i).get(FIELD_ID));\n      \n      int id = topdocs.scoreDocs[i].doc;\n      float score = topdocs.scoreDocs[i].score;\n      Document doc = s.doc(id);\n      assertEquals(expectedIds[i], doc.get(FIELD_ID));\n      boolean scoreEq = Math.abs(expectedScores[i] - score) < tolerance;\n      if (!scoreEq) {\n        System.out.println(i + \" warning, expected score: \" + expectedScores[i]\n            + \", actual \" + score);\n        System.out.println(s.explain(query, id));\n      }\n      assertEquals(expectedScores[i], score, tolerance);\n      assertEquals(s.explain(query, id).getValue(), score, tolerance);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#assertHits(IndexSearcher,Query,String,String[],float[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#assertHits(IndexSearcher,Query,String,String[],float[]).mjava","sourceNew":"  /**\n   * Checks to see if the hits are what we expected.\n   * \n   * @param query the query to execute\n   * @param description the description of the search\n   * @param expectedIds the expected document ids of the hits\n   * @param expectedScores the expected scores of the hits\n   * \n   * @throws IOException\n   */\n  protected static void assertHits(IndexSearcher s, Query query,\n      final String description, final String[] expectedIds,\n      final float[] expectedScores) throws IOException {\n    QueryUtils.check(random(), query, s);\n    \n    final float tolerance = 1e-5f;\n    \n    // Hits hits = searcher.search(query);\n    // hits normalizes and throws things off if one score is greater than 1.0\n    TopDocs topdocs = s.search(query, null, 10000);\n    \n    /*****\n     * // display the hits System.out.println(hits.length() +\n     * \" hits for search: \\\"\" + description + '\\\"'); for (int i = 0; i <\n     * hits.length(); i++) { System.out.println(\"  \" + FIELD_ID + ':' +\n     * hits.doc(i).get(FIELD_ID) + \" (score:\" + hits.score(i) + ')'); }\n     *****/\n    \n    // did we get the hits we expected\n    assertEquals(expectedIds.length, topdocs.totalHits);\n    for (int i = 0; i < topdocs.totalHits; i++) {\n      // System.out.println(i + \" exp: \" + expectedIds[i]);\n      // System.out.println(i + \" field: \" + hits.doc(i).get(FIELD_ID));\n      \n      int id = topdocs.scoreDocs[i].doc;\n      float score = topdocs.scoreDocs[i].score;\n      StoredDocument doc = s.doc(id);\n      assertEquals(expectedIds[i], doc.get(FIELD_ID));\n      boolean scoreEq = Math.abs(expectedScores[i] - score) < tolerance;\n      if (!scoreEq) {\n        System.out.println(i + \" warning, expected score: \" + expectedScores[i]\n            + \", actual \" + score);\n        System.out.println(s.explain(query, id));\n      }\n      assertEquals(expectedScores[i], score, tolerance);\n      assertEquals(s.explain(query, id).getValue(), score, tolerance);\n    }\n  }\n\n","sourceOld":"  /**\n   * Checks to see if the hits are what we expected.\n   * \n   * @param query the query to execute\n   * @param description the description of the search\n   * @param expectedIds the expected document ids of the hits\n   * @param expectedScores the expected scores of the hits\n   * \n   * @throws IOException\n   */\n  protected static void assertHits(IndexSearcher s, Query query,\n      final String description, final String[] expectedIds,\n      final float[] expectedScores) throws IOException {\n    QueryUtils.check(random(), query, s);\n    \n    final float tolerance = 1e-5f;\n    \n    // Hits hits = searcher.search(query);\n    // hits normalizes and throws things off if one score is greater than 1.0\n    TopDocs topdocs = s.search(query, null, 10000);\n    \n    /*****\n     * // display the hits System.out.println(hits.length() +\n     * \" hits for search: \\\"\" + description + '\\\"'); for (int i = 0; i <\n     * hits.length(); i++) { System.out.println(\"  \" + FIELD_ID + ':' +\n     * hits.doc(i).get(FIELD_ID) + \" (score:\" + hits.score(i) + ')'); }\n     *****/\n    \n    // did we get the hits we expected\n    assertEquals(expectedIds.length, topdocs.totalHits);\n    for (int i = 0; i < topdocs.totalHits; i++) {\n      // System.out.println(i + \" exp: \" + expectedIds[i]);\n      // System.out.println(i + \" field: \" + hits.doc(i).get(FIELD_ID));\n      \n      int id = topdocs.scoreDocs[i].doc;\n      float score = topdocs.scoreDocs[i].score;\n      Document doc = s.doc(id);\n      assertEquals(expectedIds[i], doc.get(FIELD_ID));\n      boolean scoreEq = Math.abs(expectedScores[i] - score) < tolerance;\n      if (!scoreEq) {\n        System.out.println(i + \" warning, expected score: \" + expectedScores[i]\n            + \", actual \" + score);\n        System.out.println(s.explain(query, id));\n      }\n      assertEquals(expectedScores[i], score, tolerance);\n      assertEquals(s.explain(query, id).getValue(), score, tolerance);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#assertHits(IndexSearcher,Query,String,String[],float[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#assertHits(IndexSearcher,Query,String,String[],float[]).mjava","sourceNew":"  /**\n   * Checks to see if the hits are what we expected.\n   * \n   * @param query the query to execute\n   * @param description the description of the search\n   * @param expectedIds the expected document ids of the hits\n   * @param expectedScores the expected scores of the hits\n   * \n   * @throws IOException\n   */\n  protected static void assertHits(IndexSearcher s, Query query,\n      final String description, final String[] expectedIds,\n      final float[] expectedScores) throws IOException {\n    QueryUtils.check(random(), query, s);\n    \n    final float tolerance = 1e-5f;\n    \n    // Hits hits = searcher.search(query);\n    // hits normalizes and throws things off if one score is greater than 1.0\n    TopDocs topdocs = s.search(query, null, 10000);\n    \n    /*****\n     * // display the hits System.out.println(hits.length() +\n     * \" hits for search: \\\"\" + description + '\\\"'); for (int i = 0; i <\n     * hits.length(); i++) { System.out.println(\"  \" + FIELD_ID + ':' +\n     * hits.doc(i).get(FIELD_ID) + \" (score:\" + hits.score(i) + ')'); }\n     *****/\n    \n    // did we get the hits we expected\n    assertEquals(expectedIds.length, topdocs.totalHits);\n    for (int i = 0; i < topdocs.totalHits; i++) {\n      // System.out.println(i + \" exp: \" + expectedIds[i]);\n      // System.out.println(i + \" field: \" + hits.doc(i).get(FIELD_ID));\n      \n      int id = topdocs.scoreDocs[i].doc;\n      float score = topdocs.scoreDocs[i].score;\n      StoredDocument doc = s.doc(id);\n      assertEquals(expectedIds[i], doc.get(FIELD_ID));\n      boolean scoreEq = Math.abs(expectedScores[i] - score) < tolerance;\n      if (!scoreEq) {\n        System.out.println(i + \" warning, expected score: \" + expectedScores[i]\n            + \", actual \" + score);\n        System.out.println(s.explain(query, id));\n      }\n      assertEquals(expectedScores[i], score, tolerance);\n      assertEquals(s.explain(query, id).getValue(), score, tolerance);\n    }\n  }\n\n","sourceOld":"  /**\n   * Checks to see if the hits are what we expected.\n   * \n   * @param query the query to execute\n   * @param description the description of the search\n   * @param expectedIds the expected document ids of the hits\n   * @param expectedScores the expected scores of the hits\n   * \n   * @throws IOException\n   */\n  protected static void assertHits(IndexSearcher s, Query query,\n      final String description, final String[] expectedIds,\n      final float[] expectedScores) throws IOException {\n    QueryUtils.check(random(), query, s);\n    \n    final float tolerance = 1e-5f;\n    \n    // Hits hits = searcher.search(query);\n    // hits normalizes and throws things off if one score is greater than 1.0\n    TopDocs topdocs = s.search(query, null, 10000);\n    \n    /*****\n     * // display the hits System.out.println(hits.length() +\n     * \" hits for search: \\\"\" + description + '\\\"'); for (int i = 0; i <\n     * hits.length(); i++) { System.out.println(\"  \" + FIELD_ID + ':' +\n     * hits.doc(i).get(FIELD_ID) + \" (score:\" + hits.score(i) + ')'); }\n     *****/\n    \n    // did we get the hits we expected\n    assertEquals(expectedIds.length, topdocs.totalHits);\n    for (int i = 0; i < topdocs.totalHits; i++) {\n      // System.out.println(i + \" exp: \" + expectedIds[i]);\n      // System.out.println(i + \" field: \" + hits.doc(i).get(FIELD_ID));\n      \n      int id = topdocs.scoreDocs[i].doc;\n      float score = topdocs.scoreDocs[i].score;\n      Document doc = s.doc(id);\n      assertEquals(expectedIds[i], doc.get(FIELD_ID));\n      boolean scoreEq = Math.abs(expectedScores[i] - score) < tolerance;\n      if (!scoreEq) {\n        System.out.println(i + \" warning, expected score: \" + expectedScores[i]\n            + \", actual \" + score);\n        System.out.println(s.explain(query, id));\n      }\n      assertEquals(expectedScores[i], score, tolerance);\n      assertEquals(s.explain(query, id).getValue(), score, tolerance);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#assertHits(IndexSearcher,Query,String,String[],float[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#assertHits(IndexSearcher,Query,String,String[],float[]).mjava","sourceNew":"  /**\n   * Checks to see if the hits are what we expected.\n   * \n   * @param query the query to execute\n   * @param description the description of the search\n   * @param expectedIds the expected document ids of the hits\n   * @param expectedScores the expected scores of the hits\n   */\n  protected static void assertHits(IndexSearcher s, Query query,\n      final String description, final String[] expectedIds,\n      final float[] expectedScores) throws IOException {\n    QueryUtils.check(random(), query, s);\n    \n    final float tolerance = 1e-5f;\n    \n    // Hits hits = searcher.search(query);\n    // hits normalizes and throws things off if one score is greater than 1.0\n    TopDocs topdocs = s.search(query, null, 10000);\n    \n    /*****\n     * // display the hits System.out.println(hits.length() +\n     * \" hits for search: \\\"\" + description + '\\\"'); for (int i = 0; i <\n     * hits.length(); i++) { System.out.println(\"  \" + FIELD_ID + ':' +\n     * hits.doc(i).get(FIELD_ID) + \" (score:\" + hits.score(i) + ')'); }\n     *****/\n    \n    // did we get the hits we expected\n    assertEquals(expectedIds.length, topdocs.totalHits);\n    for (int i = 0; i < topdocs.totalHits; i++) {\n      // System.out.println(i + \" exp: \" + expectedIds[i]);\n      // System.out.println(i + \" field: \" + hits.doc(i).get(FIELD_ID));\n      \n      int id = topdocs.scoreDocs[i].doc;\n      float score = topdocs.scoreDocs[i].score;\n      StoredDocument doc = s.doc(id);\n      assertEquals(expectedIds[i], doc.get(FIELD_ID));\n      boolean scoreEq = Math.abs(expectedScores[i] - score) < tolerance;\n      if (!scoreEq) {\n        System.out.println(i + \" warning, expected score: \" + expectedScores[i]\n            + \", actual \" + score);\n        System.out.println(s.explain(query, id));\n      }\n      assertEquals(expectedScores[i], score, tolerance);\n      assertEquals(s.explain(query, id).getValue(), score, tolerance);\n    }\n  }\n\n","sourceOld":"  /**\n   * Checks to see if the hits are what we expected.\n   * \n   * @param query the query to execute\n   * @param description the description of the search\n   * @param expectedIds the expected document ids of the hits\n   * @param expectedScores the expected scores of the hits\n   * \n   * @throws IOException\n   */\n  protected static void assertHits(IndexSearcher s, Query query,\n      final String description, final String[] expectedIds,\n      final float[] expectedScores) throws IOException {\n    QueryUtils.check(random(), query, s);\n    \n    final float tolerance = 1e-5f;\n    \n    // Hits hits = searcher.search(query);\n    // hits normalizes and throws things off if one score is greater than 1.0\n    TopDocs topdocs = s.search(query, null, 10000);\n    \n    /*****\n     * // display the hits System.out.println(hits.length() +\n     * \" hits for search: \\\"\" + description + '\\\"'); for (int i = 0; i <\n     * hits.length(); i++) { System.out.println(\"  \" + FIELD_ID + ':' +\n     * hits.doc(i).get(FIELD_ID) + \" (score:\" + hits.score(i) + ')'); }\n     *****/\n    \n    // did we get the hits we expected\n    assertEquals(expectedIds.length, topdocs.totalHits);\n    for (int i = 0; i < topdocs.totalHits; i++) {\n      // System.out.println(i + \" exp: \" + expectedIds[i]);\n      // System.out.println(i + \" field: \" + hits.doc(i).get(FIELD_ID));\n      \n      int id = topdocs.scoreDocs[i].doc;\n      float score = topdocs.scoreDocs[i].score;\n      StoredDocument doc = s.doc(id);\n      assertEquals(expectedIds[i], doc.get(FIELD_ID));\n      boolean scoreEq = Math.abs(expectedScores[i] - score) < tolerance;\n      if (!scoreEq) {\n        System.out.println(i + \" warning, expected score: \" + expectedScores[i]\n            + \", actual \" + score);\n        System.out.println(s.explain(query, id));\n      }\n      assertEquals(expectedScores[i], score, tolerance);\n      assertEquals(s.explain(query, id).getValue(), score, tolerance);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#assertHits(IndexSearcher,Query,String,String[],float[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#assertHits(IndexSearcher,Query,String,String[],float[]).mjava","sourceNew":"  /**\n   * Checks to see if the hits are what we expected.\n   * \n   * @param query the query to execute\n   * @param description the description of the search\n   * @param expectedIds the expected document ids of the hits\n   * @param expectedScores the expected scores of the hits\n   */\n  protected static void assertHits(IndexSearcher s, Query query,\n      final String description, final String[] expectedIds,\n      final float[] expectedScores) throws IOException {\n    QueryUtils.check(random(), query, s);\n    \n    final float tolerance = 1e-5f;\n    \n    // Hits hits = searcher.search(query);\n    // hits normalizes and throws things off if one score is greater than 1.0\n    TopDocs topdocs = s.search(query, 10000);\n    \n    /*****\n     * // display the hits System.out.println(hits.length() +\n     * \" hits for search: \\\"\" + description + '\\\"'); for (int i = 0; i <\n     * hits.length(); i++) { System.out.println(\"  \" + FIELD_ID + ':' +\n     * hits.doc(i).get(FIELD_ID) + \" (score:\" + hits.score(i) + ')'); }\n     *****/\n    \n    // did we get the hits we expected\n    assertEquals(expectedIds.length, topdocs.totalHits);\n    for (int i = 0; i < topdocs.totalHits; i++) {\n      // System.out.println(i + \" exp: \" + expectedIds[i]);\n      // System.out.println(i + \" field: \" + hits.doc(i).get(FIELD_ID));\n      \n      int id = topdocs.scoreDocs[i].doc;\n      float score = topdocs.scoreDocs[i].score;\n      StoredDocument doc = s.doc(id);\n      assertEquals(expectedIds[i], doc.get(FIELD_ID));\n      boolean scoreEq = Math.abs(expectedScores[i] - score) < tolerance;\n      if (!scoreEq) {\n        System.out.println(i + \" warning, expected score: \" + expectedScores[i]\n            + \", actual \" + score);\n        System.out.println(s.explain(query, id));\n      }\n      assertEquals(expectedScores[i], score, tolerance);\n      assertEquals(s.explain(query, id).getValue(), score, tolerance);\n    }\n  }\n\n","sourceOld":"  /**\n   * Checks to see if the hits are what we expected.\n   * \n   * @param query the query to execute\n   * @param description the description of the search\n   * @param expectedIds the expected document ids of the hits\n   * @param expectedScores the expected scores of the hits\n   */\n  protected static void assertHits(IndexSearcher s, Query query,\n      final String description, final String[] expectedIds,\n      final float[] expectedScores) throws IOException {\n    QueryUtils.check(random(), query, s);\n    \n    final float tolerance = 1e-5f;\n    \n    // Hits hits = searcher.search(query);\n    // hits normalizes and throws things off if one score is greater than 1.0\n    TopDocs topdocs = s.search(query, null, 10000);\n    \n    /*****\n     * // display the hits System.out.println(hits.length() +\n     * \" hits for search: \\\"\" + description + '\\\"'); for (int i = 0; i <\n     * hits.length(); i++) { System.out.println(\"  \" + FIELD_ID + ':' +\n     * hits.doc(i).get(FIELD_ID) + \" (score:\" + hits.score(i) + ')'); }\n     *****/\n    \n    // did we get the hits we expected\n    assertEquals(expectedIds.length, topdocs.totalHits);\n    for (int i = 0; i < topdocs.totalHits; i++) {\n      // System.out.println(i + \" exp: \" + expectedIds[i]);\n      // System.out.println(i + \" field: \" + hits.doc(i).get(FIELD_ID));\n      \n      int id = topdocs.scoreDocs[i].doc;\n      float score = topdocs.scoreDocs[i].score;\n      StoredDocument doc = s.doc(id);\n      assertEquals(expectedIds[i], doc.get(FIELD_ID));\n      boolean scoreEq = Math.abs(expectedScores[i] - score) < tolerance;\n      if (!scoreEq) {\n        System.out.println(i + \" warning, expected score: \" + expectedScores[i]\n            + \", actual \" + score);\n        System.out.println(s.explain(query, id));\n      }\n      assertEquals(expectedScores[i], score, tolerance);\n      assertEquals(s.explain(query, id).getValue(), score, tolerance);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e75448368ba628d73e9967b45e29c40bbfe39fa","date":1441768575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#assertHits(IndexSearcher,Query,String,String[],float[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Checks to see if the hits are what we expected.\n   * \n   * @param query the query to execute\n   * @param description the description of the search\n   * @param expectedIds the expected document ids of the hits\n   * @param expectedScores the expected scores of the hits\n   */\n  protected static void assertHits(IndexSearcher s, Query query,\n      final String description, final String[] expectedIds,\n      final float[] expectedScores) throws IOException {\n    QueryUtils.check(random(), query, s);\n    \n    final float tolerance = 1e-5f;\n    \n    // Hits hits = searcher.search(query);\n    // hits normalizes and throws things off if one score is greater than 1.0\n    TopDocs topdocs = s.search(query, 10000);\n    \n    /*****\n     * // display the hits System.out.println(hits.length() +\n     * \" hits for search: \\\"\" + description + '\\\"'); for (int i = 0; i <\n     * hits.length(); i++) { System.out.println(\"  \" + FIELD_ID + ':' +\n     * hits.doc(i).get(FIELD_ID) + \" (score:\" + hits.score(i) + ')'); }\n     *****/\n    \n    // did we get the hits we expected\n    assertEquals(expectedIds.length, topdocs.totalHits);\n    for (int i = 0; i < topdocs.totalHits; i++) {\n      // System.out.println(i + \" exp: \" + expectedIds[i]);\n      // System.out.println(i + \" field: \" + hits.doc(i).get(FIELD_ID));\n      \n      int id = topdocs.scoreDocs[i].doc;\n      float score = topdocs.scoreDocs[i].score;\n      StoredDocument doc = s.doc(id);\n      assertEquals(expectedIds[i], doc.get(FIELD_ID));\n      boolean scoreEq = Math.abs(expectedScores[i] - score) < tolerance;\n      if (!scoreEq) {\n        System.out.println(i + \" warning, expected score: \" + expectedScores[i]\n            + \", actual \" + score);\n        System.out.println(s.explain(query, id));\n      }\n      assertEquals(expectedScores[i], score, tolerance);\n      assertEquals(s.explain(query, id).getValue(), score, tolerance);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["1d028314cced5858683a1bb4741423d0f934257b"],"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"1d028314cced5858683a1bb4741423d0f934257b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e75448368ba628d73e9967b45e29c40bbfe39fa":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e75448368ba628d73e9967b45e29c40bbfe39fa"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6e75448368ba628d73e9967b45e29c40bbfe39fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["6e75448368ba628d73e9967b45e29c40bbfe39fa"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}