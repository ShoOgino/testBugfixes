{"path":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","commits":[{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#deleteFile(String,boolean).mjava","sourceNew":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced) {\n      if (noDeleteOpenFile && openFiles.containsKey(name)) {\n        throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\");\n      }\n    }\n    delegate.deleteFile(name);\n  }\n\n","sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced) {\n      if (noDeleteOpenFile && openFiles.containsKey(name)) {\n        throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot delete\");\n      }\n    }\n    super.deleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a186ae8733084223c22044e935e4ef848a143d1","date":1289694819,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","sourceNew":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && noDeleteOpenFile) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    delegate.deleteFile(name);\n  }\n\n","sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced) {\n      if (noDeleteOpenFile && openFiles.containsKey(name)) {\n        throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\");\n      }\n    }\n    delegate.deleteFile(name);\n  }\n\n","bugFix":["c65000dee855f8d7329bd4f6310cb44af4d63bd3","e82780afe6097066eb5befb86e9432f077667e3d","a05409176bd65129d67a785ee70e881e238a9aef"],"bugIntro":["527cc14542789f47d75da436cb4287d1ab887e34","527cc14542789f47d75da436cb4287d1ab887e34","527cc14542789f47d75da436cb4287d1ab887e34"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c498d3f8d75170b121f5eda2c6210ac5beb5d411","date":1289726298,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","sourceNew":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && noDeleteOpenFile) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    delegate.deleteFile(name);\n  }\n\n","sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced) {\n      if (noDeleteOpenFile && openFiles.containsKey(name)) {\n        throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\");\n      }\n    }\n    delegate.deleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","sourceNew":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && noDeleteOpenFile) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    delegate.deleteFile(name);\n  }\n\n","sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && noDeleteOpenFile) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    delegate.deleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","sourceNew":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && noDeleteOpenFile) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    delegate.deleteFile(name);\n  }\n\n","sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && noDeleteOpenFile) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    delegate.deleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && noDeleteOpenFile) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    delegate.deleteFile(name);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","sourceNew":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && noDeleteOpenFile) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    delegate.deleteFile(name);\n  }\n\n","sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && noDeleteOpenFile) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    delegate.deleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","sourceNew":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && noDeleteOpenFile) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    delegate.deleteFile(name);\n  }\n\n","sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && noDeleteOpenFile) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    delegate.deleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#deleteFile(String,boolean).mjava","sourceNew":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && noDeleteOpenFile) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    delegate.deleteFile(name);\n  }\n\n","sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    maybeYield();\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced && noDeleteOpenFile) {\n      if (openFiles.containsKey(name)) {\n        openFilesDeleted.add(name);\n        throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot delete\"), name, true);\n      } else {\n        openFilesDeleted.remove(name);\n      }\n    }\n    delegate.deleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a186ae8733084223c22044e935e4ef848a143d1":["a05409176bd65129d67a785ee70e881e238a9aef"],"53a31399f2471493d67b19a95c028a74e0113b6a":["2a186ae8733084223c22044e935e4ef848a143d1"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["c498d3f8d75170b121f5eda2c6210ac5beb5d411","53a31399f2471493d67b19a95c028a74e0113b6a"],"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["a05409176bd65129d67a785ee70e881e238a9aef","2a186ae8733084223c22044e935e4ef848a143d1"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53a31399f2471493d67b19a95c028a74e0113b6a"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["53a31399f2471493d67b19a95c028a74e0113b6a"]},"commit2Childs":{"2a186ae8733084223c22044e935e4ef848a143d1":["53a31399f2471493d67b19a95c028a74e0113b6a","c498d3f8d75170b121f5eda2c6210ac5beb5d411"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a05409176bd65129d67a785ee70e881e238a9aef","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a05409176bd65129d67a785ee70e881e238a9aef":["2a186ae8733084223c22044e935e4ef848a143d1","c498d3f8d75170b121f5eda2c6210ac5beb5d411"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}