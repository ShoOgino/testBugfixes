{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkForMissingCollection(String).mjava","commits":[{"id":"0eff89b16ebd0046c839c5d02ee44500be5c7886","date":1355766557,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkForMissingCollection(String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5c3bd3f7ec16ed20a3fef5028635c873f68259","date":1356103097,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkForMissingCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkForMissingCollection(String).mjava","sourceNew":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkForMissingCollection(String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdc8313ba7bdaaa48ff54059d0eabff4436ab175","date":1386102048,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkForMissingCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkForMissingCollection(String).mjava","sourceNew":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n//      Map<String,DocCollection> collections = clusterState\n//          .getCollectionStates();\n      if (! clusterState.hasCollection(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkForMissingCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkForMissingCollection(String).mjava","sourceNew":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n//      Map<String,DocCollection> collections = clusterState\n//          .getCollectionStates();\n      if (! clusterState.hasCollection(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3a46663789411cdf016145a96a40cf861798ae3","date":1395119088,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkForMissingCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkForMissingCollection(String).mjava","sourceNew":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n      if (! clusterState.hasCollection(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n//      Map<String,DocCollection> collections = clusterState\n//          .getCollectionStates();\n      if (! clusterState.hasCollection(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"963b0a9b072593721af39e1d9b815fba17e88e7f","date":1395120846,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkForMissingCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkForMissingCollection(String).mjava","sourceNew":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n//      Map<String,DocCollection> collections = clusterState\n//          .getCollectionStates();\n      if (! clusterState.hasCollection(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n      if (! clusterState.hasCollection(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkForMissingCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkForMissingCollection(String).mjava","sourceNew":"  protected void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n//      Map<String,DocCollection> collections = clusterState\n//          .getCollectionStates();\n      if (! clusterState.hasCollection(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 45000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n//      Map<String,DocCollection> collections = clusterState\n//          .getCollectionStates();\n      if (! clusterState.hasCollection(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"963b0a9b072593721af39e1d9b815fba17e88e7f":["d3a46663789411cdf016145a96a40cf861798ae3"],"0f5c3bd3f7ec16ed20a3fef5028635c873f68259":["0eff89b16ebd0046c839c5d02ee44500be5c7886"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f5c3bd3f7ec16ed20a3fef5028635c873f68259"],"d3a46663789411cdf016145a96a40cf861798ae3":["cdc8313ba7bdaaa48ff54059d0eabff4436ab175"],"0eff89b16ebd0046c839c5d02ee44500be5c7886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["0f5c3bd3f7ec16ed20a3fef5028635c873f68259","cdc8313ba7bdaaa48ff54059d0eabff4436ab175"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["963b0a9b072593721af39e1d9b815fba17e88e7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"cdc8313ba7bdaaa48ff54059d0eabff4436ab175":["0f5c3bd3f7ec16ed20a3fef5028635c873f68259"]},"commit2Childs":{"963b0a9b072593721af39e1d9b815fba17e88e7f":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"0f5c3bd3f7ec16ed20a3fef5028635c873f68259":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cdc8313ba7bdaaa48ff54059d0eabff4436ab175"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d3a46663789411cdf016145a96a40cf861798ae3":["963b0a9b072593721af39e1d9b815fba17e88e7f"],"0eff89b16ebd0046c839c5d02ee44500be5c7886":["0f5c3bd3f7ec16ed20a3fef5028635c873f68259"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0eff89b16ebd0046c839c5d02ee44500be5c7886"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cdc8313ba7bdaaa48ff54059d0eabff4436ab175":["d3a46663789411cdf016145a96a40cf861798ae3","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}