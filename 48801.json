{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","commits":[{"id":"77925d097d69ba9a9806554c5afe4779fafa142d","date":1365611122,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader), tr);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b8969d0d5af68b213a9b3eb175a7efdfc7205083","b8969d0d5af68b213a9b3eb175a7efdfc7205083"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","sourceNew":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader), tr);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader), tr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","sourceNew":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader), tr);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader), tr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["77925d097d69ba9a9806554c5afe4779fafa142d"],"77925d097d69ba9a9806554c5afe4779fafa142d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["77925d097d69ba9a9806554c5afe4779fafa142d","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"77925d097d69ba9a9806554c5afe4779fafa142d":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77925d097d69ba9a9806554c5afe4779fafa142d"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}