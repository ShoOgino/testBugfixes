{"path":"src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","commits":[{"id":"508015da16e0823a4da76b506adc4be0169117f1","date":1205490918,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new KeywordAnalyzer(), true, MaxFieldLength.LIMITED);\n    iwriter.setMergeScheduler(new SerialMergeScheduler());\n    IndexReader reader = IndexReader.open(dir);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.UN_TOKENIZED));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new KeywordAnalyzer(), true, MaxFieldLength.LIMITED);\n    iwriter.setMergeScheduler(new SerialMergeScheduler());\n    IndexReader reader = IndexReader.open(dir);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new KeywordAnalyzer(), true, MaxFieldLength.LIMITED);\n    iwriter.setMergeScheduler(new SerialMergeScheduler());\n    IndexReader reader = IndexReader.open(dir);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.UN_TOKENIZED));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4517bc1885b0992d66724c359b9d47da67ab30f2","date":1233977424,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new KeywordAnalyzer(), true, MaxFieldLength.LIMITED);\n    iwriter.setMergeScheduler(new SerialMergeScheduler());\n    IndexReader reader = IndexReader.open(dir);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new KeywordAnalyzer(), true, MaxFieldLength.LIMITED);\n    iwriter.setMergeScheduler(new SerialMergeScheduler());\n    IndexReader reader = IndexReader.open(dir);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new KeywordAnalyzer(), true, MaxFieldLength.LIMITED);\n    iwriter.setMergeScheduler(new SerialMergeScheduler());\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new KeywordAnalyzer(), true, MaxFieldLength.LIMITED);\n    iwriter.setMergeScheduler(new SerialMergeScheduler());\n    IndexReader reader = IndexReader.open(dir);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new KeywordAnalyzer(), true, MaxFieldLength.LIMITED);\n    iwriter.setMergeScheduler(new SerialMergeScheduler());\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new KeywordAnalyzer(), true, MaxFieldLength.LIMITED);\n    iwriter.setMergeScheduler(new SerialMergeScheduler());\n    IndexReader reader = IndexReader.open(dir);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE).setAnalyzer(\n        new KeywordAnalyzer()).setMergeScheduler(new SerialMergeScheduler()));\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new KeywordAnalyzer(), true, MaxFieldLength.LIMITED);\n    iwriter.setMergeScheduler(new SerialMergeScheduler());\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new KeywordAnalyzer(), true, MaxFieldLength.LIMITED);\n    iwriter.setMergeScheduler(new SerialMergeScheduler());\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE).setAnalyzer(\n        new KeywordAnalyzer()).setMergeScheduler(new SerialMergeScheduler()));\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new KeywordAnalyzer(), true, MaxFieldLength.LIMITED);\n    iwriter.setMergeScheduler(new SerialMergeScheduler());\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new KeywordAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["4517bc1885b0992d66724c359b9d47da67ab30f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["4517bc1885b0992d66724c359b9d47da67ab30f2","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["0a046c0c310bc77931fc8441bd920053b607dd14"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["508015da16e0823a4da76b506adc4be0169117f1"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"508015da16e0823a4da76b506adc4be0169117f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4517bc1885b0992d66724c359b9d47da67ab30f2":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["508015da16e0823a4da76b506adc4be0169117f1"],"0a046c0c310bc77931fc8441bd920053b607dd14":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["4517bc1885b0992d66724c359b9d47da67ab30f2"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"508015da16e0823a4da76b506adc4be0169117f1":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"4517bc1885b0992d66724c359b9d47da67ab30f2":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}