{"path":"solr/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","commits":[{"id":"794957d0f3853445bdf9319bfb72f8b8c2443a7d","date":1301088393,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n    \n    // Legacy behavior? \"score\" == \"*,score\"  Distributed tests for this\n    if( fields.size() == 1 && _wantsScore ) {\n      _wantsAllFields = true;\n    }\n    \n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n        \n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1c76c72faecc7c9b683ad67e99240c975ee37b3","date":1301109514,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    // Legacy behavior? \"score\" == \"*,score\"  Distributed tests for this\n    if( fields.size() == 1 && _wantsScore ) {\n      _wantsAllFields = true;\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n    \n    // Legacy behavior? \"score\" == \"*,score\"  Distributed tests for this\n    if( fields.size() == 1 && _wantsScore ) {\n      _wantsAllFields = true;\n    }\n    \n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n        \n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    // Legacy behavior? \"score\" == \"*,score\"  Distributed tests for this\n    if( fields.size() == 1 && _wantsScore ) {\n      _wantsAllFields = true;\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    // Legacy behavior? \"score\" == \"*,score\"  Distributed tests for this\n    if( fields.size() == 1 && _wantsScore ) {\n      _wantsAllFields = true;\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    // Legacy behavior? \"score\" == \"*,score\"  Distributed tests for this\n    if( fields.size() == 1 && _wantsScore ) {\n      _wantsAllFields = true;\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    // Legacy behavior? \"score\" == \"*,score\"  Distributed tests for this\n    if( fields.size() == 1 && _wantsScore ) {\n      _wantsAllFields = true;\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    // Legacy behavior? \"score\" == \"*,score\"  Distributed tests for this\n    if( fields.size() == 1 && _wantsScore ) {\n      _wantsAllFields = true;\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    // Legacy behavior? \"score\" == \"*,score\"  Distributed tests for this\n    if( fields.size() == 1 && _wantsScore ) {\n      _wantsAllFields = true;\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    // Legacy behavior? \"score\" == \"*,score\"  Distributed tests for this\n    if( fields.size() == 1 && _wantsScore ) {\n      _wantsAllFields = true;\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    if( rename.size() > 0 ) {\n      for( int i=0; i<rename.size(); i++ ) {\n        okFieldNames.add( rename.getVal(i) );\n      }\n      augmenters.addTransformer( new RenameFieldsTransformer( rename ) );\n    }\n\n    // Legacy behavior? \"score\" == \"*,score\"  Distributed tests for this\n    if( fields.size() == 1 && _wantsScore ) {\n      _wantsAllFields = true;\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"c26f00b574427b55127e869b935845554afde1fa":["c1c76c72faecc7c9b683ad67e99240c975ee37b3","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c1c76c72faecc7c9b683ad67e99240c975ee37b3":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","794957d0f3853445bdf9319bfb72f8b8c2443a7d","d619839baa8ce5503e496b94a9e42ad6f079293f"],"c1c76c72faecc7c9b683ad67e99240c975ee37b3":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}