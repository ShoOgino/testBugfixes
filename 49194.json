{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRequestStateAfterCompletion(String,int,SolrClient).mjava","commits":[{"id":"b34744cdee27b92844fd3b14211ae16ea1d50413","date":1434566770,"type":1,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRequestStateAfterCompletion(String,int,SolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#getRequestStateAfterCompletion(String,int,SolrClient).mjava","sourceNew":"  protected String getRequestStateAfterCompletion(String requestId, int waitForSeconds, SolrClient client)\n      throws IOException, SolrServerException {\n    String state = null;\n    long maxWait = System.nanoTime() + TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS);\n\n    while (System.nanoTime() < maxWait)  {\n      state = getRequestState(requestId, client);\n      if(state.equals(\"completed\") || state.equals(\"failed\"))\n        return state;\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n      }\n    }\n\n    return state;\n  }\n\n","sourceOld":"  private String getRequestStateAfterCompletion(String requestId, int waitForSeconds, SolrClient client)\n      throws IOException, SolrServerException {\n    String state = null;\n    long maxWait = System.nanoTime() + TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS);\n\n    while (System.nanoTime() < maxWait)  {\n      state = getRequestState(requestId, client);\n      if(state.equals(\"completed\") || state.equals(\"failed\"))\n        return state;\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n      }\n    }\n\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4039b5ea46ea51770a47714b5f486a607ffc5a66","date":1438356910,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRequestStateAfterCompletion(String,int,SolrClient).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRequestStateAfterCompletion(String,int,SolrClient).mjava","sourceNew":"  static String getRequestStateAfterCompletion(String requestId, int waitForSeconds, SolrClient client)\n      throws IOException, SolrServerException {\n    String state = null;\n    long maxWait = System.nanoTime() + TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS);\n\n    while (System.nanoTime() < maxWait)  {\n      state = getRequestState(requestId, client);\n      if(state.equals(\"completed\") || state.equals(\"failed\"))\n        return state;\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n      }\n    }\n\n    return state;\n  }\n\n","sourceOld":"  protected String getRequestStateAfterCompletion(String requestId, int waitForSeconds, SolrClient client)\n      throws IOException, SolrServerException {\n    String state = null;\n    long maxWait = System.nanoTime() + TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS);\n\n    while (System.nanoTime() < maxWait)  {\n      state = getRequestState(requestId, client);\n      if(state.equals(\"completed\") || state.equals(\"failed\"))\n        return state;\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n      }\n    }\n\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRequestStateAfterCompletion(String,int,SolrClient).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRequestStateAfterCompletion(String,int,SolrClient).mjava","sourceNew":"  static String getRequestStateAfterCompletion(String requestId, int waitForSeconds, SolrClient client)\n      throws IOException, SolrServerException {\n    String state = null;\n    final TimeOut timeout = new TimeOut(waitForSeconds, TimeUnit.SECONDS);\n\n    while (! timeout.hasTimedOut())  {\n      state = getRequestState(requestId, client);\n      if(state.equals(\"completed\") || state.equals(\"failed\"))\n        return state;\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n      }\n    }\n\n    return state;\n  }\n\n","sourceOld":"  static String getRequestStateAfterCompletion(String requestId, int waitForSeconds, SolrClient client)\n      throws IOException, SolrServerException {\n    String state = null;\n    long maxWait = System.nanoTime() + TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS);\n\n    while (System.nanoTime() < maxWait)  {\n      state = getRequestState(requestId, client);\n      if(state.equals(\"completed\") || state.equals(\"failed\"))\n        return state;\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n      }\n    }\n\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3088cdaa24ffe3ef44713ac9484114bd56eca2af","date":1453441194,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRequestStateAfterCompletion(String,int,SolrClient).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRequestStateAfterCompletion(String,int,SolrClient).mjava","sourceNew":"  static RequestStatusState getRequestStateAfterCompletion(String requestId, int waitForSeconds, SolrClient client)\n      throws IOException, SolrServerException {\n    RequestStatusState state = null;\n    final TimeOut timeout = new TimeOut(waitForSeconds, TimeUnit.SECONDS);\n\n    while (!timeout.hasTimedOut())  {\n      state = getRequestState(requestId, client);\n      if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n        return state;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n      }\n    }\n\n    return state;\n  }\n\n","sourceOld":"  static String getRequestStateAfterCompletion(String requestId, int waitForSeconds, SolrClient client)\n      throws IOException, SolrServerException {\n    String state = null;\n    final TimeOut timeout = new TimeOut(waitForSeconds, TimeUnit.SECONDS);\n\n    while (! timeout.hasTimedOut())  {\n      state = getRequestState(requestId, client);\n      if(state.equals(\"completed\") || state.equals(\"failed\"))\n        return state;\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n      }\n    }\n\n    return state;\n  }\n\n","bugFix":null,"bugIntro":["69e6520a21709190413a63084ed135271aab1a7c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRequestStateAfterCompletion(String,int,SolrClient).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRequestStateAfterCompletion(String,int,SolrClient).mjava","sourceNew":"  static RequestStatusState getRequestStateAfterCompletion(String requestId, int waitForSeconds, SolrClient client)\n      throws IOException, SolrServerException {\n    RequestStatusState state = null;\n    final TimeOut timeout = new TimeOut(waitForSeconds, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    while (!timeout.hasTimedOut())  {\n      state = getRequestState(requestId, client);\n      if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n        return state;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n      }\n    }\n\n    return state;\n  }\n\n","sourceOld":"  static RequestStatusState getRequestStateAfterCompletion(String requestId, int waitForSeconds, SolrClient client)\n      throws IOException, SolrServerException {\n    RequestStatusState state = null;\n    final TimeOut timeout = new TimeOut(waitForSeconds, TimeUnit.SECONDS);\n\n    while (!timeout.hasTimedOut())  {\n      state = getRequestState(requestId, client);\n      if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n        return state;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n      }\n    }\n\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab6131420a270c49b653c969cc1dbbaf7d1b36e7","date":1550697886,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRequestStateAfterCompletion(String,int,SolrClient).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRequestStateAfterCompletion(String,int,SolrClient).mjava","sourceNew":"  static RequestStatusState getRequestStateAfterCompletion(String requestId, int waitForSeconds, SolrClient client)\n      throws IOException, SolrServerException {\n    RequestStatusState state = null;\n    final TimeOut timeout = new TimeOut(waitForSeconds, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    while (!timeout.hasTimedOut())  {\n      state = getRequestState(requestId, client);\n      if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n        return state;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(\"Interrupted whie waiting for request completion. Last state seen: \" + state, e);\n      }\n    }\n\n    return state;\n  }\n\n","sourceOld":"  static RequestStatusState getRequestStateAfterCompletion(String requestId, int waitForSeconds, SolrClient client)\n      throws IOException, SolrServerException {\n    RequestStatusState state = null;\n    final TimeOut timeout = new TimeOut(waitForSeconds, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    while (!timeout.hasTimedOut())  {\n      state = getRequestState(requestId, client);\n      if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n        return state;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n      }\n    }\n\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69e6520a21709190413a63084ed135271aab1a7c","date":1556607462,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRequestStateAfterCompletion(String,int,SolrClient).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRequestStateAfterCompletion(String,int,SolrClient).mjava","sourceNew":"  public static RequestStatusState getRequestStateAfterCompletion(String requestId, int waitForSeconds, SolrClient client)\n      throws IOException, SolrServerException {\n    RequestStatusState state = null;\n    final TimeOut timeout = new TimeOut(waitForSeconds, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    while (!timeout.hasTimedOut())  {\n      state = getRequestState(requestId, client);\n      if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n        return state;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(\"Interrupted whie waiting for request completion. Last state seen: \" + state, e);\n      }\n    }\n\n    return state;\n  }\n\n","sourceOld":"  static RequestStatusState getRequestStateAfterCompletion(String requestId, int waitForSeconds, SolrClient client)\n      throws IOException, SolrServerException {\n    RequestStatusState state = null;\n    final TimeOut timeout = new TimeOut(waitForSeconds, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    while (!timeout.hasTimedOut())  {\n      state = getRequestState(requestId, client);\n      if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n        return state;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(\"Interrupted whie waiting for request completion. Last state seen: \" + state, e);\n      }\n    }\n\n    return state;\n  }\n\n","bugFix":["3088cdaa24ffe3ef44713ac9484114bd56eca2af"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab6131420a270c49b653c969cc1dbbaf7d1b36e7":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"3088cdaa24ffe3ef44713ac9484114bd56eca2af":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"69e6520a21709190413a63084ed135271aab1a7c":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7"],"b34744cdee27b92844fd3b14211ae16ea1d50413":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4039b5ea46ea51770a47714b5f486a607ffc5a66":["b34744cdee27b92844fd3b14211ae16ea1d50413"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["4039b5ea46ea51770a47714b5f486a607ffc5a66"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["3088cdaa24ffe3ef44713ac9484114bd56eca2af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["69e6520a21709190413a63084ed135271aab1a7c"]},"commit2Childs":{"ab6131420a270c49b653c969cc1dbbaf7d1b36e7":["69e6520a21709190413a63084ed135271aab1a7c"],"3088cdaa24ffe3ef44713ac9484114bd56eca2af":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"69e6520a21709190413a63084ed135271aab1a7c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b34744cdee27b92844fd3b14211ae16ea1d50413":["4039b5ea46ea51770a47714b5f486a607ffc5a66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b34744cdee27b92844fd3b14211ae16ea1d50413"],"4039b5ea46ea51770a47714b5f486a607ffc5a66":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["3088cdaa24ffe3ef44713ac9484114bd56eca2af"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}