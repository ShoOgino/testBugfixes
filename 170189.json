{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillDownQuery#merge(String,String[]).mjava","commits":[{"id":"9fdb15e93058f718a65d564872aadbed5ca78296","date":1384720267,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillDownQuery#merge(String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Merges (ORs) a new path into an existing AND'd\n   *  clause. */ \n  private void merge(String dim, String[] path) {\n    int index = drillDownDims.get(dim);\n    if (query.getClauses().length == drillDownDims.size()+1) {\n      index++;\n    }\n    ConstantScoreQuery q = (ConstantScoreQuery) query.clauses().get(index).getQuery();\n    if ((q.getQuery() instanceof BooleanQuery) == false) {\n      // App called .add(dim, customQuery) and then tried to\n      // merge a facet label in:\n      throw new RuntimeException(\"cannot merge with custom Query\");\n    }\n    String indexedField = config.getDimConfig(dim).indexedFieldName;\n\n    // nocommit pull this from FacetsConfig\n    char delimChar = Constants.DEFAULT_DELIM_CHAR;\n    BooleanQuery bq = (BooleanQuery) q.getQuery();\n    bq.add(new TermQuery(term(indexedField, delimChar, dim, path)), Occur.SHOULD);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fe35a54e036b5f516cb04b39f3eb96a55812376","date":1384725462,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillDownQuery#merge(String,String[]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillDownQuery#merge(String,String[]).mjava","sourceNew":"  /** Merges (ORs) a new path into an existing AND'd\n   *  clause. */ \n  private void merge(String dim, String[] path) {\n    int index = drillDownDims.get(dim);\n    if (query.getClauses().length == drillDownDims.size()+1) {\n      index++;\n    }\n    ConstantScoreQuery q = (ConstantScoreQuery) query.clauses().get(index).getQuery();\n    if ((q.getQuery() instanceof BooleanQuery) == false) {\n      // App called .add(dim, customQuery) and then tried to\n      // merge a facet label in:\n      throw new RuntimeException(\"cannot merge with custom Query\");\n    }\n    String indexedField = config.getDimConfig(dim).indexedFieldName;\n\n    BooleanQuery bq = (BooleanQuery) q.getQuery();\n    bq.add(new TermQuery(term(indexedField, dim, path)), Occur.SHOULD);\n  }\n\n","sourceOld":"  /** Merges (ORs) a new path into an existing AND'd\n   *  clause. */ \n  private void merge(String dim, String[] path) {\n    int index = drillDownDims.get(dim);\n    if (query.getClauses().length == drillDownDims.size()+1) {\n      index++;\n    }\n    ConstantScoreQuery q = (ConstantScoreQuery) query.clauses().get(index).getQuery();\n    if ((q.getQuery() instanceof BooleanQuery) == false) {\n      // App called .add(dim, customQuery) and then tried to\n      // merge a facet label in:\n      throw new RuntimeException(\"cannot merge with custom Query\");\n    }\n    String indexedField = config.getDimConfig(dim).indexedFieldName;\n\n    // nocommit pull this from FacetsConfig\n    char delimChar = Constants.DEFAULT_DELIM_CHAR;\n    BooleanQuery bq = (BooleanQuery) q.getQuery();\n    bq.add(new TermQuery(term(indexedField, delimChar, dim, path)), Occur.SHOULD);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18edd2e3f5560087a37442fa424cbbed7c295ebc","date":1384813900,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillDownQuery#merge(String,String[]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillDownQuery#merge(String,String[]).mjava","sourceNew":"  /** Merges (ORs) a new path into an existing AND'd\n   *  clause. */ \n  private void merge(String dim, String[] path) {\n    int index = drillDownDims.get(dim);\n    if (query.getClauses().length == drillDownDims.size()+1) {\n      index++;\n    }\n    ConstantScoreQuery q = (ConstantScoreQuery) query.clauses().get(index).getQuery();\n    if ((q.getQuery() instanceof BooleanQuery) == false) {\n      // App called .add(dim, customQuery) and then tried to\n      // merge a facet label in:\n      throw new RuntimeException(\"cannot merge with custom Query\");\n    }\n    String indexedField = config.getDimConfig(dim).indexFieldName;\n\n    BooleanQuery bq = (BooleanQuery) q.getQuery();\n    bq.add(new TermQuery(term(indexedField, dim, path)), Occur.SHOULD);\n  }\n\n","sourceOld":"  /** Merges (ORs) a new path into an existing AND'd\n   *  clause. */ \n  private void merge(String dim, String[] path) {\n    int index = drillDownDims.get(dim);\n    if (query.getClauses().length == drillDownDims.size()+1) {\n      index++;\n    }\n    ConstantScoreQuery q = (ConstantScoreQuery) query.clauses().get(index).getQuery();\n    if ((q.getQuery() instanceof BooleanQuery) == false) {\n      // App called .add(dim, customQuery) and then tried to\n      // merge a facet label in:\n      throw new RuntimeException(\"cannot merge with custom Query\");\n    }\n    String indexedField = config.getDimConfig(dim).indexedFieldName;\n\n    BooleanQuery bq = (BooleanQuery) q.getQuery();\n    bq.add(new TermQuery(term(indexedField, dim, path)), Occur.SHOULD);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillDownQuery#merge(String,String[]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillDownQuery#merge(String,String[]).mjava","sourceNew":"  /** Merges (ORs) a new path into an existing AND'd\n   *  clause. */ \n  private void merge(String dim, String[] path) {\n    int index = drillDownDims.get(dim);\n    if (query.getClauses().length == drillDownDims.size()+1) {\n      index++;\n    }\n    ConstantScoreQuery q = (ConstantScoreQuery) query.clauses().get(index).getQuery();\n    if ((q.getQuery() instanceof BooleanQuery) == false) {\n      // App called .add(dim, customQuery) and then tried to\n      // merge a facet label in:\n      throw new RuntimeException(\"cannot merge with custom Query\");\n    }\n    String indexedField = config.getDimConfig(dim).indexFieldName;\n\n    BooleanQuery bq = (BooleanQuery) q.getQuery();\n    bq.add(new TermQuery(term(indexedField, dim, path)), Occur.SHOULD);\n  }\n\n","sourceOld":"  /** Merges (ORs) a new path into an existing AND'd\n   *  clause. */ \n  private void merge(String dim, String[] path) {\n    int index = drillDownDims.get(dim);\n    if (query.getClauses().length == drillDownDims.size()+1) {\n      index++;\n    }\n    ConstantScoreQuery q = (ConstantScoreQuery) query.clauses().get(index).getQuery();\n    if ((q.getQuery() instanceof BooleanQuery) == false) {\n      // App called .add(dim, customQuery) and then tried to\n      // merge a facet label in:\n      throw new RuntimeException(\"cannot merge with custom Query\");\n    }\n    String indexedField = config.getDimConfig(dim).indexFieldName;\n\n    BooleanQuery bq = (BooleanQuery) q.getQuery();\n    bq.add(new TermQuery(term(indexedField, dim, path)), Occur.SHOULD);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fdb15e93058f718a65d564872aadbed5ca78296":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"18edd2e3f5560087a37442fa424cbbed7c295ebc":["9fe35a54e036b5f516cb04b39f3eb96a55812376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["18edd2e3f5560087a37442fa424cbbed7c295ebc"],"9fe35a54e036b5f516cb04b39f3eb96a55812376":["9fdb15e93058f718a65d564872aadbed5ca78296"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9fdb15e93058f718a65d564872aadbed5ca78296":["9fe35a54e036b5f516cb04b39f3eb96a55812376"],"18edd2e3f5560087a37442fa424cbbed7c295ebc":["21d36d0db865f7b84026b447bec653469a6e66df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fdb15e93058f718a65d564872aadbed5ca78296","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"9fe35a54e036b5f516cb04b39f3eb96a55812376":["18edd2e3f5560087a37442fa424cbbed7c295ebc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}