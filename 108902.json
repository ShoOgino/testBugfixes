{"path":"src/java/org/apache/lucene/search/SortField#getComparator(IndexReader[],int,int,boolean).mjava","commits":[{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SortField#getComparator(IndexReader[],int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the {@link FieldComparator} to use for sorting.\n   * @param subReaders array of {@link IndexReader} search\n   *   will step through\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @param reversed True if the SortField is reversed\n   * @return {@link FieldComparator} to use when sorting\n   */\n  protected FieldComparator getComparator(final IndexReader[] subReaders, final int numHits, final int sortPos, final boolean reversed) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, field, parser);\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, field, parser);\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, field, parser);\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, field, parser);\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, field, parser);\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, field, parser);\n\n    case SortField.CUSTOM:\n      assert factory == null && comparatorSource != null;\n      return comparatorSource.newComparator(field, subReaders, numHits, sortPos, reversed);\n\n    case SortField.STRING:\n      return new FieldComparator.StringOrdValComparator(numHits, field, sortPos, reversed);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.StringValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SortField#getComparator(int,int,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/SortField#getComparator(IndexReader[],int,int,boolean).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for sorting.\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @param reversed True if the SortField is reversed\n   * @return {@link FieldComparator} to use when sorting\n   */\n  protected FieldComparator getComparator(final int numHits, final int sortPos, final boolean reversed) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, field, parser);\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, field, parser);\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, field, parser);\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, field, parser);\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, field, parser);\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, field, parser);\n\n    case SortField.CUSTOM:\n      assert factory == null && comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reversed);\n\n    case SortField.STRING:\n      return new FieldComparator.StringOrdValComparator(numHits, field, sortPos, reversed);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.StringValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for sorting.\n   * @param subReaders array of {@link IndexReader} search\n   *   will step through\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @param reversed True if the SortField is reversed\n   * @return {@link FieldComparator} to use when sorting\n   */\n  protected FieldComparator getComparator(final IndexReader[] subReaders, final int numHits, final int sortPos, final boolean reversed) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, field, parser);\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, field, parser);\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, field, parser);\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, field, parser);\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, field, parser);\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, field, parser);\n\n    case SortField.CUSTOM:\n      assert factory == null && comparatorSource != null;\n      return comparatorSource.newComparator(field, subReaders, numHits, sortPos, reversed);\n\n    case SortField.STRING:\n      return new FieldComparator.StringOrdValComparator(numHits, field, sortPos, reversed);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.StringValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"63bc3238545c6012bd44f5d294077997f236bc4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64714133cf5ec732e3bbceee63351bb9af0117dc"]},"commit2Childs":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["63bc3238545c6012bd44f5d294077997f236bc4e"],"63bc3238545c6012bd44f5d294077997f236bc4e":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}