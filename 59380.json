{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","commits":[{"id":"97f74f84954e9fefbac4cb38b9bf339e1757600d","date":1533750605,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                            int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    // check bounding box (DISJOINT)\n    if (FutureArrays.compareUnsigned(minTriangle, minXOffset, minXOffset + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, 4 * LatLonPoint.BYTES) > 0 ||\n        FutureArrays.compareUnsigned(maxTriangle, maxXOffset, maxXOffset + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0 ||\n        FutureArrays.compareUnsigned(minTriangle, minYOffset, minYOffset + LatLonPoint.BYTES, bbox, 2 * LatLonPoint.BYTES, 3 * LatLonPoint.BYTES) > 0 ||\n        FutureArrays.compareUnsigned(maxTriangle, maxYOffset, maxYOffset + LatLonPoint.BYTES, bbox, 0, LatLonPoint.BYTES) < 0) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n\n    if (FutureArrays.compareUnsigned(minTriangle, minXOffset, minXOffset + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) > 0 &&\n        FutureArrays.compareUnsigned(maxTriangle, maxXOffset, maxXOffset + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, 4 * LatLonPoint.BYTES) < 0 &&\n        FutureArrays.compareUnsigned(minTriangle, minYOffset, minYOffset + LatLonPoint.BYTES, bbox, 0, LatLonPoint.BYTES) > 0 &&\n        FutureArrays.compareUnsigned(maxTriangle, maxYOffset, maxYOffset + LatLonPoint.BYTES, bbox, 2 * LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0) {\n      return Relation.CELL_INSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e48f589a9604e11db23a025a27efbf3d14ab4e3b","date":1539887418,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","sourceNew":"  @Override\n  protected Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                            int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    // check bounding box (DISJOINT)\n    if (FutureArrays.compareUnsigned(minTriangle, minXOffset, minXOffset + BYTES, bbox, 3 * BYTES, 4 * BYTES) > 0 ||\n        FutureArrays.compareUnsigned(maxTriangle, maxXOffset, maxXOffset + BYTES, bbox, BYTES, 2 * BYTES) < 0 ||\n        FutureArrays.compareUnsigned(minTriangle, minYOffset, minYOffset + BYTES, bbox, 2 * BYTES, 3 * BYTES) > 0 ||\n        FutureArrays.compareUnsigned(maxTriangle, maxYOffset, maxYOffset + BYTES, bbox, 0, BYTES) < 0) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n\n    if (FutureArrays.compareUnsigned(minTriangle, minXOffset, minXOffset + BYTES, bbox, BYTES, 2 * BYTES) >= 0 &&\n        FutureArrays.compareUnsigned(maxTriangle, maxXOffset, maxXOffset + BYTES, bbox, 3 * BYTES, 4 * BYTES) <= 0 &&\n        FutureArrays.compareUnsigned(minTriangle, minYOffset, minYOffset + BYTES, bbox, 0, BYTES) >= 0 &&\n        FutureArrays.compareUnsigned(maxTriangle, maxYOffset, maxYOffset + BYTES, bbox, 2 * BYTES, 3 * BYTES) <= 0) {\n      return Relation.CELL_INSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":"  @Override\n  protected Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                            int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    // check bounding box (DISJOINT)\n    if (FutureArrays.compareUnsigned(minTriangle, minXOffset, minXOffset + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, 4 * LatLonPoint.BYTES) > 0 ||\n        FutureArrays.compareUnsigned(maxTriangle, maxXOffset, maxXOffset + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0 ||\n        FutureArrays.compareUnsigned(minTriangle, minYOffset, minYOffset + LatLonPoint.BYTES, bbox, 2 * LatLonPoint.BYTES, 3 * LatLonPoint.BYTES) > 0 ||\n        FutureArrays.compareUnsigned(maxTriangle, maxYOffset, maxYOffset + LatLonPoint.BYTES, bbox, 0, LatLonPoint.BYTES) < 0) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n\n    if (FutureArrays.compareUnsigned(minTriangle, minXOffset, minXOffset + LatLonPoint.BYTES, bbox, LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) > 0 &&\n        FutureArrays.compareUnsigned(maxTriangle, maxXOffset, maxXOffset + LatLonPoint.BYTES, bbox, 3 * LatLonPoint.BYTES, 4 * LatLonPoint.BYTES) < 0 &&\n        FutureArrays.compareUnsigned(minTriangle, minYOffset, minYOffset + LatLonPoint.BYTES, bbox, 0, LatLonPoint.BYTES) > 0 &&\n        FutureArrays.compareUnsigned(maxTriangle, maxYOffset, maxYOffset + LatLonPoint.BYTES, bbox, 2 * LatLonPoint.BYTES, 2 * LatLonPoint.BYTES) < 0) {\n      return Relation.CELL_INSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d","date":1541178922,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","sourceNew":"  @Override\n  protected Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                            int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    Relation eastRelation = compareBBoxToRangeBBox(this.bbox, minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n    if (this.crossesDateline() && eastRelation == Relation.CELL_OUTSIDE_QUERY) {\n      return compareBBoxToRangeBBox(this.west, minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n    }\n\n    return eastRelation;\n  }\n\n","sourceOld":"  @Override\n  protected Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                            int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    // check bounding box (DISJOINT)\n    if (FutureArrays.compareUnsigned(minTriangle, minXOffset, minXOffset + BYTES, bbox, 3 * BYTES, 4 * BYTES) > 0 ||\n        FutureArrays.compareUnsigned(maxTriangle, maxXOffset, maxXOffset + BYTES, bbox, BYTES, 2 * BYTES) < 0 ||\n        FutureArrays.compareUnsigned(minTriangle, minYOffset, minYOffset + BYTES, bbox, 2 * BYTES, 3 * BYTES) > 0 ||\n        FutureArrays.compareUnsigned(maxTriangle, maxYOffset, maxYOffset + BYTES, bbox, 0, BYTES) < 0) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n\n    if (FutureArrays.compareUnsigned(minTriangle, minXOffset, minXOffset + BYTES, bbox, BYTES, 2 * BYTES) >= 0 &&\n        FutureArrays.compareUnsigned(maxTriangle, maxXOffset, maxXOffset + BYTES, bbox, 3 * BYTES, 4 * BYTES) <= 0 &&\n        FutureArrays.compareUnsigned(minTriangle, minYOffset, minYOffset + BYTES, bbox, 0, BYTES) >= 0 &&\n        FutureArrays.compareUnsigned(maxTriangle, maxYOffset, maxYOffset + BYTES, bbox, 2 * BYTES, 3 * BYTES) <= 0) {\n      return Relation.CELL_INSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9feee35369998c08f5168e0808e67e09857d5bac","date":1544618795,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","sourceNew":"  @Override\n  protected Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                            int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    return rectangle2D.relateRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n  }\n\n","sourceOld":"  @Override\n  protected Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                            int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    Relation eastRelation = compareBBoxToRangeBBox(this.bbox, minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n    if (this.crossesDateline() && eastRelation == Relation.CELL_OUTSIDE_QUERY) {\n      return compareBBoxToRangeBBox(this.west, minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n    }\n\n    return eastRelation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e32619a05801247e931ce6b9998721600e247b0","date":1570166014,"type":3,"author":"Igor Motov","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","sourceNew":"  @Override\n  protected Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                            int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    if (queryRelation == QueryRelation.INTERSECTS || queryRelation == QueryRelation.DISJOINT) {\n      return rectangle2D.intersectRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n    }\n    return rectangle2D.relateRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n  }\n\n","sourceOld":"  @Override\n  protected Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                            int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    return rectangle2D.relateRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","sourceNew":"  @Override\n  protected Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                            int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    if (queryRelation == QueryRelation.INTERSECTS || queryRelation == QueryRelation.DISJOINT) {\n      return rectangle2D.intersectRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n    }\n    return rectangle2D.relateRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n  }\n\n","sourceOld":"  @Override\n  protected Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                            int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    return rectangle2D.relateRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#relateRangeBBoxToQuery(int,int,byte[],int,int,byte[]).mjava","sourceNew":"  @Override\n  protected Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                            int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    if (queryRelation == QueryRelation.INTERSECTS || queryRelation == QueryRelation.DISJOINT) {\n      return rectangle2D.intersectRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n    }\n    return rectangle2D.relateRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n  }\n\n","sourceOld":"  @Override\n  protected Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,\n                                            int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    if (queryRelation == QueryRelation.INTERSECTS || queryRelation == QueryRelation.DISJOINT) {\n      return rectangle2D.intersectRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n    }\n    return rectangle2D.relateRangeBBox(minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e48f589a9604e11db23a025a27efbf3d14ab4e3b":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"9feee35369998c08f5168e0808e67e09857d5bac":["d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d"],"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d":["e48f589a9604e11db23a025a27efbf3d14ab4e3b"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["5e32619a05801247e931ce6b9998721600e247b0"],"5e32619a05801247e931ce6b9998721600e247b0":["9feee35369998c08f5168e0808e67e09857d5bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"b0b597c65628ca9e73913a07e81691f8229bae35":["9feee35369998c08f5168e0808e67e09857d5bac","5e32619a05801247e931ce6b9998721600e247b0"]},"commit2Childs":{"e48f589a9604e11db23a025a27efbf3d14ab4e3b":["d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d"],"9feee35369998c08f5168e0808e67e09857d5bac":["5e32619a05801247e931ce6b9998721600e247b0","b0b597c65628ca9e73913a07e81691f8229bae35"],"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d":["9feee35369998c08f5168e0808e67e09857d5bac"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["e48f589a9604e11db23a025a27efbf3d14ab4e3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5e32619a05801247e931ce6b9998721600e247b0":["09c1e6d465800c73af60624bf9d4459a19f7940c","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}