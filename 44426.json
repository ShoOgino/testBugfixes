{"path":"solr/core/src/java/org/apache/solr/security/GenericHadoopAuthPlugin#getInitFilterConfig(Map[String,Object]).mjava","commits":[{"id":"29887daf839649150d96855b142b76f5c45d60d2","date":1482160504,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/GenericHadoopAuthPlugin#getInitFilterConfig(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig) {\n    Map<String, String> params = new HashMap<>();\n\n    String type = (String) Objects.requireNonNull(pluginConfig.get(HADOOP_AUTH_TYPE));\n    params.put(HADOOP_AUTH_TYPE, type);\n\n    String sysPropPrefix = (String) pluginConfig.getOrDefault(SYSPROP_PREFIX_PROPERTY, \"solr.\");\n    Collection<String> authConfigNames = (Collection<String>) pluginConfig.\n        getOrDefault(AUTH_CONFIG_NAMES_PROPERTY, Collections.emptyList());\n    Map<String,String> authConfigDefaults = (Map<String,String>) pluginConfig\n        .getOrDefault(DEFAULT_AUTH_CONFIGS_PROPERTY, Collections.emptyMap());\n    Map<String,String> proxyUserConfigs = (Map<String,String>) pluginConfig\n        .getOrDefault(PROXY_USER_CONFIGS, Collections.emptyMap());\n\n    for ( String configName : authConfigNames) {\n      String systemProperty = sysPropPrefix + configName;\n      String defaultConfigVal = authConfigDefaults.get(configName);\n      String configVal = System.getProperty(systemProperty, defaultConfigVal);\n      if (configVal != null) {\n        params.put(configName, configVal);\n      }\n    }\n\n    // Configure proxy user settings.\n    params.putAll(proxyUserConfigs);\n\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    log.info(\"Params: \"+params);\n\n    ZkController controller = coreContainer.getZkController();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return new IteratorEnumeration(params.keySet().iterator());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"HadoopAuthFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/GenericHadoopAuthPlugin#getInitFilterConfig(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig) {\n    Map<String, String> params = new HashMap<>();\n\n    String type = (String) Objects.requireNonNull(pluginConfig.get(HADOOP_AUTH_TYPE));\n    params.put(HADOOP_AUTH_TYPE, type);\n\n    String sysPropPrefix = (String) pluginConfig.getOrDefault(SYSPROP_PREFIX_PROPERTY, \"solr.\");\n    Collection<String> authConfigNames = (Collection<String>) pluginConfig.\n        getOrDefault(AUTH_CONFIG_NAMES_PROPERTY, Collections.emptyList());\n    Map<String,String> authConfigDefaults = (Map<String,String>) pluginConfig\n        .getOrDefault(DEFAULT_AUTH_CONFIGS_PROPERTY, Collections.emptyMap());\n    Map<String,String> proxyUserConfigs = (Map<String,String>) pluginConfig\n        .getOrDefault(PROXY_USER_CONFIGS, Collections.emptyMap());\n\n    for ( String configName : authConfigNames) {\n      String systemProperty = sysPropPrefix + configName;\n      String defaultConfigVal = authConfigDefaults.get(configName);\n      String configVal = System.getProperty(systemProperty, defaultConfigVal);\n      if (configVal != null) {\n        params.put(configName, configVal);\n      }\n    }\n\n    // Configure proxy user settings.\n    params.putAll(proxyUserConfigs);\n\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    log.info(\"Params: \"+params);\n\n    ZkController controller = coreContainer.getZkController();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return new IteratorEnumeration(params.keySet().iterator());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"HadoopAuthFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25f6c5644d9c1a92d25ef1d2764e5d93a580965f","date":1484798759,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/security/GenericHadoopAuthPlugin#getInitFilterConfig(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig) {\n    Map<String, String> params = new HashMap<>();\n\n    String type = (String) Objects.requireNonNull(pluginConfig.get(HADOOP_AUTH_TYPE));\n    params.put(HADOOP_AUTH_TYPE, type);\n\n    String sysPropPrefix = (String) pluginConfig.getOrDefault(SYSPROP_PREFIX_PROPERTY, \"solr.\");\n    Collection<String> authConfigNames = (Collection<String>) pluginConfig.\n        getOrDefault(AUTH_CONFIG_NAMES_PROPERTY, Collections.emptyList());\n    Map<String,String> authConfigDefaults = (Map<String,String>) pluginConfig\n        .getOrDefault(DEFAULT_AUTH_CONFIGS_PROPERTY, Collections.emptyMap());\n    Map<String,String> proxyUserConfigs = (Map<String,String>) pluginConfig\n        .getOrDefault(PROXY_USER_CONFIGS, Collections.emptyMap());\n\n    for ( String configName : authConfigNames) {\n      String systemProperty = sysPropPrefix + configName;\n      String defaultConfigVal = authConfigDefaults.get(configName);\n      String configVal = System.getProperty(systemProperty, defaultConfigVal);\n      if (configVal != null) {\n        params.put(configName, configVal);\n      }\n    }\n\n    // Configure proxy user settings.\n    params.putAll(proxyUserConfigs);\n\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    log.info(\"Params: \"+params);\n\n    ZkController controller = coreContainer.getZkController();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return new IteratorEnumeration(params.keySet().iterator());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"HadoopAuthFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/security/GenericHadoopAuthPlugin#getInitFilterConfig(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected FilterConfig getInitFilterConfig(Map<String, Object> pluginConfig) {\n    Map<String, String> params = new HashMap<>();\n\n    String type = (String) Objects.requireNonNull(pluginConfig.get(HADOOP_AUTH_TYPE));\n    params.put(HADOOP_AUTH_TYPE, type);\n\n    String sysPropPrefix = (String) pluginConfig.getOrDefault(SYSPROP_PREFIX_PROPERTY, \"solr.\");\n    Collection<String> authConfigNames = (Collection<String>) pluginConfig.\n        getOrDefault(AUTH_CONFIG_NAMES_PROPERTY, Collections.emptyList());\n    Map<String,String> authConfigDefaults = (Map<String,String>) pluginConfig\n        .getOrDefault(DEFAULT_AUTH_CONFIGS_PROPERTY, Collections.emptyMap());\n    Map<String,String> proxyUserConfigs = (Map<String,String>) pluginConfig\n        .getOrDefault(PROXY_USER_CONFIGS, Collections.emptyMap());\n\n    for ( String configName : authConfigNames) {\n      String systemProperty = sysPropPrefix + configName;\n      String defaultConfigVal = authConfigDefaults.get(configName);\n      String configVal = System.getProperty(systemProperty, defaultConfigVal);\n      if (configVal != null) {\n        params.put(configName, configVal);\n      }\n    }\n\n    // Configure proxy user settings.\n    params.putAll(proxyUserConfigs);\n\n    final ServletContext servletContext = new AttributeOnlyServletContext();\n    log.info(\"Params: \"+params);\n\n    ZkController controller = coreContainer.getZkController();\n    if (controller != null) {\n      servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n    }\n\n    FilterConfig conf = new FilterConfig() {\n      @Override\n      public ServletContext getServletContext() {\n        return servletContext;\n      }\n\n      @Override\n      public Enumeration<String> getInitParameterNames() {\n        return new IteratorEnumeration(params.keySet().iterator());\n      }\n\n      @Override\n      public String getInitParameter(String param) {\n        return params.get(param);\n      }\n\n      @Override\n      public String getFilterName() {\n        return \"HadoopAuthFilter\";\n      }\n    };\n\n    return conf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29887daf839649150d96855b142b76f5c45d60d2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","29887daf839649150d96855b142b76f5c45d60d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"25f6c5644d9c1a92d25ef1d2764e5d93a580965f":["29887daf839649150d96855b142b76f5c45d60d2"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","25f6c5644d9c1a92d25ef1d2764e5d93a580965f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["25f6c5644d9c1a92d25ef1d2764e5d93a580965f"]},"commit2Childs":{"29887daf839649150d96855b142b76f5c45d60d2":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","25f6c5644d9c1a92d25ef1d2764e5d93a580965f"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29887daf839649150d96855b142b76f5c45d60d2","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"25f6c5644d9c1a92d25ef1d2764e5d93a580965f":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}