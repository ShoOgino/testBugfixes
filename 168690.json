{"path":"lucene/core/src/java/org/apache/lucene/util/ClassLoaderUtils#isParentClassLoader(ClassLoader,ClassLoader).mjava","commits":[{"id":"32694fa3bbb984d3054955e48d946708e16110ff","date":1585155816,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ClassLoaderUtils#isParentClassLoader(ClassLoader,ClassLoader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#isParentClassLoader(ClassLoader,ClassLoader).mjava","sourceNew":"  /**\n   * Utility method to check if some class loader is a (grand-)parent of or the same as another one.\n   * This means the child will be able to load all classes from the parent, too.\n   * <p>\n   * If caller's codesource doesn't have enough permissions to do the check, {@code false} is returned\n   * (this is fine, because if we get a {@code SecurityException} it is for sure no parent).\n   */\n  public static boolean isParentClassLoader(final ClassLoader parent, final ClassLoader child) {\n    try {\n      ClassLoader cl = child;\n      while (cl != null) {\n        if (cl == parent) {\n          return true;\n        }\n        cl = cl.getParent();\n      }\n      return false;\n    } catch (SecurityException se) {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Utility method to check if some class loader is a (grand-)parent of or the same as another one.\n   * This means the child will be able to load all classes from the parent, too.\n   * <p>\n   * If caller's codesource doesn't have enough permissions to do the check, {@code false} is returned\n   * (this is fine, because if we get a {@code SecurityException} it is for sure no parent).\n   */\n  public static boolean isParentClassLoader(final ClassLoader parent, final ClassLoader child) {\n    try {\n      ClassLoader cl = child;\n      while (cl != null) {\n        if (cl == parent) {\n          return true;\n        }\n        cl = cl.getParent();\n      }\n      return false;\n    } catch (SecurityException se) {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"32694fa3bbb984d3054955e48d946708e16110ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["32694fa3bbb984d3054955e48d946708e16110ff"]},"commit2Childs":{"32694fa3bbb984d3054955e48d946708e16110ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["32694fa3bbb984d3054955e48d946708e16110ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}