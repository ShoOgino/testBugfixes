{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testCache().mjava","commits":[{"id":"9d6ade6517735e5fca21539f4ff32151bf0a89b8","date":1418291454,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testCache().mjava","pathOld":"/dev/null","sourceNew":"  public void testCache() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"blue\", \"red\", \"green\")));\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final LeafReaderContext leaf1 = reader.leaves().get(0);\n\n    Filter filter1 = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"blue\")));\n    // different instance yet equal\n    Filter filter2 = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"blue\")));\n\n    final LRUFilterCache filterCache = new LRUFilterCache(Integer.MAX_VALUE, Long.MAX_VALUE);\n    final Filter cachedFilter1 = filterCache.doCache(filter1, FilterCachingPolicy.ALWAYS_CACHE);\n    DocIdSet cached1 = cachedFilter1.getDocIdSet(leaf1, null);\n\n    final Filter cachedFilter2 = filterCache.doCache(filter2, NEVER_CACHE);\n    DocIdSet cached2 = cachedFilter2.getDocIdSet(leaf1, null);\n    assertSame(cached1, cached2);\n\n    filterCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testCache().mjava","sourceNew":null,"sourceOld":"  public void testCache() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"blue\", \"red\", \"green\")));\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final LeafReaderContext leaf1 = reader.leaves().get(0);\n\n    Filter filter1 = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"blue\")));\n    // different instance yet equal\n    Filter filter2 = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"blue\")));\n\n    final LRUFilterCache filterCache = new LRUFilterCache(Integer.MAX_VALUE, Long.MAX_VALUE);\n    final Filter cachedFilter1 = filterCache.doCache(filter1, FilterCachingPolicy.ALWAYS_CACHE);\n    DocIdSet cached1 = cachedFilter1.getDocIdSet(leaf1, null);\n\n    final Filter cachedFilter2 = filterCache.doCache(filter2, NEVER_CACHE);\n    DocIdSet cached2 = cachedFilter2.getDocIdSet(leaf1, null);\n    assertSame(cached1, cached2);\n\n    filterCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testCache().mjava","sourceNew":null,"sourceOld":"  public void testCache() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"blue\", \"red\", \"green\")));\n      w.addDocument(doc);\n    }\n    final DirectoryReader reader = w.getReader();\n    final LeafReaderContext leaf1 = reader.leaves().get(0);\n\n    Filter filter1 = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"blue\")));\n    // different instance yet equal\n    Filter filter2 = new QueryWrapperFilter(new TermQuery(new Term(\"color\", \"blue\")));\n\n    final LRUFilterCache filterCache = new LRUFilterCache(Integer.MAX_VALUE, Long.MAX_VALUE);\n    final Filter cachedFilter1 = filterCache.doCache(filter1, FilterCachingPolicy.ALWAYS_CACHE);\n    DocIdSet cached1 = cachedFilter1.getDocIdSet(leaf1, null);\n\n    final Filter cachedFilter2 = filterCache.doCache(filter2, NEVER_CACHE);\n    DocIdSet cached2 = cachedFilter2.getDocIdSet(leaf1, null);\n    assertSame(cached1, cached2);\n\n    filterCache.assertConsistent();\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["9d6ade6517735e5fca21539f4ff32151bf0a89b8","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["9d6ade6517735e5fca21539f4ff32151bf0a89b8"],"9d6ade6517735e5fca21539f4ff32151bf0a89b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d6ade6517735e5fca21539f4ff32151bf0a89b8":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d6ade6517735e5fca21539f4ff32151bf0a89b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}