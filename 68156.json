{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#test().mjava","commits":[{"id":"6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09","date":1492411712,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"event\", \"nodeLost\");\n    long waitForSeconds = 1 + random().nextInt(5);\n    props.put(\"waitFor\", waitForSeconds);\n    props.put(\"enabled\", \"true\");\n    List<Map<String, String>> actions = new ArrayList<>(3);\n    Map<String, String> map = new HashMap<>(2);\n    map.put(\"name\", \"compute_plan\");\n    map.put(\"class\", \"solr.ComputePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"execute_plan\");\n    map.put(\"class\", \"solr.ExecutePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"log_plan\");\n    map.put(\"class\", \"solr.LogPlanAction\");\n    actions.add(map);\n    props.put(\"actions\", actions);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeAddedTrigger.NodeAddedEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getNodeName());\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final int waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"326b5c746af092eb827c5c1accdab1b47fe0cf3c","date":1492433195,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"event\", \"nodeLost\");\n    long waitForSeconds = 1 + random().nextInt(5);\n    props.put(\"waitFor\", waitForSeconds);\n    props.put(\"enabled\", \"true\");\n    List<Map<String, String>> actions = new ArrayList<>(3);\n    Map<String, String> map = new HashMap<>(2);\n    map.put(\"name\", \"compute_plan\");\n    map.put(\"class\", \"solr.ComputePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"execute_plan\");\n    map.put(\"class\", \"solr.ExecutePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"log_plan\");\n    map.put(\"class\", \"solr.LogPlanAction\");\n    actions.add(map);\n    props.put(\"actions\", actions);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeAddedTrigger.NodeAddedEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getNodeName());\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final int waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af294279069f02a9f9240c8a6876bd33aac91c2b","date":1493274312,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"event\", \"nodeLost\");\n    long waitForSeconds = 1 + random().nextInt(5);\n    props.put(\"waitFor\", waitForSeconds);\n    props.put(\"enabled\", \"true\");\n    List<Map<String, String>> actions = new ArrayList<>(3);\n    Map<String, String> map = new HashMap<>(2);\n    map.put(\"name\", \"compute_plan\");\n    map.put(\"class\", \"solr.ComputePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"execute_plan\");\n    map.put(\"class\", \"solr.ExecutePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"log_plan\");\n    map.put(\"class\", \"solr.LogPlanAction\");\n    actions.add(map);\n    props.put(\"actions\", actions);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeAddedTrigger.NodeAddedEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getNodeName());\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"event\", \"nodeLost\");\n    long waitForSeconds = 1 + random().nextInt(5);\n    props.put(\"waitFor\", waitForSeconds);\n    props.put(\"enabled\", \"true\");\n    List<Map<String, String>> actions = new ArrayList<>(3);\n    Map<String, String> map = new HashMap<>(2);\n    map.put(\"name\", \"compute_plan\");\n    map.put(\"class\", \"solr.ComputePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"execute_plan\");\n    map.put(\"class\", \"solr.ExecutePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"log_plan\");\n    map.put(\"class\", \"solr.LogPlanAction\");\n    actions.add(map);\n    props.put(\"actions\", actions);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeAddedTrigger.NodeAddedEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getNodeName());\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final int waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5a648360be52f2b0cc9971af641fe1e68778dab","date":1493361164,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"event\", \"nodeLost\");\n    long waitForSeconds = 1 + random().nextInt(5);\n    props.put(\"waitFor\", waitForSeconds);\n    props.put(\"enabled\", true);\n    List<Map<String, String>> actions = new ArrayList<>(3);\n    Map<String, String> map = new HashMap<>(2);\n    map.put(\"name\", \"compute_plan\");\n    map.put(\"class\", \"solr.ComputePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"execute_plan\");\n    map.put(\"class\", \"solr.ExecutePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"log_plan\");\n    map.put(\"class\", \"solr.LogPlanAction\");\n    actions.add(map);\n    props.put(\"actions\", actions);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeAddedTrigger.NodeAddedEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getNodeName());\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"event\", \"nodeLost\");\n    long waitForSeconds = 1 + random().nextInt(5);\n    props.put(\"waitFor\", waitForSeconds);\n    props.put(\"enabled\", \"true\");\n    List<Map<String, String>> actions = new ArrayList<>(3);\n    Map<String, String> map = new HashMap<>(2);\n    map.put(\"name\", \"compute_plan\");\n    map.put(\"class\", \"solr.ComputePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"execute_plan\");\n    map.put(\"class\", \"solr.ExecutePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"log_plan\");\n    map.put(\"class\", \"solr.LogPlanAction\");\n    actions.add(map);\n    props.put(\"actions\", actions);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeAddedTrigger.NodeAddedEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getNodeName());\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e","date":1493894873,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#test().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeAddedTrigger.NodeAddedEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getNodeName());\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"event\", \"nodeLost\");\n    long waitForSeconds = 1 + random().nextInt(5);\n    props.put(\"waitFor\", waitForSeconds);\n    props.put(\"enabled\", true);\n    List<Map<String, String>> actions = new ArrayList<>(3);\n    Map<String, String> map = new HashMap<>(2);\n    map.put(\"name\", \"compute_plan\");\n    map.put(\"class\", \"solr.ComputePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"execute_plan\");\n    map.put(\"class\", \"solr.ExecutePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"log_plan\");\n    map.put(\"class\", \"solr.LogPlanAction\");\n    actions.add(map);\n    props.put(\"actions\", actions);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeAddedTrigger.NodeAddedEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getNodeName());\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e":["e5a648360be52f2b0cc9971af641fe1e68778dab"],"af294279069f02a9f9240c8a6876bd33aac91c2b":["326b5c746af092eb827c5c1accdab1b47fe0cf3c"],"e5a648360be52f2b0cc9971af641fe1e68778dab":["af294279069f02a9f9240c8a6876bd33aac91c2b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"326b5c746af092eb827c5c1accdab1b47fe0cf3c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09":["326b5c746af092eb827c5c1accdab1b47fe0cf3c"],"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e":[],"af294279069f02a9f9240c8a6876bd33aac91c2b":["e5a648360be52f2b0cc9971af641fe1e68778dab"],"e5a648360be52f2b0cc9971af641fe1e68778dab":["a7699e9ae4550ba2a55335a64ae7de9d5d9de39e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09","326b5c746af092eb827c5c1accdab1b47fe0cf3c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"326b5c746af092eb827c5c1accdab1b47fe0cf3c":["af294279069f02a9f9240c8a6876bd33aac91c2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a7699e9ae4550ba2a55335a64ae7de9d5d9de39e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}