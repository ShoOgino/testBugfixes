{"path":"solr/core/src/java/org/apache/solr/search/join/XCJFQParser#parse().mjava","commits":[{"id":"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0","date":1576656084,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/XCJFQParser#parse().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    String query = localParams.get(QueryParsing.V);\n    String zkHost = localParams.get(ZK_HOST);\n    String solrUrl = localParams.get(SOLR_URL);\n    // Test if this is a valid solr url.\n    if (solrUrl != null) {\n      if (solrUrlWhitelist == null) {\n        throw new SyntaxError(\"White list must be configured to use solrUrl parameter.\");\n      }\n      if (!solrUrlWhitelist.contains(solrUrl)) {\n        throw new SyntaxError(\"Solr Url was not in the whitelist.  Please check your configuration.\");\n      }\n    }\n\n    String collection = localParams.get(COLLECTION);\n    String fromField = localParams.get(FROM);\n    String toField = localParams.get(TO);\n    boolean routedByJoinKey = localParams.getBool(ROUTED_BY_JOIN_KEY, toField.equals(routerField));\n    int ttl = localParams.getInt(TTL, TTL_DEFAULT);\n\n    ModifiableSolrParams otherParams = new ModifiableSolrParams();\n    for (Iterator<String> it = localParams.getParameterNamesIterator(); it.hasNext(); ) {\n      String paramName = it.next();\n      if (!OWN_PARAMS.contains(paramName)) {\n        otherParams.set(paramName, localParams.getParams(paramName));\n      }\n    }\n\n    return new XCJFQuery(query, zkHost, solrUrl, collection, fromField, toField, routedByJoinKey, ttl, otherParams);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/XCJFQParser#parse().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    String query = localParams.get(QueryParsing.V);\n    String zkHost = localParams.get(ZK_HOST);\n    String solrUrl = localParams.get(SOLR_URL);\n    // Test if this is a valid solr url.\n    if (solrUrl != null) {\n      if (solrUrlWhitelist == null) {\n        throw new SyntaxError(\"White list must be configured to use solrUrl parameter.\");\n      }\n      if (!solrUrlWhitelist.contains(solrUrl)) {\n        throw new SyntaxError(\"Solr Url was not in the whitelist.  Please check your configuration.\");\n      }\n    }\n\n    String collection = localParams.get(COLLECTION);\n    String fromField = localParams.get(FROM);\n    String toField = localParams.get(TO);\n    boolean routedByJoinKey = localParams.getBool(ROUTED_BY_JOIN_KEY, toField.equals(routerField));\n    int ttl = localParams.getInt(TTL, TTL_DEFAULT);\n\n    ModifiableSolrParams otherParams = new ModifiableSolrParams();\n    for (Iterator<String> it = localParams.getParameterNamesIterator(); it.hasNext(); ) {\n      String paramName = it.next();\n      if (!OWN_PARAMS.contains(paramName)) {\n        otherParams.set(paramName, localParams.getParams(paramName));\n      }\n    }\n\n    return new XCJFQuery(query, zkHost, solrUrl, collection, fromField, toField, routedByJoinKey, ttl, otherParams);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e62a54d8f17b7c7b5d395bad453c470cf4039a6f","date":1593091560,"type":5,"author":"Dan Fox","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/CrossCollectionJoinQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/XCJFQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    String query = localParams.get(QueryParsing.V);\n    String zkHost = localParams.get(ZK_HOST);\n    String solrUrl = localParams.get(SOLR_URL);\n    // Test if this is a valid solr url.\n    if (solrUrl != null) {\n      if (allowSolrUrls == null) {\n        throw new SyntaxError(\"allowSolrUrls list must be configured to use solrUrl parameter.\");\n      }\n      if (!allowSolrUrls.contains(solrUrl)) {\n        throw new SyntaxError(\"Solr URL was not in allowSolrUrls list.  Please check your configuration.\");\n      }\n    }\n\n    String collection = localParams.get(FROM_INDEX);\n    String fromField = localParams.get(FROM);\n    String toField = localParams.get(TO);\n\n    boolean routedByJoinKey = localParams.getBool(ROUTED_BY_JOIN_KEY, toField.equals(routerField));\n    int ttl = localParams.getInt(TTL, TTL_DEFAULT);\n\n    ModifiableSolrParams otherParams = new ModifiableSolrParams();\n    for (Iterator<String> it = localParams.getParameterNamesIterator(); it.hasNext(); ) {\n      String paramName = it.next();\n      if (!OWN_PARAMS.contains(paramName)) {\n        otherParams.set(paramName, localParams.getParams(paramName));\n      }\n    }\n\n    return new CrossCollectionJoinQuery(query, zkHost, solrUrl, collection, fromField, toField, routedByJoinKey, ttl, otherParams);\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    String query = localParams.get(QueryParsing.V);\n    String zkHost = localParams.get(ZK_HOST);\n    String solrUrl = localParams.get(SOLR_URL);\n    // Test if this is a valid solr url.\n    if (solrUrl != null) {\n      if (solrUrlWhitelist == null) {\n        throw new SyntaxError(\"White list must be configured to use solrUrl parameter.\");\n      }\n      if (!solrUrlWhitelist.contains(solrUrl)) {\n        throw new SyntaxError(\"Solr Url was not in the whitelist.  Please check your configuration.\");\n      }\n    }\n\n    String collection = localParams.get(COLLECTION);\n    String fromField = localParams.get(FROM);\n    String toField = localParams.get(TO);\n    boolean routedByJoinKey = localParams.getBool(ROUTED_BY_JOIN_KEY, toField.equals(routerField));\n    int ttl = localParams.getInt(TTL, TTL_DEFAULT);\n\n    ModifiableSolrParams otherParams = new ModifiableSolrParams();\n    for (Iterator<String> it = localParams.getParameterNamesIterator(); it.hasNext(); ) {\n      String paramName = it.next();\n      if (!OWN_PARAMS.contains(paramName)) {\n        otherParams.set(paramName, localParams.getParams(paramName));\n      }\n    }\n\n    return new XCJFQuery(query, zkHost, solrUrl, collection, fromField, toField, routedByJoinKey, ttl, otherParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"246314af59d76a47fccc31e9494eefee01ec9c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e62a54d8f17b7c7b5d395bad453c470cf4039a6f":["a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e62a54d8f17b7c7b5d395bad453c470cf4039a6f"]},"commit2Childs":{"246314af59d76a47fccc31e9494eefee01ec9c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["246314af59d76a47fccc31e9494eefee01ec9c00","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"e62a54d8f17b7c7b5d395bad453c470cf4039a6f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["246314af59d76a47fccc31e9494eefee01ec9c00","e62a54d8f17b7c7b5d395bad453c470cf4039a6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}