{"path":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsConsumer.SimpleTextNormsDocValuesConsumer#finish(int).mjava","commits":[{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsConsumer.SimpleTextNormsDocValuesConsumer#finish(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      final NormsWriter normsWriter = getNormsWriter();\n      boolean success = false;\n      try {\n        int uptoDoc = 0;\n        normsWriter.setNumTotalDocs(docCount);\n        if (upto > 0) {\n          normsWriter.startField(fi);\n          int docID = 0;\n          for (; docID < docCount; docID++) {\n            if (uptoDoc < upto && docIDs[uptoDoc] == docID) {\n              normsWriter.writeNorm(norms[uptoDoc]);\n              uptoDoc++;\n            } else {\n              normsWriter.writeNorm((byte) 0);\n            }\n          }\n          // we should have consumed every norm\n          assert uptoDoc == upto;\n\n        } else {\n          // Fill entire field with default norm:\n          normsWriter.startField(fi);\n          for (; upto < docCount; upto++)\n            normsWriter.writeNorm((byte) 0);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          normsWriter.abort();\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsConsumer.SimpleTextNormsDocValuesConsumer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsConsumer.SimpleTextNormsDocValuesConsumer#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      final NormsWriter normsWriter = getNormsWriter();\n      boolean success = false;\n      try {\n        int uptoDoc = 0;\n        normsWriter.setNumTotalDocs(docCount);\n        if (upto > 0) {\n          normsWriter.startField(fi);\n          int docID = 0;\n          for (; docID < docCount; docID++) {\n            if (uptoDoc < upto && docIDs[uptoDoc] == docID) {\n              normsWriter.writeNorm(norms[uptoDoc]);\n              uptoDoc++;\n            } else {\n              normsWriter.writeNorm((byte) 0);\n            }\n          }\n          // we should have consumed every norm\n          assert uptoDoc == upto;\n\n        } else {\n          // Fill entire field with default norm:\n          normsWriter.startField(fi);\n          for (; upto < docCount; upto++)\n            normsWriter.writeNorm((byte) 0);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          normsWriter.abort();\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      final NormsWriter normsWriter = getNormsWriter();\n      boolean success = false;\n      try {\n        int uptoDoc = 0;\n        normsWriter.setNumTotalDocs(docCount);\n        if (upto > 0) {\n          normsWriter.startField(fi);\n          int docID = 0;\n          for (; docID < docCount; docID++) {\n            if (uptoDoc < upto && docIDs[uptoDoc] == docID) {\n              normsWriter.writeNorm(norms[uptoDoc]);\n              uptoDoc++;\n            } else {\n              normsWriter.writeNorm((byte) 0);\n            }\n          }\n          // we should have consumed every norm\n          assert uptoDoc == upto;\n\n        } else {\n          // Fill entire field with default norm:\n          normsWriter.startField(fi);\n          for (; upto < docCount; upto++)\n            normsWriter.writeNorm((byte) 0);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          normsWriter.abort();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}