{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[],int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[],int).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier,\n      Scorer[] subScorers, int numScorers) throws IOException {\n    super(weight);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    // The passed subScorers array includes only scorers which have documents\n    // (DisjunctionMaxQuery takes care of that), and their nextDoc() was already\n    // called.\n    this.subScorers = subScorers;\n    this.numScorers = numScorers;\n    \n    heapify();\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier,\n      Scorer[] subScorers, int numScorers) throws IOException {\n    super(weight);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    // The passed subScorers array includes only scorers which have documents\n    // (DisjunctionMaxQuery takes care of that), and their nextDoc() was already\n    // called.\n    this.subScorers = subScorers;\n    this.numScorers = numScorers;\n    \n    heapify();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[],int).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier,\n      Scorer[] subScorers, int numScorers) {\n    super(weight);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    // The passed subScorers array includes only scorers which have documents\n    // (DisjunctionMaxQuery takes care of that), and their nextDoc() was already\n    // called.\n    this.subScorers = subScorers;\n    this.numScorers = numScorers;\n    \n    heapify();\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier,\n      Scorer[] subScorers, int numScorers) throws IOException {\n    super(weight);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    // The passed subScorers array includes only scorers which have documents\n    // (DisjunctionMaxQuery takes care of that), and their nextDoc() was already\n    // called.\n    this.subScorers = subScorers;\n    this.numScorers = numScorers;\n    \n    heapify();\n  }\n\n","bugFix":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","date":1342645458,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[],int).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier,\n      Scorer[] subScorers, int numScorers) {\n    super(weight, subScorers, numScorers);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier,\n      Scorer[] subScorers, int numScorers) {\n    super(weight);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    // The passed subScorers array includes only scorers which have documents\n    // (DisjunctionMaxQuery takes care of that), and their nextDoc() was already\n    // called.\n    this.subScorers = subScorers;\n    this.numScorers = numScorers;\n    \n    heapify();\n  }\n\n","bugFix":["30a558487f2298c2c19ceca9103c1b6865d64708","e5e679b9c5f68f1f331de920ae8366af75b44060"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[],int).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier,\n      Scorer[] subScorers, int numScorers) {\n    super(weight, subScorers, numScorers);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier,\n      Scorer[] subScorers, int numScorers) throws IOException {\n    super(weight);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    // The passed subScorers array includes only scorers which have documents\n    // (DisjunctionMaxQuery takes care of that), and their nextDoc() was already\n    // called.\n    this.subScorers = subScorers;\n    this.numScorers = numScorers;\n    \n    heapify();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[],int).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier,\n      Scorer[] subScorers, int numScorers) {\n    super(weight, subScorers, numScorers);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier,\n      Scorer[] subScorers, int numScorers) {\n    super(weight);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    // The passed subScorers array includes only scorers which have documents\n    // (DisjunctionMaxQuery takes care of that), and their nextDoc() was already\n    // called.\n    this.subScorers = subScorers;\n    this.numScorers = numScorers;\n    \n    heapify();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56374313ec4613df1f728772dedcff8bb3cd419d","date":1382027245,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[],int).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  public DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier,\n      Scorer[] subScorers) {\n    super(weight, subScorers);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier,\n      Scorer[] subScorers, int numScorers) {\n    super(weight, subScorers, numScorers);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n  }\n\n","bugFix":null,"bugIntro":["a74e723ad6f1491f36039f9fe6af13a530f8135d"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"56374313ec4613df1f728772dedcff8bb3cd419d":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56374313ec4613df1f728772dedcff8bb3cd419d"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","56374313ec4613df1f728772dedcff8bb3cd419d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["aba371508186796cc6151d8223a5b4e16d02e26e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"56374313ec4613df1f728772dedcff8bb3cd419d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}