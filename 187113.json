{"path":"lucene/backwards/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","pathOld":"backwards/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = bufferIndex;\n    char[] buffer = termAtt.termBuffer();\n    while (true) {\n\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        dataLen = input.read(ioBuffer);\n        if (dataLen == -1) {\n          dataLen = 0;                            // so next offset += dataLen won't decrement offset\n          if (length > 0)\n            break;\n          else\n            return false;\n        }\n        bufferIndex = 0;\n      }\n\n      final char c = ioBuffer[bufferIndex++];\n\n      if (isTokenChar(c)) {               // if it's a token char\n\n        if (length == 0)                 // start of token\n          start = offset + bufferIndex - 1;\n        else if (length == buffer.length)\n          buffer = termAtt.resizeTermBuffer(1+length);\n\n        buffer[length++] = normalize(c); // buffer it, normalized\n\n        if (length == MAX_WORD_LEN)      // buffer overflow!\n          break;\n\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setTermLength(length);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(start+length));\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = bufferIndex;\n    char[] buffer = termAtt.termBuffer();\n    while (true) {\n\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        dataLen = input.read(ioBuffer);\n        if (dataLen == -1) {\n          dataLen = 0;                            // so next offset += dataLen won't decrement offset\n          if (length > 0)\n            break;\n          else\n            return false;\n        }\n        bufferIndex = 0;\n      }\n\n      final char c = ioBuffer[bufferIndex++];\n\n      if (isTokenChar(c)) {               // if it's a token char\n\n        if (length == 0)                 // start of token\n          start = offset + bufferIndex - 1;\n        else if (length == buffer.length)\n          buffer = termAtt.resizeTermBuffer(1+length);\n\n        buffer[length++] = normalize(c); // buffer it, normalized\n\n        if (length == MAX_WORD_LEN)      // buffer overflow!\n          break;\n\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setTermLength(length);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(start+length));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/analysis/CharTokenizer#incrementToken().mjava","sourceNew":null,"sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    int start = bufferIndex;\n    char[] buffer = termAtt.termBuffer();\n    while (true) {\n\n      if (bufferIndex >= dataLen) {\n        offset += dataLen;\n        dataLen = input.read(ioBuffer);\n        if (dataLen == -1) {\n          dataLen = 0;                            // so next offset += dataLen won't decrement offset\n          if (length > 0)\n            break;\n          else\n            return false;\n        }\n        bufferIndex = 0;\n      }\n\n      final char c = ioBuffer[bufferIndex++];\n\n      if (isTokenChar(c)) {               // if it's a token char\n\n        if (length == 0)                 // start of token\n          start = offset + bufferIndex - 1;\n        else if (length == buffer.length)\n          buffer = termAtt.resizeTermBuffer(1+length);\n\n        buffer[length++] = normalize(c); // buffer it, normalized\n\n        if (length == MAX_WORD_LEN)      // buffer overflow!\n          break;\n\n      } else if (length > 0)             // at non-Letter w/ chars\n        break;                           // return 'em\n    }\n\n    termAtt.setTermLength(length);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(start+length));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}