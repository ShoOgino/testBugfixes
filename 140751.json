{"path":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,double).mjava","commits":[{"id":"4ac5d789c4e320734d65e4c2e8542ae0bc8d19f7","date":1421315622,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,boolean,double).mjava","sourceNew":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   */\n  public static CachingCollector create(boolean cacheScores, double maxRAMMB) {\n    Collector other = new SimpleCollector() {\n\n      @Override\n      public void collect(int doc) {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   *\n   * @param acceptDocsOutOfOrder\n   *          whether documents are allowed to be collected out-of-order\n   */\n  public static CachingCollector create(final boolean acceptDocsOutOfOrder, boolean cacheScores, double maxRAMMB) {\n    Collector other = new SimpleCollector() {\n\n      @Override\n      public void collect(int doc) {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,double).mjava","sourceNew":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   */\n  public static CachingCollector create(boolean cacheScores, double maxRAMMB) {\n    Collector other = new SimpleCollector() {\n\n      @Override\n      public void collect(int doc) {}\n\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   */\n  public static CachingCollector create(boolean cacheScores, double maxRAMMB) {\n    Collector other = new SimpleCollector() {\n\n      @Override\n      public void collect(int doc) {}\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,double).mjava","sourceNew":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   */\n  public static CachingCollector create(boolean cacheScores, double maxRAMMB) {\n    Collector other = new SimpleCollector() {\n\n      @Override\n      public void collect(int doc) {}\n\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   */\n  public static CachingCollector create(boolean cacheScores, double maxRAMMB) {\n    Collector other = new SimpleCollector() {\n\n      @Override\n      public void collect(int doc) {}\n\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#create(boolean,double).mjava","sourceNew":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   */\n  public static CachingCollector create(boolean cacheScores, double maxRAMMB) {\n    Collector other = new SimpleCollector() {\n\n      @Override\n      public void collect(int doc) {}\n\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link CachingCollector} which does not wrap another collector.\n   * The cached documents and scores can later be {@link #replay(Collector)\n   * replayed}.\n   */\n  public static CachingCollector create(boolean cacheScores, double maxRAMMB) {\n    Collector other = new SimpleCollector() {\n\n      @Override\n      public void collect(int doc) {}\n\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n\n    };\n    return create(other, cacheScores, maxRAMMB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"781239fc84d36be12b84e4d3e2618f5f07a182e3":["4ac5d789c4e320734d65e4c2e8542ae0bc8d19f7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ac5d789c4e320734d65e4c2e8542ae0bc8d19f7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["781239fc84d36be12b84e4d3e2618f5f07a182e3","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"781239fc84d36be12b84e4d3e2618f5f07a182e3":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ac5d789c4e320734d65e4c2e8542ae0bc8d19f7"],"4ac5d789c4e320734d65e4c2e8542ae0bc8d19f7":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}