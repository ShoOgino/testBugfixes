{"path":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleGroupByFacet(String,String,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String).mjava","commits":[{"id":"36b1ce25b5b465615c00f409ce694664abbe7bd2","date":1481836328,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleGroupByFacet(String,String,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String).mjava","pathOld":"/dev/null","sourceNew":"  private TupleStream handleGroupByFacet(String zkHost,\n                                         String collection,\n                                         final List<Map.Entry<String, Class>> fields,\n                                         final String query,\n                                         final List<Pair<String, String>> orders,\n                                         final List<String> bucketFields,\n                                         final List<Pair<String, String>> metricPairs,\n                                         final String lim) throws IOException {\n\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    solrParams.add(CommonParams.Q, query);\n\n    Bucket[] buckets = buildBuckets(bucketFields, fields);\n    Metric[] metrics = buildMetrics(metricPairs).toArray(new Metric[0]);\n    if(metrics.length == 0) {\n      metrics = new Metric[1];\n      metrics[0] = new CountMetric();\n    }\n\n    int limit = lim != null ? Integer.parseInt(lim) : 100;\n\n    FieldComparator[] sorts = null;\n\n    if(orders == null || orders.size() == 0) {\n      sorts = new FieldComparator[buckets.length];\n      for(int i=0; i<sorts.length; i++) {\n        sorts[i] = new FieldComparator(\"index\", ComparatorOrder.ASCENDING);\n      }\n    } else {\n      sorts = getComps(orders);\n    }\n\n    TupleStream tupleStream = new FacetStream(zkHost,\n                                              collection,\n                                              solrParams,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              limit);\n\n\n    if(lim != null)\n    {\n      tupleStream = new LimitStream(tupleStream, limit);\n    }\n\n    return tupleStream;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5cb41f0427fb7a75b0bfefe992561738c11fd80","date":1486576891,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleGroupByFacet(String,String,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleGroupByFacet(String,String,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String).mjava","sourceNew":"  private TupleStream handleGroupByFacet(String zkHost,\n                                         String collection,\n                                         final List<Map.Entry<String, Class>> fields,\n                                         final String query,\n                                         final List<Pair<String, String>> orders,\n                                         final List<String> bucketFields,\n                                         final List<Pair<String, String>> metricPairs,\n                                         final String lim,\n                                         final String havingPredicate) throws IOException {\n\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    solrParams.add(CommonParams.Q, query);\n\n    Bucket[] buckets = buildBuckets(bucketFields, fields);\n    Metric[] metrics = buildMetrics(metricPairs).toArray(new Metric[0]);\n    if(metrics.length == 0) {\n      metrics = new Metric[1];\n      metrics[0] = new CountMetric();\n    }\n\n    int limit = lim != null ? Integer.parseInt(lim) : 100;\n\n    FieldComparator[] sorts = null;\n\n    if(orders == null || orders.size() == 0) {\n      sorts = new FieldComparator[buckets.length];\n      for(int i=0; i<sorts.length; i++) {\n        sorts[i] = new FieldComparator(\"index\", ComparatorOrder.ASCENDING);\n      }\n    } else {\n      sorts = getComps(orders);\n    }\n\n    TupleStream tupleStream = new FacetStream(zkHost,\n                                              collection,\n                                              solrParams,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              limit);\n\n\n\n    StreamFactory factory = new StreamFactory()\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"and\", AndOperation.class)\n        .withFunctionName(\"or\", OrOperation.class)\n        .withFunctionName(\"not\", NotOperation.class)\n        .withFunctionName(\"eq\", EqualsOperation.class)\n        .withFunctionName(\"gt\", GreaterThanOperation.class)\n        .withFunctionName(\"lt\", LessThanOperation.class)\n        .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class);\n\n    if(havingPredicate != null) {\n      BooleanOperation booleanOperation = (BooleanOperation)factory.constructOperation(StreamExpressionParser.parse(havingPredicate));\n      tupleStream = new HavingStream(tupleStream, booleanOperation);\n    }\n\n    if(lim != null)\n    {\n      tupleStream = new LimitStream(tupleStream, limit);\n    }\n\n    return tupleStream;\n  }\n\n","sourceOld":"  private TupleStream handleGroupByFacet(String zkHost,\n                                         String collection,\n                                         final List<Map.Entry<String, Class>> fields,\n                                         final String query,\n                                         final List<Pair<String, String>> orders,\n                                         final List<String> bucketFields,\n                                         final List<Pair<String, String>> metricPairs,\n                                         final String lim) throws IOException {\n\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    solrParams.add(CommonParams.Q, query);\n\n    Bucket[] buckets = buildBuckets(bucketFields, fields);\n    Metric[] metrics = buildMetrics(metricPairs).toArray(new Metric[0]);\n    if(metrics.length == 0) {\n      metrics = new Metric[1];\n      metrics[0] = new CountMetric();\n    }\n\n    int limit = lim != null ? Integer.parseInt(lim) : 100;\n\n    FieldComparator[] sorts = null;\n\n    if(orders == null || orders.size() == 0) {\n      sorts = new FieldComparator[buckets.length];\n      for(int i=0; i<sorts.length; i++) {\n        sorts[i] = new FieldComparator(\"index\", ComparatorOrder.ASCENDING);\n      }\n    } else {\n      sorts = getComps(orders);\n    }\n\n    TupleStream tupleStream = new FacetStream(zkHost,\n                                              collection,\n                                              solrParams,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              limit);\n\n\n    if(lim != null)\n    {\n      tupleStream = new LimitStream(tupleStream, limit);\n    }\n\n    return tupleStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d5cb41f0427fb7a75b0bfefe992561738c11fd80":["36b1ce25b5b465615c00f409ce694664abbe7bd2"],"36b1ce25b5b465615c00f409ce694664abbe7bd2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d5cb41f0427fb7a75b0bfefe992561738c11fd80":[],"36b1ce25b5b465615c00f409ce694664abbe7bd2":["d5cb41f0427fb7a75b0bfefe992561738c11fd80"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36b1ce25b5b465615c00f409ce694664abbe7bd2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d5cb41f0427fb7a75b0bfefe992561738c11fd80","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}