{"path":"src/java/org/apache/solr/search/QueryParsing#parseFunction(String,IndexSchema).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseFunction(String,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  /** Parse a function, returning a FunctionQuery\n   */\n  public static FunctionQuery parseFunction(String func, IndexSchema schema) throws ParseException {\n    return new FunctionQuery(parseValSource(new StrParser(func), schema));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c686ad76bb74d110ec3c727914fb5693a7da23","date":1158901446,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseFunction(String,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseFunction(String,IndexSchema).mjava","sourceNew":"  /** \n   * Parse a function, returning a FunctionQuery\n   *\n   * :TODO: need examples\n   */\n  public static FunctionQuery parseFunction(String func, IndexSchema schema) throws ParseException {\n    return new FunctionQuery(parseValSource(new StrParser(func), schema));\n  }\n\n","sourceOld":"  /** Parse a function, returning a FunctionQuery\n   */\n  public static FunctionQuery parseFunction(String func, IndexSchema schema) throws ParseException {\n    return new FunctionQuery(parseValSource(new StrParser(func), schema));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28f87e4e419c12d17fbe4945b9676539e91e0a7f","date":1160170998,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseFunction(String,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseFunction(String,IndexSchema).mjava","sourceNew":"  /** \n   * Parse a function, returning a FunctionQuery\n   *\n   * <p>\n   * Syntax Examples....\n   * </p>\n   *\n   * <pre>\n   * // Numeric fields default to correct type\n   * // (ie: IntFieldSource or FloatFieldSource)\n   * // Others use implicit ord(...) to generate numeric field value\n   * myfield\n   *\n   * // OrdFieldSource\n   * ord(myfield)\n   *\n   * // ReverseOrdFieldSource\n   * rord(myfield)\n   *\n   * // LinearFloatFunction on numeric field value\n   * linear(myfield,1,2)\n   *\n   * // MaxFloatFunction of LinearFloatFunction on numeric field value or constant\n   * max(linear(myfield,1,2),100)\n   *\n   * // ReciprocalFloatFunction on numeric field value\n   * recip(myfield,1,2,3)\n   *\n   * // ReciprocalFloatFunction on ReverseOrdFieldSource\n   * recip(rord(myfield),1,2,3)\n   *\n   * // ReciprocalFloatFunction on LinearFloatFunction on ReverseOrdFieldSource\n   * recip(linear(rord(myfield),1,2),3,4,5)\n   * </pre>\n   */\n  public static FunctionQuery parseFunction(String func, IndexSchema schema) throws ParseException {\n    return new FunctionQuery(parseValSource(new StrParser(func), schema));\n  }\n\n","sourceOld":"  /** \n   * Parse a function, returning a FunctionQuery\n   *\n   * :TODO: need examples\n   */\n  public static FunctionQuery parseFunction(String func, IndexSchema schema) throws ParseException {\n    return new FunctionQuery(parseValSource(new StrParser(func), schema));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66ab3886c1d845c59c9e5b23b2fb247b927db498","date":1193060587,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseFunction(String,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseFunction(String,IndexSchema).mjava","sourceNew":"  /** \n   * Parse a function, returning a FunctionQuery\n   *\n   * <p>\n   * Syntax Examples....\n   * </p>\n   *\n   * <pre>\n   * // Numeric fields default to correct type\n   * // (ie: IntFieldSource or FloatFieldSource)\n   * // Others use explicit ord(...) to generate numeric field value\n   * myfield\n   *\n   * // OrdFieldSource\n   * ord(myfield)\n   *\n   * // ReverseOrdFieldSource\n   * rord(myfield)\n   *\n   * // LinearFloatFunction on numeric field value\n   * linear(myfield,1,2)\n   *\n   * // MaxFloatFunction of LinearFloatFunction on numeric field value or constant\n   * max(linear(myfield,1,2),100)\n   *\n   * // ReciprocalFloatFunction on numeric field value\n   * recip(myfield,1,2,3)\n   *\n   * // ReciprocalFloatFunction on ReverseOrdFieldSource\n   * recip(rord(myfield),1,2,3)\n   *\n   * // ReciprocalFloatFunction on LinearFloatFunction on ReverseOrdFieldSource\n   * recip(linear(rord(myfield),1,2),3,4,5)\n   * </pre>\n   */\n  public static FunctionQuery parseFunction(String func, IndexSchema schema) throws ParseException {\n    SolrCore core = SolrCore.getSolrCore();\n    return (FunctionQuery)(QParser.getParser(func,\"func\",new LocalSolrQueryRequest(core,new HashMap())).parse());\n    // return new FunctionQuery(parseValSource(new StrParser(func), schema));\n  }\n\n","sourceOld":"  /** \n   * Parse a function, returning a FunctionQuery\n   *\n   * <p>\n   * Syntax Examples....\n   * </p>\n   *\n   * <pre>\n   * // Numeric fields default to correct type\n   * // (ie: IntFieldSource or FloatFieldSource)\n   * // Others use implicit ord(...) to generate numeric field value\n   * myfield\n   *\n   * // OrdFieldSource\n   * ord(myfield)\n   *\n   * // ReverseOrdFieldSource\n   * rord(myfield)\n   *\n   * // LinearFloatFunction on numeric field value\n   * linear(myfield,1,2)\n   *\n   * // MaxFloatFunction of LinearFloatFunction on numeric field value or constant\n   * max(linear(myfield,1,2),100)\n   *\n   * // ReciprocalFloatFunction on numeric field value\n   * recip(myfield,1,2,3)\n   *\n   * // ReciprocalFloatFunction on ReverseOrdFieldSource\n   * recip(rord(myfield),1,2,3)\n   *\n   * // ReciprocalFloatFunction on LinearFloatFunction on ReverseOrdFieldSource\n   * recip(linear(rord(myfield),1,2),3,4,5)\n   * </pre>\n   */\n  public static FunctionQuery parseFunction(String func, IndexSchema schema) throws ParseException {\n    return new FunctionQuery(parseValSource(new StrParser(func), schema));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32ef722831135736529762b4b97a13dd58b06f66","date":1260567610,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#parseFunction(String,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseFunction(String,IndexSchema).mjava","sourceNew":"  /**\n   * Parse a function, returning a FunctionQuery\n   * <p/>\n   * <p>\n   * Syntax Examples....\n   * </p>\n   * <p/>\n   * <pre>\n   * // Numeric fields default to correct type\n   * // (ie: IntFieldSource or FloatFieldSource)\n   * // Others use explicit ord(...) to generate numeric field value\n   * myfield\n   * <p/>\n   * // OrdFieldSource\n   * ord(myfield)\n   * <p/>\n   * // ReverseOrdFieldSource\n   * rord(myfield)\n   * <p/>\n   * // LinearFloatFunction on numeric field value\n   * linear(myfield,1,2)\n   * <p/>\n   * // MaxFloatFunction of LinearFloatFunction on numeric field value or constant\n   * max(linear(myfield,1,2),100)\n   * <p/>\n   * // ReciprocalFloatFunction on numeric field value\n   * recip(myfield,1,2,3)\n   * <p/>\n   * // ReciprocalFloatFunction on ReverseOrdFieldSource\n   * recip(rord(myfield),1,2,3)\n   * <p/>\n   * // ReciprocalFloatFunction on LinearFloatFunction on ReverseOrdFieldSource\n   * recip(linear(rord(myfield),1,2),3,4,5)\n   * </pre>\n   */\n  public static FunctionQuery parseFunction(String func, IndexSchema schema) throws ParseException {\n    SolrCore core = SolrCore.getSolrCore();\n    return (FunctionQuery) (QParser.getParser(func, \"func\", new LocalSolrQueryRequest(core, new HashMap())).parse());\n    // return new FunctionQuery(parseValSource(new StrParser(func), schema));\n  }\n\n","sourceOld":"  /** \n   * Parse a function, returning a FunctionQuery\n   *\n   * <p>\n   * Syntax Examples....\n   * </p>\n   *\n   * <pre>\n   * // Numeric fields default to correct type\n   * // (ie: IntFieldSource or FloatFieldSource)\n   * // Others use explicit ord(...) to generate numeric field value\n   * myfield\n   *\n   * // OrdFieldSource\n   * ord(myfield)\n   *\n   * // ReverseOrdFieldSource\n   * rord(myfield)\n   *\n   * // LinearFloatFunction on numeric field value\n   * linear(myfield,1,2)\n   *\n   * // MaxFloatFunction of LinearFloatFunction on numeric field value or constant\n   * max(linear(myfield,1,2),100)\n   *\n   * // ReciprocalFloatFunction on numeric field value\n   * recip(myfield,1,2,3)\n   *\n   * // ReciprocalFloatFunction on ReverseOrdFieldSource\n   * recip(rord(myfield),1,2,3)\n   *\n   * // ReciprocalFloatFunction on LinearFloatFunction on ReverseOrdFieldSource\n   * recip(linear(rord(myfield),1,2),3,4,5)\n   * </pre>\n   */\n  public static FunctionQuery parseFunction(String func, IndexSchema schema) throws ParseException {\n    SolrCore core = SolrCore.getSolrCore();\n    return (FunctionQuery)(QParser.getParser(func,\"func\",new LocalSolrQueryRequest(core,new HashMap())).parse());\n    // return new FunctionQuery(parseValSource(new StrParser(func), schema));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#parseFunction(String,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseFunction(String,IndexSchema).mjava","sourceNew":"  /**\n   * Parse a function, returning a FunctionQuery\n   * <p/>\n   * <p>\n   * Syntax Examples....\n   * </p>\n   * <p/>\n   * <pre>\n   * // Numeric fields default to correct type\n   * // (ie: IntFieldSource or FloatFieldSource)\n   * // Others use explicit ord(...) to generate numeric field value\n   * myfield\n   * <p/>\n   * // OrdFieldSource\n   * ord(myfield)\n   * <p/>\n   * // ReverseOrdFieldSource\n   * rord(myfield)\n   * <p/>\n   * // LinearFloatFunction on numeric field value\n   * linear(myfield,1,2)\n   * <p/>\n   * // MaxFloatFunction of LinearFloatFunction on numeric field value or constant\n   * max(linear(myfield,1,2),100)\n   * <p/>\n   * // ReciprocalFloatFunction on numeric field value\n   * recip(myfield,1,2,3)\n   * <p/>\n   * // ReciprocalFloatFunction on ReverseOrdFieldSource\n   * recip(rord(myfield),1,2,3)\n   * <p/>\n   * // ReciprocalFloatFunction on LinearFloatFunction on ReverseOrdFieldSource\n   * recip(linear(rord(myfield),1,2),3,4,5)\n   * </pre>\n   */\n  public static FunctionQuery parseFunction(String func, IndexSchema schema) throws ParseException {\n    SolrCore core = SolrCore.getSolrCore();\n    return (FunctionQuery) (QParser.getParser(func, \"func\", new LocalSolrQueryRequest(core, new HashMap())).parse());\n    // return new FunctionQuery(parseValSource(new StrParser(func), schema));\n  }\n\n","sourceOld":"  /**\n   * Parse a function, returning a FunctionQuery\n   * <p/>\n   * <p>\n   * Syntax Examples....\n   * </p>\n   * <p/>\n   * <pre>\n   * // Numeric fields default to correct type\n   * // (ie: IntFieldSource or FloatFieldSource)\n   * // Others use explicit ord(...) to generate numeric field value\n   * myfield\n   * <p/>\n   * // OrdFieldSource\n   * ord(myfield)\n   * <p/>\n   * // ReverseOrdFieldSource\n   * rord(myfield)\n   * <p/>\n   * // LinearFloatFunction on numeric field value\n   * linear(myfield,1,2)\n   * <p/>\n   * // MaxFloatFunction of LinearFloatFunction on numeric field value or constant\n   * max(linear(myfield,1,2),100)\n   * <p/>\n   * // ReciprocalFloatFunction on numeric field value\n   * recip(myfield,1,2,3)\n   * <p/>\n   * // ReciprocalFloatFunction on ReverseOrdFieldSource\n   * recip(rord(myfield),1,2,3)\n   * <p/>\n   * // ReciprocalFloatFunction on LinearFloatFunction on ReverseOrdFieldSource\n   * recip(linear(rord(myfield),1,2),3,4,5)\n   * </pre>\n   */\n  public static FunctionQuery parseFunction(String func, IndexSchema schema) throws ParseException {\n    SolrCore core = SolrCore.getSolrCore();\n    return (FunctionQuery) (QParser.getParser(func, \"func\", new LocalSolrQueryRequest(core, new HashMap())).parse());\n    // return new FunctionQuery(parseValSource(new StrParser(func), schema));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"79c686ad76bb74d110ec3c727914fb5693a7da23":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["28f87e4e419c12d17fbe4945b9676539e91e0a7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"32ef722831135736529762b4b97a13dd58b06f66":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["32ef722831135736529762b4b97a13dd58b06f66"],"28f87e4e419c12d17fbe4945b9676539e91e0a7f":["79c686ad76bb74d110ec3c727914fb5693a7da23"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"79c686ad76bb74d110ec3c727914fb5693a7da23":["28f87e4e419c12d17fbe4945b9676539e91e0a7f"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["79c686ad76bb74d110ec3c727914fb5693a7da23"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["32ef722831135736529762b4b97a13dd58b06f66"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"32ef722831135736529762b4b97a13dd58b06f66":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"28f87e4e419c12d17fbe4945b9676539e91e0a7f":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}