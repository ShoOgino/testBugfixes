{"path":"src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList).mjava","commits":[{"id":"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a","date":1240390408,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses the given named list and builds a token infoform it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;arr name=\"Tokenizer\"&gt;\n   *      &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *      &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *      &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *      &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *      &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *      &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *      &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *  &lt;/arr&gt;\n   * </code></pre>\n   *\n   * @param tokenNL The named list to parse.\n   *\n   * @return The built token info.\n   */\n  protected TokenInfo buildTokenInfo(NamedList tokenNL) {\n    String text = (String) tokenNL.get(\"text\");\n    String rawText = (String) tokenNL.get(\"rawText\");\n    String type = (String) tokenNL.get(\"type\");\n    int start = (Integer) tokenNL.get(\"start\");\n    int end = (Integer) tokenNL.get(\"end\");\n    int position = (Integer) tokenNL.get(\"position\");\n    Boolean match = (Boolean) tokenNL.get(\"match\");\n    return new TokenInfo(text, rawText, type, start, end, position, (match == null ? false : match));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList).mjava","sourceNew":"  /**\n   * Parses the given named list and builds a token infoform it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;arr name=\"Tokenizer\"&gt;\n   *      &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *      &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *      &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *      &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *      &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *      &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *      &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *  &lt;/arr&gt;\n   * </code></pre>\n   *\n   * @param tokenNL The named list to parse.\n   *\n   * @return The built token info.\n   */\n  protected TokenInfo buildTokenInfo(NamedList tokenNL) {\n    String text = (String) tokenNL.get(\"text\");\n    String rawText = (String) tokenNL.get(\"rawText\");\n    String type = (String) tokenNL.get(\"type\");\n    int start = (Integer) tokenNL.get(\"start\");\n    int end = (Integer) tokenNL.get(\"end\");\n    int position = (Integer) tokenNL.get(\"position\");\n    Boolean match = (Boolean) tokenNL.get(\"match\");\n    return new TokenInfo(text, rawText, type, start, end, position, (match == null ? false : match));\n  }\n\n","sourceOld":"  /**\n   * Parses the given named list and builds a token infoform it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;arr name=\"Tokenizer\"&gt;\n   *      &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *      &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *      &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *      &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *      &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *      &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *      &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *  &lt;/arr&gt;\n   * </code></pre>\n   *\n   * @param tokenNL The named list to parse.\n   *\n   * @return The built token info.\n   */\n  protected TokenInfo buildTokenInfo(NamedList tokenNL) {\n    String text = (String) tokenNL.get(\"text\");\n    String rawText = (String) tokenNL.get(\"rawText\");\n    String type = (String) tokenNL.get(\"type\");\n    int start = (Integer) tokenNL.get(\"start\");\n    int end = (Integer) tokenNL.get(\"end\");\n    int position = (Integer) tokenNL.get(\"position\");\n    Boolean match = (Boolean) tokenNL.get(\"match\");\n    return new TokenInfo(text, rawText, type, start, end, position, (match == null ? false : match));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}