{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","sourceNew":"  @Test\n  public void testMissingTypesParameter() throws Exception {\n    try {\n      TypeTokenFilterFactory typeTokenFilterFactory = new TypeTokenFilterFactory();\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(\"enablePositionIncrements\", \"false\");\n      typeTokenFilterFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n      typeTokenFilterFactory.init(args);\n      typeTokenFilterFactory.inform(new SolrResourceLoader(null, null));\n      fail(\"not supplying 'types' parameter should cause an InitializationException\");\n    } catch (InitializationException e) {\n      // everything ok\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMissingTypesParameter() throws Exception {\n    try {\n      TypeTokenFilterFactory typeTokenFilterFactory = new TypeTokenFilterFactory();\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(\"enablePositionIncrements\", \"false\");\n      typeTokenFilterFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n      typeTokenFilterFactory.init(args);\n      typeTokenFilterFactory.inform(new SolrResourceLoader(null, null));\n      fail(\"not supplying 'types' parameter should cause an InitializationException\");\n    } catch (InitializationException e) {\n      // everything ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10ddcde450bb525af01593bf6aa68f1f67e81b0d","date":1343104612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","sourceNew":"  @Test\n  public void testMissingTypesParameter() throws Exception {\n    try {\n      TypeTokenFilterFactory typeTokenFilterFactory = new TypeTokenFilterFactory();\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(\"enablePositionIncrements\", \"false\");\n      typeTokenFilterFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n      typeTokenFilterFactory.init(args);\n      typeTokenFilterFactory.inform(new ResourceAsStreamResourceLoader(getClass()));\n      fail(\"not supplying 'types' parameter should cause an InitializationException\");\n    } catch (InitializationException e) {\n      // everything ok\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMissingTypesParameter() throws Exception {\n    try {\n      TypeTokenFilterFactory typeTokenFilterFactory = new TypeTokenFilterFactory();\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(\"enablePositionIncrements\", \"false\");\n      typeTokenFilterFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n      typeTokenFilterFactory.init(args);\n      typeTokenFilterFactory.inform(new SolrResourceLoader(null, null));\n      fail(\"not supplying 'types' parameter should cause an InitializationException\");\n    } catch (InitializationException e) {\n      // everything ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","sourceNew":"  @Test\n  public void testMissingTypesParameter() throws Exception {\n    try {\n      TypeTokenFilterFactory typeTokenFilterFactory = new TypeTokenFilterFactory();\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(\"enablePositionIncrements\", \"false\");\n      typeTokenFilterFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n      typeTokenFilterFactory.init(args);\n      typeTokenFilterFactory.inform(new ResourceAsStreamResourceLoader(getClass()));\n      fail(\"not supplying 'types' parameter should cause an InitializationException\");\n    } catch (InitializationException e) {\n      // everything ok\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMissingTypesParameter() throws Exception {\n    try {\n      TypeTokenFilterFactory typeTokenFilterFactory = new TypeTokenFilterFactory();\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(\"enablePositionIncrements\", \"false\");\n      typeTokenFilterFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n      typeTokenFilterFactory.init(args);\n      typeTokenFilterFactory.inform(new SolrResourceLoader(null, null));\n      fail(\"not supplying 'types' parameter should cause an InitializationException\");\n    } catch (InitializationException e) {\n      // everything ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f80818731469e00f54165ec94aae2db868ea05","date":1343266866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","sourceNew":"  @Test\n  public void testMissingTypesParameter() throws Exception {\n    try {\n      TypeTokenFilterFactory typeTokenFilterFactory = new TypeTokenFilterFactory();\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(\"enablePositionIncrements\", \"false\");\n      typeTokenFilterFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n      typeTokenFilterFactory.init(args);\n      typeTokenFilterFactory.inform(new ResourceAsStreamResourceLoader(getClass()));\n      fail(\"not supplying 'types' parameter should cause an IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // everything ok\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMissingTypesParameter() throws Exception {\n    try {\n      TypeTokenFilterFactory typeTokenFilterFactory = new TypeTokenFilterFactory();\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(\"enablePositionIncrements\", \"false\");\n      typeTokenFilterFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n      typeTokenFilterFactory.init(args);\n      typeTokenFilterFactory.inform(new ResourceAsStreamResourceLoader(getClass()));\n      fail(\"not supplying 'types' parameter should cause an InitializationException\");\n    } catch (InitializationException e) {\n      // everything ok\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMissingTypesParameter() throws Exception {\n    try {\n      TypeTokenFilterFactory typeTokenFilterFactory = new TypeTokenFilterFactory();\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(\"enablePositionIncrements\", \"false\");\n      typeTokenFilterFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n      typeTokenFilterFactory.init(args);\n      typeTokenFilterFactory.inform(new ResourceAsStreamResourceLoader(getClass()));\n      fail(\"not supplying 'types' parameter should cause an IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // everything ok\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e456307e9593d8518ec97cd724d8a7d3a109297b","date":1343503424,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","sourceNew":"  @Test\n  public void testMissingTypesParameter() throws Exception {\n    try {\n      TypeTokenFilterFactory typeTokenFilterFactory = new TypeTokenFilterFactory();\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(\"enablePositionIncrements\", \"false\");\n      typeTokenFilterFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n      typeTokenFilterFactory.init(args);\n      typeTokenFilterFactory.inform(new ClasspathResourceLoader(getClass()));\n      fail(\"not supplying 'types' parameter should cause an IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // everything ok\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMissingTypesParameter() throws Exception {\n    try {\n      TypeTokenFilterFactory typeTokenFilterFactory = new TypeTokenFilterFactory();\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(\"enablePositionIncrements\", \"false\");\n      typeTokenFilterFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n      typeTokenFilterFactory.init(args);\n      typeTokenFilterFactory.inform(new ResourceAsStreamResourceLoader(getClass()));\n      fail(\"not supplying 'types' parameter should cause an IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // everything ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMissingTypesParameter() throws Exception {\n    try {\n      TypeTokenFilterFactory typeTokenFilterFactory = new TypeTokenFilterFactory();\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(\"enablePositionIncrements\", \"false\");\n      typeTokenFilterFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n      typeTokenFilterFactory.init(args);\n      typeTokenFilterFactory.inform(new ClasspathResourceLoader(getClass()));\n      fail(\"not supplying 'types' parameter should cause an IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // everything ok\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","sourceNew":"  @Test\n  public void testMissingTypesParameter() throws Exception {\n    try {\n      TypeTokenFilterFactory typeTokenFilterFactory = new TypeTokenFilterFactory();\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(\"enablePositionIncrements\", \"false\");\n      typeTokenFilterFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n      typeTokenFilterFactory.init(args);\n      typeTokenFilterFactory.inform(new ClasspathResourceLoader(getClass()));\n      fail(\"not supplying 'types' parameter should cause an IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // everything ok\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMissingTypesParameter() throws Exception {\n    try {\n      TypeTokenFilterFactory typeTokenFilterFactory = new TypeTokenFilterFactory();\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(\"enablePositionIncrements\", \"false\");\n      typeTokenFilterFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n      typeTokenFilterFactory.init(args);\n      typeTokenFilterFactory.inform(new ResourceAsStreamResourceLoader(getClass()));\n      fail(\"not supplying 'types' parameter should cause an IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // everything ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","sourceNew":"  public void testMissingTypesParameter() throws Exception {\n    try {\n      tokenFilterFactory(\"Type\", \"enablePositionIncrements\", \"false\");\n      fail(\"not supplying 'types' parameter should cause an IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // everything ok\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMissingTypesParameter() throws Exception {\n    try {\n      TypeTokenFilterFactory typeTokenFilterFactory = new TypeTokenFilterFactory();\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(\"enablePositionIncrements\", \"false\");\n      typeTokenFilterFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n      typeTokenFilterFactory.init(args);\n      typeTokenFilterFactory.inform(new ClasspathResourceLoader(getClass()));\n      fail(\"not supplying 'types' parameter should cause an IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // everything ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"192e49c0445803405b0bc0eebc8b758485480c21","date":1367699151,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","sourceNew":"  public void testMissingTypesParameter() throws Exception {\n    try {\n      tokenFilterFactory(\"Type\");\n      fail(\"not supplying 'types' parameter should cause an IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // everything ok\n    }\n  }\n\n","sourceOld":"  public void testMissingTypesParameter() throws Exception {\n    try {\n      tokenFilterFactory(\"Type\", \"enablePositionIncrements\", \"false\");\n      fail(\"not supplying 'types' parameter should cause an IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // everything ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilterFactory#testMissingTypesParameter().mjava","sourceNew":"  public void testMissingTypesParameter() throws Exception {\n    // not supplying 'types' parameter should cause an IllegalArgumentException\n    expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"Type\");\n    });\n  }\n\n","sourceOld":"  public void testMissingTypesParameter() throws Exception {\n    try {\n      tokenFilterFactory(\"Type\");\n      fail(\"not supplying 'types' parameter should cause an IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // everything ok\n    }\n  }\n\n","bugFix":["f6f80818731469e00f54165ec94aae2db868ea05","c9a61250c5cc14f652925f9198023e4bb80bb38c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"192e49c0445803405b0bc0eebc8b758485480c21":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"10ddcde450bb525af01593bf6aa68f1f67e81b0d":["3241e06e642196396b80bb293acd9c0814d079e0"],"05fe562aa248790944d43cdd478f512572835ba0":["192e49c0445803405b0bc0eebc8b758485480c21"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["e456307e9593d8518ec97cd724d8a7d3a109297b"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","10ddcde450bb525af01593bf6aa68f1f67e81b0d"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e456307e9593d8518ec97cd724d8a7d3a109297b"],"f6f80818731469e00f54165ec94aae2db868ea05":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","e456307e9593d8518ec97cd724d8a7d3a109297b"],"e456307e9593d8518ec97cd724d8a7d3a109297b":["f6f80818731469e00f54165ec94aae2db868ea05"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"192e49c0445803405b0bc0eebc8b758485480c21":["05fe562aa248790944d43cdd478f512572835ba0"],"10ddcde450bb525af01593bf6aa68f1f67e81b0d":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["192e49c0445803405b0bc0eebc8b758485480c21"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["f6f80818731469e00f54165ec94aae2db868ea05"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a1a22b1ad88b436661458df567f3fdb446392a4","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"f6f80818731469e00f54165ec94aae2db868ea05":["aba371508186796cc6151d8223a5b4e16d02e26e","e456307e9593d8518ec97cd724d8a7d3a109297b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"e456307e9593d8518ec97cd724d8a7d3a109297b":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"3241e06e642196396b80bb293acd9c0814d079e0":["10ddcde450bb525af01593bf6aa68f1f67e81b0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}