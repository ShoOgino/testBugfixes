{"path":"lucene/core/src/test/org/apache/lucene/search/TestBoostQuery#testRewrite().mjava","commits":[{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoostQuery#testRewrite().mjava","pathOld":"/dev/null","sourceNew":"  public void testRewrite() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n\n    // inner queries are rewritten\n    Query q = new BoostQuery(new MatchNoDocsQuery(), 2);\n    assertEquals(new BoostQuery(new BooleanQuery.Builder().build(), 2), searcher.rewrite(q));\n\n    // boosts are merged\n    q = new BoostQuery(new BoostQuery(new MatchAllDocsQuery(), 3), 2);\n    assertEquals(new BoostQuery(new MatchAllDocsQuery(), 6), searcher.rewrite(q));\n\n    // scores are not computed when the boost is 0\n    q = new BoostQuery(new MatchAllDocsQuery(), 0);\n    assertEquals(new BoostQuery(new ConstantScoreQuery(new MatchAllDocsQuery()), 0), searcher.rewrite(q));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d8b3f2faaf05547a6ed4e2769b664522af9514b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8b3f2faaf05547a6ed4e2769b664522af9514b3","date":1466522779,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoostQuery#testRewrite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoostQuery#testRewrite().mjava","sourceNew":"  public void testRewrite() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n\n    // inner queries are rewritten\n    Query q = new BoostQuery(new BooleanQuery.Builder().build(), 2);\n    assertEquals(new BoostQuery(new MatchNoDocsQuery(), 2), searcher.rewrite(q));\n\n    // boosts are merged\n    q = new BoostQuery(new BoostQuery(new MatchAllDocsQuery(), 3), 2);\n    assertEquals(new BoostQuery(new MatchAllDocsQuery(), 6), searcher.rewrite(q));\n\n    // scores are not computed when the boost is 0\n    q = new BoostQuery(new MatchAllDocsQuery(), 0);\n    assertEquals(new BoostQuery(new ConstantScoreQuery(new MatchAllDocsQuery()), 0), searcher.rewrite(q));\n  }\n\n","sourceOld":"  public void testRewrite() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n\n    // inner queries are rewritten\n    Query q = new BoostQuery(new MatchNoDocsQuery(), 2);\n    assertEquals(new BoostQuery(new BooleanQuery.Builder().build(), 2), searcher.rewrite(q));\n\n    // boosts are merged\n    q = new BoostQuery(new BoostQuery(new MatchAllDocsQuery(), 3), 2);\n    assertEquals(new BoostQuery(new MatchAllDocsQuery(), 6), searcher.rewrite(q));\n\n    // scores are not computed when the boost is 0\n    q = new BoostQuery(new MatchAllDocsQuery(), 0);\n    assertEquals(new BoostQuery(new ConstantScoreQuery(new MatchAllDocsQuery()), 0), searcher.rewrite(q));\n  }\n\n","bugFix":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoostQuery#testRewrite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoostQuery#testRewrite().mjava","sourceNew":"  public void testRewrite() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n\n    // inner queries are rewritten\n    Query q = new BoostQuery(new BooleanQuery.Builder().build(), 2);\n    assertEquals(new BoostQuery(new MatchNoDocsQuery(), 2), searcher.rewrite(q));\n\n    // boosts are merged\n    q = new BoostQuery(new BoostQuery(new MatchAllDocsQuery(), 3), 2);\n    assertEquals(new BoostQuery(new MatchAllDocsQuery(), 6), searcher.rewrite(q));\n\n    // scores are not computed when the boost is 0\n    q = new BoostQuery(new MatchAllDocsQuery(), 0);\n    assertEquals(new BoostQuery(new ConstantScoreQuery(new MatchAllDocsQuery()), 0), searcher.rewrite(q));\n  }\n\n","sourceOld":"  public void testRewrite() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n\n    // inner queries are rewritten\n    Query q = new BoostQuery(new MatchNoDocsQuery(), 2);\n    assertEquals(new BoostQuery(new BooleanQuery.Builder().build(), 2), searcher.rewrite(q));\n\n    // boosts are merged\n    q = new BoostQuery(new BoostQuery(new MatchAllDocsQuery(), 3), 2);\n    assertEquals(new BoostQuery(new MatchAllDocsQuery(), 6), searcher.rewrite(q));\n\n    // scores are not computed when the boost is 0\n    q = new BoostQuery(new MatchAllDocsQuery(), 0);\n    assertEquals(new BoostQuery(new ConstantScoreQuery(new MatchAllDocsQuery()), 0), searcher.rewrite(q));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8b3f2faaf05547a6ed4e2769b664522af9514b3":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","d8b3f2faaf05547a6ed4e2769b664522af9514b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d8b3f2faaf05547a6ed4e2769b664522af9514b3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["d8b3f2faaf05547a6ed4e2769b664522af9514b3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d8b3f2faaf05547a6ed4e2769b664522af9514b3":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}