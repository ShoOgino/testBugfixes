{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compile(String,Map[String,Method]).mjava","commits":[{"id":"0db39d89549f02471cd1655286175cdb23de346b","date":1379183393,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compile(String,Map[String,Method]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compiles the given expression with the supplied custom functions.\n   * <p>\n   * Functions must return a double.\n   *\n   * @param sourceText The expression to compile\n   * @param functions map of String names to functions\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  public static Expression compile(String sourceText, Map<String,Method> functions) throws ParseException {\n    for (Method m : functions.values()) {\n      checkFunction(m);\n    }\n    return new JavascriptCompiler(sourceText, functions).compileExpression();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96f6862293dd05eceeb03760bbb8ffcb604c6e80","date":1379186543,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compile(String,Map[String,Method],ClassLoader).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compile(String,Map[String,Method]).mjava","sourceNew":"  /**\n   * Compiles the given expression with the supplied custom functions.\n   * <p>\n   * Functions must return {@code double} and can take from zero to 256 {@code double} parameters.\n   *\n   * @param sourceText The expression to compile\n   * @param functions map of String names to functions\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  public static Expression compile(String sourceText, Map<String,Method> functions, ClassLoader parent) throws ParseException {\n    for (Method m : functions.values()) {\n      checkFunction(m);\n    }\n    return new JavascriptCompiler(sourceText, functions).compileExpression(parent);\n  }\n\n","sourceOld":"  /**\n   * Compiles the given expression with the supplied custom functions.\n   * <p>\n   * Functions must return a double.\n   *\n   * @param sourceText The expression to compile\n   * @param functions map of String names to functions\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  public static Expression compile(String sourceText, Map<String,Method> functions) throws ParseException {\n    for (Method m : functions.values()) {\n      checkFunction(m);\n    }\n    return new JavascriptCompiler(sourceText, functions).compileExpression();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96f6862293dd05eceeb03760bbb8ffcb604c6e80":["0db39d89549f02471cd1655286175cdb23de346b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0db39d89549f02471cd1655286175cdb23de346b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0db39d89549f02471cd1655286175cdb23de346b"],"96f6862293dd05eceeb03760bbb8ffcb604c6e80":[],"0db39d89549f02471cd1655286175cdb23de346b":["96f6862293dd05eceeb03760bbb8ffcb604c6e80"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96f6862293dd05eceeb03760bbb8ffcb604c6e80","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}