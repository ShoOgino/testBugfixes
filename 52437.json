{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","commits":[{"id":"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e","date":1493894873,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionCreated = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionCreated.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\",actionCreated.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) eventRef.get();\n    assertNotNull(nodeLostEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        nodeName, nodeLostEvent.getNodeName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"009caa80830ac6369c42e5f6515405d686eabfee","date":1494487120,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionCreated = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionCreated.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\",actionCreated.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) eventRef.get();\n    assertNotNull(nodeLostEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        nodeName, nodeLostEvent.getNodeName());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionCreated = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionCreated.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\",actionCreated.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) eventRef.get();\n    assertNotNull(nodeLostEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        nodeName, nodeLostEvent.getNodeName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d64e4b13048b3a4c03a20959037e5fb858764a2f","date":1495651323,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) eventRef.get();\n    assertNotNull(nodeLostEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        nodeName, nodeLostEvent.getNodeName());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionCreated = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionCreated.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\",actionCreated.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) eventRef.get();\n    assertNotNull(nodeLostEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        nodeName, nodeLostEvent.getNodeName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2f4717538692c396242d8b00ae0001626caebdd","date":1495700710,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) eventRef.get();\n    assertNotNull(nodeLostEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        nodeName, nodeLostEvent.getNodeName());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionCreated = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionCreated.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\",actionCreated.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) eventRef.get();\n    assertNotNull(nodeLostEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        nodeName, nodeLostEvent.getNodeName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) eventRef.get();\n    assertNotNull(nodeLostEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        nodeName, nodeLostEvent.getProperty(NodeLostTrigger.NodeLostEvent.NODE_NAME));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) eventRef.get();\n    assertNotNull(nodeLostEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        nodeName, nodeLostEvent.getNodeName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) eventRef.get();\n    assertNotNull(nodeLostEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        nodeName, nodeLostEvent.getProperty(NodeLostTrigger.NodeLostEvent.NODE_NAME));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) eventRef.get();\n    assertNotNull(nodeLostEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        nodeName, nodeLostEvent.getNodeName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c32a8448145a74a8902798f2e63e322827757ff2","date":1496834422,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        nodeName, nodeLostEvent.getProperty(NodeLostTrigger.NodeLostEvent.NODE_NAME));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) eventRef.get();\n    assertNotNull(nodeLostEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        nodeName, nodeLostEvent.getProperty(NodeLostTrigger.NodeLostEvent.NODE_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"664ff2b928393480d9655010aa700656b0fcade0","date":1496842764,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        nodeName, nodeLostEvent.getProperty(NodeLostTrigger.NodeLostEvent.NODE_NAME));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) eventRef.get();\n    assertNotNull(nodeLostEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        nodeName, nodeLostEvent.getProperty(NodeLostTrigger.NodeLostEvent.NODE_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2480cf60350a342e5e57439f3e71092fabc364a2","date":1499215962,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        nodeName, nodeLostEvent.getProperty(NodeLostTrigger.NodeLostEvent.NODE_NAME));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        nodeName, nodeLostEvent.getProperty(NodeLostTrigger.NodeLostEvent.NODE_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0d9c88546c1a130d50b56981790d87a308daffd","date":1499234617,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        nodeName, nodeLostEvent.getProperty(NodeLostTrigger.NodeLostEvent.NODE_NAME));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        nodeName, nodeLostEvent.getProperty(NodeLostTrigger.NodeLostEvent.NODE_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1","date":1503489512,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(nodeName));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        nodeName, nodeLostEvent.getProperty(NodeLostTrigger.NodeLostEvent.NODE_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(nodeName));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(nodeName));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(nodeName));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS);\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.MILLISECONDS.convert(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS, TimeUnit.SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(nodeName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","date":1522388336,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeLostTriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS)) {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>) nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(nodeName));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(nodeName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeLostTriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeLostTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS)) {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>) nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(nodeName));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeLostTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    String nodeName = newNode.getNodeName();\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_lost_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();\n    int index = -1;\n    for (int i = 0; i < jettySolrRunners.size(); i++) {\n      JettySolrRunner runner = jettySolrRunners.get(i);\n      if (runner == newNode) index = i;\n    }\n    assertFalse(index == -1);\n    cluster.stopJettySolrRunner(index);\n\n    // ensure that the old trigger sees the stopped node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_restore_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeLostTrigger.NodeLostEvent nodeLostEvent = (NodeLostTrigger.NodeLostEvent) events.iterator().next();\n    assertNotNull(nodeLostEvent);\n    List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(nodeName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2480cf60350a342e5e57439f3e71092fabc364a2":["664ff2b928393480d9655010aa700656b0fcade0"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["e0d9c88546c1a130d50b56981790d87a308daffd"],"e2f4717538692c396242d8b00ae0001626caebdd":["009caa80830ac6369c42e5f6515405d686eabfee","d64e4b13048b3a4c03a20959037e5fb858764a2f"],"d64e4b13048b3a4c03a20959037e5fb858764a2f":["009caa80830ac6369c42e5f6515405d686eabfee"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["e2f4717538692c396242d8b00ae0001626caebdd","464244264804e3f981bf1fb4b732516d8d62dbc2"],"009caa80830ac6369c42e5f6515405d686eabfee":["a7699e9ae4550ba2a55335a64ae7de9d5d9de39e"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"464244264804e3f981bf1fb4b732516d8d62dbc2":["e2f4717538692c396242d8b00ae0001626caebdd"],"c32a8448145a74a8902798f2e63e322827757ff2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"e0d9c88546c1a130d50b56981790d87a308daffd":["664ff2b928393480d9655010aa700656b0fcade0","2480cf60350a342e5e57439f3e71092fabc364a2"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"664ff2b928393480d9655010aa700656b0fcade0":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","c32a8448145a74a8902798f2e63e322827757ff2"]},"commit2Childs":{"2480cf60350a342e5e57439f3e71092fabc364a2":["e0d9c88546c1a130d50b56981790d87a308daffd"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e":["009caa80830ac6369c42e5f6515405d686eabfee"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"e2f4717538692c396242d8b00ae0001626caebdd":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","464244264804e3f981bf1fb4b732516d8d62dbc2"],"d64e4b13048b3a4c03a20959037e5fb858764a2f":["e2f4717538692c396242d8b00ae0001626caebdd"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["c32a8448145a74a8902798f2e63e322827757ff2","664ff2b928393480d9655010aa700656b0fcade0"],"009caa80830ac6369c42e5f6515405d686eabfee":["e2f4717538692c396242d8b00ae0001626caebdd","d64e4b13048b3a4c03a20959037e5fb858764a2f"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","a7699e9ae4550ba2a55335a64ae7de9d5d9de39e","560c18d71dad43d675158783c3840f8c80d6d39c"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"c32a8448145a74a8902798f2e63e322827757ff2":["664ff2b928393480d9655010aa700656b0fcade0"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"e0d9c88546c1a130d50b56981790d87a308daffd":["cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"560c18d71dad43d675158783c3840f8c80d6d39c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"664ff2b928393480d9655010aa700656b0fcade0":["2480cf60350a342e5e57439f3e71092fabc364a2","e0d9c88546c1a130d50b56981790d87a308daffd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}