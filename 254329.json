{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testEdgeNGramFilterPayload().mjava","commits":[{"id":"e08f8a488bd037175e649dd124b5142cfa04c965","date":1484306066,"type":0,"author":"Nathan Gass","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testEdgeNGramFilterPayload().mjava","pathOld":"/dev/null","sourceNew":"  public void testEdgeNGramFilterPayload() throws Exception {\n    Reader reader = new StringReader(\"test|0.1\");\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = tokenFilterFactory(\"DelimitedPayload\", \"encoder\", \"float\").create(stream);\n    stream = tokenFilterFactory(\"EdgeNGram\", \"minGramSize\", \"1\", \"maxGramSize\", \"2\").create(stream);\n\n    stream.reset();\n    while (stream.incrementToken()) {\n      PayloadAttribute payAttr = stream.getAttribute(PayloadAttribute.class);\n      assertNotNull(payAttr);\n      BytesRef payData = payAttr.getPayload();\n      assertNotNull(payData);\n      float payFloat = PayloadHelper.decodeFloat(payData.bytes);\n      assertEquals(0.1f, payFloat, 0.0f);\n    }\n    stream.end();\n    stream.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4db26d3e83f31e0a2effd326d85e95f2d08ecee2","date":1484322161,"type":3,"author":"Nathan Gass","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testEdgeNGramFilterPayload().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testEdgeNGramFilterPayload().mjava","sourceNew":"  /**\n   * Test EdgeNGramFilterFactory on tokens with payloads\n   */\n  public void testEdgeNGramFilterPayload() throws Exception {\n    Reader reader = new StringReader(\"test|0.1\");\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = tokenFilterFactory(\"DelimitedPayload\", \"encoder\", \"float\").create(stream);\n    stream = tokenFilterFactory(\"EdgeNGram\", \"minGramSize\", \"1\", \"maxGramSize\", \"2\").create(stream);\n\n    stream.reset();\n    while (stream.incrementToken()) {\n      PayloadAttribute payAttr = stream.getAttribute(PayloadAttribute.class);\n      assertNotNull(payAttr);\n      BytesRef payData = payAttr.getPayload();\n      assertNotNull(payData);\n      float payFloat = PayloadHelper.decodeFloat(payData.bytes);\n      assertEquals(0.1f, payFloat, 0.0f);\n    }\n    stream.end();\n    stream.close();\n  }\n\n","sourceOld":"  public void testEdgeNGramFilterPayload() throws Exception {\n    Reader reader = new StringReader(\"test|0.1\");\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = tokenFilterFactory(\"DelimitedPayload\", \"encoder\", \"float\").create(stream);\n    stream = tokenFilterFactory(\"EdgeNGram\", \"minGramSize\", \"1\", \"maxGramSize\", \"2\").create(stream);\n\n    stream.reset();\n    while (stream.incrementToken()) {\n      PayloadAttribute payAttr = stream.getAttribute(PayloadAttribute.class);\n      assertNotNull(payAttr);\n      BytesRef payData = payAttr.getPayload();\n      assertNotNull(payData);\n      float payFloat = PayloadHelper.decodeFloat(payData.bytes);\n      assertEquals(0.1f, payFloat, 0.0f);\n    }\n    stream.end();\n    stream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbbdd19493fa8ae4bdac9205ae34e7387f08f304","date":1484561803,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testEdgeNGramFilterPayload().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test EdgeNGramFilterFactory on tokens with payloads\n   */\n  public void testEdgeNGramFilterPayload() throws Exception {\n    Reader reader = new StringReader(\"test|0.1\");\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = tokenFilterFactory(\"DelimitedPayload\", \"encoder\", \"float\").create(stream);\n    stream = tokenFilterFactory(\"EdgeNGram\", \"minGramSize\", \"1\", \"maxGramSize\", \"2\").create(stream);\n\n    stream.reset();\n    while (stream.incrementToken()) {\n      PayloadAttribute payAttr = stream.getAttribute(PayloadAttribute.class);\n      assertNotNull(payAttr);\n      BytesRef payData = payAttr.getPayload();\n      assertNotNull(payData);\n      float payFloat = PayloadHelper.decodeFloat(payData.bytes);\n      assertEquals(0.1f, payFloat, 0.0f);\n    }\n    stream.end();\n    stream.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testEdgeNGramFilterPayload().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test EdgeNGramFilterFactory on tokens with payloads\n   */\n  public void testEdgeNGramFilterPayload() throws Exception {\n    Reader reader = new StringReader(\"test|0.1\");\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = tokenFilterFactory(\"DelimitedPayload\", \"encoder\", \"float\").create(stream);\n    stream = tokenFilterFactory(\"EdgeNGram\", \"minGramSize\", \"1\", \"maxGramSize\", \"2\").create(stream);\n\n    stream.reset();\n    while (stream.incrementToken()) {\n      PayloadAttribute payAttr = stream.getAttribute(PayloadAttribute.class);\n      assertNotNull(payAttr);\n      BytesRef payData = payAttr.getPayload();\n      assertNotNull(payData);\n      float payFloat = PayloadHelper.decodeFloat(payData.bytes);\n      assertEquals(0.1f, payFloat, 0.0f);\n    }\n    stream.end();\n    stream.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e08f8a488bd037175e649dd124b5142cfa04c965":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4db26d3e83f31e0a2effd326d85e95f2d08ecee2":["e08f8a488bd037175e649dd124b5142cfa04c965"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bbbdd19493fa8ae4bdac9205ae34e7387f08f304"],"bbbdd19493fa8ae4bdac9205ae34e7387f08f304":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4db26d3e83f31e0a2effd326d85e95f2d08ecee2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bbbdd19493fa8ae4bdac9205ae34e7387f08f304"]},"commit2Childs":{"e08f8a488bd037175e649dd124b5142cfa04c965":["4db26d3e83f31e0a2effd326d85e95f2d08ecee2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e08f8a488bd037175e649dd124b5142cfa04c965","507e7decdf00981d09a74632ea30299a4ce6ba72","bbbdd19493fa8ae4bdac9205ae34e7387f08f304"],"4db26d3e83f31e0a2effd326d85e95f2d08ecee2":["bbbdd19493fa8ae4bdac9205ae34e7387f08f304"],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"bbbdd19493fa8ae4bdac9205ae34e7387f08f304":["507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}