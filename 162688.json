{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCharsLimit().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCharsLimit().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCharsLimit().mjava","sourceNew":"  @Test \n  public void testCharsLimit() {\n    // Test that we can add up to 2^15-1 characters\n    CategoryPath p = new CategoryPath(0,0);\n    for (int i=0; i<8192; i++) {\n      p.add(\"aaaa\");\n    }\n    // Also see that in the current implementation, this is actually the\n    // limit: If we add one more character, things break (because ends[]\n    // is an array of shorts), and we actually get an exception.\n    try {\n      p.add(\"a\");\n      fail(\"Should have thrown an exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // good.\n    }\n  }\n\n","sourceOld":"  @Test \n  public void testCharsLimit() {\n    // Test that we can add up to 2^15-1 characters\n    CategoryPath p = new CategoryPath(0,0);\n    for (int i=0; i<8192; i++) {\n      p.add(\"aaaa\");\n    }\n    // Also see that in the current implementation, this is actually the\n    // limit: If we add one more character, things break (because ends[]\n    // is an array of shorts), and we actually get an exception.\n    try {\n      p.add(\"a\");\n      fail(\"Should have thrown an exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // good.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCharsLimit().mjava","sourceNew":null,"sourceOld":"  @Test \n  public void testCharsLimit() {\n    // Test that we can add up to 2^15-1 characters\n    CategoryPath p = new CategoryPath(0,0);\n    for (int i=0; i<8192; i++) {\n      p.add(\"aaaa\");\n    }\n    // Also see that in the current implementation, this is actually the\n    // limit: If we add one more character, things break (because ends[]\n    // is an array of shorts), and we actually get an exception.\n    try {\n      p.add(\"a\");\n      fail(\"Should have thrown an exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // good.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCharsLimit().mjava","sourceNew":null,"sourceOld":"  @Test \n  public void testCharsLimit() {\n    // Test that we can add up to 2^15-1 characters\n    CategoryPath p = new CategoryPath(0,0);\n    for (int i=0; i<8192; i++) {\n      p.add(\"aaaa\");\n    }\n    // Also see that in the current implementation, this is actually the\n    // limit: If we add one more character, things break (because ends[]\n    // is an array of shorts), and we actually get an exception.\n    try {\n      p.add(\"a\");\n      fail(\"Should have thrown an exception\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      // good.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}