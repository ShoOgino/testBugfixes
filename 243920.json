{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#NRTManager(IndexWriter,ExecutorService,SearcherWarmer).mjava","commits":[{"id":"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9","date":1316963893,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#NRTManager(IndexWriter,ExecutorService,SearcherWarmer).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#NRTManager(IndexWriter,ExecutorService).mjava","sourceNew":"  /**\n   * Create new NRTManager.\n   * \n   *  @param writer IndexWriter to open near-real-time\n   *         readers\n   *  @param es optional ExecutorService so different segments can\n   *         be searched concurrently (see {@link\n   *         IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass null\n   *         to search segments sequentially.\n   *  @param warmer optional {@link SearcherWarmer}.  Pass\n   *         null if you don't require the searcher to warmed\n   *         before going live.  If this is non-null then a\n   *         merged segment warmer is installed on the\n   *         provided IndexWriter's config.\n   *\n   *  <p><b>NOTE</b>: the provided {@link SearcherWarmer} is\n   *  not invoked for the initial searcher; you should\n   *  warm it yourself if necessary.\n   */\n  public NRTManager(IndexWriter writer, ExecutorService es, SearcherWarmer warmer) throws IOException {\n\n    this.writer = writer;\n    this.es = es;\n    this.warmer = warmer;\n    indexingGen = new AtomicLong(1);\n    searchingGen = new AtomicLong(-1);\n    noDeletesSearchingGen = new AtomicLong(-1);\n\n    // Create initial reader:\n    swapSearcher(new IndexSearcher(IndexReader.open(writer, true), es), 0, true);\n\n    if (this.warmer != null) {\n      writer.getConfig().setMergedSegmentWarmer(\n         new IndexWriter.IndexReaderWarmer() {\n           @Override\n           public void warm(IndexReader reader) throws IOException {\n             NRTManager.this.warmer.warm(new IndexSearcher(reader, NRTManager.this.es));\n           }\n         });\n    }\n  }\n\n","sourceOld":"  /**\n   * Create new NRTManager.  Note that this installs a\n   * merged segment warmer on the provided IndexWriter's\n   * config.\n   * \n   *  @param writer IndexWriter to open near-real-time\n   *         readers\n   *  @param es ExecutorService to pass to the IndexSearcher\n  */\n  public NRTManager(IndexWriter writer, ExecutorService es) throws IOException {\n\n    this.writer = writer;\n    this.es = es;\n    indexingGen = new AtomicLong(1);\n    searchingGen = new AtomicLong(-1);\n    noDeletesSearchingGen = new AtomicLong(-1);\n\n    // Create initial reader:\n    swapSearcher(new IndexSearcher(IndexReader.open(writer, true), es), 0, true);\n\n    writer.getConfig().setMergedSegmentWarmer(\n         new IndexWriter.IndexReaderWarmer() {\n           @Override\n           public void warm(IndexReader reader) throws IOException {\n             NRTManager.this.warm(reader);\n           }\n         });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"606baff722a317c76a92b111d183b54b6e6e5741","date":1317974711,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#NRTManager(IndexWriter,ExecutorService,SearcherWarmer).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#NRTManager(IndexWriter,ExecutorService,SearcherWarmer).mjava","sourceNew":"  /**\n   * Create new NRTManager.\n   * \n   *  @param writer IndexWriter to open near-real-time\n   *         readers\n   *  @param es optional ExecutorService so different segments can\n   *         be searched concurrently (see {@link IndexSearcher#IndexSearcher(IndexReader, ExecutorService)}.\n   *         Pass <code>null</code> to search segments sequentially.\n   *  @param warmer optional {@link SearcherWarmer}.  Pass\n   *         null if you don't require the searcher to warmed\n   *         before going live.  If this is non-null then a\n   *         merged segment warmer is installed on the\n   *         provided IndexWriter's config.\n   *\n   *  <p><b>NOTE</b>: the provided {@link SearcherWarmer} is\n   *  not invoked for the initial searcher; you should\n   *  warm it yourself if necessary.\n   */\n  public NRTManager(IndexWriter writer, ExecutorService es,\n      SearcherWarmer warmer) throws IOException {\n    this(writer, es, warmer, true);\n  }\n\n","sourceOld":"  /**\n   * Create new NRTManager.\n   * \n   *  @param writer IndexWriter to open near-real-time\n   *         readers\n   *  @param es optional ExecutorService so different segments can\n   *         be searched concurrently (see {@link\n   *         IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass null\n   *         to search segments sequentially.\n   *  @param warmer optional {@link SearcherWarmer}.  Pass\n   *         null if you don't require the searcher to warmed\n   *         before going live.  If this is non-null then a\n   *         merged segment warmer is installed on the\n   *         provided IndexWriter's config.\n   *\n   *  <p><b>NOTE</b>: the provided {@link SearcherWarmer} is\n   *  not invoked for the initial searcher; you should\n   *  warm it yourself if necessary.\n   */\n  public NRTManager(IndexWriter writer, ExecutorService es, SearcherWarmer warmer) throws IOException {\n\n    this.writer = writer;\n    this.es = es;\n    this.warmer = warmer;\n    indexingGen = new AtomicLong(1);\n    searchingGen = new AtomicLong(-1);\n    noDeletesSearchingGen = new AtomicLong(-1);\n\n    // Create initial reader:\n    swapSearcher(new IndexSearcher(IndexReader.open(writer, true), es), 0, true);\n\n    if (this.warmer != null) {\n      writer.getConfig().setMergedSegmentWarmer(\n         new IndexWriter.IndexReaderWarmer() {\n           @Override\n           public void warm(IndexReader reader) throws IOException {\n             NRTManager.this.warmer.warm(new IndexSearcher(reader, NRTManager.this.es));\n           }\n         });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NRTManager#NRTManager(IndexWriter,ExecutorService,SearcherWarmer).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#NRTManager(IndexWriter,ExecutorService,SearcherWarmer).mjava","sourceNew":"  /**\n   * Create new NRTManager.\n   * \n   *  @param writer IndexWriter to open near-real-time\n   *         readers\n   *  @param es optional ExecutorService so different segments can\n   *         be searched concurrently (see {@link IndexSearcher#IndexSearcher(IndexReader, ExecutorService)}.\n   *         Pass <code>null</code> to search segments sequentially.\n   *  @param warmer optional {@link SearcherWarmer}.  Pass\n   *         null if you don't require the searcher to warmed\n   *         before going live.  If this is non-null then a\n   *         merged segment warmer is installed on the\n   *         provided IndexWriter's config.\n   *\n   *  <p><b>NOTE</b>: the provided {@link SearcherWarmer} is\n   *  not invoked for the initial searcher; you should\n   *  warm it yourself if necessary.\n   */\n  public NRTManager(IndexWriter writer, ExecutorService es,\n      SearcherWarmer warmer) throws IOException {\n    this(writer, es, warmer, true);\n  }\n\n","sourceOld":"  /**\n   * Create new NRTManager.\n   * \n   *  @param writer IndexWriter to open near-real-time\n   *         readers\n   *  @param es optional ExecutorService so different segments can\n   *         be searched concurrently (see {@link IndexSearcher#IndexSearcher(IndexReader, ExecutorService)}.\n   *         Pass <code>null</code> to search segments sequentially.\n   *  @param warmer optional {@link SearcherWarmer}.  Pass\n   *         null if you don't require the searcher to warmed\n   *         before going live.  If this is non-null then a\n   *         merged segment warmer is installed on the\n   *         provided IndexWriter's config.\n   *\n   *  <p><b>NOTE</b>: the provided {@link SearcherWarmer} is\n   *  not invoked for the initial searcher; you should\n   *  warm it yourself if necessary.\n   */\n  public NRTManager(IndexWriter writer, ExecutorService es,\n      SearcherWarmer warmer) throws IOException {\n    this(writer, es, warmer, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["606baff722a317c76a92b111d183b54b6e6e5741"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"606baff722a317c76a92b111d183b54b6e6e5741":["edcc2c2cbab6bf89ea584169ffb3ca83a31827f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df16fc2e9b615e0138edac46655ae628f5d098ad"]},"commit2Childs":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edcc2c2cbab6bf89ea584169ffb3ca83a31827f9"],"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9":["606baff722a317c76a92b111d183b54b6e6e5741"],"606baff722a317c76a92b111d183b54b6e6e5741":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}