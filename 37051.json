{"path":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#getRequestHandler(String,Map[String,SolrRequestHandler]).mjava","commits":[{"id":"7947ef57ebadfb891b1c694f0772d616987e57c8","date":1412445663,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#getRequestHandler(String,Map[String,SolrRequestHandler]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the request handler registered to a given name.\n   *\n   * This function is thread safe.\n   */\n  public static SolrRequestHandler getRequestHandler(String handlerName, Map<String, SolrRequestHandler> reqHandlers) {\n    if(handlerName == null) return null;\n    SolrRequestHandler handler = reqHandlers.get(handlerName);\n    int idx = 0;\n    if(handler == null) {\n      for (; ; ) {\n        idx = handlerName.indexOf('/', idx+1);\n        if (idx > 0) {\n          String firstPart = handlerName.substring(0, idx);\n          handler = reqHandlers.get(firstPart);\n          if (handler == null) continue;\n          if (handler instanceof NestedRequestHandler) {\n            return ((NestedRequestHandler) handler).getSubHandler(handlerName.substring(idx));\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    return handler;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ba0abe4039f82ecf2e5f879913f512e941dde81","date":1412520276,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#getRequestHandler(String,Map[String,SolrRequestHandler]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the request handler registered to a given name.\n   *\n   * This function is thread safe.\n   */\n  public static SolrRequestHandler getRequestHandler(String handlerName, Map<String, SolrRequestHandler> reqHandlers) {\n    if(handlerName == null) return null;\n    SolrRequestHandler handler = reqHandlers.get(handlerName);\n    int idx = 0;\n    if(handler == null) {\n      for (; ; ) {\n        idx = handlerName.indexOf('/', idx+1);\n        if (idx > 0) {\n          String firstPart = handlerName.substring(0, idx);\n          handler = reqHandlers.get(firstPart);\n          if (handler == null) continue;\n          if (handler instanceof NestedRequestHandler) {\n            return ((NestedRequestHandler) handler).getSubHandler(handlerName.substring(idx));\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    return handler;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d196318cb8ce39ae32035f290cd1397833e472","date":1418140712,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#getRequestHandler(String,Map[String,SolrRequestHandler]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#getRequestHandler(String,Map[String,SolrRequestHandler]).mjava","sourceNew":"  /**\n   * Get the request handler registered to a given name.\n   *\n   * This function is thread safe.\n   */\n  public static SolrRequestHandler getRequestHandler(String handlerName, Map<String, SolrRequestHandler> reqHandlers) {\n    if(handlerName == null) return null;\n    SolrRequestHandler handler = reqHandlers.get(handlerName);\n    int idx = 0;\n    if(handler == null) {\n      for (; ; ) {\n        idx = handlerName.indexOf('/', idx+1);\n        if (idx > 0) {\n          String firstPart = handlerName.substring(0, idx);\n          handler = reqHandlers.get(firstPart);\n          if (handler == null) continue;\n          if(handler instanceof RequestHandlers.LazyRequestHandlerWrapper) {\n            handler = ((RequestHandlers.LazyRequestHandlerWrapper)handler).getWrappedHandler();\n          }\n          if (handler instanceof NestedRequestHandler) {\n            return ((NestedRequestHandler) handler).getSubHandler(handlerName.substring(idx));\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    return handler;\n  }\n\n","sourceOld":"  /**\n   * Get the request handler registered to a given name.\n   *\n   * This function is thread safe.\n   */\n  public static SolrRequestHandler getRequestHandler(String handlerName, Map<String, SolrRequestHandler> reqHandlers) {\n    if(handlerName == null) return null;\n    SolrRequestHandler handler = reqHandlers.get(handlerName);\n    int idx = 0;\n    if(handler == null) {\n      for (; ; ) {\n        idx = handlerName.indexOf('/', idx+1);\n        if (idx > 0) {\n          String firstPart = handlerName.substring(0, idx);\n          handler = reqHandlers.get(firstPart);\n          if (handler == null) continue;\n          if (handler instanceof NestedRequestHandler) {\n            return ((NestedRequestHandler) handler).getSubHandler(handlerName.substring(idx));\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    return handler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#getRequestHandler(String,PluginRegistry[SolrRequestHandler]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#getRequestHandler(String,Map[String,SolrRequestHandler]).mjava","sourceNew":"  /**\n   * Get the request handler registered to a given name.\n   *\n   * This function is thread safe.\n   */\n  public static SolrRequestHandler getRequestHandler(String handlerName, PluginRegistry<SolrRequestHandler> reqHandlers) {\n    if(handlerName == null) return null;\n    SolrRequestHandler handler = reqHandlers.get(handlerName);\n    int idx = 0;\n    if(handler == null) {\n      for (; ; ) {\n        idx = handlerName.indexOf('/', idx+1);\n        if (idx > 0) {\n          String firstPart = handlerName.substring(0, idx);\n          handler = reqHandlers.get(firstPart);\n          if (handler == null) continue;\n          if (handler instanceof NestedRequestHandler) {\n            return ((NestedRequestHandler) handler).getSubHandler(handlerName.substring(idx));\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    return handler;\n  }\n\n","sourceOld":"  /**\n   * Get the request handler registered to a given name.\n   *\n   * This function is thread safe.\n   */\n  public static SolrRequestHandler getRequestHandler(String handlerName, Map<String, SolrRequestHandler> reqHandlers) {\n    if(handlerName == null) return null;\n    SolrRequestHandler handler = reqHandlers.get(handlerName);\n    int idx = 0;\n    if(handler == null) {\n      for (; ; ) {\n        idx = handlerName.indexOf('/', idx+1);\n        if (idx > 0) {\n          String firstPart = handlerName.substring(0, idx);\n          handler = reqHandlers.get(firstPart);\n          if (handler == null) continue;\n          if(handler instanceof RequestHandlers.LazyRequestHandlerWrapper) {\n            handler = ((RequestHandlers.LazyRequestHandlerWrapper)handler).getWrappedHandler();\n          }\n          if (handler instanceof NestedRequestHandler) {\n            return ((NestedRequestHandler) handler).getSubHandler(handlerName.substring(idx));\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    return handler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#getRequestHandler(String,Map[String,SolrRequestHandler]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the request handler registered to a given name.\n   *\n   * This function is thread safe.\n   */\n  public static SolrRequestHandler getRequestHandler(String handlerName, Map<String, SolrRequestHandler> reqHandlers) {\n    if(handlerName == null) return null;\n    SolrRequestHandler handler = reqHandlers.get(handlerName);\n    int idx = 0;\n    if(handler == null) {\n      for (; ; ) {\n        idx = handlerName.indexOf('/', idx+1);\n        if (idx > 0) {\n          String firstPart = handlerName.substring(0, idx);\n          handler = reqHandlers.get(firstPart);\n          if (handler == null) continue;\n          if(handler instanceof RequestHandlers.LazyRequestHandlerWrapper) {\n            handler = ((RequestHandlers.LazyRequestHandlerWrapper)handler).getWrappedHandler();\n          }\n          if (handler instanceof NestedRequestHandler) {\n            return ((NestedRequestHandler) handler).getSubHandler(handlerName.substring(idx));\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    return handler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0d196318cb8ce39ae32035f290cd1397833e472","9aea0485ecacb6734c17da2d02569816c23a69c1"],"a0d196318cb8ce39ae32035f290cd1397833e472":["7947ef57ebadfb891b1c694f0772d616987e57c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0d196318cb8ce39ae32035f290cd1397833e472"],"5ba0abe4039f82ecf2e5f879913f512e941dde81":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7947ef57ebadfb891b1c694f0772d616987e57c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"7947ef57ebadfb891b1c694f0772d616987e57c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0d196318cb8ce39ae32035f290cd1397833e472":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ba0abe4039f82ecf2e5f879913f512e941dde81","7947ef57ebadfb891b1c694f0772d616987e57c8"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ba0abe4039f82ecf2e5f879913f512e941dde81":[],"7947ef57ebadfb891b1c694f0772d616987e57c8":["a0d196318cb8ce39ae32035f290cd1397833e472","5ba0abe4039f82ecf2e5f879913f512e941dde81"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5ba0abe4039f82ecf2e5f879913f512e941dde81","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}