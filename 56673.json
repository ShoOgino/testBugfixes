{"path":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getField(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getFieldable(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      StoredDocument doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getField(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getField(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      StoredDocument doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getField(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getField(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      StoredDocument doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      BooleanQuery.Builder realMLTQuery = new BooleanQuery.Builder();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getField(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      this.realMLTQuery = realMLTQuery.build();\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(this.realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(this.realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      StoredDocument doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      realMLTQuery = new BooleanQuery();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getField(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      BooleanQuery.Builder realMLTQuery = new BooleanQuery.Builder();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getField(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      this.realMLTQuery = realMLTQuery.build();\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(this.realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(this.realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      StoredDocument doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      BooleanQuery.Builder realMLTQuery = new BooleanQuery.Builder();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getField(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      this.realMLTQuery = realMLTQuery.build();\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(this.realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(this.realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c464a33a41a74ada47869a7372815aafb469df1a","date":1558062703,"type":3,"author":"Alessandro Benedetti","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeThis(int,int,int,List[Query],List[InterestingTerm],int).mjava","sourceNew":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( boostedMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      BooleanQuery.Builder realMLTQuery = new BooleanQuery.Builder();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getField(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      this.realMLTQuery = realMLTQuery.build();\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(this.realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(this.realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","sourceOld":"    public DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      Document doc = reader.document(id);\n      rawMLTQuery = mlt.like(id);\n      boostedMLTQuery = getBoostedQuery( rawMLTQuery );\n      if( terms != null ) {\n        fillInterestingTermsFromMLTQuery( rawMLTQuery, terms );\n      }\n\n      // exclude current document from results\n      BooleanQuery.Builder realMLTQuery = new BooleanQuery.Builder();\n      realMLTQuery.add(boostedMLTQuery, BooleanClause.Occur.MUST);\n      realMLTQuery.add(\n          new TermQuery(new Term(uniqueKeyField.getName(), uniqueKeyField.getType().storedToIndexed(doc.getField(uniqueKeyField.getName())))), \n            BooleanClause.Occur.MUST_NOT);\n      this.realMLTQuery = realMLTQuery.build();\n      \n      DocListAndSet results = new DocListAndSet();\n      if (this.needDocSet) {\n        results = searcher.getDocListAndSet(this.realMLTQuery, filters, null, start, rows, flags);\n      } else {\n        results.docList = searcher.getDocList(this.realMLTQuery, filters, null, start, rows, flags);\n      }\n      return results;\n    }\n\n","bugFix":["8d701c455e4783533e275f01bf3e813737b7e593"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["1509f151d7692d84fae414b2b799ac06ba60fcb4","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c464a33a41a74ada47869a7372815aafb469df1a":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c26f00b574427b55127e869b935845554afde1fa"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c464a33a41a74ada47869a7372815aafb469df1a"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"1d028314cced5858683a1bb4741423d0f934257b":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c464a33a41a74ada47869a7372815aafb469df1a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["c464a33a41a74ada47869a7372815aafb469df1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}