{"path":"src/java/org/apache/lucene/index/IndexWriter#applyDeletesSelectively(HashMap,List,IndexReader).mjava","commits":[{"id":"5a251aa47d1808cbae42c0e172d698c377430e60","date":1199375390,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#applyDeletesSelectively(HashMap,List,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#applyDeletesSelectively(HashMap,IndexReader).mjava","sourceNew":"  // Apply buffered delete terms to the segment just flushed from ram\n  // apply appropriately so that a delete term is only applied to\n  // the documents buffered before it, not those buffered after it.\n  private final void applyDeletesSelectively(HashMap deleteTerms, List deleteIds,\n                                             IndexReader reader)\n    throws CorruptIndexException, IOException {\n    Iterator iter = deleteTerms.entrySet().iterator();\n    while (iter.hasNext()) {\n      Entry entry = (Entry) iter.next();\n      Term term = (Term) entry.getKey();\n\n      TermDocs docs = reader.termDocs(term);\n      if (docs != null) {\n        int num = ((DocumentsWriter.Num) entry.getValue()).getNum();\n        try {\n          while (docs.next()) {\n            int doc = docs.doc();\n            if (doc >= num) {\n              break;\n            }\n            reader.deleteDocument(doc);\n          }\n        } finally {\n          docs.close();\n        }\n      }\n    }\n\n    if (deleteIds.size() > 0) {\n      iter = deleteIds.iterator();\n      while(iter.hasNext())\n        reader.deleteDocument(((Integer) iter.next()).intValue());\n    }\n  }\n\n","sourceOld":"  // Apply buffered delete terms to the segment just flushed from ram\n  // apply appropriately so that a delete term is only applied to\n  // the documents buffered before it, not those buffered after it.\n  private final int applyDeletesSelectively(HashMap deleteTerms,\n      IndexReader reader) throws CorruptIndexException, IOException {\n    Iterator iter = deleteTerms.entrySet().iterator();\n    int delCount = 0;\n    while (iter.hasNext()) {\n      Entry entry = (Entry) iter.next();\n      Term term = (Term) entry.getKey();\n\n      TermDocs docs = reader.termDocs(term);\n      if (docs != null) {\n        int num = ((DocumentsWriter.Num) entry.getValue()).getNum();\n        try {\n          while (docs.next()) {\n            int doc = docs.doc();\n            if (doc >= num) {\n              break;\n            }\n            reader.deleteDocument(doc);\n            delCount++;\n          }\n        } finally {\n          docs.close();\n        }\n      }\n    }\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexWriter#applyDeletesSelectively(HashMap,List,IndexReader).mjava","sourceNew":null,"sourceOld":"  // Apply buffered delete terms to the segment just flushed from ram\n  // apply appropriately so that a delete term is only applied to\n  // the documents buffered before it, not those buffered after it.\n  private final void applyDeletesSelectively(HashMap deleteTerms, List deleteIds,\n                                             IndexReader reader)\n    throws CorruptIndexException, IOException {\n    Iterator iter = deleteTerms.entrySet().iterator();\n    while (iter.hasNext()) {\n      Entry entry = (Entry) iter.next();\n      Term term = (Term) entry.getKey();\n\n      TermDocs docs = reader.termDocs(term);\n      if (docs != null) {\n        int num = ((DocumentsWriter.Num) entry.getValue()).getNum();\n        try {\n          while (docs.next()) {\n            int doc = docs.doc();\n            if (doc >= num) {\n              break;\n            }\n            reader.deleteDocument(doc);\n          }\n        } finally {\n          docs.close();\n        }\n      }\n    }\n\n    if (deleteIds.size() > 0) {\n      iter = deleteIds.iterator();\n      while(iter.hasNext())\n        reader.deleteDocument(((Integer) iter.next()).intValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a251aa47d1808cbae42c0e172d698c377430e60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["5a251aa47d1808cbae42c0e172d698c377430e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a251aa47d1808cbae42c0e172d698c377430e60"],"5a251aa47d1808cbae42c0e172d698c377430e60":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}