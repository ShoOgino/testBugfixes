{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testInvalidDocValuesUsage().mjava","commits":[{"id":"253a79e1af11467dd01315b1919025d288aa0ccb","date":1458032260,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testInvalidDocValuesUsage().mjava","pathOld":"/dev/null","sourceNew":"  public void testInvalidDocValuesUsage() throws Exception {\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 29L));\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"30\")));\n    try {\n      MemoryIndex.fromDocument(doc, analyzer);\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Can't add [BINARY] doc values field [field], because [NUMERIC] doc values field already exists\", e.getMessage());\n    }\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 29L));\n    doc.add(new NumericDocValuesField(\"field\", 30L));\n    try {\n      MemoryIndex.fromDocument(doc, analyzer);\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Only one value per field allowed for [NUMERIC] doc values field [field]\", e.getMessage());\n    }\n\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"a b\", Field.Store.NO));\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"a\")));\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"b\")));\n    try {\n      MemoryIndex.fromDocument(doc, analyzer);\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Only one value per field allowed for [BINARY] doc values field [field]\", e.getMessage());\n    }\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"a\")));\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"b\")));\n    doc.add(new TextField(\"field\", \"a b\", Field.Store.NO));\n    try {\n      MemoryIndex.fromDocument(doc, analyzer);\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Only one value per field allowed for [SORTED] doc values field [field]\", e.getMessage());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["89b68d01c34172936f1aa2a8b9abf0e1bc68415f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"89b68d01c34172936f1aa2a8b9abf0e1bc68415f","date":1486637198,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testInvalidDocValuesUsage().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testInvalidDocValuesUsage().mjava","sourceNew":"  public void testInvalidDocValuesUsage() throws Exception {\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 29L));\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"30\")));\n    try {\n      MemoryIndex.fromDocument(doc, analyzer);\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"cannot change DocValues type from NUMERIC to BINARY for field \\\"field\\\"\", e.getMessage());\n    }\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 29L));\n    doc.add(new NumericDocValuesField(\"field\", 30L));\n    try {\n      MemoryIndex.fromDocument(doc, analyzer);\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Only one value per field allowed for [NUMERIC] doc values field [field]\", e.getMessage());\n    }\n\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"a b\", Field.Store.NO));\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"a\")));\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"b\")));\n    try {\n      MemoryIndex.fromDocument(doc, analyzer);\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Only one value per field allowed for [BINARY] doc values field [field]\", e.getMessage());\n    }\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"a\")));\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"b\")));\n    doc.add(new TextField(\"field\", \"a b\", Field.Store.NO));\n    try {\n      MemoryIndex.fromDocument(doc, analyzer);\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Only one value per field allowed for [SORTED] doc values field [field]\", e.getMessage());\n    }\n  }\n\n","sourceOld":"  public void testInvalidDocValuesUsage() throws Exception {\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 29L));\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"30\")));\n    try {\n      MemoryIndex.fromDocument(doc, analyzer);\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Can't add [BINARY] doc values field [field], because [NUMERIC] doc values field already exists\", e.getMessage());\n    }\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"field\", 29L));\n    doc.add(new NumericDocValuesField(\"field\", 30L));\n    try {\n      MemoryIndex.fromDocument(doc, analyzer);\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Only one value per field allowed for [NUMERIC] doc values field [field]\", e.getMessage());\n    }\n\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"a b\", Field.Store.NO));\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"a\")));\n    doc.add(new BinaryDocValuesField(\"field\", new BytesRef(\"b\")));\n    try {\n      MemoryIndex.fromDocument(doc, analyzer);\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Only one value per field allowed for [BINARY] doc values field [field]\", e.getMessage());\n    }\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"a\")));\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"b\")));\n    doc.add(new TextField(\"field\", \"a b\", Field.Store.NO));\n    try {\n      MemoryIndex.fromDocument(doc, analyzer);\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Only one value per field allowed for [SORTED] doc values field [field]\", e.getMessage());\n    }\n  }\n\n","bugFix":["253a79e1af11467dd01315b1919025d288aa0ccb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"253a79e1af11467dd01315b1919025d288aa0ccb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"89b68d01c34172936f1aa2a8b9abf0e1bc68415f":["253a79e1af11467dd01315b1919025d288aa0ccb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89b68d01c34172936f1aa2a8b9abf0e1bc68415f"]},"commit2Childs":{"253a79e1af11467dd01315b1919025d288aa0ccb":["89b68d01c34172936f1aa2a8b9abf0e1bc68415f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["253a79e1af11467dd01315b1919025d288aa0ccb"],"89b68d01c34172936f1aa2a8b9abf0e1bc68415f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}