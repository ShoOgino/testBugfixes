{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#setCachingInMB(double,boolean).mjava","commits":[{"id":"3ec363f8022f02e8aca0cc8dfc2cdd6bc5d87e29","date":1332432942,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#setCachingInMB(double,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Enables caching for the second pass search. The cache will not grow over a specified limit in MB.\n   * The cache is filled during the first pass searched and then replayed during the second pass searched.\n   * If the cache grows beyond the specified limit, then the cache is purged and not used in the second pass search.\n   *\n   * @param maxCacheRAMMB The maximum amount in MB the cache is allowed to hold\n   * @param cacheScores   Whether to cache the scores\n   * @return <code>this</code>\n   */\n  public GroupingSearch setCachingInMB(double maxCacheRAMMB, boolean cacheScores) {\n    this.maxCacheRAMMB = maxCacheRAMMB;\n    this.maxDocsToCache = null;\n    this.cacheScores = cacheScores;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#setCachingInMB(double,boolean).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#setCachingInMB(double,boolean).mjava","sourceNew":"  /**\n   * Enables caching for the second pass search. The cache will not grow over a specified limit in MB.\n   * The cache is filled during the first pass searched and then replayed during the second pass searched.\n   * If the cache grows beyond the specified limit, then the cache is purged and not used in the second pass search.\n   *\n   * @param maxCacheRAMMB The maximum amount in MB the cache is allowed to hold\n   * @param cacheScores   Whether to cache the scores\n   * @return <code>this</code>\n   */\n  public GroupingSearch setCachingInMB(double maxCacheRAMMB, boolean cacheScores) {\n    this.maxCacheRAMMB = maxCacheRAMMB;\n    this.maxDocsToCache = null;\n    this.cacheScores = cacheScores;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Enables caching for the second pass search. The cache will not grow over a specified limit in MB.\n   * The cache is filled during the first pass searched and then replayed during the second pass searched.\n   * If the cache grows beyond the specified limit, then the cache is purged and not used in the second pass search.\n   *\n   * @param maxCacheRAMMB The maximum amount in MB the cache is allowed to hold\n   * @param cacheScores   Whether to cache the scores\n   * @return <code>this</code>\n   */\n  public GroupingSearch setCachingInMB(double maxCacheRAMMB, boolean cacheScores) {\n    this.maxCacheRAMMB = maxCacheRAMMB;\n    this.maxDocsToCache = null;\n    this.cacheScores = cacheScores;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ec363f8022f02e8aca0cc8dfc2cdd6bc5d87e29":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3ec363f8022f02e8aca0cc8dfc2cdd6bc5d87e29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"3ec363f8022f02e8aca0cc8dfc2cdd6bc5d87e29":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ec363f8022f02e8aca0cc8dfc2cdd6bc5d87e29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}