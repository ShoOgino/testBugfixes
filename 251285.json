{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean,boolean).mjava","commits":[{"id":"0d1728ac6bfc0cea61f3e27436b418295d9982a3","date":1491423806,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean).mjava","sourceNew":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, \n                                  boolean quoted, boolean fieldAutoGenPhraseQueries, boolean enableGraphQueries)\n        throws SyntaxError {\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted, fieldAutoGenPhraseQueries, enableGraphQueries);\n    }\n\n","sourceOld":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, \n                                  boolean quoted, boolean fieldAutoGenPhraseQueries) throws SyntaxError {\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted, fieldAutoGenPhraseQueries);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, \n                                  boolean quoted, boolean fieldAutoGenPhraseQueries, boolean enableGraphQueries)\n        throws SyntaxError {\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted, fieldAutoGenPhraseQueries, enableGraphQueries);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47d74fab5d64854ddafa81b65ed399b192f2d947","date":1512411916,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean,boolean,SynonymQueryStyle).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean,boolean).mjava","sourceNew":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, \n                                  boolean quoted, boolean fieldAutoGenPhraseQueries, boolean enableGraphQueries,\n                                  SynonymQueryStyle synonymQueryStyle)\n        throws SyntaxError {\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted, fieldAutoGenPhraseQueries, enableGraphQueries, synonymQueryStyle);\n    }\n\n","sourceOld":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, \n                                  boolean quoted, boolean fieldAutoGenPhraseQueries, boolean enableGraphQueries)\n        throws SyntaxError {\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted, fieldAutoGenPhraseQueries, enableGraphQueries);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"47d74fab5d64854ddafa81b65ed399b192f2d947":["0d1728ac6bfc0cea61f3e27436b418295d9982a3"],"0d1728ac6bfc0cea61f3e27436b418295d9982a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["47d74fab5d64854ddafa81b65ed399b192f2d947"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"47d74fab5d64854ddafa81b65ed399b192f2d947":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d1728ac6bfc0cea61f3e27436b418295d9982a3":["47d74fab5d64854ddafa81b65ed399b192f2d947"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0d1728ac6bfc0cea61f3e27436b418295d9982a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}