{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrServerTest#testConcurrentUpdate().mjava","commits":[{"id":"945902ae43d8dd7e920418efe36981403c2ee669","date":1405459741,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrServerTest#testConcurrentUpdate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrServer cuss = new ConcurrentUpdateSolrServer(serverUrl, cussQueueSize, cussThreadCount) {\n      @Override\n      public void handleError(Throwable ex) {\n        errorCounter.incrementAndGet();\n        errors.append(\" \"+ex);\n      }\n      @Override\n      public void onSuccess(HttpResponse resp) {\n        successCounter.incrementAndGet();\n      }\n    };\n    \n    cuss.setParser(new BinaryResponseParser());\n    cuss.setRequestWriter(new BinaryRequestWriter());\n    cuss.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    cuss.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = Executors.newFixedThreadPool(poolSize);\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, cuss));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    cuss.blockUntilFinished();\n    cuss.shutdownNow();    \n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"277815d57524d70adbc9f2f8822227858334e9da","date":1405477118,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrServerTest#testConcurrentUpdate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrServerTest#testConcurrentUpdate().mjava","sourceNew":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrServer cuss = new ConcurrentUpdateSolrServer(serverUrl, cussQueueSize, cussThreadCount) {\n      @Override\n      public void handleError(Throwable ex) {\n        errorCounter.incrementAndGet();\n        errors.append(\" \"+ex);\n      }\n      @Override\n      public void onSuccess(HttpResponse resp) {\n        successCounter.incrementAndGet();\n      }\n    };\n    \n    cuss.setParser(new BinaryResponseParser());\n    cuss.setRequestWriter(new BinaryRequestWriter());\n    cuss.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    cuss.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = Executors.newFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, cuss));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    cuss.blockUntilFinished();\n    cuss.shutdownNow();    \n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrServer cuss = new ConcurrentUpdateSolrServer(serverUrl, cussQueueSize, cussThreadCount) {\n      @Override\n      public void handleError(Throwable ex) {\n        errorCounter.incrementAndGet();\n        errors.append(\" \"+ex);\n      }\n      @Override\n      public void onSuccess(HttpResponse resp) {\n        successCounter.incrementAndGet();\n      }\n    };\n    \n    cuss.setParser(new BinaryResponseParser());\n    cuss.setRequestWriter(new BinaryRequestWriter());\n    cuss.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    cuss.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = Executors.newFixedThreadPool(poolSize);\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, cuss));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    cuss.blockUntilFinished();\n    cuss.shutdownNow();    \n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrServerTest#testConcurrentUpdate().mjava","sourceNew":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(serverUrl, cussQueueSize, cussThreadCount) {\n      @Override\n      public void handleError(Throwable ex) {\n        errorCounter.incrementAndGet();\n        errors.append(\" \"+ex);\n      }\n      @Override\n      public void onSuccess(HttpResponse resp) {\n        successCounter.incrementAndGet();\n      }\n    };\n    \n    concurrentClient.setParser(new BinaryResponseParser());\n    concurrentClient.setRequestWriter(new BinaryRequestWriter());\n    concurrentClient.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = Executors.newFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrServer cuss = new ConcurrentUpdateSolrServer(serverUrl, cussQueueSize, cussThreadCount) {\n      @Override\n      public void handleError(Throwable ex) {\n        errorCounter.incrementAndGet();\n        errors.append(\" \"+ex);\n      }\n      @Override\n      public void onSuccess(HttpResponse resp) {\n        successCounter.incrementAndGet();\n      }\n    };\n    \n    cuss.setParser(new BinaryResponseParser());\n    cuss.setRequestWriter(new BinaryRequestWriter());\n    cuss.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    cuss.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = Executors.newFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, cuss));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    cuss.blockUntilFinished();\n    cuss.shutdownNow();    \n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"277815d57524d70adbc9f2f8822227858334e9da":["945902ae43d8dd7e920418efe36981403c2ee669"],"945902ae43d8dd7e920418efe36981403c2ee669":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["277815d57524d70adbc9f2f8822227858334e9da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"277815d57524d70adbc9f2f8822227858334e9da":["bafca15d8e408346a67f4282ad1143b88023893b"],"945902ae43d8dd7e920418efe36981403c2ee669":["277815d57524d70adbc9f2f8822227858334e9da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["945902ae43d8dd7e920418efe36981403c2ee669"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}