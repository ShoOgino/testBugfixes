{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#setTopQueryResults(IndexReader,String,boolean,String[],String[]).mjava","commits":[{"id":"2ad458affd82a1d762eb506003907d9363a333cb","date":1528558344,"type":0,"author":"broustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#setTopQueryResults(IndexReader,String,boolean,String[],String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helpful for testing without loading config.xml.\n   *\n   * @param reader      The {@link org.apache.lucene.index.IndexReader}.\n   * @param queryString The query for which to elevate some documents. If the query has already been defined an\n   *                    elevation, this method overwrites it.\n   * @param subsetMatch <code>true</code> for query subset match; <code>false</code> for query exact match.\n   * @param elevatedIds The readable ids of the documents to set as top results for the provided query.\n   * @param excludedIds The readable ids of the document to exclude from results for the provided query.\n   * @throws java.io.IOException If there is a low-level I/O error.\n   */\n  @VisibleForTesting\n  void setTopQueryResults(IndexReader reader, String queryString, boolean subsetMatch,\n                          String[] elevatedIds, String[] excludedIds) throws IOException {\n    clearElevationProviderCache();\n    ElevatingQuery elevatingQuery = new ElevatingQuery(queryString, subsetMatch);\n    ElevationBuilder elevationBuilder = new ElevationBuilder();\n    elevationBuilder.addElevatedIds(elevatedIds == null ? Collections.emptyList() : Arrays.asList(elevatedIds));\n    elevationBuilder.addExcludedIds(excludedIds == null ? Collections.emptyList() : Arrays.asList(excludedIds));\n    Map<ElevatingQuery, ElevationBuilder> elevationBuilderMap = ImmutableMap.of(elevatingQuery, elevationBuilder);\n    synchronized (elevationProviderCache) {\n      elevationProviderCache.computeIfAbsent(reader, k -> createElevationProvider(queryAnalyzer, elevationBuilderMap));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#setTopQueryResults(IndexReader,String,boolean,String[],String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helpful for testing without loading config.xml.\n   *\n   * @param reader      The {@link org.apache.lucene.index.IndexReader}.\n   * @param queryString The query for which to elevate some documents. If the query has already been defined an\n   *                    elevation, this method overwrites it.\n   * @param subsetMatch <code>true</code> for query subset match; <code>false</code> for query exact match.\n   * @param elevatedIds The readable ids of the documents to set as top results for the provided query.\n   * @param excludedIds The readable ids of the document to exclude from results for the provided query.\n   * @throws java.io.IOException If there is a low-level I/O error.\n   */\n  @VisibleForTesting\n  void setTopQueryResults(IndexReader reader, String queryString, boolean subsetMatch,\n                          String[] elevatedIds, String[] excludedIds) throws IOException {\n    clearElevationProviderCache();\n    ElevatingQuery elevatingQuery = new ElevatingQuery(queryString, subsetMatch);\n    ElevationBuilder elevationBuilder = new ElevationBuilder();\n    elevationBuilder.addElevatedIds(elevatedIds == null ? Collections.emptyList() : Arrays.asList(elevatedIds));\n    elevationBuilder.addExcludedIds(excludedIds == null ? Collections.emptyList() : Arrays.asList(excludedIds));\n    Map<ElevatingQuery, ElevationBuilder> elevationBuilderMap = ImmutableMap.of(elevatingQuery, elevationBuilder);\n    synchronized (elevationProviderCache) {\n      elevationProviderCache.computeIfAbsent(reader, k -> createElevationProvider(queryAnalyzer, elevationBuilderMap));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#setTopQueryResults(IndexReader,String,boolean,String[],String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helpful for testing without loading config.xml.\n   *\n   * @param reader      The {@link org.apache.lucene.index.IndexReader}.\n   * @param queryString The query for which to elevate some documents. If the query has already been defined an\n   *                    elevation, this method overwrites it.\n   * @param subsetMatch <code>true</code> for query subset match; <code>false</code> for query exact match.\n   * @param elevatedIds The readable ids of the documents to set as top results for the provided query.\n   * @param excludedIds The readable ids of the document to exclude from results for the provided query.\n   * @throws java.io.IOException If there is a low-level I/O error.\n   */\n  @VisibleForTesting\n  void setTopQueryResults(IndexReader reader, String queryString, boolean subsetMatch,\n                          String[] elevatedIds, String[] excludedIds) throws IOException {\n    clearElevationProviderCache();\n    ElevatingQuery elevatingQuery = new ElevatingQuery(queryString, subsetMatch);\n    ElevationBuilder elevationBuilder = new ElevationBuilder();\n    elevationBuilder.addElevatedIds(elevatedIds == null ? Collections.emptyList() : Arrays.asList(elevatedIds));\n    elevationBuilder.addExcludedIds(excludedIds == null ? Collections.emptyList() : Arrays.asList(excludedIds));\n    Map<ElevatingQuery, ElevationBuilder> elevationBuilderMap = ImmutableMap.of(elevatingQuery, elevationBuilder);\n    synchronized (elevationProviderCache) {\n      elevationProviderCache.computeIfAbsent(reader, k -> createElevationProvider(queryAnalyzer, elevationBuilderMap));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6046c615b67e878b7c0ab9257d01dd759493f06","date":1564997027,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#setTopQueryResults(IndexReader,String,boolean,String[],String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#setTopQueryResults(IndexReader,String,boolean,String[],String[]).mjava","sourceNew":"  /**\n   * Helpful for testing without loading config.xml.\n   *\n   * @param reader      The {@link org.apache.lucene.index.IndexReader}.\n   * @param queryString The query for which to elevate some documents. If the query has already been defined an\n   *                    elevation, this method overwrites it.\n   * @param subsetMatch <code>true</code> for query subset match; <code>false</code> for query exact match.\n   * @param elevatedIds The readable ids of the documents to set as top results for the provided query.\n   * @param excludedIds The readable ids of the document to exclude from results for the provided query.\n   */\n  @VisibleForTesting\n  void setTopQueryResults(IndexReader reader, String queryString, boolean subsetMatch,\n                          String[] elevatedIds, String[] excludedIds) {\n    clearElevationProviderCache();\n    ElevatingQuery elevatingQuery = new ElevatingQuery(queryString, subsetMatch);\n    ElevationBuilder elevationBuilder = new ElevationBuilder();\n    elevationBuilder.addElevatedIds(elevatedIds == null ? Collections.emptyList() : Arrays.asList(elevatedIds));\n    elevationBuilder.addExcludedIds(excludedIds == null ? Collections.emptyList() : Arrays.asList(excludedIds));\n    Map<ElevatingQuery, ElevationBuilder> elevationBuilderMap = ImmutableMap.of(elevatingQuery, elevationBuilder);\n    synchronized (elevationProviderCache) {\n      elevationProviderCache.computeIfAbsent(reader, k -> createElevationProvider(elevationBuilderMap));\n    }\n  }\n\n","sourceOld":"  /**\n   * Helpful for testing without loading config.xml.\n   *\n   * @param reader      The {@link org.apache.lucene.index.IndexReader}.\n   * @param queryString The query for which to elevate some documents. If the query has already been defined an\n   *                    elevation, this method overwrites it.\n   * @param subsetMatch <code>true</code> for query subset match; <code>false</code> for query exact match.\n   * @param elevatedIds The readable ids of the documents to set as top results for the provided query.\n   * @param excludedIds The readable ids of the document to exclude from results for the provided query.\n   * @throws java.io.IOException If there is a low-level I/O error.\n   */\n  @VisibleForTesting\n  void setTopQueryResults(IndexReader reader, String queryString, boolean subsetMatch,\n                          String[] elevatedIds, String[] excludedIds) throws IOException {\n    clearElevationProviderCache();\n    ElevatingQuery elevatingQuery = new ElevatingQuery(queryString, subsetMatch);\n    ElevationBuilder elevationBuilder = new ElevationBuilder();\n    elevationBuilder.addElevatedIds(elevatedIds == null ? Collections.emptyList() : Arrays.asList(elevatedIds));\n    elevationBuilder.addExcludedIds(excludedIds == null ? Collections.emptyList() : Arrays.asList(excludedIds));\n    Map<ElevatingQuery, ElevationBuilder> elevationBuilderMap = ImmutableMap.of(elevatingQuery, elevationBuilder);\n    synchronized (elevationProviderCache) {\n      elevationProviderCache.computeIfAbsent(reader, k -> createElevationProvider(queryAnalyzer, elevationBuilderMap));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#setTopQueryResults(IndexReader,String,boolean,String[],String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#setTopQueryResults(IndexReader,String,boolean,String[],String[]).mjava","sourceNew":"  /**\n   * Helpful for testing without loading config.xml.\n   *\n   * @param reader      The {@link org.apache.lucene.index.IndexReader}.\n   * @param queryString The query for which to elevate some documents. If the query has already been defined an\n   *                    elevation, this method overwrites it.\n   * @param subsetMatch <code>true</code> for query subset match; <code>false</code> for query exact match.\n   * @param elevatedIds The readable ids of the documents to set as top results for the provided query.\n   * @param excludedIds The readable ids of the document to exclude from results for the provided query.\n   */\n  @VisibleForTesting\n  void setTopQueryResults(IndexReader reader, String queryString, boolean subsetMatch,\n                          String[] elevatedIds, String[] excludedIds) {\n    clearElevationProviderCache();\n    ElevatingQuery elevatingQuery = new ElevatingQuery(queryString, subsetMatch);\n    ElevationBuilder elevationBuilder = new ElevationBuilder();\n    elevationBuilder.addElevatedIds(elevatedIds == null ? Collections.emptyList() : Arrays.asList(elevatedIds));\n    elevationBuilder.addExcludedIds(excludedIds == null ? Collections.emptyList() : Arrays.asList(excludedIds));\n    Map<ElevatingQuery, ElevationBuilder> elevationBuilderMap = ImmutableMap.of(elevatingQuery, elevationBuilder);\n    synchronized (elevationProviderCache) {\n      elevationProviderCache.computeIfAbsent(reader, k -> createElevationProvider(elevationBuilderMap));\n    }\n  }\n\n","sourceOld":"  /**\n   * Helpful for testing without loading config.xml.\n   *\n   * @param reader      The {@link org.apache.lucene.index.IndexReader}.\n   * @param queryString The query for which to elevate some documents. If the query has already been defined an\n   *                    elevation, this method overwrites it.\n   * @param subsetMatch <code>true</code> for query subset match; <code>false</code> for query exact match.\n   * @param elevatedIds The readable ids of the documents to set as top results for the provided query.\n   * @param excludedIds The readable ids of the document to exclude from results for the provided query.\n   * @throws java.io.IOException If there is a low-level I/O error.\n   */\n  @VisibleForTesting\n  void setTopQueryResults(IndexReader reader, String queryString, boolean subsetMatch,\n                          String[] elevatedIds, String[] excludedIds) throws IOException {\n    clearElevationProviderCache();\n    ElevatingQuery elevatingQuery = new ElevatingQuery(queryString, subsetMatch);\n    ElevationBuilder elevationBuilder = new ElevationBuilder();\n    elevationBuilder.addElevatedIds(elevatedIds == null ? Collections.emptyList() : Arrays.asList(elevatedIds));\n    elevationBuilder.addExcludedIds(excludedIds == null ? Collections.emptyList() : Arrays.asList(excludedIds));\n    Map<ElevatingQuery, ElevationBuilder> elevationBuilderMap = ImmutableMap.of(elevatingQuery, elevationBuilder);\n    synchronized (elevationProviderCache) {\n      elevationProviderCache.computeIfAbsent(reader, k -> createElevationProvider(queryAnalyzer, elevationBuilderMap));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ad458affd82a1d762eb506003907d9363a333cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ad458affd82a1d762eb506003907d9363a333cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6046c615b67e878b7c0ab9257d01dd759493f06":["2ad458affd82a1d762eb506003907d9363a333cb"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["2ad458affd82a1d762eb506003907d9363a333cb","e6046c615b67e878b7c0ab9257d01dd759493f06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e6046c615b67e878b7c0ab9257d01dd759493f06"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ad458affd82a1d762eb506003907d9363a333cb"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2ad458affd82a1d762eb506003907d9363a333cb","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"2ad458affd82a1d762eb506003907d9363a333cb":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","e6046c615b67e878b7c0ab9257d01dd759493f06","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"e6046c615b67e878b7c0ab9257d01dd759493f06":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}