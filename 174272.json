{"path":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","sourceNew":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","sourceNew":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","sourceNew":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","sourceNew":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","sourceNew":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","sourceNew":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","sourceNew":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","sourceNew":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","date":1323050351,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","sourceNew":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"269bb27fb904b556e5128bc7b50673d0f0c161c2","date":1323097064,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","sourceNew":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","sourceNew":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","sourceNew":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader(false)\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34ca474b88b90218279fc4b893727bcefbb1f725","date":1327855341,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","sourceNew":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","sourceNew":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","sourceNew":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingTV().mjava","sourceNew":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlightingTV() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",//doc storage is required in order to have text to highlight\n        \"doc.term.vector.offsets=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["70ad682703b8585f5d0a637efec044d57ec05efb","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"269bb27fb904b556e5128bc7b50673d0f0c161c2":["9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["868da859b43505d9d2a023bfeae6dd0c795f5295","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","34ca474b88b90218279fc4b893727bcefbb1f725"],"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"a3776dccca01c11e7046323cfad46a3b4a471233":["ecc11368dc265bfdad90214f8bf5da99016ab1e2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","269bb27fb904b556e5128bc7b50673d0f0c161c2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"34ca474b88b90218279fc4b893727bcefbb1f725":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"269bb27fb904b556e5128bc7b50673d0f0c161c2":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"962d04139994fce5193143ef35615499a9a96d78":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["269bb27fb904b556e5128bc7b50673d0f0c161c2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d14e8d18c0e3970c20354dbeeb49da11bd587fbd","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5cab9a86bd67202d20b6adc463008c8e982b070a","34ca474b88b90218279fc4b893727bcefbb1f725"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["962d04139994fce5193143ef35615499a9a96d78"],"34ca474b88b90218279fc4b893727bcefbb1f725":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}