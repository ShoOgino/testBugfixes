{"path":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#getDetails().mjava","commits":[{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#getDetails().mjava","pathOld":"/dev/null","sourceNew":"    public FileDetails getDetails() {\n      FileType type = getType(path);\n\n      return new FileDetails() {\n        @Override\n        public MetaData getMetaData() {\n          try {\n            return readMetaData();\n          } catch (Exception e){\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public Date getTimeStamp() {\n          return new Date(realPath().toFile().lastModified());\n        }\n\n        @Override\n        public boolean isDir() {\n          return type == FileType.DIRECTORY;\n        }\n\n        @Override\n        public void writeMap(EntryWriter ew) throws IOException {\n          MetaData metaData = readMetaData();\n          ew.put(CommonParams.NAME, getSimpleName());\n          if (type == FileType.DIRECTORY) {\n            ew.put(\"dir\", true);\n            return;\n          }\n          ew.put(\"timestamp\", getTimeStamp());\n          metaData.writeMap(ew);\n\n        }\n      };\n\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849dbf8570155b8e5fd03d8c2274a0a60491051c","date":1570859954,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#getDetails().mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#getDetails().mjava","sourceNew":"    public FileDetails getDetails() {\n      FileType type = getType(path, false);\n\n      return new FileDetails() {\n        @Override\n        public MetaData getMetaData() {\n          try {\n            return readMetaData();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public Date getTimeStamp() {\n          return new Date(realPath().toFile().lastModified());\n        }\n\n        @Override\n        public boolean isDir() {\n          return type == FileType.DIRECTORY;\n        }\n\n        @Override\n        public void writeMap(EntryWriter ew) throws IOException {\n          MetaData metaData = readMetaData();\n          ew.put(CommonParams.NAME, getSimpleName());\n          if (type == FileType.DIRECTORY) {\n            ew.put(\"dir\", true);\n            return;\n          }\n          ew.put(\"timestamp\", getTimeStamp());\n          if(metaData != null)\n            metaData.writeMap(ew);\n\n        }\n      };\n    }\n\n","sourceOld":"    public FileDetails getDetails() {\n      FileType type = getType(path);\n\n      return new FileDetails() {\n        @Override\n        public MetaData getMetaData() {\n          try {\n            return readMetaData();\n          } catch (Exception e){\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public Date getTimeStamp() {\n          return new Date(realPath().toFile().lastModified());\n        }\n\n        @Override\n        public boolean isDir() {\n          return type == FileType.DIRECTORY;\n        }\n\n        @Override\n        public void writeMap(EntryWriter ew) throws IOException {\n          MetaData metaData = readMetaData();\n          ew.put(CommonParams.NAME, getSimpleName());\n          if (type == FileType.DIRECTORY) {\n            ew.put(\"dir\", true);\n            return;\n          }\n          ew.put(\"timestamp\", getTimeStamp());\n          metaData.writeMap(ew);\n\n        }\n      };\n\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#getDetails().mjava","pathOld":"/dev/null","sourceNew":"    public FileDetails getDetails() {\n      FileType type = getType(path, false);\n\n      return new FileDetails() {\n        @Override\n        public MetaData getMetaData() {\n          try {\n            return readMetaData();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public Date getTimeStamp() {\n          return new Date(realPath().toFile().lastModified());\n        }\n\n        @Override\n        public boolean isDir() {\n          return type == FileType.DIRECTORY;\n        }\n\n        @Override\n        public void writeMap(EntryWriter ew) throws IOException {\n          MetaData metaData = readMetaData();\n          ew.put(CommonParams.NAME, getSimpleName());\n          if (type == FileType.DIRECTORY) {\n            ew.put(\"dir\", true);\n            return;\n          }\n          ew.put(\"timestamp\", getTimeStamp());\n          if(metaData != null)\n            metaData.writeMap(ew);\n\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a6448412ce640b28861f4c00f899484a9adac1","date":1573627357,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#getDetails().mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#getDetails().mjava","sourceNew":"    public FileDetails getDetails() {\n      FileType type = getType(path, false);\n\n      return new FileDetails() {\n        @Override\n        public MetaData getMetaData() {\n          try {\n            return readMetaData();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public Date getTimeStamp() {\n          return new Date(realPath().toFile().lastModified());\n        }\n\n        @Override\n        public boolean isDir() {\n          return type == FileType.DIRECTORY;\n        }\n\n        @Override\n        public void writeMap(EntryWriter ew) throws IOException {\n          MetaData metaData = readMetaData();\n          ew.put(CommonParams.NAME, getSimpleName());\n          if (type == FileType.DIRECTORY) {\n            ew.put(\"dir\", true);\n            return;\n          }\n          ew.put(\"timestamp\", getTimeStamp());\n          if (metaData != null)\n            metaData.writeMap(ew);\n\n        }\n      };\n    }\n\n","sourceOld":"    public FileDetails getDetails() {\n      FileType type = getType(path, false);\n\n      return new FileDetails() {\n        @Override\n        public MetaData getMetaData() {\n          try {\n            return readMetaData();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public Date getTimeStamp() {\n          return new Date(realPath().toFile().lastModified());\n        }\n\n        @Override\n        public boolean isDir() {\n          return type == FileType.DIRECTORY;\n        }\n\n        @Override\n        public void writeMap(EntryWriter ew) throws IOException {\n          MetaData metaData = readMetaData();\n          ew.put(CommonParams.NAME, getSimpleName());\n          if (type == FileType.DIRECTORY) {\n            ew.put(\"dir\", true);\n            return;\n          }\n          ew.put(\"timestamp\", getTimeStamp());\n          if(metaData != null)\n            metaData.writeMap(ew);\n\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34ccc070314404a909b9af301ea9e64b211f0646","date":1573631914,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#getDetails().mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#getDetails().mjava","sourceNew":"    public FileDetails getDetails() {\n      FileType type = getType(path, false);\n\n      return new FileDetails() {\n        @Override\n        public MetaData getMetaData() {\n          try {\n            return readMetaData();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public Date getTimeStamp() {\n          return new Date(realPath().toFile().lastModified());\n        }\n\n        @Override\n        public boolean isDir() {\n          return type == FileType.DIRECTORY;\n        }\n\n        @Override\n        public long size() {\n          return realPath().toFile().length();\n        }\n\n        @Override\n        public void writeMap(EntryWriter ew) throws IOException {\n          MetaData metaData = readMetaData();\n          ew.put(CommonParams.NAME, getSimpleName());\n          if (type == FileType.DIRECTORY) {\n            ew.put(\"dir\", true);\n            return;\n          }\n\n          ew.put(\"size\", size());\n          ew.put(\"timestamp\", getTimeStamp());\n          if (metaData != null)\n            metaData.writeMap(ew);\n\n        }\n      };\n    }\n\n","sourceOld":"    public FileDetails getDetails() {\n      FileType type = getType(path, false);\n\n      return new FileDetails() {\n        @Override\n        public MetaData getMetaData() {\n          try {\n            return readMetaData();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public Date getTimeStamp() {\n          return new Date(realPath().toFile().lastModified());\n        }\n\n        @Override\n        public boolean isDir() {\n          return type == FileType.DIRECTORY;\n        }\n\n        @Override\n        public void writeMap(EntryWriter ew) throws IOException {\n          MetaData metaData = readMetaData();\n          ew.put(CommonParams.NAME, getSimpleName());\n          if (type == FileType.DIRECTORY) {\n            ew.put(\"dir\", true);\n            return;\n          }\n          ew.put(\"timestamp\", getTimeStamp());\n          if (metaData != null)\n            metaData.writeMap(ew);\n\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34ccc070314404a909b9af301ea9e64b211f0646":["d1a6448412ce640b28861f4c00f899484a9adac1"],"d1a6448412ce640b28861f4c00f899484a9adac1":["849dbf8570155b8e5fd03d8c2274a0a60491051c"],"8476949555f799dff381770c01cfad051a264487":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"849dbf8570155b8e5fd03d8c2274a0a60491051c":["8476949555f799dff381770c01cfad051a264487"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["34ccc070314404a909b9af301ea9e64b211f0646"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849dbf8570155b8e5fd03d8c2274a0a60491051c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8476949555f799dff381770c01cfad051a264487","b0b597c65628ca9e73913a07e81691f8229bae35"],"34ccc070314404a909b9af301ea9e64b211f0646":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1a6448412ce640b28861f4c00f899484a9adac1":["34ccc070314404a909b9af301ea9e64b211f0646"],"8476949555f799dff381770c01cfad051a264487":["849dbf8570155b8e5fd03d8c2274a0a60491051c"],"849dbf8570155b8e5fd03d8c2274a0a60491051c":["d1a6448412ce640b28861f4c00f899484a9adac1","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}