{"path":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter.BufferedSortedSetDocValues#nextDoc().mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter.BufferedSortedSetDocValues#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() {\n      // consume any un-consumed ords from current doc\n      while (ordUpto < ordCount) {\n        ordsIter.next();\n        ordUpto++;\n      }\n      while (true) {\n        docID++;\n        if (docID == ordCounts.size()) {\n          docID = NO_MORE_DOCS;\n          break;\n        }\n        ordCount = (int) ordCountsIter.next();\n        if (ordCount > 0) {\n          for(int i=0;i<ordCount;i++) {\n            currentDoc[i] = ordMap[Math.toIntExact(ordsIter.next())];\n          }\n          Arrays.sort(currentDoc, 0, ordCount);          \n          ordUpto = 0;\n          break;\n        }\n      }\n\n      return docID;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter.BufferedSortedSetDocValues#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() {\n      // consume any un-consumed ords from current doc\n      while (ordUpto < ordCount) {\n        ordsIter.next();\n        ordUpto++;\n      }\n      while (true) {\n        docID++;\n        if (docID == ordCounts.size()) {\n          docID = NO_MORE_DOCS;\n          break;\n        }\n        ordCount = (int) ordCountsIter.next();\n        if (ordCount > 0) {\n          for(int i=0;i<ordCount;i++) {\n            currentDoc[i] = ordMap[Math.toIntExact(ordsIter.next())];\n          }\n          Arrays.sort(currentDoc, 0, ordCount);          \n          ordUpto = 0;\n          break;\n        }\n      }\n\n      return docID;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5844844466689b1121b12ccb467623f894eb269d","date":1475600453,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter.BufferedSortedSetDocValues#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter.BufferedSortedSetDocValues#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      int docID = docsWithField.nextDoc();\n      if (docID != NO_MORE_DOCS) {\n        ordCount = (int) ordCountsIter.next();\n        assert ordCount > 0;\n        for (int i = 0; i < ordCount; i++) {\n          currentDoc[i] = ordMap[Math.toIntExact(ordsIter.next())];\n        }\n        Arrays.sort(currentDoc, 0, ordCount);          \n        ordUpto = 0;\n      }\n      return docID;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      // consume any un-consumed ords from current doc\n      while (ordUpto < ordCount) {\n        ordsIter.next();\n        ordUpto++;\n      }\n      while (true) {\n        docID++;\n        if (docID == ordCounts.size()) {\n          docID = NO_MORE_DOCS;\n          break;\n        }\n        ordCount = (int) ordCountsIter.next();\n        if (ordCount > 0) {\n          for(int i=0;i<ordCount;i++) {\n            currentDoc[i] = ordMap[Math.toIntExact(ordsIter.next())];\n          }\n          Arrays.sort(currentDoc, 0, ordCount);          \n          ordUpto = 0;\n          break;\n        }\n      }\n\n      return docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter.BufferedSortedSetDocValues#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      int docID = docsWithField.nextDoc();\n      if (docID != NO_MORE_DOCS) {\n        ordCount = (int) ordCountsIter.next();\n        assert ordCount > 0;\n        for (int i = 0; i < ordCount; i++) {\n          currentDoc[i] = ordMap[Math.toIntExact(ordsIter.next())];\n        }\n        Arrays.sort(currentDoc, 0, ordCount);          \n        ordUpto = 0;\n      }\n      return docID;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5844844466689b1121b12ccb467623f894eb269d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5844844466689b1121b12ccb467623f894eb269d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5844844466689b1121b12ccb467623f894eb269d"]},"commit2Childs":{"5844844466689b1121b12ccb467623f894eb269d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5844844466689b1121b12ccb467623f894eb269d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}