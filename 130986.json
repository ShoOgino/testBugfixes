{"path":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#testQueuedTimeMetric().mjava","commits":[{"id":"b793398be7cbf26fb9faa722569a03f8cb44c6ac","date":1554453334,"type":1,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#testQueuedTimeMetric().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#testAsyncWithQueue().mjava","sourceNew":"  @Test\n  public void testQueuedTimeMetric() throws Exception {\n    setupCluster(true, 100, false, null);\n    runAdminCommands();\n    waitForAuditEventCallbacks(3);\n    assertAuditMetricsMinimums(testHarness.get().cluster, CallbackAuditLoggerPlugin.class.getSimpleName(), 3, 0);\n    ArrayList<MetricRegistry> registries = getMetricsReigstries(testHarness.get().cluster);\n    Timer timer = ((Timer) registries.get(0).getMetrics().get(\"SECURITY./auditlogging.CallbackAuditLoggerPlugin.queuedTime\"));\n    double meanTimeOnQueue = timer.getSnapshot().getMean() / 1000000; // Convert to ms\n    assertTrue(\"Expecting mean time on queue >10ms, got \" + meanTimeOnQueue, meanTimeOnQueue > 10);\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncWithQueue() throws Exception {\n    setupCluster(true, 100, false, null);\n    runAdminCommands();\n    assertAuditMetricsMinimums(testHarness.get().cluster, CallbackAuditLoggerPlugin.class.getSimpleName(), 3, 0);\n    ArrayList<MetricRegistry> registries = getMetricsReigstries(testHarness.get().cluster);\n    Timer timer = ((Timer) registries.get(0).getMetrics().get(\"SECURITY./auditlogging.CallbackAuditLoggerPlugin.queuedTime\"));\n    double meanTimeOnQueue = timer.getSnapshot().getMean() / 1000000; // Convert to ms\n    assertTrue(meanTimeOnQueue > 50);\n    testHarness.get().shutdownCluster();\n    assertThreeAdminEvents();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d5482e225fe64e9f868c423923d1144adc88142","date":1571270194,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#testQueuedTimeMetric().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#testQueuedTimeMetric().mjava","sourceNew":"  @Test\n  public void testQueuedTimeMetric() throws Exception {\n    final Semaphore gate = new Semaphore(0);\n    CallbackAuditLoggerPlugin.BLOCKING_SEMAPHORES.put(\"testQueuedTimeMetric_semaphore\", gate);\n    setupCluster(true, \"testQueuedTimeMetric_semaphore\", false);\n\n    // NOTE: gate is empty, we don't allow any of the events to be logged yet\n    runThreeTestAdminCommands();\n\n    // Don't assume anything about the system clock,\n    // Thread.sleep is not a garunteed minimum for a predictible elapsed time...\n    final long start = System.nanoTime();\n    Thread.sleep(100);\n    final long end = System.nanoTime();\n    gate.release(3);\n\n    assertThreeTestAdminEvents();\n    assertAuditMetricsMinimums(testHarness.get().cluster, CallbackAuditLoggerPlugin.class.getSimpleName(), 3, 0);\n    ArrayList<MetricRegistry> registries = getMetricsReigstries(testHarness.get().cluster);\n    Timer timer = ((Timer) registries.get(0).getMetrics().get(\"SECURITY./auditlogging.CallbackAuditLoggerPlugin.queuedTime\"));\n    double meanTimeOnQueue = timer.getSnapshot().getMean();\n    double meanTimeExpected = (start - end) / 3.0D;\n    assertTrue(\"Expecting mean time on queue > \"+meanTimeExpected+\", got \" + meanTimeOnQueue,\n               meanTimeOnQueue > meanTimeExpected);\n  }\n\n","sourceOld":"  @Test\n  public void testQueuedTimeMetric() throws Exception {\n    setupCluster(true, 100, false, null);\n    runAdminCommands();\n    waitForAuditEventCallbacks(3);\n    assertAuditMetricsMinimums(testHarness.get().cluster, CallbackAuditLoggerPlugin.class.getSimpleName(), 3, 0);\n    ArrayList<MetricRegistry> registries = getMetricsReigstries(testHarness.get().cluster);\n    Timer timer = ((Timer) registries.get(0).getMetrics().get(\"SECURITY./auditlogging.CallbackAuditLoggerPlugin.queuedTime\"));\n    double meanTimeOnQueue = timer.getSnapshot().getMean() / 1000000; // Convert to ms\n    assertTrue(\"Expecting mean time on queue >10ms, got \" + meanTimeOnQueue, meanTimeOnQueue > 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5d5482e225fe64e9f868c423923d1144adc88142":["b793398be7cbf26fb9faa722569a03f8cb44c6ac"],"b793398be7cbf26fb9faa722569a03f8cb44c6ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d5482e225fe64e9f868c423923d1144adc88142"]},"commit2Childs":{"5d5482e225fe64e9f868c423923d1144adc88142":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b793398be7cbf26fb9faa722569a03f8cb44c6ac":["5d5482e225fe64e9f868c423923d1144adc88142"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b793398be7cbf26fb9faa722569a03f8cb44c6ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}