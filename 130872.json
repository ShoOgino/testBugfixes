{"path":"src/java/org/apache/lucene/index/DocFieldProcessorPerThread#rehash().mjava","commits":[{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocFieldProcessorPerThread#rehash().mjava","pathOld":"/dev/null","sourceNew":"  private void rehash() {\n    final int newHashSize = (int) (fieldHash.length*2);\n    assert newHashSize > fieldHash.length;\n\n    final DocFieldProcessorPerField newHashArray[] = new DocFieldProcessorPerField[newHashSize];\n\n    // Rehash\n    int newHashMask = newHashSize-1;\n    for(int j=0;j<fieldHash.length;j++) {\n      DocFieldProcessorPerField fp0 = fieldHash[j];\n      while(fp0 != null) {\n        final int hashPos2 = fp0.fieldInfo.name.hashCode() & newHashMask;\n        DocFieldProcessorPerField nextFP0 = fp0.next;\n        fp0.next = newHashArray[hashPos2];\n        newHashArray[hashPos2] = fp0;\n        fp0 = nextFP0;\n      }\n    }\n\n    fieldHash = newHashArray;\n    hashMask = newHashMask;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocFieldProcessorPerThread#rehash().mjava","pathOld":"src/java/org/apache/lucene/index/DocFieldProcessorPerThread#rehash().mjava","sourceNew":"  private void rehash() {\n    final int newHashSize = (fieldHash.length*2);\n    assert newHashSize > fieldHash.length;\n\n    final DocFieldProcessorPerField newHashArray[] = new DocFieldProcessorPerField[newHashSize];\n\n    // Rehash\n    int newHashMask = newHashSize-1;\n    for(int j=0;j<fieldHash.length;j++) {\n      DocFieldProcessorPerField fp0 = fieldHash[j];\n      while(fp0 != null) {\n        final int hashPos2 = fp0.fieldInfo.name.hashCode() & newHashMask;\n        DocFieldProcessorPerField nextFP0 = fp0.next;\n        fp0.next = newHashArray[hashPos2];\n        newHashArray[hashPos2] = fp0;\n        fp0 = nextFP0;\n      }\n    }\n\n    fieldHash = newHashArray;\n    hashMask = newHashMask;\n  }\n\n","sourceOld":"  private void rehash() {\n    final int newHashSize = (int) (fieldHash.length*2);\n    assert newHashSize > fieldHash.length;\n\n    final DocFieldProcessorPerField newHashArray[] = new DocFieldProcessorPerField[newHashSize];\n\n    // Rehash\n    int newHashMask = newHashSize-1;\n    for(int j=0;j<fieldHash.length;j++) {\n      DocFieldProcessorPerField fp0 = fieldHash[j];\n      while(fp0 != null) {\n        final int hashPos2 = fp0.fieldInfo.name.hashCode() & newHashMask;\n        DocFieldProcessorPerField nextFP0 = fp0.next;\n        fp0.next = newHashArray[hashPos2];\n        newHashArray[hashPos2] = fp0;\n        fp0 = nextFP0;\n      }\n    }\n\n    fieldHash = newHashArray;\n    hashMask = newHashMask;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread#rehash().mjava","pathOld":"src/java/org/apache/lucene/index/DocFieldProcessorPerThread#rehash().mjava","sourceNew":"  private void rehash() {\n    final int newHashSize = (fieldHash.length*2);\n    assert newHashSize > fieldHash.length;\n\n    final DocFieldProcessorPerField newHashArray[] = new DocFieldProcessorPerField[newHashSize];\n\n    // Rehash\n    int newHashMask = newHashSize-1;\n    for(int j=0;j<fieldHash.length;j++) {\n      DocFieldProcessorPerField fp0 = fieldHash[j];\n      while(fp0 != null) {\n        final int hashPos2 = fp0.fieldInfo.name.hashCode() & newHashMask;\n        DocFieldProcessorPerField nextFP0 = fp0.next;\n        fp0.next = newHashArray[hashPos2];\n        newHashArray[hashPos2] = fp0;\n        fp0 = nextFP0;\n      }\n    }\n\n    fieldHash = newHashArray;\n    hashMask = newHashMask;\n  }\n\n","sourceOld":"  private void rehash() {\n    final int newHashSize = (fieldHash.length*2);\n    assert newHashSize > fieldHash.length;\n\n    final DocFieldProcessorPerField newHashArray[] = new DocFieldProcessorPerField[newHashSize];\n\n    // Rehash\n    int newHashMask = newHashSize-1;\n    for(int j=0;j<fieldHash.length;j++) {\n      DocFieldProcessorPerField fp0 = fieldHash[j];\n      while(fp0 != null) {\n        final int hashPos2 = fp0.fieldInfo.name.hashCode() & newHashMask;\n        DocFieldProcessorPerField nextFP0 = fp0.next;\n        fp0.next = newHashArray[hashPos2];\n        newHashArray[hashPos2] = fp0;\n        fp0 = nextFP0;\n      }\n    }\n\n    fieldHash = newHashArray;\n    hashMask = newHashMask;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["5350389bf83287111f7760b9e3db3af8e3648474"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5350389bf83287111f7760b9e3db3af8e3648474":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4e1ce9be74263e9659aad8a6ee1f213193710b71"]},"commit2Childs":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}