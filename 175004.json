{"path":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonRangeFacetWithSubFacet().mjava","commits":[{"id":"6409f24cc7d96b04fb1c932845092b0e307fb5d4","date":1515972624,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonRangeFacetWithSubFacet().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJsonRangeFacetWithSubFacet() throws Exception {\n\n    // range facet, with terms facet nested under using limit=2 w/overrequest disabled\n    // filter out the first 5 docs (by id) which should ensure that regardless of sharding:\n    //  - x2 being the top term for the 1st range bucket\n    //  - x0 being the top term for the 2nd range bucket\n    //  - the 2nd term in each bucket may vary based on shard/doc placement, but the count will always be '1'\n    // ...and in many cases (based on the shard/doc placement) this will require refinement to backfill the top terms\n    final String filter = \"id_i1:[\"+VALUES.size()+\" TO *]\";\n\n    // the *facet* results should be the same regardless of wether we filter via fq, or using a domain filter on the top facet\n    for (boolean use_domain : Arrays.asList(true, false)) {\n      final String domain = use_domain ? \"domain: { filter:'\" + filter + \"'},\" : \"\";\n      final SolrQuery solrQuery = new SolrQuery(\"q\", (use_domain ? \"*:*\" : filter),\n                                                \"rows\", \"0\", \"json.facet\",\n                                                \"{ bar:{ type:range, field:\"+FIELD+\", \" + domain + \n                                                \"        start:'0,EUR', gap:'10,EUR', end:'20,EUR', other:all \" +\n                                                \"        facet: { foo:{ type:terms, field:x_s, \" +\n                                                \"                       refine:true, limit:2, overrequest:0\" +\n                                                \" } } } }\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        // this top level result count sanity check that should vary based on how we are filtering our facets...\n        assertEquals(use_domain ? 15 : 10, rsp.getResults().getNumFound());\n\n        final NamedList<Object> bar = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"bar\");\n        final List<NamedList<Object>> bar_buckets = (List<NamedList<Object>>) bar.get(\"buckets\");\n        final NamedList<Object> before = (NamedList<Object>) bar.get(\"before\");\n        final NamedList<Object> between = (NamedList<Object>) bar.get(\"between\");\n        final NamedList<Object> after = (NamedList<Object>) bar.get(\"after\");\n        \n        // sanity check our high level expectations...\n        assertEquals(\"bar num buckets\", 2, bar_buckets.size());\n        assertEqualsHACK(\"before count\", 0L, before.get(\"count\"));\n        assertEqualsHACK(\"between count\", 8L, between.get(\"count\"));\n        assertEqualsHACK(\"after count\", 2L, after.get(\"count\"));\n        \n        // drill into the various buckets...\n        \n        // before should have no subfacets since it's empty...\n        assertNull(\"before has foo???\", before.get(\"foo\"));\n        \n        // our 2 range buckets & their sub facets...\n        for (int i = 0; i < 2; i++) {\n          final NamedList<Object> bucket = bar_buckets.get(i);\n          assertEquals((i * 10) + \".00,EUR\", bucket.get(\"val\"));\n          assertEqualsHACK(\"bucket #\" + i, 4L, bucket.get(\"count\"));\n          final List<NamedList<Object>> foo_buckets = ((NamedList<List<NamedList<Object>>>)bucket.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"bucket #\" + i + \" foo num buckets\", 2, foo_buckets.size());\n          assertEquals(\"bucket #\" + i + \" foo top term\", (0==i ? \"x2\" : \"x0\"), foo_buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"bucket #\" + i + \" foo top count\", 2, foo_buckets.get(0).get(\"count\"));\n          // NOTE: we can't make any assertions about the 2nd val..\n          // our limit + randomized sharding could result in either remaining term being picked.\n          // but for eiter term, the count should be exactly the same...\n          assertEqualsHACK(\"bucket #\" + i + \" foo 2nd count\", 1, foo_buckets.get(1).get(\"count\"));\n        }\n        \n        { // between...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)between.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"between num buckets\", 2, buckets.size());\n          // the counts should both be 3, and the term order should break the tie...\n          assertEquals(\"between bucket top\", \"x0\", buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"between bucket top count\", 3L, buckets.get(0).get(\"count\"));\n          assertEquals(\"between bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEqualsHACK(\"between bucket 2nd count\", 3L, buckets.get(1).get(\"count\"));\n        }\n        \n        { // after...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)after.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"after num buckets\", 2, buckets.size());\n          // the counts should both be 1, and the term order should break the tie...\n          assertEquals(\"after bucket top\", \"x1\", buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"after bucket top count\", 1L, buckets.get(0).get(\"count\"));\n          assertEquals(\"after bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEqualsHACK(\"after bucket 2nd count\", 1L, buckets.get(1).get(\"count\"));\n        }\n        \n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1c841e27891873cab110ebeb89f124a8ec470176","c05b634713ca09b2267477408773904d4c69dd9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonRangeFacetWithSubFacet().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJsonRangeFacetWithSubFacet() throws Exception {\n\n    // range facet, with terms facet nested under using limit=2 w/overrequest disabled\n    // filter out the first 5 docs (by id) which should ensure that regardless of sharding:\n    //  - x2 being the top term for the 1st range bucket\n    //  - x0 being the top term for the 2nd range bucket\n    //  - the 2nd term in each bucket may vary based on shard/doc placement, but the count will always be '1'\n    // ...and in many cases (based on the shard/doc placement) this will require refinement to backfill the top terms\n    final String filter = \"id_i1:[\"+VALUES.size()+\" TO *]\";\n\n    // the *facet* results should be the same regardless of wether we filter via fq, or using a domain filter on the top facet\n    for (boolean use_domain : Arrays.asList(true, false)) {\n      final String domain = use_domain ? \"domain: { filter:'\" + filter + \"'},\" : \"\";\n      final SolrQuery solrQuery = new SolrQuery(\"q\", (use_domain ? \"*:*\" : filter),\n                                                \"rows\", \"0\", \"json.facet\",\n                                                \"{ bar:{ type:range, field:\"+FIELD+\", \" + domain + \n                                                \"        start:'0,EUR', gap:'10,EUR', end:'20,EUR', other:all \" +\n                                                \"        facet: { foo:{ type:terms, field:x_s, \" +\n                                                \"                       refine:true, limit:2, overrequest:0\" +\n                                                \" } } } }\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        // this top level result count sanity check that should vary based on how we are filtering our facets...\n        assertEquals(use_domain ? 15 : 10, rsp.getResults().getNumFound());\n\n        final NamedList<Object> bar = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"bar\");\n        final List<NamedList<Object>> bar_buckets = (List<NamedList<Object>>) bar.get(\"buckets\");\n        final NamedList<Object> before = (NamedList<Object>) bar.get(\"before\");\n        final NamedList<Object> between = (NamedList<Object>) bar.get(\"between\");\n        final NamedList<Object> after = (NamedList<Object>) bar.get(\"after\");\n        \n        // sanity check our high level expectations...\n        assertEquals(\"bar num buckets\", 2, bar_buckets.size());\n        assertEqualsHACK(\"before count\", 0L, before.get(\"count\"));\n        assertEqualsHACK(\"between count\", 8L, between.get(\"count\"));\n        assertEqualsHACK(\"after count\", 2L, after.get(\"count\"));\n        \n        // drill into the various buckets...\n        \n        // before should have no subfacets since it's empty...\n        assertNull(\"before has foo???\", before.get(\"foo\"));\n        \n        // our 2 range buckets & their sub facets...\n        for (int i = 0; i < 2; i++) {\n          final NamedList<Object> bucket = bar_buckets.get(i);\n          assertEquals((i * 10) + \".00,EUR\", bucket.get(\"val\"));\n          assertEqualsHACK(\"bucket #\" + i, 4L, bucket.get(\"count\"));\n          final List<NamedList<Object>> foo_buckets = ((NamedList<List<NamedList<Object>>>)bucket.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"bucket #\" + i + \" foo num buckets\", 2, foo_buckets.size());\n          assertEquals(\"bucket #\" + i + \" foo top term\", (0==i ? \"x2\" : \"x0\"), foo_buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"bucket #\" + i + \" foo top count\", 2, foo_buckets.get(0).get(\"count\"));\n          // NOTE: we can't make any assertions about the 2nd val..\n          // our limit + randomized sharding could result in either remaining term being picked.\n          // but for eiter term, the count should be exactly the same...\n          assertEqualsHACK(\"bucket #\" + i + \" foo 2nd count\", 1, foo_buckets.get(1).get(\"count\"));\n        }\n        \n        { // between...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)between.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"between num buckets\", 2, buckets.size());\n          // the counts should both be 3, and the term order should break the tie...\n          assertEquals(\"between bucket top\", \"x0\", buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"between bucket top count\", 3L, buckets.get(0).get(\"count\"));\n          assertEquals(\"between bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEqualsHACK(\"between bucket 2nd count\", 3L, buckets.get(1).get(\"count\"));\n        }\n        \n        { // after...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)after.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"after num buckets\", 2, buckets.size());\n          // the counts should both be 1, and the term order should break the tie...\n          assertEquals(\"after bucket top\", \"x1\", buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"after bucket top count\", 1L, buckets.get(0).get(\"count\"));\n          assertEquals(\"after bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEqualsHACK(\"after bucket 2nd count\", 1L, buckets.get(1).get(\"count\"));\n        }\n        \n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c05b634713ca09b2267477408773904d4c69dd9d","date":1530894845,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonRangeFacetWithSubFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonRangeFacetWithSubFacet().mjava","sourceNew":"  @Test\n  public void testJsonRangeFacetWithSubFacet() throws Exception {\n\n    // range facet, with terms facet nested under using limit=2 w/overrequest disabled\n    // filter out the first 5 docs (by id) which should ensure that regardless of sharding:\n    //  - x2 being the top term for the 1st range bucket\n    //  - x0 being the top term for the 2nd range bucket\n    //  - the 2nd term in each bucket may vary based on shard/doc placement, but the count will always be '1'\n    // ...and in many cases (based on the shard/doc placement) this will require refinement to backfill the top terms\n    final String filter = \"id_i1:[\"+VALUES.size()+\" TO *]\";\n\n    // the *facet* results should be the same regardless of wether we filter via fq, or using a domain filter on the top facet\n    for (boolean use_domain : Arrays.asList(true, false)) {\n      final String domain = use_domain ? \"domain: { filter:'\" + filter + \"'},\" : \"\";\n\n      // both of these options should produce same results since hardened:false is default\n      final String end = random().nextBoolean() ? \"end:'20,EUR'\" : \"end:'15,EUR'\";\n        \n      \n      final SolrQuery solrQuery = new SolrQuery(\"q\", (use_domain ? \"*:*\" : filter),\n                                                \"rows\", \"0\", \"json.facet\",\n                                                \"{ bar:{ type:range, field:\"+FIELD+\", \" + domain + \n                                                \"        start:'0,EUR', gap:'10,EUR', \"+end+\", other:all \" +\n                                                \"        facet: { foo:{ type:terms, field:x_s, \" +\n                                                \"                       refine:true, limit:2, overrequest:0\" +\n                                                \" } } } }\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        // this top level result count sanity check that should vary based on how we are filtering our facets...\n        assertEquals(use_domain ? 15 : 10, rsp.getResults().getNumFound());\n\n        final NamedList<Object> bar = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"bar\");\n        final List<NamedList<Object>> bar_buckets = (List<NamedList<Object>>) bar.get(\"buckets\");\n        final NamedList<Object> before = (NamedList<Object>) bar.get(\"before\");\n        final NamedList<Object> between = (NamedList<Object>) bar.get(\"between\");\n        final NamedList<Object> after = (NamedList<Object>) bar.get(\"after\");\n        \n        // sanity check our high level expectations...\n        assertEquals(\"bar num buckets\", 2, bar_buckets.size());\n        assertEqualsHACK(\"before count\", 0L, before.get(\"count\"));\n        assertEqualsHACK(\"between count\", 8L, between.get(\"count\"));\n        assertEqualsHACK(\"after count\", 2L, after.get(\"count\"));\n        \n        // drill into the various buckets...\n        \n        // before should have no subfacets since it's empty...\n        assertNull(\"before has foo???\", before.get(\"foo\"));\n        \n        // our 2 range buckets & their sub facets...\n        for (int i = 0; i < 2; i++) {\n          final NamedList<Object> bucket = bar_buckets.get(i);\n          assertEquals((i * 10) + \".00,EUR\", bucket.get(\"val\"));\n          assertEqualsHACK(\"bucket #\" + i, 4L, bucket.get(\"count\"));\n          final List<NamedList<Object>> foo_buckets = ((NamedList<List<NamedList<Object>>>)bucket.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"bucket #\" + i + \" foo num buckets\", 2, foo_buckets.size());\n          assertEquals(\"bucket #\" + i + \" foo top term\", (0==i ? \"x2\" : \"x0\"), foo_buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"bucket #\" + i + \" foo top count\", 2, foo_buckets.get(0).get(\"count\"));\n          // NOTE: we can't make any assertions about the 2nd val..\n          // our limit + randomized sharding could result in either remaining term being picked.\n          // but for eiter term, the count should be exactly the same...\n          assertEqualsHACK(\"bucket #\" + i + \" foo 2nd count\", 1, foo_buckets.get(1).get(\"count\"));\n        }\n        \n        { // between...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)between.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"between num buckets\", 2, buckets.size());\n          // the counts should both be 3, and the term order should break the tie...\n          assertEquals(\"between bucket top\", \"x0\", buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"between bucket top count\", 3L, buckets.get(0).get(\"count\"));\n          assertEquals(\"between bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEqualsHACK(\"between bucket 2nd count\", 3L, buckets.get(1).get(\"count\"));\n        }\n        \n        { // after...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)after.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"after num buckets\", 2, buckets.size());\n          // the counts should both be 1, and the term order should break the tie...\n          assertEquals(\"after bucket top\", \"x1\", buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"after bucket top count\", 1L, buckets.get(0).get(\"count\"));\n          assertEquals(\"after bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEqualsHACK(\"after bucket 2nd count\", 1L, buckets.get(1).get(\"count\"));\n        }\n        \n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJsonRangeFacetWithSubFacet() throws Exception {\n\n    // range facet, with terms facet nested under using limit=2 w/overrequest disabled\n    // filter out the first 5 docs (by id) which should ensure that regardless of sharding:\n    //  - x2 being the top term for the 1st range bucket\n    //  - x0 being the top term for the 2nd range bucket\n    //  - the 2nd term in each bucket may vary based on shard/doc placement, but the count will always be '1'\n    // ...and in many cases (based on the shard/doc placement) this will require refinement to backfill the top terms\n    final String filter = \"id_i1:[\"+VALUES.size()+\" TO *]\";\n\n    // the *facet* results should be the same regardless of wether we filter via fq, or using a domain filter on the top facet\n    for (boolean use_domain : Arrays.asList(true, false)) {\n      final String domain = use_domain ? \"domain: { filter:'\" + filter + \"'},\" : \"\";\n      final SolrQuery solrQuery = new SolrQuery(\"q\", (use_domain ? \"*:*\" : filter),\n                                                \"rows\", \"0\", \"json.facet\",\n                                                \"{ bar:{ type:range, field:\"+FIELD+\", \" + domain + \n                                                \"        start:'0,EUR', gap:'10,EUR', end:'20,EUR', other:all \" +\n                                                \"        facet: { foo:{ type:terms, field:x_s, \" +\n                                                \"                       refine:true, limit:2, overrequest:0\" +\n                                                \" } } } }\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        // this top level result count sanity check that should vary based on how we are filtering our facets...\n        assertEquals(use_domain ? 15 : 10, rsp.getResults().getNumFound());\n\n        final NamedList<Object> bar = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"bar\");\n        final List<NamedList<Object>> bar_buckets = (List<NamedList<Object>>) bar.get(\"buckets\");\n        final NamedList<Object> before = (NamedList<Object>) bar.get(\"before\");\n        final NamedList<Object> between = (NamedList<Object>) bar.get(\"between\");\n        final NamedList<Object> after = (NamedList<Object>) bar.get(\"after\");\n        \n        // sanity check our high level expectations...\n        assertEquals(\"bar num buckets\", 2, bar_buckets.size());\n        assertEqualsHACK(\"before count\", 0L, before.get(\"count\"));\n        assertEqualsHACK(\"between count\", 8L, between.get(\"count\"));\n        assertEqualsHACK(\"after count\", 2L, after.get(\"count\"));\n        \n        // drill into the various buckets...\n        \n        // before should have no subfacets since it's empty...\n        assertNull(\"before has foo???\", before.get(\"foo\"));\n        \n        // our 2 range buckets & their sub facets...\n        for (int i = 0; i < 2; i++) {\n          final NamedList<Object> bucket = bar_buckets.get(i);\n          assertEquals((i * 10) + \".00,EUR\", bucket.get(\"val\"));\n          assertEqualsHACK(\"bucket #\" + i, 4L, bucket.get(\"count\"));\n          final List<NamedList<Object>> foo_buckets = ((NamedList<List<NamedList<Object>>>)bucket.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"bucket #\" + i + \" foo num buckets\", 2, foo_buckets.size());\n          assertEquals(\"bucket #\" + i + \" foo top term\", (0==i ? \"x2\" : \"x0\"), foo_buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"bucket #\" + i + \" foo top count\", 2, foo_buckets.get(0).get(\"count\"));\n          // NOTE: we can't make any assertions about the 2nd val..\n          // our limit + randomized sharding could result in either remaining term being picked.\n          // but for eiter term, the count should be exactly the same...\n          assertEqualsHACK(\"bucket #\" + i + \" foo 2nd count\", 1, foo_buckets.get(1).get(\"count\"));\n        }\n        \n        { // between...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)between.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"between num buckets\", 2, buckets.size());\n          // the counts should both be 3, and the term order should break the tie...\n          assertEquals(\"between bucket top\", \"x0\", buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"between bucket top count\", 3L, buckets.get(0).get(\"count\"));\n          assertEquals(\"between bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEqualsHACK(\"between bucket 2nd count\", 3L, buckets.get(1).get(\"count\"));\n        }\n        \n        { // after...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)after.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"after num buckets\", 2, buckets.size());\n          // the counts should both be 1, and the term order should break the tie...\n          assertEquals(\"after bucket top\", \"x1\", buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"after bucket top count\", 1L, buckets.get(0).get(\"count\"));\n          assertEquals(\"after bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEqualsHACK(\"after bucket 2nd count\", 1L, buckets.get(1).get(\"count\"));\n        }\n        \n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","bugFix":["6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonRangeFacetWithSubFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonRangeFacetWithSubFacet().mjava","sourceNew":"  @Test\n  public void testJsonRangeFacetWithSubFacet() throws Exception {\n\n    // range facet, with terms facet nested under using limit=2 w/overrequest disabled\n    // filter out the first 5 docs (by id) which should ensure that regardless of sharding:\n    //  - x2 being the top term for the 1st range bucket\n    //  - x0 being the top term for the 2nd range bucket\n    //  - the 2nd term in each bucket may vary based on shard/doc placement, but the count will always be '1'\n    // ...and in many cases (based on the shard/doc placement) this will require refinement to backfill the top terms\n    final String filter = \"id_i1:[\"+VALUES.size()+\" TO *]\";\n\n    // the *facet* results should be the same regardless of wether we filter via fq, or using a domain filter on the top facet\n    for (boolean use_domain : Arrays.asList(true, false)) {\n      final String domain = use_domain ? \"domain: { filter:'\" + filter + \"'},\" : \"\";\n\n      // both of these options should produce same results since hardened:false is default\n      final String end = random().nextBoolean() ? \"end:'20,EUR'\" : \"end:'15,EUR'\";\n        \n      \n      final SolrQuery solrQuery = new SolrQuery(\"q\", (use_domain ? \"*:*\" : filter),\n                                                \"rows\", \"0\", \"json.facet\",\n                                                \"{ bar:{ type:range, field:\"+FIELD+\", \" + domain + \n                                                \"        start:'0,EUR', gap:'10,EUR', \"+end+\", other:all \" +\n                                                \"        facet: { foo:{ type:terms, field:x_s, \" +\n                                                \"                       refine:true, limit:2, overrequest:0\" +\n                                                \" } } } }\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        // this top level result count sanity check that should vary based on how we are filtering our facets...\n        assertEquals(use_domain ? 15 : 10, rsp.getResults().getNumFound());\n\n        final NamedList<Object> bar = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"bar\");\n        final List<NamedList<Object>> bar_buckets = (List<NamedList<Object>>) bar.get(\"buckets\");\n        final NamedList<Object> before = (NamedList<Object>) bar.get(\"before\");\n        final NamedList<Object> between = (NamedList<Object>) bar.get(\"between\");\n        final NamedList<Object> after = (NamedList<Object>) bar.get(\"after\");\n        \n        // sanity check our high level expectations...\n        assertEquals(\"bar num buckets\", 2, bar_buckets.size());\n        assertEqualsHACK(\"before count\", 0L, before.get(\"count\"));\n        assertEqualsHACK(\"between count\", 8L, between.get(\"count\"));\n        assertEqualsHACK(\"after count\", 2L, after.get(\"count\"));\n        \n        // drill into the various buckets...\n        \n        // before should have no subfacets since it's empty...\n        assertNull(\"before has foo???\", before.get(\"foo\"));\n        \n        // our 2 range buckets & their sub facets...\n        for (int i = 0; i < 2; i++) {\n          final NamedList<Object> bucket = bar_buckets.get(i);\n          assertEquals((i * 10) + \".00,EUR\", bucket.get(\"val\"));\n          assertEqualsHACK(\"bucket #\" + i, 4L, bucket.get(\"count\"));\n          final List<NamedList<Object>> foo_buckets = ((NamedList<List<NamedList<Object>>>)bucket.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"bucket #\" + i + \" foo num buckets\", 2, foo_buckets.size());\n          assertEquals(\"bucket #\" + i + \" foo top term\", (0==i ? \"x2\" : \"x0\"), foo_buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"bucket #\" + i + \" foo top count\", 2, foo_buckets.get(0).get(\"count\"));\n          // NOTE: we can't make any assertions about the 2nd val..\n          // our limit + randomized sharding could result in either remaining term being picked.\n          // but for eiter term, the count should be exactly the same...\n          assertEqualsHACK(\"bucket #\" + i + \" foo 2nd count\", 1, foo_buckets.get(1).get(\"count\"));\n        }\n        \n        { // between...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)between.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"between num buckets\", 2, buckets.size());\n          // the counts should both be 3, and the term order should break the tie...\n          assertEquals(\"between bucket top\", \"x0\", buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"between bucket top count\", 3L, buckets.get(0).get(\"count\"));\n          assertEquals(\"between bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEqualsHACK(\"between bucket 2nd count\", 3L, buckets.get(1).get(\"count\"));\n        }\n        \n        { // after...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)after.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"after num buckets\", 2, buckets.size());\n          // the counts should both be 1, and the term order should break the tie...\n          assertEquals(\"after bucket top\", \"x1\", buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"after bucket top count\", 1L, buckets.get(0).get(\"count\"));\n          assertEquals(\"after bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEqualsHACK(\"after bucket 2nd count\", 1L, buckets.get(1).get(\"count\"));\n        }\n        \n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJsonRangeFacetWithSubFacet() throws Exception {\n\n    // range facet, with terms facet nested under using limit=2 w/overrequest disabled\n    // filter out the first 5 docs (by id) which should ensure that regardless of sharding:\n    //  - x2 being the top term for the 1st range bucket\n    //  - x0 being the top term for the 2nd range bucket\n    //  - the 2nd term in each bucket may vary based on shard/doc placement, but the count will always be '1'\n    // ...and in many cases (based on the shard/doc placement) this will require refinement to backfill the top terms\n    final String filter = \"id_i1:[\"+VALUES.size()+\" TO *]\";\n\n    // the *facet* results should be the same regardless of wether we filter via fq, or using a domain filter on the top facet\n    for (boolean use_domain : Arrays.asList(true, false)) {\n      final String domain = use_domain ? \"domain: { filter:'\" + filter + \"'},\" : \"\";\n      final SolrQuery solrQuery = new SolrQuery(\"q\", (use_domain ? \"*:*\" : filter),\n                                                \"rows\", \"0\", \"json.facet\",\n                                                \"{ bar:{ type:range, field:\"+FIELD+\", \" + domain + \n                                                \"        start:'0,EUR', gap:'10,EUR', end:'20,EUR', other:all \" +\n                                                \"        facet: { foo:{ type:terms, field:x_s, \" +\n                                                \"                       refine:true, limit:2, overrequest:0\" +\n                                                \" } } } }\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        // this top level result count sanity check that should vary based on how we are filtering our facets...\n        assertEquals(use_domain ? 15 : 10, rsp.getResults().getNumFound());\n\n        final NamedList<Object> bar = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"bar\");\n        final List<NamedList<Object>> bar_buckets = (List<NamedList<Object>>) bar.get(\"buckets\");\n        final NamedList<Object> before = (NamedList<Object>) bar.get(\"before\");\n        final NamedList<Object> between = (NamedList<Object>) bar.get(\"between\");\n        final NamedList<Object> after = (NamedList<Object>) bar.get(\"after\");\n        \n        // sanity check our high level expectations...\n        assertEquals(\"bar num buckets\", 2, bar_buckets.size());\n        assertEqualsHACK(\"before count\", 0L, before.get(\"count\"));\n        assertEqualsHACK(\"between count\", 8L, between.get(\"count\"));\n        assertEqualsHACK(\"after count\", 2L, after.get(\"count\"));\n        \n        // drill into the various buckets...\n        \n        // before should have no subfacets since it's empty...\n        assertNull(\"before has foo???\", before.get(\"foo\"));\n        \n        // our 2 range buckets & their sub facets...\n        for (int i = 0; i < 2; i++) {\n          final NamedList<Object> bucket = bar_buckets.get(i);\n          assertEquals((i * 10) + \".00,EUR\", bucket.get(\"val\"));\n          assertEqualsHACK(\"bucket #\" + i, 4L, bucket.get(\"count\"));\n          final List<NamedList<Object>> foo_buckets = ((NamedList<List<NamedList<Object>>>)bucket.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"bucket #\" + i + \" foo num buckets\", 2, foo_buckets.size());\n          assertEquals(\"bucket #\" + i + \" foo top term\", (0==i ? \"x2\" : \"x0\"), foo_buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"bucket #\" + i + \" foo top count\", 2, foo_buckets.get(0).get(\"count\"));\n          // NOTE: we can't make any assertions about the 2nd val..\n          // our limit + randomized sharding could result in either remaining term being picked.\n          // but for eiter term, the count should be exactly the same...\n          assertEqualsHACK(\"bucket #\" + i + \" foo 2nd count\", 1, foo_buckets.get(1).get(\"count\"));\n        }\n        \n        { // between...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)between.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"between num buckets\", 2, buckets.size());\n          // the counts should both be 3, and the term order should break the tie...\n          assertEquals(\"between bucket top\", \"x0\", buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"between bucket top count\", 3L, buckets.get(0).get(\"count\"));\n          assertEquals(\"between bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEqualsHACK(\"between bucket 2nd count\", 3L, buckets.get(1).get(\"count\"));\n        }\n        \n        { // after...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)after.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"after num buckets\", 2, buckets.size());\n          // the counts should both be 1, and the term order should break the tie...\n          assertEquals(\"after bucket top\", \"x1\", buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"after bucket top count\", 1L, buckets.get(0).get(\"count\"));\n          assertEquals(\"after bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEqualsHACK(\"after bucket 2nd count\", 1L, buckets.get(1).get(\"count\"));\n        }\n        \n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonRangeFacetWithSubFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonRangeFacetWithSubFacet().mjava","sourceNew":"  @Test\n  public void testJsonRangeFacetWithSubFacet() throws Exception {\n\n    // range facet, with terms facet nested under using limit=2 w/overrequest disabled\n    // filter out the first 5 docs (by id) which should ensure that regardless of sharding:\n    //  - x2 being the top term for the 1st range bucket\n    //  - x0 being the top term for the 2nd range bucket\n    //  - the 2nd term in each bucket may vary based on shard/doc placement, but the count will always be '1'\n    // ...and in many cases (based on the shard/doc placement) this will require refinement to backfill the top terms\n    final String filter = \"id_i1:[\"+VALUES.size()+\" TO *]\";\n\n    // the *facet* results should be the same regardless of wether we filter via fq, or using a domain filter on the top facet\n    for (boolean use_domain : Arrays.asList(true, false)) {\n      final String domain = use_domain ? \"domain: { filter:'\" + filter + \"'},\" : \"\";\n\n      // both of these options should produce same results since hardened:false is default\n      final String end = random().nextBoolean() ? \"end:'20,EUR'\" : \"end:'15,EUR'\";\n        \n      \n      final SolrQuery solrQuery = new SolrQuery(\"q\", (use_domain ? \"*:*\" : filter),\n                                                \"rows\", \"0\", \"json.facet\",\n                                                \"{ bar:{ type:range, field:\"+FIELD+\", \" + domain + \n                                                \"        start:'0,EUR', gap:'10,EUR', \"+end+\", other:all \" +\n                                                \"        facet: { foo:{ type:terms, field:x_s, \" +\n                                                \"                       refine:true, limit:2, overrequest:0\" +\n                                                \" } } } }\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        // this top level result count sanity check that should vary based on how we are filtering our facets...\n        assertEquals(use_domain ? 15 : 10, rsp.getResults().getNumFound());\n\n        final NamedList<Object> bar = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"bar\");\n        final List<NamedList<Object>> bar_buckets = (List<NamedList<Object>>) bar.get(\"buckets\");\n        final NamedList<Object> before = (NamedList<Object>) bar.get(\"before\");\n        final NamedList<Object> between = (NamedList<Object>) bar.get(\"between\");\n        final NamedList<Object> after = (NamedList<Object>) bar.get(\"after\");\n        \n        // sanity check our high level expectations...\n        assertEquals(\"bar num buckets\", 2, bar_buckets.size());\n        assertEqualsHACK(\"before count\", 0L, before.get(\"count\"));\n        assertEqualsHACK(\"between count\", 8L, between.get(\"count\"));\n        assertEqualsHACK(\"after count\", 2L, after.get(\"count\"));\n        \n        // drill into the various buckets...\n        \n        // before should have no subfacets since it's empty...\n        assertNull(\"before has foo???\", before.get(\"foo\"));\n        \n        // our 2 range buckets & their sub facets...\n        for (int i = 0; i < 2; i++) {\n          final NamedList<Object> bucket = bar_buckets.get(i);\n          assertEquals((i * 10) + \".00,EUR\", bucket.get(\"val\"));\n          assertEqualsHACK(\"bucket #\" + i, 4L, bucket.get(\"count\"));\n          final List<NamedList<Object>> foo_buckets = ((NamedList<List<NamedList<Object>>>)bucket.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"bucket #\" + i + \" foo num buckets\", 2, foo_buckets.size());\n          assertEquals(\"bucket #\" + i + \" foo top term\", (0==i ? \"x2\" : \"x0\"), foo_buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"bucket #\" + i + \" foo top count\", 2, foo_buckets.get(0).get(\"count\"));\n          // NOTE: we can't make any assertions about the 2nd val..\n          // our limit + randomized sharding could result in either remaining term being picked.\n          // but for eiter term, the count should be exactly the same...\n          assertEqualsHACK(\"bucket #\" + i + \" foo 2nd count\", 1, foo_buckets.get(1).get(\"count\"));\n        }\n        \n        { // between...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)between.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"between num buckets\", 2, buckets.size());\n          // the counts should both be 3, and the term order should break the tie...\n          assertEquals(\"between bucket top\", \"x0\", buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"between bucket top count\", 3L, buckets.get(0).get(\"count\"));\n          assertEquals(\"between bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEqualsHACK(\"between bucket 2nd count\", 3L, buckets.get(1).get(\"count\"));\n        }\n        \n        { // after...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)after.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"after num buckets\", 2, buckets.size());\n          // the counts should both be 1, and the term order should break the tie...\n          assertEquals(\"after bucket top\", \"x1\", buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"after bucket top count\", 1L, buckets.get(0).get(\"count\"));\n          assertEquals(\"after bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEqualsHACK(\"after bucket 2nd count\", 1L, buckets.get(1).get(\"count\"));\n        }\n        \n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJsonRangeFacetWithSubFacet() throws Exception {\n\n    // range facet, with terms facet nested under using limit=2 w/overrequest disabled\n    // filter out the first 5 docs (by id) which should ensure that regardless of sharding:\n    //  - x2 being the top term for the 1st range bucket\n    //  - x0 being the top term for the 2nd range bucket\n    //  - the 2nd term in each bucket may vary based on shard/doc placement, but the count will always be '1'\n    // ...and in many cases (based on the shard/doc placement) this will require refinement to backfill the top terms\n    final String filter = \"id_i1:[\"+VALUES.size()+\" TO *]\";\n\n    // the *facet* results should be the same regardless of wether we filter via fq, or using a domain filter on the top facet\n    for (boolean use_domain : Arrays.asList(true, false)) {\n      final String domain = use_domain ? \"domain: { filter:'\" + filter + \"'},\" : \"\";\n      final SolrQuery solrQuery = new SolrQuery(\"q\", (use_domain ? \"*:*\" : filter),\n                                                \"rows\", \"0\", \"json.facet\",\n                                                \"{ bar:{ type:range, field:\"+FIELD+\", \" + domain + \n                                                \"        start:'0,EUR', gap:'10,EUR', end:'20,EUR', other:all \" +\n                                                \"        facet: { foo:{ type:terms, field:x_s, \" +\n                                                \"                       refine:true, limit:2, overrequest:0\" +\n                                                \" } } } }\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        // this top level result count sanity check that should vary based on how we are filtering our facets...\n        assertEquals(use_domain ? 15 : 10, rsp.getResults().getNumFound());\n\n        final NamedList<Object> bar = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"bar\");\n        final List<NamedList<Object>> bar_buckets = (List<NamedList<Object>>) bar.get(\"buckets\");\n        final NamedList<Object> before = (NamedList<Object>) bar.get(\"before\");\n        final NamedList<Object> between = (NamedList<Object>) bar.get(\"between\");\n        final NamedList<Object> after = (NamedList<Object>) bar.get(\"after\");\n        \n        // sanity check our high level expectations...\n        assertEquals(\"bar num buckets\", 2, bar_buckets.size());\n        assertEqualsHACK(\"before count\", 0L, before.get(\"count\"));\n        assertEqualsHACK(\"between count\", 8L, between.get(\"count\"));\n        assertEqualsHACK(\"after count\", 2L, after.get(\"count\"));\n        \n        // drill into the various buckets...\n        \n        // before should have no subfacets since it's empty...\n        assertNull(\"before has foo???\", before.get(\"foo\"));\n        \n        // our 2 range buckets & their sub facets...\n        for (int i = 0; i < 2; i++) {\n          final NamedList<Object> bucket = bar_buckets.get(i);\n          assertEquals((i * 10) + \".00,EUR\", bucket.get(\"val\"));\n          assertEqualsHACK(\"bucket #\" + i, 4L, bucket.get(\"count\"));\n          final List<NamedList<Object>> foo_buckets = ((NamedList<List<NamedList<Object>>>)bucket.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"bucket #\" + i + \" foo num buckets\", 2, foo_buckets.size());\n          assertEquals(\"bucket #\" + i + \" foo top term\", (0==i ? \"x2\" : \"x0\"), foo_buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"bucket #\" + i + \" foo top count\", 2, foo_buckets.get(0).get(\"count\"));\n          // NOTE: we can't make any assertions about the 2nd val..\n          // our limit + randomized sharding could result in either remaining term being picked.\n          // but for eiter term, the count should be exactly the same...\n          assertEqualsHACK(\"bucket #\" + i + \" foo 2nd count\", 1, foo_buckets.get(1).get(\"count\"));\n        }\n        \n        { // between...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)between.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"between num buckets\", 2, buckets.size());\n          // the counts should both be 3, and the term order should break the tie...\n          assertEquals(\"between bucket top\", \"x0\", buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"between bucket top count\", 3L, buckets.get(0).get(\"count\"));\n          assertEquals(\"between bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEqualsHACK(\"between bucket 2nd count\", 3L, buckets.get(1).get(\"count\"));\n        }\n        \n        { // after...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)after.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"after num buckets\", 2, buckets.size());\n          // the counts should both be 1, and the term order should break the tie...\n          assertEquals(\"after bucket top\", \"x1\", buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"after bucket top count\", 1L, buckets.get(0).get(\"count\"));\n          assertEquals(\"after bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEqualsHACK(\"after bucket 2nd count\", 1L, buckets.get(1).get(\"count\"));\n        }\n        \n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c841e27891873cab110ebeb89f124a8ec470176","date":1586527220,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonRangeFacetWithSubFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonRangeFacetWithSubFacet().mjava","sourceNew":"  @Test\n  public void testJsonRangeFacetWithSubFacet() throws Exception {\n\n    // range facet, with terms facet nested under using limit=2 w/overrequest disabled\n    // filter out the first 5 docs (by id) which should ensure that regardless of sharding:\n    //  - x2 being the top term for the 1st range bucket\n    //  - x0 being the top term for the 2nd range bucket\n    //  - the 2nd term in each bucket may vary based on shard/doc placement, but the count will always be '1'\n    // ...and in many cases (based on the shard/doc placement) this will require refinement to backfill the top terms\n    final String filter = \"id_i1:[\"+VALUES.size()+\" TO *]\";\n\n    // the *facet* results should be the same regardless of wether we filter via fq, or using a domain filter on the top facet\n    for (boolean use_domain : Arrays.asList(true, false)) {\n      final String domain = use_domain ? \"domain: { filter:'\" + filter + \"'},\" : \"\";\n\n      // both of these options should produce same results since hardened:false is default\n      final String end = random().nextBoolean() ? \"end:'20,EUR'\" : \"end:'15,EUR'\";\n        \n      \n      final SolrQuery solrQuery = new SolrQuery(\"q\", (use_domain ? \"*:*\" : filter),\n                                                \"rows\", \"0\", \"json.facet\",\n                                                \"{ bar:{ type:range, field:\"+FIELD+\", \" + domain + \n                                                \"        start:'0,EUR', gap:'10,EUR', \"+end+\", other:all \" +\n                                                \"        facet: { foo:{ type:terms, field:x_s, \" +\n                                                \"                       refine:true, limit:2, overrequest:0\" +\n                                                \" } } } }\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        // this top level result count sanity check that should vary based on how we are filtering our facets...\n        assertEquals(use_domain ? 15 : 10, rsp.getResults().getNumFound());\n\n        final NamedList<Object> bar = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"bar\");\n        final List<NamedList<Object>> bar_buckets = (List<NamedList<Object>>) bar.get(\"buckets\");\n        final NamedList<Object> before = (NamedList<Object>) bar.get(\"before\");\n        final NamedList<Object> between = (NamedList<Object>) bar.get(\"between\");\n        final NamedList<Object> after = (NamedList<Object>) bar.get(\"after\");\n        \n        // sanity check our high level expectations...\n        assertEquals(\"bar num buckets\", 2, bar_buckets.size());\n        assertEquals(\"before count\", 0L, before.get(\"count\"));\n        assertEquals(\"between count\", 8L, between.get(\"count\"));\n        assertEquals(\"after count\", 2L, after.get(\"count\"));\n        \n        // drill into the various buckets...\n        \n        // before should have no subfacets since it's empty...\n        assertNull(\"before has foo???\", before.get(\"foo\"));\n        \n        // our 2 range buckets & their sub facets...\n        for (int i = 0; i < 2; i++) {\n          final NamedList<Object> bucket = bar_buckets.get(i);\n          assertEquals((i * 10) + \".00,EUR\", bucket.get(\"val\"));\n          assertEquals(\"bucket #\" + i, 4L, bucket.get(\"count\"));\n          final List<NamedList<Object>> foo_buckets = ((NamedList<List<NamedList<Object>>>)bucket.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"bucket #\" + i + \" foo num buckets\", 2, foo_buckets.size());\n          assertEquals(\"bucket #\" + i + \" foo top term\", (0==i ? \"x2\" : \"x0\"), foo_buckets.get(0).get(\"val\"));\n          assertEquals(\"bucket #\" + i + \" foo top count\", 2L, foo_buckets.get(0).get(\"count\"));\n          // NOTE: we can't make any assertions about the 2nd val..\n          // our limit + randomized sharding could result in either remaining term being picked.\n          // but for either term, the count should be exactly the same...\n          assertEquals(\"bucket #\" + i + \" foo 2nd count\", 1L, foo_buckets.get(1).get(\"count\"));\n        }\n        \n        { // between...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)between.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"between num buckets\", 2, buckets.size());\n          // the counts should both be 3, and the term order should break the tie...\n          assertEquals(\"between bucket top\", \"x0\", buckets.get(0).get(\"val\"));\n          assertEquals(\"between bucket top count\", 3L, buckets.get(0).get(\"count\"));\n          assertEquals(\"between bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEquals(\"between bucket 2nd count\", 3L, buckets.get(1).get(\"count\"));\n        }\n        \n        { // after...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)after.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"after num buckets\", 2, buckets.size());\n          // the counts should both be 1, and the term order should break the tie...\n          assertEquals(\"after bucket top\", \"x1\", buckets.get(0).get(\"val\"));\n          assertEquals(\"after bucket top count\", 1L, buckets.get(0).get(\"count\"));\n          assertEquals(\"after bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEquals(\"after bucket 2nd count\", 1L, buckets.get(1).get(\"count\"));\n        }\n        \n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJsonRangeFacetWithSubFacet() throws Exception {\n\n    // range facet, with terms facet nested under using limit=2 w/overrequest disabled\n    // filter out the first 5 docs (by id) which should ensure that regardless of sharding:\n    //  - x2 being the top term for the 1st range bucket\n    //  - x0 being the top term for the 2nd range bucket\n    //  - the 2nd term in each bucket may vary based on shard/doc placement, but the count will always be '1'\n    // ...and in many cases (based on the shard/doc placement) this will require refinement to backfill the top terms\n    final String filter = \"id_i1:[\"+VALUES.size()+\" TO *]\";\n\n    // the *facet* results should be the same regardless of wether we filter via fq, or using a domain filter on the top facet\n    for (boolean use_domain : Arrays.asList(true, false)) {\n      final String domain = use_domain ? \"domain: { filter:'\" + filter + \"'},\" : \"\";\n\n      // both of these options should produce same results since hardened:false is default\n      final String end = random().nextBoolean() ? \"end:'20,EUR'\" : \"end:'15,EUR'\";\n        \n      \n      final SolrQuery solrQuery = new SolrQuery(\"q\", (use_domain ? \"*:*\" : filter),\n                                                \"rows\", \"0\", \"json.facet\",\n                                                \"{ bar:{ type:range, field:\"+FIELD+\", \" + domain + \n                                                \"        start:'0,EUR', gap:'10,EUR', \"+end+\", other:all \" +\n                                                \"        facet: { foo:{ type:terms, field:x_s, \" +\n                                                \"                       refine:true, limit:2, overrequest:0\" +\n                                                \" } } } }\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        // this top level result count sanity check that should vary based on how we are filtering our facets...\n        assertEquals(use_domain ? 15 : 10, rsp.getResults().getNumFound());\n\n        final NamedList<Object> bar = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"bar\");\n        final List<NamedList<Object>> bar_buckets = (List<NamedList<Object>>) bar.get(\"buckets\");\n        final NamedList<Object> before = (NamedList<Object>) bar.get(\"before\");\n        final NamedList<Object> between = (NamedList<Object>) bar.get(\"between\");\n        final NamedList<Object> after = (NamedList<Object>) bar.get(\"after\");\n        \n        // sanity check our high level expectations...\n        assertEquals(\"bar num buckets\", 2, bar_buckets.size());\n        assertEqualsHACK(\"before count\", 0L, before.get(\"count\"));\n        assertEqualsHACK(\"between count\", 8L, between.get(\"count\"));\n        assertEqualsHACK(\"after count\", 2L, after.get(\"count\"));\n        \n        // drill into the various buckets...\n        \n        // before should have no subfacets since it's empty...\n        assertNull(\"before has foo???\", before.get(\"foo\"));\n        \n        // our 2 range buckets & their sub facets...\n        for (int i = 0; i < 2; i++) {\n          final NamedList<Object> bucket = bar_buckets.get(i);\n          assertEquals((i * 10) + \".00,EUR\", bucket.get(\"val\"));\n          assertEqualsHACK(\"bucket #\" + i, 4L, bucket.get(\"count\"));\n          final List<NamedList<Object>> foo_buckets = ((NamedList<List<NamedList<Object>>>)bucket.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"bucket #\" + i + \" foo num buckets\", 2, foo_buckets.size());\n          assertEquals(\"bucket #\" + i + \" foo top term\", (0==i ? \"x2\" : \"x0\"), foo_buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"bucket #\" + i + \" foo top count\", 2, foo_buckets.get(0).get(\"count\"));\n          // NOTE: we can't make any assertions about the 2nd val..\n          // our limit + randomized sharding could result in either remaining term being picked.\n          // but for eiter term, the count should be exactly the same...\n          assertEqualsHACK(\"bucket #\" + i + \" foo 2nd count\", 1, foo_buckets.get(1).get(\"count\"));\n        }\n        \n        { // between...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)between.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"between num buckets\", 2, buckets.size());\n          // the counts should both be 3, and the term order should break the tie...\n          assertEquals(\"between bucket top\", \"x0\", buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"between bucket top count\", 3L, buckets.get(0).get(\"count\"));\n          assertEquals(\"between bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEqualsHACK(\"between bucket 2nd count\", 3L, buckets.get(1).get(\"count\"));\n        }\n        \n        { // after...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)after.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"after num buckets\", 2, buckets.size());\n          // the counts should both be 1, and the term order should break the tie...\n          assertEquals(\"after bucket top\", \"x1\", buckets.get(0).get(\"val\"));\n          assertEqualsHACK(\"after bucket top count\", 1L, buckets.get(0).get(\"count\"));\n          assertEquals(\"after bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEqualsHACK(\"after bucket 2nd count\", 1L, buckets.get(1).get(\"count\"));\n        }\n        \n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","bugFix":["6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonRangeFacetWithSubFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonRangeFacetWithSubFacet().mjava","sourceNew":"  @Test\n  public void testJsonRangeFacetWithSubFacet() throws Exception {\n\n    // range facet, with terms facet nested under using limit=2 w/overrequest disabled\n    // filter out the first 5 docs (by id) which should ensure that regardless of sharding:\n    //  - x2 being the top term for the 1st range bucket\n    //  - x0 being the top term for the 2nd range bucket\n    //  - the 2nd term in each bucket may vary based on shard/doc placement, but the count will always be '1'\n    // ...and in many cases (based on the shard/doc placement) this will require refinement to backfill the top terms\n    final String filter = \"id_i1:[\"+VALUES.size()+\" TO *]\";\n\n    // the *facet* results should be the same regardless of wether we filter via fq, or using a domain filter on the top facet\n    for (boolean use_domain : Arrays.asList(true, false)) {\n      final String domain = use_domain ? \"domain: { filter:'\" + filter + \"'},\" : \"\";\n\n      // both of these options should produce same results since hardened:false is default\n      final String end = random().nextBoolean() ? \"end:'20,EUR'\" : \"end:'15,EUR'\";\n        \n      \n      final SolrQuery solrQuery = new SolrQuery(\"q\", (use_domain ? \"*:*\" : filter),\n                                                \"rows\", \"0\", \"json.facet\",\n                                                \"{ bar:{ type:range, field:\"+FIELD+\", \" + domain + \n                                                \"        start:'0,EUR', gap:'10,EUR', \"+end+\", other:all \" +\n                                                \"        facet: { foo:{ type:terms, field:x_s, \" +\n                                                \"                       refine:true, limit:2, overrequest:0\" +\n                                                \" } } } }\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        // this top level result count sanity check that should vary based on how we are filtering our facets...\n        assertEquals(use_domain ? 15 : 10, rsp.getResults().getNumFound());\n\n        @SuppressWarnings({\"unchecked\"})\n        final NamedList<Object> bar = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"bar\");\n        @SuppressWarnings({\"unchecked\"})\n        final List<NamedList<Object>> bar_buckets = (List<NamedList<Object>>) bar.get(\"buckets\");\n        @SuppressWarnings({\"unchecked\"})\n        final NamedList<Object> before = (NamedList<Object>) bar.get(\"before\");\n        @SuppressWarnings({\"unchecked\"})\n        final NamedList<Object> between = (NamedList<Object>) bar.get(\"between\");\n        @SuppressWarnings({\"unchecked\"})\n        final NamedList<Object> after = (NamedList<Object>) bar.get(\"after\");\n        \n        // sanity check our high level expectations...\n        assertEquals(\"bar num buckets\", 2, bar_buckets.size());\n        assertEquals(\"before count\", 0L, before.get(\"count\"));\n        assertEquals(\"between count\", 8L, between.get(\"count\"));\n        assertEquals(\"after count\", 2L, after.get(\"count\"));\n        \n        // drill into the various buckets...\n        \n        // before should have no subfacets since it's empty...\n        assertNull(\"before has foo???\", before.get(\"foo\"));\n        \n        // our 2 range buckets & their sub facets...\n        for (int i = 0; i < 2; i++) {\n          final NamedList<Object> bucket = bar_buckets.get(i);\n          assertEquals((i * 10) + \".00,EUR\", bucket.get(\"val\"));\n          assertEquals(\"bucket #\" + i, 4L, bucket.get(\"count\"));\n          @SuppressWarnings({\"unchecked\"})\n          final List<NamedList<Object>> foo_buckets = ((NamedList<List<NamedList<Object>>>)bucket.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"bucket #\" + i + \" foo num buckets\", 2, foo_buckets.size());\n          assertEquals(\"bucket #\" + i + \" foo top term\", (0==i ? \"x2\" : \"x0\"), foo_buckets.get(0).get(\"val\"));\n          assertEquals(\"bucket #\" + i + \" foo top count\", 2L, foo_buckets.get(0).get(\"count\"));\n          // NOTE: we can't make any assertions about the 2nd val..\n          // our limit + randomized sharding could result in either remaining term being picked.\n          // but for either term, the count should be exactly the same...\n          assertEquals(\"bucket #\" + i + \" foo 2nd count\", 1L, foo_buckets.get(1).get(\"count\"));\n        }\n        \n        { // between...\n          @SuppressWarnings({\"unchecked\"})\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)between.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"between num buckets\", 2, buckets.size());\n          // the counts should both be 3, and the term order should break the tie...\n          assertEquals(\"between bucket top\", \"x0\", buckets.get(0).get(\"val\"));\n          assertEquals(\"between bucket top count\", 3L, buckets.get(0).get(\"count\"));\n          assertEquals(\"between bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEquals(\"between bucket 2nd count\", 3L, buckets.get(1).get(\"count\"));\n        }\n        \n        { // after...\n          @SuppressWarnings({\"unchecked\"})\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)after.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"after num buckets\", 2, buckets.size());\n          // the counts should both be 1, and the term order should break the tie...\n          assertEquals(\"after bucket top\", \"x1\", buckets.get(0).get(\"val\"));\n          assertEquals(\"after bucket top count\", 1L, buckets.get(0).get(\"count\"));\n          assertEquals(\"after bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEquals(\"after bucket 2nd count\", 1L, buckets.get(1).get(\"count\"));\n        }\n        \n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJsonRangeFacetWithSubFacet() throws Exception {\n\n    // range facet, with terms facet nested under using limit=2 w/overrequest disabled\n    // filter out the first 5 docs (by id) which should ensure that regardless of sharding:\n    //  - x2 being the top term for the 1st range bucket\n    //  - x0 being the top term for the 2nd range bucket\n    //  - the 2nd term in each bucket may vary based on shard/doc placement, but the count will always be '1'\n    // ...and in many cases (based on the shard/doc placement) this will require refinement to backfill the top terms\n    final String filter = \"id_i1:[\"+VALUES.size()+\" TO *]\";\n\n    // the *facet* results should be the same regardless of wether we filter via fq, or using a domain filter on the top facet\n    for (boolean use_domain : Arrays.asList(true, false)) {\n      final String domain = use_domain ? \"domain: { filter:'\" + filter + \"'},\" : \"\";\n\n      // both of these options should produce same results since hardened:false is default\n      final String end = random().nextBoolean() ? \"end:'20,EUR'\" : \"end:'15,EUR'\";\n        \n      \n      final SolrQuery solrQuery = new SolrQuery(\"q\", (use_domain ? \"*:*\" : filter),\n                                                \"rows\", \"0\", \"json.facet\",\n                                                \"{ bar:{ type:range, field:\"+FIELD+\", \" + domain + \n                                                \"        start:'0,EUR', gap:'10,EUR', \"+end+\", other:all \" +\n                                                \"        facet: { foo:{ type:terms, field:x_s, \" +\n                                                \"                       refine:true, limit:2, overrequest:0\" +\n                                                \" } } } }\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        // this top level result count sanity check that should vary based on how we are filtering our facets...\n        assertEquals(use_domain ? 15 : 10, rsp.getResults().getNumFound());\n\n        final NamedList<Object> bar = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"bar\");\n        final List<NamedList<Object>> bar_buckets = (List<NamedList<Object>>) bar.get(\"buckets\");\n        final NamedList<Object> before = (NamedList<Object>) bar.get(\"before\");\n        final NamedList<Object> between = (NamedList<Object>) bar.get(\"between\");\n        final NamedList<Object> after = (NamedList<Object>) bar.get(\"after\");\n        \n        // sanity check our high level expectations...\n        assertEquals(\"bar num buckets\", 2, bar_buckets.size());\n        assertEquals(\"before count\", 0L, before.get(\"count\"));\n        assertEquals(\"between count\", 8L, between.get(\"count\"));\n        assertEquals(\"after count\", 2L, after.get(\"count\"));\n        \n        // drill into the various buckets...\n        \n        // before should have no subfacets since it's empty...\n        assertNull(\"before has foo???\", before.get(\"foo\"));\n        \n        // our 2 range buckets & their sub facets...\n        for (int i = 0; i < 2; i++) {\n          final NamedList<Object> bucket = bar_buckets.get(i);\n          assertEquals((i * 10) + \".00,EUR\", bucket.get(\"val\"));\n          assertEquals(\"bucket #\" + i, 4L, bucket.get(\"count\"));\n          final List<NamedList<Object>> foo_buckets = ((NamedList<List<NamedList<Object>>>)bucket.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"bucket #\" + i + \" foo num buckets\", 2, foo_buckets.size());\n          assertEquals(\"bucket #\" + i + \" foo top term\", (0==i ? \"x2\" : \"x0\"), foo_buckets.get(0).get(\"val\"));\n          assertEquals(\"bucket #\" + i + \" foo top count\", 2L, foo_buckets.get(0).get(\"count\"));\n          // NOTE: we can't make any assertions about the 2nd val..\n          // our limit + randomized sharding could result in either remaining term being picked.\n          // but for either term, the count should be exactly the same...\n          assertEquals(\"bucket #\" + i + \" foo 2nd count\", 1L, foo_buckets.get(1).get(\"count\"));\n        }\n        \n        { // between...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)between.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"between num buckets\", 2, buckets.size());\n          // the counts should both be 3, and the term order should break the tie...\n          assertEquals(\"between bucket top\", \"x0\", buckets.get(0).get(\"val\"));\n          assertEquals(\"between bucket top count\", 3L, buckets.get(0).get(\"count\"));\n          assertEquals(\"between bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEquals(\"between bucket 2nd count\", 3L, buckets.get(1).get(\"count\"));\n        }\n        \n        { // after...\n          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)after.get(\"foo\")).get(\"buckets\");\n          assertEquals(\"after num buckets\", 2, buckets.size());\n          // the counts should both be 1, and the term order should break the tie...\n          assertEquals(\"after bucket top\", \"x1\", buckets.get(0).get(\"val\"));\n          assertEquals(\"after bucket top count\", 1L, buckets.get(0).get(\"count\"));\n          assertEquals(\"after bucket 2nd\", \"x2\", buckets.get(1).get(\"val\"));\n          assertEquals(\"after bucket 2nd count\", 1L, buckets.get(1).get(\"count\"));\n        }\n        \n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c841e27891873cab110ebeb89f124a8ec470176":["c05b634713ca09b2267477408773904d4c69dd9d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","c05b634713ca09b2267477408773904d4c69dd9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c05b634713ca09b2267477408773904d4c69dd9d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["1c841e27891873cab110ebeb89f124a8ec470176"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b94236357aaa22b76c10629851fe4e376e0cea82","c05b634713ca09b2267477408773904d4c69dd9d"]},"commit2Childs":{"1c841e27891873cab110ebeb89f124a8ec470176":["e98520789adb1d5ad05afb4956eca0944a929688"],"b94236357aaa22b76c10629851fe4e376e0cea82":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c05b634713ca09b2267477408773904d4c69dd9d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c05b634713ca09b2267477408773904d4c69dd9d":["1c841e27891873cab110ebeb89f124a8ec470176","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}