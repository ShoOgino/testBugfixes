{"path":"lucene/src/test-framework/java/org/apache/lucene/util/LineFileDocs#open(Random).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LineFileDocs#open(Random).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#open(Random).mjava","sourceNew":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    reader = new BufferedReader(new InputStreamReader(is, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","sourceOld":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    reader = new BufferedReader(new InputStreamReader(is, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LineFileDocs#open(Random).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LineFileDocs#open(Random).mjava","sourceNew":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    reader = new BufferedReader(new InputStreamReader(is, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","sourceOld":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    reader = new BufferedReader(new InputStreamReader(is, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}