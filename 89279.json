{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest#test().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest#test().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TypeAsPayloadTokenFilter nptf = new TypeAsPayloadTokenFilter(new WordTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test))));\n    int count = 0;\n    TermAttribute termAtt = nptf.getAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = nptf.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    \n    while (nptf.incrementToken()) {\n      assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(String.valueOf(Character.toUpperCase(termAtt.termBuffer()[0]))));\n      assertTrue(\"nextToken.getPayload() is null and it shouldn't be\", payloadAtt.getPayload() != null);\n      String type = new String(payloadAtt.getPayload().getData(), \"UTF-8\");\n      assertTrue(type + \" is not equal to \" + typeAtt.type(), type.equals(typeAtt.type()) == true);\n      count++;\n    }\n\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TypeAsPayloadTokenFilter nptf = new TypeAsPayloadTokenFilter(new WordTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test))));\n    int count = 0;\n    TermAttribute termAtt = nptf.getAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = nptf.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    \n    while (nptf.incrementToken()) {\n      assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(String.valueOf(Character.toUpperCase(termAtt.termBuffer()[0]))));\n      assertTrue(\"nextToken.getPayload() is null and it shouldn't be\", payloadAtt.getPayload() != null);\n      String type = new String(payloadAtt.getPayload().getData(), \"UTF-8\");\n      assertTrue(type + \" is not equal to \" + typeAtt.type(), type.equals(typeAtt.type()) == true);\n      count++;\n    }\n\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest#test().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TypeAsPayloadTokenFilter nptf = new TypeAsPayloadTokenFilter(new WordTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test))));\n    int count = 0;\n    TermAttribute termAtt = nptf.getAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = nptf.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    \n    while (nptf.incrementToken()) {\n      assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(String.valueOf(Character.toUpperCase(termAtt.termBuffer()[0]))));\n      assertTrue(\"nextToken.getPayload() is null and it shouldn't be\", payloadAtt.getPayload() != null);\n      String type = new String(payloadAtt.getPayload().getData(), \"UTF-8\");\n      assertTrue(type + \" is not equal to \" + typeAtt.type(), type.equals(typeAtt.type()) == true);\n      count++;\n    }\n\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TypeAsPayloadTokenFilter nptf = new TypeAsPayloadTokenFilter(new WordTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test))));\n    int count = 0;\n    TermAttribute termAtt = nptf.getAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = nptf.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    \n    while (nptf.incrementToken()) {\n      assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(String.valueOf(Character.toUpperCase(termAtt.termBuffer()[0]))));\n      assertTrue(\"nextToken.getPayload() is null and it shouldn't be\", payloadAtt.getPayload() != null);\n      String type = new String(payloadAtt.getPayload().getData(), \"UTF-8\");\n      assertTrue(type + \" is not equal to \" + typeAtt.type(), type.equals(typeAtt.type()) == true);\n      count++;\n    }\n\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}