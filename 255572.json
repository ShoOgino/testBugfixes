{"path":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished(boolean).mjava","commits":[{"id":"af4f318fc7955d8e4e40cdf4a8a93931004fe7c0","date":1592426892,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished().mjava","sourceNew":"        @Override\n        public void mergeFinished(boolean success) throws IOException {\n          Throwable th = null;\n          for (ParallelLeafReader r : parallelReaders) {\n            try {\n              r.decRef();\n            } catch (Throwable t) {\n              if (th == null) {\n                th = t;\n              }\n            }\n          }\n\n          if (th != null) {\n            throw IOUtils.rethrowAlways(th);\n          }\n        }\n\n","sourceOld":"        @Override\n        public void mergeFinished() throws IOException {\n          Throwable th = null;\n          for (ParallelLeafReader r : parallelReaders) {\n            try {\n              r.decRef();\n            } catch (Throwable t) {\n              if (th == null) {\n                th = t;\n              }\n            }\n          }\n\n          if (th != null) {\n            throw IOUtils.rethrowAlways(th);\n          }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2a23476693f2bd9a4b44cc3187c429a2e21dac2","date":1593289545,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished(boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished(boolean).mjava","sourceNew":"        @Override\n        public void mergeFinished(boolean success, boolean segmentDropped) throws IOException {\n          super.mergeFinished(success, segmentDropped);\n          Throwable th = null;\n          for (ParallelLeafReader r : parallelReaders) {\n            try {\n              r.decRef();\n            } catch (Throwable t) {\n              if (th == null) {\n                th = t;\n              }\n            }\n          }\n\n          if (th != null) {\n            throw IOUtils.rethrowAlways(th);\n          }\n        }\n\n","sourceOld":"        @Override\n        public void mergeFinished(boolean success) throws IOException {\n          Throwable th = null;\n          for (ParallelLeafReader r : parallelReaders) {\n            try {\n              r.decRef();\n            } catch (Throwable t) {\n              if (th == null) {\n                th = t;\n              }\n            }\n          }\n\n          if (th != null) {\n            throw IOUtils.rethrowAlways(th);\n          }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af4f318fc7955d8e4e40cdf4a8a93931004fe7c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["af4f318fc7955d8e4e40cdf4a8a93931004fe7c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"]},"commit2Childs":{"af4f318fc7955d8e4e40cdf4a8a93931004fe7c0":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"],"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af4f318fc7955d8e4e40cdf4a8a93931004fe7c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}