{"path":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedReader#MonotonicBlockPackedReader(IndexInput,int,int,long,boolean).mjava","commits":[{"id":"e76d3450662dab47d54e3f462c7b3eba4e38b9ac","date":1358866496,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedReader#MonotonicBlockPackedReader(IndexInput,int,int,long,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Sole constructor. */\n  public MonotonicBlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    checkBlockSize(blockSize);\n    this.valueCount = valueCount;\n    blockShift = Integer.numberOfTrailingZeros(blockSize);\n    blockMask = blockSize - 1;\n    final int numBlocks = (int) (valueCount / blockSize) + (valueCount % blockSize == 0 ? 0 : 1);\n    if (numBlocks * blockSize < valueCount) {\n      throw new IllegalArgumentException(\"valueCount is too large for this block size\");\n    }\n    minValues = new long[numBlocks];\n    averages = new float[numBlocks];\n    subReaders = new PackedInts.Reader[numBlocks];\n    for (int i = 0; i < numBlocks; ++i) {\n      minValues[i] = in.readVLong();\n      averages[i] = Float.intBitsToFloat(in.readInt());\n      final int bitsPerValue = in.readVInt();\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38ed11981e9035384eaae7fb49013b8156d7a977","date":1359112895,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedReader#MonotonicBlockPackedReader(IndexInput,int,int,long,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedReader#MonotonicBlockPackedReader(IndexInput,int,int,long,boolean).mjava","sourceNew":"  /** Sole constructor. */\n  public MonotonicBlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    checkBlockSize(blockSize);\n    this.valueCount = valueCount;\n    blockShift = Integer.numberOfTrailingZeros(blockSize);\n    blockMask = blockSize - 1;\n    final int numBlocks = (int) (valueCount / blockSize) + (valueCount % blockSize == 0 ? 0 : 1);\n    if ((long) numBlocks * blockSize < valueCount) {\n      throw new IllegalArgumentException(\"valueCount is too large for this block size\");\n    }\n    minValues = new long[numBlocks];\n    averages = new float[numBlocks];\n    subReaders = new PackedInts.Reader[numBlocks];\n    for (int i = 0; i < numBlocks; ++i) {\n      minValues[i] = in.readVLong();\n      averages[i] = Float.intBitsToFloat(in.readInt());\n      final int bitsPerValue = in.readVInt();\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public MonotonicBlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    checkBlockSize(blockSize);\n    this.valueCount = valueCount;\n    blockShift = Integer.numberOfTrailingZeros(blockSize);\n    blockMask = blockSize - 1;\n    final int numBlocks = (int) (valueCount / blockSize) + (valueCount % blockSize == 0 ? 0 : 1);\n    if (numBlocks * blockSize < valueCount) {\n      throw new IllegalArgumentException(\"valueCount is too large for this block size\");\n    }\n    minValues = new long[numBlocks];\n    averages = new float[numBlocks];\n    subReaders = new PackedInts.Reader[numBlocks];\n    for (int i = 0; i < numBlocks; ++i) {\n      minValues[i] = in.readVLong();\n      averages[i] = Float.intBitsToFloat(in.readInt());\n      final int bitsPerValue = in.readVInt();\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedReader#MonotonicBlockPackedReader(IndexInput,int,int,long,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Sole constructor. */\n  public MonotonicBlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    checkBlockSize(blockSize);\n    this.valueCount = valueCount;\n    blockShift = Integer.numberOfTrailingZeros(blockSize);\n    blockMask = blockSize - 1;\n    final int numBlocks = (int) (valueCount / blockSize) + (valueCount % blockSize == 0 ? 0 : 1);\n    if ((long) numBlocks * blockSize < valueCount) {\n      throw new IllegalArgumentException(\"valueCount is too large for this block size\");\n    }\n    minValues = new long[numBlocks];\n    averages = new float[numBlocks];\n    subReaders = new PackedInts.Reader[numBlocks];\n    for (int i = 0; i < numBlocks; ++i) {\n      minValues[i] = in.readVLong();\n      averages[i] = Float.intBitsToFloat(in.readInt());\n      final int bitsPerValue = in.readVInt();\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f375a9203c9124207e176f4dc59bd8e832b239a0","date":1370270173,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedReader#MonotonicBlockPackedReader(IndexInput,int,int,long,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedReader#MonotonicBlockPackedReader(IndexInput,int,int,long,boolean).mjava","sourceNew":"  /** Sole constructor. */\n  public MonotonicBlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    this.valueCount = valueCount;\n    blockShift = checkBlockSize(blockSize, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n    blockMask = blockSize - 1;\n    final int numBlocks = numBlocks(valueCount, blockSize);\n    minValues = new long[numBlocks];\n    averages = new float[numBlocks];\n    subReaders = new PackedInts.Reader[numBlocks];\n    for (int i = 0; i < numBlocks; ++i) {\n      minValues[i] = in.readVLong();\n      averages[i] = Float.intBitsToFloat(in.readInt());\n      final int bitsPerValue = in.readVInt();\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public MonotonicBlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    checkBlockSize(blockSize);\n    this.valueCount = valueCount;\n    blockShift = Integer.numberOfTrailingZeros(blockSize);\n    blockMask = blockSize - 1;\n    final int numBlocks = (int) (valueCount / blockSize) + (valueCount % blockSize == 0 ? 0 : 1);\n    if ((long) numBlocks * blockSize < valueCount) {\n      throw new IllegalArgumentException(\"valueCount is too large for this block size\");\n    }\n    minValues = new long[numBlocks];\n    averages = new float[numBlocks];\n    subReaders = new PackedInts.Reader[numBlocks];\n    for (int i = 0; i < numBlocks; ++i) {\n      minValues[i] = in.readVLong();\n      averages[i] = Float.intBitsToFloat(in.readInt());\n      final int bitsPerValue = in.readVInt();\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db1893644d5f20456c9524b28e826293d767db65","date":1401985804,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedReader#MonotonicBlockPackedReader(IndexInput,int,int,long,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedReader#MonotonicBlockPackedReader(IndexInput,int,int,long,boolean).mjava","sourceNew":"  private MonotonicBlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    this.valueCount = valueCount;\n    blockShift = checkBlockSize(blockSize, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n    blockMask = blockSize - 1;\n    final int numBlocks = numBlocks(valueCount, blockSize);\n    minValues = new long[numBlocks];\n    averages = new float[numBlocks];\n    subReaders = new PackedInts.Reader[numBlocks];\n    for (int i = 0; i < numBlocks; ++i) {\n      if (packedIntsVersion < PackedInts.VERSION_MONOTONIC_WITHOUT_ZIGZAG) {\n        minValues[i] = in.readVLong();\n      } else {\n        minValues[i] = zigZagDecode(in.readVLong());\n      }\n      averages[i] = Float.intBitsToFloat(in.readInt());\n      final int bitsPerValue = in.readVInt();\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public MonotonicBlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    this.valueCount = valueCount;\n    blockShift = checkBlockSize(blockSize, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n    blockMask = blockSize - 1;\n    final int numBlocks = numBlocks(valueCount, blockSize);\n    minValues = new long[numBlocks];\n    averages = new float[numBlocks];\n    subReaders = new PackedInts.Reader[numBlocks];\n    for (int i = 0; i < numBlocks; ++i) {\n      minValues[i] = in.readVLong();\n      averages[i] = Float.intBitsToFloat(in.readInt());\n      final int bitsPerValue = in.readVInt();\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee0a782aba5788b03bbf2ba679d4f4b0ebc88493","date":1406810962,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedReader#MonotonicBlockPackedReader(IndexInput,int,int,long,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedReader#MonotonicBlockPackedReader(IndexInput,int,int,long,boolean).mjava","sourceNew":"  private MonotonicBlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    this.valueCount = valueCount;\n    blockShift = checkBlockSize(blockSize, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n    blockMask = blockSize - 1;\n    final int numBlocks = numBlocks(valueCount, blockSize);\n    minValues = new long[numBlocks];\n    averages = new float[numBlocks];\n    subReaders = new PackedInts.Reader[numBlocks];\n    for (int i = 0; i < numBlocks; ++i) {\n      if (packedIntsVersion < PackedInts.VERSION_MONOTONIC_WITHOUT_ZIGZAG) {\n        minValues[i] = in.readVLong();\n      } else {\n        minValues[i] = in.readZLong();\n      }\n      averages[i] = Float.intBitsToFloat(in.readInt());\n      final int bitsPerValue = in.readVInt();\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private MonotonicBlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    this.valueCount = valueCount;\n    blockShift = checkBlockSize(blockSize, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n    blockMask = blockSize - 1;\n    final int numBlocks = numBlocks(valueCount, blockSize);\n    minValues = new long[numBlocks];\n    averages = new float[numBlocks];\n    subReaders = new PackedInts.Reader[numBlocks];\n    for (int i = 0; i < numBlocks; ++i) {\n      if (packedIntsVersion < PackedInts.VERSION_MONOTONIC_WITHOUT_ZIGZAG) {\n        minValues[i] = in.readVLong();\n      } else {\n        minValues[i] = zigZagDecode(in.readVLong());\n      }\n      averages[i] = Float.intBitsToFloat(in.readInt());\n      final int bitsPerValue = in.readVInt();\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedReader#MonotonicBlockPackedReader(IndexInput,int,int,long,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedReader#MonotonicBlockPackedReader(IndexInput,int,int,long,boolean).mjava","sourceNew":"  private MonotonicBlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    this.valueCount = valueCount;\n    blockShift = checkBlockSize(blockSize, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n    blockMask = blockSize - 1;\n    final int numBlocks = numBlocks(valueCount, blockSize);\n    minValues = new long[numBlocks];\n    averages = new float[numBlocks];\n    subReaders = new PackedInts.Reader[numBlocks];\n    long sumBPV = 0;\n    for (int i = 0; i < numBlocks; ++i) {\n      if (packedIntsVersion < PackedInts.VERSION_MONOTONIC_WITHOUT_ZIGZAG) {\n        minValues[i] = in.readVLong();\n      } else {\n        minValues[i] = in.readZLong();\n      }\n      averages[i] = Float.intBitsToFloat(in.readInt());\n      final int bitsPerValue = in.readVInt();\n      sumBPV += bitsPerValue;\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n    this.sumBPV = sumBPV;\n  }\n\n","sourceOld":"  private MonotonicBlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    this.valueCount = valueCount;\n    blockShift = checkBlockSize(blockSize, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n    blockMask = blockSize - 1;\n    final int numBlocks = numBlocks(valueCount, blockSize);\n    minValues = new long[numBlocks];\n    averages = new float[numBlocks];\n    subReaders = new PackedInts.Reader[numBlocks];\n    for (int i = 0; i < numBlocks; ++i) {\n      if (packedIntsVersion < PackedInts.VERSION_MONOTONIC_WITHOUT_ZIGZAG) {\n        minValues[i] = in.readVLong();\n      } else {\n        minValues[i] = in.readZLong();\n      }\n      averages[i] = Float.intBitsToFloat(in.readInt());\n      final int bitsPerValue = in.readVInt();\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0b5f2776cabd1c1bbd3fe122be0f1d547189717","date":1418824930,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedReader#MonotonicBlockPackedReader(IndexInput,int,int,long,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedReader#MonotonicBlockPackedReader(IndexInput,int,int,long,boolean).mjava","sourceNew":"  private MonotonicBlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    this.valueCount = valueCount;\n    blockShift = checkBlockSize(blockSize, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n    blockMask = blockSize - 1;\n    final int numBlocks = numBlocks(valueCount, blockSize);\n    minValues = new long[numBlocks];\n    averages = new float[numBlocks];\n    subReaders = new PackedInts.Reader[numBlocks];\n    long sumBPV = 0;\n    for (int i = 0; i < numBlocks; ++i) {\n      minValues[i] = in.readZLong();\n      averages[i] = Float.intBitsToFloat(in.readInt());\n      final int bitsPerValue = in.readVInt();\n      sumBPV += bitsPerValue;\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n    this.sumBPV = sumBPV;\n  }\n\n","sourceOld":"  private MonotonicBlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    this.valueCount = valueCount;\n    blockShift = checkBlockSize(blockSize, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n    blockMask = blockSize - 1;\n    final int numBlocks = numBlocks(valueCount, blockSize);\n    minValues = new long[numBlocks];\n    averages = new float[numBlocks];\n    subReaders = new PackedInts.Reader[numBlocks];\n    long sumBPV = 0;\n    for (int i = 0; i < numBlocks; ++i) {\n      if (packedIntsVersion < PackedInts.VERSION_MONOTONIC_WITHOUT_ZIGZAG) {\n        minValues[i] = in.readVLong();\n      } else {\n        minValues[i] = in.readZLong();\n      }\n      averages[i] = Float.intBitsToFloat(in.readInt());\n      final int bitsPerValue = in.readVInt();\n      sumBPV += bitsPerValue;\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n    this.sumBPV = sumBPV;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db1893644d5f20456c9524b28e826293d767db65":["f375a9203c9124207e176f4dc59bd8e832b239a0"],"38ed11981e9035384eaae7fb49013b8156d7a977":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","38ed11981e9035384eaae7fb49013b8156d7a977"],"ee0a782aba5788b03bbf2ba679d4f4b0ebc88493":["db1893644d5f20456c9524b28e826293d767db65"],"c0b5f2776cabd1c1bbd3fe122be0f1d547189717":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f375a9203c9124207e176f4dc59bd8e832b239a0":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["ee0a782aba5788b03bbf2ba679d4f4b0ebc88493"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0b5f2776cabd1c1bbd3fe122be0f1d547189717"]},"commit2Childs":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["38ed11981e9035384eaae7fb49013b8156d7a977"],"db1893644d5f20456c9524b28e826293d767db65":["ee0a782aba5788b03bbf2ba679d4f4b0ebc88493"],"38ed11981e9035384eaae7fb49013b8156d7a977":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["f375a9203c9124207e176f4dc59bd8e832b239a0"],"ee0a782aba5788b03bbf2ba679d4f4b0ebc88493":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"c0b5f2776cabd1c1bbd3fe122be0f1d547189717":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac","d4d69c535930b5cce125cff868d40f6373dc27d4"],"f375a9203c9124207e176f4dc59bd8e832b239a0":["db1893644d5f20456c9524b28e826293d767db65"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["c0b5f2776cabd1c1bbd3fe122be0f1d547189717"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}