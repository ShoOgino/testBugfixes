{"path":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexingWithFacets().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexingWithFacets().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexingWithFacets().mjava","sourceNew":"  /**\n   * Test indexing with facets tasks.\n   */\n  public void testIndexingWithFacets() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=100\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"CreateTaxonomyIndex\",\n        \"{ \\\"AddDocs\\\"  AddFacetedDoc > : * \",\n        \"CloseIndex\",\n        \"CloseTaxonomyIndex\",\n        \"OpenTaxonomyReader\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    PerfRunData runData = benchmark.getRunData();\n    assertNull(\"taxo writer was not properly closed\",runData.getTaxonomyWriter());\n    TaxonomyReader taxoReader = runData.getTaxonomyReader();\n    assertNotNull(\"taxo reader was not opened\", taxoReader);\n    assertTrue(\"nothing was added to the taxnomy (expecting root and at least one addtional category)\",taxoReader.getSize()>1);\n    taxoReader.close();\n  }\n\n","sourceOld":"  /**\n   * Test indexing with facets tasks.\n   */\n  public void testIndexingWithFacets() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=100\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"CreateTaxonomyIndex\",\n        \"{ \\\"AddDocs\\\"  AddFacetedDoc > : * \",\n        \"CloseIndex\",\n        \"CloseTaxonomyIndex\",\n        \"OpenTaxonomyReader\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    PerfRunData runData = benchmark.getRunData();\n    assertNull(\"taxo writer was not properly closed\",runData.getTaxonomyWriter());\n    TaxonomyReader taxoReader = runData.getTaxonomyReader();\n    assertNotNull(\"taxo reader was not opened\", taxoReader);\n    assertTrue(\"nothing was added to the taxnomy (expecting root and at least one addtional category)\",taxoReader.getSize()>1);\n    taxoReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexingWithFacets().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexingWithFacets().mjava","sourceNew":"  /**\n   * Test indexing with facets tasks.\n   */\n  public void testIndexingWithFacets() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=100\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"CreateTaxonomyIndex\",\n        \"{ \\\"AddDocs\\\"  AddFacetedDoc > : * \",\n        \"CloseIndex\",\n        \"CloseTaxonomyIndex\",\n        \"OpenTaxonomyReader\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    PerfRunData runData = benchmark.getRunData();\n    assertNull(\"taxo writer was not properly closed\",runData.getTaxonomyWriter());\n    TaxonomyReader taxoReader = runData.getTaxonomyReader();\n    assertNotNull(\"taxo reader was not opened\", taxoReader);\n    assertTrue(\"nothing was added to the taxnomy (expecting root and at least one addtional category)\",taxoReader.getSize()>1);\n    taxoReader.close();\n  }\n\n","sourceOld":"  /**\n   * Test indexing with facets tasks.\n   */\n  public void testIndexingWithFacets() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=100\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"CreateTaxonomyIndex\",\n        \"{ \\\"AddDocs\\\"  AddFacetedDoc > : * \",\n        \"CloseIndex\",\n        \"CloseTaxonomyIndex\",\n        \"OpenTaxonomyReader\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    PerfRunData runData = benchmark.getRunData();\n    assertNull(\"taxo writer was not properly closed\",runData.getTaxonomyWriter());\n    TaxonomyReader taxoReader = runData.getTaxonomyReader();\n    assertNotNull(\"taxo reader was not opened\", taxoReader);\n    assertTrue(\"nothing was added to the taxnomy (expecting root and at least one addtional category)\",taxoReader.getSize()>1);\n    taxoReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexingWithFacets().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexingWithFacets().mjava","sourceNew":"  /**\n   * Test indexing with facets tasks.\n   */\n  public void testIndexingWithFacets() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=100\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"CreateTaxonomyIndex\",\n        \"{ \\\"AddDocs\\\"  AddFacetedDoc > : * \",\n        \"CloseIndex\",\n        \"CloseTaxonomyIndex\",\n        \"OpenTaxonomyReader\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    PerfRunData runData = benchmark.getRunData();\n    assertNull(\"taxo writer was not properly closed\",runData.getTaxonomyWriter());\n    TaxonomyReader taxoReader = runData.getTaxonomyReader();\n    assertNotNull(\"taxo reader was not opened\", taxoReader);\n    assertTrue(\"nothing was added to the taxnomy (expecting root and at least one addtional category)\",taxoReader.getSize()>1);\n    taxoReader.close();\n  }\n\n","sourceOld":"  /**\n   * Test indexing with facets tasks.\n   */\n  public void testIndexingWithFacets() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=100\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"CreateTaxonomyIndex\",\n        \"{ \\\"AddDocs\\\"  AddFacetedDoc > : * \",\n        \"CloseIndex\",\n        \"CloseTaxonomyIndex\",\n        \"OpenTaxonomyReader\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    PerfRunData runData = benchmark.getRunData();\n    assertNull(\"taxo writer was not properly closed\",runData.getTaxonomyWriter());\n    TaxonomyReader taxoReader = runData.getTaxonomyReader();\n    assertNotNull(\"taxo reader was not opened\", taxoReader);\n    assertTrue(\"nothing was added to the taxnomy (expecting root and at least one addtional category)\",taxoReader.getSize()>1);\n    taxoReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexingWithFacets().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexingWithFacets().mjava","sourceNew":"  /**\n   * Test indexing with facets tasks.\n   */\n  public void testIndexingWithFacets() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=100\",\n        \"content.source.forever=false\",\n        \"directory=ByteBuffersDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"CreateTaxonomyIndex\",\n        \"{ \\\"AddDocs\\\"  AddFacetedDoc > : * \",\n        \"CloseIndex\",\n        \"CloseTaxonomyIndex\",\n        \"OpenTaxonomyReader\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    PerfRunData runData = benchmark.getRunData();\n    assertNull(\"taxo writer was not properly closed\",runData.getTaxonomyWriter());\n    TaxonomyReader taxoReader = runData.getTaxonomyReader();\n    assertNotNull(\"taxo reader was not opened\", taxoReader);\n    assertTrue(\"nothing was added to the taxnomy (expecting root and at least one addtional category)\",taxoReader.getSize()>1);\n    taxoReader.close();\n  }\n\n","sourceOld":"  /**\n   * Test indexing with facets tasks.\n   */\n  public void testIndexingWithFacets() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=100\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"CreateTaxonomyIndex\",\n        \"{ \\\"AddDocs\\\"  AddFacetedDoc > : * \",\n        \"CloseIndex\",\n        \"CloseTaxonomyIndex\",\n        \"OpenTaxonomyReader\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    PerfRunData runData = benchmark.getRunData();\n    assertNull(\"taxo writer was not properly closed\",runData.getTaxonomyWriter());\n    TaxonomyReader taxoReader = runData.getTaxonomyReader();\n    assertNotNull(\"taxo reader was not opened\", taxoReader);\n    assertTrue(\"nothing was added to the taxnomy (expecting root and at least one addtional category)\",taxoReader.getSize()>1);\n    taxoReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d77dafd89756a5161d244985903e3487ca109182":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["d77dafd89756a5161d244985903e3487ca109182"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}