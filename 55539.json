{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanFirst().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanFirst().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanFirst().mjava","sourceNew":"  public void testSpanFirst() throws IOException {\n\n    SpanQuery match;\n    SpanFirstQuery sfq;\n    match = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    sfq = new SpanFirstQuery(match, 2);\n    Spans spans = MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq);\n    checkSpans(spans, 109, 1, 1, 1);\n    //Test more complicated subclause\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"hundred\"));\n    match = new SpanNearQuery(clauses, 0, true);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq), 100, 2, 1, 1);\n\n    match = new SpanNearQuery(clauses, 0, false);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq), 100, 2, 1, 1);\n    \n  }\n\n","sourceOld":"  public void testSpanFirst() throws IOException {\n\n    SpanQuery match;\n    SpanFirstQuery sfq;\n    match = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    sfq = new SpanFirstQuery(match, 2);\n    Spans spans = MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq);\n    checkSpans(spans, 109, 1, 1, 1);\n    //Test more complicated subclause\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"hundred\"));\n    match = new SpanNearQuery(clauses, 0, true);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq), 100, 2, 1, 1);\n\n    match = new SpanNearQuery(clauses, 0, false);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq), 100, 2, 1, 1);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"211b1506e56f7860762fbd4698f6d1d1b57f672c","date":1344976996,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanFirst().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanFirst().mjava","sourceNew":"  public void testSpanFirst() throws IOException {\n\n    SpanQuery match;\n    SpanFirstQuery sfq;\n    match = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    sfq = new SpanFirstQuery(match, 2);\n    Spans spans = MultiSpansWrapper.wrap(indexReader.getContext(), sfq);\n    checkSpans(spans, 109, 1, 1, 1);\n    //Test more complicated subclause\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"hundred\"));\n    match = new SpanNearQuery(clauses, 0, true);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getContext(), sfq), 100, 2, 1, 1);\n\n    match = new SpanNearQuery(clauses, 0, false);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getContext(), sfq), 100, 2, 1, 1);\n    \n  }\n\n","sourceOld":"  public void testSpanFirst() throws IOException {\n\n    SpanQuery match;\n    SpanFirstQuery sfq;\n    match = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    sfq = new SpanFirstQuery(match, 2);\n    Spans spans = MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq);\n    checkSpans(spans, 109, 1, 1, 1);\n    //Test more complicated subclause\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"hundred\"));\n    match = new SpanNearQuery(clauses, 0, true);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq), 100, 2, 1, 1);\n\n    match = new SpanNearQuery(clauses, 0, false);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq), 100, 2, 1, 1);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanFirst().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanFirst().mjava","sourceNew":"  public void testSpanFirst() throws IOException {\n\n    SpanQuery match;\n    SpanFirstQuery sfq;\n    match = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    sfq = new SpanFirstQuery(match, 2);\n    Spans spans = MultiSpansWrapper.wrap(indexReader.getContext(), sfq);\n    checkSpans(spans, 109, 1, 1, 1);\n    //Test more complicated subclause\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"hundred\"));\n    match = new SpanNearQuery(clauses, 0, true);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getContext(), sfq), 100, 2, 1, 1);\n\n    match = new SpanNearQuery(clauses, 0, false);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getContext(), sfq), 100, 2, 1, 1);\n    \n  }\n\n","sourceOld":"  public void testSpanFirst() throws IOException {\n\n    SpanQuery match;\n    SpanFirstQuery sfq;\n    match = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    sfq = new SpanFirstQuery(match, 2);\n    Spans spans = MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq);\n    checkSpans(spans, 109, 1, 1, 1);\n    //Test more complicated subclause\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"hundred\"));\n    match = new SpanNearQuery(clauses, 0, true);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq), 100, 2, 1, 1);\n\n    match = new SpanNearQuery(clauses, 0, false);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq), 100, 2, 1, 1);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanFirst().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanFirst().mjava","sourceNew":"  public void testSpanFirst() throws IOException {\n\n    SpanQuery match;\n    SpanFirstQuery sfq;\n    match = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    sfq = new SpanFirstQuery(match, 2);\n    Spans spans = MultiSpansWrapper.wrap(indexReader.getContext(), sfq);\n    checkSpans(spans, 109, 1, 1, 1);\n    //Test more complicated subclause\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"hundred\"));\n    match = new SpanNearQuery(clauses, 0, true);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getContext(), sfq), 100, 2, 1, 1);\n\n    match = new SpanNearQuery(clauses, 0, false);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getContext(), sfq), 100, 2, 1, 1);\n    \n  }\n\n","sourceOld":"  public void testSpanFirst() throws IOException {\n\n    SpanQuery match;\n    SpanFirstQuery sfq;\n    match = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    sfq = new SpanFirstQuery(match, 2);\n    Spans spans = MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq);\n    checkSpans(spans, 109, 1, 1, 1);\n    //Test more complicated subclause\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"hundred\"));\n    match = new SpanNearQuery(clauses, 0, true);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq), 100, 2, 1, 1);\n\n    match = new SpanNearQuery(clauses, 0, false);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq), 100, 2, 1, 1);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanFirst().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanFirst().mjava","sourceNew":"  public void testSpanFirst() throws IOException {\n\n    SpanQuery match;\n    SpanFirstQuery sfq;\n    match = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    sfq = new SpanFirstQuery(match, 2);\n    Spans spans = MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq);\n    checkSpans(spans, 109, 1, 1, 1);\n    //Test more complicated subclause\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"hundred\"));\n    match = new SpanNearQuery(clauses, 0, true);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq), 100, 2, 1, 1);\n\n    match = new SpanNearQuery(clauses, 0, false);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq), 100, 2, 1, 1);\n    \n  }\n\n","sourceOld":"  public void testSpanFirst() throws IOException {\n\n    SpanQuery match;\n    SpanFirstQuery sfq;\n    match = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    sfq = new SpanFirstQuery(match, 2);\n    Spans spans = MultiSpansWrapper.wrap(indexReader.getContext(), sfq);\n    checkSpans(spans, 109, 1, 1, 1);\n    //Test more complicated subclause\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"hundred\"));\n    match = new SpanNearQuery(clauses, 0, true);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getContext(), sfq), 100, 2, 1, 1);\n\n    match = new SpanNearQuery(clauses, 0, false);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getContext(), sfq), 100, 2, 1, 1);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanFirst().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanFirst().mjava","sourceNew":"  public void testSpanFirst() throws IOException {\n\n    SpanQuery match;\n    SpanFirstQuery sfq;\n    match = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    sfq = new SpanFirstQuery(match, 2);\n    Spans spans = MultiSpansWrapper.wrap(indexReader.getContext(), sfq);\n    checkSpans(spans, 109, 1, 1, 1);\n    //Test more complicated subclause\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"hundred\"));\n    match = new SpanNearQuery(clauses, 0, true);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getContext(), sfq), 100, 2, 1, 1);\n\n    match = new SpanNearQuery(clauses, 0, false);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getContext(), sfq), 100, 2, 1, 1);\n    \n  }\n\n","sourceOld":"  public void testSpanFirst() throws IOException {\n\n    SpanQuery match;\n    SpanFirstQuery sfq;\n    match = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    sfq = new SpanFirstQuery(match, 2);\n    Spans spans = MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq);\n    checkSpans(spans, 109, 1, 1, 1);\n    //Test more complicated subclause\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"hundred\"));\n    match = new SpanNearQuery(clauses, 0, true);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq), 100, 2, 1, 1);\n\n    match = new SpanNearQuery(clauses, 0, false);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getTopReaderContext(), sfq), 100, 2, 1, 1);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanFirst().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanFirst().mjava","sourceNew":"  public void testSpanFirst() throws IOException {\n\n    SpanQuery match;\n    SpanFirstQuery sfq;\n    match = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    sfq = new SpanFirstQuery(match, 2);\n    Spans spans = MultiSpansWrapper.wrap(indexReader, sfq);\n    checkSpans(spans, 109, 1, 1, 1);\n    //Test more complicated subclause\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"hundred\"));\n    match = new SpanNearQuery(clauses, 0, true);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader, sfq), 100, 2, 1, 1);\n\n    match = new SpanNearQuery(clauses, 0, false);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader, sfq), 100, 2, 1, 1);\n    \n  }\n\n","sourceOld":"  public void testSpanFirst() throws IOException {\n\n    SpanQuery match;\n    SpanFirstQuery sfq;\n    match = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    sfq = new SpanFirstQuery(match, 2);\n    Spans spans = MultiSpansWrapper.wrap(indexReader.getContext(), sfq);\n    checkSpans(spans, 109, 1, 1, 1);\n    //Test more complicated subclause\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"hundred\"));\n    match = new SpanNearQuery(clauses, 0, true);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getContext(), sfq), 100, 2, 1, 1);\n\n    match = new SpanNearQuery(clauses, 0, false);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getContext(), sfq), 100, 2, 1, 1);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanFirst().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanFirst().mjava","sourceNew":"  public void testSpanFirst() throws IOException {\n\n    SpanQuery match;\n    SpanFirstQuery sfq;\n    match = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    sfq = new SpanFirstQuery(match, 2);\n    Spans spans = MultiSpansWrapper.wrap(indexReader, sfq);\n    checkSpans(spans, 109, 1, 1, 1);\n    //Test more complicated subclause\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"hundred\"));\n    match = new SpanNearQuery(clauses, 0, true);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader, sfq), 100, 2, 1, 1);\n\n    match = new SpanNearQuery(clauses, 0, false);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader, sfq), 100, 2, 1, 1);\n    \n  }\n\n","sourceOld":"  public void testSpanFirst() throws IOException {\n\n    SpanQuery match;\n    SpanFirstQuery sfq;\n    match = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    sfq = new SpanFirstQuery(match, 2);\n    Spans spans = MultiSpansWrapper.wrap(indexReader.getContext(), sfq);\n    checkSpans(spans, 109, 1, 1, 1);\n    //Test more complicated subclause\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"hundred\"));\n    match = new SpanNearQuery(clauses, 0, true);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getContext(), sfq), 100, 2, 1, 1);\n\n    match = new SpanNearQuery(clauses, 0, false);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader.getContext(), sfq), 100, 2, 1, 1);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#testSpanFirst().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanFirst().mjava","sourceNew":"  public void testSpanFirst() throws IOException {\n\n    SpanQuery match;\n    SpanFirstQuery sfq;\n    match = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    sfq = new SpanFirstQuery(match, 2);\n    Spans spans = MultiSpansWrapper.wrap(indexReader, sfq);\n    checkSpans(spans, 109, 1, 1, 1);\n    //Test more complicated subclause\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"hundred\"));\n    match = new SpanNearQuery(clauses, 0, true);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader, sfq), 100, 2, 1, 1);\n\n    match = new SpanNearQuery(clauses, 0, false);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader, sfq), 100, 2, 1, 1);\n    \n  }\n\n","sourceOld":"  public void testSpanFirst() throws IOException {\n\n    SpanQuery match;\n    SpanFirstQuery sfq;\n    match = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    sfq = new SpanFirstQuery(match, 2);\n    Spans spans = MultiSpansWrapper.wrap(indexReader, sfq);\n    checkSpans(spans, 109, 1, 1, 1);\n    //Test more complicated subclause\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"hundred\"));\n    match = new SpanNearQuery(clauses, 0, true);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader, sfq), 100, 2, 1, 1);\n\n    match = new SpanNearQuery(clauses, 0, false);\n    sfq = new SpanFirstQuery(match, 2);\n    checkSpans(MultiSpansWrapper.wrap(indexReader, sfq), 100, 2, 1, 1);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c188105a9aae04f56c24996f98f8333fc825d2e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["211b1506e56f7860762fbd4698f6d1d1b57f672c"],"fab172655716b96f7e42376116235017a922de3a":["211b1506e56f7860762fbd4698f6d1d1b57f672c","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"]},"commit2Childs":{"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3c188105a9aae04f56c24996f98f8333fc825d2e","211b1506e56f7860762fbd4698f6d1d1b57f672c","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}