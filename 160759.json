{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNoDeadLock().mjava","commits":[{"id":"a4278fc65afbb35739525c37f818cded6fe6e9ae","date":1369132128,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNoDeadLock().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeleteAllNoDeadLock() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter modifier = new RandomIndexWriter(random(), dir); \n    int numThreads = atLeast(2);\n    Thread[] threads = new Thread[numThreads];\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch doneLatch = new CountDownLatch(numThreads);\n    for (int i = 0; i < numThreads; i++) {\n      final int offset = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          int id = offset * 1000;\n          int value = 100;\n          try {\n            latch.await();\n            for (int i = 0; i < 1000; i++) {\n              Document doc = new Document();\n              doc.add(newTextField(\"content\", \"aaa\", Field.Store.NO));\n              doc.add(newStringField(\"id\", String.valueOf(id++), Field.Store.YES));\n              doc.add(newStringField(\"value\", String.valueOf(value), Field.Store.NO));\n              doc.add(new NumericDocValuesField(\"dv\", value));\n              modifier.addDocument(doc);\n              if (VERBOSE) {\n                System.out.println(\"\\tThread[\"+offset+\"]: add doc: \" + id);\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          } finally {\n            doneLatch.countDown();\n            if (VERBOSE) {\n              System.out.println(\"\\tThread[\"+offset+\"]: done indexing\" );\n            }\n          }\n        }\n      };\n      threads[i].start();\n    }\n    latch.countDown();\n    while(!doneLatch.await(1, TimeUnit.MILLISECONDS)) {\n      modifier.deleteAll();\n      if (VERBOSE) {\n        System.out.println(\"del all\");\n      }\n    }\n    \n    modifier.deleteAll();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    modifier.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(reader.maxDoc(), 0);\n    assertEquals(reader.numDocs(), 0);\n    assertEquals(reader.numDeletedDocs(), 0);\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666","date":1381263930,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNoDeadLock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNoDeadLock().mjava","sourceNew":"  public void testDeleteAllNoDeadLock() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter modifier = new RandomIndexWriter(random(), dir); \n    int numThreads = atLeast(2);\n    Thread[] threads = new Thread[numThreads];\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch doneLatch = new CountDownLatch(numThreads);\n    for (int i = 0; i < numThreads; i++) {\n      final int offset = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          int id = offset * 1000;\n          int value = 100;\n          try {\n            latch.await();\n            for (int j = 0; j < 1000; j++) {\n              Document doc = new Document();\n              doc.add(newTextField(\"content\", \"aaa\", Field.Store.NO));\n              doc.add(newStringField(\"id\", String.valueOf(id++), Field.Store.YES));\n              doc.add(newStringField(\"value\", String.valueOf(value), Field.Store.NO));\n              doc.add(new NumericDocValuesField(\"dv\", value));\n              modifier.addDocument(doc);\n              if (VERBOSE) {\n                System.out.println(\"\\tThread[\"+offset+\"]: add doc: \" + id);\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          } finally {\n            doneLatch.countDown();\n            if (VERBOSE) {\n              System.out.println(\"\\tThread[\"+offset+\"]: done indexing\" );\n            }\n          }\n        }\n      };\n      threads[i].start();\n    }\n    latch.countDown();\n    while(!doneLatch.await(1, TimeUnit.MILLISECONDS)) {\n      modifier.deleteAll();\n      if (VERBOSE) {\n        System.out.println(\"del all\");\n      }\n    }\n    \n    modifier.deleteAll();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    modifier.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(reader.maxDoc(), 0);\n    assertEquals(reader.numDocs(), 0);\n    assertEquals(reader.numDeletedDocs(), 0);\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllNoDeadLock() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter modifier = new RandomIndexWriter(random(), dir); \n    int numThreads = atLeast(2);\n    Thread[] threads = new Thread[numThreads];\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch doneLatch = new CountDownLatch(numThreads);\n    for (int i = 0; i < numThreads; i++) {\n      final int offset = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          int id = offset * 1000;\n          int value = 100;\n          try {\n            latch.await();\n            for (int i = 0; i < 1000; i++) {\n              Document doc = new Document();\n              doc.add(newTextField(\"content\", \"aaa\", Field.Store.NO));\n              doc.add(newStringField(\"id\", String.valueOf(id++), Field.Store.YES));\n              doc.add(newStringField(\"value\", String.valueOf(value), Field.Store.NO));\n              doc.add(new NumericDocValuesField(\"dv\", value));\n              modifier.addDocument(doc);\n              if (VERBOSE) {\n                System.out.println(\"\\tThread[\"+offset+\"]: add doc: \" + id);\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          } finally {\n            doneLatch.countDown();\n            if (VERBOSE) {\n              System.out.println(\"\\tThread[\"+offset+\"]: done indexing\" );\n            }\n          }\n        }\n      };\n      threads[i].start();\n    }\n    latch.countDown();\n    while(!doneLatch.await(1, TimeUnit.MILLISECONDS)) {\n      modifier.deleteAll();\n      if (VERBOSE) {\n        System.out.println(\"del all\");\n      }\n    }\n    \n    modifier.deleteAll();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    modifier.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(reader.maxDoc(), 0);\n    assertEquals(reader.numDocs(), 0);\n    assertEquals(reader.numDeletedDocs(), 0);\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNoDeadLock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNoDeadLock().mjava","sourceNew":"  public void testDeleteAllNoDeadLock() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter modifier = new RandomIndexWriter(random(), dir); \n    int numThreads = atLeast(2);\n    Thread[] threads = new Thread[numThreads];\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch doneLatch = new CountDownLatch(numThreads);\n    for (int i = 0; i < numThreads; i++) {\n      final int offset = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          int id = offset * 1000;\n          int value = 100;\n          try {\n            latch.await();\n            for (int j = 0; j < 1000; j++) {\n              Document doc = new Document();\n              doc.add(newTextField(\"content\", \"aaa\", Field.Store.NO));\n              doc.add(newStringField(\"id\", String.valueOf(id++), Field.Store.YES));\n              doc.add(newStringField(\"value\", String.valueOf(value), Field.Store.NO));\n              doc.add(new NumericDocValuesField(\"dv\", value));\n              modifier.addDocument(doc);\n              if (VERBOSE) {\n                System.out.println(\"\\tThread[\"+offset+\"]: add doc: \" + id);\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          } finally {\n            doneLatch.countDown();\n            if (VERBOSE) {\n              System.out.println(\"\\tThread[\"+offset+\"]: done indexing\" );\n            }\n          }\n        }\n      };\n      threads[i].start();\n    }\n    latch.countDown();\n    while(!doneLatch.await(1, TimeUnit.MILLISECONDS)) {\n      modifier.deleteAll();\n      if (VERBOSE) {\n        System.out.println(\"del all\");\n      }\n    }\n    \n    modifier.deleteAll();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    modifier.shutdown();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(reader.maxDoc(), 0);\n    assertEquals(reader.numDocs(), 0);\n    assertEquals(reader.numDeletedDocs(), 0);\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllNoDeadLock() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter modifier = new RandomIndexWriter(random(), dir); \n    int numThreads = atLeast(2);\n    Thread[] threads = new Thread[numThreads];\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch doneLatch = new CountDownLatch(numThreads);\n    for (int i = 0; i < numThreads; i++) {\n      final int offset = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          int id = offset * 1000;\n          int value = 100;\n          try {\n            latch.await();\n            for (int j = 0; j < 1000; j++) {\n              Document doc = new Document();\n              doc.add(newTextField(\"content\", \"aaa\", Field.Store.NO));\n              doc.add(newStringField(\"id\", String.valueOf(id++), Field.Store.YES));\n              doc.add(newStringField(\"value\", String.valueOf(value), Field.Store.NO));\n              doc.add(new NumericDocValuesField(\"dv\", value));\n              modifier.addDocument(doc);\n              if (VERBOSE) {\n                System.out.println(\"\\tThread[\"+offset+\"]: add doc: \" + id);\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          } finally {\n            doneLatch.countDown();\n            if (VERBOSE) {\n              System.out.println(\"\\tThread[\"+offset+\"]: done indexing\" );\n            }\n          }\n        }\n      };\n      threads[i].start();\n    }\n    latch.countDown();\n    while(!doneLatch.await(1, TimeUnit.MILLISECONDS)) {\n      modifier.deleteAll();\n      if (VERBOSE) {\n        System.out.println(\"del all\");\n      }\n    }\n    \n    modifier.deleteAll();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    modifier.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(reader.maxDoc(), 0);\n    assertEquals(reader.numDocs(), 0);\n    assertEquals(reader.numDeletedDocs(), 0);\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNoDeadLock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNoDeadLock().mjava","sourceNew":"  public void testDeleteAllNoDeadLock() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter modifier = new RandomIndexWriter(random(), dir); \n    int numThreads = atLeast(2);\n    Thread[] threads = new Thread[numThreads];\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch doneLatch = new CountDownLatch(numThreads);\n    for (int i = 0; i < numThreads; i++) {\n      final int offset = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          int id = offset * 1000;\n          int value = 100;\n          try {\n            latch.await();\n            for (int j = 0; j < 1000; j++) {\n              Document doc = new Document();\n              doc.add(newTextField(\"content\", \"aaa\", Field.Store.NO));\n              doc.add(newStringField(\"id\", String.valueOf(id++), Field.Store.YES));\n              doc.add(newStringField(\"value\", String.valueOf(value), Field.Store.NO));\n              doc.add(new NumericDocValuesField(\"dv\", value));\n              modifier.addDocument(doc);\n              if (VERBOSE) {\n                System.out.println(\"\\tThread[\"+offset+\"]: add doc: \" + id);\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          } finally {\n            doneLatch.countDown();\n            if (VERBOSE) {\n              System.out.println(\"\\tThread[\"+offset+\"]: done indexing\" );\n            }\n          }\n        }\n      };\n      threads[i].start();\n    }\n    latch.countDown();\n    while(!doneLatch.await(1, TimeUnit.MILLISECONDS)) {\n      modifier.deleteAll();\n      if (VERBOSE) {\n        System.out.println(\"del all\");\n      }\n    }\n    \n    modifier.deleteAll();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    modifier.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(reader.maxDoc(), 0);\n    assertEquals(reader.numDocs(), 0);\n    assertEquals(reader.numDeletedDocs(), 0);\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllNoDeadLock() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter modifier = new RandomIndexWriter(random(), dir); \n    int numThreads = atLeast(2);\n    Thread[] threads = new Thread[numThreads];\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch doneLatch = new CountDownLatch(numThreads);\n    for (int i = 0; i < numThreads; i++) {\n      final int offset = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          int id = offset * 1000;\n          int value = 100;\n          try {\n            latch.await();\n            for (int j = 0; j < 1000; j++) {\n              Document doc = new Document();\n              doc.add(newTextField(\"content\", \"aaa\", Field.Store.NO));\n              doc.add(newStringField(\"id\", String.valueOf(id++), Field.Store.YES));\n              doc.add(newStringField(\"value\", String.valueOf(value), Field.Store.NO));\n              doc.add(new NumericDocValuesField(\"dv\", value));\n              modifier.addDocument(doc);\n              if (VERBOSE) {\n                System.out.println(\"\\tThread[\"+offset+\"]: add doc: \" + id);\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          } finally {\n            doneLatch.countDown();\n            if (VERBOSE) {\n              System.out.println(\"\\tThread[\"+offset+\"]: done indexing\" );\n            }\n          }\n        }\n      };\n      threads[i].start();\n    }\n    latch.countDown();\n    while(!doneLatch.await(1, TimeUnit.MILLISECONDS)) {\n      modifier.deleteAll();\n      if (VERBOSE) {\n        System.out.println(\"del all\");\n      }\n    }\n    \n    modifier.deleteAll();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    modifier.shutdown();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(reader.maxDoc(), 0);\n    assertEquals(reader.numDocs(), 0);\n    assertEquals(reader.numDeletedDocs(), 0);\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNoDeadLock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNoDeadLock().mjava","sourceNew":"  public void testDeleteAllNoDeadLock() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter modifier = new RandomIndexWriter(random(), dir); \n    int numThreads = atLeast(2);\n    Thread[] threads = new Thread[numThreads];\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch doneLatch = new CountDownLatch(numThreads);\n    for (int i = 0; i < numThreads; i++) {\n      final int offset = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          int id = offset * 1000;\n          int value = 100;\n          try {\n            latch.await();\n            for (int j = 0; j < 1000; j++) {\n              Document doc = new Document();\n              doc.add(newTextField(\"content\", \"aaa\", Field.Store.NO));\n              doc.add(newStringField(\"id\", String.valueOf(id++), Field.Store.YES));\n              doc.add(newStringField(\"value\", String.valueOf(value), Field.Store.NO));\n              doc.add(new NumericDocValuesField(\"dv\", value));\n              modifier.addDocument(doc);\n              if (VERBOSE) {\n                System.out.println(\"\\tThread[\"+offset+\"]: add doc: \" + id);\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          } finally {\n            doneLatch.countDown();\n            if (VERBOSE) {\n              System.out.println(\"\\tThread[\"+offset+\"]: done indexing\" );\n            }\n          }\n        }\n      };\n      threads[i].start();\n    }\n    latch.countDown();\n    while(!doneLatch.await(1, TimeUnit.MILLISECONDS)) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now deleteAll\");\n      }\n      modifier.deleteAll();\n      if (VERBOSE) {\n        System.out.println(\"del all\");\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now final deleteAll\");\n    }\n    \n    modifier.deleteAll();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now close\");\n    }\n    modifier.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: got reader=\" + reader);\n    }\n    assertEquals(0, reader.maxDoc());\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader.numDeletedDocs(), 0);\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllNoDeadLock() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter modifier = new RandomIndexWriter(random(), dir); \n    int numThreads = atLeast(2);\n    Thread[] threads = new Thread[numThreads];\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch doneLatch = new CountDownLatch(numThreads);\n    for (int i = 0; i < numThreads; i++) {\n      final int offset = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          int id = offset * 1000;\n          int value = 100;\n          try {\n            latch.await();\n            for (int j = 0; j < 1000; j++) {\n              Document doc = new Document();\n              doc.add(newTextField(\"content\", \"aaa\", Field.Store.NO));\n              doc.add(newStringField(\"id\", String.valueOf(id++), Field.Store.YES));\n              doc.add(newStringField(\"value\", String.valueOf(value), Field.Store.NO));\n              doc.add(new NumericDocValuesField(\"dv\", value));\n              modifier.addDocument(doc);\n              if (VERBOSE) {\n                System.out.println(\"\\tThread[\"+offset+\"]: add doc: \" + id);\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          } finally {\n            doneLatch.countDown();\n            if (VERBOSE) {\n              System.out.println(\"\\tThread[\"+offset+\"]: done indexing\" );\n            }\n          }\n        }\n      };\n      threads[i].start();\n    }\n    latch.countDown();\n    while(!doneLatch.await(1, TimeUnit.MILLISECONDS)) {\n      modifier.deleteAll();\n      if (VERBOSE) {\n        System.out.println(\"del all\");\n      }\n    }\n    \n    modifier.deleteAll();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    modifier.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(reader.maxDoc(), 0);\n    assertEquals(reader.numDocs(), 0);\n    assertEquals(reader.numDeletedDocs(), 0);\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNoDeadLock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNoDeadLock().mjava","sourceNew":"  public void testDeleteAllNoDeadLock() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter modifier = new RandomIndexWriter(random(), dir); \n    int numThreads = atLeast(2);\n    Thread[] threads = new Thread[numThreads];\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch doneLatch = new CountDownLatch(numThreads);\n    for (int i = 0; i < numThreads; i++) {\n      final int offset = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          int id = offset * 1000;\n          int value = 100;\n          try {\n            latch.await();\n            for (int j = 0; j < 1000; j++) {\n              Document doc = new Document();\n              doc.add(newTextField(\"content\", \"aaa\", Field.Store.NO));\n              doc.add(newStringField(\"id\", String.valueOf(id++), Field.Store.YES));\n              doc.add(newStringField(\"value\", String.valueOf(value), Field.Store.NO));\n              doc.add(new NumericDocValuesField(\"dv\", value));\n              modifier.addDocument(doc);\n              if (VERBOSE) {\n                System.out.println(\"\\tThread[\"+offset+\"]: add doc: \" + id);\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          } finally {\n            doneLatch.countDown();\n            if (VERBOSE) {\n              System.out.println(\"\\tThread[\"+offset+\"]: done indexing\" );\n            }\n          }\n        }\n      };\n      threads[i].start();\n    }\n    latch.countDown();\n    while(!doneLatch.await(1, TimeUnit.MILLISECONDS)) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now deleteAll\");\n      }\n      modifier.deleteAll();\n      if (VERBOSE) {\n        System.out.println(\"del all\");\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now final deleteAll\");\n    }\n    \n    modifier.deleteAll();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now close\");\n    }\n    modifier.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: got reader=\" + reader);\n    }\n    assertEquals(0, reader.maxDoc());\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader.numDeletedDocs(), 0);\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllNoDeadLock() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter modifier = new RandomIndexWriter(random(), dir); \n    int numThreads = atLeast(2);\n    Thread[] threads = new Thread[numThreads];\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch doneLatch = new CountDownLatch(numThreads);\n    for (int i = 0; i < numThreads; i++) {\n      final int offset = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          int id = offset * 1000;\n          int value = 100;\n          try {\n            latch.await();\n            for (int j = 0; j < 1000; j++) {\n              Document doc = new Document();\n              doc.add(newTextField(\"content\", \"aaa\", Field.Store.NO));\n              doc.add(newStringField(\"id\", String.valueOf(id++), Field.Store.YES));\n              doc.add(newStringField(\"value\", String.valueOf(value), Field.Store.NO));\n              doc.add(new NumericDocValuesField(\"dv\", value));\n              modifier.addDocument(doc);\n              if (VERBOSE) {\n                System.out.println(\"\\tThread[\"+offset+\"]: add doc: \" + id);\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          } finally {\n            doneLatch.countDown();\n            if (VERBOSE) {\n              System.out.println(\"\\tThread[\"+offset+\"]: done indexing\" );\n            }\n          }\n        }\n      };\n      threads[i].start();\n    }\n    latch.countDown();\n    while(!doneLatch.await(1, TimeUnit.MILLISECONDS)) {\n      modifier.deleteAll();\n      if (VERBOSE) {\n        System.out.println(\"del all\");\n      }\n    }\n    \n    modifier.deleteAll();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    modifier.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(reader.maxDoc(), 0);\n    assertEquals(reader.numDocs(), 0);\n    assertEquals(reader.numDeletedDocs(), 0);\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNoDeadLock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNoDeadLock().mjava","sourceNew":"  public void testDeleteAllNoDeadLock() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter modifier = new RandomIndexWriter(random(), dir); \n    int numThreads = atLeast(2);\n    Thread[] threads = new Thread[numThreads];\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch doneLatch = new CountDownLatch(numThreads);\n    for (int i = 0; i < numThreads; i++) {\n      final int offset = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          int id = offset * 1000;\n          int value = 100;\n          try {\n            latch.await();\n            for (int j = 0; j < 1000; j++) {\n              Document doc = new Document();\n              doc.add(newTextField(\"content\", \"aaa\", Field.Store.NO));\n              doc.add(newStringField(\"id\", String.valueOf(id++), Field.Store.YES));\n              doc.add(newStringField(\"value\", String.valueOf(value), Field.Store.NO));\n              doc.add(new NumericDocValuesField(\"dv\", value));\n              modifier.addDocument(doc);\n              if (VERBOSE) {\n                System.out.println(\"\\tThread[\"+offset+\"]: add doc: \" + id);\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          } finally {\n            doneLatch.countDown();\n            if (VERBOSE) {\n              System.out.println(\"\\tThread[\"+offset+\"]: done indexing\" );\n            }\n          }\n        }\n      };\n      threads[i].start();\n    }\n    latch.countDown();\n    while(!doneLatch.await(1, TimeUnit.MILLISECONDS)) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now deleteAll\");\n      }\n      modifier.deleteAll();\n      if (VERBOSE) {\n        System.out.println(\"del all\");\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now final deleteAll\");\n    }\n    \n    modifier.deleteAll();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now close\");\n    }\n    modifier.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: got reader=\" + reader);\n    }\n    assertEquals(0, reader.maxDoc());\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader.numDeletedDocs(), 0);\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllNoDeadLock() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter modifier = new RandomIndexWriter(random(), dir); \n    int numThreads = atLeast(2);\n    Thread[] threads = new Thread[numThreads];\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch doneLatch = new CountDownLatch(numThreads);\n    for (int i = 0; i < numThreads; i++) {\n      final int offset = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          int id = offset * 1000;\n          int value = 100;\n          try {\n            latch.await();\n            for (int j = 0; j < 1000; j++) {\n              Document doc = new Document();\n              doc.add(newTextField(\"content\", \"aaa\", Field.Store.NO));\n              doc.add(newStringField(\"id\", String.valueOf(id++), Field.Store.YES));\n              doc.add(newStringField(\"value\", String.valueOf(value), Field.Store.NO));\n              doc.add(new NumericDocValuesField(\"dv\", value));\n              modifier.addDocument(doc);\n              if (VERBOSE) {\n                System.out.println(\"\\tThread[\"+offset+\"]: add doc: \" + id);\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          } finally {\n            doneLatch.countDown();\n            if (VERBOSE) {\n              System.out.println(\"\\tThread[\"+offset+\"]: done indexing\" );\n            }\n          }\n        }\n      };\n      threads[i].start();\n    }\n    latch.countDown();\n    while(!doneLatch.await(1, TimeUnit.MILLISECONDS)) {\n      modifier.deleteAll();\n      if (VERBOSE) {\n        System.out.println(\"del all\");\n      }\n    }\n    \n    modifier.deleteAll();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    modifier.close();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(reader.maxDoc(), 0);\n    assertEquals(reader.numDocs(), 0);\n    assertEquals(reader.numDeletedDocs(), 0);\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a775b68a26e2d19d1b5f16cd18a3bc8df738a302","date":1598253342,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNoDeadLock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNoDeadLock().mjava","sourceNew":"  public void testDeleteAllNoDeadLock() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter modifier = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig().setMergePolicy(new MockRandomMergePolicy(random())));\n    int numThreads = atLeast(2);\n    Thread[] threads = new Thread[numThreads];\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch doneLatch = new CountDownLatch(numThreads);\n    for (int i = 0; i < numThreads; i++) {\n      final int offset = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          int id = offset * 1000;\n          int value = 100;\n          try {\n            latch.await();\n            for (int j = 0; j < 1000; j++) {\n              Document doc = new Document();\n              doc.add(newTextField(\"content\", \"aaa\", Field.Store.NO));\n              doc.add(newStringField(\"id\", String.valueOf(id++), Field.Store.YES));\n              doc.add(newStringField(\"value\", String.valueOf(value), Field.Store.NO));\n              doc.add(new NumericDocValuesField(\"dv\", value));\n              modifier.addDocument(doc);\n              if (VERBOSE) {\n                System.out.println(\"\\tThread[\"+offset+\"]: add doc: \" + id);\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          } finally {\n            doneLatch.countDown();\n            if (VERBOSE) {\n              System.out.println(\"\\tThread[\"+offset+\"]: done indexing\" );\n            }\n          }\n        }\n      };\n      threads[i].start();\n    }\n    latch.countDown();\n    while (!doneLatch.await(1, TimeUnit.MILLISECONDS)) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now deleteAll\");\n      }\n      modifier.deleteAll();\n      if (VERBOSE) {\n        System.out.println(\"del all\");\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now final deleteAll\");\n    }\n    \n    modifier.deleteAll();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now close\");\n    }\n    modifier.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: got reader=\" + reader);\n    }\n    assertEquals(0, reader.maxDoc());\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader.numDeletedDocs(), 0);\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllNoDeadLock() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter modifier = new RandomIndexWriter(random(), dir); \n    int numThreads = atLeast(2);\n    Thread[] threads = new Thread[numThreads];\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch doneLatch = new CountDownLatch(numThreads);\n    for (int i = 0; i < numThreads; i++) {\n      final int offset = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          int id = offset * 1000;\n          int value = 100;\n          try {\n            latch.await();\n            for (int j = 0; j < 1000; j++) {\n              Document doc = new Document();\n              doc.add(newTextField(\"content\", \"aaa\", Field.Store.NO));\n              doc.add(newStringField(\"id\", String.valueOf(id++), Field.Store.YES));\n              doc.add(newStringField(\"value\", String.valueOf(value), Field.Store.NO));\n              doc.add(new NumericDocValuesField(\"dv\", value));\n              modifier.addDocument(doc);\n              if (VERBOSE) {\n                System.out.println(\"\\tThread[\"+offset+\"]: add doc: \" + id);\n              }\n            }\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          } finally {\n            doneLatch.countDown();\n            if (VERBOSE) {\n              System.out.println(\"\\tThread[\"+offset+\"]: done indexing\" );\n            }\n          }\n        }\n      };\n      threads[i].start();\n    }\n    latch.countDown();\n    while(!doneLatch.await(1, TimeUnit.MILLISECONDS)) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: now deleteAll\");\n      }\n      modifier.deleteAll();\n      if (VERBOSE) {\n        System.out.println(\"del all\");\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now final deleteAll\");\n    }\n    \n    modifier.deleteAll();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now close\");\n    }\n    modifier.close();\n    \n    DirectoryReader reader = DirectoryReader.open(dir);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: got reader=\" + reader);\n    }\n    assertEquals(0, reader.maxDoc());\n    assertEquals(0, reader.numDocs());\n    assertEquals(0, reader.numDeletedDocs(), 0);\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["a4278fc65afbb35739525c37f818cded6fe6e9ae"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a775b68a26e2d19d1b5f16cd18a3bc8df738a302":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"a4278fc65afbb35739525c37f818cded6fe6e9ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["d0ef034a4f10871667ae75181537775ddcf8ade4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["d0ef034a4f10871667ae75181537775ddcf8ade4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a775b68a26e2d19d1b5f16cd18a3bc8df738a302"]},"commit2Childs":{"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a775b68a26e2d19d1b5f16cd18a3bc8df738a302":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4278fc65afbb35739525c37f818cded6fe6e9ae"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a4278fc65afbb35739525c37f818cded6fe6e9ae":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["a775b68a26e2d19d1b5f16cd18a3bc8df738a302"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}