{"path":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#rejoinElection(String,Slice,String,String,boolean).mjava","commits":[{"id":"9ebd3a557326ef3eab85b73a8cff781f7d801248","date":1431620752,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#rejoinElection(String,Slice,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#rejoinElection(String,Slice,String,String,boolean).mjava","sourceNew":"  private void rejoinElection(String collectionName, Slice slice, String electionNode, String core,\n                              boolean rejoinAtHead) throws KeeperException, InterruptedException {\n    Replica replica = slice.getReplica(LeaderElector.getNodeName(electionNode));\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(COLLECTION_PROP, collectionName);\n    propMap.put(SHARD_ID_PROP, slice.getName());\n    propMap.put(QUEUE_OPERATION, REBALANCELEADERS.toLower());\n    propMap.put(CORE_NAME_PROP, core);\n    propMap.put(NODE_NAME_PROP, replica.getName());\n    propMap.put(ZkStateReader.BASE_URL_PROP, replica.getProperties().get(ZkStateReader.BASE_URL_PROP));\n    propMap.put(REJOIN_AT_HEAD_PROP, Boolean.toString(rejoinAtHead)); // Get ourselves to be first in line.\n    propMap.put(ELECTION_NODE_PROP, electionNode);\n    String asyncId = REBALANCELEADERS.toLower() + \"_\" + core + \"_\" + Math.abs(System.nanoTime());\n    propMap.put(ASYNC, asyncId);\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    SolrQueryResponse rspIgnore = new SolrQueryResponse(); // I'm constructing my own response\n    collectionsHandler.handleResponse(REBALANCELEADERS.toLower(), m, rspIgnore); // Want to construct my own response here.\n  }\n\n","sourceOld":"  private void rejoinElection(String collectionName, Slice slice, String electionNode, String core,\n                              boolean rejoinAtHead) throws KeeperException, InterruptedException {\n    Replica replica = slice.getReplica(LeaderElector.getNodeName(electionNode));\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(COLLECTION_PROP, collectionName);\n    propMap.put(SHARD_ID_PROP, slice.getName());\n    propMap.put(Overseer.QUEUE_OPERATION, REBALANCELEADERS.toLower());\n    propMap.put(CORE_NAME_PROP, core);\n    propMap.put(NODE_NAME_PROP, replica.getName());\n    propMap.put(ZkStateReader.BASE_URL_PROP, replica.getProperties().get(ZkStateReader.BASE_URL_PROP));\n    propMap.put(REJOIN_AT_HEAD_PROP, Boolean.toString(rejoinAtHead)); // Get ourselves to be first in line.\n    propMap.put(ELECTION_NODE_PROP, electionNode);\n    String asyncId = REBALANCELEADERS.toLower() + \"_\" + core + \"_\" + Math.abs(System.nanoTime());\n    propMap.put(ASYNC, asyncId);\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    SolrQueryResponse rspIgnore = new SolrQueryResponse(); // I'm constructing my own response\n    handleResponse(REBALANCELEADERS.toLower(), m, rspIgnore); // Want to construct my own response here.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064","date":1441124018,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#rejoinElection(String,Slice,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#rejoinElection(String,Slice,String,String,boolean).mjava","sourceNew":"  private void rejoinElection(String collectionName, Slice slice, String electionNode, String core,\n                              boolean rejoinAtHead) throws KeeperException, InterruptedException {\n    Replica replica = slice.getReplica(LeaderElector.getNodeName(electionNode));\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(COLLECTION_PROP, collectionName);\n    propMap.put(SHARD_ID_PROP, slice.getName());\n    propMap.put(QUEUE_OPERATION, REBALANCELEADERS.toLower());\n    propMap.put(CORE_NAME_PROP, core);\n    propMap.put(CORE_NODE_NAME_PROP, replica.getName());\n    propMap.put(ZkStateReader.BASE_URL_PROP, replica.getProperties().get(ZkStateReader.BASE_URL_PROP));\n    propMap.put(REJOIN_AT_HEAD_PROP, Boolean.toString(rejoinAtHead)); // Get ourselves to be first in line.\n    propMap.put(ELECTION_NODE_PROP, electionNode);\n    String asyncId = REBALANCELEADERS.toLower() + \"_\" + core + \"_\" + Math.abs(System.nanoTime());\n    propMap.put(ASYNC, asyncId);\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    SolrQueryResponse rspIgnore = new SolrQueryResponse(); // I'm constructing my own response\n    collectionsHandler.handleResponse(REBALANCELEADERS.toLower(), m, rspIgnore); // Want to construct my own response here.\n  }\n\n","sourceOld":"  private void rejoinElection(String collectionName, Slice slice, String electionNode, String core,\n                              boolean rejoinAtHead) throws KeeperException, InterruptedException {\n    Replica replica = slice.getReplica(LeaderElector.getNodeName(electionNode));\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(COLLECTION_PROP, collectionName);\n    propMap.put(SHARD_ID_PROP, slice.getName());\n    propMap.put(QUEUE_OPERATION, REBALANCELEADERS.toLower());\n    propMap.put(CORE_NAME_PROP, core);\n    propMap.put(NODE_NAME_PROP, replica.getName());\n    propMap.put(ZkStateReader.BASE_URL_PROP, replica.getProperties().get(ZkStateReader.BASE_URL_PROP));\n    propMap.put(REJOIN_AT_HEAD_PROP, Boolean.toString(rejoinAtHead)); // Get ourselves to be first in line.\n    propMap.put(ELECTION_NODE_PROP, electionNode);\n    String asyncId = REBALANCELEADERS.toLower() + \"_\" + core + \"_\" + Math.abs(System.nanoTime());\n    propMap.put(ASYNC, asyncId);\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    SolrQueryResponse rspIgnore = new SolrQueryResponse(); // I'm constructing my own response\n    collectionsHandler.handleResponse(REBALANCELEADERS.toLower(), m, rspIgnore); // Want to construct my own response here.\n  }\n\n","bugFix":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cbd743a4843f513f793670e3ab0e272bf824faf","date":1518149529,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#rejoinElection(String,Slice,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#rejoinElection(String,Slice,String,String,boolean).mjava","sourceNew":"  private void rejoinElection(String collectionName, Slice slice, String electionNode, String core,\n                              boolean rejoinAtHead) throws KeeperException, InterruptedException {\n    Replica replica = slice.getReplica(LeaderElector.getNodeName(electionNode));\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(COLLECTION_PROP, collectionName);\n    propMap.put(SHARD_ID_PROP, slice.getName());\n    propMap.put(QUEUE_OPERATION, REBALANCELEADERS.toLower());\n    propMap.put(CORE_NAME_PROP, core);\n    propMap.put(CORE_NODE_NAME_PROP, replica.getName());\n    propMap.put(ZkStateReader.BASE_URL_PROP, replica.getProperties().get(ZkStateReader.BASE_URL_PROP));\n    propMap.put(REJOIN_AT_HEAD_PROP, Boolean.toString(rejoinAtHead)); // Get ourselves to be first in line.\n    propMap.put(ELECTION_NODE_PROP, electionNode);\n    String asyncId = REBALANCELEADERS.toLower() + \"_\" + core + \"_\" + Math.abs(System.nanoTime());\n    propMap.put(ASYNC, asyncId);\n    collectionsHandler.sendToOCPQueue(new ZkNodeProps(propMap)); // ignore response; we construct our own\n  }\n\n","sourceOld":"  private void rejoinElection(String collectionName, Slice slice, String electionNode, String core,\n                              boolean rejoinAtHead) throws KeeperException, InterruptedException {\n    Replica replica = slice.getReplica(LeaderElector.getNodeName(electionNode));\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(COLLECTION_PROP, collectionName);\n    propMap.put(SHARD_ID_PROP, slice.getName());\n    propMap.put(QUEUE_OPERATION, REBALANCELEADERS.toLower());\n    propMap.put(CORE_NAME_PROP, core);\n    propMap.put(CORE_NODE_NAME_PROP, replica.getName());\n    propMap.put(ZkStateReader.BASE_URL_PROP, replica.getProperties().get(ZkStateReader.BASE_URL_PROP));\n    propMap.put(REJOIN_AT_HEAD_PROP, Boolean.toString(rejoinAtHead)); // Get ourselves to be first in line.\n    propMap.put(ELECTION_NODE_PROP, electionNode);\n    String asyncId = REBALANCELEADERS.toLower() + \"_\" + core + \"_\" + Math.abs(System.nanoTime());\n    propMap.put(ASYNC, asyncId);\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    SolrQueryResponse rspIgnore = new SolrQueryResponse(); // I'm constructing my own response\n    collectionsHandler.handleResponse(REBALANCELEADERS.toLower(), m, rspIgnore); // Want to construct my own response here.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#rejoinElectionQueue(Slice,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#rejoinElection(String,Slice,String,String,boolean).mjava","sourceNew":"  // Move an election node to some other place in the queue. If rejoinAtHead==false, then at the end, otherwise\n  // the new node should point at the leader.\n  private void rejoinElectionQueue(Slice slice, String electionNode, String core, boolean rejoinAtHead)\n      throws KeeperException, InterruptedException {\n    Replica replica = slice.getReplica(LeaderElector.getNodeName(electionNode));\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(COLLECTION_PROP, collectionName);\n    propMap.put(SHARD_ID_PROP, slice.getName());\n    propMap.put(QUEUE_OPERATION, REBALANCELEADERS.toLower());\n    propMap.put(CORE_NAME_PROP, core);\n    propMap.put(CORE_NODE_NAME_PROP, replica.getName());\n    propMap.put(ZkStateReader.BASE_URL_PROP, replica.getProperties().get(ZkStateReader.BASE_URL_PROP));\n    propMap.put(REJOIN_AT_HEAD_PROP, Boolean.toString(rejoinAtHead)); // Get ourselves to be first in line.\n    propMap.put(ELECTION_NODE_PROP, electionNode);\n    String asyncId = REBALANCELEADERS.toLower() + \"_\" + core + \"_\" + Math.abs(System.nanoTime());\n    propMap.put(ASYNC, asyncId);\n    asyncRequests.add(asyncId);\n\n    collectionsHandler.sendToOCPQueue(new ZkNodeProps(propMap)); // ignore response; we construct our own\n  }\n\n","sourceOld":"  private void rejoinElection(String collectionName, Slice slice, String electionNode, String core,\n                              boolean rejoinAtHead) throws KeeperException, InterruptedException {\n    Replica replica = slice.getReplica(LeaderElector.getNodeName(electionNode));\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(COLLECTION_PROP, collectionName);\n    propMap.put(SHARD_ID_PROP, slice.getName());\n    propMap.put(QUEUE_OPERATION, REBALANCELEADERS.toLower());\n    propMap.put(CORE_NAME_PROP, core);\n    propMap.put(CORE_NODE_NAME_PROP, replica.getName());\n    propMap.put(ZkStateReader.BASE_URL_PROP, replica.getProperties().get(ZkStateReader.BASE_URL_PROP));\n    propMap.put(REJOIN_AT_HEAD_PROP, Boolean.toString(rejoinAtHead)); // Get ourselves to be first in line.\n    propMap.put(ELECTION_NODE_PROP, electionNode);\n    String asyncId = REBALANCELEADERS.toLower() + \"_\" + core + \"_\" + Math.abs(System.nanoTime());\n    propMap.put(ASYNC, asyncId);\n    collectionsHandler.sendToOCPQueue(new ZkNodeProps(propMap)); // ignore response; we construct our own\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#rejoinElectionQueue(Slice,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#rejoinElection(String,Slice,String,String,boolean).mjava","sourceNew":"  // Move an election node to some other place in the queue. If rejoinAtHead==false, then at the end, otherwise\n  // the new node should point at the leader.\n  private void rejoinElectionQueue(Slice slice, String electionNode, String core, boolean rejoinAtHead)\n      throws KeeperException, InterruptedException {\n    Replica replica = slice.getReplica(LeaderElector.getNodeName(electionNode));\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(COLLECTION_PROP, collectionName);\n    propMap.put(SHARD_ID_PROP, slice.getName());\n    propMap.put(QUEUE_OPERATION, REBALANCELEADERS.toLower());\n    propMap.put(CORE_NAME_PROP, core);\n    propMap.put(CORE_NODE_NAME_PROP, replica.getName());\n    propMap.put(ZkStateReader.BASE_URL_PROP, replica.getProperties().get(ZkStateReader.BASE_URL_PROP));\n    propMap.put(REJOIN_AT_HEAD_PROP, Boolean.toString(rejoinAtHead)); // Get ourselves to be first in line.\n    propMap.put(ELECTION_NODE_PROP, electionNode);\n    String asyncId = REBALANCELEADERS.toLower() + \"_\" + core + \"_\" + Math.abs(System.nanoTime());\n    propMap.put(ASYNC, asyncId);\n    asyncRequests.add(asyncId);\n\n    collectionsHandler.sendToOCPQueue(new ZkNodeProps(propMap)); // ignore response; we construct our own\n  }\n\n","sourceOld":"  private void rejoinElection(String collectionName, Slice slice, String electionNode, String core,\n                              boolean rejoinAtHead) throws KeeperException, InterruptedException {\n    Replica replica = slice.getReplica(LeaderElector.getNodeName(electionNode));\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(COLLECTION_PROP, collectionName);\n    propMap.put(SHARD_ID_PROP, slice.getName());\n    propMap.put(QUEUE_OPERATION, REBALANCELEADERS.toLower());\n    propMap.put(CORE_NAME_PROP, core);\n    propMap.put(CORE_NODE_NAME_PROP, replica.getName());\n    propMap.put(ZkStateReader.BASE_URL_PROP, replica.getProperties().get(ZkStateReader.BASE_URL_PROP));\n    propMap.put(REJOIN_AT_HEAD_PROP, Boolean.toString(rejoinAtHead)); // Get ourselves to be first in line.\n    propMap.put(ELECTION_NODE_PROP, electionNode);\n    String asyncId = REBALANCELEADERS.toLower() + \"_\" + core + \"_\" + Math.abs(System.nanoTime());\n    propMap.put(ASYNC, asyncId);\n    collectionsHandler.sendToOCPQueue(new ZkNodeProps(propMap)); // ignore response; we construct our own\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["3cbd743a4843f513f793670e3ab0e272bf824faf","73fd358e8ec697393d56617f4d9cedaca74dca14"],"3cbd743a4843f513f793670e3ab0e272bf824faf":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"3cbd743a4843f513f793670e3ab0e272bf824faf":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}