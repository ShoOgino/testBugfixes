{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/CloudSolrStream#openStreams().mjava","commits":[{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/CloudSolrStream#openStreams().mjava","pathOld":"/dev/null","sourceNew":"  private void openStreams() throws IOException {\n    ExecutorService service = Executors.newCachedThreadPool(new SolrjNamedThreadFactory(\"CloudSolrStream\"));\n    List<Future<TupleWrapper>> futures = new ArrayList();\n    for(TupleStream solrStream : solrStreams) {\n      StreamOpener so = new StreamOpener((SolrStream)solrStream, comp);\n      Future<TupleWrapper> future =  service.submit(so);\n      futures.add(future);\n    }\n\n    try {\n      for(Future<TupleWrapper> f : futures) {\n        TupleWrapper w = f.get();\n        if(w != null) {\n          tuples.add(w);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    service.shutdown();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f03b407cd85abd6edd2a1fe7cab9990164aa4b","date":1427303865,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/CloudSolrStream#openStreams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/CloudSolrStream#openStreams().mjava","sourceNew":"  private void openStreams() throws IOException {\n    ExecutorService service = Executors.newCachedThreadPool(new SolrjNamedThreadFactory(\"CloudSolrStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n\n","sourceOld":"  private void openStreams() throws IOException {\n    ExecutorService service = Executors.newCachedThreadPool(new SolrjNamedThreadFactory(\"CloudSolrStream\"));\n    List<Future<TupleWrapper>> futures = new ArrayList();\n    for(TupleStream solrStream : solrStreams) {\n      StreamOpener so = new StreamOpener((SolrStream)solrStream, comp);\n      Future<TupleWrapper> future =  service.submit(so);\n      futures.add(future);\n    }\n\n    try {\n      for(Future<TupleWrapper> f : futures) {\n        TupleWrapper w = f.get();\n        if(w != null) {\n          tuples.add(w);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    service.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/CloudSolrStream#openStreams().mjava","pathOld":"/dev/null","sourceNew":"  private void openStreams() throws IOException {\n    ExecutorService service = Executors.newCachedThreadPool(new SolrjNamedThreadFactory(\"CloudSolrStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5af3afeddbb803fb785098176e6e177c34261b","date":1428905393,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/CloudSolrStream#openStreams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/CloudSolrStream#openStreams().mjava","sourceNew":"  private void openStreams() throws IOException {\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"CloudSolrStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n\n","sourceOld":"  private void openStreams() throws IOException {\n    ExecutorService service = Executors.newCachedThreadPool(new SolrjNamedThreadFactory(\"CloudSolrStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#openStreams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/CloudSolrStream#openStreams().mjava","sourceNew":"  private void openStreams() throws IOException {\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"CloudSolrStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n\n","sourceOld":"  private void openStreams() throws IOException {\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"CloudSolrStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["cb5af3afeddbb803fb785098176e6e177c34261b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["91814ce09be68efd0626969632e79ae47d8876d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91814ce09be68efd0626969632e79ae47d8876d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cb5af3afeddbb803fb785098176e6e177c34261b":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f00f1c5fad501b66705121feb623f8cfbb6712f9"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cb5af3afeddbb803fb785098176e6e177c34261b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","91814ce09be68efd0626969632e79ae47d8876d4"],"91814ce09be68efd0626969632e79ae47d8876d4":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"cb5af3afeddbb803fb785098176e6e177c34261b":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}