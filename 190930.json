{"path":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    return new Lucene40Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    return new Lucene40Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7424161ac990ef8f959f09ee516148e4d12c48bc","date":1336236796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene40Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    return new Lucene40Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"879f5e74b68e6faa45251db337bb1e1a9e9be647","date":1350008268,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene41Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene40Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene41Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene40Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene41Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene40Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","date":1358793943,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene42Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene41Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633","date":1359743129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene42Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene41Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene45Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene42Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene45Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene42Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene45Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene42Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene46Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene45Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":5,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#alwaysPostingsFormat(PostingsFormat).mjava","sourceNew":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene46Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","sourceOld":"  /** Return a Codec that can read any of the\n   *  default codecs and formats, but always writes in the specified\n   *  format. */\n  public static Codec alwaysPostingsFormat(final PostingsFormat format) {\n    // TODO: we really need for postings impls etc to announce themselves\n    // (and maybe their params, too) to infostream on flush and merge.\n    // otherwise in a real debugging situation we won't know whats going on!\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"forcing postings format to:\" + format);\n    }\n    return new Lucene46Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return format;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["8435160e9702b19398118ddf76b61c846612b6a4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"8435160e9702b19398118ddf76b61c846612b6a4":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["7424161ac990ef8f959f09ee516148e4d12c48bc","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633","11a746437bc5c0a0b3df0337ed249c387c812871"],"d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"879f5e74b68e6faa45251db337bb1e1a9e9be647":["7424161ac990ef8f959f09ee516148e4d12c48bc"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["7424161ac990ef8f959f09ee516148e4d12c48bc","879f5e74b68e6faa45251db337bb1e1a9e9be647"],"11a746437bc5c0a0b3df0337ed249c387c812871":["d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"7424161ac990ef8f959f09ee516148e4d12c48bc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7424161ac990ef8f959f09ee516148e4d12c48bc"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"8435160e9702b19398118ddf76b61c846612b6a4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","8435160e9702b19398118ddf76b61c846612b6a4"],"d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","11a746437bc5c0a0b3df0337ed249c387c812871"],"879f5e74b68e6faa45251db337bb1e1a9e9be647":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633","3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7424161ac990ef8f959f09ee516148e4d12c48bc":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","879f5e74b68e6faa45251db337bb1e1a9e9be647","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","db4fdbf3d262768eabc027cd8321edca0cd11fa8","3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}