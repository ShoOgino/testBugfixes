{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,Iterable[Number],Iterable[Number]).mjava","commits":[{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,Iterable[Number],Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addSortedNumericField(FieldInfo field, final Iterable<Number> docToValueCount, final Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;\n    doAddBinary(field, new Iterable<BytesRef>() {     \n      @Override\n      public Iterator<BytesRef> iterator() {\n        final StringBuilder builder = new StringBuilder();\n        final BytesRef scratch = new BytesRef();\n        final Iterator<Number> counts = docToValueCount.iterator();\n        final Iterator<Number> numbers = values.iterator();\n        \n        return new Iterator<BytesRef>() {\n\n          @Override\n          public boolean hasNext() {\n            return counts.hasNext();\n          }\n\n          @Override\n          public BytesRef next() {\n            builder.setLength(0);\n            long count = counts.next().longValue();\n            for (int i = 0; i < count; i++) {\n              if (i > 0) {\n                builder.append(',');\n              }\n              builder.append(Long.toString(numbers.next().longValue()));\n            }\n            scratch.copyChars(builder);\n            return scratch;\n          }\n\n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,Iterable[Number],Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addSortedNumericField(FieldInfo field, final Iterable<Number> docToValueCount, final Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;\n    doAddBinary(field, new Iterable<BytesRef>() {     \n      @Override\n      public Iterator<BytesRef> iterator() {\n        final StringBuilder builder = new StringBuilder();\n        final BytesRef scratch = new BytesRef();\n        final Iterator<Number> counts = docToValueCount.iterator();\n        final Iterator<Number> numbers = values.iterator();\n        \n        return new Iterator<BytesRef>() {\n\n          @Override\n          public boolean hasNext() {\n            return counts.hasNext();\n          }\n\n          @Override\n          public BytesRef next() {\n            builder.setLength(0);\n            long count = counts.next().longValue();\n            for (int i = 0; i < count; i++) {\n              if (i > 0) {\n                builder.append(',');\n              }\n              builder.append(Long.toString(numbers.next().longValue()));\n            }\n            scratch.copyChars(builder);\n            return scratch;\n          }\n\n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedNumericField(FieldInfo field, final Iterable<Number> docToValueCount, final Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;\n    doAddBinary(field, new Iterable<BytesRef>() {     \n      @Override\n      public Iterator<BytesRef> iterator() {\n        final StringBuilder builder = new StringBuilder();\n        final BytesRefBuilder scratch = new BytesRefBuilder();\n        final Iterator<Number> counts = docToValueCount.iterator();\n        final Iterator<Number> numbers = values.iterator();\n        \n        return new Iterator<BytesRef>() {\n\n          @Override\n          public boolean hasNext() {\n            return counts.hasNext();\n          }\n\n          @Override\n          public BytesRef next() {\n            builder.setLength(0);\n            long count = counts.next().longValue();\n            for (int i = 0; i < count; i++) {\n              if (i > 0) {\n                builder.append(',');\n              }\n              builder.append(Long.toString(numbers.next().longValue()));\n            }\n            scratch.copyChars(builder);\n            return scratch.get();\n          }\n\n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }\n    });\n  }\n\n","sourceOld":"  @Override\n  public void addSortedNumericField(FieldInfo field, final Iterable<Number> docToValueCount, final Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;\n    doAddBinary(field, new Iterable<BytesRef>() {     \n      @Override\n      public Iterator<BytesRef> iterator() {\n        final StringBuilder builder = new StringBuilder();\n        final BytesRef scratch = new BytesRef();\n        final Iterator<Number> counts = docToValueCount.iterator();\n        final Iterator<Number> numbers = values.iterator();\n        \n        return new Iterator<BytesRef>() {\n\n          @Override\n          public boolean hasNext() {\n            return counts.hasNext();\n          }\n\n          @Override\n          public BytesRef next() {\n            builder.setLength(0);\n            long count = counts.next().longValue();\n            for (int i = 0; i < count; i++) {\n              if (i > 0) {\n                builder.append(',');\n              }\n              builder.append(Long.toString(numbers.next().longValue()));\n            }\n            scratch.copyChars(builder);\n            return scratch;\n          }\n\n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }\n    });\n  }\n\n","bugFix":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,DocValuesProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedNumericField(FieldInfo field, final DocValuesProducer valuesProducer) throws IOException {\n\n    final Iterable<Number> docToValueCount = LegacyDocValuesIterables.sortedNumericToDocCount(valuesProducer, field, numDocs);\n    final Iterable<Number> values = LegacyDocValuesIterables.sortedNumericToValues(valuesProducer, field);\n\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;\n    doAddBinary(field, new Iterable<BytesRef>() {     \n      @Override\n      public Iterator<BytesRef> iterator() {\n        final StringBuilder builder = new StringBuilder();\n        final BytesRefBuilder scratch = new BytesRefBuilder();\n        final Iterator<Number> counts = docToValueCount.iterator();\n        final Iterator<Number> numbers = values.iterator();\n        \n        return new Iterator<BytesRef>() {\n\n          @Override\n          public boolean hasNext() {\n            return counts.hasNext();\n          }\n\n          @Override\n          public BytesRef next() {\n            builder.setLength(0);\n            long count = counts.next().longValue();\n            for (int i = 0; i < count; i++) {\n              if (i > 0) {\n                builder.append(',');\n              }\n              builder.append(Long.toString(numbers.next().longValue()));\n            }\n            scratch.copyChars(builder);\n            return scratch.get();\n          }\n\n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }\n    });\n  }\n\n","sourceOld":"  @Override\n  public void addSortedNumericField(FieldInfo field, final Iterable<Number> docToValueCount, final Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;\n    doAddBinary(field, new Iterable<BytesRef>() {     \n      @Override\n      public Iterator<BytesRef> iterator() {\n        final StringBuilder builder = new StringBuilder();\n        final BytesRefBuilder scratch = new BytesRefBuilder();\n        final Iterator<Number> counts = docToValueCount.iterator();\n        final Iterator<Number> numbers = values.iterator();\n        \n        return new Iterator<BytesRef>() {\n\n          @Override\n          public boolean hasNext() {\n            return counts.hasNext();\n          }\n\n          @Override\n          public BytesRef next() {\n            builder.setLength(0);\n            long count = counts.next().longValue();\n            for (int i = 0; i < count; i++) {\n              if (i > 0) {\n                builder.append(',');\n              }\n              builder.append(Long.toString(numbers.next().longValue()));\n            }\n            scratch.copyChars(builder);\n            return scratch.get();\n          }\n\n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,Iterable[Number],Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addSortedNumericField(FieldInfo field, final Iterable<Number> docToValueCount, final Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;\n    doAddBinary(field, new Iterable<BytesRef>() {     \n      @Override\n      public Iterator<BytesRef> iterator() {\n        final StringBuilder builder = new StringBuilder();\n        final BytesRefBuilder scratch = new BytesRefBuilder();\n        final Iterator<Number> counts = docToValueCount.iterator();\n        final Iterator<Number> numbers = values.iterator();\n        \n        return new Iterator<BytesRef>() {\n\n          @Override\n          public boolean hasNext() {\n            return counts.hasNext();\n          }\n\n          @Override\n          public BytesRef next() {\n            builder.setLength(0);\n            long count = counts.next().longValue();\n            for (int i = 0; i < count; i++) {\n              if (i > 0) {\n                builder.append(',');\n              }\n              builder.append(Long.toString(numbers.next().longValue()));\n            }\n            scratch.copyChars(builder);\n            return scratch.get();\n          }\n\n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedNumericField(FieldInfo,Iterable[Number],Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addSortedNumericField(FieldInfo field, final Iterable<Number> docToValueCount, final Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;\n    doAddBinary(field, new Iterable<BytesRef>() {     \n      @Override\n      public Iterator<BytesRef> iterator() {\n        final StringBuilder builder = new StringBuilder();\n        final BytesRefBuilder scratch = new BytesRefBuilder();\n        final Iterator<Number> counts = docToValueCount.iterator();\n        final Iterator<Number> numbers = values.iterator();\n        \n        return new Iterator<BytesRef>() {\n\n          @Override\n          public boolean hasNext() {\n            return counts.hasNext();\n          }\n\n          @Override\n          public BytesRef next() {\n            builder.setLength(0);\n            long count = counts.next().longValue();\n            for (int i = 0; i < count; i++) {\n              if (i > 0) {\n                builder.append(',');\n              }\n              builder.append(Long.toString(numbers.next().longValue()));\n            }\n            scratch.copyChars(builder);\n            return scratch.get();\n          }\n\n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}