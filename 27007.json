{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#insertionsOf(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#insertionsOf(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#insertionsOf(String).mjava","sourceNew":"  /**\n   * Return an automaton that accepts all 1-character insertions of s (inserting\n   * one character)\n   */\n  private Automaton insertionsOf(String s) {\n    List<Automaton> list = new ArrayList<Automaton>();\n    \n    for (int i = 0; i <= s.length(); i++) {\n      Automaton a = BasicAutomata.makeString(s.substring(0, i));\n      a = BasicOperations.concatenate(a, BasicAutomata.makeAnyChar());\n      a = BasicOperations.concatenate(a, BasicAutomata.makeString(s\n          .substring(i)));\n      list.add(a);\n    }\n    \n    Automaton a = BasicOperations.union(list);\n    MinimizationOperations.minimize(a);\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Return an automaton that accepts all 1-character insertions of s (inserting\n   * one character)\n   */\n  private Automaton insertionsOf(String s) {\n    List<Automaton> list = new ArrayList<Automaton>();\n    \n    for (int i = 0; i <= s.length(); i++) {\n      Automaton a = BasicAutomata.makeString(s.substring(0, i));\n      a = BasicOperations.concatenate(a, BasicAutomata.makeAnyChar());\n      a = BasicOperations.concatenate(a, BasicAutomata.makeString(s\n          .substring(i)));\n      list.add(a);\n    }\n    \n    Automaton a = BasicOperations.union(list);\n    MinimizationOperations.minimize(a);\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#insertionsOf(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#insertionsOf(String).mjava","sourceNew":"  /**\n   * Return an automaton that accepts all 1-character insertions of s (inserting\n   * one character)\n   */\n  private Automaton insertionsOf(String s) {\n    List<Automaton> list = new ArrayList<>();\n    \n    for (int i = 0; i <= s.length(); i++) {\n      Automaton a = BasicAutomata.makeString(s.substring(0, i));\n      a = BasicOperations.concatenate(a, BasicAutomata.makeAnyChar());\n      a = BasicOperations.concatenate(a, BasicAutomata.makeString(s\n          .substring(i)));\n      list.add(a);\n    }\n    \n    Automaton a = BasicOperations.union(list);\n    MinimizationOperations.minimize(a);\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Return an automaton that accepts all 1-character insertions of s (inserting\n   * one character)\n   */\n  private Automaton insertionsOf(String s) {\n    List<Automaton> list = new ArrayList<Automaton>();\n    \n    for (int i = 0; i <= s.length(); i++) {\n      Automaton a = BasicAutomata.makeString(s.substring(0, i));\n      a = BasicOperations.concatenate(a, BasicAutomata.makeAnyChar());\n      a = BasicOperations.concatenate(a, BasicAutomata.makeString(s\n          .substring(i)));\n      list.add(a);\n    }\n    \n    Automaton a = BasicOperations.union(list);\n    MinimizationOperations.minimize(a);\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2de8b489026711e8edde133418a7cacfd2ce4d3","date":1402528930,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#insertionsOf(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#insertionsOf(String).mjava","sourceNew":"  /**\n   * Return an automaton that accepts all 1-character insertions of s (inserting\n   * one character)\n   */\n  private LightAutomaton insertionsOf(String s) {\n    List<LightAutomaton> list = new ArrayList<>();\n    \n    for (int i = 0; i <= s.length(); i++) {\n      LightAutomaton a = BasicAutomata.makeStringLight(s.substring(0, i));\n      a = BasicOperations.concatenateLight(a, BasicAutomata.makeAnyCharLight());\n      a = BasicOperations.concatenateLight(a, BasicAutomata.makeStringLight(s.substring(i)));\n      list.add(a);\n    }\n    \n    LightAutomaton a = BasicOperations.unionLight(list);\n    a = MinimizationOperationsLight.minimize(a);\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Return an automaton that accepts all 1-character insertions of s (inserting\n   * one character)\n   */\n  private Automaton insertionsOf(String s) {\n    List<Automaton> list = new ArrayList<>();\n    \n    for (int i = 0; i <= s.length(); i++) {\n      Automaton a = BasicAutomata.makeString(s.substring(0, i));\n      a = BasicOperations.concatenate(a, BasicAutomata.makeAnyChar());\n      a = BasicOperations.concatenate(a, BasicAutomata.makeString(s\n          .substring(i)));\n      list.add(a);\n    }\n    \n    Automaton a = BasicOperations.union(list);\n    MinimizationOperations.minimize(a);\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#insertionsOf(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#insertionsOf(String).mjava","sourceNew":"  /**\n   * Return an automaton that accepts all 1-character insertions of s (inserting\n   * one character)\n   */\n  private Automaton insertionsOf(String s) {\n    List<Automaton> list = new ArrayList<>();\n    \n    for (int i = 0; i <= s.length(); i++) {\n      Automaton a = Automata.makeString(s.substring(0, i));\n      a = Operations.concatenate(a, Automata.makeAnyChar());\n      a = Operations.concatenate(a, Automata.makeString(s.substring(i)));\n      list.add(a);\n    }\n    \n    Automaton a = Operations.union(list);\n    a = MinimizationOperations.minimize(a);\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Return an automaton that accepts all 1-character insertions of s (inserting\n   * one character)\n   */\n  private LightAutomaton insertionsOf(String s) {\n    List<LightAutomaton> list = new ArrayList<>();\n    \n    for (int i = 0; i <= s.length(); i++) {\n      LightAutomaton a = BasicAutomata.makeStringLight(s.substring(0, i));\n      a = BasicOperations.concatenateLight(a, BasicAutomata.makeAnyCharLight());\n      a = BasicOperations.concatenateLight(a, BasicAutomata.makeStringLight(s.substring(i)));\n      list.add(a);\n    }\n    \n    LightAutomaton a = BasicOperations.unionLight(list);\n    a = MinimizationOperationsLight.minimize(a);\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#insertionsOf(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#insertionsOf(String).mjava","sourceNew":"  /**\n   * Return an automaton that accepts all 1-character insertions of s (inserting\n   * one character)\n   */\n  private Automaton insertionsOf(String s) {\n    List<Automaton> list = new ArrayList<>();\n    \n    for (int i = 0; i <= s.length(); i++) {\n      Automaton a = Automata.makeString(s.substring(0, i));\n      a = Operations.concatenate(a, Automata.makeAnyChar());\n      a = Operations.concatenate(a, Automata.makeString(s.substring(i)));\n      list.add(a);\n    }\n    \n    Automaton a = Operations.union(list);\n    a = MinimizationOperations.minimize(a);\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Return an automaton that accepts all 1-character insertions of s (inserting\n   * one character)\n   */\n  private Automaton insertionsOf(String s) {\n    List<Automaton> list = new ArrayList<>();\n    \n    for (int i = 0; i <= s.length(); i++) {\n      Automaton a = BasicAutomata.makeString(s.substring(0, i));\n      a = BasicOperations.concatenate(a, BasicAutomata.makeAnyChar());\n      a = BasicOperations.concatenate(a, BasicAutomata.makeString(s\n          .substring(i)));\n      list.add(a);\n    }\n    \n    Automaton a = BasicOperations.union(list);\n    MinimizationOperations.minimize(a);\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#insertionsOf(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#insertionsOf(String).mjava","sourceNew":"  /**\n   * Return an automaton that accepts all 1-character insertions of s (inserting\n   * one character)\n   */\n  private Automaton insertionsOf(String s) {\n    List<Automaton> list = new ArrayList<>();\n    \n    for (int i = 0; i <= s.length(); i++) {\n      Automaton a = Automata.makeString(s.substring(0, i));\n      a = Operations.concatenate(a, Automata.makeAnyChar());\n      a = Operations.concatenate(a, Automata.makeString(s.substring(i)));\n      list.add(a);\n    }\n    \n    Automaton a = Operations.union(list);\n    a = MinimizationOperations.minimize(a, DEFAULT_MAX_DETERMINIZED_STATES);\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Return an automaton that accepts all 1-character insertions of s (inserting\n   * one character)\n   */\n  private Automaton insertionsOf(String s) {\n    List<Automaton> list = new ArrayList<>();\n    \n    for (int i = 0; i <= s.length(); i++) {\n      Automaton a = Automata.makeString(s.substring(0, i));\n      a = Operations.concatenate(a, Automata.makeAnyChar());\n      a = Operations.concatenate(a, Automata.makeString(s.substring(i)));\n      list.add(a);\n    }\n    \n    Automaton a = Operations.union(list);\n    a = MinimizationOperations.minimize(a);\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a2de8b489026711e8edde133418a7cacfd2ce4d3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a2de8b489026711e8edde133418a7cacfd2ce4d3"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a2de8b489026711e8edde133418a7cacfd2ce4d3","5c84485629d80d203608e8975a1139de9933cc38"],"a2de8b489026711e8edde133418a7cacfd2ce4d3":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}