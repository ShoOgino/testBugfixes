{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","sourceNew":"    @Override\n    public FieldsEnum iterator() throws IOException {\n\n      return new FieldsEnum() {\n        private int fieldUpto;\n\n        @Override\n        public String next() throws IOException {\n          if (fieldNumbers != null && fieldUpto < fieldNumbers.length) {\n            return fieldInfos.fieldName(fieldNumbers[fieldUpto++]);\n          } else {\n            return null;\n          }\n        }\n\n        @Override\n        public Terms terms() throws IOException {\n          return TVFields.this.terms(fieldInfos.fieldName(fieldNumbers[fieldUpto-1]));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FieldsEnum iterator() throws IOException {\n\n      return new FieldsEnum() {\n        private int fieldUpto;\n\n        @Override\n        public String next() throws IOException {\n          if (fieldNumbers != null && fieldUpto < fieldNumbers.length) {\n            return fieldInfos.fieldName(fieldNumbers[fieldUpto++]);\n          } else {\n            return null;\n          }\n        }\n\n        @Override\n        public Terms terms() throws IOException {\n          return TVFields.this.terms(fieldInfos.fieldName(fieldNumbers[fieldUpto-1]));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c22d44fa0ab988ba3253471cce23610e45a91052","date":1337131019,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","sourceNew":"    @Override\n    public FieldsEnum iterator() throws IOException {\n\n      return new FieldsEnum() {\n        private int fieldUpto;\n\n        @Override\n        public String next() throws IOException {\n          if (fieldNumbers != null && fieldUpto < fieldNumbers.length) {\n            return fieldInfos.fieldInfo(fieldNumbers[fieldUpto++]).name;\n          } else {\n            return null;\n          }\n        }\n\n        @Override\n        public Terms terms() throws IOException {\n          return TVFields.this.terms(fieldInfos.fieldInfo(fieldNumbers[fieldUpto-1]).name);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FieldsEnum iterator() throws IOException {\n\n      return new FieldsEnum() {\n        private int fieldUpto;\n\n        @Override\n        public String next() throws IOException {\n          if (fieldNumbers != null && fieldUpto < fieldNumbers.length) {\n            return fieldInfos.fieldName(fieldNumbers[fieldUpto++]);\n          } else {\n            return null;\n          }\n        }\n\n        @Override\n        public Terms terms() throws IOException {\n          return TVFields.this.terms(fieldInfos.fieldName(fieldNumbers[fieldUpto-1]));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","sourceNew":"    @Override\n    public FieldsEnum iterator() throws IOException {\n\n      return new FieldsEnum() {\n        private int fieldUpto;\n\n        @Override\n        public String next() throws IOException {\n          if (fieldNumbers != null && fieldUpto < fieldNumbers.length) {\n            return fieldInfos.fieldInfo(fieldNumbers[fieldUpto++]).name;\n          } else {\n            return null;\n          }\n        }\n\n        @Override\n        public Terms terms() throws IOException {\n          return TVFields.this.terms(fieldInfos.fieldInfo(fieldNumbers[fieldUpto-1]).name);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FieldsEnum iterator() throws IOException {\n\n      return new FieldsEnum() {\n        private int fieldUpto;\n\n        @Override\n        public String next() throws IOException {\n          if (fieldNumbers != null && fieldUpto < fieldNumbers.length) {\n            return fieldInfos.fieldName(fieldNumbers[fieldUpto++]);\n          } else {\n            return null;\n          }\n        }\n\n        @Override\n        public Terms terms() throws IOException {\n          return TVFields.this.terms(fieldInfos.fieldName(fieldNumbers[fieldUpto-1]));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","sourceNew":"    @Override\n    public FieldsEnum iterator() throws IOException {\n\n      return new FieldsEnum() {\n        private int fieldUpto;\n\n        @Override\n        public String next() {\n          if (fieldNumbers != null && fieldUpto < fieldNumbers.length) {\n            return fieldInfos.fieldInfo(fieldNumbers[fieldUpto++]).name;\n          } else {\n            return null;\n          }\n        }\n\n        @Override\n        public Terms terms() throws IOException {\n          return TVFields.this.terms(fieldInfos.fieldInfo(fieldNumbers[fieldUpto-1]).name);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FieldsEnum iterator() throws IOException {\n\n      return new FieldsEnum() {\n        private int fieldUpto;\n\n        @Override\n        public String next() throws IOException {\n          if (fieldNumbers != null && fieldUpto < fieldNumbers.length) {\n            return fieldInfos.fieldInfo(fieldNumbers[fieldUpto++]).name;\n          } else {\n            return null;\n          }\n        }\n\n        @Override\n        public Terms terms() throws IOException {\n          return TVFields.this.terms(fieldInfos.fieldInfo(fieldNumbers[fieldUpto-1]).name);\n        }\n      };\n    }\n\n","bugFix":["3cc749c053615f5871f3b95715fe292f34e70a53"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","sourceNew":"    @Override\n    public FieldsEnum iterator() throws IOException {\n\n      return new FieldsEnum() {\n        private int fieldUpto;\n\n        @Override\n        public String next() {\n          if (fieldNumbers != null && fieldUpto < fieldNumbers.length) {\n            return fieldInfos.fieldInfo(fieldNumbers[fieldUpto++]).name;\n          } else {\n            return null;\n          }\n        }\n\n        @Override\n        public Terms terms() throws IOException {\n          return TVFields.this.terms(fieldInfos.fieldInfo(fieldNumbers[fieldUpto-1]).name);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FieldsEnum iterator() throws IOException {\n\n      return new FieldsEnum() {\n        private int fieldUpto;\n\n        @Override\n        public String next() throws IOException {\n          if (fieldNumbers != null && fieldUpto < fieldNumbers.length) {\n            return fieldInfos.fieldInfo(fieldNumbers[fieldUpto++]).name;\n          } else {\n            return null;\n          }\n        }\n\n        @Override\n        public Terms terms() throws IOException {\n          return TVFields.this.terms(fieldInfos.fieldInfo(fieldNumbers[fieldUpto-1]).name);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","sourceNew":"    @Override\n    public Iterator<String> iterator() {\n      return new Iterator<String>() {\n        private int fieldUpto;\n\n        @Override\n        public String next() {\n          if (fieldNumbers != null && fieldUpto < fieldNumbers.length) {\n            return fieldInfos.fieldInfo(fieldNumbers[fieldUpto++]).name;\n          } else {\n            throw new NoSuchElementException();\n          }\n        }\n\n        @Override\n        public boolean hasNext() {\n          return fieldNumbers != null && fieldUpto < fieldNumbers.length;\n        }\n\n        @Override\n        public void remove() {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FieldsEnum iterator() throws IOException {\n\n      return new FieldsEnum() {\n        private int fieldUpto;\n\n        @Override\n        public String next() {\n          if (fieldNumbers != null && fieldUpto < fieldNumbers.length) {\n            return fieldInfos.fieldInfo(fieldNumbers[fieldUpto++]).name;\n          } else {\n            return null;\n          }\n        }\n\n        @Override\n        public Terms terms() throws IOException {\n          return TVFields.this.terms(fieldInfos.fieldInfo(fieldNumbers[fieldUpto-1]).name);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","sourceNew":"    @Override\n    public Iterator<String> iterator() {\n      return new Iterator<String>() {\n        private int fieldUpto;\n\n        @Override\n        public String next() {\n          if (fieldNumbers != null && fieldUpto < fieldNumbers.length) {\n            return fieldInfos.fieldInfo(fieldNumbers[fieldUpto++]).name;\n          } else {\n            throw new NoSuchElementException();\n          }\n        }\n\n        @Override\n        public boolean hasNext() {\n          return fieldNumbers != null && fieldUpto < fieldNumbers.length;\n        }\n\n        @Override\n        public void remove() {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FieldsEnum iterator() throws IOException {\n\n      return new FieldsEnum() {\n        private int fieldUpto;\n\n        @Override\n        public String next() {\n          if (fieldNumbers != null && fieldUpto < fieldNumbers.length) {\n            return fieldInfos.fieldInfo(fieldNumbers[fieldUpto++]).name;\n          } else {\n            return null;\n          }\n        }\n\n        @Override\n        public Terms terms() throws IOException {\n          return TVFields.this.terms(fieldInfos.fieldInfo(fieldNumbers[fieldUpto-1]).name);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","sourceNew":"    @Override\n    public Iterator<String> iterator() {\n      return new Iterator<String>() {\n        private int fieldUpto;\n\n        @Override\n        public String next() {\n          if (fieldNumbers != null && fieldUpto < fieldNumbers.length) {\n            return fieldInfos.fieldInfo(fieldNumbers[fieldUpto++]).name;\n          } else {\n            throw new NoSuchElementException();\n          }\n        }\n\n        @Override\n        public boolean hasNext() {\n          return fieldNumbers != null && fieldUpto < fieldNumbers.length;\n        }\n\n        @Override\n        public void remove() {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FieldsEnum iterator() throws IOException {\n\n      return new FieldsEnum() {\n        private int fieldUpto;\n\n        @Override\n        public String next() {\n          if (fieldNumbers != null && fieldUpto < fieldNumbers.length) {\n            return fieldInfos.fieldInfo(fieldNumbers[fieldUpto++]).name;\n          } else {\n            return null;\n          }\n        }\n\n        @Override\n        public Terms terms() throws IOException {\n          return TVFields.this.terms(fieldInfos.fieldInfo(fieldNumbers[fieldUpto-1]).name);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","sourceNew":"    @Override\n    public Iterator<String> iterator() {\n      return new Iterator<String>() {\n        private int fieldUpto;\n\n        @Override\n        public String next() {\n          if (fieldNumbers != null && fieldUpto < fieldNumbers.length) {\n            return fieldInfos.fieldInfo(fieldNumbers[fieldUpto++]).name;\n          } else {\n            throw new NoSuchElementException();\n          }\n        }\n\n        @Override\n        public boolean hasNext() {\n          return fieldNumbers != null && fieldUpto < fieldNumbers.length;\n        }\n\n        @Override\n        public void remove() {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Iterator<String> iterator() {\n      return new Iterator<String>() {\n        private int fieldUpto;\n\n        @Override\n        public String next() {\n          if (fieldNumbers != null && fieldUpto < fieldNumbers.length) {\n            return fieldInfos.fieldInfo(fieldNumbers[fieldUpto++]).name;\n          } else {\n            throw new NoSuchElementException();\n          }\n        }\n\n        @Override\n        public boolean hasNext() {\n          return fieldNumbers != null && fieldUpto < fieldNumbers.length;\n        }\n\n        @Override\n        public void remove() {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVFields#iterator().mjava","sourceNew":"    @Override\n    public Iterator<String> iterator() {\n      return new Iterator<String>() {\n        private int fieldUpto;\n\n        @Override\n        public String next() {\n          if (fieldNumbers != null && fieldUpto < fieldNumbers.length) {\n            return fieldInfos.fieldInfo(fieldNumbers[fieldUpto++]).name;\n          } else {\n            throw new NoSuchElementException();\n          }\n        }\n\n        @Override\n        public boolean hasNext() {\n          return fieldNumbers != null && fieldUpto < fieldNumbers.length;\n        }\n\n        @Override\n        public void remove() {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Iterator<String> iterator() {\n      return new Iterator<String>() {\n        private int fieldUpto;\n\n        @Override\n        public String next() {\n          if (fieldNumbers != null && fieldUpto < fieldNumbers.length) {\n            return fieldInfos.fieldInfo(fieldNumbers[fieldUpto++]).name;\n          } else {\n            throw new NoSuchElementException();\n          }\n        }\n\n        @Override\n        public boolean hasNext() {\n          return fieldNumbers != null && fieldUpto < fieldNumbers.length;\n        }\n\n        @Override\n        public void remove() {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","c22d44fa0ab988ba3253471cce23610e45a91052"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"c22d44fa0ab988ba3253471cce23610e45a91052":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["fb07ab105350b80ed9d63ca64b117084ed7391bc","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","c22d44fa0ab988ba3253471cce23610e45a91052"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["c7869f64c874ebf7f317d22c00baf2b6857797a6","4cc45c615dbb82bf79d5f9550286098367874fbf","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","fb07ab105350b80ed9d63ca64b117084ed7391bc","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"c22d44fa0ab988ba3253471cce23610e45a91052":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}