{"path":"src/java/org/apache/solr/util/BitUtil#ntz(long).mjava","commits":[{"id":"21400778a0bf704d187a4848279049f5d90276c8","date":1149955512,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/BitUtil#ntz(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns number of trailing zeros in the 64 bit long value. */\n  public static int ntz(long val) {\n    // A full binary search to determine the low byte was slower than\n    // a linear search for nextSetBit().  This is most likely because\n    // the implementation of nextSetBit() shifts bits to the right, increasing\n    // the probability that the first non-zero byte is in the rhs.\n    //\n    // This implementation does a single binary search at the top level only\n    // so that all other bit shifting can be done on ints instead of longs to\n    // remain friendly to 32 bit architectures.  In addition, the case of a\n    // non-zero first byte is checked for first because it is the most common\n    // in dense bit arrays.\n\n    int lower = (int)val;\n    int lowByte = lower & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte];\n\n    if (lower!=0) {\n      lowByte = (lower>>>8) & 0xff;\n      if (lowByte != 0) return ntzTable[lowByte] + 8;\n      lowByte = (lower>>>16) & 0xff;\n      if (lowByte != 0) return ntzTable[lowByte] + 16;\n      // no need to mask off low byte for the last byte in the 32 bit word\n      // no need to check for zero on the last byte either.\n      return ntzTable[lower>>>24] + 24;\n    } else {\n      // grab upper 32 bits\n      int upper=(int)(val>>32);\n      lowByte = upper & 0xff;\n      if (lowByte != 0) return ntzTable[lowByte] + 32;\n      lowByte = (upper>>>8) & 0xff;\n      if (lowByte != 0) return ntzTable[lowByte] + 40;\n      lowByte = (upper>>>16) & 0xff;\n      if (lowByte != 0) return ntzTable[lowByte] + 48;\n      // no need to mask off low byte for the last byte in the 32 bit word\n      // no need to check for zero on the last byte either.\n      return ntzTable[upper>>>24] + 56;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5108097d840f85a1779a41d0e412efb8130546e6","date":1228575321,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/util/BitUtil#ntz(long).mjava","sourceNew":null,"sourceOld":"  /** Returns number of trailing zeros in the 64 bit long value. */\n  public static int ntz(long val) {\n    // A full binary search to determine the low byte was slower than\n    // a linear search for nextSetBit().  This is most likely because\n    // the implementation of nextSetBit() shifts bits to the right, increasing\n    // the probability that the first non-zero byte is in the rhs.\n    //\n    // This implementation does a single binary search at the top level only\n    // so that all other bit shifting can be done on ints instead of longs to\n    // remain friendly to 32 bit architectures.  In addition, the case of a\n    // non-zero first byte is checked for first because it is the most common\n    // in dense bit arrays.\n\n    int lower = (int)val;\n    int lowByte = lower & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte];\n\n    if (lower!=0) {\n      lowByte = (lower>>>8) & 0xff;\n      if (lowByte != 0) return ntzTable[lowByte] + 8;\n      lowByte = (lower>>>16) & 0xff;\n      if (lowByte != 0) return ntzTable[lowByte] + 16;\n      // no need to mask off low byte for the last byte in the 32 bit word\n      // no need to check for zero on the last byte either.\n      return ntzTable[lower>>>24] + 24;\n    } else {\n      // grab upper 32 bits\n      int upper=(int)(val>>32);\n      lowByte = upper & 0xff;\n      if (lowByte != 0) return ntzTable[lowByte] + 32;\n      lowByte = (upper>>>8) & 0xff;\n      if (lowByte != 0) return ntzTable[lowByte] + 40;\n      lowByte = (upper>>>16) & 0xff;\n      if (lowByte != 0) return ntzTable[lowByte] + 48;\n      // no need to mask off low byte for the last byte in the 32 bit word\n      // no need to check for zero on the last byte either.\n      return ntzTable[upper>>>24] + 56;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21400778a0bf704d187a4848279049f5d90276c8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5108097d840f85a1779a41d0e412efb8130546e6":["21400778a0bf704d187a4848279049f5d90276c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"21400778a0bf704d187a4848279049f5d90276c8":["5108097d840f85a1779a41d0e412efb8130546e6"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["21400778a0bf704d187a4848279049f5d90276c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5108097d840f85a1779a41d0e412efb8130546e6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5108097d840f85a1779a41d0e412efb8130546e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}