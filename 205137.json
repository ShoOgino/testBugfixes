{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link ElisionFilter},\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(source);\n      result = new ElisionFilter(matchVersion, result);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.FrenchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new FrenchStemFilter(result);\n      // Convert to lowercase after stemming!\n      return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link ElisionFilter},\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(source);\n      result = new ElisionFilter(matchVersion, result);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.FrenchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new FrenchStemFilter(result);\n      // Convert to lowercase after stemming!\n      return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link ElisionFilter},\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(source);\n      result = new ElisionFilter(matchVersion, result);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.FrenchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new FrenchStemFilter(result);\n      // Convert to lowercase after stemming!\n      return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link ElisionFilter},\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(source);\n      result = new ElisionFilter(matchVersion, result);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.FrenchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new FrenchStemFilter(result);\n      // Convert to lowercase after stemming!\n      return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683d3f90dda2bbb999c3ce855706d74563a53680","date":1285654576,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link ElisionFilter},\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new ElisionFilter(matchVersion, result);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.FrenchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new FrenchStemFilter(result);\n      // Convert to lowercase after stemming!\n      return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link ElisionFilter},\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(source);\n      result = new ElisionFilter(matchVersion, result);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.FrenchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new FrenchStemFilter(result);\n      // Convert to lowercase after stemming!\n      return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link ElisionFilter},\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new ElisionFilter(matchVersion, result);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.FrenchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new FrenchStemFilter(result);\n      // Convert to lowercase after stemming!\n      return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link ElisionFilter},\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new ElisionFilter(matchVersion, result);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.FrenchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new FrenchStemFilter(result);\n      // Convert to lowercase after stemming!\n      return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link ElisionFilter},\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new ElisionFilter(matchVersion, result);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.FrenchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new FrenchStemFilter(result);\n      // Convert to lowercase after stemming!\n      return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link ElisionFilter},\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new ElisionFilter(matchVersion, result);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.FrenchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new FrenchStemFilter(result);\n      // Convert to lowercase after stemming!\n      return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link ElisionFilter},\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new ElisionFilter(matchVersion, result);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.FrenchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new FrenchStemFilter(result);\n      // Convert to lowercase after stemming!\n      return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link ElisionFilter},\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(source);\n      result = new ElisionFilter(matchVersion, result);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.FrenchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new FrenchStemFilter(result);\n      // Convert to lowercase after stemming!\n      return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8f1fd760e2a7a87de661158ca069c8dacab8360","date":1313992891,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link ElisionFilter},\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new ElisionFilter(matchVersion, result);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.FrenchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new FrenchStemFilter(result);\n      // Convert to lowercase after stemming!\n      return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link ElisionFilter},\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new ElisionFilter(matchVersion, result);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.FrenchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new FrenchStemFilter(result);\n      // Convert to lowercase after stemming!\n      return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link ElisionFilter},\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new ElisionFilter(matchVersion, result);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.FrenchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new FrenchStemFilter(result);\n      // Convert to lowercase after stemming!\n      return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link ElisionFilter},\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new ElisionFilter(matchVersion, result);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.FrenchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new FrenchStemFilter(result);\n      // Convert to lowercase after stemming!\n      return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56d47f1eb3c3b8adc62b915f0609e62634a9c9e8","date":1328702872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link ElisionFilter},\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided, and {@link FrenchLightStemFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new ElisionFilter(matchVersion, result);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      if (matchVersion.onOrAfter(Version.LUCENE_36)) {\n        result = new FrenchLightStemFilter(result);\n      } else {\n        result = new SnowballFilter(result, new org.tartarus.snowball.ext.FrenchStemmer());\n      }\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new FrenchStemFilter(result);\n      // Convert to lowercase after stemming!\n      return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link ElisionFilter},\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided, and {@link SnowballFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new ElisionFilter(matchVersion, result);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new SnowballFilter(result, new org.tartarus.snowball.ext.FrenchStemmer());\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new FrenchStemFilter(result);\n      // Convert to lowercase after stemming!\n      return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link ElisionFilter},\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided, and {@link FrenchLightStemFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new ElisionFilter(matchVersion, result);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      if (matchVersion.onOrAfter(Version.LUCENE_36)) {\n        result = new FrenchLightStemFilter(result);\n      } else {\n        result = new SnowballFilter(result, new org.tartarus.snowball.ext.FrenchStemmer());\n      }\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new FrenchStemFilter(result);\n      // Convert to lowercase after stemming!\n      return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link ElisionFilter},\n   *         {@link LowerCaseFilter}, {@link StopFilter},\n   *         {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided, and {@link FrenchLightStemFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new ElisionFilter(matchVersion, result);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      if (matchVersion.onOrAfter(Version.LUCENE_36)) {\n        result = new FrenchLightStemFilter(result);\n      } else {\n        result = new SnowballFilter(result, new org.tartarus.snowball.ext.FrenchStemmer());\n      }\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!excltable.isEmpty())\n        result = new KeywordMarkerFilter(result, excltable);\n      result = new FrenchStemFilter(result);\n      // Convert to lowercase after stemming!\n      return new TokenStreamComponents(source, new LowerCaseFilter(matchVersion, result));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["56d47f1eb3c3b8adc62b915f0609e62634a9c9e8"],"56d47f1eb3c3b8adc62b915f0609e62634a9c9e8":["2f49143da0a5d278a72f741432047fcfa6da996e"],"683d3f90dda2bbb999c3ce855706d74563a53680":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f49143da0a5d278a72f741432047fcfa6da996e":["b8f1fd760e2a7a87de661158ca069c8dacab8360"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"b8f1fd760e2a7a87de661158ca069c8dacab8360":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["683d3f90dda2bbb999c3ce855706d74563a53680","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["683d3f90dda2bbb999c3ce855706d74563a53680"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56d47f1eb3c3b8adc62b915f0609e62634a9c9e8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"683d3f90dda2bbb999c3ce855706d74563a53680":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"2f49143da0a5d278a72f741432047fcfa6da996e":["56d47f1eb3c3b8adc62b915f0609e62634a9c9e8"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b8f1fd760e2a7a87de661158ca069c8dacab8360":["2f49143da0a5d278a72f741432047fcfa6da996e"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["683d3f90dda2bbb999c3ce855706d74563a53680","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b8f1fd760e2a7a87de661158ca069c8dacab8360","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}