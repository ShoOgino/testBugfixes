{"path":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","commits":[{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","pathOld":"/dev/null","sourceNew":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertTrue(e.getMessage().contains(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      class Fetcher implements Callable {\n        String url;\n        JettySolrRunner jetty;\n        Fetcher(String s, JettySolrRunner jettySolrRunner){\n          this.url = s;\n          this.jetty = jettySolrRunner;\n        }\n        @Override\n        public NavigableObject call() throws Exception {\n          try (HttpSolrClient solrClient = (HttpSolrClient) jetty.newClient()) {\n            return (NavigableObject) Utils.executeGET(solrClient.getHttpClient(), this.url, JAVABINCONSUMER);\n          }\n        }\n\n        @Override\n        public String toString() {\n          return url;\n        }\n\n      }\n\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0/runtimelibs.jar?wt=javabin&meta=true\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n        try (HttpSolrClient solrClient = (HttpSolrClient) jettySolrRunner.newClient()) {\n          ByteBuffer buf = Utils.executeGET(solrClient.getHttpClient(), baseUrl + \"/node/files/package/mypkg/v1.0/runtimelibs.jar\",\n              Utils.newBytesConsumer(Integer.MAX_VALUE));\n          assertEquals(\n              \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              DigestUtils.sha512Hex(new ByteBufferInputStream(buf))\n          );\n\n        }\n\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            List l = (List) o;\n            assertEquals(2, l.size());\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d218decf811b7a0a4d86218c54c79c74a962374b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"849dbf8570155b8e5fd03d8c2274a0a60491051c","date":1570859954,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","pathOld":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","sourceNew":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertTrue(e.getMessage().contains(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            List l = (List) o;\n            assertEquals(2, l.size());\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertTrue(e.getMessage().contains(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      class Fetcher implements Callable {\n        String url;\n        JettySolrRunner jetty;\n        Fetcher(String s, JettySolrRunner jettySolrRunner){\n          this.url = s;\n          this.jetty = jettySolrRunner;\n        }\n        @Override\n        public NavigableObject call() throws Exception {\n          try (HttpSolrClient solrClient = (HttpSolrClient) jetty.newClient()) {\n            return (NavigableObject) Utils.executeGET(solrClient.getHttpClient(), this.url, JAVABINCONSUMER);\n          }\n        }\n\n        @Override\n        public String toString() {\n          return url;\n        }\n\n      }\n\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0/runtimelibs.jar?wt=javabin&meta=true\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n        try (HttpSolrClient solrClient = (HttpSolrClient) jettySolrRunner.newClient()) {\n          ByteBuffer buf = Utils.executeGET(solrClient.getHttpClient(), baseUrl + \"/node/files/package/mypkg/v1.0/runtimelibs.jar\",\n              Utils.newBytesConsumer(Integer.MAX_VALUE));\n          assertEquals(\n              \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              DigestUtils.sha512Hex(new ByteBufferInputStream(buf))\n          );\n\n        }\n\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            List l = (List) o;\n            assertEquals(2, l.size());\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","pathOld":"/dev/null","sourceNew":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertTrue(e.getMessage().contains(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            List l = (List) o;\n            assertEquals(2, l.size());\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89b9d540812dfb991cad1cd713cf271ec08892c","date":1576443873,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","pathOld":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","sourceNew":"  public void testPackageStoreManagement() throws Exception {\n    System.setProperty(\"enable.packages\", \"true\");\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertTrue(e.getMessage().contains(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            List l = (List) o;\n            assertEquals(2, l.size());\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertTrue(e.getMessage().contains(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            List l = (List) o;\n            assertEquals(2, l.size());\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06595b0c22c7d3075c4104d3820cccf95d9d8a43","date":1576491645,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","pathOld":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","sourceNew":"  public void testPackageStoreManagement() throws Exception {\n    System.setProperty(\"enable.packages\", \"true\");\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertTrue(e.getMessage().contains(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            List l = (List) o;\n            assertEquals(2, l.size());\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertTrue(e.getMessage().contains(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            List l = (List) o;\n            assertEquals(2, l.size());\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4a9d755535ef8154bc3ac90a6c963e91d44b71c","date":1576507807,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","pathOld":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","sourceNew":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertTrue(e.getMessage().contains(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            List l = (List) o;\n            assertEquals(2, l.size());\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testPackageStoreManagement() throws Exception {\n    System.setProperty(\"enable.packages\", \"true\");\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertTrue(e.getMessage().contains(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            List l = (List) o;\n            assertEquals(2, l.size());\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","pathOld":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","sourceNew":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertTrue(e.getMessage().contains(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            List l = (List) o;\n            assertEquals(2, l.size());\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testPackageStoreManagement() throws Exception {\n    System.setProperty(\"enable.packages\", \"true\");\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertTrue(e.getMessage().contains(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            List l = (List) o;\n            assertEquals(2, l.size());\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d218decf811b7a0a4d86218c54c79c74a962374b","date":1578632144,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","pathOld":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","sourceNew":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n//      cluster.getZkClient().makePath(\"/keys/exe\", true);\n//      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertTrue(e.getMessage().contains(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            List l = (List) o;\n            assertEquals(2, l.size());\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertTrue(e.getMessage().contains(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            List l = (List) o;\n            assertEquals(2, l.size());\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","bugFix":["8476949555f799dff381770c01cfad051a264487"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8f0a7504661c8e51be5c63e87f9d79a36d9116c","date":1578657638,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","pathOld":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","sourceNew":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n//      cluster.getZkClient().makePath(\"/keys/exe\", true);\n//      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertTrue(e.getMessage().contains(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            List l = (List) o;\n            assertEquals(2, l.size());\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertTrue(e.getMessage().contains(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            List l = (List) o;\n            assertEquals(2, l.size());\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b409047f69fb85704c506753bc23a37d7ad37b54","date":1582574830,"type":3,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","pathOld":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","sourceNew":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n//      cluster.getZkClient().makePath(\"/keys/exe\", true);\n//      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertThat(e.getMessage(), containsString(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            List l = (List) o;\n            assertEquals(2, l.size());\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n//      cluster.getZkClient().makePath(\"/keys/exe\", true);\n//      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertTrue(e.getMessage().contains(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            List l = (List) o;\n            assertEquals(2, l.size());\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","pathOld":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n//      cluster.getZkClient().makePath(\"/keys/exe\", true);\n//      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertThat(e.getMessage(), containsString(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            @SuppressWarnings({\"rawtypes\"})\n            List l = (List) o;\n            assertEquals(2, l.size());\n            @SuppressWarnings({\"rawtypes\"})\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n//      cluster.getZkClient().makePath(\"/keys/exe\", true);\n//      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertThat(e.getMessage(), containsString(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            List l = (List) o;\n            assertEquals(2, l.size());\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64ec73f19361ec6354e55c878a349735fa8bc52e","date":1596183798,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","pathOld":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#testPackageStoreManagement().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n//      cluster.getZkClient().makePath(\"/keys/exe\", true);\n//      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertThat(e.getMessage(), containsString(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            @SuppressWarnings({\"rawtypes\"})\n            List l = (List) o;\n            assertEquals(2, l.size());\n            @SuppressWarnings({\"rawtypes\"})\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n      }\n      // Delete Jars\n      DistribPackageStore.deleteZKFileEntry(cluster.getZkClient(), \"/package/mypkg/v1.0/runtimelibs.jar\");\n      JettySolrRunner j = cluster.getRandomJetty(random());\n      String path = j.getBaseURLV2() + \"/cluster/files\" + \"/package/mypkg/v1.0/runtimelibs.jar\";\n      HttpDelete del = new HttpDelete(path);\n      try(HttpSolrClient cl = (HttpSolrClient) j.newClient()) {\n        Utils.executeHttpMethod(cl.getHttpClient(), path, Utils.JSONCONSUMER, del);\n      }\n      expected = Collections.singletonMap(\":files:/package/mypkg/v1.0/runtimelibs.jar\", null);\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, false);\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n//      cluster.getZkClient().makePath(\"/keys/exe\", true);\n//      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertThat(e.getMessage(), containsString(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            @SuppressWarnings({\"rawtypes\"})\n            List l = (List) o;\n            assertEquals(2, l.size());\n            @SuppressWarnings({\"rawtypes\"})\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":["b945b8f5bba0303382bc69d60c0c287714f23328","d218decf811b7a0a4d86218c54c79c74a962374b"],"64ec73f19361ec6354e55c878a349735fa8bc52e":["e98520789adb1d5ad05afb4956eca0944a929688"],"a4a9d755535ef8154bc3ac90a6c963e91d44b71c":["a89b9d540812dfb991cad1cd713cf271ec08892c"],"d218decf811b7a0a4d86218c54c79c74a962374b":["a4a9d755535ef8154bc3ac90a6c963e91d44b71c"],"a89b9d540812dfb991cad1cd713cf271ec08892c":["849dbf8570155b8e5fd03d8c2274a0a60491051c"],"8476949555f799dff381770c01cfad051a264487":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"849dbf8570155b8e5fd03d8c2274a0a60491051c":["8476949555f799dff381770c01cfad051a264487"],"b945b8f5bba0303382bc69d60c0c287714f23328":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","a4a9d755535ef8154bc3ac90a6c963e91d44b71c"],"e98520789adb1d5ad05afb4956eca0944a929688":["b409047f69fb85704c506753bc23a37d7ad37b54"],"b409047f69fb85704c506753bc23a37d7ad37b54":["d218decf811b7a0a4d86218c54c79c74a962374b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":["849dbf8570155b8e5fd03d8c2274a0a60491051c","a89b9d540812dfb991cad1cd713cf271ec08892c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64ec73f19361ec6354e55c878a349735fa8bc52e"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849dbf8570155b8e5fd03d8c2274a0a60491051c"]},"commit2Childs":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":[],"64ec73f19361ec6354e55c878a349735fa8bc52e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a4a9d755535ef8154bc3ac90a6c963e91d44b71c":["d218decf811b7a0a4d86218c54c79c74a962374b","b945b8f5bba0303382bc69d60c0c287714f23328"],"d218decf811b7a0a4d86218c54c79c74a962374b":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","b409047f69fb85704c506753bc23a37d7ad37b54"],"a89b9d540812dfb991cad1cd713cf271ec08892c":["a4a9d755535ef8154bc3ac90a6c963e91d44b71c","06595b0c22c7d3075c4104d3820cccf95d9d8a43"],"8476949555f799dff381770c01cfad051a264487":["849dbf8570155b8e5fd03d8c2274a0a60491051c"],"849dbf8570155b8e5fd03d8c2274a0a60491051c":["a89b9d540812dfb991cad1cd713cf271ec08892c","06595b0c22c7d3075c4104d3820cccf95d9d8a43","b0b597c65628ca9e73913a07e81691f8229bae35"],"b945b8f5bba0303382bc69d60c0c287714f23328":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c"],"e98520789adb1d5ad05afb4956eca0944a929688":["64ec73f19361ec6354e55c878a349735fa8bc52e"],"b409047f69fb85704c506753bc23a37d7ad37b54":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8476949555f799dff381770c01cfad051a264487","b0b597c65628ca9e73913a07e81691f8229bae35"],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":["b945b8f5bba0303382bc69d60c0c287714f23328"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}