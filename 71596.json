{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processQueueItem(ZkNodeProps,ClusterState,ZkStateWriter).mjava","commits":[{"id":"584c1ee8712b5af28075d98028ccab111d6eeda2","date":1417444624,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processQueueItem(ZkNodeProps,ClusterState,ZkStateWriter).mjava","pathOld":"/dev/null","sourceNew":"    private ClusterState processQueueItem(ZkNodeProps message, ClusterState clusterState, ZkStateWriter zkStateWriter) throws KeeperException, InterruptedException {\n      final String operation = message.getStr(QUEUE_OPERATION);\n      ZkWriteCommand zkWriteCommand = null;\n      final TimerContext timerContext = stats.time(operation);\n      try {\n        zkWriteCommand = processMessage(clusterState, message, operation);\n        stats.success(operation);\n      } catch (Exception e) {\n        // generally there is nothing we can do - in most cases, we have\n        // an issue that will fail again on retry or we cannot communicate with     a\n        // ZooKeeper in which case another Overseer should take over\n        // TODO: if ordering for the message is not important, we could\n        // track retries and put it back on the end of the queue\n        log.error(\"Overseer could not process the current clusterstate state update message, skipping the message.\", e);\n        stats.error(operation);\n      } finally {\n        timerContext.stop();\n      }\n      if (zkWriteCommand != null) {\n        clusterState = zkStateWriter.enqueueUpdate(clusterState, zkWriteCommand);\n      }\n      return clusterState;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9088bc86d5a0e967da50b566ea1dd0c5458ba6f5","date":1418915621,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processQueueItem(ZkNodeProps,ClusterState,ZkStateWriter,boolean,ZkStateWriter.ZkWriteCallback).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processQueueItem(ZkNodeProps,ClusterState,ZkStateWriter).mjava","sourceNew":"    private ClusterState processQueueItem(ZkNodeProps message, ClusterState clusterState, ZkStateWriter zkStateWriter, boolean enableBatching, ZkStateWriter.ZkWriteCallback callback) throws Exception {\n      final String operation = message.getStr(QUEUE_OPERATION);\n      ZkWriteCommand zkWriteCommand = null;\n      final TimerContext timerContext = stats.time(operation);\n      try {\n        zkWriteCommand = processMessage(clusterState, message, operation);\n        stats.success(operation);\n      } catch (Exception e) {\n        // generally there is nothing we can do - in most cases, we have\n        // an issue that will fail again on retry or we cannot communicate with     a\n        // ZooKeeper in which case another Overseer should take over\n        // TODO: if ordering for the message is not important, we could\n        // track retries and put it back on the end of the queue\n        log.error(\"Overseer could not process the current clusterstate state update message, skipping the message.\", e);\n        stats.error(operation);\n      } finally {\n        timerContext.stop();\n      }\n      if (zkWriteCommand != null) {\n        clusterState = zkStateWriter.enqueueUpdate(clusterState, zkWriteCommand, callback);\n        if (!enableBatching)  {\n          clusterState = zkStateWriter.writePendingUpdates();\n        }\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processQueueItem(ZkNodeProps message, ClusterState clusterState, ZkStateWriter zkStateWriter) throws KeeperException, InterruptedException {\n      final String operation = message.getStr(QUEUE_OPERATION);\n      ZkWriteCommand zkWriteCommand = null;\n      final TimerContext timerContext = stats.time(operation);\n      try {\n        zkWriteCommand = processMessage(clusterState, message, operation);\n        stats.success(operation);\n      } catch (Exception e) {\n        // generally there is nothing we can do - in most cases, we have\n        // an issue that will fail again on retry or we cannot communicate with     a\n        // ZooKeeper in which case another Overseer should take over\n        // TODO: if ordering for the message is not important, we could\n        // track retries and put it back on the end of the queue\n        log.error(\"Overseer could not process the current clusterstate state update message, skipping the message.\", e);\n        stats.error(operation);\n      } finally {\n        timerContext.stop();\n      }\n      if (zkWriteCommand != null) {\n        clusterState = zkStateWriter.enqueueUpdate(clusterState, zkWriteCommand);\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9088bc86d5a0e967da50b566ea1dd0c5458ba6f5":["584c1ee8712b5af28075d98028ccab111d6eeda2"],"584c1ee8712b5af28075d98028ccab111d6eeda2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9088bc86d5a0e967da50b566ea1dd0c5458ba6f5"]},"commit2Childs":{"9088bc86d5a0e967da50b566ea1dd0c5458ba6f5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"584c1ee8712b5af28075d98028ccab111d6eeda2":["9088bc86d5a0e967da50b566ea1dd0c5458ba6f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["584c1ee8712b5af28075d98028ccab111d6eeda2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}