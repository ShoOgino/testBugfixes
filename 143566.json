{"path":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","commits":[{"id":"de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e","date":1330665960,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/strategy/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","sourceNew":"  /**\n   * See {@link com.spatial4j.core.query.SpatialArgs#getDistPrecision()}.\n   * A grid level looked up via {@link #getLevelForDistance(double)} is returned.\n   *\n   * @param shape\n   * @param precision 0-0.5\n   * @return 1-maxLevels\n   */\n  public int getMaxLevelForPrecision(Shape shape, double precision) {\n    if (precision < 0 || precision > 0.5) {\n      throw new IllegalArgumentException(\"Precision \" + precision + \" must be between [0-0.5]\");\n    }\n    if (precision == 0 || shape instanceof Point) {\n      return maxLevels;\n    }\n    double bboxArea = shape.getBoundingBox().getArea();\n    if (bboxArea == 0) {\n      return maxLevels;\n    }\n    double avgSideLenFromCenter = Math.sqrt(bboxArea) / 2;\n    return getLevelForDistance(avgSideLenFromCenter * precision);\n  }\n\n","sourceOld":"  /**\n   * See {@link com.spatial4j.core.query.SpatialArgs#getDistPrecision()}.\n   * A grid level looked up via {@link #getLevelForDistance(double)} is returned.\n   *\n   * @param shape\n   * @param precision 0-0.5\n   * @return 1-maxLevels\n   */\n  public int getMaxLevelForPrecision(Shape shape, double precision) {\n    if (precision < 0 || precision > 0.5) {\n      throw new IllegalArgumentException(\"Precision \" + precision + \" must be between [0-0.5]\");\n    }\n    if (precision == 0 || shape instanceof Point) {\n      return maxLevels;\n    }\n    double bboxArea = shape.getBoundingBox().getArea();\n    if (bboxArea == 0) {\n      return maxLevels;\n    }\n    double avgSideLenFromCenter = Math.sqrt(bboxArea) / 2;\n    return getLevelForDistance(avgSideLenFromCenter * precision);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * See {@link com.spatial4j.core.query.SpatialArgs#getDistPrecision()}.\n   * A grid level looked up via {@link #getLevelForDistance(double)} is returned.\n   *\n   * @param shape\n   * @param precision 0-0.5\n   * @return 1-maxLevels\n   */\n  public int getMaxLevelForPrecision(Shape shape, double precision) {\n    if (precision < 0 || precision > 0.5) {\n      throw new IllegalArgumentException(\"Precision \" + precision + \" must be between [0-0.5]\");\n    }\n    if (precision == 0 || shape instanceof Point) {\n      return maxLevels;\n    }\n    double bboxArea = shape.getBoundingBox().getArea();\n    if (bboxArea == 0) {\n      return maxLevels;\n    }\n    double avgSideLenFromCenter = Math.sqrt(bboxArea) / 2;\n    return getLevelForDistance(avgSideLenFromCenter * precision);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getMaxLevelForPrecision(Shape,double).mjava","sourceNew":"  /**\n   * See {@link com.spatial4j.core.query.SpatialArgs#getDistPrecision()}.\n   * A grid level looked up via {@link #getLevelForDistance(double)} is returned.\n   *\n   * @param shape\n   * @param precision 0-0.5\n   * @return 1-maxLevels\n   */\n  public int getMaxLevelForPrecision(Shape shape, double precision) {\n    if (precision < 0 || precision > 0.5) {\n      throw new IllegalArgumentException(\"Precision \" + precision + \" must be between [0-0.5]\");\n    }\n    if (precision == 0 || shape instanceof Point) {\n      return maxLevels;\n    }\n    double bboxArea = shape.getBoundingBox().getArea();\n    if (bboxArea == 0) {\n      return maxLevels;\n    }\n    double avgSideLenFromCenter = Math.sqrt(bboxArea) / 2;\n    return getLevelForDistance(avgSideLenFromCenter * precision);\n  }\n\n","sourceOld":"  /**\n   * See {@link com.spatial4j.core.query.SpatialArgs#getDistPrecision()}.\n   * A grid level looked up via {@link #getLevelForDistance(double)} is returned.\n   *\n   * @param shape\n   * @param precision 0-0.5\n   * @return 1-maxLevels\n   */\n  public int getMaxLevelForPrecision(Shape shape, double precision) {\n    if (precision < 0 || precision > 0.5) {\n      throw new IllegalArgumentException(\"Precision \" + precision + \" must be between [0-0.5]\");\n    }\n    if (precision == 0 || shape instanceof Point) {\n      return maxLevels;\n    }\n    double bboxArea = shape.getBoundingBox().getArea();\n    if (bboxArea == 0) {\n      return maxLevels;\n    }\n    double avgSideLenFromCenter = Math.sqrt(bboxArea) / 2;\n    return getLevelForDistance(avgSideLenFromCenter * precision);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e47768b261c28e7e6032060e8331475c81057953"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e47768b261c28e7e6032060e8331475c81057953":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e"],"de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e47768b261c28e7e6032060e8331475c81057953","de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e"],"e47768b261c28e7e6032060e8331475c81057953":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}