{"path":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv.TermFacet#randomOverrequestParam(Random).mjava","commits":[{"id":"c5ec3c464e62e57df598ba20e010313bf6d5d7b4","date":1589998565,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv.TermFacet#randomOverrequestParam(Random).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * picks a random value for the \"overrequest\" param, biased in favor of interesting test cases.\n     *\n     * @return a number to specify in the request, or null to specify nothing (trigger default behavior)\n     * @see #UNIQUE_FIELD_VALS\n     */\n    public static Integer randomOverrequestParam(final Random r) {\n      switch(r.nextInt(10)) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n          return 0; // 40% of the time, disable overrequest to better stress refinement\n        case 4:\n        case 5:\n          return r.nextInt(UNIQUE_FIELD_VALS); // 20% ask for less them what's needed\n        case 6:\n          return r.nextInt(Integer.MAX_VALUE); // 10%: completley random value, statisticaly more then enough\n        default: break;\n      }\n      // else.... either leave param unspecified (or redundently specify the -1 default)\n      return r.nextBoolean() ? null : -1;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e37e44751b75fc8091af8134b209afde83f6174","date":1593980888,"type":5,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv.TermFacet#randomOverrequestParam(Random,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv.TermFacet#randomOverrequestParam(Random).mjava","sourceNew":"    /**\n     * picks a random value for the \"overrequest\" param, biased in favor of interesting test cases.\n     * <p>\n     * <b>NOTE:</b> due to variations in overrequest behavior betewen <code>metod:enum<code> and other \n     * processors (see <a href=\"https://issues.apache.org/jira/browse/SOLR-14595\">SOLR-14595</a>) this \n     * method takes in the \"sort\" param and returns a constant value of <code>0</code> if the sort is \n     * <code>index asc</code> to ensure that the set of candidate buckets considered during merging \n     * (and refinement) is consistent regardless of what processor is used (and/or what sort is used \n     * on the parent facet)\n     * </p>\n     *\n     * @return a number to specify in the request, or null to specify nothing (trigger default behavior)\n     * @see #UNIQUE_FIELD_VALS\n     * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-14595\">SOLR-14595</a>\n     */\n    public static Integer randomOverrequestParam(final Random r, final String sort) {\n\n      if (\"index asc\".equals(sort)) {\n        return 0; // test work around for SOLR-14595\n      }\n      \n      switch(r.nextInt(10)) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n          return 0; // 40% of the time, disable overrequest to better stress refinement\n        case 4:\n        case 5:\n          return r.nextInt(UNIQUE_FIELD_VALS); // 20% ask for less them what's needed\n        case 6:\n          return r.nextInt(Integer.MAX_VALUE); // 10%: completley random value, statisticaly more then enough\n        default: break;\n      }\n      // else.... either leave param unspecified (or redundently specify the -1 default)\n      return r.nextBoolean() ? null : -1;\n    }\n\n","sourceOld":"    /**\n     * picks a random value for the \"overrequest\" param, biased in favor of interesting test cases.\n     *\n     * @return a number to specify in the request, or null to specify nothing (trigger default behavior)\n     * @see #UNIQUE_FIELD_VALS\n     */\n    public static Integer randomOverrequestParam(final Random r) {\n      switch(r.nextInt(10)) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n          return 0; // 40% of the time, disable overrequest to better stress refinement\n        case 4:\n        case 5:\n          return r.nextInt(UNIQUE_FIELD_VALS); // 20% ask for less them what's needed\n        case 6:\n          return r.nextInt(Integer.MAX_VALUE); // 10%: completley random value, statisticaly more then enough\n        default: break;\n      }\n      // else.... either leave param unspecified (or redundently specify the -1 default)\n      return r.nextBoolean() ? null : -1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5ec3c464e62e57df598ba20e010313bf6d5d7b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2e37e44751b75fc8091af8134b209afde83f6174":["c5ec3c464e62e57df598ba20e010313bf6d5d7b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2e37e44751b75fc8091af8134b209afde83f6174"]},"commit2Childs":{"c5ec3c464e62e57df598ba20e010313bf6d5d7b4":["2e37e44751b75fc8091af8134b209afde83f6174"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5ec3c464e62e57df598ba20e010313bf6d5d7b4"],"2e37e44751b75fc8091af8134b209afde83f6174":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}